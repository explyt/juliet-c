!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":26:25)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":26:32)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":63:30)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":63:37)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":97:30)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":97:37)
#loc222 = loc(fused[#loc9, #loc10])
#loc251 = loc(fused[#loc89, #loc90])
#loc273 = loc(fused[#loc157, #loc158])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc218)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc219)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc220)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc220)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc16)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc17)
        %10 = cir.const #cir.int<100> : !s32i loc(#loc18)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc18)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc225)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc22)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
        %17 = cir.const #cir.int<100> : !s32i loc(#loc24)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc24)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc26)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc226)
      } loc(#loc224)
    } loc(#loc223)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc227)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc227)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc227)
  } loc(#loc221)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc228)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc229)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc230)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc231)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc41)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc42)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc42)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc234)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc235)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc41)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc236)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc237)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc50)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc50)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc239)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc52)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc54)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc52)
      } loc(#loc240)
    } loc(#loc238)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %9 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc220)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    %11 = cir.call @badSource(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc58)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc244)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc244)
      cir.store %13, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc244)
      %14 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc65)
      %15 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc66)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      %17 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc68)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      %19 = cir.call @strlen(%18) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc68)
      %20 = cir.call @strncpy(%15, %16, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc65)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc70)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc71)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc71)
      %26 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc73)
      %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc73)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc245)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      %29 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc76)
      %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
      %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc77)
      cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
    } loc(#loc243)
    cir.return loc(#loc38)
  } loc(#loc232)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc247)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc80)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc248)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc82)
    cir.return loc(#loc79)
  } loc(#loc246)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc249)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc86)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc89, #loc90])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc251)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc88)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc91)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc249)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc94)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc94)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc86)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc86)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc98)
      } else {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc99)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc100)
        %10 = cir.const #cir.int<50> : !s32i loc(#loc101)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc101)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc101)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc254)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc105)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc105)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc107)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc108)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc107)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc109)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc255)
      } loc(#loc253)
    } loc(#loc252)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc256)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc256)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc256)
  } loc(#loc250)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc258)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc116)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc117)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc117)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc259)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc260)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc116)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc261)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc262)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc125)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc264)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc127)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc128)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc129)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc127)
      } loc(#loc265)
    } loc(#loc263)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %9 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc249)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
    %11 = cir.call @goodG2B1Source(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc133)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc267)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc269)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc269)
      cir.store %13, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc269)
      %14 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc140)
      %15 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc141)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
      %17 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc143)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
      %19 = cir.call @strlen(%18) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc143)
      %20 = cir.call @strncpy(%15, %16, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc140)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc145)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc145)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc146)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc147)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc146)
      %26 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc148)
      %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc148)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc270)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc150)
      %29 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc151)
      %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
      %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
      cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
    } loc(#loc268)
    cir.return loc(#loc113)
  } loc(#loc257)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc271)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc157, #loc158])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc273)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc156)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc159)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc271)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc162)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc162)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc164)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc165)
        %10 = cir.const #cir.int<50> : !s32i loc(#loc166)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc167)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc166)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc166)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc276)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc170)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc170)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc172)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc173)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc172)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc174)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc277)
      } loc(#loc275)
    } loc(#loc274)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc278)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc278)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc278)
  } loc(#loc272)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc280)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc181)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc182)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc182)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc281)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc282)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc181)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc283)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc284)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc190)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc190)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc286)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc192)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc193)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc194)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc192)
      } loc(#loc287)
    } loc(#loc285)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc195)
    %9 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc271)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
    %11 = cir.call @goodG2B2Source(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc198)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc289)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc291)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc291)
      cir.store %13, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc291)
      %14 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc205)
      %15 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc206)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc207)
      %17 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc208)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
      %19 = cir.call @strlen(%18) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc208)
      %20 = cir.call @strncpy(%15, %16, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc205)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc210)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc210)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc211)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc212)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc211)
      %26 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc213)
      %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc213)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc292)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc214)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc215)
      %29 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc216)
      %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc217)
      %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc217)
      cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc216)
    } loc(#loc290)
    cir.return loc(#loc178)
  } loc(#loc279)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":24:24)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":28:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":28:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":31:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":31:22)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":31:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":31:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":31:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":31:32)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":32:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":32:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":32:14)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":32:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":32:19)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":34:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":34:5)
#loc29 = loc("/usr/include/string.h":144:1)
#loc30 = loc("/usr/include/string.h":146:14)
#loc31 = loc("/usr/include/string.h":407:1)
#loc32 = loc("/usr/include/string.h":408:33)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("/usr/include/stdlib.h":687:1)
#loc36 = loc("/usr/include/stdlib.h":687:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":37:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":52:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":39:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":39:12)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":40:20)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":40:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":40:31)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":40:42)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":40:43)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":40:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":41:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":41:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":41:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":41:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":41:23)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":41:24)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":41:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":41:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":42:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":42:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":43:22)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":43:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":43:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":43:26)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":44:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":51:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":45:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":45:25)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":47:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":47:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":47:23)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":47:29)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":47:36)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":48:22)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":48:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":48:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":48:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":49:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":49:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":50:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":50:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":125:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":129:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":127:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":127:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":128:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":128:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":59:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":59:29)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":68:19)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":63:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":77:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":64:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":65:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":75:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":65:8)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":66:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":69:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":71:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":68:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":73:16)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":73:22)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":73:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":73:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":73:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":73:31)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":74:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":74:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":74:14)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":74:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":74:18)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":76:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":76:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":79:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":94:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":81:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":81:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":82:20)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":82:27)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":82:31)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":82:42)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":82:43)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":82:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":83:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":83:33)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":83:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":83:17)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":83:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":83:24)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":83:30)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":83:29)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":84:22)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":84:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":85:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":85:12)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":85:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":85:31)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":86:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":93:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":87:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":87:25)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":89:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":89:17)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":89:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":89:29)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":89:36)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":90:22)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":90:14)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":90:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":90:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":91:19)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":91:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":92:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":92:14)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":60:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":60:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":97:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":106:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":98:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":99:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":104:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":99:8)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":100:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":102:16)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":102:22)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":102:27)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":102:30)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":102:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":102:31)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":103:22)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":103:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":103:14)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":103:17)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":103:18)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":105:12)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":105:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":108:1)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":123:1)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":110:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":110:12)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":111:20)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":111:27)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":111:31)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":111:42)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":111:43)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":111:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":112:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":112:33)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":112:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":112:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":112:23)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":112:24)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":112:30)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":112:29)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":113:22)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":113:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":114:27)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":114:12)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":114:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":114:31)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":115:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":122:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":116:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":116:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":118:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":118:17)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":118:23)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":118:29)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":118:36)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":119:22)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":119:14)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":119:17)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":119:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":120:19)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":120:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":121:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c":121:14)
#loc218 = loc(fused[#loc1, #loc2])
#loc219 = loc(fused[#loc3, #loc4])
#loc220 = loc(fused[#loc5, #loc6])
#loc221 = loc(fused[#loc7, #loc8])
#loc223 = loc(fused[#loc12, #loc13])
#loc224 = loc(fused[#loc15, #loc13])
#loc225 = loc(fused[#loc20, #loc21])
#loc226 = loc(fused[#loc23, #loc22])
#loc227 = loc(fused[#loc28, #loc27])
#loc228 = loc(fused[#loc29, #loc30])
#loc229 = loc(fused[#loc31, #loc32])
#loc230 = loc(fused[#loc33, #loc34])
#loc231 = loc(fused[#loc35, #loc36])
#loc232 = loc(fused[#loc37, #loc38])
#loc233 = loc(fused[#loc39, #loc40])
#loc234 = loc(fused[#loc43, #loc44])
#loc235 = loc(fused[#loc42, #loc44])
#loc236 = loc(fused[#loc41, #loc45])
#loc237 = loc(fused[#loc46, #loc45])
#loc238 = loc(fused[#loc47, #loc48])
#loc239 = loc(fused[#loc49, #loc50])
#loc240 = loc(fused[#loc51, #loc48])
#loc241 = loc(fused[#loc56, #loc55])
#loc242 = loc(fused[#loc59, #loc60])
#loc243 = loc(fused[#loc61, #loc62])
#loc244 = loc(fused[#loc63, #loc64])
#loc245 = loc(fused[#loc73, #loc70])
#loc246 = loc(fused[#loc78, #loc79])
#loc247 = loc(fused[#loc80, #loc81])
#loc248 = loc(fused[#loc82, #loc83])
#loc249 = loc(fused[#loc84, #loc85])
#loc250 = loc(fused[#loc87, #loc88])
#loc252 = loc(fused[#loc92, #loc93])
#loc253 = loc(fused[#loc95, #loc96, #loc97, #loc93])
#loc254 = loc(fused[#loc103, #loc104])
#loc255 = loc(fused[#loc106, #loc105])
#loc256 = loc(fused[#loc111, #loc110])
#loc257 = loc(fused[#loc112, #loc113])
#loc258 = loc(fused[#loc114, #loc115])
#loc259 = loc(fused[#loc118, #loc119])
#loc260 = loc(fused[#loc117, #loc119])
#loc261 = loc(fused[#loc116, #loc120])
#loc262 = loc(fused[#loc121, #loc120])
#loc263 = loc(fused[#loc122, #loc123])
#loc264 = loc(fused[#loc124, #loc125])
#loc265 = loc(fused[#loc126, #loc123])
#loc266 = loc(fused[#loc131, #loc130])
#loc267 = loc(fused[#loc134, #loc135])
#loc268 = loc(fused[#loc136, #loc137])
#loc269 = loc(fused[#loc138, #loc139])
#loc270 = loc(fused[#loc148, #loc145])
#loc271 = loc(fused[#loc153, #loc154])
#loc272 = loc(fused[#loc155, #loc156])
#loc274 = loc(fused[#loc160, #loc161])
#loc275 = loc(fused[#loc163, #loc161])
#loc276 = loc(fused[#loc168, #loc169])
#loc277 = loc(fused[#loc171, #loc170])
#loc278 = loc(fused[#loc176, #loc175])
#loc279 = loc(fused[#loc177, #loc178])
#loc280 = loc(fused[#loc179, #loc180])
#loc281 = loc(fused[#loc183, #loc184])
#loc282 = loc(fused[#loc182, #loc184])
#loc283 = loc(fused[#loc181, #loc185])
#loc284 = loc(fused[#loc186, #loc185])
#loc285 = loc(fused[#loc187, #loc188])
#loc286 = loc(fused[#loc189, #loc190])
#loc287 = loc(fused[#loc191, #loc188])
#loc288 = loc(fused[#loc196, #loc195])
#loc289 = loc(fused[#loc199, #loc200])
#loc290 = loc(fused[#loc201, #loc202])
#loc291 = loc(fused[#loc203, #loc204])
#loc292 = loc(fused[#loc213, #loc210])
