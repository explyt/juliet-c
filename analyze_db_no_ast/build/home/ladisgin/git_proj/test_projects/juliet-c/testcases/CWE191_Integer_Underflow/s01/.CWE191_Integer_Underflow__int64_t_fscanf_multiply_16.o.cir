!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc113)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc114)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc115)
  cir.func private  @printLongLongLine(!s64i) loc(#loc116)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc118)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc13)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc119)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%3) loc(#loc17)
      } do {
        %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc18)
        %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc114)
        %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc115)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc115)
        %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc18)
        cir.break loc(#loc20)
      } loc(#loc120)
    } loc(#loc120)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc23)
        cir.condition(%3) loc(#loc23)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc27)
          %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc27)
          %5 = cir.cmp(lt, %2, %4) : !s64i, !s32i loc(#loc123)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc28)
          cir.if %6 {
            %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc125)
            %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc31)
            %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc31)
            %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc32)
            cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc125)
            %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc33)
            cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc34)
          } loc(#loc124)
        } loc(#loc122)
        cir.break loc(#loc35)
      } loc(#loc121)
    } loc(#loc121)
    cir.return loc(#loc10)
  } loc(#loc117)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc126)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc49)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc132)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc53)
        cir.condition(%3) loc(#loc53)
      } do {
        %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc54)
        %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc114)
        %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc55)
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc134)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc134)
        %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc54)
        cir.break loc(#loc58)
      } loc(#loc133)
    } loc(#loc133)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc61)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc61)
        cir.condition(%3) loc(#loc61)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc64)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc65)
          %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc65)
          %5 = cir.cmp(lt, %2, %4) : !s64i, !s32i loc(#loc137)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc66)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc70)
              %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc71)
              %9 = cir.unary(minus, %8) : !s64i, !s64i loc(#loc71)
              %10 = cir.const #cir.int<1> : !s64i loc(#loc71)
              %11 = cir.binop(sub, %9, %10) nsw : !s64i loc(#loc71)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc72)
              %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc72)
              %14 = cir.binop(div, %11, %13) : !s64i loc(#loc140)
              %15 = cir.cmp(gt, %7, %14) : !s64i, !s32i loc(#loc141)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc74)
              cir.if %16 {
                %17 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc143)
                %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc80)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc79)
                %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc79)
                %21 = cir.binop(mul, %18, %20) nsw : !s64i loc(#loc80)
                cir.store %21, %17 : !s64i, !cir.ptr<!s64i> loc(#loc143)
                %22 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc81)
                cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc82)
              } else {
                %17 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc44)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc44)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc83)
              } loc(#loc142)
            } loc(#loc139)
          } loc(#loc138)
        } loc(#loc136)
        cir.break loc(#loc84)
      } loc(#loc135)
    } loc(#loc135)
    cir.return loc(#loc46)
  } loc(#loc130)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc89)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc146)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
        cir.condition(%3) loc(#loc93)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc94)
        %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc95)
        %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc95)
        cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc148)
        cir.break loc(#loc97)
      } loc(#loc147)
    } loc(#loc147)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc100)
        cir.condition(%3) loc(#loc100)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc103)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc104)
          %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc104)
          %5 = cir.cmp(lt, %2, %4) : !s64i, !s32i loc(#loc151)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc105)
          cir.if %6 {
            %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc153)
            %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc109)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc108)
            %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc108)
            %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc109)
            cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc153)
            %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc110)
            cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc111)
          } loc(#loc152)
        } loc(#loc150)
        cir.break loc(#loc112)
      } loc(#loc149)
    } loc(#loc149)
    cir.return loc(#loc86)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":30:24)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":30:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":23:1)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":43:1)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":25:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":25:13)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":26:12)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":26:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":27:5)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":32:5)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":27:11)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":30:9)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":30:17)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":31:9)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":33:5)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":42:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":33:11)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":35:9)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":40:9)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":35:12)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":35:19)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":35:17)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":36:9)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":38:13)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":38:37)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":38:30)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":39:31)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":39:13)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":41:9)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":102:1)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":106:1)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":104:5)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":104:13)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":105:5)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":105:13)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":72:27)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":50:1)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":77:1)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":52:5)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":52:13)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":53:12)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":53:5)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":54:5)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":59:5)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":54:11)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":57:9)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":57:17)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":57:24)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":57:28)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":58:9)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":60:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":76:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":60:11)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":62:9)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":74:9)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":62:12)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":62:19)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":62:17)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":63:9)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":65:13)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":73:13)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":65:17)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":65:25)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":65:35)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":65:36)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":65:22)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":66:13)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":69:13)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":71:13)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":67:17)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":67:41)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":67:34)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":68:35)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":68:17)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":72:17)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":75:9)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":80:1)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":100:1)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":82:5)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":82:13)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":83:12)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":83:5)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":84:5)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":89:5)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":84:11)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":87:17)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":87:16)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":87:9)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":88:9)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":90:5)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":99:5)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":90:11)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":92:9)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":97:9)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":92:12)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":92:19)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":92:17)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":93:9)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":95:13)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":95:37)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":95:30)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":96:31)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":96:13)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_16.c":98:9)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc7, #loc8])
#loc117 = loc(fused[#loc9, #loc10])
#loc118 = loc(fused[#loc11, #loc12])
#loc119 = loc(fused[#loc14, #loc13])
#loc120 = loc(fused[#loc15, #loc16])
#loc121 = loc(fused[#loc21, #loc22])
#loc122 = loc(fused[#loc24, #loc25])
#loc123 = loc(fused[#loc26, #loc27])
#loc124 = loc(fused[#loc29, #loc25])
#loc125 = loc(fused[#loc30, #loc31])
#loc126 = loc(fused[#loc36, #loc37])
#loc127 = loc(fused[#loc38, #loc39])
#loc128 = loc(fused[#loc40, #loc41])
#loc129 = loc(fused[#loc42, #loc43])
#loc130 = loc(fused[#loc45, #loc46])
#loc131 = loc(fused[#loc47, #loc48])
#loc132 = loc(fused[#loc50, #loc49])
#loc133 = loc(fused[#loc51, #loc52])
#loc134 = loc(fused[#loc56, #loc57])
#loc135 = loc(fused[#loc59, #loc60])
#loc136 = loc(fused[#loc62, #loc63])
#loc137 = loc(fused[#loc64, #loc65])
#loc138 = loc(fused[#loc67, #loc63])
#loc139 = loc(fused[#loc68, #loc69])
#loc140 = loc(fused[#loc71, #loc72])
#loc141 = loc(fused[#loc70, #loc73])
#loc142 = loc(fused[#loc75, #loc76, #loc77, #loc69])
#loc143 = loc(fused[#loc78, #loc79])
#loc144 = loc(fused[#loc85, #loc86])
#loc145 = loc(fused[#loc87, #loc88])
#loc146 = loc(fused[#loc90, #loc89])
#loc147 = loc(fused[#loc91, #loc92])
#loc148 = loc(fused[#loc96, #loc94])
#loc149 = loc(fused[#loc98, #loc99])
#loc150 = loc(fused[#loc101, #loc102])
#loc151 = loc(fused[#loc103, #loc104])
#loc152 = loc(fused[#loc106, #loc102])
#loc153 = loc(fused[#loc107, #loc108])
