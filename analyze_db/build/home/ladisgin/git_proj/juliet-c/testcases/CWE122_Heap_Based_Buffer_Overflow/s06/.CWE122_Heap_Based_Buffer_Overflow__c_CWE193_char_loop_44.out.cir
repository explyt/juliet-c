!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":28:21)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":28:28)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":105:10)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":105:14)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":105:20)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":105:32)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":63:25)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":63:32)
#loc172 = loc(fused[#loc11, #loc12])
#loc203 = loc(fused[#loc88, #loc89])
#loc204 = loc(fused[#loc90, #loc91])
#loc209 = loc(fused[#loc108, #loc109])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2BSink.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc167)
  cir.global "private" constant cir_private @__const.badSink.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc168)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc169)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc170)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc172)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc168)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc174)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc175)
      %4 = cir.get_global @__const.badSink.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc168)
      cir.copy %4 to %1 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc168)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc19)
      %6 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc20)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc19)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc176)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc25)
        cir.store %13, %2 : !u64i, !cir.ptr<!u64i> loc(#loc178)
        cir.for : cond {
          %14 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc27)
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc28)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc29)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc179)
          %19 = cir.cmp(lt, %14, %18) : !u64i, !cir.bool loc(#loc180)
          cir.condition(%19) loc(#loc30)
        } body {
          cir.scope {
            %14 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc33)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !u64i), !cir.ptr<!s8i> loc(#loc33)
            %17 = cir.load %16 : !cir.ptr<!s8i>, !s8i loc(#loc33)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
            %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc35)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !u64i), !cir.ptr<!s8i> loc(#loc36)
            cir.store %17, %20 : !s8i, !cir.ptr<!s8i> loc(#loc182)
          } loc(#loc181)
          cir.yield loc(#loc24)
        } step {
          %14 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc38)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc39)
          cir.store %15, %2 : !u64i, !cir.ptr<!u64i> loc(#loc183)
          cir.yield loc(#loc177)
        } loc(#loc177)
      } loc(#loc177)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc41)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc42)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc42)
    } loc(#loc173)
    cir.return loc(#loc10)
  } loc(#loc171)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc184)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc185)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc53)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc188)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc54)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc56)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc57)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc57)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc190)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc191)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc56)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc192)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc193)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc65)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc195)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc67)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc68)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc69)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc67)
      } loc(#loc196)
    } loc(#loc194)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc70)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc70)
    cir.return loc(#loc49)
  } loc(#loc186)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc73)
  } loc(#loc197)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc199)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc200)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc85)
  cir.func @main(%arg0: !s32i loc(fused[#loc88, #loc89]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc90, #loc91])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc204)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc87)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc92)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc93)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc94)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc94)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc95)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc82)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_good() : () -> () loc(#loc97)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc83)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc84)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_bad() : () -> () loc(#loc101)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc85)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc104)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    cir.return %17 : !s32i loc(#loc207)
  } loc(#loc202)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc108, #loc109])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc209)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc167)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc211)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc212)
      %4 = cir.get_global @__const.goodG2BSink.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc167)
      cir.copy %4 to %1 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc167)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc116)
      %6 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc117)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc116)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc213)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc122)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc122)
        cir.store %13, %2 : !u64i, !cir.ptr<!u64i> loc(#loc215)
        cir.for : cond {
          %14 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc124)
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc125)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc126)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc126)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc216)
          %19 = cir.cmp(lt, %14, %18) : !u64i, !cir.bool loc(#loc217)
          cir.condition(%19) loc(#loc127)
        } body {
          cir.scope {
            %14 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc129)
            %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc130)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !u64i), !cir.ptr<!s8i> loc(#loc130)
            %17 = cir.load %16 : !cir.ptr<!s8i>, !s8i loc(#loc130)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
            %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc132)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !u64i), !cir.ptr<!s8i> loc(#loc133)
            cir.store %17, %20 : !s8i, !cir.ptr<!s8i> loc(#loc219)
          } loc(#loc218)
          cir.yield loc(#loc121)
        } step {
          %14 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc135)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc136)
          cir.store %15, %2 : !u64i, !cir.ptr<!u64i> loc(#loc220)
          cir.yield loc(#loc214)
        } loc(#loc214)
      } loc(#loc214)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
      cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc138)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc139)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc140)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc139)
    } loc(#loc210)
    cir.return loc(#loc107)
  } loc(#loc208)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc223)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc146)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc223)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc147)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc149)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc150)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc150)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc150)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc225)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc226)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc149)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc227)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
    cir.scope {
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc160)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc160)
      %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc230)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc162)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc163)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc164)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc162)
      } loc(#loc231)
    } loc(#loc229)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc165)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
    cir.call %13(%14) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc165)
    cir.return loc(#loc142)
  } loc(#loc221)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":66:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":66:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":31:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":31:29)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":28:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":43:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":29:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":30:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":42:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":32:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":32:16)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":32:19)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":33:21)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":33:28)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":33:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":33:34)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":36:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":39:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":36:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":36:14)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":36:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":36:25)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":36:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":36:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":37:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":38:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":38:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":38:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":38:18)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":38:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":38:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":36:41)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":36:40)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":40:19)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":40:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":41:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":41:14)
#loc44 = loc("/usr/include/stdlib.h":672:1)
#loc45 = loc("/usr/include/stdlib.h":672:45)
#loc46 = loc("/usr/include/stdlib.h":756:1)
#loc47 = loc("/usr/include/stdlib.h":756:70)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":45:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":56:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":47:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":47:12)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":49:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":49:32)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":50:12)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":50:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":52:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":52:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":52:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":52:41)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":52:42)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":52:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":53:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":53:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":53:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":53:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":53:23)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":53:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":53:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":53:29)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":55:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":55:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":91:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":94:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":93:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":93:13)
#loc76 = loc("/usr/include/stdlib.h":575:1)
#loc77 = loc("/usr/include/stdlib.h":575:41)
#loc78 = loc("/usr/include/time.h":76:1)
#loc79 = loc("/usr/include/time.h":76:38)
#loc80 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":110:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":112:15)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":115:15)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":117:15)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":105:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":120:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":106:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":108:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":108:22)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":108:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":110:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":111:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":111:67)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":112:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":115:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":116:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":116:66)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":117:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":119:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":119:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":63:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":78:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":64:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":65:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":77:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":67:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":67:16)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":67:19)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":68:21)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":68:28)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":68:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":68:34)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":71:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":74:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":71:18)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":71:14)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":71:21)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":71:25)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":71:37)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":71:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":72:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":73:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":73:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":73:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":73:18)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":73:19)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":73:31)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":71:41)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":71:40)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":75:19)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":75:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":76:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":76:14)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":80:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":89:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":82:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":82:12)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":83:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":83:32)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":84:12)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":84:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":86:20)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":86:28)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":86:31)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":86:34)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":86:45)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":86:27)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":86:46)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":86:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":87:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":87:33)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":87:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":87:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":87:23)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":87:24)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":87:30)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":87:29)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":88:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c":88:13)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc7, #loc8])
#loc171 = loc(fused[#loc9, #loc10])
#loc173 = loc(fused[#loc14, #loc15])
#loc174 = loc(fused[#loc16, #loc17])
#loc175 = loc(fused[#loc16, #loc18])
#loc176 = loc(fused[#loc21, #loc22])
#loc177 = loc(fused[#loc23, #loc24])
#loc178 = loc(fused[#loc26, #loc25])
#loc179 = loc(fused[#loc28, #loc29])
#loc180 = loc(fused[#loc27, #loc29])
#loc181 = loc(fused[#loc31, #loc24])
#loc182 = loc(fused[#loc34, #loc37])
#loc183 = loc(fused[#loc39, #loc38])
#loc184 = loc(fused[#loc44, #loc45])
#loc185 = loc(fused[#loc46, #loc47])
#loc186 = loc(fused[#loc48, #loc49])
#loc187 = loc(fused[#loc50, #loc51])
#loc188 = loc(fused[#loc52, #loc53])
#loc189 = loc(fused[#loc55, #loc54])
#loc190 = loc(fused[#loc58, #loc59])
#loc191 = loc(fused[#loc57, #loc59])
#loc192 = loc(fused[#loc56, #loc60])
#loc193 = loc(fused[#loc61, #loc60])
#loc194 = loc(fused[#loc62, #loc63])
#loc195 = loc(fused[#loc64, #loc65])
#loc196 = loc(fused[#loc66, #loc63])
#loc197 = loc(fused[#loc72, #loc73])
#loc198 = loc(fused[#loc74, #loc75])
#loc199 = loc(fused[#loc76, #loc77])
#loc200 = loc(fused[#loc78, #loc79])
#loc201 = loc(fused[#loc80, #loc81])
#loc202 = loc(fused[#loc86, #loc87])
#loc205 = loc(fused[#loc97, #loc98])
#loc206 = loc(fused[#loc101, #loc102])
#loc207 = loc(fused[#loc105, #loc104])
#loc208 = loc(fused[#loc106, #loc107])
#loc210 = loc(fused[#loc111, #loc112])
#loc211 = loc(fused[#loc113, #loc114])
#loc212 = loc(fused[#loc113, #loc115])
#loc213 = loc(fused[#loc118, #loc119])
#loc214 = loc(fused[#loc120, #loc121])
#loc215 = loc(fused[#loc123, #loc122])
#loc216 = loc(fused[#loc125, #loc126])
#loc217 = loc(fused[#loc124, #loc126])
#loc218 = loc(fused[#loc128, #loc121])
#loc219 = loc(fused[#loc131, #loc134])
#loc220 = loc(fused[#loc136, #loc135])
#loc221 = loc(fused[#loc141, #loc142])
#loc222 = loc(fused[#loc143, #loc144])
#loc223 = loc(fused[#loc145, #loc146])
#loc224 = loc(fused[#loc148, #loc147])
#loc225 = loc(fused[#loc152, #loc153])
#loc226 = loc(fused[#loc154, #loc153])
#loc227 = loc(fused[#loc149, #loc155])
#loc228 = loc(fused[#loc156, #loc155])
#loc229 = loc(fused[#loc157, #loc158])
#loc230 = loc(fused[#loc159, #loc160])
#loc231 = loc(fused[#loc161, #loc158])
