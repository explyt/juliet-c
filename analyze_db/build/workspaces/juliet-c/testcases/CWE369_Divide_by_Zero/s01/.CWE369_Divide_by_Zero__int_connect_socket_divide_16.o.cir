!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc272)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc273)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc274)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc275)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc276)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc277)
  cir.func private @close(!s32i) -> !s32i loc(#loc278)
  cir.func private @printIntLine(!s32i) loc(#loc279)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc23)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc27)
        cir.condition(%4) loc(#loc27)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc286)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc287)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc288)
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc289)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc36)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc288)
            cir.scope {
              cir.do {
                cir.scope {
                  %9 = cir.const #cir.int<2> : !s32i loc(#loc43)
                  %10 = cir.const #cir.int<1> : !s32i loc(#loc44)
                  %11 = cir.const #cir.int<6> : !s32i loc(#loc45)
                  %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
                  cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc292)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc51)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc52)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc52)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc294)
                    cir.if %54 {
                      cir.break loc(#loc54)
                    } loc(#loc295)
                  } loc(#loc293)
                  %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc296)
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc57)
                  %15 = cir.const #cir.int<16> : !u64i loc(#loc297)
                  cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc298)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc62)
                  %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc62)
                  %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
                  cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc299)
                  %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc65)
                  %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
                  %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
                  cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc300)
                  %24 = cir.const #cir.int<27015> : !s32i loc(#loc70)
                  %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc70)
                  %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc71)
                  %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                  cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc301)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                    %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc303)
                    %53 = cir.const #cir.int<16> : !u64i loc(#loc304)
                    %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc304)
                    %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc82)
                    %56 = cir.const #cir.int<1> : !s32i loc(#loc83)
                    %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc83)
                    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc305)
                    cir.if %58 {
                      cir.break loc(#loc85)
                    } loc(#loc306)
                  } loc(#loc302)
                  %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                  %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc87)
                  %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
                  %31 = cir.const #cir.int<3> : !s32i loc(#loc88)
                  %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc88)
                  %33 = cir.const #cir.int<4> : !u64i loc(#loc88)
                  %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc88)
                  %35 = cir.const #cir.int<2> : !s32i loc(#loc88)
                  %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc88)
                  %37 = cir.binop(add, %34, %36) : !u64i loc(#loc88)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc89)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc89)
                  %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc307)
                  %41 = cir.const #cir.int<0> : !s32i loc(#loc90)
                  %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc91)
                  %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc91)
                  cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc308)
                  cir.scope {
                    %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc97)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc97)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc310)
                    %55 = cir.ternary(%54, true {
                      %56 = cir.const #true loc(#loc98)
                      cir.yield %56 : !cir.bool loc(#loc98)
                    }, false {
                      %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                      %57 = cir.const #cir.int<0> : !s32i loc(#loc100)
                      %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc311)
                      %59 = cir.ternary(%58, true {
                        %60 = cir.const #true loc(#loc98)
                        cir.yield %60 : !cir.bool loc(#loc98)
                      }, false {
                        %60 = cir.const #false loc(#loc98)
                        cir.yield %60 : !cir.bool loc(#loc98)
                      }) : (!cir.bool) -> !cir.bool loc(#loc98)
                      cir.yield %59 : !cir.bool loc(#loc98)
                    }) : (!cir.bool) -> !cir.bool loc(#loc98)
                    cir.if %55 {
                      cir.break loc(#loc102)
                    } loc(#loc312)
                  } loc(#loc309)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc103)
                  %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc103)
                  %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                  %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
                  %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc105)
                  cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc313)
                  %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc106)
                  %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc107)
                  cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
                } loc(#loc291)
                cir.yield loc(#loc40)
              } while {
                %9 = cir.const #cir.int<0> : !s32i loc(#loc110)
                %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc110)
                cir.condition(%10) loc(#loc110)
              } loc(#loc290)
            } loc(#loc290)
            cir.scope {
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc114)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc114)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc316)
              cir.if %12 {
                %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc117)
              } loc(#loc317)
            } loc(#loc315)
          } loc(#loc285)
          cir.break loc(#loc118)
        } loc(#loc284)
        cir.yield loc(#loc26)
      } loc(#loc283)
    } loc(#loc283)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc121)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc121)
        cir.condition(%4) loc(#loc121)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<100> : !s32i loc(#loc123)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %5 = cir.binop(div, %3, %4) : !s32i loc(#loc320)
          cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc125)
          cir.break loc(#loc126)
        } loc(#loc319)
        cir.yield loc(#loc120)
      } loc(#loc318)
    } loc(#loc318)
    cir.return loc(#loc19)
  } loc(#loc280)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc322)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc129)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc323)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc131)
    cir.return loc(#loc128)
  } loc(#loc321)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc324)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc135)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc326)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc141)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc145)
        cir.condition(%4) loc(#loc145)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc331)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc332)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc333)
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc334)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc154)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc154)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc333)
            cir.scope {
              cir.do {
                cir.scope {
                  %9 = cir.const #cir.int<2> : !s32i loc(#loc161)
                  %10 = cir.const #cir.int<1> : !s32i loc(#loc162)
                  %11 = cir.const #cir.int<6> : !s32i loc(#loc163)
                  %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc164)
                  cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc337)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc169)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc170)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc170)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc339)
                    cir.if %54 {
                      cir.break loc(#loc172)
                    } loc(#loc340)
                  } loc(#loc338)
                  %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc341)
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc175)
                  %15 = cir.const #cir.int<16> : !u64i loc(#loc342)
                  cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc343)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc180)
                  %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc180)
                  %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
                  cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc344)
                  %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc182)
                  %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc182)
                  %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc183)
                  %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
                  %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
                  cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc345)
                  %24 = cir.const #cir.int<27015> : !s32i loc(#loc186)
                  %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc186)
                  %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc187)
                  %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                  cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc346)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc192)
                    %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc348)
                    %53 = cir.const #cir.int<16> : !u64i loc(#loc349)
                    %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc349)
                    %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc197)
                    %56 = cir.const #cir.int<1> : !s32i loc(#loc198)
                    %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc198)
                    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc350)
                    cir.if %58 {
                      cir.break loc(#loc200)
                    } loc(#loc351)
                  } loc(#loc347)
                  %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc201)
                  %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc202)
                  %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc202)
                  %31 = cir.const #cir.int<3> : !s32i loc(#loc203)
                  %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc203)
                  %33 = cir.const #cir.int<4> : !u64i loc(#loc203)
                  %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc203)
                  %35 = cir.const #cir.int<2> : !s32i loc(#loc203)
                  %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc203)
                  %37 = cir.binop(add, %34, %36) : !u64i loc(#loc203)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc204)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc204)
                  %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc352)
                  %41 = cir.const #cir.int<0> : !s32i loc(#loc205)
                  %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc206)
                  %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc206)
                  cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc353)
                  cir.scope {
                    %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc211)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc212)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc212)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc355)
                    %55 = cir.ternary(%54, true {
                      %56 = cir.const #true loc(#loc213)
                      cir.yield %56 : !cir.bool loc(#loc213)
                    }, false {
                      %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc214)
                      %57 = cir.const #cir.int<0> : !s32i loc(#loc215)
                      %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc356)
                      %59 = cir.ternary(%58, true {
                        %60 = cir.const #true loc(#loc213)
                        cir.yield %60 : !cir.bool loc(#loc213)
                      }, false {
                        %60 = cir.const #false loc(#loc213)
                        cir.yield %60 : !cir.bool loc(#loc213)
                      }) : (!cir.bool) -> !cir.bool loc(#loc213)
                      cir.yield %59 : !cir.bool loc(#loc213)
                    }) : (!cir.bool) -> !cir.bool loc(#loc213)
                    cir.if %55 {
                      cir.break loc(#loc217)
                    } loc(#loc357)
                  } loc(#loc354)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc218)
                  %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc218)
                  %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc219)
                  %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc220)
                  %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc220)
                  cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc358)
                  %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc221)
                  %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc222)
                  cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
                } loc(#loc336)
                cir.yield loc(#loc158)
              } while {
                %9 = cir.const #cir.int<0> : !s32i loc(#loc225)
                %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc225)
                cir.condition(%10) loc(#loc225)
              } loc(#loc335)
            } loc(#loc335)
            cir.scope {
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc228)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc229)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc229)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc361)
              cir.if %12 {
                %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc232)
              } loc(#loc362)
            } loc(#loc360)
          } loc(#loc330)
          cir.break loc(#loc233)
        } loc(#loc329)
        cir.yield loc(#loc144)
      } loc(#loc328)
    } loc(#loc328)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc236)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc236)
        cir.condition(%4) loc(#loc236)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc240)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc241)
            %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc366)
            cir.if %5 {
              %6 = cir.const #cir.int<100> : !s32i loc(#loc245)
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc246)
              %8 = cir.binop(div, %6, %7) : !s32i loc(#loc368)
              cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc247)
            } else {
              %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc135)
              %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc135)
              cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc248)
            } loc(#loc367)
          } loc(#loc365)
          cir.break loc(#loc249)
        } loc(#loc364)
        cir.yield loc(#loc235)
      } loc(#loc363)
    } loc(#loc363)
    cir.return loc(#loc137)
  } loc(#loc325)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc370)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc254)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc255)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc371)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc259)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc259)
        cir.condition(%4) loc(#loc259)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<7> : !s32i loc(#loc261)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc374)
          cir.break loc(#loc263)
        } loc(#loc373)
        cir.yield loc(#loc258)
      } loc(#loc372)
    } loc(#loc372)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc266)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc266)
        cir.condition(%4) loc(#loc266)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<100> : !s32i loc(#loc268)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
          %5 = cir.binop(div, %3, %4) : !s32i loc(#loc377)
          cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc270)
          cir.break loc(#loc271)
        } loc(#loc376)
        cir.yield loc(#loc265)
      } loc(#loc375)
    } loc(#loc375)
    cir.return loc(#loc251)
  } loc(#loc369)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":77:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":44:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":115:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":46:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":46:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":48:13)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":48:12)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":48:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":49:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":108:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":49:11)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":50:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":51:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":106:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":56:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":56:17)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":57:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":57:32)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":58:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":58:36)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":59:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":59:45)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":60:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":95:21)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":61:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":94:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":70:40)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":70:49)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":70:62)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":70:33)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":70:17)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":70:73)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":71:17)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":74:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":71:21)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":71:38)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":72:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":73:21)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":75:24)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":75:25)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":75:34)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":75:37)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":75:51)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":75:17)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":75:52)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":76:38)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":76:17)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":77:43)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":77:17)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":77:63)
#loc70 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":78:42)
#loc71 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":78:36)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":78:17)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":78:50)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":79:17)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":82:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":79:29)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":79:62)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":79:63)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":79:72)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":79:86)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":79:21)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":79:92)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":80:17)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":81:21)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":85:35)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":85:50)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":85:63)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":85:81)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":85:84)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":85:30)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":85:17)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":85:85)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":86:17)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":89:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":86:21)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":86:35)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":86:48)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":86:51)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":86:65)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":87:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":88:21)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":91:43)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":91:29)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":91:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":93:29)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":93:24)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":93:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":93:40)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":95:20)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":96:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":99:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":96:17)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":96:34)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":97:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":98:30)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":98:17)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":107:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":109:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":114:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":109:11)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":110:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":112:22)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":112:28)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":112:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":113:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":222:1)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":226:1)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":224:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":224:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":225:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":225:13)
#loc133 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc134 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":196:23)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":122:1)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":200:1)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":124:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":124:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":126:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":126:12)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":126:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":127:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":186:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":127:11)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":128:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":129:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":184:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":134:13)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":134:17)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":135:13)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":135:32)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":136:13)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":136:36)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":137:13)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":137:45)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":138:13)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":173:21)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":139:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":172:13)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":148:40)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":148:49)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":148:62)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":148:33)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":148:17)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":148:73)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":149:17)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":152:17)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":149:21)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":149:38)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":150:17)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":151:21)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":153:24)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":153:25)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":153:34)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":153:37)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":153:51)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":153:17)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":153:52)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":154:38)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":154:17)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":155:53)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":155:43)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":155:17)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":155:63)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":156:42)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":156:36)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":156:17)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":156:50)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":157:17)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":160:17)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":157:29)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":157:62)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":157:63)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":157:72)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":157:86)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":157:21)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":157:92)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":158:17)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":159:21)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":163:35)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":163:50)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":163:63)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":163:81)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":163:84)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":163:30)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":163:17)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":163:85)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":164:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":167:17)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":164:21)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":164:35)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":164:48)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":164:51)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":164:65)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":165:17)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":166:21)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":169:43)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":169:29)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":169:17)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":171:29)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":171:24)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":171:17)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":171:40)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":173:20)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":174:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":177:13)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":174:17)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":174:34)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":175:13)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":176:30)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":176:17)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":185:9)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":187:5)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":199:5)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":187:11)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":188:5)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":190:9)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":197:9)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":190:13)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":190:21)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":191:9)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":193:9)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":195:9)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":192:26)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":192:32)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":192:13)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":196:13)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":198:9)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":203:1)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":220:1)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":205:5)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":205:9)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":207:13)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":207:12)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":207:5)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":208:5)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":213:5)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":208:11)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":209:5)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":211:16)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":211:9)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":212:9)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":214:5)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":219:5)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":214:11)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":215:5)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":217:22)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":217:28)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":217:9)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_16.c":218:9)
#loc272 = loc(fused[#loc1, #loc2])
#loc273 = loc(fused[#loc3, #loc4])
#loc274 = loc(fused[#loc6, #loc7])
#loc275 = loc(fused[#loc8, #loc9])
#loc276 = loc(fused[#loc10, #loc11])
#loc277 = loc(fused[#loc12, #loc13])
#loc278 = loc(fused[#loc14, #loc15])
#loc279 = loc(fused[#loc16, #loc17])
#loc280 = loc(fused[#loc18, #loc19])
#loc281 = loc(fused[#loc20, #loc21])
#loc282 = loc(fused[#loc24, #loc22])
#loc283 = loc(fused[#loc25, #loc26])
#loc284 = loc(fused[#loc28, #loc26])
#loc285 = loc(fused[#loc29, #loc30])
#loc286 = loc(fused[#loc31, #loc32])
#loc287 = loc(fused[#loc33, #loc34])
#loc288 = loc(fused[#loc35, #loc36])
#loc289 = loc(fused[#loc37, #loc38])
#loc290 = loc(fused[#loc39, #loc40])
#loc291 = loc(fused[#loc41, #loc42])
#loc292 = loc(fused[#loc47, #loc48])
#loc293 = loc(fused[#loc49, #loc50])
#loc294 = loc(fused[#loc51, #loc52])
#loc295 = loc(fused[#loc53, #loc50])
#loc296 = loc(fused[#loc55, #loc56])
#loc297 = loc(fused[#loc58, #loc59])
#loc298 = loc(fused[#loc60, #loc61])
#loc299 = loc(fused[#loc64, #loc62])
#loc300 = loc(fused[#loc68, #loc69])
#loc301 = loc(fused[#loc73, #loc74])
#loc302 = loc(fused[#loc75, #loc76])
#loc303 = loc(fused[#loc78, #loc79])
#loc304 = loc(fused[#loc80, #loc81])
#loc305 = loc(fused[#loc82, #loc83])
#loc306 = loc(fused[#loc84, #loc76])
#loc307 = loc(fused[#loc88, #loc89])
#loc308 = loc(fused[#loc92, #loc93])
#loc309 = loc(fused[#loc94, #loc95])
#loc310 = loc(fused[#loc96, #loc97])
#loc311 = loc(fused[#loc99, #loc100])
#loc312 = loc(fused[#loc101, #loc95])
#loc313 = loc(fused[#loc105, #loc103])
#loc314 = loc(fused[#loc108, #loc109])
#loc315 = loc(fused[#loc111, #loc112])
#loc316 = loc(fused[#loc113, #loc114])
#loc317 = loc(fused[#loc115, #loc112])
#loc318 = loc(fused[#loc119, #loc120])
#loc319 = loc(fused[#loc122, #loc120])
#loc320 = loc(fused[#loc123, #loc124])
#loc321 = loc(fused[#loc127, #loc128])
#loc322 = loc(fused[#loc129, #loc130])
#loc323 = loc(fused[#loc131, #loc132])
#loc324 = loc(fused[#loc133, #loc134])
#loc325 = loc(fused[#loc136, #loc137])
#loc326 = loc(fused[#loc138, #loc139])
#loc327 = loc(fused[#loc142, #loc140])
#loc328 = loc(fused[#loc143, #loc144])
#loc329 = loc(fused[#loc146, #loc144])
#loc330 = loc(fused[#loc147, #loc148])
#loc331 = loc(fused[#loc149, #loc150])
#loc332 = loc(fused[#loc151, #loc152])
#loc333 = loc(fused[#loc153, #loc154])
#loc334 = loc(fused[#loc155, #loc156])
#loc335 = loc(fused[#loc157, #loc158])
#loc336 = loc(fused[#loc159, #loc160])
#loc337 = loc(fused[#loc165, #loc166])
#loc338 = loc(fused[#loc167, #loc168])
#loc339 = loc(fused[#loc169, #loc170])
#loc340 = loc(fused[#loc171, #loc168])
#loc341 = loc(fused[#loc173, #loc174])
#loc342 = loc(fused[#loc176, #loc177])
#loc343 = loc(fused[#loc178, #loc179])
#loc344 = loc(fused[#loc181, #loc180])
#loc345 = loc(fused[#loc184, #loc185])
#loc346 = loc(fused[#loc188, #loc189])
#loc347 = loc(fused[#loc190, #loc191])
#loc348 = loc(fused[#loc193, #loc194])
#loc349 = loc(fused[#loc195, #loc196])
#loc350 = loc(fused[#loc197, #loc198])
#loc351 = loc(fused[#loc199, #loc191])
#loc352 = loc(fused[#loc203, #loc204])
#loc353 = loc(fused[#loc207, #loc208])
#loc354 = loc(fused[#loc209, #loc210])
#loc355 = loc(fused[#loc211, #loc212])
#loc356 = loc(fused[#loc214, #loc215])
#loc357 = loc(fused[#loc216, #loc210])
#loc358 = loc(fused[#loc220, #loc218])
#loc359 = loc(fused[#loc223, #loc224])
#loc360 = loc(fused[#loc226, #loc227])
#loc361 = loc(fused[#loc228, #loc229])
#loc362 = loc(fused[#loc230, #loc227])
#loc363 = loc(fused[#loc234, #loc235])
#loc364 = loc(fused[#loc237, #loc235])
#loc365 = loc(fused[#loc238, #loc239])
#loc366 = loc(fused[#loc240, #loc241])
#loc367 = loc(fused[#loc242, #loc243, #loc244, #loc239])
#loc368 = loc(fused[#loc245, #loc246])
#loc369 = loc(fused[#loc250, #loc251])
#loc370 = loc(fused[#loc252, #loc253])
#loc371 = loc(fused[#loc256, #loc254])
#loc372 = loc(fused[#loc257, #loc258])
#loc373 = loc(fused[#loc260, #loc258])
#loc374 = loc(fused[#loc262, #loc261])
#loc375 = loc(fused[#loc264, #loc265])
#loc376 = loc(fused[#loc267, #loc265])
#loc377 = loc(fused[#loc268, #loc269])
