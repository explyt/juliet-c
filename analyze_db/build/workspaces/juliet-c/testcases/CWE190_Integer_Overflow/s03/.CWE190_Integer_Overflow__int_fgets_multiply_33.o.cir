!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc134)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc135)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc136)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc138)
  cir.func @_ZN46CWE190_Integer_Overflow__int_fgets_multiply_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc141)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc17)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc144)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc144)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc144)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc26)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc27)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc27)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc27)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc27)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc27)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc27)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc27)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc27)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc135)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc29)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc30)
        %18 = cir.cmp(ne, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc146)
        cir.if %18 {
          %19 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
          %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc35)
          cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        } loc(#loc147)
      } loc(#loc145)
    } loc(#loc143)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc150)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc150)
      cir.scope {
        %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc46)
        %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc152)
        cir.if %8 {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc154)
          %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %11 = cir.const #cir.int<2> : !s32i loc(#loc49)
          %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc50)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc154)
          %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc52)
        } loc(#loc153)
      } loc(#loc151)
    } loc(#loc149)
    cir.return loc(#loc13)
  } loc(#loc139)
  cir.func internal private @_ZN46CWE190_Integer_Overflow__int_fgets_multiply_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc157)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc58)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc61)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc161)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc161)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc70)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc163)
        cir.if %9 {
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc165)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc73)
          %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc74)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc165)
          %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc76)
        } loc(#loc164)
      } loc(#loc162)
    } loc(#loc160)
    cir.return loc(#loc54)
  } loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func internal private @_ZN46CWE190_Integer_Overflow__int_fgets_multiply_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc168)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc83)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc171)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc171)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc171)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc93)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc93)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc93)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc93)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc93)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc93)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc93)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc93)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc135)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc94)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc95)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc96)
        %18 = cir.cmp(ne, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc173)
        cir.if %18 {
          %19 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc100)
          %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc101)
          cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc104)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc104)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc105)
        } loc(#loc174)
      } loc(#loc172)
    } loc(#loc170)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc177)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      cir.scope {
        %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc112)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc113)
        %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc179)
        cir.if %8 {
          cir.scope {
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc118)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc119)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc182)
            %13 = cir.cmp(lt, %9, %12) : !s32i, !cir.bool loc(#loc183)
            cir.if %13 {
              %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc185)
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc125)
              %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc126)
              cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc185)
              %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc127)
              cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc128)
            } else {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc129)
            } loc(#loc184)
          } loc(#loc181)
        } loc(#loc180)
      } loc(#loc178)
    } loc(#loc176)
    cir.return loc(#loc79)
  } loc(#loc166)
  cir.func @_ZN46CWE190_Integer_Overflow__int_fgets_multiply_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN46CWE190_Integer_Overflow__int_fgets_multiply_33L7goodG2BEv() : () -> () loc(#loc132)
    cir.call @_ZN46CWE190_Integer_Overflow__int_fgets_multiply_33L7goodB2GEv() : () -> () loc(#loc133)
    cir.return loc(#loc131)
  } loc(#loc186)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":43:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":27:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":55:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":29:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":29:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":30:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":30:20)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":32:12)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":32:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":33:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":45:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":34:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":34:45)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":36:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":44:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":36:19)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":36:32)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":36:49)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":36:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":36:59)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":37:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":40:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":42:9)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":39:25)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":39:20)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":39:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":39:36)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":43:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":46:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":54:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":47:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":47:20)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":48:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":53:9)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":48:12)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":48:19)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":49:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":51:13)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":51:33)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":51:26)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":52:26)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":52:13)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":62:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":79:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":64:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":64:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":65:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":65:20)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":67:12)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":67:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":69:12)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":69:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":70:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":78:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":71:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":71:20)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":72:9)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":77:9)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":72:12)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":72:19)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":73:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":75:13)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":75:33)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":75:26)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":76:26)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":76:13)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":113:27)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":82:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":117:1)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":84:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":84:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":85:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":85:20)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":87:12)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":87:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":88:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":100:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":89:9)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":89:45)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":91:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":99:9)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":91:19)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":91:32)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":91:49)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":91:13)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":91:59)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":92:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":95:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":97:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":94:25)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":94:20)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":94:13)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":94:36)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":98:23)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":98:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":101:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":116:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":102:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":102:20)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":103:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":115:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":103:12)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":103:19)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":104:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":106:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":114:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":106:17)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":106:25)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":106:33)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":106:34)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":107:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":110:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":112:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":108:17)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":108:37)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":108:30)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":109:30)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":109:17)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":113:17)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":119:1)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":123:1)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":121:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_33.cpp":122:5)
#loc134 = loc(fused[#loc1, #loc2])
#loc135 = loc(fused[#loc3, #loc4])
#loc136 = loc(fused[#loc5, #loc6])
#loc137 = loc(fused[#loc7, #loc8])
#loc138 = loc(fused[#loc10, #loc11])
#loc139 = loc(fused[#loc12, #loc13])
#loc140 = loc(fused[#loc14, #loc15])
#loc141 = loc(fused[#loc16, #loc17])
#loc142 = loc(fused[#loc19, #loc18])
#loc143 = loc(fused[#loc20, #loc21])
#loc144 = loc(fused[#loc22, #loc23])
#loc145 = loc(fused[#loc24, #loc25])
#loc146 = loc(fused[#loc29, #loc30])
#loc147 = loc(fused[#loc31, #loc32, #loc33, #loc25])
#loc148 = loc(fused[#loc36, #loc37])
#loc149 = loc(fused[#loc39, #loc40])
#loc150 = loc(fused[#loc41, #loc42])
#loc151 = loc(fused[#loc43, #loc44])
#loc152 = loc(fused[#loc45, #loc46])
#loc153 = loc(fused[#loc47, #loc44])
#loc154 = loc(fused[#loc48, #loc49])
#loc155 = loc(fused[#loc53, #loc54])
#loc156 = loc(fused[#loc55, #loc56])
#loc157 = loc(fused[#loc57, #loc58])
#loc158 = loc(fused[#loc60, #loc59])
#loc159 = loc(fused[#loc62, #loc61])
#loc160 = loc(fused[#loc63, #loc64])
#loc161 = loc(fused[#loc65, #loc66])
#loc162 = loc(fused[#loc67, #loc68])
#loc163 = loc(fused[#loc69, #loc70])
#loc164 = loc(fused[#loc71, #loc68])
#loc165 = loc(fused[#loc72, #loc73])
#loc166 = loc(fused[#loc78, #loc79])
#loc167 = loc(fused[#loc80, #loc81])
#loc168 = loc(fused[#loc82, #loc83])
#loc169 = loc(fused[#loc85, #loc84])
#loc170 = loc(fused[#loc86, #loc87])
#loc171 = loc(fused[#loc88, #loc89])
#loc172 = loc(fused[#loc90, #loc91])
#loc173 = loc(fused[#loc95, #loc96])
#loc174 = loc(fused[#loc97, #loc98, #loc99, #loc91])
#loc175 = loc(fused[#loc102, #loc103])
#loc176 = loc(fused[#loc106, #loc107])
#loc177 = loc(fused[#loc108, #loc109])
#loc178 = loc(fused[#loc110, #loc111])
#loc179 = loc(fused[#loc112, #loc113])
#loc180 = loc(fused[#loc114, #loc111])
#loc181 = loc(fused[#loc115, #loc116])
#loc182 = loc(fused[#loc118, #loc119])
#loc183 = loc(fused[#loc117, #loc120])
#loc184 = loc(fused[#loc121, #loc122, #loc123, #loc116])
#loc185 = loc(fused[#loc124, #loc125])
#loc186 = loc(fused[#loc130, #loc131])
