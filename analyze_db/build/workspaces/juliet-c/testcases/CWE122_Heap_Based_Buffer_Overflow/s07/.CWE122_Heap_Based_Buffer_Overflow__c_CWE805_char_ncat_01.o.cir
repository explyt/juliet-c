!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc107)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc108)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc111)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc113)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc114)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc17)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc18)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc18)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc115)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc116)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc117)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc118)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc120)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc30)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc121)
    } loc(#loc119)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc31)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc34)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc122)
    cir.scope {
      %14 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc124)
      %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc39)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc39)
      %17 = cir.const #cir.int<67> : !s32i loc(#loc40)
      %18 = cir.const #cir.int<100> : !s32i loc(#loc41)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc41)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc41)
      cir.libc.memset %21 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc125)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc45)
      %24 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc46)
      %27 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc48)
      %28 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc48)
      cir.store %23, %28 : !s8i, !cir.ptr<!s8i> loc(#loc126)
      %29 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc49)
      %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %31 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
      %32 = cir.const #cir.int<100> : !s32i loc(#loc52)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc52)
      %34 = cir.call @strncat(%30, %31, %33) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc49)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc54)
      %36 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc55)
      %37 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc56)
      cir.call @free(%38) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc55)
    } loc(#loc123)
    cir.return loc(#loc12)
  } loc(#loc112)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    cir.return loc(#loc58)
  } loc(#loc127)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc130)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc65)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc131)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc67)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc68)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc68)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc132)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc133)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc137)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc78)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc80)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
      } loc(#loc138)
    } loc(#loc136)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc81)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc84)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc139)
    cir.scope {
      %14 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc141)
      %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc89)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
      %17 = cir.const #cir.int<67> : !s32i loc(#loc90)
      %18 = cir.const #cir.int<100> : !s32i loc(#loc91)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc92)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc91)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc91)
      cir.libc.memset %21 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc142)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc95)
      %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc95)
      %24 = cir.const #cir.int<100> : !s32i loc(#loc96)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc97)
      %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc96)
      %27 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc98)
      %28 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc98)
      cir.store %23, %28 : !s8i, !cir.ptr<!s8i> loc(#loc143)
      %29 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc99)
      %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
      %31 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc101)
      %32 = cir.const #cir.int<100> : !s32i loc(#loc102)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc102)
      %34 = cir.call @strncat(%30, %31, %33) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc99)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
      cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      %36 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc105)
      %37 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
      %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
      cir.call @free(%38) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc105)
    } loc(#loc140)
    cir.return loc(#loc62)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":152:1)
#loc6 = loc("/usr/include/string.h":153:29)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":40:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":26:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":26:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":28:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":28:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":28:30)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":28:41)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":28:42)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":28:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":29:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":29:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":29:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":29:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":29:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":29:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":29:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":30:15)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":30:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":30:10)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":30:11)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":31:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":39:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":32:24)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":33:16)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":33:24)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":33:29)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":33:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":33:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":33:34)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":34:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":34:16)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":34:20)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":34:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":36:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":36:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":36:23)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":36:31)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":37:19)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":37:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":38:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":38:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":66:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":69:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":68:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":68:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":47:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":64:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":49:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":49:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":50:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":50:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":52:20)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":52:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":52:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":52:42)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":52:43)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":52:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":53:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":53:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":53:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":53:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":53:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":53:24)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":53:30)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":53:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":54:15)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":54:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":54:10)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":54:11)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":55:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":63:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":56:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":56:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":57:16)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":57:24)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":57:29)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":57:33)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":57:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":57:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":58:25)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":58:16)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":58:20)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":58:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":60:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":60:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":60:23)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":60:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":61:19)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":61:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":62:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c":62:14)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc9, #loc10])
#loc112 = loc(fused[#loc11, #loc12])
#loc113 = loc(fused[#loc13, #loc14])
#loc114 = loc(fused[#loc16, #loc15])
#loc115 = loc(fused[#loc19, #loc20])
#loc116 = loc(fused[#loc18, #loc20])
#loc117 = loc(fused[#loc17, #loc21])
#loc118 = loc(fused[#loc22, #loc21])
#loc119 = loc(fused[#loc23, #loc24])
#loc120 = loc(fused[#loc25, #loc26])
#loc121 = loc(fused[#loc27, #loc24])
#loc122 = loc(fused[#loc32, #loc31])
#loc123 = loc(fused[#loc35, #loc36])
#loc124 = loc(fused[#loc37, #loc38])
#loc125 = loc(fused[#loc43, #loc44])
#loc126 = loc(fused[#loc48, #loc45])
#loc127 = loc(fused[#loc57, #loc58])
#loc128 = loc(fused[#loc59, #loc60])
#loc129 = loc(fused[#loc61, #loc62])
#loc130 = loc(fused[#loc63, #loc64])
#loc131 = loc(fused[#loc66, #loc65])
#loc132 = loc(fused[#loc69, #loc70])
#loc133 = loc(fused[#loc68, #loc70])
#loc134 = loc(fused[#loc67, #loc71])
#loc135 = loc(fused[#loc72, #loc71])
#loc136 = loc(fused[#loc73, #loc74])
#loc137 = loc(fused[#loc75, #loc76])
#loc138 = loc(fused[#loc77, #loc74])
#loc139 = loc(fused[#loc82, #loc81])
#loc140 = loc(fused[#loc85, #loc86])
#loc141 = loc(fused[#loc87, #loc88])
#loc142 = loc(fused[#loc93, #loc94])
#loc143 = loc(fused[#loc98, #loc95])
