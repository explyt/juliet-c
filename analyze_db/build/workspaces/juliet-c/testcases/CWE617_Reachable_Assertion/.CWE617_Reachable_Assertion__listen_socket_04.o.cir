!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc190)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc191)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc192)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc193)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc194)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc195)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc196)
  cir.func private @close(!s32i) -> !s32i loc(#loc197)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_04.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_04_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.scope {
      %4 = cir.const #cir.int<1> : !s32i loc(#loc29)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc29)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc205)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc206)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc207)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc208)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc209)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc38)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc207)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc40)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc208)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc47)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc48)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc49)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc212)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc55)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc56)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc56)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc214)
                  cir.if %63 {
                    cir.break loc(#loc58)
                  } loc(#loc215)
                } loc(#loc213)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc216)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc61)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc217)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc218)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc66)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc66)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc219)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc69)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc69)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc220)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc73)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc73)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc74)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc221)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc223)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc224)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc224)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc85)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc86)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc86)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc225)
                  cir.if %67 {
                    cir.break loc(#loc88)
                  } loc(#loc226)
                } loc(#loc222)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc92)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc93)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc94)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc94)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc228)
                  cir.if %65 {
                    cir.break loc(#loc96)
                  } loc(#loc229)
                } loc(#loc227)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc98)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc99)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc100)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc230)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc106)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc106)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc232)
                  cir.if %63 {
                    cir.break loc(#loc108)
                  } loc(#loc233)
                } loc(#loc231)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc110)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc111)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc111)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc111)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc111)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc111)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc111)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc111)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc112)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc112)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc234)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc113)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc114)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc114)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc235)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc120)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc120)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc237)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc121)
                    cir.yield %65 : !cir.bool loc(#loc121)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc123)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc238)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc121)
                      cir.yield %69 : !cir.bool loc(#loc121)
                    }, false {
                      %69 = cir.const #false loc(#loc121)
                      cir.yield %69 : !cir.bool loc(#loc121)
                    }) : (!cir.bool) -> !cir.bool loc(#loc121)
                    cir.yield %68 : !cir.bool loc(#loc121)
                  }) : (!cir.bool) -> !cir.bool loc(#loc121)
                  cir.if %64 {
                    cir.break loc(#loc125)
                  } loc(#loc239)
                } loc(#loc236)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc126)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc126)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc128)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc128)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc240)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc130)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
              } loc(#loc211)
              cir.yield loc(#loc44)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc133)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc133)
              cir.condition(%16) loc(#loc133)
            } loc(#loc210)
          } loc(#loc210)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc137)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc137)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc243)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc139)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc140)
            } loc(#loc244)
          } loc(#loc242)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc144)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc144)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc246)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc147)
            } loc(#loc247)
          } loc(#loc245)
        } loc(#loc204)
      } loc(#loc203)
    } loc(#loc202)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc19)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc19)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc19)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc19)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc19)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc19)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc19)
          %11 = cir.const #cir.int<132> : !s32i loc(#loc19)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc19)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc19)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc19)
        } loc(#loc19)
      } loc(#loc19)
    } loc(#loc19)
    cir.return loc(#loc21)
  } loc(#loc199)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc249)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc150)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc250)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc152)
    cir.return loc(#loc149)
  } loc(#loc248)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc251)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc157)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc163)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc167)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc167)
      cir.if %5 {
        %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc156)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc156)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc171)
      } else {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc172)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc173)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc172)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
      } loc(#loc256)
    } loc(#loc255)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc157)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc157)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc157)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc157)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc157)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc157)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc157)
          %11 = cir.const #cir.int<156> : !s32i loc(#loc157)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc157)
          %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc157)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc157)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc157)
        } loc(#loc157)
      } loc(#loc157)
    } loc(#loc157)
    cir.return loc(#loc159)
  } loc(#loc252)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc175)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc259)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc181)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    cir.scope {
      %4 = cir.const #cir.int<1> : !s32i loc(#loc185)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc185)
      cir.if %5 {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc187)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc188)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc187)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
      } loc(#loc262)
    } loc(#loc261)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc175)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc175)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc175)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc175)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc175)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc175)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc175)
          %11 = cir.const #cir.int<171> : !s32i loc(#loc175)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc175)
          %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc175)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc175)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc175)
        } loc(#loc175)
      } loc(#loc175)
    } loc(#loc175)
    cir.return loc(#loc177)
  } loc(#loc258)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_04.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/include/assert.h":69:1)
#loc18 = loc("/usr/include/assert.h":71:43)
#loc19 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":132:5)
#loc20 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":54:1)
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":133:1)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":56:5)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":56:9)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":58:13)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":58:12)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":58:5)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":59:5)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":130:5)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":59:8)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":60:5)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":61:9)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":129:9)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":66:13)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":66:17)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":67:13)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":67:32)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":68:13)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":68:35)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":69:13)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":69:35)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":70:13)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":70:45)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":71:13)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":114:21)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":72:13)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":113:13)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":81:39)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":81:48)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":81:61)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":81:32)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":81:17)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":81:72)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":82:17)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":85:17)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":82:21)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":82:37)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":83:17)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":84:21)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":86:24)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":86:25)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":86:34)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":86:37)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":86:51)
#loc64 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":86:17)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":86:52)
#loc66 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":87:38)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":87:17)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":88:43)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":88:17)
#loc73 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":89:42)
#loc74 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":89:36)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":89:17)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":89:50)
#loc78 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":90:17)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":93:17)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":90:26)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":90:58)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":90:59)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":90:68)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":90:82)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":90:21)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":90:88)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":91:17)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":92:21)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":94:17)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":97:17)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":94:28)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":94:42)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":94:21)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":94:61)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":95:17)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":96:21)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":98:39)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":98:53)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":98:59)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":98:32)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":98:17)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":98:63)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":99:17)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":102:17)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":99:21)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":99:37)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":100:17)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":101:21)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":104:35)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":104:49)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":104:62)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":104:80)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":104:83)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":104:30)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":104:17)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":104:84)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":105:17)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":108:17)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":105:21)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":105:35)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":105:48)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":105:51)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":105:65)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":106:17)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":107:21)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":110:43)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":110:29)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":110:17)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":112:29)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":112:24)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":112:17)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":112:40)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":114:20)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":115:13)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":118:13)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":115:17)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":115:33)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":116:13)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":117:30)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":117:17)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":119:13)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":122:13)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":119:17)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":119:33)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":120:13)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":121:30)
#loc147 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":121:17)
#loc148 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":174:1)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":178:1)
#loc150 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":176:5)
#loc151 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":176:14)
#loc152 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":177:5)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":177:14)
#loc154 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc155 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc156 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":148:19)
#loc157 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":156:5)
#loc158 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":140:1)
#loc159 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":157:1)
#loc160 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":142:5)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":142:9)
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":144:13)
#loc163 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":144:12)
#loc164 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":144:5)
#loc165 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":145:5)
#loc166 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":154:5)
#loc167 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":145:8)
#loc168 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":146:5)
#loc169 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":149:5)
#loc170 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":151:5)
#loc171 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":148:9)
#loc172 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":153:16)
#loc173 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":153:29)
#loc174 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":153:9)
#loc175 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":171:5)
#loc176 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":160:1)
#loc177 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":172:1)
#loc178 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":162:5)
#loc179 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":162:9)
#loc180 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":164:13)
#loc181 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":164:12)
#loc182 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":164:5)
#loc183 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":165:5)
#loc184 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":169:5)
#loc185 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":165:8)
#loc186 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":166:5)
#loc187 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":168:16)
#loc188 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":168:29)
#loc189 = loc("CWE617_Reachable_Assertion__listen_socket_04.c":168:9)
#loc190 = loc(fused[#loc1, #loc2])
#loc191 = loc(fused[#loc3, #loc4])
#loc192 = loc(fused[#loc5, #loc6])
#loc193 = loc(fused[#loc7, #loc8])
#loc194 = loc(fused[#loc9, #loc10])
#loc195 = loc(fused[#loc11, #loc12])
#loc196 = loc(fused[#loc13, #loc14])
#loc197 = loc(fused[#loc15, #loc16])
#loc198 = loc(fused[#loc17, #loc18])
#loc199 = loc(fused[#loc20, #loc21])
#loc200 = loc(fused[#loc22, #loc23])
#loc201 = loc(fused[#loc26, #loc24])
#loc202 = loc(fused[#loc27, #loc28])
#loc203 = loc(fused[#loc30, #loc28])
#loc204 = loc(fused[#loc31, #loc32])
#loc205 = loc(fused[#loc33, #loc34])
#loc206 = loc(fused[#loc35, #loc36])
#loc207 = loc(fused[#loc37, #loc38])
#loc208 = loc(fused[#loc39, #loc40])
#loc209 = loc(fused[#loc41, #loc42])
#loc210 = loc(fused[#loc43, #loc44])
#loc211 = loc(fused[#loc45, #loc46])
#loc212 = loc(fused[#loc51, #loc52])
#loc213 = loc(fused[#loc53, #loc54])
#loc214 = loc(fused[#loc55, #loc56])
#loc215 = loc(fused[#loc57, #loc54])
#loc216 = loc(fused[#loc59, #loc60])
#loc217 = loc(fused[#loc62, #loc63])
#loc218 = loc(fused[#loc64, #loc65])
#loc219 = loc(fused[#loc68, #loc66])
#loc220 = loc(fused[#loc72, #loc69])
#loc221 = loc(fused[#loc76, #loc77])
#loc222 = loc(fused[#loc78, #loc79])
#loc223 = loc(fused[#loc81, #loc82])
#loc224 = loc(fused[#loc83, #loc84])
#loc225 = loc(fused[#loc85, #loc86])
#loc226 = loc(fused[#loc87, #loc79])
#loc227 = loc(fused[#loc89, #loc90])
#loc228 = loc(fused[#loc93, #loc94])
#loc229 = loc(fused[#loc95, #loc90])
#loc230 = loc(fused[#loc101, #loc102])
#loc231 = loc(fused[#loc103, #loc104])
#loc232 = loc(fused[#loc105, #loc106])
#loc233 = loc(fused[#loc107, #loc104])
#loc234 = loc(fused[#loc111, #loc112])
#loc235 = loc(fused[#loc115, #loc116])
#loc236 = loc(fused[#loc117, #loc118])
#loc237 = loc(fused[#loc119, #loc120])
#loc238 = loc(fused[#loc122, #loc123])
#loc239 = loc(fused[#loc124, #loc118])
#loc240 = loc(fused[#loc128, #loc126])
#loc241 = loc(fused[#loc131, #loc132])
#loc242 = loc(fused[#loc134, #loc135])
#loc243 = loc(fused[#loc136, #loc137])
#loc244 = loc(fused[#loc138, #loc135])
#loc245 = loc(fused[#loc141, #loc142])
#loc246 = loc(fused[#loc143, #loc144])
#loc247 = loc(fused[#loc145, #loc142])
#loc248 = loc(fused[#loc148, #loc149])
#loc249 = loc(fused[#loc150, #loc151])
#loc250 = loc(fused[#loc152, #loc153])
#loc251 = loc(fused[#loc154, #loc155])
#loc252 = loc(fused[#loc158, #loc159])
#loc253 = loc(fused[#loc160, #loc161])
#loc254 = loc(fused[#loc164, #loc162])
#loc255 = loc(fused[#loc165, #loc166])
#loc256 = loc(fused[#loc168, #loc169, #loc170, #loc166])
#loc257 = loc(fused[#loc174, #loc173])
#loc258 = loc(fused[#loc176, #loc177])
#loc259 = loc(fused[#loc178, #loc179])
#loc260 = loc(fused[#loc182, #loc180])
#loc261 = loc(fused[#loc183, #loc184])
#loc262 = loc(fused[#loc186, #loc184])
#loc263 = loc(fused[#loc189, #loc188])
