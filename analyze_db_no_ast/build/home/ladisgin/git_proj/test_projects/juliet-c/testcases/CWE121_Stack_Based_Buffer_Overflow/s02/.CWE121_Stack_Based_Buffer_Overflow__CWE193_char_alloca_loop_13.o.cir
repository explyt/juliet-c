!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc167)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc168)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc171)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc172)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc12)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc173)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc14)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc14)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc14)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
    cir.scope {
      %19 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %21 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %22 = cir.cmp(eq, %20, %21) : !s32i, !s32i loc(#loc175)
      %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc19)
      cir.if %23 {
        %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
        cir.store %24, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc23)
        %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc23)
        %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
        %28 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc26)
        cir.store %26, %29 : !s8i, !cir.ptr<!s8i> loc(#loc178)
      } loc(#loc176)
    } loc(#loc174)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc180)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc181)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc182)
      %22 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc180)
      cir.store %22, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc180)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc34)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc35)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc34)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc183)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc40)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc185)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc44)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc186)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !s32i loc(#loc187)
          %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc45)
          cir.condition(%35) loc(#loc45)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc47)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc48)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc48)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc48)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc51)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc189)
          } loc(#loc188)
          cir.yield loc(#loc39)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc53)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc54)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc190)
          cir.yield loc(#loc184)
        } loc(#loc184)
      } loc(#loc184)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    } loc(#loc179)
    cir.return loc(#loc8)
  } loc(#loc170)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc191)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc195)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc196)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc69)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc69)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc69)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc69)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc69)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc197)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc69)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc69)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc196)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc71)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc71)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc71)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc71)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc71)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc71)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc71)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc71)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    cir.scope {
      %19 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      %21 = cir.const #cir.int<5> : !s32i loc(#loc75)
      %22 = cir.cmp(ne, %20, %21) : !s32i, !s32i loc(#loc199)
      %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc76)
      cir.if %23 {
        %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      } else {
        %24 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
        cir.store %24, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc201)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc83)
        %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc83)
        %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
        %28 = cir.const #cir.int<0> : !s32i loc(#loc85)
        %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc86)
        cir.store %26, %29 : !s8i, !cir.ptr<!s8i> loc(#loc202)
      } loc(#loc200)
    } loc(#loc198)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc204)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc205)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc206)
      %22 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc204)
      cir.store %22, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc204)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc94)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc95)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc94)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc207)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc100)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc100)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc209)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc102)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc103)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc104)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc210)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !s32i loc(#loc211)
          %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc105)
          cir.condition(%35) loc(#loc105)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc107)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc108)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc108)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc108)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc110)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc111)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc213)
          } loc(#loc212)
          cir.yield loc(#loc99)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc113)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc114)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc214)
          cir.yield loc(#loc208)
        } loc(#loc208)
      } loc(#loc208)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    } loc(#loc203)
    cir.return loc(#loc65)
  } loc(#loc194)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc122)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc122)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc122)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc122)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc122)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc218)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc122)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc217)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc124)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc124)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc124)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc124)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc124)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc124)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc124)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
    cir.scope {
      %19 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc127)
      %21 = cir.const #cir.int<5> : !s32i loc(#loc128)
      %22 = cir.cmp(eq, %20, %21) : !s32i, !s32i loc(#loc220)
      %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc129)
      cir.if %23 {
        %24 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
        cir.store %24, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc222)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc133)
        %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc133)
        %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
        %28 = cir.const #cir.int<0> : !s32i loc(#loc135)
        %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc136)
        cir.store %26, %29 : !s8i, !cir.ptr<!s8i> loc(#loc223)
      } loc(#loc221)
    } loc(#loc219)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc225)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc226)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc227)
      %22 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc225)
      cir.store %22, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc225)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc144)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc145)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc144)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc228)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc150)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc150)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc230)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc152)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc153)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc154)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc154)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc231)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !s32i loc(#loc232)
          %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc155)
          cir.condition(%35) loc(#loc155)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc157)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc158)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc158)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc158)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc160)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc161)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc234)
          } loc(#loc233)
          cir.yield loc(#loc149)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc163)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc164)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc235)
          cir.yield loc(#loc229)
        } loc(#loc229)
      } loc(#loc229)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc166)
    } loc(#loc224)
    cir.return loc(#loc118)
  } loc(#loc215)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":28:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":52:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":30:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":30:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":31:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":31:36)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":32:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":32:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":33:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":39:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":33:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":33:27)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":33:25)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":34:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":37:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":37:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":38:19)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":38:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":38:14)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":38:15)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":40:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":51:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":41:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":41:29)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":42:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":42:16)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":42:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":43:21)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":43:28)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":43:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":43:34)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":46:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":49:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":46:18)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":46:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":46:21)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":46:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":46:37)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":46:23)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":47:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":48:30)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":48:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":48:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":48:18)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":48:19)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":48:31)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":46:41)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":46:40)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":50:19)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":50:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":117:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":121:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":119:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":119:14)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":120:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":120:14)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":67:19)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":59:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":88:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":61:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":61:12)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":62:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":62:36)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":63:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":63:37)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":64:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":75:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":64:8)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":64:27)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":64:25)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":65:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":68:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":70:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":67:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":73:16)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":73:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":74:19)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":74:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":74:14)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":74:15)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":76:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":87:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":77:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":77:29)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":78:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":78:16)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":78:19)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":79:21)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":79:28)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":79:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":79:34)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":82:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":85:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":82:18)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":82:14)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":82:21)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":82:25)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":82:37)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":82:23)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":83:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":84:30)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":84:23)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":84:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":84:18)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":84:19)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":84:31)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":82:41)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":82:40)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":86:19)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":86:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":91:1)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":115:1)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":93:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":93:12)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":94:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":94:36)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":95:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":95:37)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":96:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":102:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":96:8)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":96:27)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":96:25)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":97:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":100:16)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":100:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":101:19)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":101:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":101:14)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":101:15)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":103:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":114:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":104:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":104:29)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":105:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":105:16)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":105:19)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":106:21)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":106:28)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":106:9)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":106:34)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":109:9)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":112:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":109:18)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":109:14)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":109:21)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":109:25)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":109:37)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":109:23)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":110:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":111:30)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":111:23)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":111:13)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":111:18)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":111:19)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":111:31)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":109:41)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":109:40)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":113:19)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c":113:9)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc7, #loc8])
#loc171 = loc(fused[#loc9, #loc10])
#loc172 = loc(fused[#loc11, #loc12])
#loc173 = loc(fused[#loc13, #loc14])
#loc174 = loc(fused[#loc15, #loc16])
#loc175 = loc(fused[#loc17, #loc18])
#loc176 = loc(fused[#loc20, #loc16])
#loc177 = loc(fused[#loc22, #loc21])
#loc178 = loc(fused[#loc24, #loc23])
#loc179 = loc(fused[#loc27, #loc28])
#loc180 = loc(fused[#loc29, #loc30])
#loc181 = loc(fused[#loc31, #loc32])
#loc182 = loc(fused[#loc31, #loc33])
#loc183 = loc(fused[#loc36, #loc37])
#loc184 = loc(fused[#loc38, #loc39])
#loc185 = loc(fused[#loc41, #loc40])
#loc186 = loc(fused[#loc43, #loc44])
#loc187 = loc(fused[#loc42, #loc44])
#loc188 = loc(fused[#loc46, #loc39])
#loc189 = loc(fused[#loc49, #loc52])
#loc190 = loc(fused[#loc54, #loc53])
#loc191 = loc(fused[#loc57, #loc58])
#loc192 = loc(fused[#loc59, #loc60])
#loc193 = loc(fused[#loc61, #loc62])
#loc194 = loc(fused[#loc64, #loc65])
#loc195 = loc(fused[#loc66, #loc67])
#loc196 = loc(fused[#loc68, #loc69])
#loc197 = loc(fused[#loc70, #loc71])
#loc198 = loc(fused[#loc72, #loc73])
#loc199 = loc(fused[#loc74, #loc75])
#loc200 = loc(fused[#loc77, #loc78, #loc79, #loc73])
#loc201 = loc(fused[#loc82, #loc81])
#loc202 = loc(fused[#loc84, #loc83])
#loc203 = loc(fused[#loc87, #loc88])
#loc204 = loc(fused[#loc89, #loc90])
#loc205 = loc(fused[#loc91, #loc92])
#loc206 = loc(fused[#loc91, #loc93])
#loc207 = loc(fused[#loc96, #loc97])
#loc208 = loc(fused[#loc98, #loc99])
#loc209 = loc(fused[#loc101, #loc100])
#loc210 = loc(fused[#loc103, #loc104])
#loc211 = loc(fused[#loc102, #loc104])
#loc212 = loc(fused[#loc106, #loc99])
#loc213 = loc(fused[#loc109, #loc112])
#loc214 = loc(fused[#loc114, #loc113])
#loc215 = loc(fused[#loc117, #loc118])
#loc216 = loc(fused[#loc119, #loc120])
#loc217 = loc(fused[#loc121, #loc122])
#loc218 = loc(fused[#loc123, #loc124])
#loc219 = loc(fused[#loc125, #loc126])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc130, #loc126])
#loc222 = loc(fused[#loc132, #loc131])
#loc223 = loc(fused[#loc134, #loc133])
#loc224 = loc(fused[#loc137, #loc138])
#loc225 = loc(fused[#loc139, #loc140])
#loc226 = loc(fused[#loc141, #loc142])
#loc227 = loc(fused[#loc141, #loc143])
#loc228 = loc(fused[#loc146, #loc147])
#loc229 = loc(fused[#loc148, #loc149])
#loc230 = loc(fused[#loc151, #loc150])
#loc231 = loc(fused[#loc153, #loc154])
#loc232 = loc(fused[#loc152, #loc154])
#loc233 = loc(fused[#loc156, #loc149])
#loc234 = loc(fused[#loc159, #loc162])
#loc235 = loc(fused[#loc164, #loc163])
