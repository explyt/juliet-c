!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":112:10)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":112:14)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":112:20)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":112:32)
#loc267 = loc(fused[#loc115, #loc116])
#loc268 = loc(fused[#loc117, #loc118])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc223)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc224)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc225)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc226)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc227)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc230)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc232)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc232)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc234)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc235)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc236)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc237)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc239)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc37)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
          } loc(#loc240)
        } loc(#loc238)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc38)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc38)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc41)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc241)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc42)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc43)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc43)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc242)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc243)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc42)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc244)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc51)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc51)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc247)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc53)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc54)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc55)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc53)
          } loc(#loc248)
        } loc(#loc246)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc56)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc59)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc249)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc251)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc252)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc66)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc67)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc68)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc69)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc68)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc68)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc253)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc72)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc73)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc74)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc73)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc75)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc75)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc254)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc78)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc78)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc256)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc80)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc81)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc81)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc257)
          cir.condition(%34) loc(#loc82)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc84)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc85)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc85)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc85)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc87)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc88)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc259)
          } loc(#loc258)
          cir.yield loc(#loc77)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc90)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc91)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc260)
          cir.yield loc(#loc255)
        } loc(#loc255)
      } loc(#loc255)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc92)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc92)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc94)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc95)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc94)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc96)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc261)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc98)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc99)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
    } loc(#loc250)
    cir.return loc(#loc12)
  } loc(#loc228)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc263)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc103)
    cir.return loc(#loc102)
  } loc(#loc262)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc264)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc265)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc112)
  cir.func @main(%arg0: !s32i loc(fused[#loc115, #loc116]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc117, #loc118])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc267)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc268)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc114)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc119)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc120)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc121)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc121)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc122)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc109)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc269)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12_good() : () -> () loc(#loc124)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc110)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc111)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc270)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12_bad() : () -> () loc(#loc128)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc112)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc112)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc131)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc271)
    cir.return %17 : !s32i loc(#loc271)
  } loc(#loc266)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc273)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc137)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc274)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc276)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc276)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc141)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc141)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc146)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc147)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc147)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc278)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc279)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc146)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc280)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc281)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc283)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc157)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc158)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc159)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc157)
          } loc(#loc284)
        } loc(#loc282)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc160)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc160)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc162)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc163)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc285)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc164)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc165)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc165)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc286)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc287)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc288)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc289)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc173)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc291)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc175)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc176)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc177)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc175)
          } loc(#loc292)
        } loc(#loc290)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc178)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc178)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc180)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc181)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc293)
      } loc(#loc277)
    } loc(#loc275)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc295)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc296)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc188)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc188)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc189)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc190)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc191)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc190)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc190)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc297)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc194)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc194)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc195)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc196)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc195)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc197)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc197)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc298)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc200)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc200)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc300)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc202)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc203)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc203)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc301)
          cir.condition(%34) loc(#loc204)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc206)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc207)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc207)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc207)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc208)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc209)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc210)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc303)
          } loc(#loc302)
          cir.yield loc(#loc199)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc212)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc213)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc304)
          cir.yield loc(#loc299)
        } loc(#loc299)
      } loc(#loc299)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc214)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc214)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc215)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc216)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc217)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc216)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc218)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc305)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc219)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc220)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc221)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc222)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc222)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc221)
    } loc(#loc294)
    cir.return loc(#loc134)
  } loc(#loc272)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":55:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":26:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":26:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":40:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":27:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":27:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":33:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":35:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":30:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":30:31)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":30:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":30:45)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":30:46)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":31:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":31:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":31:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":31:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":31:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":31:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":31:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":32:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":32:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":32:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":32:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":37:24)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":37:31)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":37:35)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":37:46)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":37:47)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":38:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":38:37)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":38:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":38:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":38:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":38:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":38:34)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":38:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":39:19)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":39:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":39:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":39:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":41:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":54:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":42:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":42:16)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":43:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":43:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":44:16)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":44:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":44:29)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":44:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":44:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":44:34)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":45:25)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":45:16)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":45:20)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":45:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":47:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":50:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":47:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":47:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":47:21)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":47:25)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":47:23)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":48:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":49:30)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":49:23)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":49:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":49:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":49:19)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":49:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":47:31)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":47:30)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":51:23)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":51:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":51:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":51:18)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":51:19)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":52:19)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":52:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":53:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":53:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":97:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":100:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":99:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":99:13)
#loc105 = loc("/usr/include/stdlib.h":575:1)
#loc106 = loc("/usr/include/stdlib.h":575:41)
#loc107 = loc("/usr/include/time.h":76:1)
#loc108 = loc("/usr/include/time.h":76:38)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":117:15)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":119:15)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":122:15)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":124:15)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":112:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":127:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":113:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":115:27)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":115:22)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":115:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":117:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":118:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":118:67)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":119:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":122:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":123:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":123:66)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":124:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":126:12)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":126:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":63:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":95:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":65:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":65:12)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":66:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":66:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":67:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":80:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":67:8)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":67:33)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":68:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":73:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":75:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":70:24)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":70:31)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":70:35)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":70:46)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":70:47)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":70:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":71:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":71:37)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":71:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":71:21)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":71:27)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":71:28)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":71:34)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":71:33)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":72:19)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":72:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":72:14)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":72:15)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":77:24)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":77:31)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":77:35)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":77:46)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":77:47)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":77:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":78:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":78:37)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":78:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":78:21)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":78:27)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":78:28)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":78:34)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":78:33)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":79:19)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":79:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":79:14)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":79:15)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":81:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":94:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":82:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":82:16)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":83:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":83:24)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":84:16)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":84:24)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":84:29)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":84:33)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":84:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":84:34)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":85:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":85:16)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":85:20)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":85:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":87:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":90:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":87:18)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":87:14)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":87:21)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":87:25)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":87:23)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":88:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":89:30)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":89:23)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":89:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":89:18)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":89:19)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":89:31)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":87:31)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":87:30)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":91:23)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":91:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":91:14)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":91:18)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":91:19)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":92:19)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":92:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":93:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c":93:14)
#loc223 = loc(fused[#loc1, #loc2])
#loc224 = loc(fused[#loc3, #loc4])
#loc225 = loc(fused[#loc5, #loc6])
#loc226 = loc(fused[#loc7, #loc8])
#loc227 = loc(fused[#loc9, #loc10])
#loc228 = loc(fused[#loc11, #loc12])
#loc229 = loc(fused[#loc13, #loc14])
#loc230 = loc(fused[#loc16, #loc15])
#loc231 = loc(fused[#loc17, #loc18])
#loc232 = loc(fused[#loc19, #loc20])
#loc233 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc234 = loc(fused[#loc26, #loc27])
#loc235 = loc(fused[#loc25, #loc27])
#loc236 = loc(fused[#loc24, #loc28])
#loc237 = loc(fused[#loc29, #loc28])
#loc238 = loc(fused[#loc30, #loc31])
#loc239 = loc(fused[#loc32, #loc33])
#loc240 = loc(fused[#loc34, #loc31])
#loc241 = loc(fused[#loc39, #loc38])
#loc242 = loc(fused[#loc44, #loc45])
#loc243 = loc(fused[#loc43, #loc45])
#loc244 = loc(fused[#loc42, #loc46])
#loc245 = loc(fused[#loc47, #loc46])
#loc246 = loc(fused[#loc48, #loc49])
#loc247 = loc(fused[#loc50, #loc51])
#loc248 = loc(fused[#loc52, #loc49])
#loc249 = loc(fused[#loc57, #loc56])
#loc250 = loc(fused[#loc60, #loc61])
#loc251 = loc(fused[#loc62, #loc63])
#loc252 = loc(fused[#loc64, #loc65])
#loc253 = loc(fused[#loc70, #loc71])
#loc254 = loc(fused[#loc75, #loc72])
#loc255 = loc(fused[#loc76, #loc77])
#loc256 = loc(fused[#loc79, #loc78])
#loc257 = loc(fused[#loc80, #loc81])
#loc258 = loc(fused[#loc83, #loc77])
#loc259 = loc(fused[#loc86, #loc89])
#loc260 = loc(fused[#loc91, #loc90])
#loc261 = loc(fused[#loc93, #loc92])
#loc262 = loc(fused[#loc101, #loc102])
#loc263 = loc(fused[#loc103, #loc104])
#loc264 = loc(fused[#loc105, #loc106])
#loc265 = loc(fused[#loc107, #loc108])
#loc266 = loc(fused[#loc113, #loc114])
#loc269 = loc(fused[#loc124, #loc125])
#loc270 = loc(fused[#loc128, #loc129])
#loc271 = loc(fused[#loc132, #loc131])
#loc272 = loc(fused[#loc133, #loc134])
#loc273 = loc(fused[#loc135, #loc136])
#loc274 = loc(fused[#loc138, #loc137])
#loc275 = loc(fused[#loc139, #loc140])
#loc276 = loc(fused[#loc141, #loc142])
#loc277 = loc(fused[#loc143, #loc144, #loc145, #loc140])
#loc278 = loc(fused[#loc148, #loc149])
#loc279 = loc(fused[#loc147, #loc149])
#loc280 = loc(fused[#loc146, #loc150])
#loc281 = loc(fused[#loc151, #loc150])
#loc282 = loc(fused[#loc152, #loc153])
#loc283 = loc(fused[#loc154, #loc155])
#loc284 = loc(fused[#loc156, #loc153])
#loc285 = loc(fused[#loc161, #loc160])
#loc286 = loc(fused[#loc166, #loc167])
#loc287 = loc(fused[#loc165, #loc167])
#loc288 = loc(fused[#loc164, #loc168])
#loc289 = loc(fused[#loc169, #loc168])
#loc290 = loc(fused[#loc170, #loc171])
#loc291 = loc(fused[#loc172, #loc173])
#loc292 = loc(fused[#loc174, #loc171])
#loc293 = loc(fused[#loc179, #loc178])
#loc294 = loc(fused[#loc182, #loc183])
#loc295 = loc(fused[#loc184, #loc185])
#loc296 = loc(fused[#loc186, #loc187])
#loc297 = loc(fused[#loc192, #loc193])
#loc298 = loc(fused[#loc197, #loc194])
#loc299 = loc(fused[#loc198, #loc199])
#loc300 = loc(fused[#loc201, #loc200])
#loc301 = loc(fused[#loc202, #loc203])
#loc302 = loc(fused[#loc205, #loc199])
#loc303 = loc(fused[#loc208, #loc211])
#loc304 = loc(fused[#loc213, #loc212])
#loc305 = loc(fused[#loc215, #loc214])
