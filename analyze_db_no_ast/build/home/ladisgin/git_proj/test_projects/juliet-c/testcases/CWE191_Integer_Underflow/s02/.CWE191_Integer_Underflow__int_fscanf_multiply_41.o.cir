!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc10 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":22:21)
#loc11 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":22:25)
#loc45 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":68:25)
#loc46 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":68:29)
#loc83 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":47:25)
#loc84 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":47:29)
#loc112 = loc(fused[#loc10, #loc11])
#loc125 = loc(fused[#loc45, #loc46])
#loc138 = loc(fused[#loc83, #loc84])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fscanf_multiply_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc108)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc109)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printIntLine(!s32i) loc(#loc110)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc10, #loc11])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc112)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc12)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
      %3 = cir.cmp(lt, %1, %2) : !s32i, !s32i loc(#loc114)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc116)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc20)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc21)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc116)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc23)
      } loc(#loc115)
    } loc(#loc113)
    cir.return loc(#loc9)
  } loc(#loc111)
  cir.func no_proto  @CWE191_Integer_Underflow__int_fscanf_multiply_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc28)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc30)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc109)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc30)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @badSink(%8) : (!s32i) -> () loc(#loc33)
    cir.return loc(#loc25)
  } loc(#loc117)
  cir.func no_proto  @CWE191_Integer_Underflow__int_fscanf_multiply_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc120)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc42)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc45, #loc46])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc51)
      %3 = cir.cmp(lt, %1, %2) : !s32i, !s32i loc(#loc127)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc57)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc57)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc57)
          %10 = cir.const #cir.int<2> : !s32i loc(#loc58)
          %11 = cir.binop(div, %9, %10) : !s32i loc(#loc130)
          %12 = cir.cmp(gt, %5, %11) : !s32i, !s32i loc(#loc131)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc60)
          cir.if %13 {
            %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc133)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc65)
            %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc66)
            cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc133)
            %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc67)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc68)
          } else {
            %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc42)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc42)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
          } loc(#loc132)
        } loc(#loc129)
      } loc(#loc128)
    } loc(#loc126)
    cir.return loc(#loc44)
  } loc(#loc124)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc76)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc109)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc77)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc78)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc78)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc76)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    cir.call @goodB2GSink(%8) : (!s32i) -> () loc(#loc80)
    cir.return loc(#loc71)
  } loc(#loc134)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc83, #loc84])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc138)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc89)
      %3 = cir.cmp(lt, %1, %2) : !s32i, !s32i loc(#loc140)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc90)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc142)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc93)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc94)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc142)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc96)
      } loc(#loc141)
    } loc(#loc139)
    cir.return loc(#loc82)
  } loc(#loc137)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc101)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc103)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc104)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc107)
    cir.return loc(#loc98)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fscanf_multiply_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":38:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":30:1)
#loc12 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":23:1)
#loc13 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":24:5)
#loc14 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":29:5)
#loc15 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":24:8)
#loc16 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":24:15)
#loc17 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":24:13)
#loc18 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":25:5)
#loc19 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":27:9)
#loc20 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":27:29)
#loc21 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":27:22)
#loc22 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":28:22)
#loc23 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":28:9)
#loc24 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":32:1)
#loc25 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":40:1)
#loc26 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":34:5)
#loc27 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":34:9)
#loc28 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":36:12)
#loc29 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":36:5)
#loc30 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":38:5)
#loc31 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":38:12)
#loc32 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":39:13)
#loc33 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":39:5)
#loc34 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":95:1)
#loc35 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":99:1)
#loc36 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":97:5)
#loc37 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":97:13)
#loc38 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":98:5)
#loc39 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":98:13)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":80:23)
#loc43 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":68:1)
#loc44 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":83:1)
#loc47 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":69:1)
#loc48 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":70:5)
#loc49 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":82:5)
#loc50 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":70:8)
#loc51 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":70:15)
#loc52 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":70:13)
#loc53 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":71:5)
#loc54 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":73:9)
#loc55 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":81:9)
#loc56 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":73:13)
#loc57 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":73:21)
#loc58 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":73:29)
#loc59 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":73:30)
#loc60 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":73:18)
#loc61 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":74:9)
#loc62 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":77:9)
#loc63 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":79:9)
#loc64 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":75:13)
#loc65 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":75:33)
#loc66 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":75:26)
#loc67 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":76:26)
#loc68 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":76:13)
#loc69 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":80:13)
#loc70 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":85:1)
#loc71 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":93:1)
#loc72 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":87:5)
#loc73 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":87:9)
#loc74 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":89:12)
#loc75 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":89:5)
#loc76 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":91:5)
#loc77 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":91:12)
#loc78 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":91:19)
#loc79 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":92:17)
#loc80 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":92:5)
#loc81 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":47:1)
#loc82 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":55:1)
#loc85 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":48:1)
#loc86 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":49:5)
#loc87 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":54:5)
#loc88 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":49:8)
#loc89 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":49:15)
#loc90 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":49:13)
#loc91 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":50:5)
#loc92 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":52:9)
#loc93 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":52:29)
#loc94 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":52:22)
#loc95 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":53:22)
#loc96 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":53:9)
#loc97 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":57:1)
#loc98 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":65:1)
#loc99 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":59:5)
#loc100 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":59:9)
#loc101 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":61:12)
#loc102 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":61:5)
#loc103 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":63:13)
#loc104 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":63:12)
#loc105 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":63:5)
#loc106 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":64:17)
#loc107 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_41.c":64:5)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc6, #loc7])
#loc111 = loc(fused[#loc8, #loc9])
#loc113 = loc(fused[#loc13, #loc14])
#loc114 = loc(fused[#loc15, #loc16])
#loc115 = loc(fused[#loc18, #loc14])
#loc116 = loc(fused[#loc19, #loc20])
#loc117 = loc(fused[#loc24, #loc25])
#loc118 = loc(fused[#loc26, #loc27])
#loc119 = loc(fused[#loc29, #loc28])
#loc120 = loc(fused[#loc34, #loc35])
#loc121 = loc(fused[#loc36, #loc37])
#loc122 = loc(fused[#loc38, #loc39])
#loc123 = loc(fused[#loc40, #loc41])
#loc124 = loc(fused[#loc43, #loc44])
#loc126 = loc(fused[#loc48, #loc49])
#loc127 = loc(fused[#loc50, #loc51])
#loc128 = loc(fused[#loc53, #loc49])
#loc129 = loc(fused[#loc54, #loc55])
#loc130 = loc(fused[#loc57, #loc58])
#loc131 = loc(fused[#loc56, #loc59])
#loc132 = loc(fused[#loc61, #loc62, #loc63, #loc55])
#loc133 = loc(fused[#loc64, #loc65])
#loc134 = loc(fused[#loc70, #loc71])
#loc135 = loc(fused[#loc72, #loc73])
#loc136 = loc(fused[#loc75, #loc74])
#loc137 = loc(fused[#loc81, #loc82])
#loc139 = loc(fused[#loc86, #loc87])
#loc140 = loc(fused[#loc88, #loc89])
#loc141 = loc(fused[#loc91, #loc87])
#loc142 = loc(fused[#loc92, #loc93])
#loc143 = loc(fused[#loc97, #loc98])
#loc144 = loc(fused[#loc99, #loc100])
#loc145 = loc(fused[#loc102, #loc101])
#loc146 = loc(fused[#loc105, #loc103])
