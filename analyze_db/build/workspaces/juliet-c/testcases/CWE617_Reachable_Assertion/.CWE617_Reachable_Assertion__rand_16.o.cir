!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc40)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_16.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_16_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc43)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%5) loc(#loc15)
      } do {
        cir.scope {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc17)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
            cir.yield %21 : !u32i loc(#loc17)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc17)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc17)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc17)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc17)
            cir.yield %25 : !u32i loc(#loc17)
          }) : (!cir.bool) -> !u32i loc(#loc17)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc17)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
          cir.break loc(#loc19)
        } loc(#loc46)
        cir.yield loc(#loc14)
      } loc(#loc45)
    } loc(#loc45)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc5)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc5)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc5)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc5)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
          %11 = cir.const #cir.int<37> : !s32i loc(#loc5)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc5)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
        } loc(#loc5)
      } loc(#loc5)
    } loc(#loc5)
    cir.return loc(#loc7)
  } loc(#loc42)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc49)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc21)
  } loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc51)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc30)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc34)
        cir.condition(%5) loc(#loc34)
      } do {
        cir.scope {
          %4 = cir.const #cir.int<5> : !s32i loc(#loc36)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc36)
          cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
          cir.break loc(#loc39)
        } loc(#loc54)
        cir.yield loc(#loc33)
      } loc(#loc53)
    } loc(#loc53)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc24)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc24)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc24)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc24)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc24)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc24)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc24)
          %11 = cir.const #cir.int<57> : !s32i loc(#loc24)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc24)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc24)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc24)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc24)
        } loc(#loc24)
      } loc(#loc24)
    } loc(#loc24)
    cir.return loc(#loc26)
  } loc(#loc50)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":69:1)
#loc4 = loc("/usr/include/assert.h":71:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_16.c":37:5)
#loc6 = loc("CWE617_Reachable_Assertion__rand_16.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_16.c":38:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_16.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_16.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__rand_16.c":29:13)
#loc11 = loc("CWE617_Reachable_Assertion__rand_16.c":29:12)
#loc12 = loc("CWE617_Reachable_Assertion__rand_16.c":29:5)
#loc13 = loc("CWE617_Reachable_Assertion__rand_16.c":30:5)
#loc14 = loc("CWE617_Reachable_Assertion__rand_16.c":35:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_16.c":30:11)
#loc16 = loc("CWE617_Reachable_Assertion__rand_16.c":31:5)
#loc17 = loc("CWE617_Reachable_Assertion__rand_16.c":33:16)
#loc18 = loc("CWE617_Reachable_Assertion__rand_16.c":33:9)
#loc19 = loc("CWE617_Reachable_Assertion__rand_16.c":34:9)
#loc20 = loc("CWE617_Reachable_Assertion__rand_16.c":60:1)
#loc21 = loc("CWE617_Reachable_Assertion__rand_16.c":63:1)
#loc22 = loc("CWE617_Reachable_Assertion__rand_16.c":62:5)
#loc23 = loc("CWE617_Reachable_Assertion__rand_16.c":62:13)
#loc24 = loc("CWE617_Reachable_Assertion__rand_16.c":57:5)
#loc25 = loc("CWE617_Reachable_Assertion__rand_16.c":45:1)
#loc26 = loc("CWE617_Reachable_Assertion__rand_16.c":58:1)
#loc27 = loc("CWE617_Reachable_Assertion__rand_16.c":47:5)
#loc28 = loc("CWE617_Reachable_Assertion__rand_16.c":47:9)
#loc29 = loc("CWE617_Reachable_Assertion__rand_16.c":49:13)
#loc30 = loc("CWE617_Reachable_Assertion__rand_16.c":49:12)
#loc31 = loc("CWE617_Reachable_Assertion__rand_16.c":49:5)
#loc32 = loc("CWE617_Reachable_Assertion__rand_16.c":50:5)
#loc33 = loc("CWE617_Reachable_Assertion__rand_16.c":55:5)
#loc34 = loc("CWE617_Reachable_Assertion__rand_16.c":50:11)
#loc35 = loc("CWE617_Reachable_Assertion__rand_16.c":51:5)
#loc36 = loc("CWE617_Reachable_Assertion__rand_16.c":53:16)
#loc37 = loc("CWE617_Reachable_Assertion__rand_16.c":53:29)
#loc38 = loc("CWE617_Reachable_Assertion__rand_16.c":53:9)
#loc39 = loc("CWE617_Reachable_Assertion__rand_16.c":54:9)
#loc40 = loc(fused[#loc1, #loc2])
#loc41 = loc(fused[#loc3, #loc4])
#loc42 = loc(fused[#loc6, #loc7])
#loc43 = loc(fused[#loc8, #loc9])
#loc44 = loc(fused[#loc12, #loc10])
#loc45 = loc(fused[#loc13, #loc14])
#loc46 = loc(fused[#loc16, #loc14])
#loc47 = loc(fused[#loc18, #loc17])
#loc48 = loc(fused[#loc20, #loc21])
#loc49 = loc(fused[#loc22, #loc23])
#loc50 = loc(fused[#loc25, #loc26])
#loc51 = loc(fused[#loc27, #loc28])
#loc52 = loc(fused[#loc31, #loc29])
#loc53 = loc(fused[#loc32, #loc33])
#loc54 = loc(fused[#loc35, #loc33])
#loc55 = loc(fused[#loc38, #loc37])
