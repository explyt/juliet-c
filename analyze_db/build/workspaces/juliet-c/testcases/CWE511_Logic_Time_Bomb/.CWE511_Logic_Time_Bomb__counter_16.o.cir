!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc65)
    cir.br ^bb1 loc(#loc66)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc66)
  ^bb2:  // 2 preds: ^bb1, ^bb18
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %2 ^bb3, ^bb19 loc(#loc10)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc67)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc68)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.br ^bb6 loc(#loc69)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc69)
  ^bb7:  // pred: ^bb14
    %4 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc70)
    cir.brcond %6 ^bb8, ^bb15 loc(#loc18)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc71)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc72)
  ^bb10:  // pred: ^bb9
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %8 = cir.const #cir.int<20000> : !s32i loc(#loc24)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc73)
    cir.brcond %9 ^bb11, ^bb12 loc(#loc74)
  ^bb11:  // pred: ^bb10
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
    %12 = cir.call @unlink(%11) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc26)
    cir.br ^bb12 loc(#loc22)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc22)
  ^bb13:  // pred: ^bb12
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %14 = cir.unary(inc, %13) nsw : !s32i, !s32i loc(#loc28)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.br ^bb14 loc(#loc20)
  ^bb14:  // pred: ^bb13
    cir.br ^bb7 loc(#loc15)
  ^bb15:  // pred: ^bb7
    cir.br ^bb16 loc(#loc15)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc13)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc29)
  ^bb18:  // no predecessors
    cir.br ^bb2 loc(#loc9)
  ^bb19:  // 2 preds: ^bb2, ^bb17
    cir.br ^bb20 loc(#loc9)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc5)
  } loc(#loc64)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc31)
  } loc(#loc76)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc80)
    cir.br ^bb1 loc(#loc81)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc81)
  ^bb2:  // 2 preds: ^bb1, ^bb18
    %1 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc43)
    cir.brcond %2 ^bb3, ^bb19 loc(#loc43)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc82)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc83)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.int<0> : !s32i loc(#loc40)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.br ^bb6 loc(#loc84)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc84)
  ^bb7:  // pred: ^bb14
    %4 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc85)
    cir.brcond %6 ^bb8, ^bb15 loc(#loc51)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc86)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc87)
  ^bb10:  // pred: ^bb9
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %8 = cir.const #cir.int<20000> : !s32i loc(#loc57)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc88)
    cir.brcond %9 ^bb11, ^bb12 loc(#loc89)
  ^bb11:  // pred: ^bb10
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.br ^bb12 loc(#loc55)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc55)
  ^bb13:  // pred: ^bb12
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %13 = cir.unary(inc, %12) nsw : !s32i, !s32i loc(#loc61)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.br ^bb14 loc(#loc53)
  ^bb14:  // pred: ^bb13
    cir.br ^bb7 loc(#loc48)
  ^bb15:  // pred: ^bb7
    cir.br ^bb16 loc(#loc48)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc46)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc62)
  ^bb18:  // no predecessors
    cir.br ^bb2 loc(#loc42)
  ^bb19:  // 2 preds: ^bb2, ^bb17
    cir.br ^bb20 loc(#loc42)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc38)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_16.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_16.c":40:28)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_16.c":29:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_16.c":48:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_16.c":34:13)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_16.c":34:25)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_16.c":31:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_16.c":47:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_16.c":31:11)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_16.c":32:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_16.c":33:9)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_16.c":45:9)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_16.c":35:13)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:25)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:19)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:24)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:21)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_16.c":36:13)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_16.c":43:13)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_16.c":38:17)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_16.c":41:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_16.c":38:21)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_16.c":38:30)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_16.c":39:17)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_16.c":40:21)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_16.c":42:22)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_16.c":42:17)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_16.c":46:9)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_16.c":76:1)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_16.c":79:1)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_16.c":78:5)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_16.c":78:11)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_16.c":66:31)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_16.c":55:1)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_16.c":74:1)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_16.c":60:13)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_16.c":60:25)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_16.c":57:5)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_16.c":73:5)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_16.c":57:11)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_16.c":58:5)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_16.c":59:9)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_16.c":71:9)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_16.c":61:13)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:25)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:19)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:24)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:21)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_16.c":62:13)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_16.c":69:13)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_16.c":64:17)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_16.c":67:17)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_16.c":64:21)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_16.c":64:30)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_16.c":65:17)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_16.c":66:21)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_16.c":68:22)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_16.c":68:17)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_16.c":72:9)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc4, #loc5])
#loc65 = loc(fused[#loc6, #loc7])
#loc66 = loc(fused[#loc8, #loc9])
#loc67 = loc(fused[#loc11, #loc9])
#loc68 = loc(fused[#loc12, #loc13])
#loc69 = loc(fused[#loc14, #loc15])
#loc70 = loc(fused[#loc16, #loc17])
#loc71 = loc(fused[#loc19, #loc20])
#loc72 = loc(fused[#loc21, #loc22])
#loc73 = loc(fused[#loc23, #loc24])
#loc74 = loc(fused[#loc25, #loc22])
#loc75 = loc(fused[#loc28, #loc27])
#loc76 = loc(fused[#loc30, #loc31])
#loc77 = loc(fused[#loc32, #loc33])
#loc78 = loc(fused[#loc34, #loc35])
#loc79 = loc(fused[#loc37, #loc38])
#loc80 = loc(fused[#loc39, #loc40])
#loc81 = loc(fused[#loc41, #loc42])
#loc82 = loc(fused[#loc44, #loc42])
#loc83 = loc(fused[#loc45, #loc46])
#loc84 = loc(fused[#loc47, #loc48])
#loc85 = loc(fused[#loc49, #loc50])
#loc86 = loc(fused[#loc52, #loc53])
#loc87 = loc(fused[#loc54, #loc55])
#loc88 = loc(fused[#loc56, #loc57])
#loc89 = loc(fused[#loc58, #loc55])
#loc90 = loc(fused[#loc61, #loc60])
