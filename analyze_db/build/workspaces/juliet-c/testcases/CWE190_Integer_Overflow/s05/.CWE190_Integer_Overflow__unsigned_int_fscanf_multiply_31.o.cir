!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc100)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc102)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc12)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc105)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc14)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc101)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc14)
    cir.scope {
      %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc107)
      %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc108)
      %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc19)
      cir.store %11, %9 : !u32i, !cir.ptr<!u32i> loc(#loc107)
      %12 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc21)
      cir.store %12, %10 : !u32i, !cir.ptr<!u32i> loc(#loc108)
      cir.scope {
        %13 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc24)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc25)
        %16 = cir.cmp(gt, %13, %15) : !u32i, !cir.bool loc(#loc110)
        cir.if %16 {
          %17 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc112)
          %18 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc29)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc28)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc28)
          %21 = cir.binop(mul, %18, %20) : !u32i loc(#loc113)
          cir.store %21, %17 : !u32i, !cir.ptr<!u32i> loc(#loc112)
          %22 = cir.load %17 : !cir.ptr<!u32i>, !u32i loc(#loc30)
          cir.call @printUnsignedLine(%22) : (!u32i) -> () loc(#loc31)
        } loc(#loc111)
      } loc(#loc109)
    } loc(#loc106)
    cir.return loc(#loc9)
  } loc(#loc103)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc116)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc114)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc42)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc119)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc44)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc44)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc120)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc122)
      %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc123)
      %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc49)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc122)
      %8 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc51)
      cir.store %8, %6 : !u32i, !cir.ptr<!u32i> loc(#loc123)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc54)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc55)
        %12 = cir.cmp(gt, %9, %11) : !u32i, !cir.bool loc(#loc125)
        cir.if %12 {
          %13 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
          %14 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc59)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc58)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc58)
          %17 = cir.binop(mul, %14, %16) : !u32i loc(#loc128)
          cir.store %17, %13 : !u32i, !cir.ptr<!u32i> loc(#loc127)
          %18 = cir.load %13 : !cir.ptr<!u32i>, !u32i loc(#loc60)
          cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc61)
        } loc(#loc126)
      } loc(#loc124)
    } loc(#loc121)
    cir.return loc(#loc39)
  } loc(#loc117)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc69)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc132)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc71)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc101)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc72)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc73)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc71)
    cir.scope {
      %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc134)
      %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc135)
      %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc77)
      cir.store %11, %9 : !u32i, !cir.ptr<!u32i> loc(#loc134)
      %12 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc79)
      cir.store %12, %10 : !u32i, !cir.ptr<!u32i> loc(#loc135)
      cir.scope {
        %13 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc82)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc83)
        %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc83)
        %16 = cir.cmp(gt, %13, %15) : !u32i, !cir.bool loc(#loc137)
        cir.if %16 {
          cir.scope {
            %17 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc87)
            %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc88)
            %20 = cir.const #cir.int<2> : !u32i loc(#loc88)
            %21 = cir.binop(mul, %19, %20) : !u32i loc(#loc88)
            %22 = cir.const #cir.int<1> : !u32i loc(#loc88)
            %23 = cir.binop(add, %21, %22) : !u32i loc(#loc88)
            %24 = cir.const #cir.int<2> : !s32i loc(#loc89)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc89)
            %26 = cir.binop(div, %23, %25) : !u32i loc(#loc140)
            %27 = cir.cmp(lt, %17, %26) : !u32i, !cir.bool loc(#loc141)
            cir.if %27 {
              %28 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc143)
              %29 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc96)
              %30 = cir.const #cir.int<2> : !s32i loc(#loc95)
              %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc95)
              %32 = cir.binop(mul, %29, %31) : !u32i loc(#loc144)
              cir.store %32, %28 : !u32i, !cir.ptr<!u32i> loc(#loc143)
              %33 = cir.load %28 : !cir.ptr<!u32i>, !u32i loc(#loc97)
              cir.call @printUnsignedLine(%33) : (!u32i) -> () loc(#loc98)
            } else {
              %28 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc64)
              %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc64)
              cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc99)
            } loc(#loc142)
          } loc(#loc139)
        } loc(#loc138)
      } loc(#loc136)
    } loc(#loc133)
    cir.return loc(#loc66)
  } loc(#loc130)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":27:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":38:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":24:18)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":27:13)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":29:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":29:33)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":30:29)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":36:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":31:12)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":31:19)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":32:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":34:13)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":34:42)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":34:35)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":35:31)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":35:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":89:1)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":93:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":91:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":91:13)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":92:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":92:13)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":45:1)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":61:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":47:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":47:18)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":48:12)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":48:5)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":50:12)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":50:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":51:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":60:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":52:9)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":52:33)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":53:9)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":53:29)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":54:9)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":59:9)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":54:12)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":54:19)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":55:9)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":57:13)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":57:42)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":57:35)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":58:31)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":58:13)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":83:27)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":64:1)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":87:1)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":66:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":66:18)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":67:12)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":67:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":69:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":69:13)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":69:20)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":70:5)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":86:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":71:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":71:33)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":72:9)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":72:29)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":73:9)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":85:9)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":73:12)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":73:19)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":74:9)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:13)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":84:13)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:17)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:25)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:34)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:35)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":77:13)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":80:13)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":82:13)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":78:17)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":78:46)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":78:39)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":79:35)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":79:17)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":83:17)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc6, #loc7])
#loc103 = loc(fused[#loc8, #loc9])
#loc104 = loc(fused[#loc10, #loc11])
#loc105 = loc(fused[#loc13, #loc12])
#loc106 = loc(fused[#loc16, #loc17])
#loc107 = loc(fused[#loc18, #loc19])
#loc108 = loc(fused[#loc20, #loc21])
#loc109 = loc(fused[#loc22, #loc23])
#loc110 = loc(fused[#loc24, #loc25])
#loc111 = loc(fused[#loc26, #loc23])
#loc112 = loc(fused[#loc27, #loc28])
#loc113 = loc(fused[#loc29, #loc28])
#loc114 = loc(fused[#loc32, #loc33])
#loc115 = loc(fused[#loc34, #loc35])
#loc116 = loc(fused[#loc36, #loc37])
#loc117 = loc(fused[#loc38, #loc39])
#loc118 = loc(fused[#loc40, #loc41])
#loc119 = loc(fused[#loc43, #loc42])
#loc120 = loc(fused[#loc45, #loc44])
#loc121 = loc(fused[#loc46, #loc47])
#loc122 = loc(fused[#loc48, #loc49])
#loc123 = loc(fused[#loc50, #loc51])
#loc124 = loc(fused[#loc52, #loc53])
#loc125 = loc(fused[#loc54, #loc55])
#loc126 = loc(fused[#loc56, #loc53])
#loc127 = loc(fused[#loc57, #loc58])
#loc128 = loc(fused[#loc59, #loc58])
#loc129 = loc(fused[#loc62, #loc63])
#loc130 = loc(fused[#loc65, #loc66])
#loc131 = loc(fused[#loc67, #loc68])
#loc132 = loc(fused[#loc70, #loc69])
#loc133 = loc(fused[#loc74, #loc75])
#loc134 = loc(fused[#loc76, #loc77])
#loc135 = loc(fused[#loc78, #loc79])
#loc136 = loc(fused[#loc80, #loc81])
#loc137 = loc(fused[#loc82, #loc83])
#loc138 = loc(fused[#loc84, #loc81])
#loc139 = loc(fused[#loc85, #loc86])
#loc140 = loc(fused[#loc88, #loc89])
#loc141 = loc(fused[#loc87, #loc90])
#loc142 = loc(fused[#loc91, #loc92, #loc93, #loc86])
#loc143 = loc(fused[#loc94, #loc95])
#loc144 = loc(fused[#loc96, #loc95])
