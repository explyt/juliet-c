!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc393 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":301:10)
#loc394 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":301:14)
#loc395 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":301:20)
#loc396 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":301:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc562 = loc(fused[#loc393, #loc394])
#loc563 = loc(fused[#loc395, #loc396])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc409)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc410)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc411)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc412)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc413)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc414)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc415)
  cir.func private @close(!s32i) -> !s32i loc(#loc416)
  cir.func private @printIntLine(!s32i) loc(#loc417)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc418)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc21)
  cir.func @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc420)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc421)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc27)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc29)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc422)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc424)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc425)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc426)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc427)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc428)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc38)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc38)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc426)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc40)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc427)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc45)
          %14 = cir.const #cir.int<1> : !u32i loc(#loc46)
          %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc46)
          %16 = cir.const #cir.int<6> : !u32i loc(#loc47)
          %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc47)
          %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
          cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc430)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc53)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc54)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc54)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc432)
            cir.if %62 {
              cir.break loc(#loc56)
            } loc(#loc433)
          } loc(#loc431)
          %19 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc434)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc59)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc435)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc436)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc64)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc64)
          %24 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc437)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc67)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc67)
          %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc438)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc71)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc71)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc72)
          %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc439)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc78)
            %60 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc441)
            %61 = cir.const #cir.int<16> : !u64i loc(#loc442)
            %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc442)
            %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc83)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc84)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc84)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc443)
            cir.if %66 {
              cir.break loc(#loc86)
            } loc(#loc444)
          } loc(#loc440)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc89)
            %60 = cir.const #cir.int<5> : !s32i loc(#loc90)
            %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc91)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc92)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc92)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc446)
            cir.if %64 {
              cir.break loc(#loc94)
            } loc(#loc447)
          } loc(#loc445)
          %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc95)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc96)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc97)
          %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc98)
          cir.store %36, %7 : !s32i, !cir.ptr<!s32i> loc(#loc448)
          cir.scope {
            %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc104)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc104)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc450)
            cir.if %62 {
              cir.break loc(#loc106)
            } loc(#loc451)
          } loc(#loc449)
          %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc107)
          %38 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
          %40 = cir.const #cir.int<3> : !s32i loc(#loc109)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc109)
          %42 = cir.const #cir.int<4> : !u64i loc(#loc109)
          %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc109)
          %44 = cir.const #cir.int<2> : !s32i loc(#loc109)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc109)
          %46 = cir.binop(add, %43, %45) : !u64i loc(#loc109)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc110)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc452)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc111)
          %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc112)
          %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc112)
          cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc453)
          cir.scope {
            %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc118)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc118)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc455)
            %63 = cir.ternary(%62, true {
              %64 = cir.const #true loc(#loc119)
              cir.yield %64 : !cir.bool loc(#loc119)
            }, false {
              %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc120)
              %65 = cir.const #cir.int<0> : !s32i loc(#loc121)
              %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc456)
              %67 = cir.ternary(%66, true {
                %68 = cir.const #true loc(#loc119)
                cir.yield %68 : !cir.bool loc(#loc119)
              }, false {
                %68 = cir.const #false loc(#loc119)
                cir.yield %68 : !cir.bool loc(#loc119)
              }) : (!cir.bool) -> !cir.bool loc(#loc119)
              cir.yield %67 : !cir.bool loc(#loc119)
            }) : (!cir.bool) -> !cir.bool loc(#loc119)
            cir.if %63 {
              cir.break loc(#loc123)
            } loc(#loc457)
          } loc(#loc454)
          %53 = cir.const #cir.int<0> : !s8i loc(#loc124)
          %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          %55 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
          %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc126)
          cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc458)
          %57 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc127)
          %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc128)
          cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc459)
          cir.yield loc(#loc44)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc131)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc131)
          cir.condition(%14) loc(#loc131)
        } loc(#loc429)
      } loc(#loc429)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc135)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc461)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc137)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc138)
        } loc(#loc462)
      } loc(#loc460)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc141)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc142)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc142)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc464)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc144)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc145)
        } loc(#loc465)
      } loc(#loc463)
    } loc(#loc423)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc467)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc467)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc469)
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc470)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc470)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc470)
        cir.scope {
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc159)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc472)
          cir.if %12 {
            %13 = cir.const #cir.int<1> : !s32i loc(#loc163)
            %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc165)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc165)
            cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc474)
            cir.scope {
              %17 = cir.const #cir.int<0> : !s32i loc(#loc168)
              cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc476)
              cir.for : cond {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc170)
                %19 = cir.const #cir.int<10> : !s32i loc(#loc171)
                %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc477)
                cir.condition(%20) loc(#loc477)
              } body {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc172)
                %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc173)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc173)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc173)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc174)
                cir.yield loc(#loc167)
              } step {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc175)
                %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc176)
                cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc478)
                cir.yield loc(#loc475)
              } loc(#loc475)
            } loc(#loc475)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc21)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc21)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc177)
          } loc(#loc473)
        } loc(#loc471)
      } loc(#loc468)
    } loc(#loc466)
    cir.return loc(#loc23)
  } loc(#loc419)
  cir.func internal private @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc480)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc481)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc183)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc184)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc185)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc482)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc187)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc483)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc485)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc192)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc192)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc485)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc487)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc488)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc488)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc488)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc201)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc202)
          %13 = cir.cmp(ge, %11, %12) : !s32i, !cir.bool loc(#loc490)
          cir.if %13 {
            %14 = cir.const #cir.int<1> : !s32i loc(#loc206)
            %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc207)
            %16 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc208)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc208)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc492)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc211)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc494)
              cir.for : cond {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc213)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc214)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc495)
                cir.condition(%21) loc(#loc495)
              } body {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc215)
                %20 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc216)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc216)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc216)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc217)
                cir.yield loc(#loc210)
              } step {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc218)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc219)
                cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc496)
                cir.yield loc(#loc493)
              } loc(#loc493)
            } loc(#loc493)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc220)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc220)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc221)
          } loc(#loc491)
        } loc(#loc489)
      } loc(#loc486)
    } loc(#loc484)
    cir.return loc(#loc179)
  } loc(#loc479)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc222)
  cir.func internal private @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc498)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc499)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc228)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc229)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc230)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc500)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc502)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc503)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc504)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc505)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc506)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc239)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc239)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc504)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc241)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc241)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc505)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc246)
          %14 = cir.const #cir.int<1> : !u32i loc(#loc247)
          %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc247)
          %16 = cir.const #cir.int<6> : !u32i loc(#loc248)
          %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc248)
          %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc249)
          cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc508)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc254)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc255)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc255)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc510)
            cir.if %62 {
              cir.break loc(#loc257)
            } loc(#loc511)
          } loc(#loc509)
          %19 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc512)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc260)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc513)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc514)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc265)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc265)
          %24 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc515)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc267)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc267)
          %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc516)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc269)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc269)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc270)
          %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc517)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc275)
            %60 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc519)
            %61 = cir.const #cir.int<16> : !u64i loc(#loc520)
            %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc520)
            %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc280)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc281)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc281)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc521)
            cir.if %66 {
              cir.break loc(#loc283)
            } loc(#loc522)
          } loc(#loc518)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc286)
            %60 = cir.const #cir.int<5> : !s32i loc(#loc287)
            %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc288)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc289)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc289)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc524)
            cir.if %64 {
              cir.break loc(#loc291)
            } loc(#loc525)
          } loc(#loc523)
          %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc292)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc293)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc294)
          %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc295)
          cir.store %36, %7 : !s32i, !cir.ptr<!s32i> loc(#loc526)
          cir.scope {
            %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc300)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc301)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc301)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc528)
            cir.if %62 {
              cir.break loc(#loc303)
            } loc(#loc529)
          } loc(#loc527)
          %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc304)
          %38 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc305)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc305)
          %40 = cir.const #cir.int<3> : !s32i loc(#loc306)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc306)
          %42 = cir.const #cir.int<4> : !u64i loc(#loc306)
          %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc306)
          %44 = cir.const #cir.int<2> : !s32i loc(#loc306)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc306)
          %46 = cir.binop(add, %43, %45) : !u64i loc(#loc306)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc307)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc307)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc530)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc308)
          %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc309)
          %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc309)
          cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc531)
          cir.scope {
            %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc314)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc315)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc315)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc533)
            %63 = cir.ternary(%62, true {
              %64 = cir.const #true loc(#loc316)
              cir.yield %64 : !cir.bool loc(#loc316)
            }, false {
              %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc317)
              %65 = cir.const #cir.int<0> : !s32i loc(#loc318)
              %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc534)
              %67 = cir.ternary(%66, true {
                %68 = cir.const #true loc(#loc316)
                cir.yield %68 : !cir.bool loc(#loc316)
              }, false {
                %68 = cir.const #false loc(#loc316)
                cir.yield %68 : !cir.bool loc(#loc316)
              }) : (!cir.bool) -> !cir.bool loc(#loc316)
              cir.yield %67 : !cir.bool loc(#loc316)
            }) : (!cir.bool) -> !cir.bool loc(#loc316)
            cir.if %63 {
              cir.break loc(#loc320)
            } loc(#loc535)
          } loc(#loc532)
          %53 = cir.const #cir.int<0> : !s8i loc(#loc321)
          %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc322)
          %55 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc323)
          %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc323)
          cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc536)
          %57 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc324)
          %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc325)
          cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc537)
          cir.yield loc(#loc245)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc328)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc328)
          cir.condition(%14) loc(#loc328)
        } loc(#loc507)
      } loc(#loc507)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc331)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc332)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc332)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc539)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc334)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc335)
        } loc(#loc540)
      } loc(#loc538)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc338)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc339)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc339)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc542)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc341)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc342)
        } loc(#loc543)
      } loc(#loc541)
    } loc(#loc501)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc545)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc346)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc346)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc545)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc547)
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc548)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc548)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc548)
        cir.scope {
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc355)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc356)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc550)
          %13 = cir.ternary(%12, true {
            %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc358)
            %15 = cir.const #cir.int<10> : !s32i loc(#loc359)
            %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc551)
            %17 = cir.ternary(%16, true {
              %18 = cir.const #true loc(#loc357)
              cir.yield %18 : !cir.bool loc(#loc357)
            }, false {
              %18 = cir.const #false loc(#loc357)
              cir.yield %18 : !cir.bool loc(#loc357)
            }) : (!cir.bool) -> !cir.bool loc(#loc357)
            cir.yield %17 : !cir.bool loc(#loc357)
          }, false {
            %14 = cir.const #false loc(#loc357)
            cir.yield %14 : !cir.bool loc(#loc357)
          }) : (!cir.bool) -> !cir.bool loc(#loc357)
          cir.if %13 {
            %14 = cir.const #cir.int<1> : !s32i loc(#loc364)
            %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc365)
            %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc366)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc366)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc553)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc369)
              cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc555)
              cir.for : cond {
                %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc371)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc372)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc556)
                cir.condition(%21) loc(#loc556)
              } body {
                %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc373)
                %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc374)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc374)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc374)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc375)
                cir.yield loc(#loc368)
              } step {
                %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc376)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc377)
                cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc557)
                cir.yield loc(#loc554)
              } loc(#loc554)
            } loc(#loc554)
          } else {
            %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc222)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc222)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc378)
          } loc(#loc552)
        } loc(#loc549)
      } loc(#loc546)
    } loc(#loc544)
    cir.return loc(#loc224)
  } loc(#loc497)
  cir.func @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33L7goodG2BEv() : () -> () loc(#loc381)
    cir.call @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33L7goodB2GEv() : () -> () loc(#loc382)
    cir.return loc(#loc380)
  } loc(#loc558)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc559)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc560)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc387)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc388)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc389)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc390)
  cir.func @main(%arg0: !s32i loc(fused[#loc393, #loc394]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc395, #loc396])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc562)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc563)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc392)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc397)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc397)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc398)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc399)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc399)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc400)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc387)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc387)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc401)
    cir.call @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_334goodEv() : () -> () loc(#loc402)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc388)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc388)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc403)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc389)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc389)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc404)
    cir.call @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_333badEv() : () -> () loc(#loc405)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc390)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc390)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc406)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc407)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc564)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc564)
    cir.return %15 : !s32i loc(#loc564)
  } loc(#loc561)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":140:27)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":47:1)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":144:1)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":49:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":49:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":50:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":50:20)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":52:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":52:12)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":52:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":53:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":121:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":58:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":58:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":59:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":59:28)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":60:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":60:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":61:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":61:31)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":62:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":62:41)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":63:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":106:17)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":73:35)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":73:44)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":73:57)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":73:28)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":73:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":73:68)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":74:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":77:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":74:17)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":74:33)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":75:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":76:17)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":78:20)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":78:21)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":78:30)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":78:33)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":78:47)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":78:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":78:48)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":79:34)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":79:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":80:39)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":80:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":81:38)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":81:32)
#loc73 = loc("/usr/include/netinet/in.h":250:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":81:13)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":81:46)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":82:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":85:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":82:22)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":82:54)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":82:55)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":82:64)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":82:78)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":82:17)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":82:84)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":83:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":84:17)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":86:13)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":89:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":86:24)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":86:38)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":86:17)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":86:57)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":87:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":88:17)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":90:35)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":90:49)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":90:55)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":90:28)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":90:13)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":90:59)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":91:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":94:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":91:17)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":91:33)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":92:13)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":93:17)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":96:31)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":96:45)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":96:58)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":96:76)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":96:79)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":96:26)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":96:13)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":96:80)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":97:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":100:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":97:17)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":97:31)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":97:44)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":97:47)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":97:61)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":98:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":99:17)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":102:39)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":102:25)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":102:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":104:25)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":104:20)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":104:13)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":104:36)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":106:16)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":107:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":110:9)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":107:13)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":107:29)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":108:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":109:26)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":109:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":111:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":114:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":111:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":111:29)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":112:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":113:26)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":113:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":122:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":143:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":123:9)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":123:20)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":124:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":142:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":125:13)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":125:17)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":126:13)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":126:34)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":129:13)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":141:13)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":129:17)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":129:25)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":130:13)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":137:13)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":139:13)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":131:32)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":131:24)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":131:17)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":133:17)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":136:17)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":133:25)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":133:21)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":133:28)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":133:32)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":135:41)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":135:34)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":135:21)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":133:37)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":133:36)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":140:17)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":151:1)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":182:1)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":153:5)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":153:9)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":154:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":154:20)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":156:13)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":156:12)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":156:5)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":159:12)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":159:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":160:5)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":181:5)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":161:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":161:20)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":162:9)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":180:9)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":163:13)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":163:17)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":164:13)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":164:34)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":167:13)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":179:13)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":167:17)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":167:25)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":168:13)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":175:13)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":177:13)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":169:32)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":169:24)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":169:17)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":171:17)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":174:17)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":171:25)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":171:21)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":171:28)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":171:32)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":173:41)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":173:34)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":173:21)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":171:37)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":171:36)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":178:27)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":178:17)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":277:27)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":185:1)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":281:1)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":187:5)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":187:9)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":188:5)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":188:20)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":190:13)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":190:12)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":190:5)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":191:5)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":259:5)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":196:9)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":196:13)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":197:9)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":197:28)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":198:9)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":198:31)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":199:9)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":199:31)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":200:9)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":200:41)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":201:9)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":244:17)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":211:35)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":211:44)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":211:57)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":211:28)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":211:13)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":211:68)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":212:13)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":215:13)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":212:17)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":212:33)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":213:13)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":214:17)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":216:20)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":216:21)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":216:30)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":216:33)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":216:47)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":216:13)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":216:48)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":217:34)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":217:13)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":218:39)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":218:13)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":219:38)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":219:32)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":219:13)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":219:46)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":220:13)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":223:13)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":220:22)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":220:54)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":220:55)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":220:64)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":220:78)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":220:17)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":220:84)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":221:13)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":222:17)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":224:13)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":227:13)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":224:24)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":224:38)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":224:17)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":224:57)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":225:13)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":226:17)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":228:35)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":228:49)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":228:55)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":228:28)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":228:13)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":228:59)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":229:13)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":232:13)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":229:17)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":229:33)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":230:13)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":231:17)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":234:31)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":234:45)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":234:58)
#loc307 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":234:76)
#loc308 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":234:79)
#loc309 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":234:26)
#loc310 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":234:13)
#loc311 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":234:80)
#loc312 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":235:13)
#loc313 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":238:13)
#loc314 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":235:17)
#loc315 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":235:31)
#loc316 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":235:44)
#loc317 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":235:47)
#loc318 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":235:61)
#loc319 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":236:13)
#loc320 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":237:17)
#loc321 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":240:39)
#loc322 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":240:25)
#loc323 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":240:13)
#loc324 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":242:25)
#loc325 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":242:20)
#loc326 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":242:13)
#loc327 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":242:36)
#loc328 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":244:16)
#loc329 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":245:9)
#loc330 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":248:9)
#loc331 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":245:13)
#loc332 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":245:29)
#loc333 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":246:9)
#loc334 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":247:26)
#loc335 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":247:13)
#loc336 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":249:9)
#loc337 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":252:9)
#loc338 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":249:13)
#loc339 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":249:29)
#loc340 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":250:9)
#loc341 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":251:26)
#loc342 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":251:13)
#loc343 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":260:5)
#loc344 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":280:5)
#loc345 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":261:9)
#loc346 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":261:20)
#loc347 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":262:9)
#loc348 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":279:9)
#loc349 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":263:13)
#loc350 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":263:17)
#loc351 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":264:13)
#loc352 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":264:34)
#loc353 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":266:13)
#loc354 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":278:13)
#loc355 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":266:17)
#loc356 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":266:25)
#loc357 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":266:27)
#loc358 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":266:30)
#loc359 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":266:38)
#loc360 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":266:40)
#loc361 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":267:13)
#loc362 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":274:13)
#loc363 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":276:13)
#loc364 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":268:32)
#loc365 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":268:24)
#loc366 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":268:17)
#loc367 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":270:17)
#loc368 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":273:17)
#loc369 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":270:25)
#loc370 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":270:21)
#loc371 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":270:28)
#loc372 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":270:32)
#loc373 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":272:41)
#loc374 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":272:34)
#loc375 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":272:21)
#loc376 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":270:37)
#loc377 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":270:36)
#loc378 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":277:17)
#loc379 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":283:1)
#loc380 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":287:1)
#loc381 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":285:5)
#loc382 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":286:5)
#loc383 = loc("/usr/include/stdlib.h":575:1)
#loc384 = loc("/usr/include/stdlib.h":575:41)
#loc385 = loc("/usr/include/time.h":76:1)
#loc386 = loc("/usr/include/time.h":76:38)
#loc387 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":306:15)
#loc388 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":308:15)
#loc389 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":311:15)
#loc390 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":313:15)
#loc391 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":301:1)
#loc392 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":316:1)
#loc397 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":302:1)
#loc398 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":304:27)
#loc399 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":304:22)
#loc400 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":304:5)
#loc401 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":306:5)
#loc402 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":307:5)
#loc403 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":308:5)
#loc404 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":311:5)
#loc405 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":312:5)
#loc406 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":313:5)
#loc407 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":315:12)
#loc408 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_33.cpp":315:5)
#loc409 = loc(fused[#loc1, #loc2])
#loc410 = loc(fused[#loc3, #loc4])
#loc411 = loc(fused[#loc5, #loc6])
#loc412 = loc(fused[#loc7, #loc8])
#loc413 = loc(fused[#loc9, #loc10])
#loc414 = loc(fused[#loc11, #loc12])
#loc415 = loc(fused[#loc13, #loc14])
#loc416 = loc(fused[#loc15, #loc16])
#loc417 = loc(fused[#loc17, #loc18])
#loc418 = loc(fused[#loc19, #loc20])
#loc419 = loc(fused[#loc22, #loc23])
#loc420 = loc(fused[#loc24, #loc25])
#loc421 = loc(fused[#loc26, #loc27])
#loc422 = loc(fused[#loc30, #loc28])
#loc423 = loc(fused[#loc31, #loc32])
#loc424 = loc(fused[#loc33, #loc34])
#loc425 = loc(fused[#loc35, #loc36])
#loc426 = loc(fused[#loc37, #loc38])
#loc427 = loc(fused[#loc39, #loc40])
#loc428 = loc(fused[#loc41, #loc42])
#loc429 = loc(fused[#loc43, #loc44])
#loc430 = loc(fused[#loc49, #loc50])
#loc431 = loc(fused[#loc51, #loc52])
#loc432 = loc(fused[#loc53, #loc54])
#loc433 = loc(fused[#loc55, #loc52])
#loc434 = loc(fused[#loc57, #loc58])
#loc435 = loc(fused[#loc60, #loc61])
#loc436 = loc(fused[#loc62, #loc63])
#loc437 = loc(fused[#loc66, #loc64])
#loc438 = loc(fused[#loc70, #loc67])
#loc439 = loc(fused[#loc74, #loc75])
#loc440 = loc(fused[#loc76, #loc77])
#loc441 = loc(fused[#loc79, #loc80])
#loc442 = loc(fused[#loc81, #loc82])
#loc443 = loc(fused[#loc83, #loc84])
#loc444 = loc(fused[#loc85, #loc77])
#loc445 = loc(fused[#loc87, #loc88])
#loc446 = loc(fused[#loc91, #loc92])
#loc447 = loc(fused[#loc93, #loc88])
#loc448 = loc(fused[#loc99, #loc100])
#loc449 = loc(fused[#loc101, #loc102])
#loc450 = loc(fused[#loc103, #loc104])
#loc451 = loc(fused[#loc105, #loc102])
#loc452 = loc(fused[#loc109, #loc110])
#loc453 = loc(fused[#loc113, #loc114])
#loc454 = loc(fused[#loc115, #loc116])
#loc455 = loc(fused[#loc117, #loc118])
#loc456 = loc(fused[#loc120, #loc121])
#loc457 = loc(fused[#loc122, #loc116])
#loc458 = loc(fused[#loc126, #loc124])
#loc459 = loc(fused[#loc129, #loc130])
#loc460 = loc(fused[#loc132, #loc133])
#loc461 = loc(fused[#loc134, #loc135])
#loc462 = loc(fused[#loc136, #loc133])
#loc463 = loc(fused[#loc139, #loc140])
#loc464 = loc(fused[#loc141, #loc142])
#loc465 = loc(fused[#loc143, #loc140])
#loc466 = loc(fused[#loc146, #loc147])
#loc467 = loc(fused[#loc148, #loc149])
#loc468 = loc(fused[#loc150, #loc151])
#loc469 = loc(fused[#loc152, #loc153])
#loc470 = loc(fused[#loc154, #loc155])
#loc471 = loc(fused[#loc156, #loc157])
#loc472 = loc(fused[#loc158, #loc159])
#loc473 = loc(fused[#loc160, #loc161, #loc162, #loc157])
#loc474 = loc(fused[#loc165, #loc163])
#loc475 = loc(fused[#loc166, #loc167])
#loc476 = loc(fused[#loc169, #loc168])
#loc477 = loc(fused[#loc170, #loc171])
#loc478 = loc(fused[#loc176, #loc175])
#loc479 = loc(fused[#loc178, #loc179])
#loc480 = loc(fused[#loc180, #loc181])
#loc481 = loc(fused[#loc182, #loc183])
#loc482 = loc(fused[#loc186, #loc184])
#loc483 = loc(fused[#loc188, #loc187])
#loc484 = loc(fused[#loc189, #loc190])
#loc485 = loc(fused[#loc191, #loc192])
#loc486 = loc(fused[#loc193, #loc194])
#loc487 = loc(fused[#loc195, #loc196])
#loc488 = loc(fused[#loc197, #loc198])
#loc489 = loc(fused[#loc199, #loc200])
#loc490 = loc(fused[#loc201, #loc202])
#loc491 = loc(fused[#loc203, #loc204, #loc205, #loc200])
#loc492 = loc(fused[#loc208, #loc206])
#loc493 = loc(fused[#loc209, #loc210])
#loc494 = loc(fused[#loc212, #loc211])
#loc495 = loc(fused[#loc213, #loc214])
#loc496 = loc(fused[#loc219, #loc218])
#loc497 = loc(fused[#loc223, #loc224])
#loc498 = loc(fused[#loc225, #loc226])
#loc499 = loc(fused[#loc227, #loc228])
#loc500 = loc(fused[#loc231, #loc229])
#loc501 = loc(fused[#loc232, #loc233])
#loc502 = loc(fused[#loc234, #loc235])
#loc503 = loc(fused[#loc236, #loc237])
#loc504 = loc(fused[#loc238, #loc239])
#loc505 = loc(fused[#loc240, #loc241])
#loc506 = loc(fused[#loc242, #loc243])
#loc507 = loc(fused[#loc244, #loc245])
#loc508 = loc(fused[#loc250, #loc251])
#loc509 = loc(fused[#loc252, #loc253])
#loc510 = loc(fused[#loc254, #loc255])
#loc511 = loc(fused[#loc256, #loc253])
#loc512 = loc(fused[#loc258, #loc259])
#loc513 = loc(fused[#loc261, #loc262])
#loc514 = loc(fused[#loc263, #loc264])
#loc515 = loc(fused[#loc266, #loc265])
#loc516 = loc(fused[#loc268, #loc267])
#loc517 = loc(fused[#loc271, #loc272])
#loc518 = loc(fused[#loc273, #loc274])
#loc519 = loc(fused[#loc276, #loc277])
#loc520 = loc(fused[#loc278, #loc279])
#loc521 = loc(fused[#loc280, #loc281])
#loc522 = loc(fused[#loc282, #loc274])
#loc523 = loc(fused[#loc284, #loc285])
#loc524 = loc(fused[#loc288, #loc289])
#loc525 = loc(fused[#loc290, #loc285])
#loc526 = loc(fused[#loc296, #loc297])
#loc527 = loc(fused[#loc298, #loc299])
#loc528 = loc(fused[#loc300, #loc301])
#loc529 = loc(fused[#loc302, #loc299])
#loc530 = loc(fused[#loc306, #loc307])
#loc531 = loc(fused[#loc310, #loc311])
#loc532 = loc(fused[#loc312, #loc313])
#loc533 = loc(fused[#loc314, #loc315])
#loc534 = loc(fused[#loc317, #loc318])
#loc535 = loc(fused[#loc319, #loc313])
#loc536 = loc(fused[#loc323, #loc321])
#loc537 = loc(fused[#loc326, #loc327])
#loc538 = loc(fused[#loc329, #loc330])
#loc539 = loc(fused[#loc331, #loc332])
#loc540 = loc(fused[#loc333, #loc330])
#loc541 = loc(fused[#loc336, #loc337])
#loc542 = loc(fused[#loc338, #loc339])
#loc543 = loc(fused[#loc340, #loc337])
#loc544 = loc(fused[#loc343, #loc344])
#loc545 = loc(fused[#loc345, #loc346])
#loc546 = loc(fused[#loc347, #loc348])
#loc547 = loc(fused[#loc349, #loc350])
#loc548 = loc(fused[#loc351, #loc352])
#loc549 = loc(fused[#loc353, #loc354])
#loc550 = loc(fused[#loc355, #loc356])
#loc551 = loc(fused[#loc358, #loc360])
#loc552 = loc(fused[#loc361, #loc362, #loc363, #loc354])
#loc553 = loc(fused[#loc366, #loc364])
#loc554 = loc(fused[#loc367, #loc368])
#loc555 = loc(fused[#loc370, #loc369])
#loc556 = loc(fused[#loc371, #loc372])
#loc557 = loc(fused[#loc377, #loc376])
#loc558 = loc(fused[#loc379, #loc380])
#loc559 = loc(fused[#loc383, #loc384])
#loc560 = loc(fused[#loc385, #loc386])
#loc561 = loc(fused[#loc391, #loc392])
#loc564 = loc(fused[#loc408, #loc407])
