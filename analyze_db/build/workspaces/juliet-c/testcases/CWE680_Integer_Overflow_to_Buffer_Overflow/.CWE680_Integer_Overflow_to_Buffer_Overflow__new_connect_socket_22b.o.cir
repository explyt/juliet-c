!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":50:15)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":50:19)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":124:20)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":124:24)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":140:20)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":140:24)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc163 = loc(fused[#loc20, #loc21])
#loc203 = loc(fused[#loc125, #loc126])
#loc210 = loc(fused[#loc143, #loc144])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_229badGlobalE : !s32i {alignment = 4 : i64} loc(#loc154)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc155)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc157)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc158)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc159)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc160)
  cir.func private @close(!s32i) -> !s32i loc(#loc161)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_229badSourceEi(%arg0: !s32i loc(fused[#loc20, #loc21])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc19)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc22)
    cir.scope {
      %4 = cir.get_global @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_229badGlobalE : !cir.ptr<!s32i> loc(#loc154)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc25)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc167)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc168)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc169)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc170)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc34)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc169)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc41)
                %14 = cir.const #cir.int<1> : !u32i loc(#loc42)
                %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc42)
                %16 = cir.const #cir.int<6> : !u32i loc(#loc43)
                %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc43)
                %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc44)
                cir.store %18, %9 : !s32i, !cir.ptr<!s32i> loc(#loc173)
                cir.scope {
                  %56 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc49)
                  %57 = cir.const #cir.int<1> : !s32i loc(#loc50)
                  %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc50)
                  %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc175)
                  cir.if %59 {
                    cir.break loc(#loc52)
                  } loc(#loc176)
                } loc(#loc174)
                %19 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc177)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc55)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc178)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc179)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc60)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc60)
                %24 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc180)
                %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
                %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
                %27 = cir.call @inet_addr(%26) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc63)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc181)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc68)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc68)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc69)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc182)
                cir.scope {
                  %56 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                  %57 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc184)
                  %58 = cir.const #cir.int<16> : !u64i loc(#loc185)
                  %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc185)
                  %60 = cir.call @connect(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc80)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc81)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc81)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc186)
                  cir.if %63 {
                    cir.break loc(#loc83)
                  } loc(#loc187)
                } loc(#loc183)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %35 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
                %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
                %37 = cir.const #cir.int<3> : !s32i loc(#loc86)
                %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc86)
                %39 = cir.const #cir.int<4> : !u64i loc(#loc86)
                %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc86)
                %41 = cir.const #cir.int<2> : !s32i loc(#loc86)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc86)
                %43 = cir.binop(add, %40, %42) : !u64i loc(#loc86)
                %44 = cir.const #cir.int<1> : !s32i loc(#loc87)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc87)
                %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc188)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc88)
                %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc89)
                %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc89)
                cir.store %49, %7 : !s32i, !cir.ptr<!s32i> loc(#loc189)
                cir.scope {
                  %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                  %57 = cir.const #cir.int<1> : !s32i loc(#loc95)
                  %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc95)
                  %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc191)
                  %60 = cir.ternary(%59, true {
                    %61 = cir.const #true loc(#loc96)
                    cir.yield %61 : !cir.bool loc(#loc96)
                  }, false {
                    %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                    %62 = cir.const #cir.int<0> : !s32i loc(#loc98)
                    %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc192)
                    %64 = cir.ternary(%63, true {
                      %65 = cir.const #true loc(#loc96)
                      cir.yield %65 : !cir.bool loc(#loc96)
                    }, false {
                      %65 = cir.const #false loc(#loc96)
                      cir.yield %65 : !cir.bool loc(#loc96)
                    }) : (!cir.bool) -> !cir.bool loc(#loc96)
                    cir.yield %64 : !cir.bool loc(#loc96)
                  }) : (!cir.bool) -> !cir.bool loc(#loc96)
                  cir.if %60 {
                    cir.break loc(#loc100)
                  } loc(#loc193)
                } loc(#loc190)
                %50 = cir.const #cir.int<0> : !s8i loc(#loc101)
                %51 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %52 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
                %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc103)
                cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc194)
                %54 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
                %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc105)
                cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
              } loc(#loc172)
              cir.yield loc(#loc38)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc108)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc108)
              cir.condition(%14) loc(#loc108)
            } loc(#loc171)
          } loc(#loc171)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc112)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc112)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc197)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc115)
            } loc(#loc198)
          } loc(#loc196)
        } loc(#loc166)
      } loc(#loc165)
    } loc(#loc164)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc199)
    cir.return %3 : !s32i loc(#loc199)
  } loc(#loc162)
  cir.global "private" external @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_2214goodG2B1GlobalE : !s32i {alignment = 4 : i64} loc(#loc200)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc122)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_2214goodG2B1SourceEi(%arg0: !s32i loc(fused[#loc125, #loc126])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc124)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.scope {
      %4 = cir.get_global @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_2214goodG2B1GlobalE : !cir.ptr<!s32i> loc(#loc200)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc130)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc122)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc122)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc134)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc135)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
      } loc(#loc205)
    } loc(#loc204)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    cir.return %3 : !s32i loc(#loc207)
  } loc(#loc202)
  cir.global "private" external @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_2214goodG2B2GlobalE : !s32i {alignment = 4 : i64} loc(#loc208)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_2214goodG2B2SourceEi(%arg0: !s32i loc(fused[#loc143, #loc144])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc142)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.scope {
      %4 = cir.get_global @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_2214goodG2B2GlobalE : !cir.ptr<!s32i> loc(#loc208)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc148)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc150)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
      } loc(#loc212)
    } loc(#loc211)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc214)
    cir.return %3 : !s32i loc(#loc214)
  } loc(#loc209)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":48:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":48:12)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":80:53)
#loc8 = loc("/usr/include/netinet/in.h":402:1)
#loc9 = loc("/usr/include/netinet/in.h":403:40)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":50:1)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":112:1)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":51:1)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":52:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":110:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":52:8)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":53:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":54:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":109:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":59:13)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":59:17)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":60:13)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":60:32)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":61:13)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":61:36)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":62:13)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":62:45)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":63:13)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":98:21)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":64:13)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":97:13)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":73:40)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":73:49)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":73:62)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":73:33)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":73:17)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":73:73)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":74:17)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":77:17)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":74:21)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":74:38)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":75:17)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":76:21)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":78:24)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":78:25)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":78:34)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":78:37)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":78:51)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":78:17)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":78:52)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":79:38)
#loc61 = loc("/usr/include/netinet/in.h":249:5)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":79:17)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":80:43)
#loc64 = loc("/usr/include/netinet/in.h":251:20)
#loc65 = loc("/usr/include/netinet/in.h":33:15)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":80:17)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":80:63)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":81:42)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":81:36)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":81:17)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":81:50)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":82:17)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":85:17)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":82:29)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":82:62)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":82:63)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":82:72)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":82:86)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":82:21)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":82:92)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":83:17)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":84:21)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":88:35)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":88:50)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":88:63)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":88:81)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":88:84)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":88:30)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":88:17)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":88:85)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":89:17)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":92:17)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":89:21)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":89:35)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":89:48)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":89:51)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":89:65)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":90:17)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":91:21)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":94:43)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":94:29)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":94:17)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":96:29)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":96:24)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":96:17)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":96:40)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":98:20)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":99:13)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":102:13)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":99:17)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":99:34)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":100:13)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":101:30)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":101:17)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":111:12)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":111:5)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":120:1)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":120:12)
#loc120 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc121 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":129:19)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":124:1)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":137:1)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":125:1)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":126:5)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":135:5)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":126:8)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":127:5)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":130:5)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":132:5)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":129:9)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":134:16)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":134:9)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":136:12)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":136:5)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":121:1)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":121:12)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":140:1)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":148:1)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":141:1)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":142:5)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":146:5)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":142:8)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":143:5)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":145:16)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":145:9)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":147:12)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_22b.cpp":147:5)
#loc154 = loc(fused[#loc1, #loc2])
#loc155 = loc(fused[#loc3, #loc4])
#loc156 = loc(fused[#loc5, #loc6])
#loc157 = loc(fused[#loc8, #loc9])
#loc158 = loc(fused[#loc10, #loc11])
#loc159 = loc(fused[#loc12, #loc13])
#loc160 = loc(fused[#loc14, #loc15])
#loc161 = loc(fused[#loc16, #loc17])
#loc162 = loc(fused[#loc18, #loc19])
#loc164 = loc(fused[#loc23, #loc24])
#loc165 = loc(fused[#loc26, #loc24])
#loc166 = loc(fused[#loc27, #loc28])
#loc167 = loc(fused[#loc29, #loc30])
#loc168 = loc(fused[#loc31, #loc32])
#loc169 = loc(fused[#loc33, #loc34])
#loc170 = loc(fused[#loc35, #loc36])
#loc171 = loc(fused[#loc37, #loc38])
#loc172 = loc(fused[#loc39, #loc40])
#loc173 = loc(fused[#loc45, #loc46])
#loc174 = loc(fused[#loc47, #loc48])
#loc175 = loc(fused[#loc49, #loc50])
#loc176 = loc(fused[#loc51, #loc48])
#loc177 = loc(fused[#loc53, #loc54])
#loc178 = loc(fused[#loc56, #loc57])
#loc179 = loc(fused[#loc58, #loc59])
#loc180 = loc(fused[#loc62, #loc60])
#loc181 = loc(fused[#loc66, #loc67])
#loc182 = loc(fused[#loc71, #loc72])
#loc183 = loc(fused[#loc73, #loc74])
#loc184 = loc(fused[#loc76, #loc77])
#loc185 = loc(fused[#loc78, #loc79])
#loc186 = loc(fused[#loc80, #loc81])
#loc187 = loc(fused[#loc82, #loc74])
#loc188 = loc(fused[#loc86, #loc87])
#loc189 = loc(fused[#loc90, #loc91])
#loc190 = loc(fused[#loc92, #loc93])
#loc191 = loc(fused[#loc94, #loc95])
#loc192 = loc(fused[#loc97, #loc98])
#loc193 = loc(fused[#loc99, #loc93])
#loc194 = loc(fused[#loc103, #loc101])
#loc195 = loc(fused[#loc106, #loc107])
#loc196 = loc(fused[#loc109, #loc110])
#loc197 = loc(fused[#loc111, #loc112])
#loc198 = loc(fused[#loc113, #loc110])
#loc199 = loc(fused[#loc117, #loc116])
#loc200 = loc(fused[#loc118, #loc119])
#loc201 = loc(fused[#loc120, #loc121])
#loc202 = loc(fused[#loc123, #loc124])
#loc204 = loc(fused[#loc128, #loc129])
#loc205 = loc(fused[#loc131, #loc132, #loc133, #loc129])
#loc206 = loc(fused[#loc136, #loc135])
#loc207 = loc(fused[#loc138, #loc137])
#loc208 = loc(fused[#loc139, #loc140])
#loc209 = loc(fused[#loc141, #loc142])
#loc211 = loc(fused[#loc146, #loc147])
#loc212 = loc(fused[#loc149, #loc147])
#loc213 = loc(fused[#loc151, #loc150])
#loc214 = loc(fused[#loc153, #loc152])
