!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":136:10)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":136:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":136:20)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":136:32)
#loc242 = loc(fused[#loc79, #loc80])
#loc243 = loc(fused[#loc81, #loc82])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc213)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc214)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc216)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc217)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc219)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc18)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    cir.br ^bb1 loc(#loc222)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc223)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc224)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc25)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc26)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc26)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc225)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc226)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc227)
    cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
    cir.br ^bb3 loc(#loc229)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc230)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc231)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc38)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
    cir.br ^bb5 loc(#loc32)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc32)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc39)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc41)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc42)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc232)
    cir.br ^bb7 loc(#loc21)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc21)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc233)
  ^bb9:  // pred: ^bb8
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc45)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc46)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc47)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc47)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc234)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc51)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc52)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc52)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc54)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc54)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc235)
    %39 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc55)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
    %41 = cir.const #cir.int<100> : !s32i loc(#loc57)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc57)
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %45 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc58)
    %46 = cir.call @snprintf(%40, %42, %44, %45) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc55)
    %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %48 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc61)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
    cir.call @free(%50) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
    cir.br ^bb10 loc(#loc44)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc13)
  } loc(#loc218)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc64)
  } loc(#loc236)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc239)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc240)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc76)
  cir.func @main(%arg0: !s32i loc(fused[#loc79, #loc80]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc242)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc243)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc85)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc85)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc86)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08_good() : () -> () loc(#loc88)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc75)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08_bad() : () -> () loc(#loc92)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc246)
    cir.return %17 : !s32i loc(#loc246)
  } loc(#loc241)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc99)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc248)
    cir.return %2 : !s32i loc(#loc248)
  } loc(#loc247)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc101)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc250)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc251)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc108)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc252)
    cir.br ^bb1 loc(#loc253)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc254)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc112)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc255)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    cir.br ^bb8 loc(#loc115)
  ^bb3:  // pred: ^bb1
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc118)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc119)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc119)
    %11 = cir.const #cir.int<1> : !u64i loc(#loc256)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc257)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc118)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc258)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc259)
    cir.br ^bb4 loc(#loc260)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc127)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc127)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc261)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc262)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc129)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc131)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc129)
    cir.br ^bb6 loc(#loc125)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc125)
  ^bb7:  // pred: ^bb6
    %22 = cir.const #cir.int<0> : !s32i loc(#loc132)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc132)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc134)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc135)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc263)
    cir.br ^bb8 loc(#loc111)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc111)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc264)
  ^bb10:  // pred: ^bb9
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc138)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
    %29 = cir.const #cir.int<67> : !s32i loc(#loc139)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc140)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc140)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc140)
    cir.libc.memset %33 bytes from %28 set to %29 : !cir.ptr<!void>, !s32i, !u64i loc(#loc265)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc144)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc144)
    %36 = cir.const #cir.int<100> : !s32i loc(#loc145)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc145)
    %39 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc147)
    %40 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc147)
    cir.store %35, %40 : !s8i, !cir.ptr<!s8i> loc(#loc266)
    %41 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc148)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc150)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc150)
    %45 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc151)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc151)
    %47 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc152)
    %48 = cir.call @snprintf(%42, %44, %46, %47) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc148)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%49) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    %50 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc155)
    %51 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc156)
    cir.call @free(%52) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc155)
    cir.br ^bb11 loc(#loc137)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc103)
  } loc(#loc249)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc159)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc268)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc268)
    cir.return %2 : !s32i loc(#loc268)
  } loc(#loc267)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc270)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc271)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc167)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc272)
    cir.br ^bb1 loc(#loc273)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc274)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc171)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc171)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc275)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc174)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc175)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc175)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc276)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc277)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc174)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc278)
    cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc279)
    cir.br ^bb3 loc(#loc280)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc183)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc281)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc282)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc185)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc186)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc187)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc185)
    cir.br ^bb5 loc(#loc181)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc181)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc188)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc188)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc190)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc191)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc283)
    cir.br ^bb7 loc(#loc170)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc170)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc284)
  ^bb9:  // pred: ^bb8
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc194)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc194)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc195)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc196)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc197)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc196)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc196)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc285)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc200)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc200)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc201)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc202)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc201)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc203)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc203)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc286)
    %39 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc204)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc205)
    %41 = cir.const #cir.int<100> : !s32i loc(#loc206)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc206)
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc207)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc207)
    %45 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc208)
    %46 = cir.call @snprintf(%40, %42, %44, %45) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc204)
    %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    %48 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc211)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc212)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc212)
    cir.call @free(%50) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc211)
    cir.br ^bb10 loc(#loc193)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc162)
  } loc(#loc269)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdio.h":385:1)
#loc6 = loc("/usr/include/stdio.h":387:62)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":59:29)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":43:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":63:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":55:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":55:24)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":45:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":45:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":46:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":46:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":47:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":53:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":47:8)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":47:26)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":48:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":50:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":50:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":50:34)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":50:45)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":50:46)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":50:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":51:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":51:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":51:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":51:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":51:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":51:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":51:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":51:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":52:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":52:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":52:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":52:15)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":54:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":62:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":56:16)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":56:24)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":56:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":56:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":56:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":56:34)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":57:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":57:16)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":57:20)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":57:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":59:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":59:18)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":59:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":59:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":60:19)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":60:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":61:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":61:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":120:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":124:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":122:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":122:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":123:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":123:14)
#loc69 = loc("/usr/include/stdlib.h":575:1)
#loc70 = loc("/usr/include/stdlib.h":575:41)
#loc71 = loc("/usr/include/time.h":76:1)
#loc72 = loc("/usr/include/time.h":76:38)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":141:15)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":143:15)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":146:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":148:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":136:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":151:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":137:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":139:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":139:22)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":139:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":141:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":142:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":142:71)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":143:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":146:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":147:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":147:70)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":148:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":150:12)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":150:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":31:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":34:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":33:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":33:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":77:19)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":70:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":95:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":87:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":87:24)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":72:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":72:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":73:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":73:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":74:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":85:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":74:8)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":74:27)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":75:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":78:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":80:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":77:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":82:24)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":82:31)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":82:35)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":82:46)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":82:47)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":82:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":83:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":83:37)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":83:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":83:21)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":83:27)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":83:28)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":83:34)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":83:33)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":84:19)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":84:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":84:14)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":84:15)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":86:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":94:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":88:16)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":88:24)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":88:29)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":88:33)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":88:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":88:34)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":89:25)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":89:16)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":89:20)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":89:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":91:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":91:18)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":91:24)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":91:29)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":91:35)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":92:19)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":92:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":93:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":93:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":36:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":39:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":38:12)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":38:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":98:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":118:1)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":110:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":110:24)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":100:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":100:12)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":101:12)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":101:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":102:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":108:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":102:8)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":102:26)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":103:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":105:24)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":105:31)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":105:35)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":105:46)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":105:47)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":105:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":106:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":106:37)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":106:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":106:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":106:27)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":106:28)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":106:34)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":106:33)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":107:19)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":107:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":107:14)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":107:15)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":109:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":117:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":111:16)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":111:24)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":111:29)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":111:33)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":111:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":111:34)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":112:25)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":112:16)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":112:20)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":112:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":114:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":114:18)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":114:24)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":114:29)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":114:35)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":115:19)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":115:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":116:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c":116:14)
#loc213 = loc(fused[#loc1, #loc2])
#loc214 = loc(fused[#loc3, #loc4])
#loc215 = loc(fused[#loc5, #loc6])
#loc216 = loc(fused[#loc8, #loc9])
#loc217 = loc(fused[#loc10, #loc11])
#loc218 = loc(fused[#loc12, #loc13])
#loc219 = loc(fused[#loc14, #loc15])
#loc220 = loc(fused[#loc16, #loc17])
#loc221 = loc(fused[#loc19, #loc18])
#loc222 = loc(fused[#loc20, #loc21])
#loc223 = loc(fused[#loc22, #loc23])
#loc224 = loc(fused[#loc24, #loc21])
#loc225 = loc(fused[#loc27, #loc28])
#loc226 = loc(fused[#loc26, #loc28])
#loc227 = loc(fused[#loc25, #loc29])
#loc228 = loc(fused[#loc30, #loc29])
#loc229 = loc(fused[#loc31, #loc32])
#loc230 = loc(fused[#loc33, #loc34])
#loc231 = loc(fused[#loc35, #loc32])
#loc232 = loc(fused[#loc40, #loc39])
#loc233 = loc(fused[#loc43, #loc44])
#loc234 = loc(fused[#loc49, #loc50])
#loc235 = loc(fused[#loc54, #loc51])
#loc236 = loc(fused[#loc63, #loc64])
#loc237 = loc(fused[#loc65, #loc66])
#loc238 = loc(fused[#loc67, #loc68])
#loc239 = loc(fused[#loc69, #loc70])
#loc240 = loc(fused[#loc71, #loc72])
#loc241 = loc(fused[#loc77, #loc78])
#loc244 = loc(fused[#loc88, #loc89])
#loc245 = loc(fused[#loc92, #loc93])
#loc246 = loc(fused[#loc96, #loc95])
#loc247 = loc(fused[#loc97, #loc98])
#loc248 = loc(fused[#loc100, #loc99])
#loc249 = loc(fused[#loc102, #loc103])
#loc250 = loc(fused[#loc104, #loc105])
#loc251 = loc(fused[#loc106, #loc107])
#loc252 = loc(fused[#loc109, #loc108])
#loc253 = loc(fused[#loc110, #loc111])
#loc254 = loc(fused[#loc112, #loc113])
#loc255 = loc(fused[#loc114, #loc115, #loc116, #loc111])
#loc256 = loc(fused[#loc120, #loc121])
#loc257 = loc(fused[#loc119, #loc121])
#loc258 = loc(fused[#loc118, #loc122])
#loc259 = loc(fused[#loc123, #loc122])
#loc260 = loc(fused[#loc124, #loc125])
#loc261 = loc(fused[#loc126, #loc127])
#loc262 = loc(fused[#loc128, #loc125])
#loc263 = loc(fused[#loc133, #loc132])
#loc264 = loc(fused[#loc136, #loc137])
#loc265 = loc(fused[#loc142, #loc143])
#loc266 = loc(fused[#loc147, #loc144])
#loc267 = loc(fused[#loc157, #loc158])
#loc268 = loc(fused[#loc160, #loc159])
#loc269 = loc(fused[#loc161, #loc162])
#loc270 = loc(fused[#loc163, #loc164])
#loc271 = loc(fused[#loc165, #loc166])
#loc272 = loc(fused[#loc168, #loc167])
#loc273 = loc(fused[#loc169, #loc170])
#loc274 = loc(fused[#loc171, #loc172])
#loc275 = loc(fused[#loc173, #loc170])
#loc276 = loc(fused[#loc176, #loc177])
#loc277 = loc(fused[#loc175, #loc177])
#loc278 = loc(fused[#loc174, #loc178])
#loc279 = loc(fused[#loc179, #loc178])
#loc280 = loc(fused[#loc180, #loc181])
#loc281 = loc(fused[#loc182, #loc183])
#loc282 = loc(fused[#loc184, #loc181])
#loc283 = loc(fused[#loc189, #loc188])
#loc284 = loc(fused[#loc192, #loc193])
#loc285 = loc(fused[#loc198, #loc199])
#loc286 = loc(fused[#loc203, #loc200])
