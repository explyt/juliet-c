!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc134)
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc135)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc136)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc138)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc17)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc141)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc142)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc146)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc30)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc147)
    } loc(#loc145)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc149)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc149)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc33)
      cir.if %11 {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc39)
        %15 = cir.const #cir.int<100> : !s32i loc(#loc40)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc40)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc40)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc151)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc44)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc44)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
        %22 = cir.const #cir.int<100> : !s32i loc(#loc46)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc46)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc48)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc152)
      } else {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc49)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc50)
        %15 = cir.const #cir.int<50> : !s32i loc(#loc51)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc51)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc51)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc153)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc55)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
        %22 = cir.const #cir.int<50> : !s32i loc(#loc57)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc58)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc57)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc59)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc154)
      } loc(#loc150)
    } loc(#loc148)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc156)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc156)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc156)
      %10 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc64)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc65)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      %13 = cir.call @strcpy(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc64)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc69)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc70)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
    } loc(#loc155)
    cir.return loc(#loc14)
  } loc(#loc139)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc158)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc73)
    cir.return loc(#loc72)
  } loc(#loc157)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc79)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc80)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc80)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc161)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc162)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc79)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc163)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc164)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc166)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc90)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc92)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc90)
      } loc(#loc167)
    } loc(#loc165)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc169)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc169)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc95)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc95)
      cir.if %11 {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc101)
        %15 = cir.const #cir.int<50> : !s32i loc(#loc102)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc102)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc102)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc171)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc106)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc106)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
        %22 = cir.const #cir.int<50> : !s32i loc(#loc108)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc108)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc110)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc172)
      } else {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc111)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc112)
        %15 = cir.const #cir.int<50> : !s32i loc(#loc113)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc113)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc113)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc173)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc117)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc117)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
        %22 = cir.const #cir.int<50> : !s32i loc(#loc119)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc119)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc121)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc174)
      } loc(#loc170)
    } loc(#loc168)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc176)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc176)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc176)
      %10 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc126)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc127)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
      %13 = cir.call @strcpy(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc130)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc131)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    } loc(#loc175)
    cir.return loc(#loc76)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc7 = loc("/usr/include/string.h":141:1)
#loc8 = loc("/usr/include/string.h":142:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":23:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":47:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":26:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":26:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":26:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":26:42)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":26:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":26:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":27:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":27:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":27:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":27:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":27:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":27:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":27:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":28:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":39:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":28:8)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":28:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":29:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":33:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":35:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":31:16)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":31:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":31:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":31:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":31:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":31:32)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":32:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":32:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":32:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":32:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":32:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":37:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":37:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":37:27)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":37:30)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":37:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":37:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":38:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":38:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":38:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":38:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":38:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":40:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":46:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":41:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":41:25)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":43:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":43:16)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":43:22)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":44:19)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":44:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":45:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":45:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":81:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":84:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":83:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":83:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":55:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":79:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":57:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":57:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":58:20)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":58:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":58:31)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":58:42)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":58:43)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":58:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":59:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":59:33)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":59:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":59:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":59:23)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":59:24)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":59:30)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":59:29)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":60:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":71:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":60:8)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":60:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":61:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":65:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":67:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":63:16)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":63:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":63:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":63:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":63:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":63:31)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":64:22)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":64:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":64:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":64:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":64:18)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":69:16)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":69:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":69:27)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":69:30)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":69:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":69:31)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":70:22)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":70:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":70:14)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":70:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":70:18)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":72:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":78:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":73:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":73:25)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":75:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":75:16)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":75:22)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":76:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":76:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":77:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c":77:14)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc11, #loc12])
#loc139 = loc(fused[#loc13, #loc14])
#loc140 = loc(fused[#loc15, #loc16])
#loc141 = loc(fused[#loc19, #loc20])
#loc142 = loc(fused[#loc18, #loc20])
#loc143 = loc(fused[#loc17, #loc21])
#loc144 = loc(fused[#loc22, #loc21])
#loc145 = loc(fused[#loc23, #loc24])
#loc146 = loc(fused[#loc25, #loc26])
#loc147 = loc(fused[#loc27, #loc24])
#loc148 = loc(fused[#loc31, #loc32])
#loc149 = loc(fused[#loc33, #loc34])
#loc150 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc151 = loc(fused[#loc42, #loc43])
#loc152 = loc(fused[#loc45, #loc44])
#loc153 = loc(fused[#loc53, #loc54])
#loc154 = loc(fused[#loc56, #loc55])
#loc155 = loc(fused[#loc60, #loc61])
#loc156 = loc(fused[#loc62, #loc63])
#loc157 = loc(fused[#loc71, #loc72])
#loc158 = loc(fused[#loc73, #loc74])
#loc159 = loc(fused[#loc75, #loc76])
#loc160 = loc(fused[#loc77, #loc78])
#loc161 = loc(fused[#loc81, #loc82])
#loc162 = loc(fused[#loc80, #loc82])
#loc163 = loc(fused[#loc79, #loc83])
#loc164 = loc(fused[#loc84, #loc83])
#loc165 = loc(fused[#loc85, #loc86])
#loc166 = loc(fused[#loc87, #loc88])
#loc167 = loc(fused[#loc89, #loc86])
#loc168 = loc(fused[#loc93, #loc94])
#loc169 = loc(fused[#loc95, #loc96])
#loc170 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc171 = loc(fused[#loc104, #loc105])
#loc172 = loc(fused[#loc107, #loc106])
#loc173 = loc(fused[#loc115, #loc116])
#loc174 = loc(fused[#loc118, #loc117])
#loc175 = loc(fused[#loc122, #loc123])
#loc176 = loc(fused[#loc124, #loc125])
