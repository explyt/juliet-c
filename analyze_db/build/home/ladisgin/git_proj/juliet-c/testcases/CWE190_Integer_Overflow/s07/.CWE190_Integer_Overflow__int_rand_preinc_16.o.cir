!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc16 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":30:16)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":58:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc92)
  cir.func private @printIntLine(!s32i) loc(#loc93)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc96)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc98)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc15)
  ^bb3:  // pred: ^bb2
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc16)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc16)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc16)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc16)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc16)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc16)
    cir.br ^bb6(%20 : !u32i) loc(#loc16)
  ^bb5:  // pred: ^bb3
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc16)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc16)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc16)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc16)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc16)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc16)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc16)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc16)
    cir.br ^bb6(%36 : !u32i) loc(#loc16)
  ^bb6(%37: !u32i loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":30:16)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // pred: ^bb6
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc16)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc14)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc100)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc100)
  ^bb11:  // pred: ^bb10
    %39 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %40 ^bb12, ^bb15 loc(#loc21)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc101)
  ^bb13:  // pred: ^bb12
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %42 = cir.unary(inc, %41) : !s32i, !s32i loc(#loc24)
    cir.store %42, %1 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc27)
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc28)
  ^bb15:  // 2 preds: ^bb11, ^bb14
    cir.br ^bb16 loc(#loc20)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc6)
  } loc(#loc94)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc103)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc109)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc44)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc48)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc48)
  ^bb3:  // pred: ^bb2
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc49)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc49)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc49)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc49)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc49)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc49)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc49)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc49)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc49)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc49)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc49)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc49)
    cir.br ^bb6(%20 : !u32i) loc(#loc49)
  ^bb5:  // pred: ^bb3
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc49)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc49)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc49)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc49)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc49)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc49)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc49)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc49)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc49)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc49)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc49)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc49)
    cir.br ^bb6(%36 : !u32i) loc(#loc49)
  ^bb6(%37: !u32i loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":58:16)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc49)
  ^bb7:  // pred: ^bb6
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc49)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb8 loc(#loc51)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc47)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc113)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc113)
  ^bb11:  // pred: ^bb10
    %39 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc54)
    cir.brcond %40 ^bb12, ^bb18 loc(#loc54)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc114)
  ^bb13:  // pred: ^bb12
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %42 = cir.const #cir.int<2147483647> : !s32i loc(#loc58)
    %43 = cir.cmp(lt, %41, %42) : !s32i, !cir.bool loc(#loc115)
    cir.brcond %43 ^bb14, ^bb15 loc(#loc116)
  ^bb14:  // pred: ^bb13
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %45 = cir.unary(inc, %44) : !s32i, !s32i loc(#loc62)
    cir.store %45, %1 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    cir.store %46, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc65)
    cir.br ^bb16 loc(#loc60)
  ^bb15:  // pred: ^bb13
    %48 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc37)
    %49 = cir.cast(array_to_ptrdecay, %48 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%49) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb16 loc(#loc56)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc56)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc67)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc53)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc39)
  } loc(#loc107)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc120)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc122)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc78)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc78)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2> : !s32i loc(#loc79)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc77)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc124)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %7 ^bb8, ^bb11 loc(#loc84)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc125)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc87)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc90)
    cir.br ^bb10 loc(#loc86)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc91)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc83)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc69)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":43:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":38:13)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":38:26)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":24:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":26:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":26:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":32:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":27:11)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":30:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":31:9)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":42:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":33:11)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":35:9)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":40:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":37:13)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":37:15)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":39:26)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":39:13)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":41:9)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":102:1)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":106:1)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":104:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":104:13)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":105:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":105:13)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":72:23)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":50:1)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":76:1)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":67:13)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":67:26)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":52:5)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":52:9)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":54:12)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":54:5)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":55:5)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":60:5)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":55:11)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":58:9)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":59:9)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":61:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":75:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":61:11)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":64:9)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":73:9)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":64:13)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":64:20)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":65:9)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":69:9)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":71:9)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":66:13)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":66:15)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":68:26)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":68:13)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":72:13)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":74:9)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":79:1)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":100:1)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":95:13)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":95:26)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":81:5)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":81:9)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":83:12)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":83:5)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":84:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":89:5)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":84:11)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":87:16)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":87:9)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":88:9)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":90:5)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":99:5)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":90:11)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":92:9)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":97:9)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":94:13)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":94:15)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":96:26)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":96:13)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_preinc_16.c":98:9)
#loc92 = loc(fused[#loc1, #loc2])
#loc93 = loc(fused[#loc3, #loc4])
#loc94 = loc(fused[#loc5, #loc6])
#loc95 = loc(fused[#loc7, #loc8])
#loc96 = loc(fused[#loc9, #loc10])
#loc97 = loc(fused[#loc12, #loc11])
#loc98 = loc(fused[#loc13, #loc14])
#loc99 = loc(fused[#loc17, #loc16])
#loc100 = loc(fused[#loc19, #loc20])
#loc101 = loc(fused[#loc22, #loc23])
#loc102 = loc(fused[#loc24, #loc25])
#loc103 = loc(fused[#loc29, #loc30])
#loc104 = loc(fused[#loc31, #loc32])
#loc105 = loc(fused[#loc33, #loc34])
#loc106 = loc(fused[#loc35, #loc36])
#loc107 = loc(fused[#loc38, #loc39])
#loc108 = loc(fused[#loc40, #loc41])
#loc109 = loc(fused[#loc42, #loc43])
#loc110 = loc(fused[#loc45, #loc44])
#loc111 = loc(fused[#loc46, #loc47])
#loc112 = loc(fused[#loc50, #loc49])
#loc113 = loc(fused[#loc52, #loc53])
#loc114 = loc(fused[#loc55, #loc56])
#loc115 = loc(fused[#loc57, #loc58])
#loc116 = loc(fused[#loc59, #loc60, #loc61, #loc56])
#loc117 = loc(fused[#loc62, #loc63])
#loc118 = loc(fused[#loc68, #loc69])
#loc119 = loc(fused[#loc70, #loc71])
#loc120 = loc(fused[#loc72, #loc73])
#loc121 = loc(fused[#loc75, #loc74])
#loc122 = loc(fused[#loc76, #loc77])
#loc123 = loc(fused[#loc80, #loc79])
#loc124 = loc(fused[#loc82, #loc83])
#loc125 = loc(fused[#loc85, #loc86])
#loc126 = loc(fused[#loc87, #loc88])
