!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc13 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":20:23)
#loc14 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":20:27)
#loc57 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":102:10)
#loc58 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":102:14)
#loc59 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":102:20)
#loc60 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":102:32)
#loc82 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":35:24)
#loc83 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":35:28)
#loc114 = loc(fused[#loc13, #loc14])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc59, #loc60])
#loc137 = loc(fused[#loc82, #loc83])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc108)
  cir.func private @signal(!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc109)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc110)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc111)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc112)
  cir.func internal private @helperBad(%arg0: !s32i loc(fused[#loc13, #loc14])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["voidPointer", init] {alignment = 8 : i64} loc(#loc115)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc19)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    cir.store %5, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc115)
    cir.br ^bb1 loc(#loc116)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
    %8 = cir.cmp(eq, %6, %7) : !cir.ptr<!void>, !cir.bool loc(#loc117)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc118)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc27)
    cir.call @exit(%11) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
    cir.br ^bb3 loc(#loc21)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
    cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc29)
    cir.return loc(#loc12)
  } loc(#loc113)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc108)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc34)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc121)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %4 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
    %5 = cir.call @signal(%3, %4) : (!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc38)
    cir.br ^bb3 loc(#loc33)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc33)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc31)
  } loc(#loc119)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc40)
  } loc(#loc122)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc125)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc126)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc54)
  cir.func @main(%arg0: !s32i loc(fused[#loc57, #loc58]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc59, #loc60])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc56)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc61)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc62)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc63)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc63)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc64)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc51)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %8 = cir.get_global @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05_good() : () -> () loc(#loc66)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc52)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc53)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %13 = cir.get_global @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc132)
    cir.call @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05_bad() : () -> () loc(#loc70)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc54)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    cir.return %17 : !s32i loc(#loc133)
  } loc(#loc128)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" internal dsolocal @volatileSigAtomic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc135)
  cir.func internal private @helperGood(%arg0: !s32i loc(fused[#loc82, #loc83])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc137)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %2 = cir.get_global @volatileSigAtomic : !cir.ptr<!s32i> loc(#loc135)
    cir.store volatile %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.return loc(#loc81)
  } loc(#loc136)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc134)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc91)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc141)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc77)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb4 loc(#loc93)
  ^bb3:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc96)
    %6 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc97)
    %7 = cir.call @signal(%5, %6) : (!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc98)
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc90)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc88)
  } loc(#loc139)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc143)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc108)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc144)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<2> : !s32i loc(#loc105)
    %4 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc106)
    %5 = cir.call @signal(%3, %4) : (!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc107)
    cir.br ^bb3 loc(#loc102)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc100)
  } loc(#loc142)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":0:0)
#loc1 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":47:1)
#loc2 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":47:25)
#loc3 = loc("/usr/include/signal.h":88:1)
#loc4 = loc("/usr/include/signal.h":89:6)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":20:1)
#loc12 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":31:1)
#loc15 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":28:5)
#loc16 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":28:34)
#loc17 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":21:1)
#loc18 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":28:25)
#loc19 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":28:32)
#loc20 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":29:5)
#loc21 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":29:40)
#loc22 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":29:9)
#loc23 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":29:24)
#loc24 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":29:30)
#loc25 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":29:31)
#loc26 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":29:37)
#loc27 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":29:36)
#loc28 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":30:10)
#loc29 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":30:5)
#loc30 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":52:1)
#loc31 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":58:1)
#loc32 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":54:5)
#loc33 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":57:5)
#loc34 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":54:8)
#loc35 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":55:5)
#loc36 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":56:16)
#loc37 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":56:24)
#loc38 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":56:9)
#loc39 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":87:1)
#loc40 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":91:1)
#loc41 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":89:5)
#loc42 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":89:11)
#loc43 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":90:5)
#loc44 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":90:11)
#loc45 = loc("/usr/include/stdlib.h":575:1)
#loc46 = loc("/usr/include/stdlib.h":575:41)
#loc47 = loc("/usr/include/time.h":76:1)
#loc48 = loc("/usr/include/time.h":76:38)
#loc49 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":107:15)
#loc52 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":109:15)
#loc53 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":112:15)
#loc54 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":114:15)
#loc55 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":102:1)
#loc56 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":117:1)
#loc61 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":103:1)
#loc62 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":105:27)
#loc63 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":105:22)
#loc64 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":105:5)
#loc65 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":107:5)
#loc66 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":108:5)
#loc67 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":108:72)
#loc68 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":109:5)
#loc69 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":112:5)
#loc70 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":113:5)
#loc71 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":113:71)
#loc72 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":114:5)
#loc73 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":116:12)
#loc74 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":116:5)
#loc75 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":48:1)
#loc76 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":48:26)
#loc77 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":70:19)
#loc78 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":33:1)
#loc79 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":33:50)
#loc80 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":35:1)
#loc81 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":42:1)
#loc84 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":36:1)
#loc85 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":41:25)
#loc86 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":41:5)
#loc87 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":65:1)
#loc88 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":76:1)
#loc89 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":67:5)
#loc90 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":75:5)
#loc91 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":67:8)
#loc92 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":68:5)
#loc93 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":71:5)
#loc94 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":73:5)
#loc95 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":70:9)
#loc96 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":74:16)
#loc97 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":74:24)
#loc98 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":74:9)
#loc99 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":79:1)
#loc100 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":85:1)
#loc101 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":81:5)
#loc102 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":84:5)
#loc103 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":81:8)
#loc104 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":82:5)
#loc105 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":83:16)
#loc106 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":83:24)
#loc107 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_05.c":83:9)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc7, #loc8])
#loc112 = loc(fused[#loc9, #loc10])
#loc113 = loc(fused[#loc11, #loc12])
#loc115 = loc(fused[#loc15, #loc16])
#loc116 = loc(fused[#loc20, #loc21])
#loc117 = loc(fused[#loc22, #loc23])
#loc118 = loc(fused[#loc24, #loc21])
#loc119 = loc(fused[#loc30, #loc31])
#loc120 = loc(fused[#loc32, #loc33])
#loc121 = loc(fused[#loc35, #loc33])
#loc122 = loc(fused[#loc39, #loc40])
#loc123 = loc(fused[#loc41, #loc42])
#loc124 = loc(fused[#loc43, #loc44])
#loc125 = loc(fused[#loc45, #loc46])
#loc126 = loc(fused[#loc47, #loc48])
#loc127 = loc(fused[#loc49, #loc50])
#loc128 = loc(fused[#loc55, #loc56])
#loc131 = loc(fused[#loc66, #loc67])
#loc132 = loc(fused[#loc70, #loc71])
#loc133 = loc(fused[#loc74, #loc73])
#loc134 = loc(fused[#loc75, #loc76])
#loc135 = loc(fused[#loc78, #loc79])
#loc136 = loc(fused[#loc80, #loc81])
#loc138 = loc(fused[#loc86, #loc85])
#loc139 = loc(fused[#loc87, #loc88])
#loc140 = loc(fused[#loc89, #loc90])
#loc141 = loc(fused[#loc92, #loc93, #loc94, #loc90])
#loc142 = loc(fused[#loc99, #loc100])
#loc143 = loc(fused[#loc101, #loc102])
#loc144 = loc(fused[#loc104, #loc102])
