!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc109)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc110)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc111)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc112)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc113)
  cir.func private @close(!s32i) -> !s32i loc(#loc114)
  cir.func no_proto @CWE510_Trapdoor__network_listen_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc117)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc118)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc119)
  ^bb2:  // 2 preds: ^bb1, ^bb38
    %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %4 ^bb3, ^bb39 loc(#loc23)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc121)
  ^bb5:  // pred: ^bb4
    %5 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc18)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc20)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc122)
  ^bb7:  // pred: ^bb26
    %9 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %10 ^bb8, ^bb27 loc(#loc29)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc123)
  ^bb9:  // pred: ^bb8
    %11 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %13 = cir.const #cir.int<6> : !s32i loc(#loc34)
    %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc35)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.br ^bb10 loc(#loc125)
  ^bb10:  // pred: ^bb9
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc41)
    %18 = cir.cmp(eq, %15, %17) : !s32i, !cir.bool loc(#loc126)
    cir.brcond %18 ^bb11, ^bb12 loc(#loc127)
  ^bb11:  // pred: ^bb10
    cir.br ^bb27 loc(#loc43)
  ^bb12:  // pred: ^bb10
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // pred: ^bb12
    %19 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc128)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %21 = cir.const #cir.int<16> : !u64i loc(#loc129)
    cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc130)
    %22 = cir.const #cir.int<2> : !s32i loc(#loc51)
    %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc51)
    %24 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc52)
    cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc131)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc54)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc54)
    %27 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc55)
    %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc56)
    cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc132)
    %29 = cir.const #cir.int<30000> : !s32i loc(#loc58)
    %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc58)
    %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc59)
    %32 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
    cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc133)
    cir.br ^bb14 loc(#loc134)
  ^bb14:  // pred: ^bb13
    %33 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %34 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc135)
    %35 = cir.const #cir.int<16> : !u64i loc(#loc136)
    %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc136)
    %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc70)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc71)
    %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc137)
    cir.brcond %40 ^bb15, ^bb16 loc(#loc138)
  ^bb15:  // pred: ^bb14
    cir.br ^bb27 loc(#loc73)
  ^bb16:  // pred: ^bb14
    cir.br ^bb17 loc(#loc64)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc139)
  ^bb18:  // pred: ^bb17
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    %42 = cir.const #cir.int<5> : !s32i loc(#loc77)
    %43 = cir.call @listen(%41, %42) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc78)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %45 = cir.unary(minus, %44) nsw : !s32i, !s32i loc(#loc79)
    %46 = cir.cmp(eq, %43, %45) : !s32i, !cir.bool loc(#loc140)
    cir.brcond %46 ^bb19, ^bb20 loc(#loc141)
  ^bb19:  // pred: ^bb18
    cir.br ^bb27 loc(#loc81)
  ^bb20:  // pred: ^bb18
    cir.br ^bb21 loc(#loc75)
  ^bb21:  // pred: ^bb20
    %47 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %48 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc83)
    %49 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc84)
    %50 = cir.call @accept(%47, %48, %49) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc85)
    cir.store %50, %2 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.br ^bb22 loc(#loc143)
  ^bb22:  // pred: ^bb21
    %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc91)
    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc144)
    cir.brcond %54 ^bb23, ^bb24 loc(#loc145)
  ^bb23:  // pred: ^bb22
    cir.br ^bb27 loc(#loc93)
  ^bb24:  // pred: ^bb22
    cir.br ^bb25 loc(#loc89)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc31)
  ^bb26:  // pred: ^bb25
    cir.br ^bb7 loc(#loc28)
  ^bb27:  // 5 preds: ^bb7, ^bb11, ^bb15, ^bb19, ^bb23
    cir.br ^bb28 loc(#loc28)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc146)
  ^bb29:  // pred: ^bb28
    %55 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc97)
    %58 = cir.cmp(ne, %55, %57) : !s32i, !cir.bool loc(#loc147)
    cir.brcond %58 ^bb30, ^bb31 loc(#loc148)
  ^bb30:  // pred: ^bb29
    %59 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %60 = cir.call @close(%59) : (!s32i) -> !s32i loc(#loc100)
    cir.br ^bb31 loc(#loc95)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc95)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc149)
  ^bb33:  // pred: ^bb32
    %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %62 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc104)
    %64 = cir.cmp(ne, %61, %63) : !s32i, !cir.bool loc(#loc150)
    cir.brcond %64 ^bb34, ^bb35 loc(#loc151)
  ^bb34:  // pred: ^bb33
    %65 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %66 = cir.call @close(%65) : (!s32i) -> !s32i loc(#loc107)
    cir.br ^bb35 loc(#loc102)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    cir.br ^bb36 loc(#loc102)
  ^bb36:  // pred: ^bb35
    cir.br ^bb37 loc(#loc26)
  ^bb37:  // pred: ^bb36
    cir.br ^bb39 loc(#loc108)
  ^bb38:  // no predecessors
    cir.br ^bb2 loc(#loc22)
  ^bb39:  // 2 preds: ^bb2, ^bb37
    cir.br ^bb40 loc(#loc22)
  ^bb40:  // pred: ^bb39
    cir.return loc(#loc14)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/unistd.h":358:1)
#loc12 = loc("/usr/include/unistd.h":358:27)
#loc13 = loc("CWE510_Trapdoor__network_listen_16.c":39:1)
#loc14 = loc("CWE510_Trapdoor__network_listen_16.c":103:1)
#loc15 = loc("CWE510_Trapdoor__network_listen_16.c":48:13)
#loc16 = loc("CWE510_Trapdoor__network_listen_16.c":48:32)
#loc17 = loc("CWE510_Trapdoor__network_listen_16.c":49:13)
#loc18 = loc("CWE510_Trapdoor__network_listen_16.c":49:35)
#loc19 = loc("CWE510_Trapdoor__network_listen_16.c":50:13)
#loc20 = loc("CWE510_Trapdoor__network_listen_16.c":50:35)
#loc21 = loc("CWE510_Trapdoor__network_listen_16.c":41:5)
#loc22 = loc("CWE510_Trapdoor__network_listen_16.c":102:5)
#loc23 = loc("CWE510_Trapdoor__network_listen_16.c":41:11)
#loc24 = loc("CWE510_Trapdoor__network_listen_16.c":42:5)
#loc25 = loc("CWE510_Trapdoor__network_listen_16.c":43:9)
#loc26 = loc("CWE510_Trapdoor__network_listen_16.c":100:9)
#loc27 = loc("CWE510_Trapdoor__network_listen_16.c":51:13)
#loc28 = loc("CWE510_Trapdoor__network_listen_16.c":85:21)
#loc29 = loc("CWE510_Trapdoor__network_listen_16.c":85:20)
#loc30 = loc("CWE510_Trapdoor__network_listen_16.c":52:13)
#loc31 = loc("CWE510_Trapdoor__network_listen_16.c":84:13)
#loc32 = loc("CWE510_Trapdoor__network_listen_16.c":60:39)
#loc33 = loc("CWE510_Trapdoor__network_listen_16.c":60:48)
#loc34 = loc("CWE510_Trapdoor__network_listen_16.c":60:61)
#loc35 = loc("CWE510_Trapdoor__network_listen_16.c":60:32)
#loc36 = loc("CWE510_Trapdoor__network_listen_16.c":60:17)
#loc37 = loc("CWE510_Trapdoor__network_listen_16.c":60:72)
#loc38 = loc("CWE510_Trapdoor__network_listen_16.c":61:17)
#loc39 = loc("CWE510_Trapdoor__network_listen_16.c":64:17)
#loc40 = loc("CWE510_Trapdoor__network_listen_16.c":61:21)
#loc41 = loc("CWE510_Trapdoor__network_listen_16.c":61:37)
#loc42 = loc("CWE510_Trapdoor__network_listen_16.c":62:17)
#loc43 = loc("CWE510_Trapdoor__network_listen_16.c":63:21)
#loc44 = loc("CWE510_Trapdoor__network_listen_16.c":65:24)
#loc45 = loc("CWE510_Trapdoor__network_listen_16.c":65:25)
#loc46 = loc("CWE510_Trapdoor__network_listen_16.c":65:34)
#loc47 = loc("CWE510_Trapdoor__network_listen_16.c":65:37)
#loc48 = loc("CWE510_Trapdoor__network_listen_16.c":65:51)
#loc49 = loc("CWE510_Trapdoor__network_listen_16.c":65:17)
#loc50 = loc("CWE510_Trapdoor__network_listen_16.c":65:52)
#loc51 = loc("CWE510_Trapdoor__network_listen_16.c":66:38)
#loc52 = loc("/usr/include/netinet/in.h":249:5)
#loc53 = loc("CWE510_Trapdoor__network_listen_16.c":66:17)
#loc54 = loc("CWE510_Trapdoor__network_listen_16.c":67:43)
#loc55 = loc("/usr/include/netinet/in.h":251:20)
#loc56 = loc("/usr/include/netinet/in.h":33:15)
#loc57 = loc("CWE510_Trapdoor__network_listen_16.c":67:17)
#loc58 = loc("CWE510_Trapdoor__network_listen_16.c":68:42)
#loc59 = loc("CWE510_Trapdoor__network_listen_16.c":68:36)
#loc60 = loc("/usr/include/netinet/in.h":250:15)
#loc61 = loc("CWE510_Trapdoor__network_listen_16.c":68:17)
#loc62 = loc("CWE510_Trapdoor__network_listen_16.c":68:47)
#loc63 = loc("CWE510_Trapdoor__network_listen_16.c":69:17)
#loc64 = loc("CWE510_Trapdoor__network_listen_16.c":72:17)
#loc65 = loc("CWE510_Trapdoor__network_listen_16.c":69:26)
#loc66 = loc("CWE510_Trapdoor__network_listen_16.c":69:58)
#loc67 = loc("CWE510_Trapdoor__network_listen_16.c":69:59)
#loc68 = loc("CWE510_Trapdoor__network_listen_16.c":69:68)
#loc69 = loc("CWE510_Trapdoor__network_listen_16.c":69:82)
#loc70 = loc("CWE510_Trapdoor__network_listen_16.c":69:21)
#loc71 = loc("CWE510_Trapdoor__network_listen_16.c":69:88)
#loc72 = loc("CWE510_Trapdoor__network_listen_16.c":70:17)
#loc73 = loc("CWE510_Trapdoor__network_listen_16.c":71:21)
#loc74 = loc("CWE510_Trapdoor__network_listen_16.c":73:17)
#loc75 = loc("CWE510_Trapdoor__network_listen_16.c":76:17)
#loc76 = loc("CWE510_Trapdoor__network_listen_16.c":73:28)
#loc77 = loc("CWE510_Trapdoor__network_listen_16.c":73:42)
#loc78 = loc("CWE510_Trapdoor__network_listen_16.c":73:21)
#loc79 = loc("CWE510_Trapdoor__network_listen_16.c":73:48)
#loc80 = loc("CWE510_Trapdoor__network_listen_16.c":74:17)
#loc81 = loc("CWE510_Trapdoor__network_listen_16.c":75:21)
#loc82 = loc("CWE510_Trapdoor__network_listen_16.c":78:39)
#loc83 = loc("CWE510_Trapdoor__network_listen_16.c":78:53)
#loc84 = loc("CWE510_Trapdoor__network_listen_16.c":78:59)
#loc85 = loc("CWE510_Trapdoor__network_listen_16.c":78:32)
#loc86 = loc("CWE510_Trapdoor__network_listen_16.c":78:17)
#loc87 = loc("CWE510_Trapdoor__network_listen_16.c":78:63)
#loc88 = loc("CWE510_Trapdoor__network_listen_16.c":79:17)
#loc89 = loc("CWE510_Trapdoor__network_listen_16.c":82:17)
#loc90 = loc("CWE510_Trapdoor__network_listen_16.c":79:21)
#loc91 = loc("CWE510_Trapdoor__network_listen_16.c":79:37)
#loc92 = loc("CWE510_Trapdoor__network_listen_16.c":80:17)
#loc93 = loc("CWE510_Trapdoor__network_listen_16.c":81:21)
#loc94 = loc("CWE510_Trapdoor__network_listen_16.c":86:13)
#loc95 = loc("CWE510_Trapdoor__network_listen_16.c":89:13)
#loc96 = loc("CWE510_Trapdoor__network_listen_16.c":86:17)
#loc97 = loc("CWE510_Trapdoor__network_listen_16.c":86:33)
#loc98 = loc("CWE510_Trapdoor__network_listen_16.c":87:13)
#loc99 = loc("CWE510_Trapdoor__network_listen_16.c":88:30)
#loc100 = loc("CWE510_Trapdoor__network_listen_16.c":88:17)
#loc101 = loc("CWE510_Trapdoor__network_listen_16.c":90:13)
#loc102 = loc("CWE510_Trapdoor__network_listen_16.c":93:13)
#loc103 = loc("CWE510_Trapdoor__network_listen_16.c":90:17)
#loc104 = loc("CWE510_Trapdoor__network_listen_16.c":90:33)
#loc105 = loc("CWE510_Trapdoor__network_listen_16.c":91:13)
#loc106 = loc("CWE510_Trapdoor__network_listen_16.c":92:30)
#loc107 = loc("CWE510_Trapdoor__network_listen_16.c":92:17)
#loc108 = loc("CWE510_Trapdoor__network_listen_16.c":101:9)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc9, #loc10])
#loc114 = loc(fused[#loc11, #loc12])
#loc115 = loc(fused[#loc13, #loc14])
#loc116 = loc(fused[#loc15, #loc16])
#loc117 = loc(fused[#loc17, #loc18])
#loc118 = loc(fused[#loc19, #loc20])
#loc119 = loc(fused[#loc21, #loc22])
#loc120 = loc(fused[#loc24, #loc22])
#loc121 = loc(fused[#loc25, #loc26])
#loc122 = loc(fused[#loc27, #loc28])
#loc123 = loc(fused[#loc30, #loc31])
#loc124 = loc(fused[#loc36, #loc37])
#loc125 = loc(fused[#loc38, #loc39])
#loc126 = loc(fused[#loc40, #loc41])
#loc127 = loc(fused[#loc42, #loc39])
#loc128 = loc(fused[#loc44, #loc45])
#loc129 = loc(fused[#loc47, #loc48])
#loc130 = loc(fused[#loc49, #loc50])
#loc131 = loc(fused[#loc53, #loc51])
#loc132 = loc(fused[#loc57, #loc54])
#loc133 = loc(fused[#loc61, #loc62])
#loc134 = loc(fused[#loc63, #loc64])
#loc135 = loc(fused[#loc66, #loc67])
#loc136 = loc(fused[#loc68, #loc69])
#loc137 = loc(fused[#loc70, #loc71])
#loc138 = loc(fused[#loc72, #loc64])
#loc139 = loc(fused[#loc74, #loc75])
#loc140 = loc(fused[#loc78, #loc79])
#loc141 = loc(fused[#loc80, #loc75])
#loc142 = loc(fused[#loc86, #loc87])
#loc143 = loc(fused[#loc88, #loc89])
#loc144 = loc(fused[#loc90, #loc91])
#loc145 = loc(fused[#loc92, #loc89])
#loc146 = loc(fused[#loc94, #loc95])
#loc147 = loc(fused[#loc96, #loc97])
#loc148 = loc(fused[#loc98, #loc95])
#loc149 = loc(fused[#loc101, #loc102])
#loc150 = loc(fused[#loc103, #loc104])
#loc151 = loc(fused[#loc105, #loc102])
