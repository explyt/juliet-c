!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__semicolon_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc25)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE398_Poor_Code_Quality__semicolon_16_bad() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc8)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc8)
        cir.condition(%1) loc(#loc8)
      } do {
        cir.scope {
          %0 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
          %1 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%1) : (!cir.ptr<!s8i>) -> () loc(#loc10)
          cir.break loc(#loc11)
        } loc(#loc28)
        cir.yield loc(#loc7)
      } loc(#loc27)
    } loc(#loc27)
    cir.return loc(#loc5)
  } loc(#loc26)
  cir.func no_proto @CWE398_Poor_Code_Quality__semicolon_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc30)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc14)
    cir.return loc(#loc13)
  } loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc16)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc21)
        cir.condition(%1) loc(#loc21)
      } do {
        cir.scope {
          %0 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc16)
          %1 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc16)
          cir.call @printLine(%1) : (!cir.ptr<!s8i>) -> () loc(#loc23)
          cir.break loc(#loc24)
        } loc(#loc33)
        cir.yield loc(#loc20)
      } loc(#loc32)
    } loc(#loc32)
    cir.return loc(#loc18)
  } loc(#loc31)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__semicolon_16.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":26:19)
#loc4 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":20:1)
#loc5 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":29:1)
#loc6 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":22:5)
#loc7 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":28:5)
#loc8 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":22:11)
#loc9 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":23:5)
#loc10 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":26:9)
#loc11 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":27:9)
#loc12 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":46:1)
#loc13 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":49:1)
#loc14 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":48:5)
#loc15 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":48:11)
#loc16 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":41:19)
#loc17 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":36:1)
#loc18 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":44:1)
#loc19 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":38:5)
#loc20 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":43:5)
#loc21 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":38:11)
#loc22 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":39:5)
#loc23 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":41:9)
#loc24 = loc("CWE398_Poor_Code_Quality__semicolon_16.c":42:9)
#loc25 = loc(fused[#loc1, #loc2])
#loc26 = loc(fused[#loc4, #loc5])
#loc27 = loc(fused[#loc6, #loc7])
#loc28 = loc(fused[#loc9, #loc7])
#loc29 = loc(fused[#loc12, #loc13])
#loc30 = loc(fused[#loc14, #loc15])
#loc31 = loc(fused[#loc17, #loc18])
#loc32 = loc(fused[#loc19, #loc20])
#loc33 = loc(fused[#loc22, #loc20])
