!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":22:67)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":22:74)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":54:71)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":54:78)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":82:71)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":82:78)
#true = #cir.bool<true> : !cir.bool
#loc138 = loc(fused[#loc8, #loc9])
#loc154 = loc(fused[#loc49, #loc50])
#loc170 = loc(fused[#loc92, #loc93])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc139)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc140)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc14)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc11)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc11)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc15)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc142)
      %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc143)
      %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc143)
      cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc143)
      cir.scope {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc145)
        cir.if %12 {
          %13 = cir.const #cir.int<1> : !s32i loc(#loc30)
          %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc32)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc32)
          cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc147)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc35)
            cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc149)
            cir.for : cond {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc37)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc38)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc150)
              cir.condition(%20) loc(#loc39)
            } body {
              cir.scope {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc41)
                %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc42)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc42)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc42)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc43)
              } loc(#loc151)
              cir.yield loc(#loc34)
            } step {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc44)
              %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc45)
              cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc152)
              cir.yield loc(#loc148)
            } loc(#loc148)
          } loc(#loc148)
        } else {
          %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc46)
        } loc(#loc146)
      } loc(#loc144)
    } loc(#loc141)
    cir.return loc(#loc7)
  } loc(#loc137)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc49, #loc50])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc156)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc55)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc52)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc52)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc155)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc158)
      %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc159)
      %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc159)
      cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc159)
      cir.scope {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc66)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc67)
        %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc161)
        cir.if %12 {
          %13 = cir.const #cir.int<1> : !s32i loc(#loc71)
          %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc73)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc73)
          cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc163)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc76)
            cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc165)
            cir.for : cond {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc78)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc79)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc166)
              cir.condition(%20) loc(#loc80)
            } body {
              cir.scope {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc83)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc83)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc84)
              } loc(#loc167)
              cir.yield loc(#loc75)
            } step {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc86)
              cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc168)
              cir.yield loc(#loc164)
            } loc(#loc164)
          } loc(#loc164)
        } else {
          %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc87)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc87)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc88)
        } loc(#loc162)
      } loc(#loc160)
    } loc(#loc157)
    cir.return loc(#loc48)
  } loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc89)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc92, #loc93])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc172)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc98)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc95)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc95)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc174)
      %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc175)
      %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc175)
      cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc175)
      cir.scope {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc109)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc110)
        %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc177)
        %13 = cir.ternary(%12, true {
          %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc113)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc178)
          %17 = cir.ternary(%16, true {
            %18 = cir.const #true loc(#loc111)
            cir.yield %18 : !cir.bool loc(#loc111)
          }, false {
            %18 = cir.const #false loc(#loc111)
            cir.yield %18 : !cir.bool loc(#loc111)
          }) : (!cir.bool) -> !cir.bool loc(#loc111)
          cir.yield %17 : !cir.bool loc(#loc111)
        }, false {
          %14 = cir.const #false loc(#loc111)
          cir.yield %14 : !cir.bool loc(#loc111)
        }) : (!cir.bool) -> !cir.bool loc(#loc111)
        cir.if %13 {
          %14 = cir.const #cir.int<1> : !s32i loc(#loc118)
          %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc119)
          %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc120)
          %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc120)
          cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc180)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc123)
            cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc182)
            cir.for : cond {
              %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc126)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc183)
              cir.condition(%21) loc(#loc127)
            } body {
              cir.scope {
                %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc130)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc130)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc131)
              } loc(#loc184)
              cir.yield loc(#loc122)
            } step {
              %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc133)
              cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc185)
              cir.yield loc(#loc181)
            } loc(#loc181)
          } loc(#loc181)
        } else {
          %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc89)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc89)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc134)
        } loc(#loc179)
      } loc(#loc176)
    } loc(#loc173)
    cir.return loc(#loc91)
  } loc(#loc169)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":44:23)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":22:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":47:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":25:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":25:28)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":27:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":27:25)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":23:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":27:18)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":27:17)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":28:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":46:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":29:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":29:13)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":30:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":30:30)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":33:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":45:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":33:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":33:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":34:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":41:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":43:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":35:28)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":35:20)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":35:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":37:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":40:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":37:21)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":37:17)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":37:24)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":37:28)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":37:26)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":38:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":39:37)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":39:30)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":39:17)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":37:33)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":37:32)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":44:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":54:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":79:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":57:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":57:28)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":59:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":59:25)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":55:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":59:18)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":59:17)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":60:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":78:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":61:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":61:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":62:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":62:30)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":65:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":77:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":65:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":65:21)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":66:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":73:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":75:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":67:28)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":67:20)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":67:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":69:13)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":72:13)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":69:21)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":69:17)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":69:24)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":69:28)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":69:26)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":70:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":71:37)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":71:30)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":71:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":69:33)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":69:32)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":76:23)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":76:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":103:23)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":82:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":106:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":85:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":85:28)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":87:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":87:25)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":83:1)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":87:18)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":87:17)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":88:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":105:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":89:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":89:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":90:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":90:30)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":92:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":104:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":92:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":92:21)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":92:23)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":92:26)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":92:34)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":92:36)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":93:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":100:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":102:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":94:28)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":94:20)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":94:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":96:13)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":99:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":96:21)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":96:17)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":96:24)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":96:28)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":96:26)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":97:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":98:37)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":98:30)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":98:17)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":96:33)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":96:32)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c":103:13)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc6, #loc7])
#loc139 = loc(fused[#loc10, #loc11])
#loc140 = loc(fused[#loc12, #loc13])
#loc141 = loc(fused[#loc17, #loc18])
#loc142 = loc(fused[#loc19, #loc20])
#loc143 = loc(fused[#loc21, #loc22])
#loc144 = loc(fused[#loc23, #loc24])
#loc145 = loc(fused[#loc25, #loc26])
#loc146 = loc(fused[#loc27, #loc28, #loc29, #loc24])
#loc147 = loc(fused[#loc32, #loc30])
#loc148 = loc(fused[#loc33, #loc34])
#loc149 = loc(fused[#loc36, #loc35])
#loc150 = loc(fused[#loc37, #loc38])
#loc151 = loc(fused[#loc40, #loc34])
#loc152 = loc(fused[#loc45, #loc44])
#loc153 = loc(fused[#loc47, #loc48])
#loc155 = loc(fused[#loc51, #loc52])
#loc156 = loc(fused[#loc53, #loc54])
#loc157 = loc(fused[#loc58, #loc59])
#loc158 = loc(fused[#loc60, #loc61])
#loc159 = loc(fused[#loc62, #loc63])
#loc160 = loc(fused[#loc64, #loc65])
#loc161 = loc(fused[#loc66, #loc67])
#loc162 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc163 = loc(fused[#loc73, #loc71])
#loc164 = loc(fused[#loc74, #loc75])
#loc165 = loc(fused[#loc77, #loc76])
#loc166 = loc(fused[#loc78, #loc79])
#loc167 = loc(fused[#loc81, #loc75])
#loc168 = loc(fused[#loc86, #loc85])
#loc169 = loc(fused[#loc90, #loc91])
#loc171 = loc(fused[#loc94, #loc95])
#loc172 = loc(fused[#loc96, #loc97])
#loc173 = loc(fused[#loc101, #loc102])
#loc174 = loc(fused[#loc103, #loc104])
#loc175 = loc(fused[#loc105, #loc106])
#loc176 = loc(fused[#loc107, #loc108])
#loc177 = loc(fused[#loc109, #loc110])
#loc178 = loc(fused[#loc112, #loc114])
#loc179 = loc(fused[#loc115, #loc116, #loc117, #loc108])
#loc180 = loc(fused[#loc120, #loc118])
#loc181 = loc(fused[#loc121, #loc122])
#loc182 = loc(fused[#loc124, #loc123])
#loc183 = loc(fused[#loc125, #loc126])
#loc184 = loc(fused[#loc128, #loc122])
#loc185 = loc(fused[#loc133, #loc132])
