!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":114:10)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":114:14)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":114:20)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":114:32)
#loc207 = loc(fused[#loc67, #loc68])
#loc208 = loc(fused[#loc69, #loc70])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc179)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc180)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc185)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc186)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.br ^bb2 loc(#loc189)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc191)
    cir.brcond %9 ^bb3, ^bb7 loc(#loc27)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc192)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc193)
    cir.br ^bb5 loc(#loc22)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc31)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb2 loc(#loc189)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc195)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb10 loc(#loc195)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc197)
    cir.brcond %18 ^bb11, ^bb17 loc(#loc38)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc198)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc199)
  ^bb13:  // pred: ^bb12
    %19 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc42)
    %20 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
    %22 = cir.call @strlen(%21) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc42)
    cir.store %22, %0 : !u64i, !cir.ptr<!u64i> loc(#loc183)
    %23 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc13)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc13)
    %26 = cir.binop(add, %23, %25) : !u64i loc(#loc13)
    %27 = cir.const #cir.int<4> : !u64i loc(#loc13)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc13)
    %29 = cir.alloca !u8i, !cir.ptr<!u8i>, %28 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
    cir.store %30, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc184)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc44)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc44)
    %33 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
    %35 = cir.call @wcscpy(%32, %34) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc46)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc47)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb14 loc(#loc41)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc33)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc33)
  ^bb16:  // pred: ^bb15
    %38 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %39 = cir.unary(inc, %38) : !s32i, !s32i loc(#loc50)
    cir.store %39, %3 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.br ^bb10 loc(#loc195)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc33)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc9)
  } loc(#loc182)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc201)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc204)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc64)
  cir.func @main(%arg0: !s32i loc(fused[#loc67, #loc68]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc208)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc71)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc72)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc73)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc73)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc74)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc61)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_17_good() : () -> () loc(#loc76)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_17_bad() : () -> () loc(#loc80)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc64)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc211)
    cir.return %17 : !s32i loc(#loc211)
  } loc(#loc206)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc212)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc213)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc215)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc216)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc217)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc218)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc219)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc100)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc220)
    cir.br ^bb1 loc(#loc221)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc104)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.br ^bb2 loc(#loc221)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc223)
    cir.brcond %9 ^bb3, ^bb7 loc(#loc108)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc224)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc110)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc110)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc110)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc225)
    cir.br ^bb5 loc(#loc103)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc103)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc113)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.br ^bb2 loc(#loc221)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc103)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc227)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<0> : !s32i loc(#loc116)
    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.br ^bb10 loc(#loc227)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc229)
    cir.brcond %18 ^bb11, ^bb17 loc(#loc120)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc230)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc231)
  ^bb13:  // pred: ^bb12
    %19 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc124)
    %20 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc125)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc125)
    %22 = cir.call @wcslen(%21) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc124)
    cir.store %22, %0 : !u64i, !cir.ptr<!u64i> loc(#loc215)
    %23 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc94)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc94)
    %26 = cir.binop(add, %23, %25) : !u64i loc(#loc94)
    %27 = cir.const #cir.int<4> : !u64i loc(#loc94)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc94)
    %29 = cir.alloca !u8i, !cir.ptr<!u8i>, %28 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc94)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc94)
    cir.store %30, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc216)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc126)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc126)
    %33 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc127)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc127)
    %35 = cir.call @wcscpy(%32, %34) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc128)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc129)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc129)
    cir.call @printWLine(%37) : (!cir.ptr<!s32i>) -> () loc(#loc130)
    cir.br ^bb14 loc(#loc123)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc115)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc115)
  ^bb16:  // pred: ^bb15
    %38 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %39 = cir.unary(inc, %38) : !s32i, !s32i loc(#loc132)
    cir.store %39, %3 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.br ^bb10 loc(#loc227)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc115)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc90)
  } loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc133)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc233)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc235)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc236)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc237)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc238)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc147)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc240)
    cir.br ^bb1 loc(#loc241)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc151)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    cir.br ^bb2 loc(#loc241)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc243)
    cir.brcond %9 ^bb3, ^bb7 loc(#loc155)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc244)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc133)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc133)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc133)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc245)
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc150)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc159)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.br ^bb2 loc(#loc241)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc150)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc247)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<0> : !s32i loc(#loc162)
    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    cir.br ^bb10 loc(#loc247)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc249)
    cir.brcond %18 ^bb11, ^bb17 loc(#loc166)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc250)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc251)
  ^bb13:  // pred: ^bb12
    %19 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc170)
    %20 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc171)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
    %22 = cir.call @strlen(%21) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc170)
    cir.store %22, %0 : !u64i, !cir.ptr<!u64i> loc(#loc235)
    %23 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc141)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc141)
    %26 = cir.binop(add, %23, %25) : !u64i loc(#loc141)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc141)
    %29 = cir.binop(mul, %26, %28) : !u64i loc(#loc141)
    %30 = cir.alloca !u8i, !cir.ptr<!u8i>, %29 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc141)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc141)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc236)
    %32 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc172)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc173)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
    %35 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc174)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc174)
    %37 = cir.call @strcpy(%34, %36) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc172)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc175)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc175)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc176)
    cir.br ^bb14 loc(#loc169)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc161)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc161)
  ^bb16:  // pred: ^bb15
    %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    %41 = cir.unary(inc, %40) : !s32i, !s32i loc(#loc178)
    cir.store %41, %3 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.br ^bb10 loc(#loc247)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc161)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc137)
  } loc(#loc234)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":35:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":27:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":47:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":41:13)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":41:49)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":42:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":42:35)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":29:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":29:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":29:11)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":30:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":30:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":31:12)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":31:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":36:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:20)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:18)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":33:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":35:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:24)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:23)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":46:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:16)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:20)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:18)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":38:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":39:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":45:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":41:30)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":41:45)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":43:26)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":43:32)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":43:19)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":44:31)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":44:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:24)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:23)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":99:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":103:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":101:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":101:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":102:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":102:13)
#loc57 = loc("/usr/include/stdlib.h":575:1)
#loc58 = loc("/usr/include/stdlib.h":575:41)
#loc59 = loc("/usr/include/time.h":76:1)
#loc60 = loc("/usr/include/time.h":76:38)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":119:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":121:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":124:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":126:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":114:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":129:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":115:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":117:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":117:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":117:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":119:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":120:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":120:56)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":121:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":124:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":125:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":125:55)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":126:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":128:12)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":128:5)
#loc85 = loc("/usr/include/wchar.h":247:1)
#loc86 = loc("/usr/include/wchar.h":247:51)
#loc87 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc88 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":54:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":74:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":68:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":68:52)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":69:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":69:35)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":56:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":56:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":56:11)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":57:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":57:12)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":58:12)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":58:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":63:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:16)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:20)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:18)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":60:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":62:24)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":62:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:24)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:23)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":73:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:16)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:20)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:18)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":65:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":66:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":72:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":68:30)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":68:48)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":70:26)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":70:32)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":70:19)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":71:35)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":71:13)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:24)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:23)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":85:24)
#loc134 = loc("/usr/include/string.h":141:1)
#loc135 = loc("/usr/include/string.h":142:14)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":77:1)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":97:1)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":91:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":91:49)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":92:13)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":92:35)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":79:5)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":79:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":79:11)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":80:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":80:12)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":81:12)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":81:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":86:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:13)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:16)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:20)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:18)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":83:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":85:9)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:24)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:23)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":96:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:13)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:16)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:20)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:18)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":88:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":89:9)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":95:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":91:30)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":91:45)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":93:19)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":93:26)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":93:32)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":94:31)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":94:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:24)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:23)
#loc179 = loc(fused[#loc2, #loc3])
#loc180 = loc(fused[#loc4, #loc5])
#loc181 = loc(fused[#loc6, #loc7])
#loc182 = loc(fused[#loc8, #loc9])
#loc183 = loc(fused[#loc10, #loc11])
#loc184 = loc(fused[#loc12, #loc13])
#loc185 = loc(fused[#loc14, #loc15])
#loc186 = loc(fused[#loc14, #loc16])
#loc187 = loc(fused[#loc17, #loc18])
#loc188 = loc(fused[#loc20, #loc19])
#loc189 = loc(fused[#loc21, #loc22])
#loc190 = loc(fused[#loc24, #loc23])
#loc191 = loc(fused[#loc25, #loc26])
#loc192 = loc(fused[#loc28, #loc22])
#loc193 = loc(fused[#loc29, #loc1])
#loc194 = loc(fused[#loc31, #loc30])
#loc195 = loc(fused[#loc32, #loc33])
#loc196 = loc(fused[#loc35, #loc34])
#loc197 = loc(fused[#loc36, #loc37])
#loc198 = loc(fused[#loc39, #loc33])
#loc199 = loc(fused[#loc40, #loc41])
#loc200 = loc(fused[#loc50, #loc49])
#loc201 = loc(fused[#loc51, #loc52])
#loc202 = loc(fused[#loc53, #loc54])
#loc203 = loc(fused[#loc55, #loc56])
#loc204 = loc(fused[#loc57, #loc58])
#loc205 = loc(fused[#loc59, #loc60])
#loc206 = loc(fused[#loc65, #loc66])
#loc209 = loc(fused[#loc76, #loc77])
#loc210 = loc(fused[#loc80, #loc81])
#loc211 = loc(fused[#loc84, #loc83])
#loc212 = loc(fused[#loc85, #loc86])
#loc213 = loc(fused[#loc87, #loc88])
#loc214 = loc(fused[#loc89, #loc90])
#loc215 = loc(fused[#loc91, #loc92])
#loc216 = loc(fused[#loc93, #loc94])
#loc217 = loc(fused[#loc95, #loc96])
#loc218 = loc(fused[#loc95, #loc97])
#loc219 = loc(fused[#loc98, #loc99])
#loc220 = loc(fused[#loc101, #loc100])
#loc221 = loc(fused[#loc102, #loc103])
#loc222 = loc(fused[#loc105, #loc104])
#loc223 = loc(fused[#loc106, #loc107])
#loc224 = loc(fused[#loc109, #loc103])
#loc225 = loc(fused[#loc111, #loc110])
#loc226 = loc(fused[#loc113, #loc112])
#loc227 = loc(fused[#loc114, #loc115])
#loc228 = loc(fused[#loc117, #loc116])
#loc229 = loc(fused[#loc118, #loc119])
#loc230 = loc(fused[#loc121, #loc115])
#loc231 = loc(fused[#loc122, #loc123])
#loc232 = loc(fused[#loc132, #loc131])
#loc233 = loc(fused[#loc134, #loc135])
#loc234 = loc(fused[#loc136, #loc137])
#loc235 = loc(fused[#loc138, #loc139])
#loc236 = loc(fused[#loc140, #loc141])
#loc237 = loc(fused[#loc142, #loc143])
#loc238 = loc(fused[#loc142, #loc144])
#loc239 = loc(fused[#loc145, #loc146])
#loc240 = loc(fused[#loc148, #loc147])
#loc241 = loc(fused[#loc149, #loc150])
#loc242 = loc(fused[#loc152, #loc151])
#loc243 = loc(fused[#loc153, #loc154])
#loc244 = loc(fused[#loc156, #loc150])
#loc245 = loc(fused[#loc157, #loc133])
#loc246 = loc(fused[#loc159, #loc158])
#loc247 = loc(fused[#loc160, #loc161])
#loc248 = loc(fused[#loc163, #loc162])
#loc249 = loc(fused[#loc164, #loc165])
#loc250 = loc(fused[#loc167, #loc161])
#loc251 = loc(fused[#loc168, #loc169])
#loc252 = loc(fused[#loc178, #loc177])
