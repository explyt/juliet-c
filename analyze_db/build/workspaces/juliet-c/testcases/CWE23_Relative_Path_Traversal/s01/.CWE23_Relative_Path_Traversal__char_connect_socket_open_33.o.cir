!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_33L7goodG2BEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc221)
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_333badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc222)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc223)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc224)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc226)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc227)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc228)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc229)
  cir.func private @close(!s32i) -> !s32i loc(#loc230)
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc231)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc234)
    %2 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc222)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc29)
    %3 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_333badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc222)
    cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc222)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc30)
    cir.store %4, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc237)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc238)
      %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc239)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc240)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc241)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc41)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc240)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc44)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc44)
      cir.store %14, %9 : !u64i, !cir.ptr<!u64i> loc(#loc241)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc50)
            %16 = cir.const #cir.int<1> : !u32i loc(#loc51)
            %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc51)
            %18 = cir.const #cir.int<6> : !u32i loc(#loc52)
            %19 = cir.cast(integral, %18 : !u32i), !s32i loc(#loc52)
            %20 = cir.call @socket(%15, %17, %19) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
            cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc244)
            cir.scope {
              %70 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc58)
              %71 = cir.const #cir.int<1> : !s32i loc(#loc59)
              %72 = cir.unary(minus, %71) nsw : !s32i, !s32i loc(#loc59)
              %73 = cir.cmp(eq, %70, %72) : !s32i, !cir.bool loc(#loc246)
              cir.if %73 {
                cir.break loc(#loc61)
              } loc(#loc247)
            } loc(#loc245)
            %21 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc248)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc64)
            %23 = cir.const #cir.int<16> : !u64i loc(#loc249)
            cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc250)
            %24 = cir.const #cir.int<2> : !s32i loc(#loc69)
            %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc69)
            %26 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc251)
            %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
            %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
            %29 = cir.call @inet_addr(%28) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc72)
            %30 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
            %31 = cir.get_member %30[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
            cir.store %29, %31 : !u32i, !cir.ptr<!u32i> loc(#loc252)
            %32 = cir.const #cir.int<27015> : !s32i loc(#loc77)
            %33 = cir.cast(integral, %32 : !s32i), !u16i loc(#loc77)
            %34 = cir.call @htons(%33) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc78)
            %35 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
            cir.store %34, %35 : !u16i, !cir.ptr<!u16i> loc(#loc253)
            cir.scope {
              %70 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc84)
              %71 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc255)
              %72 = cir.const #cir.int<16> : !u64i loc(#loc256)
              %73 = cir.cast(integral, %72 : !u64i), !u32i loc(#loc256)
              %74 = cir.call @connect(%70, %71, %73) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc89)
              %75 = cir.const #cir.int<1> : !s32i loc(#loc90)
              %76 = cir.unary(minus, %75) nsw : !s32i, !s32i loc(#loc90)
              %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc257)
              cir.if %77 {
                cir.break loc(#loc92)
              } loc(#loc258)
            } loc(#loc254)
            %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            %37 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
            %38 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc95)
            %39 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc96)
            %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc259)
            %41 = cir.const #cir.int<1> : !u64i loc(#loc260)
            %42 = cir.const #cir.int<4096> : !s32i loc(#loc101)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc101)
            %44 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc102)
            %45 = cir.binop(sub, %43, %44) : !u64i loc(#loc261)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc103)
            %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc103)
            %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc262)
            %49 = cir.binop(mul, %41, %48) : !u64i loc(#loc263)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc105)
            %51 = cir.call @recv(%36, %40, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc106)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc106)
            cir.store %52, %5 : !s32i, !cir.ptr<!s32i> loc(#loc264)
            cir.scope {
              %70 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc111)
              %71 = cir.const #cir.int<1> : !s32i loc(#loc112)
              %72 = cir.unary(minus, %71) nsw : !s32i, !s32i loc(#loc112)
              %73 = cir.cmp(eq, %70, %72) : !s32i, !cir.bool loc(#loc266)
              %74 = cir.ternary(%73, true {
                %75 = cir.const #true loc(#loc113)
                cir.yield %75 : !cir.bool loc(#loc113)
              }, false {
                %75 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %76 = cir.const #cir.int<0> : !s32i loc(#loc115)
                %77 = cir.cmp(eq, %75, %76) : !s32i, !cir.bool loc(#loc267)
                %78 = cir.ternary(%77, true {
                  %79 = cir.const #true loc(#loc113)
                  cir.yield %79 : !cir.bool loc(#loc113)
                }, false {
                  %79 = cir.const #false loc(#loc113)
                  cir.yield %79 : !cir.bool loc(#loc113)
                }) : (!cir.bool) -> !cir.bool loc(#loc113)
                cir.yield %78 : !cir.bool loc(#loc113)
              }) : (!cir.bool) -> !cir.bool loc(#loc113)
              cir.if %74 {
                cir.break loc(#loc117)
              } loc(#loc268)
            } loc(#loc265)
            %53 = cir.const #cir.int<0> : !s8i loc(#loc118)
            %54 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
            %55 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc120)
            %56 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc121)
            %58 = cir.const #cir.int<1> : !u64i loc(#loc269)
            %59 = cir.binop(div, %57, %58) : !u64i loc(#loc270)
            %60 = cir.binop(add, %55, %59) : !u64i loc(#loc271)
            %61 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %60 : !u64i), !cir.ptr<!s8i> loc(#loc124)
            cir.store %53, %61 : !s8i, !cir.ptr<!s8i> loc(#loc272)
            %62 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
            %63 = cir.const #cir.int<13> : !s8i loc(#loc126)
            %64 = cir.cast(integral, %63 : !s8i), !s32i loc(#loc126)
            %65 = cir.call @strchr(%62, %64) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc127)
            cir.store %65, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc273)
            cir.scope {
              %70 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
              %71 = cir.cast(ptr_to_bool, %70 : !cir.ptr<!s8i>), !cir.bool loc(#loc132)
              cir.if %71 {
                %72 = cir.const #cir.int<0> : !s8i loc(#loc134)
                %73 = cir.load deref %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
                cir.store %72, %73 : !s8i, !cir.ptr<!s8i> loc(#loc276)
              } loc(#loc275)
            } loc(#loc274)
            %66 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
            %67 = cir.const #cir.int<10> : !s8i loc(#loc138)
            %68 = cir.cast(integral, %67 : !s8i), !s32i loc(#loc138)
            %69 = cir.call @strchr(%66, %68) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc139)
            cir.store %69, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc277)
            cir.scope {
              %70 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
              %71 = cir.cast(ptr_to_bool, %70 : !cir.ptr<!s8i>), !cir.bool loc(#loc144)
              cir.if %71 {
                %72 = cir.const #cir.int<0> : !s8i loc(#loc146)
                %73 = cir.load deref %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
                cir.store %72, %73 : !s8i, !cir.ptr<!s8i> loc(#loc280)
              } loc(#loc279)
            } loc(#loc278)
          } loc(#loc243)
          cir.yield loc(#loc47)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc149)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc149)
          cir.condition(%16) loc(#loc149)
        } loc(#loc242)
      } loc(#loc242)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc153)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc153)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc282)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc156)
        } loc(#loc283)
      } loc(#loc281)
    } loc(#loc236)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc285)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
      %7 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc287)
        %9 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc166)
        %11 = cir.const #cir.int<64> : !s32i loc(#loc167)
        %12 = cir.binop(or, %10, %11) : !s32i loc(#loc288)
        %13 = cir.const #cir.int<256> : !s32i loc(#loc168)
        %14 = cir.const #cir.int<128> : !s32i loc(#loc169)
        %15 = cir.binop(or, %13, %14) : !s32i loc(#loc289)
        %16 = cir.call @open(%9, %12, %15) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc170)
        cir.store %16, %8 : !s32i, !cir.ptr<!s32i> loc(#loc290)
        cir.scope {
          %17 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc176)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc177)
          %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc292)
          cir.if %20 {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc179)
            %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc180)
          } loc(#loc293)
        } loc(#loc291)
      } loc(#loc286)
    } loc(#loc284)
    cir.return loc(#loc25)
  } loc(#loc232)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc183)
  cir.func internal private @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc296)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc297)
    %2 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc221)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc189)
    %3 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_33L7goodG2BEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc221)
    cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc221)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc190)
    cir.store %4, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc298)
    %5 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc192)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc183)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc183)
    %9 = cir.call @strcat(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc192)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc300)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc300)
      cir.scope {
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc302)
        %14 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc202)
        %15 = cir.const #cir.int<2> : !s32i loc(#loc203)
        %16 = cir.const #cir.int<64> : !s32i loc(#loc204)
        %17 = cir.binop(or, %15, %16) : !s32i loc(#loc303)
        %18 = cir.const #cir.int<256> : !s32i loc(#loc205)
        %19 = cir.const #cir.int<128> : !s32i loc(#loc206)
        %20 = cir.binop(or, %18, %19) : !s32i loc(#loc304)
        %21 = cir.call @open(%14, %17, %20) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc207)
        cir.store %21, %13 : !s32i, !cir.ptr<!s32i> loc(#loc305)
        cir.scope {
          %22 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc212)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc213)
          %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc214)
          %25 = cir.cmp(ne, %22, %24) : !s32i, !cir.bool loc(#loc307)
          cir.if %25 {
            %26 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc216)
            %27 = cir.call @close(%26) : (!s32i) -> !s32i loc(#loc217)
          } loc(#loc308)
        } loc(#loc306)
      } loc(#loc301)
    } loc(#loc299)
    cir.return loc(#loc185)
  } loc(#loc295)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_33L7goodG2BEv() : () -> () loc(#loc220)
    cir.return loc(#loc219)
  } loc(#loc309)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":156:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":156:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":64:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":64:37)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":93:49)
#loc12 = loc("/usr/include/netinet/in.h":402:1)
#loc13 = loc("/usr/include/netinet/in.h":403:40)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":226:1)
#loc19 = loc("/usr/include/string.h":227:50)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("/usr/include/fcntl.h":209:1)
#loc23 = loc("/usr/include/fcntl.h":209:56)
#loc24 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":60:1)
#loc25 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":145:1)
#loc26 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":62:5)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":62:12)
#loc28 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":63:5)
#loc29 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":63:23)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":65:12)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":65:5)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":66:5)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":132:5)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":71:9)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":71:13)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":72:9)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":72:28)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":73:9)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":73:15)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":74:9)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":74:32)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":75:9)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":75:37)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":75:26)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":75:33)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":76:9)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":121:17)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":77:9)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":120:9)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":86:36)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":86:45)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":86:58)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":86:29)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":86:13)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":86:69)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":87:13)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":90:13)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":87:17)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":87:34)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":88:13)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":89:17)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":91:20)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":91:21)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":91:30)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":91:33)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":91:47)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":91:13)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":91:48)
#loc69 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":92:34)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":92:13)
#loc72 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":93:39)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":93:13)
#loc76 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":93:59)
#loc77 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":94:38)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":94:32)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":94:13)
#loc81 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":94:46)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":95:13)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":98:13)
#loc84 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":95:25)
#loc85 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":95:58)
#loc86 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":95:59)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":95:68)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":95:82)
#loc89 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":95:17)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":95:88)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":96:13)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":97:17)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:31)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:55)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:62)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:60)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:46)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:69)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:72)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:83)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:88)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:103)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:113)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:114)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:117)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:26)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:13)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":102:118)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":103:13)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":106:13)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":103:17)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":103:31)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":103:44)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":103:47)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":103:61)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":104:13)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":105:17)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":108:57)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":108:13)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":108:18)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":108:28)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":108:41)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":108:52)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":108:53)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":110:30)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":110:36)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":110:23)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":110:13)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":110:40)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":111:13)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":114:13)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":111:17)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":112:13)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":113:28)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":113:18)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":113:17)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":115:30)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":115:36)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":115:23)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":115:13)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":115:40)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":116:13)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":119:13)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":116:17)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":117:13)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":118:28)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":118:18)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":118:17)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":121:16)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":122:9)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":125:9)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":122:13)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":122:30)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":123:9)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":124:26)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":124:13)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":133:5)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":144:5)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":134:9)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":134:23)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":135:9)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":143:9)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":136:13)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":136:17)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":138:29)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":138:35)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":138:42)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":138:51)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":138:59)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":138:24)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":138:13)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":138:67)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":139:13)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":142:13)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":139:17)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":139:30)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":139:29)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":140:13)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":141:23)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":141:17)
#loc181 = loc("/usr/include/string.h":149:1)
#loc182 = loc("/usr/include/string.h":150:14)
#loc183 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":159:18)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":152:1)
#loc185 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":172:1)
#loc186 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":154:5)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":154:12)
#loc188 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":155:5)
#loc189 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":155:23)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":157:12)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":157:5)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":159:5)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":159:12)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":160:5)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":171:5)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":161:9)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":161:23)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":162:9)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":170:9)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":163:13)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":163:17)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":165:29)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":165:35)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":165:42)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":165:51)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":165:59)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":165:24)
#loc208 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":165:13)
#loc209 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":165:67)
#loc210 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":166:13)
#loc211 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":169:13)
#loc212 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":166:17)
#loc213 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":166:30)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":166:29)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":167:13)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":168:23)
#loc217 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":168:17)
#loc218 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":174:1)
#loc219 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":177:1)
#loc220 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_33.cpp":176:5)
#loc221 = loc(fused[#loc1, #loc2])
#loc222 = loc(fused[#loc3, #loc4])
#loc223 = loc(fused[#loc5, #loc6])
#loc224 = loc(fused[#loc7, #loc8])
#loc225 = loc(fused[#loc9, #loc10])
#loc226 = loc(fused[#loc12, #loc13])
#loc227 = loc(fused[#loc14, #loc15])
#loc228 = loc(fused[#loc16, #loc17])
#loc229 = loc(fused[#loc18, #loc19])
#loc230 = loc(fused[#loc20, #loc21])
#loc231 = loc(fused[#loc22, #loc23])
#loc232 = loc(fused[#loc24, #loc25])
#loc233 = loc(fused[#loc26, #loc27])
#loc234 = loc(fused[#loc28, #loc29])
#loc235 = loc(fused[#loc31, #loc30])
#loc236 = loc(fused[#loc32, #loc33])
#loc237 = loc(fused[#loc34, #loc35])
#loc238 = loc(fused[#loc36, #loc37])
#loc239 = loc(fused[#loc38, #loc39])
#loc240 = loc(fused[#loc40, #loc41])
#loc241 = loc(fused[#loc42, #loc43])
#loc242 = loc(fused[#loc46, #loc47])
#loc243 = loc(fused[#loc48, #loc49])
#loc244 = loc(fused[#loc54, #loc55])
#loc245 = loc(fused[#loc56, #loc57])
#loc246 = loc(fused[#loc58, #loc59])
#loc247 = loc(fused[#loc60, #loc57])
#loc248 = loc(fused[#loc62, #loc63])
#loc249 = loc(fused[#loc65, #loc66])
#loc250 = loc(fused[#loc67, #loc68])
#loc251 = loc(fused[#loc71, #loc69])
#loc252 = loc(fused[#loc75, #loc76])
#loc253 = loc(fused[#loc80, #loc81])
#loc254 = loc(fused[#loc82, #loc83])
#loc255 = loc(fused[#loc85, #loc86])
#loc256 = loc(fused[#loc87, #loc88])
#loc257 = loc(fused[#loc89, #loc90])
#loc258 = loc(fused[#loc91, #loc83])
#loc259 = loc(fused[#loc97, #loc98])
#loc260 = loc(fused[#loc99, #loc100])
#loc261 = loc(fused[#loc101, #loc102])
#loc262 = loc(fused[#loc101, #loc103])
#loc263 = loc(fused[#loc99, #loc104])
#loc264 = loc(fused[#loc107, #loc108])
#loc265 = loc(fused[#loc109, #loc110])
#loc266 = loc(fused[#loc111, #loc112])
#loc267 = loc(fused[#loc114, #loc115])
#loc268 = loc(fused[#loc116, #loc110])
#loc269 = loc(fused[#loc122, #loc123])
#loc270 = loc(fused[#loc121, #loc123])
#loc271 = loc(fused[#loc120, #loc123])
#loc272 = loc(fused[#loc119, #loc118])
#loc273 = loc(fused[#loc128, #loc129])
#loc274 = loc(fused[#loc130, #loc131])
#loc275 = loc(fused[#loc133, #loc131])
#loc276 = loc(fused[#loc136, #loc134])
#loc277 = loc(fused[#loc140, #loc141])
#loc278 = loc(fused[#loc142, #loc143])
#loc279 = loc(fused[#loc145, #loc143])
#loc280 = loc(fused[#loc148, #loc146])
#loc281 = loc(fused[#loc150, #loc151])
#loc282 = loc(fused[#loc152, #loc153])
#loc283 = loc(fused[#loc154, #loc151])
#loc284 = loc(fused[#loc157, #loc158])
#loc285 = loc(fused[#loc159, #loc160])
#loc286 = loc(fused[#loc161, #loc162])
#loc287 = loc(fused[#loc163, #loc164])
#loc288 = loc(fused[#loc166, #loc167])
#loc289 = loc(fused[#loc168, #loc169])
#loc290 = loc(fused[#loc171, #loc172])
#loc291 = loc(fused[#loc173, #loc174])
#loc292 = loc(fused[#loc175, #loc176])
#loc293 = loc(fused[#loc178, #loc174])
#loc294 = loc(fused[#loc181, #loc182])
#loc295 = loc(fused[#loc184, #loc185])
#loc296 = loc(fused[#loc186, #loc187])
#loc297 = loc(fused[#loc188, #loc189])
#loc298 = loc(fused[#loc191, #loc190])
#loc299 = loc(fused[#loc194, #loc195])
#loc300 = loc(fused[#loc196, #loc197])
#loc301 = loc(fused[#loc198, #loc199])
#loc302 = loc(fused[#loc200, #loc201])
#loc303 = loc(fused[#loc203, #loc204])
#loc304 = loc(fused[#loc205, #loc206])
#loc305 = loc(fused[#loc208, #loc209])
#loc306 = loc(fused[#loc210, #loc211])
#loc307 = loc(fused[#loc212, #loc213])
#loc308 = loc(fused[#loc215, #loc211])
#loc309 = loc(fused[#loc218, #loc219])
