!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_add_63a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc226)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc228)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc229)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc230)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc231)
  cir.func private @close(!s32i) -> !s32i loc(#loc232)
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_add_63b_badSink(!cir.ptr<!s32i>) loc(#loc233)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_add_63_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc22)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc238)
      %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc239)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc240)
      %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc241)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc31)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc240)
      cir.scope {
        cir.do {
          cir.scope {
            %8 = cir.const #cir.int<2> : !s32i loc(#loc38)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc39)
            %10 = cir.const #cir.int<6> : !s32i loc(#loc40)
            %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc41)
            cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc244)
            cir.scope {
              %50 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              %51 = cir.const #cir.int<1> : !s32i loc(#loc47)
              %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc47)
              %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc246)
              cir.if %53 {
                cir.break loc(#loc49)
              } loc(#loc247)
            } loc(#loc245)
            %12 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc248)
            %13 = cir.const #cir.int<0> : !s32i loc(#loc52)
            %14 = cir.const #cir.int<16> : !u64i loc(#loc249)
            cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc250)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc57)
            %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc57)
            %17 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
            cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc251)
            %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc60)
            %21 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc61)
            %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc62)
            cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc252)
            %23 = cir.const #cir.int<27015> : !s32i loc(#loc65)
            %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc65)
            %25 = cir.call @htons(%24) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc66)
            %26 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
            cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc253)
            cir.scope {
              %50 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc72)
              %51 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc255)
              %52 = cir.const #cir.int<16> : !u64i loc(#loc256)
              %53 = cir.cast(integral, %52 : !u64i), !u32i loc(#loc256)
              %54 = cir.call @connect(%50, %51, %53) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc77)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc78)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc78)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc257)
              cir.if %57 {
                cir.break loc(#loc80)
              } loc(#loc258)
            } loc(#loc254)
            %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %28 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc82)
            %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc82)
            %30 = cir.const #cir.int<3> : !s32i loc(#loc83)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc83)
            %32 = cir.const #cir.int<4> : !u64i loc(#loc83)
            %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc83)
            %34 = cir.const #cir.int<2> : !s32i loc(#loc83)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc83)
            %36 = cir.binop(add, %33, %35) : !u64i loc(#loc83)
            %37 = cir.const #cir.int<1> : !s32i loc(#loc84)
            %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc84)
            %39 = cir.binop(sub, %36, %38) : !u64i loc(#loc259)
            %40 = cir.const #cir.int<0> : !s32i loc(#loc85)
            %41 = cir.call @recv(%27, %29, %39, %40) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc86)
            %42 = cir.cast(integral, %41 : !s64i), !s32i loc(#loc86)
            cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc260)
            cir.scope {
              %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
              %51 = cir.const #cir.int<1> : !s32i loc(#loc92)
              %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc92)
              %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc262)
              %54 = cir.ternary(%53, true {
                %55 = cir.const #true loc(#loc93)
                cir.yield %55 : !cir.bool loc(#loc93)
              }, false {
                %55 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                %56 = cir.const #cir.int<0> : !s32i loc(#loc95)
                %57 = cir.cmp(eq, %55, %56) : !s32i, !cir.bool loc(#loc263)
                %58 = cir.ternary(%57, true {
                  %59 = cir.const #true loc(#loc93)
                  cir.yield %59 : !cir.bool loc(#loc93)
                }, false {
                  %59 = cir.const #false loc(#loc93)
                  cir.yield %59 : !cir.bool loc(#loc93)
                }) : (!cir.bool) -> !cir.bool loc(#loc93)
                cir.yield %58 : !cir.bool loc(#loc93)
              }) : (!cir.bool) -> !cir.bool loc(#loc93)
              cir.if %54 {
                cir.break loc(#loc97)
              } loc(#loc264)
            } loc(#loc261)
            %43 = cir.const #cir.int<0> : !s32i loc(#loc98)
            %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc98)
            %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %46 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc100)
            %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc100)
            cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc265)
            %48 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
            %49 = cir.call @atoi(%48) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc102)
            cir.store %49, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
          } loc(#loc243)
          cir.yield loc(#loc35)
        } while {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc105)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc105)
          cir.condition(%9) loc(#loc105)
        } loc(#loc242)
      } loc(#loc242)
      cir.scope {
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc108)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc109)
        %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc268)
        cir.if %11 {
          %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc111)
          %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc112)
        } loc(#loc269)
      } loc(#loc267)
    } loc(#loc237)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_add_63b_badSink(%0) : (!cir.ptr<!s32i>) -> () loc(#loc113)
    cir.return loc(#loc19)
  } loc(#loc234)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_add_63_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc271)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc116)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc272)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc118)
    cir.return loc(#loc115)
  } loc(#loc270)
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_add_63b_goodG2BSink(!cir.ptr<!s32i>) loc(#loc273)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc126)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_add_63b_goodG2BSink(%0) : (!cir.ptr<!s32i>) -> () loc(#loc130)
    cir.return loc(#loc123)
  } loc(#loc274)
  cir.func private @CWE190_Integer_Overflow__int_connect_socket_add_63b_goodB2GSink(!cir.ptr<!s32i>) loc(#loc278)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc283)
      %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc284)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc285)
      %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc286)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc146)
      %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc146)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc285)
      cir.scope {
        cir.do {
          cir.scope {
            %8 = cir.const #cir.int<2> : !s32i loc(#loc153)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc154)
            %10 = cir.const #cir.int<6> : !s32i loc(#loc155)
            %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc156)
            cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc289)
            cir.scope {
              %50 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              %51 = cir.const #cir.int<1> : !s32i loc(#loc162)
              %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc162)
              %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc291)
              cir.if %53 {
                cir.break loc(#loc164)
              } loc(#loc292)
            } loc(#loc290)
            %12 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc293)
            %13 = cir.const #cir.int<0> : !s32i loc(#loc167)
            %14 = cir.const #cir.int<16> : !u64i loc(#loc294)
            cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc295)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc172)
            %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc172)
            %17 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
            cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc296)
            %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc174)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc174)
            %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc175)
            %21 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc61)
            %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc62)
            cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc297)
            %23 = cir.const #cir.int<27015> : !s32i loc(#loc178)
            %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc178)
            %25 = cir.call @htons(%24) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc179)
            %26 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
            cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc298)
            cir.scope {
              %50 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              %51 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc300)
              %52 = cir.const #cir.int<16> : !u64i loc(#loc301)
              %53 = cir.cast(integral, %52 : !u64i), !u32i loc(#loc301)
              %54 = cir.call @connect(%50, %51, %53) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc189)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc190)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc190)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc302)
              cir.if %57 {
                cir.break loc(#loc192)
              } loc(#loc303)
            } loc(#loc299)
            %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc193)
            %28 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc194)
            %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc194)
            %30 = cir.const #cir.int<3> : !s32i loc(#loc195)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc195)
            %32 = cir.const #cir.int<4> : !u64i loc(#loc195)
            %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc195)
            %34 = cir.const #cir.int<2> : !s32i loc(#loc195)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc195)
            %36 = cir.binop(add, %33, %35) : !u64i loc(#loc195)
            %37 = cir.const #cir.int<1> : !s32i loc(#loc196)
            %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc196)
            %39 = cir.binop(sub, %36, %38) : !u64i loc(#loc304)
            %40 = cir.const #cir.int<0> : !s32i loc(#loc197)
            %41 = cir.call @recv(%27, %29, %39, %40) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc198)
            %42 = cir.cast(integral, %41 : !s64i), !s32i loc(#loc198)
            cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc305)
            cir.scope {
              %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc203)
              %51 = cir.const #cir.int<1> : !s32i loc(#loc204)
              %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc204)
              %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc307)
              %54 = cir.ternary(%53, true {
                %55 = cir.const #true loc(#loc205)
                cir.yield %55 : !cir.bool loc(#loc205)
              }, false {
                %55 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc206)
                %56 = cir.const #cir.int<0> : !s32i loc(#loc207)
                %57 = cir.cmp(eq, %55, %56) : !s32i, !cir.bool loc(#loc308)
                %58 = cir.ternary(%57, true {
                  %59 = cir.const #true loc(#loc205)
                  cir.yield %59 : !cir.bool loc(#loc205)
                }, false {
                  %59 = cir.const #false loc(#loc205)
                  cir.yield %59 : !cir.bool loc(#loc205)
                }) : (!cir.bool) -> !cir.bool loc(#loc205)
                cir.yield %58 : !cir.bool loc(#loc205)
              }) : (!cir.bool) -> !cir.bool loc(#loc205)
              cir.if %54 {
                cir.break loc(#loc209)
              } loc(#loc309)
            } loc(#loc306)
            %43 = cir.const #cir.int<0> : !s32i loc(#loc210)
            %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc210)
            %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc211)
            %46 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc212)
            %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc212)
            cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc310)
            %48 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc213)
            %49 = cir.call @atoi(%48) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc214)
            cir.store %49, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
          } loc(#loc288)
          cir.yield loc(#loc150)
        } while {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc217)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc217)
          cir.condition(%9) loc(#loc217)
        } loc(#loc287)
      } loc(#loc287)
      cir.scope {
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc220)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc221)
        %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc221)
        %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc313)
        cir.if %11 {
          %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc223)
          %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc224)
        } loc(#loc314)
      } loc(#loc312)
    } loc(#loc282)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_add_63b_goodB2GSink(%0) : (!cir.ptr<!s32i>) -> () loc(#loc225)
    cir.return loc(#loc134)
  } loc(#loc279)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_add_63a.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":78:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":45:1)
#loc17 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":45:79)
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":47:1)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":109:1)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":49:5)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":49:9)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":51:12)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":51:5)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":52:5)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":107:5)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":57:9)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":57:13)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":58:9)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":58:28)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":59:9)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":59:32)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":60:9)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":60:41)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":61:9)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":96:17)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":62:9)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":95:9)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":71:36)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":71:45)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":71:58)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":71:29)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":71:13)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":71:69)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":72:13)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":75:13)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":72:17)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":72:34)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":73:13)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":74:17)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":76:20)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":76:21)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":76:30)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":76:33)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":76:47)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":76:13)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":76:48)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":77:34)
#loc58 = loc("/usr/include/netinet/in.h":249:5)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":77:13)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":78:39)
#loc61 = loc("/usr/include/netinet/in.h":251:20)
#loc62 = loc("/usr/include/netinet/in.h":33:15)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":78:13)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":78:59)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":79:38)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":79:32)
#loc67 = loc("/usr/include/netinet/in.h":250:15)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":79:13)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":79:46)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":80:13)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":83:13)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":80:25)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":80:58)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":80:59)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":80:68)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":80:82)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":80:17)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":80:88)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":81:13)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":82:17)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":86:31)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":86:46)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":86:59)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":86:77)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":86:80)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":86:26)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":86:13)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":86:81)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":87:13)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":90:13)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":87:17)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":87:31)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":87:44)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":87:47)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":87:61)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":88:13)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":89:17)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":92:39)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":92:25)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":92:13)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":94:25)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":94:20)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":94:13)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":94:36)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":96:16)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":97:9)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":100:9)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":97:13)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":97:30)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":98:9)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":99:26)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":99:13)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":108:5)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":195:1)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":199:1)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":197:5)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":197:13)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":198:5)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":198:13)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":116:1)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":116:80)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":118:1)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":126:1)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":120:5)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":120:9)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":122:12)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":122:5)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":124:12)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":124:5)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":125:5)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":129:1)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":129:80)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":131:1)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":193:1)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":133:5)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":133:9)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":135:12)
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":135:5)
#loc139 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":136:5)
#loc140 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":191:5)
#loc141 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":141:9)
#loc142 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":141:13)
#loc143 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":142:9)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":142:28)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":143:9)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":143:32)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":144:9)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":144:41)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":145:9)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":180:17)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":146:9)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":179:9)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":155:36)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":155:45)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":155:58)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":155:29)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":155:13)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":155:69)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":156:13)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":159:13)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":156:17)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":156:34)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":157:13)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":158:17)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":160:20)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":160:21)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":160:30)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":160:33)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":160:47)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":160:13)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":160:48)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":161:34)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":161:13)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":162:49)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":162:39)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":162:13)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":162:59)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":163:38)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":163:32)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":163:13)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":163:46)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":164:13)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":167:13)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":164:25)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":164:58)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":164:59)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":164:68)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":164:82)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":164:17)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":164:88)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":165:13)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":166:17)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":170:31)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":170:46)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":170:59)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":170:77)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":170:80)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":170:26)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":170:13)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":170:81)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":171:13)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":174:13)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":171:17)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":171:31)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":171:44)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":171:47)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":171:61)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":172:13)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":173:17)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":176:39)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":176:25)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":176:13)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":178:25)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":178:20)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":178:13)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":178:36)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":180:16)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":181:9)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":184:9)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":181:13)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":181:30)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":182:9)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":183:26)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":183:13)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_add_63a.c":192:5)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc6, #loc7])
#loc229 = loc(fused[#loc8, #loc9])
#loc230 = loc(fused[#loc10, #loc11])
#loc231 = loc(fused[#loc12, #loc13])
#loc232 = loc(fused[#loc14, #loc15])
#loc233 = loc(fused[#loc16, #loc17])
#loc234 = loc(fused[#loc18, #loc19])
#loc235 = loc(fused[#loc20, #loc21])
#loc236 = loc(fused[#loc23, #loc22])
#loc237 = loc(fused[#loc24, #loc25])
#loc238 = loc(fused[#loc26, #loc27])
#loc239 = loc(fused[#loc28, #loc29])
#loc240 = loc(fused[#loc30, #loc31])
#loc241 = loc(fused[#loc32, #loc33])
#loc242 = loc(fused[#loc34, #loc35])
#loc243 = loc(fused[#loc36, #loc37])
#loc244 = loc(fused[#loc42, #loc43])
#loc245 = loc(fused[#loc44, #loc45])
#loc246 = loc(fused[#loc46, #loc47])
#loc247 = loc(fused[#loc48, #loc45])
#loc248 = loc(fused[#loc50, #loc51])
#loc249 = loc(fused[#loc53, #loc54])
#loc250 = loc(fused[#loc55, #loc56])
#loc251 = loc(fused[#loc59, #loc57])
#loc252 = loc(fused[#loc63, #loc64])
#loc253 = loc(fused[#loc68, #loc69])
#loc254 = loc(fused[#loc70, #loc71])
#loc255 = loc(fused[#loc73, #loc74])
#loc256 = loc(fused[#loc75, #loc76])
#loc257 = loc(fused[#loc77, #loc78])
#loc258 = loc(fused[#loc79, #loc71])
#loc259 = loc(fused[#loc83, #loc84])
#loc260 = loc(fused[#loc87, #loc88])
#loc261 = loc(fused[#loc89, #loc90])
#loc262 = loc(fused[#loc91, #loc92])
#loc263 = loc(fused[#loc94, #loc95])
#loc264 = loc(fused[#loc96, #loc90])
#loc265 = loc(fused[#loc100, #loc98])
#loc266 = loc(fused[#loc103, #loc104])
#loc267 = loc(fused[#loc106, #loc107])
#loc268 = loc(fused[#loc108, #loc109])
#loc269 = loc(fused[#loc110, #loc107])
#loc270 = loc(fused[#loc114, #loc115])
#loc271 = loc(fused[#loc116, #loc117])
#loc272 = loc(fused[#loc118, #loc119])
#loc273 = loc(fused[#loc120, #loc121])
#loc274 = loc(fused[#loc122, #loc123])
#loc275 = loc(fused[#loc124, #loc125])
#loc276 = loc(fused[#loc127, #loc126])
#loc277 = loc(fused[#loc129, #loc128])
#loc278 = loc(fused[#loc131, #loc132])
#loc279 = loc(fused[#loc133, #loc134])
#loc280 = loc(fused[#loc135, #loc136])
#loc281 = loc(fused[#loc138, #loc137])
#loc282 = loc(fused[#loc139, #loc140])
#loc283 = loc(fused[#loc141, #loc142])
#loc284 = loc(fused[#loc143, #loc144])
#loc285 = loc(fused[#loc145, #loc146])
#loc286 = loc(fused[#loc147, #loc148])
#loc287 = loc(fused[#loc149, #loc150])
#loc288 = loc(fused[#loc151, #loc152])
#loc289 = loc(fused[#loc157, #loc158])
#loc290 = loc(fused[#loc159, #loc160])
#loc291 = loc(fused[#loc161, #loc162])
#loc292 = loc(fused[#loc163, #loc160])
#loc293 = loc(fused[#loc165, #loc166])
#loc294 = loc(fused[#loc168, #loc169])
#loc295 = loc(fused[#loc170, #loc171])
#loc296 = loc(fused[#loc173, #loc172])
#loc297 = loc(fused[#loc176, #loc177])
#loc298 = loc(fused[#loc180, #loc181])
#loc299 = loc(fused[#loc182, #loc183])
#loc300 = loc(fused[#loc185, #loc186])
#loc301 = loc(fused[#loc187, #loc188])
#loc302 = loc(fused[#loc189, #loc190])
#loc303 = loc(fused[#loc191, #loc183])
#loc304 = loc(fused[#loc195, #loc196])
#loc305 = loc(fused[#loc199, #loc200])
#loc306 = loc(fused[#loc201, #loc202])
#loc307 = loc(fused[#loc203, #loc204])
#loc308 = loc(fused[#loc206, #loc207])
#loc309 = loc(fused[#loc208, #loc202])
#loc310 = loc(fused[#loc212, #loc210])
#loc311 = loc(fused[#loc215, #loc216])
#loc312 = loc(fused[#loc218, #loc219])
#loc313 = loc(fused[#loc220, #loc221])
#loc314 = loc(fused[#loc222, #loc219])
