!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":21:74)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":21:81)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":41:78)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":41:85)
#loc64 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc35, #loc36])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc61)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc62)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc65)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc64)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc66)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc67)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc15)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc12)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s32i>> loc(#loc12)
    cir.store %5, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc66)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc16)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
    cir.store %7, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc67)
    cir.br ^bb1 loc(#loc68)
  ^bb1:  // pred: ^bb0
    %8 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc65)
    cir.store %8, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc65)
    %9 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc20)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc21)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
    %13 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc22)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc69)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc70)
    cir.libc.memmove %16 bytes from %12 to %10 : !cir.ptr<!void>, !u64i loc(#loc71)
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc29)
    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc30)
    %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc31)
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc32)
    cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc63)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc35, #loc36])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc74)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc73)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc75)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc76)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc43)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s32i>> loc(#loc40)
    cir.store %5, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc75)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc44)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    cir.store %7, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc76)
    cir.br ^bb1 loc(#loc77)
  ^bb1:  // pred: ^bb0
    %8 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc74)
    cir.store %8, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc74)
    %9 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc48)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc49)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc49)
    %13 = cir.const #cir.int<100> : !s32i loc(#loc50)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc50)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc78)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc79)
    cir.libc.memmove %16 bytes from %12 to %10 : !cir.ptr<!void>, !u64i loc(#loc80)
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc57)
    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc58)
    %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc59)
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc60)
    cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc59)
    cir.br ^bb2 loc(#loc47)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc34)
  } loc(#loc72)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":34:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":28:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":28:29)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":24:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":24:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":26:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":26:27)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":22:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":26:20)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":26:19)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":33:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":30:17)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":30:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":30:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":30:35)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":30:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":30:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":30:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":31:22)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":31:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":31:28)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":32:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":32:14)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":41:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":54:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":48:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":48:29)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":44:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":44:32)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":46:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":46:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":42:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":46:20)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":46:19)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":47:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":53:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":50:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":50:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":50:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":50:35)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":50:45)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":50:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":50:46)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":51:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":51:27)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":51:28)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":51:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":52:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c":52:14)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc63 = loc(fused[#loc5, #loc6])
#loc65 = loc(fused[#loc9, #loc10])
#loc66 = loc(fused[#loc11, #loc12])
#loc67 = loc(fused[#loc13, #loc14])
#loc68 = loc(fused[#loc18, #loc19])
#loc69 = loc(fused[#loc23, #loc24])
#loc70 = loc(fused[#loc22, #loc24])
#loc71 = loc(fused[#loc25, #loc26])
#loc72 = loc(fused[#loc33, #loc34])
#loc74 = loc(fused[#loc37, #loc38])
#loc75 = loc(fused[#loc39, #loc40])
#loc76 = loc(fused[#loc41, #loc42])
#loc77 = loc(fused[#loc46, #loc47])
#loc78 = loc(fused[#loc51, #loc52])
#loc79 = loc(fused[#loc50, #loc52])
#loc80 = loc(fused[#loc53, #loc54])
