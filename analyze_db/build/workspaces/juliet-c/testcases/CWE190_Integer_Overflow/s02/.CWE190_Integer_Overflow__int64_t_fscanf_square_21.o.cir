!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":28:21)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":28:29)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":60:26)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":60:34)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":93:26)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":93:34)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":121:25)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":121:33)
#loc176 = loc(fused[#loc13, #loc14])
#loc193 = loc(fused[#loc58, #loc59])
#loc207 = loc(fused[#loc102, #loc103])
#loc221 = loc(fused[#loc144, #loc145])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc170)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc172)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc173)
  cir.func private @printLongLongLine(!s64i) loc(#loc174)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc13, #loc14])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc176)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc15)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc173)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc18)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc180)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc24)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc23)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc24)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc180)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc25)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc26)
        } loc(#loc179)
      } loc(#loc178)
    } loc(#loc177)
    cir.return loc(#loc12)
  } loc(#loc175)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc31)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc183)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc33)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc171)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc172)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc172)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc33)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %9 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc173)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc37)
    cir.call @badSink(%10) : (!s64i) -> () loc(#loc38)
    cir.return loc(#loc28)
  } loc(#loc181)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    cir.return loc(#loc40)
  } loc(#loc185)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc189)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc51)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc191)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc55)
  cir.func internal private @goodB2G1Sink(%arg0: !s64i loc(fused[#loc58, #loc59])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc193)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc60)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc189)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc63)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc51)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc51)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc70)
          %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc71)
          %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc71)
          %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc72)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc73)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc73)
          %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc72)
          %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc197)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc199)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc80)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc79)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc80)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc199)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc81)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc82)
          } else {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc55)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc55)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          } loc(#loc198)
        } loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.return loc(#loc57)
  } loc(#loc192)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc201)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc88)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc202)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc90)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc171)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc203)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc203)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc90)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %9 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc189)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc96)
    cir.call @goodB2G1Sink(%10) : (!s64i) -> () loc(#loc97)
    cir.return loc(#loc85)
  } loc(#loc200)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc205)
  cir.func internal private @goodB2G2Sink(%arg0: !s64i loc(fused[#loc102, #loc103])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc207)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc104)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc205)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc107)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc107)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc111)
          %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc112)
          %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc112)
          %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc113)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc114)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc114)
          %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc113)
          %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc211)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc213)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc121)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc120)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc121)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc213)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc122)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc123)
          } else {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc124)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc124)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc125)
          } loc(#loc212)
        } loc(#loc210)
      } loc(#loc209)
    } loc(#loc208)
    cir.return loc(#loc101)
  } loc(#loc206)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc130)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc216)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc132)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc171)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc133)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc217)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc217)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc132)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %9 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc205)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc138)
    cir.call @goodB2G2Sink(%10) : (!s64i) -> () loc(#loc139)
    cir.return loc(#loc127)
  } loc(#loc214)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc219)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc144, #loc145])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc221)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc146)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc219)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc149)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc225)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc155)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc154)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc155)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc225)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc156)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc157)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc222)
    cir.return loc(#loc143)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc227)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc162)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc228)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc164)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc164)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc229)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc219)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc168)
    cir.call @goodG2BSink(%6) : (!s64i) -> () loc(#loc169)
    cir.return loc(#loc159)
  } loc(#loc226)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":45:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":45:24)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":26:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":26:24)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":28:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":38:1)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":29:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":30:8)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":31:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":32:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":36:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":34:13)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":34:37)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":34:30)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":35:31)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":35:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":40:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":48:1)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":42:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":42:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":43:12)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":43:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":45:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":45:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":46:17)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":46:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":47:13)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":47:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":143:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":148:1)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":145:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":145:14)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":146:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":146:14)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":147:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":147:13)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":55:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":55:29)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":65:19)
#loc52 = loc("/usr/include/inttypes.h":351:1)
#loc53 = loc("/usr/include/inttypes.h":351:74)
#loc54 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":77:23)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":60:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":80:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":61:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":62:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":79:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":62:8)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":63:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":66:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":68:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":65:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":70:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":78:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":70:31)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":70:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":70:40)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":70:46)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":70:55)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":71:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":74:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":76:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":72:13)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":72:37)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":72:30)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":73:31)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":73:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":77:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":82:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":90:1)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":84:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":84:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":85:12)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":85:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":87:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":87:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":87:20)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":87:24)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":88:22)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":88:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":89:18)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":89:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":56:1)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":56:29)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":93:1)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":108:1)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":94:1)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":95:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":107:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":95:8)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":96:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":98:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":106:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":98:31)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":98:13)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":98:40)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":98:46)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":98:55)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":99:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":102:9)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":104:9)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":100:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":100:37)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":100:30)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":101:31)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":101:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":105:23)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":105:13)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":110:1)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":118:1)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":112:5)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":112:13)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":113:12)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":113:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":115:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":115:13)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":115:20)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":115:24)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":116:22)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":116:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":117:18)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":117:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":57:1)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":57:28)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":121:1)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":131:1)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":122:1)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":123:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":130:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":123:8)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":124:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":125:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":129:9)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":127:13)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":127:37)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":127:30)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":128:31)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":128:13)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":133:1)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":141:1)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":135:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":135:13)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":136:12)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":136:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":138:12)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":138:5)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":139:21)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":139:5)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":140:17)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_21.c":140:5)
#loc170 = loc(fused[#loc1, #loc2])
#loc171 = loc(fused[#loc3, #loc4])
#loc172 = loc(fused[#loc5, #loc6])
#loc173 = loc(fused[#loc7, #loc8])
#loc174 = loc(fused[#loc9, #loc10])
#loc175 = loc(fused[#loc11, #loc12])
#loc177 = loc(fused[#loc16, #loc17])
#loc178 = loc(fused[#loc19, #loc17])
#loc179 = loc(fused[#loc20, #loc21])
#loc180 = loc(fused[#loc22, #loc23])
#loc181 = loc(fused[#loc27, #loc28])
#loc182 = loc(fused[#loc29, #loc30])
#loc183 = loc(fused[#loc32, #loc31])
#loc184 = loc(fused[#loc36, #loc35])
#loc185 = loc(fused[#loc39, #loc40])
#loc186 = loc(fused[#loc41, #loc42])
#loc187 = loc(fused[#loc43, #loc44])
#loc188 = loc(fused[#loc45, #loc46])
#loc189 = loc(fused[#loc47, #loc48])
#loc190 = loc(fused[#loc49, #loc50])
#loc191 = loc(fused[#loc52, #loc53])
#loc192 = loc(fused[#loc56, #loc57])
#loc194 = loc(fused[#loc61, #loc62])
#loc195 = loc(fused[#loc64, #loc65, #loc66, #loc62])
#loc196 = loc(fused[#loc68, #loc69])
#loc197 = loc(fused[#loc71, #loc74])
#loc198 = loc(fused[#loc75, #loc76, #loc77, #loc69])
#loc199 = loc(fused[#loc78, #loc79])
#loc200 = loc(fused[#loc84, #loc85])
#loc201 = loc(fused[#loc86, #loc87])
#loc202 = loc(fused[#loc89, #loc88])
#loc203 = loc(fused[#loc92, #loc93])
#loc204 = loc(fused[#loc95, #loc94])
#loc205 = loc(fused[#loc98, #loc99])
#loc206 = loc(fused[#loc100, #loc101])
#loc208 = loc(fused[#loc105, #loc106])
#loc209 = loc(fused[#loc108, #loc106])
#loc210 = loc(fused[#loc109, #loc110])
#loc211 = loc(fused[#loc112, #loc115])
#loc212 = loc(fused[#loc116, #loc117, #loc118, #loc110])
#loc213 = loc(fused[#loc119, #loc120])
#loc214 = loc(fused[#loc126, #loc127])
#loc215 = loc(fused[#loc128, #loc129])
#loc216 = loc(fused[#loc131, #loc130])
#loc217 = loc(fused[#loc134, #loc135])
#loc218 = loc(fused[#loc137, #loc136])
#loc219 = loc(fused[#loc140, #loc141])
#loc220 = loc(fused[#loc142, #loc143])
#loc222 = loc(fused[#loc147, #loc148])
#loc223 = loc(fused[#loc150, #loc148])
#loc224 = loc(fused[#loc151, #loc152])
#loc225 = loc(fused[#loc153, #loc154])
#loc226 = loc(fused[#loc158, #loc159])
#loc227 = loc(fused[#loc160, #loc161])
#loc228 = loc(fused[#loc163, #loc162])
#loc229 = loc(fused[#loc165, #loc164])
#loc230 = loc(fused[#loc167, #loc166])
