!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc1)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc4)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %3 ^bb2, ^bb12 loc(#loc107)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc108)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc1)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc1)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc104)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc20)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc109)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.br ^bb4 loc(#loc111)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.br ^bb5 loc(#loc23)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %9 : !s32i, ^bb9 [
      0: ^bb7,
      1: ^bb8
    ] loc(#loc23)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc4)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc4)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
    cir.br ^bb9 loc(#loc28)
  ^bb8:  // pred: ^bb5
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
    cir.br ^bb9 loc(#loc30)
  ^bb9:  // 3 preds: ^bb5, ^bb7, ^bb8
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // pred: ^bb9
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    cir.br ^bb11 loc(#loc18)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc14)
  ^bb12:  // 2 preds: ^bb1, ^bb11
    cir.br ^bb13 loc(#loc14)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc9)
  } loc(#loc103)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc116)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc118)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc119)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc48)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc121)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.br ^bb14 loc(#loc50)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc122)
  ^bb4:  // pred: ^bb3
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc43)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc118)
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc56)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc123)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.br ^bb5 loc(#loc125)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    cir.br ^bb6 loc(#loc59)
  ^bb6:  // pred: ^bb5
    cir.switch.flat %11 : !s32i, ^bb10 [
      0: ^bb8,
      1: ^bb9
    ] loc(#loc59)
  ^bb7:  // no predecessors
    cir.br ^bb8 loc(#loc62)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc63)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc63)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    cir.br ^bb11 loc(#loc65)
  ^bb9:  // pred: ^bb6
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc66)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc66)
    cir.store %15, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
    cir.br ^bb11 loc(#loc68)
  ^bb10:  // pred: ^bb6
    cir.return loc(#loc69)
  ^bb11:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb12 loc(#loc60)
  ^bb12:  // pred: ^bb11
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb13 loc(#loc54)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc47)
  ^bb14:  // 2 preds: ^bb2, ^bb13
    cir.br ^bb15 loc(#loc47)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc41)
  } loc(#loc117)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc130)
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc80)
    cir.brcond %3 ^bb2, ^bb13 loc(#loc132)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc133)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc75)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc75)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc129)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc85)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc134)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    cir.br ^bb4 loc(#loc136)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.br ^bb5 loc(#loc88)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %9 : !s32i, ^bb9 [
      0: ^bb7,
      1: ^bb8
    ] loc(#loc88)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc91)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc92)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc92)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    cir.br ^bb10 loc(#loc94)
  ^bb8:  // pred: ^bb5
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc95)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc95)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc138)
    cir.br ^bb10 loc(#loc97)
  ^bb9:  // pred: ^bb5
    cir.return loc(#loc98)
  ^bb10:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb11 loc(#loc89)
  ^bb11:  // pred: ^bb10
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb12 loc(#loc83)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc79)
  ^bb13:  // 2 preds: ^bb1, ^bb12
    cir.br ^bb14 loc(#loc79)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc73)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_04.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":31:38)
#loc2 = loc("/usr/include/stdlib.h":573:1)
#loc3 = loc("/usr/include/stdlib.h":573:24)
#loc4 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":37:30)
#loc5 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":40:30)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":26:1)
#loc9 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":47:1)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":31:13)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":32:13)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":32:17)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":28:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":46:5)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":28:8)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":29:5)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":30:9)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":45:9)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":33:18)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":33:27)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":33:13)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":33:28)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":34:13)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":43:13)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":34:21)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":36:13)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":37:17)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":38:17)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":40:17)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":41:17)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":44:23)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":44:13)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":110:1)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":114:1)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":112:5)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":112:11)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":113:5)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":113:11)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":59:19)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":54:1)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":82:1)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":64:13)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":64:38)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":65:13)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":65:17)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":56:5)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":81:5)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":56:8)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":57:5)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":60:5)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":62:5)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":59:9)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":63:9)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":80:9)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":66:18)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":66:27)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":66:13)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":66:28)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":67:13)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":78:13)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":67:21)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":69:13)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":70:30)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":70:17)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":71:17)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":73:30)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":73:17)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":74:17)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":77:17)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":79:23)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":79:13)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":85:1)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":108:1)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":90:13)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":90:38)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":91:13)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":91:17)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":87:5)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":107:5)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":87:8)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":88:5)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":89:9)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":106:9)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":92:18)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":92:27)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":92:13)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":92:28)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":93:13)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":104:13)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":93:21)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":95:13)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":96:30)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":96:17)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":97:17)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":99:30)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":99:17)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":100:17)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":103:17)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":105:23)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_04.c":105:13)
#loc101 = loc(fused[#loc2, #loc3])
#loc102 = loc(fused[#loc6, #loc7])
#loc103 = loc(fused[#loc8, #loc9])
#loc104 = loc(fused[#loc10, #loc1])
#loc105 = loc(fused[#loc11, #loc12])
#loc106 = loc(fused[#loc13, #loc14])
#loc107 = loc(fused[#loc16, #loc14])
#loc108 = loc(fused[#loc17, #loc18])
#loc109 = loc(fused[#loc19, #loc20])
#loc110 = loc(fused[#loc21, #loc22])
#loc111 = loc(fused[#loc23, #loc24])
#loc112 = loc(fused[#loc27, #loc4])
#loc113 = loc(fused[#loc29, #loc5])
#loc114 = loc(fused[#loc33, #loc34])
#loc115 = loc(fused[#loc35, #loc36])
#loc116 = loc(fused[#loc37, #loc38])
#loc117 = loc(fused[#loc40, #loc41])
#loc118 = loc(fused[#loc42, #loc43])
#loc119 = loc(fused[#loc44, #loc45])
#loc120 = loc(fused[#loc46, #loc47])
#loc121 = loc(fused[#loc49, #loc50, #loc51, #loc47])
#loc122 = loc(fused[#loc53, #loc54])
#loc123 = loc(fused[#loc55, #loc56])
#loc124 = loc(fused[#loc57, #loc58])
#loc125 = loc(fused[#loc59, #loc60])
#loc126 = loc(fused[#loc64, #loc63])
#loc127 = loc(fused[#loc67, #loc66])
#loc128 = loc(fused[#loc72, #loc73])
#loc129 = loc(fused[#loc74, #loc75])
#loc130 = loc(fused[#loc76, #loc77])
#loc131 = loc(fused[#loc78, #loc79])
#loc132 = loc(fused[#loc81, #loc79])
#loc133 = loc(fused[#loc82, #loc83])
#loc134 = loc(fused[#loc84, #loc85])
#loc135 = loc(fused[#loc86, #loc87])
#loc136 = loc(fused[#loc88, #loc89])
#loc137 = loc(fused[#loc93, #loc92])
#loc138 = loc(fused[#loc96, #loc95])
