!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc87)
  cir.func private @printUnsignedLine(!u32i) loc(#loc88)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc9)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc91)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc11)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc11)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc11)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc11)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc11)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc11)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc11)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc11)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc11)
      cir.yield %21 : !u32i loc(#loc11)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc11)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc11)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc11)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc11)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc11)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc11)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc11)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc11)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc11)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc11)
      cir.yield %25 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc11)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc92)
    cir.scope {
      %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc94)
      %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc95)
      %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc16)
      cir.store %12, %10 : !u32i, !cir.ptr<!u32i> loc(#loc94)
      %13 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc18)
      cir.store %13, %11 : !u32i, !cir.ptr<!u32i> loc(#loc95)
      cir.scope {
        %14 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc97)
        %15 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc23)
        %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc22)
        %17 = cir.binop(mul, %15, %16) : !u32i loc(#loc98)
        cir.store %17, %14 : !u32i, !cir.ptr<!u32i> loc(#loc97)
        %18 = cir.load %14 : !cir.ptr<!u32i>, !u32i loc(#loc24)
        cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc25)
      } loc(#loc96)
    } loc(#loc93)
    cir.return loc(#loc6)
  } loc(#loc89)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc99)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc36)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc36)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc104)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc38)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc105)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc107)
      %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc108)
      %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc43)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc107)
      %8 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc45)
      cir.store %8, %6 : !u32i, !cir.ptr<!u32i> loc(#loc108)
      cir.scope {
        %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc110)
        %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc50)
        %11 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc49)
        %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc111)
        cir.store %12, %9 : !u32i, !cir.ptr<!u32i> loc(#loc110)
        %13 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc51)
        cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc52)
      } loc(#loc109)
    } loc(#loc106)
    cir.return loc(#loc33)
  } loc(#loc102)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc53)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc61)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc115)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc63)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc63)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc63)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc63)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc63)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc63)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc63)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc63)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc63)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc63)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc63)
      cir.yield %21 : !u32i loc(#loc63)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc63)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc63)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc63)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc63)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc63)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc63)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc63)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc63)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc63)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc63)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc63)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc63)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc63)
      cir.yield %25 : !u32i loc(#loc63)
    }) : (!cir.bool) -> !u32i loc(#loc63)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc63)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc63)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc116)
    cir.scope {
      %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc118)
      %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc119)
      %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc68)
      cir.store %12, %10 : !u32i, !cir.ptr<!u32i> loc(#loc118)
      %13 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc70)
      cir.store %13, %11 : !u32i, !cir.ptr<!u32i> loc(#loc119)
      cir.scope {
        %14 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc73)
        %15 = cir.cast(integral, %14 : !u32i), !s64i loc(#loc73)
        %16 = cir.cast(integral, %15 : !s64i), !s32i loc(#loc73)
        %17 = cir.abs %16 poison : !s32i loc(#loc74)
        %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc74)
        %19 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc75)
        %20 = cir.const #cir.int<2147483647> : !s32i loc(#loc76)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc76)
        %22 = cir.const #cir.int<2> : !u32i loc(#loc76)
        %23 = cir.binop(mul, %21, %22) : !u32i loc(#loc76)
        %24 = cir.const #cir.int<1> : !u32i loc(#loc76)
        %25 = cir.binop(add, %23, %24) : !u32i loc(#loc76)
        %26 = cir.cast(int_to_float, %25 : !u32i), !cir.double loc(#loc76)
        %27 = cir.call @sqrt(%26) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc75)
        %28 = cir.cast(float_to_int, %27 : !cir.double), !s64i loc(#loc75)
        %29 = cir.cmp(lt, %18, %28) : !s64i, !cir.bool loc(#loc121)
        cir.if %29 {
          %30 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc123)
          %31 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc83)
          %32 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc82)
          %33 = cir.binop(mul, %31, %32) : !u32i loc(#loc124)
          cir.store %33, %30 : !u32i, !cir.ptr<!u32i> loc(#loc123)
          %34 = cir.load %30 : !cir.ptr<!u32i>, !u32i loc(#loc84)
          cir.call @printUnsignedLine(%34) : (!u32i) -> () loc(#loc85)
        } else {
          %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc56)
          %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc56)
          cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc86)
        } loc(#loc122)
      } loc(#loc120)
    } loc(#loc117)
    cir.return loc(#loc58)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":39:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":26:18)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":27:12)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":29:26)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":29:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":38:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":31:9)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":31:33)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":32:9)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":32:29)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":33:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":35:13)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":35:42)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":35:35)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":36:31)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":36:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":86:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":90:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":88:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":88:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":89:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":89:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":46:1)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":61:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":48:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":48:18)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":49:12)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":49:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":51:12)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":51:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":52:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":60:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":53:9)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":53:33)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":54:9)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":54:29)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":55:9)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":59:9)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":57:13)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":57:42)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":57:35)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":58:31)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":58:13)
#loc53 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":81:23)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":64:1)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":84:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":66:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":66:18)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":67:12)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":67:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":69:26)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":69:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":70:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":83:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":71:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":71:33)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":72:9)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":72:29)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":82:9)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:23)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:13)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:37)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:50)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:58)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":75:9)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":78:9)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":80:9)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":76:13)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":76:42)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":76:35)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":77:31)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":77:13)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":81:13)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc10, #loc9])
#loc92 = loc(fused[#loc12, #loc11])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc17, #loc18])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc21, #loc22])
#loc98 = loc(fused[#loc23, #loc22])
#loc99 = loc(fused[#loc26, #loc27])
#loc100 = loc(fused[#loc28, #loc29])
#loc101 = loc(fused[#loc30, #loc31])
#loc102 = loc(fused[#loc32, #loc33])
#loc103 = loc(fused[#loc34, #loc35])
#loc104 = loc(fused[#loc37, #loc36])
#loc105 = loc(fused[#loc39, #loc38])
#loc106 = loc(fused[#loc40, #loc41])
#loc107 = loc(fused[#loc42, #loc43])
#loc108 = loc(fused[#loc44, #loc45])
#loc109 = loc(fused[#loc46, #loc47])
#loc110 = loc(fused[#loc48, #loc49])
#loc111 = loc(fused[#loc50, #loc49])
#loc112 = loc(fused[#loc54, #loc55])
#loc113 = loc(fused[#loc57, #loc58])
#loc114 = loc(fused[#loc59, #loc60])
#loc115 = loc(fused[#loc62, #loc61])
#loc116 = loc(fused[#loc64, #loc63])
#loc117 = loc(fused[#loc65, #loc66])
#loc118 = loc(fused[#loc67, #loc68])
#loc119 = loc(fused[#loc69, #loc70])
#loc120 = loc(fused[#loc71, #loc72])
#loc121 = loc(fused[#loc74, #loc77])
#loc122 = loc(fused[#loc78, #loc79, #loc80, #loc72])
#loc123 = loc(fused[#loc81, #loc82])
#loc124 = loc(fused[#loc83, #loc82])
