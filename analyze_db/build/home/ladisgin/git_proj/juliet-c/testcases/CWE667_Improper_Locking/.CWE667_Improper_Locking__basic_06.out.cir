!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc51 = loc("CWE667_Improper_Locking__basic_06.c":118:10)
#loc52 = loc("CWE667_Improper_Locking__basic_06.c":118:14)
#loc53 = loc("CWE667_Improper_Locking__basic_06.c":118:20)
#loc54 = loc("CWE667_Improper_Locking__basic_06.c":118:32)
#loc156 = loc(fused[#loc51, #loc52])
#loc157 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @good2.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_06_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc9)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc12)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc142)
  cir.func no_proto @CWE667_Improper_Locking__basic_06_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc145)
      cir.if %2 {
        cir.scope {
          %3 = cir.get_global @CWE667_Improper_Locking__basic_06_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc3)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc24)
          cir.scope {
            %9 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc27)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc27)
            %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc27)
            cir.if %11 {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc9)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc29)
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
              cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
            } loc(#loc149)
          } loc(#loc148)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc12)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc12)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc32)
          %8 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc33)
          cir.call @stdThreadLockAcquire(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc34)
        } loc(#loc147)
      } loc(#loc146)
    } loc(#loc144)
    cir.return loc(#loc16)
  } loc(#loc143)
  cir.func no_proto @CWE667_Improper_Locking__basic_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc150)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc153)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE667_Improper_Locking__basic_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call @CWE667_Improper_Locking__basic_06_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE667_Improper_Locking__basic_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call @CWE667_Improper_Locking__basic_06_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.return %17 : !s32i loc(#loc160)
  } loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc70)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc73)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc162)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc80)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc81)
      %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc165)
      cir.if %2 {
        %3 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      } else {
        cir.scope {
          %3 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc88)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc88)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc89)
          cir.scope {
            %15 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc92)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc92)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc92)
            cir.if %17 {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc94)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc94)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc95)
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc96)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc97)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
            } loc(#loc169)
          } loc(#loc168)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc98)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc98)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc99)
          %8 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc100)
          cir.call @stdThreadLockAcquire(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc101)
          %9 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc70)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc70)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc102)
          %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc103)
          cir.call @stdThreadLockRelease(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc104)
          %12 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc73)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc73)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc105)
          %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc106)
          cir.call @stdThreadLockDestroy(%14) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc107)
        } loc(#loc167)
      } loc(#loc166)
    } loc(#loc164)
    cir.return loc(#loc77)
  } loc(#loc163)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc112)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc113)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc172)
      cir.if %2 {
        cir.scope {
          %3 = cir.get_global @good2.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc117)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc117)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc118)
          cir.scope {
            %15 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc121)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc121)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc121)
            cir.if %17 {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc123)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc123)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc124)
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc125)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc126)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc125)
            } loc(#loc176)
          } loc(#loc175)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc127)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc127)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc128)
          %8 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc129)
          cir.call @stdThreadLockAcquire(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc130)
          %9 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc131)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc131)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc132)
          %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc133)
          cir.call @stdThreadLockRelease(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc134)
          %12 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc135)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc135)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc136)
          %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc137)
          cir.call @stdThreadLockDestroy(%14) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc138)
        } loc(#loc174)
      } loc(#loc173)
    } loc(#loc171)
    cir.return loc(#loc109)
  } loc(#loc170)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_06.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_06.c":85:34)
#loc2 = loc("CWE667_Improper_Locking__basic_06.c":61:34)
#loc3 = loc("CWE667_Improper_Locking__basic_06.c":32:34)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE667_Improper_Locking__basic_06.c":33:23)
#loc7 = loc("../../testcasesupport/std_thread.h":18:1)
#loc8 = loc("../../testcasesupport/std_thread.h":18:44)
#loc9 = loc("CWE667_Improper_Locking__basic_06.c":36:27)
#loc10 = loc("/usr/include/stdlib.h":756:1)
#loc11 = loc("/usr/include/stdlib.h":756:70)
#loc12 = loc("CWE667_Improper_Locking__basic_06.c":39:23)
#loc13 = loc("../../testcasesupport/std_thread.h":19:1)
#loc14 = loc("../../testcasesupport/std_thread.h":19:45)
#loc15 = loc("CWE667_Improper_Locking__basic_06.c":27:1)
#loc16 = loc("CWE667_Improper_Locking__basic_06.c":44:1)
#loc17 = loc("CWE667_Improper_Locking__basic_06.c":29:5)
#loc18 = loc("CWE667_Improper_Locking__basic_06.c":43:5)
#loc19 = loc("CWE667_Improper_Locking__basic_06.c":29:8)
#loc20 = loc("CWE667_Improper_Locking__basic_06.c":29:27)
#loc21 = loc("CWE667_Improper_Locking__basic_06.c":30:5)
#loc22 = loc("CWE667_Improper_Locking__basic_06.c":31:9)
#loc23 = loc("CWE667_Improper_Locking__basic_06.c":42:9)
#loc24 = loc("CWE667_Improper_Locking__basic_06.c":33:13)
#loc25 = loc("CWE667_Improper_Locking__basic_06.c":34:13)
#loc26 = loc("CWE667_Improper_Locking__basic_06.c":38:13)
#loc27 = loc("CWE667_Improper_Locking__basic_06.c":34:18)
#loc28 = loc("CWE667_Improper_Locking__basic_06.c":35:13)
#loc29 = loc("CWE667_Improper_Locking__basic_06.c":36:17)
#loc30 = loc("CWE667_Improper_Locking__basic_06.c":37:17)
#loc31 = loc("CWE667_Improper_Locking__basic_06.c":37:22)
#loc32 = loc("CWE667_Improper_Locking__basic_06.c":39:13)
#loc33 = loc("CWE667_Improper_Locking__basic_06.c":40:34)
#loc34 = loc("CWE667_Improper_Locking__basic_06.c":40:13)
#loc35 = loc("CWE667_Improper_Locking__basic_06.c":103:1)
#loc36 = loc("CWE667_Improper_Locking__basic_06.c":107:1)
#loc37 = loc("CWE667_Improper_Locking__basic_06.c":105:5)
#loc38 = loc("CWE667_Improper_Locking__basic_06.c":105:11)
#loc39 = loc("CWE667_Improper_Locking__basic_06.c":106:5)
#loc40 = loc("CWE667_Improper_Locking__basic_06.c":106:11)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("CWE667_Improper_Locking__basic_06.c":123:15)
#loc46 = loc("CWE667_Improper_Locking__basic_06.c":125:15)
#loc47 = loc("CWE667_Improper_Locking__basic_06.c":128:15)
#loc48 = loc("CWE667_Improper_Locking__basic_06.c":130:15)
#loc49 = loc("CWE667_Improper_Locking__basic_06.c":118:1)
#loc50 = loc("CWE667_Improper_Locking__basic_06.c":133:1)
#loc55 = loc("CWE667_Improper_Locking__basic_06.c":119:1)
#loc56 = loc("CWE667_Improper_Locking__basic_06.c":121:27)
#loc57 = loc("CWE667_Improper_Locking__basic_06.c":121:22)
#loc58 = loc("CWE667_Improper_Locking__basic_06.c":121:5)
#loc59 = loc("CWE667_Improper_Locking__basic_06.c":123:5)
#loc60 = loc("CWE667_Improper_Locking__basic_06.c":124:5)
#loc61 = loc("CWE667_Improper_Locking__basic_06.c":124:44)
#loc62 = loc("CWE667_Improper_Locking__basic_06.c":125:5)
#loc63 = loc("CWE667_Improper_Locking__basic_06.c":128:5)
#loc64 = loc("CWE667_Improper_Locking__basic_06.c":129:5)
#loc65 = loc("CWE667_Improper_Locking__basic_06.c":129:43)
#loc66 = loc("CWE667_Improper_Locking__basic_06.c":130:5)
#loc67 = loc("CWE667_Improper_Locking__basic_06.c":132:12)
#loc68 = loc("CWE667_Improper_Locking__basic_06.c":132:5)
#loc69 = loc("CWE667_Improper_Locking__basic_06.c":56:19)
#loc70 = loc("CWE667_Improper_Locking__basic_06.c":71:23)
#loc71 = loc("../../testcasesupport/std_thread.h":20:1)
#loc72 = loc("../../testcasesupport/std_thread.h":20:45)
#loc73 = loc("CWE667_Improper_Locking__basic_06.c":73:23)
#loc74 = loc("../../testcasesupport/std_thread.h":21:1)
#loc75 = loc("../../testcasesupport/std_thread.h":21:45)
#loc76 = loc("CWE667_Improper_Locking__basic_06.c":51:1)
#loc77 = loc("CWE667_Improper_Locking__basic_06.c":77:1)
#loc78 = loc("CWE667_Improper_Locking__basic_06.c":53:5)
#loc79 = loc("CWE667_Improper_Locking__basic_06.c":76:5)
#loc80 = loc("CWE667_Improper_Locking__basic_06.c":53:8)
#loc81 = loc("CWE667_Improper_Locking__basic_06.c":53:27)
#loc82 = loc("CWE667_Improper_Locking__basic_06.c":54:5)
#loc83 = loc("CWE667_Improper_Locking__basic_06.c":57:5)
#loc84 = loc("CWE667_Improper_Locking__basic_06.c":59:5)
#loc85 = loc("CWE667_Improper_Locking__basic_06.c":56:9)
#loc86 = loc("CWE667_Improper_Locking__basic_06.c":60:9)
#loc87 = loc("CWE667_Improper_Locking__basic_06.c":75:9)
#loc88 = loc("CWE667_Improper_Locking__basic_06.c":62:23)
#loc89 = loc("CWE667_Improper_Locking__basic_06.c":62:13)
#loc90 = loc("CWE667_Improper_Locking__basic_06.c":63:13)
#loc91 = loc("CWE667_Improper_Locking__basic_06.c":67:13)
#loc92 = loc("CWE667_Improper_Locking__basic_06.c":63:18)
#loc93 = loc("CWE667_Improper_Locking__basic_06.c":64:13)
#loc94 = loc("CWE667_Improper_Locking__basic_06.c":65:27)
#loc95 = loc("CWE667_Improper_Locking__basic_06.c":65:17)
#loc96 = loc("CWE667_Improper_Locking__basic_06.c":66:17)
#loc97 = loc("CWE667_Improper_Locking__basic_06.c":66:22)
#loc98 = loc("CWE667_Improper_Locking__basic_06.c":68:23)
#loc99 = loc("CWE667_Improper_Locking__basic_06.c":68:13)
#loc100 = loc("CWE667_Improper_Locking__basic_06.c":69:34)
#loc101 = loc("CWE667_Improper_Locking__basic_06.c":69:13)
#loc102 = loc("CWE667_Improper_Locking__basic_06.c":71:13)
#loc103 = loc("CWE667_Improper_Locking__basic_06.c":72:34)
#loc104 = loc("CWE667_Improper_Locking__basic_06.c":72:13)
#loc105 = loc("CWE667_Improper_Locking__basic_06.c":73:13)
#loc106 = loc("CWE667_Improper_Locking__basic_06.c":74:34)
#loc107 = loc("CWE667_Improper_Locking__basic_06.c":74:13)
#loc108 = loc("CWE667_Improper_Locking__basic_06.c":80:1)
#loc109 = loc("CWE667_Improper_Locking__basic_06.c":101:1)
#loc110 = loc("CWE667_Improper_Locking__basic_06.c":82:5)
#loc111 = loc("CWE667_Improper_Locking__basic_06.c":100:5)
#loc112 = loc("CWE667_Improper_Locking__basic_06.c":82:8)
#loc113 = loc("CWE667_Improper_Locking__basic_06.c":82:27)
#loc114 = loc("CWE667_Improper_Locking__basic_06.c":83:5)
#loc115 = loc("CWE667_Improper_Locking__basic_06.c":84:9)
#loc116 = loc("CWE667_Improper_Locking__basic_06.c":99:9)
#loc117 = loc("CWE667_Improper_Locking__basic_06.c":86:23)
#loc118 = loc("CWE667_Improper_Locking__basic_06.c":86:13)
#loc119 = loc("CWE667_Improper_Locking__basic_06.c":87:13)
#loc120 = loc("CWE667_Improper_Locking__basic_06.c":91:13)
#loc121 = loc("CWE667_Improper_Locking__basic_06.c":87:18)
#loc122 = loc("CWE667_Improper_Locking__basic_06.c":88:13)
#loc123 = loc("CWE667_Improper_Locking__basic_06.c":89:27)
#loc124 = loc("CWE667_Improper_Locking__basic_06.c":89:17)
#loc125 = loc("CWE667_Improper_Locking__basic_06.c":90:17)
#loc126 = loc("CWE667_Improper_Locking__basic_06.c":90:22)
#loc127 = loc("CWE667_Improper_Locking__basic_06.c":92:23)
#loc128 = loc("CWE667_Improper_Locking__basic_06.c":92:13)
#loc129 = loc("CWE667_Improper_Locking__basic_06.c":93:34)
#loc130 = loc("CWE667_Improper_Locking__basic_06.c":93:13)
#loc131 = loc("CWE667_Improper_Locking__basic_06.c":95:23)
#loc132 = loc("CWE667_Improper_Locking__basic_06.c":95:13)
#loc133 = loc("CWE667_Improper_Locking__basic_06.c":96:34)
#loc134 = loc("CWE667_Improper_Locking__basic_06.c":96:13)
#loc135 = loc("CWE667_Improper_Locking__basic_06.c":97:23)
#loc136 = loc("CWE667_Improper_Locking__basic_06.c":97:13)
#loc137 = loc("CWE667_Improper_Locking__basic_06.c":98:34)
#loc138 = loc("CWE667_Improper_Locking__basic_06.c":98:13)
#loc139 = loc(fused[#loc4, #loc5])
#loc140 = loc(fused[#loc7, #loc8])
#loc141 = loc(fused[#loc10, #loc11])
#loc142 = loc(fused[#loc13, #loc14])
#loc143 = loc(fused[#loc15, #loc16])
#loc144 = loc(fused[#loc17, #loc18])
#loc145 = loc(fused[#loc19, #loc20])
#loc146 = loc(fused[#loc21, #loc18])
#loc147 = loc(fused[#loc22, #loc23])
#loc148 = loc(fused[#loc25, #loc26])
#loc149 = loc(fused[#loc28, #loc26])
#loc150 = loc(fused[#loc35, #loc36])
#loc151 = loc(fused[#loc37, #loc38])
#loc152 = loc(fused[#loc39, #loc40])
#loc153 = loc(fused[#loc41, #loc42])
#loc154 = loc(fused[#loc43, #loc44])
#loc155 = loc(fused[#loc49, #loc50])
#loc158 = loc(fused[#loc60, #loc61])
#loc159 = loc(fused[#loc64, #loc65])
#loc160 = loc(fused[#loc68, #loc67])
#loc161 = loc(fused[#loc71, #loc72])
#loc162 = loc(fused[#loc74, #loc75])
#loc163 = loc(fused[#loc76, #loc77])
#loc164 = loc(fused[#loc78, #loc79])
#loc165 = loc(fused[#loc80, #loc81])
#loc166 = loc(fused[#loc82, #loc83, #loc84, #loc79])
#loc167 = loc(fused[#loc86, #loc87])
#loc168 = loc(fused[#loc90, #loc91])
#loc169 = loc(fused[#loc93, #loc91])
#loc170 = loc(fused[#loc108, #loc109])
#loc171 = loc(fused[#loc110, #loc111])
#loc172 = loc(fused[#loc112, #loc113])
#loc173 = loc(fused[#loc114, #loc111])
#loc174 = loc(fused[#loc115, #loc116])
#loc175 = loc(fused[#loc119, #loc120])
#loc176 = loc(fused[#loc122, #loc120])
