!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:10)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:20)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:32)
#loc241 = loc(fused[#loc60, #loc61])
#loc242 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc3)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc217)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc218)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc219)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc18)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc224)
    cir.br ^bb1 loc(#loc225)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc23)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc226)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc227)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc3)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc3)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc3)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc228)
    cir.br ^bb3 loc(#loc21)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc229)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %13 = cir.const #cir.int<5> : !s32i loc(#loc29)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc231)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc232)
  ^bb7:  // pred: ^bb6
    %15 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc33)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc33)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc221)
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc15)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc15)
    %22 = cir.binop(add, %19, %21) : !u64i loc(#loc15)
    %23 = cir.const #cir.int<4> : !u64i loc(#loc15)
    %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc15)
    %25 = cir.alloca !u8i, !cir.ptr<!u8i>, %24 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    cir.store %26, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc222)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
    %31 = cir.call @wcscpy(%28, %30) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    cir.br ^bb8 loc(#loc32)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc27)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc220)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc233)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc238)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc242)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc245)
    cir.return %17 : !s32i loc(#loc245)
  } loc(#loc240)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc246)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc247)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc250)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc251)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc252)
    cir.br ^bb1 loc(#loc253)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc96)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc254)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc255)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc98)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc98)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc98)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc256)
    cir.br ^bb3 loc(#loc94)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc257)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %13 = cir.const #cir.int<5> : !s32i loc(#loc103)
    %14 = cir.cmp(ne, %12, %13) : !s32i, !cir.bool loc(#loc258)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc259)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb10 loc(#loc105)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc260)
  ^bb8:  // pred: ^bb7
    %17 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc110)
    %18 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc111)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc111)
    %20 = cir.call @wcslen(%19) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc110)
    cir.store %20, %0 : !u64i, !cir.ptr<!u64i> loc(#loc249)
    %21 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc88)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc88)
    %24 = cir.binop(add, %21, %23) : !u64i loc(#loc88)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc88)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc88)
    %27 = cir.alloca !u8i, !cir.ptr<!u8i>, %26 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc88)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc88)
    cir.store %28, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc250)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc112)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc112)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
    %33 = cir.call @wcscpy(%30, %32) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc114)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc115)
    cir.call @printWLine(%35) : (!cir.ptr<!s32i>) -> () loc(#loc116)
    cir.br ^bb9 loc(#loc109)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc101)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc101)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc84)
  } loc(#loc248)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc263)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc264)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc265)
    cir.br ^bb1 loc(#loc266)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc130)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc267)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc268)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc132)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc132)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc132)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc269)
    cir.br ^bb3 loc(#loc128)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc128)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc270)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %13 = cir.const #cir.int<5> : !s32i loc(#loc137)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc271)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc272)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc273)
  ^bb7:  // pred: ^bb6
    %15 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc141)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
    %18 = cir.call @wcslen(%17) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc141)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc262)
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc122)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc122)
    %22 = cir.binop(add, %19, %21) : !u64i loc(#loc122)
    %23 = cir.const #cir.int<4> : !u64i loc(#loc122)
    %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc122)
    %25 = cir.alloca !u8i, !cir.ptr<!u8i>, %24 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc122)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc122)
    cir.store %26, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc263)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc143)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc144)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
    %31 = cir.call @wcscpy(%28, %30) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc145)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc146)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc146)
    cir.call @printWLine(%33) : (!cir.ptr<!s32i>) -> () loc(#loc147)
    cir.br ^bb8 loc(#loc140)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc135)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc135)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc118)
  } loc(#loc261)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc148)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc274)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc276)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc277)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc278)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc159)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc279)
    cir.br ^bb1 loc(#loc280)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc164)
    %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc281)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc282)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc169)
    cir.br ^bb4 loc(#loc166)
  ^bb3:  // pred: ^bb1
    %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc148)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc148)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc148)
    cir.store %12, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc283)
    cir.br ^bb4 loc(#loc162)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc162)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc284)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %15 = cir.const #cir.int<5> : !s32i loc(#loc174)
    %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc285)
    cir.brcond %16 ^bb7, ^bb10 loc(#loc286)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc287)
  ^bb8:  // pred: ^bb7
    %17 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc178)
    %18 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc179)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc179)
    %20 = cir.call @strlen(%19) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc178)
    cir.store %20, %0 : !u64i, !cir.ptr<!u64i> loc(#loc276)
    %21 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc156)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc156)
    %24 = cir.binop(add, %21, %23) : !u64i loc(#loc156)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc156)
    %27 = cir.binop(mul, %24, %26) : !u64i loc(#loc156)
    %28 = cir.alloca !u8i, !cir.ptr<!u8i>, %27 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc156)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc156)
    cir.store %29, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc277)
    %30 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc180)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc181)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc181)
    %33 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc182)
    %35 = cir.call @strcpy(%32, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc180)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc183)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    cir.br ^bb9 loc(#loc177)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc172)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc172)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc152)
  } loc(#loc275)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc289)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc290)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc291)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc193)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc292)
    cir.br ^bb1 loc(#loc293)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc198)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc294)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc295)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc200)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc200)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc200)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc296)
    cir.br ^bb3 loc(#loc196)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc196)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc297)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc216)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    %13 = cir.const #cir.int<5> : !s32i loc(#loc205)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc298)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc299)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc300)
  ^bb7:  // pred: ^bb6
    %15 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc209)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc210)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc210)
    %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc209)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc289)
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc190)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc190)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc190)
    %22 = cir.binop(add, %19, %21) : !u64i loc(#loc190)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc190)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc190)
    %25 = cir.binop(mul, %22, %24) : !u64i loc(#loc190)
    %26 = cir.alloca !u8i, !cir.ptr<!u8i>, %25 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc190)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc190)
    cir.store %27, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc290)
    %28 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc211)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc212)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc212)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc213)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc213)
    %33 = cir.call @strcpy(%30, %32) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc211)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc214)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc214)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc215)
    cir.br ^bb8 loc(#loc208)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc203)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc203)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc186)
  } loc(#loc288)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":28:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":28:25)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":39:24)
#loc4 = loc("/usr/include/string.h":407:1)
#loc5 = loc("/usr/include/string.h":408:33)
#loc6 = loc("/usr/include/wchar.h":98:1)
#loc7 = loc("/usr/include/wchar.h":100:14)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":32:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":51:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":45:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":45:49)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":46:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":46:35)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":34:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":34:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":35:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":35:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":36:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":40:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":36:8)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":36:20)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":37:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":39:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":41:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":50:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":41:8)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":41:20)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":42:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":43:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":49:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":45:30)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":45:45)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":47:26)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":47:32)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":47:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":48:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":48:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":155:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":161:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":157:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":157:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":158:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":158:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":159:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":159:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":160:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":160:14)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":177:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":179:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":182:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":184:15)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":172:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":187:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":173:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":175:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":175:22)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":175:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":177:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":178:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":178:56)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":179:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":182:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":183:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":183:55)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":184:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":186:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":186:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":70:19)
#loc79 = loc("/usr/include/wchar.h":247:1)
#loc80 = loc("/usr/include/wchar.h":247:51)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc82 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":58:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":82:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":76:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":76:52)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":77:13)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":77:35)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":60:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":60:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":61:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":61:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":62:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":66:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":62:8)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":62:20)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":63:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":65:24)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":65:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":67:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":81:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":67:8)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":67:20)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":68:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":71:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":73:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":70:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":74:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":80:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":76:30)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":76:48)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":78:26)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":78:32)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":78:19)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":79:35)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":79:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":85:1)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":104:1)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":98:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":98:52)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":99:13)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":99:35)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":87:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":87:12)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":88:12)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":88:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":89:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":93:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":89:8)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":89:20)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":90:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":92:24)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":92:9)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":94:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":103:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":94:8)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":94:20)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":95:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":96:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":102:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":98:30)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":98:48)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":100:26)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":100:32)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":100:19)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":101:35)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":101:13)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":119:24)
#loc149 = loc("/usr/include/string.h":141:1)
#loc150 = loc("/usr/include/string.h":142:14)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":107:1)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":131:1)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":125:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":125:49)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":126:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":126:35)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":109:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":109:12)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":110:12)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":110:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":111:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":120:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":111:8)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":111:20)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":112:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":115:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":117:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":114:19)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":114:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":119:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":121:5)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":130:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":121:8)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":121:20)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":122:5)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":123:9)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":129:9)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":125:30)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":125:45)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":127:19)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":127:26)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":127:32)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":128:31)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":128:13)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":134:1)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":153:1)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":147:13)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":147:49)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":148:13)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":148:35)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":136:5)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":136:12)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":137:12)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":137:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":138:5)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":142:5)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":138:8)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":138:20)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":139:5)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":141:24)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":141:9)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":143:5)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":152:5)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":143:8)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":143:20)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":144:5)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":145:9)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":151:9)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":147:30)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":147:45)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":149:19)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":149:26)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":149:32)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":150:31)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c":150:13)
#loc216 = loc(fused[#loc1, #loc2])
#loc217 = loc(fused[#loc4, #loc5])
#loc218 = loc(fused[#loc6, #loc7])
#loc219 = loc(fused[#loc8, #loc9])
#loc220 = loc(fused[#loc10, #loc11])
#loc221 = loc(fused[#loc12, #loc13])
#loc222 = loc(fused[#loc14, #loc15])
#loc223 = loc(fused[#loc16, #loc17])
#loc224 = loc(fused[#loc19, #loc18])
#loc225 = loc(fused[#loc20, #loc21])
#loc226 = loc(fused[#loc22, #loc23])
#loc227 = loc(fused[#loc24, #loc21])
#loc228 = loc(fused[#loc25, #loc3])
#loc229 = loc(fused[#loc26, #loc27])
#loc230 = loc(fused[#loc28, #loc29])
#loc231 = loc(fused[#loc30, #loc27])
#loc232 = loc(fused[#loc31, #loc32])
#loc233 = loc(fused[#loc40, #loc41])
#loc234 = loc(fused[#loc42, #loc43])
#loc235 = loc(fused[#loc44, #loc45])
#loc236 = loc(fused[#loc46, #loc47])
#loc237 = loc(fused[#loc48, #loc49])
#loc238 = loc(fused[#loc50, #loc51])
#loc239 = loc(fused[#loc52, #loc53])
#loc240 = loc(fused[#loc58, #loc59])
#loc243 = loc(fused[#loc69, #loc70])
#loc244 = loc(fused[#loc73, #loc74])
#loc245 = loc(fused[#loc77, #loc76])
#loc246 = loc(fused[#loc79, #loc80])
#loc247 = loc(fused[#loc81, #loc82])
#loc248 = loc(fused[#loc83, #loc84])
#loc249 = loc(fused[#loc85, #loc86])
#loc250 = loc(fused[#loc87, #loc88])
#loc251 = loc(fused[#loc89, #loc90])
#loc252 = loc(fused[#loc92, #loc91])
#loc253 = loc(fused[#loc93, #loc94])
#loc254 = loc(fused[#loc95, #loc96])
#loc255 = loc(fused[#loc97, #loc94])
#loc256 = loc(fused[#loc99, #loc98])
#loc257 = loc(fused[#loc100, #loc101])
#loc258 = loc(fused[#loc102, #loc103])
#loc259 = loc(fused[#loc104, #loc105, #loc106, #loc101])
#loc260 = loc(fused[#loc108, #loc109])
#loc261 = loc(fused[#loc117, #loc118])
#loc262 = loc(fused[#loc119, #loc120])
#loc263 = loc(fused[#loc121, #loc122])
#loc264 = loc(fused[#loc123, #loc124])
#loc265 = loc(fused[#loc126, #loc125])
#loc266 = loc(fused[#loc127, #loc128])
#loc267 = loc(fused[#loc129, #loc130])
#loc268 = loc(fused[#loc131, #loc128])
#loc269 = loc(fused[#loc133, #loc132])
#loc270 = loc(fused[#loc134, #loc135])
#loc271 = loc(fused[#loc136, #loc137])
#loc272 = loc(fused[#loc138, #loc135])
#loc273 = loc(fused[#loc139, #loc140])
#loc274 = loc(fused[#loc149, #loc150])
#loc275 = loc(fused[#loc151, #loc152])
#loc276 = loc(fused[#loc153, #loc154])
#loc277 = loc(fused[#loc155, #loc156])
#loc278 = loc(fused[#loc157, #loc158])
#loc279 = loc(fused[#loc160, #loc159])
#loc280 = loc(fused[#loc161, #loc162])
#loc281 = loc(fused[#loc163, #loc164])
#loc282 = loc(fused[#loc165, #loc166, #loc167, #loc162])
#loc283 = loc(fused[#loc170, #loc148])
#loc284 = loc(fused[#loc171, #loc172])
#loc285 = loc(fused[#loc173, #loc174])
#loc286 = loc(fused[#loc175, #loc172])
#loc287 = loc(fused[#loc176, #loc177])
#loc288 = loc(fused[#loc185, #loc186])
#loc289 = loc(fused[#loc187, #loc188])
#loc290 = loc(fused[#loc189, #loc190])
#loc291 = loc(fused[#loc191, #loc192])
#loc292 = loc(fused[#loc194, #loc193])
#loc293 = loc(fused[#loc195, #loc196])
#loc294 = loc(fused[#loc197, #loc198])
#loc295 = loc(fused[#loc199, #loc196])
#loc296 = loc(fused[#loc201, #loc200])
#loc297 = loc(fused[#loc202, #loc203])
#loc298 = loc(fused[#loc204, #loc205])
#loc299 = loc(fused[#loc206, #loc203])
#loc300 = loc(fused[#loc207, #loc208])
