!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":25:63)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":25:70)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":25:74)
#loc82 = loc(fused[#loc15, #loc16])
!ty_anon_struct = !cir.struct<struct  {!cir.ptr<!u8i>, !cir.ptr<!u8i>}>
!ty_anon_struct1 = !cir.struct<struct  {!cir.ptr<!u8i>, !cir.ptr<!u8i>, !cir.ptr<!u8i>}>
!ty_anon_struct2 = !cir.struct<struct  {!cir.array<!cir.ptr<!u8i> x 3>}>
!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_base = !cir.struct<class "CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81::CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_base" {!cir.ptr<!cir.ptr<!cir.func<!u32i ()>>>} #cir.record.decl.ast>
!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad = !cir.struct<class "CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81::CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad" {!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_base} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc76)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc77)
  cir.func private @printIntLine(!s32i) loc(#loc78)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc80)
  cir.func @_ZNK51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8155CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad6actionEi(%arg0: !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad> loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":25:63), %arg1: !s32i loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc84)
    %2 = cir.alloca !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc14)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc82)
    cir.store %arg0, %2 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad>> loc(#loc21)
    cir.store %arg1, %3 : !s32i, !cir.ptr<!s32i> loc(#loc21)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad>>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_813A3ACWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad> loc(#loc14)
    cir.br ^bb1 loc(#loc85)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc25)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc25)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc86)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc87)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc88)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc84)
    cir.br ^bb2 loc(#loc89)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc31)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc90)
    cir.brcond %14 ^bb3, ^bb4 loc(#loc91)
  ^bb3:  // pred: ^bb2
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc35)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
    cir.br ^bb4 loc(#loc29)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc29)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc92)
  ^bb6:  // pred: ^bb5
    %18 = cir.const #cir.int<0> : !s32i loc(#loc38)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.br ^bb7 loc(#loc92)
  ^bb7:  // 2 preds: ^bb6, ^bb9
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc41)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc94)
    cir.brcond %21 ^bb8, ^bb10 loc(#loc94)
  ^bb8:  // pred: ^bb7
    %22 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc45)
    cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.br ^bb9 loc(#loc37)
  ^bb9:  // pred: ^bb8
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc47)
    cir.store %27, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb7 loc(#loc92)
  ^bb10:  // pred: ^bb7
    cir.br ^bb11 loc(#loc37)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc97)
  ^bb12:  // pred: ^bb11
    %28 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %30 = cir.cmp(ge, %28, %29) : !s32i, !cir.bool loc(#loc98)
    cir.brcond %30 ^bb13, ^bb20 loc(#loc99)
  ^bb13:  // pred: ^bb12
    %31 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
    %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc58)
    cir.store %31, %34 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.br ^bb14 loc(#loc101)
  ^bb14:  // pred: ^bb13
    %35 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.br ^bb15 loc(#loc101)
  ^bb15:  // 2 preds: ^bb14, ^bb17
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %37 = cir.const #cir.int<10> : !s32i loc(#loc64)
    %38 = cir.cmp(lt, %36, %37) : !s32i, !cir.bool loc(#loc103)
    cir.brcond %38 ^bb16, ^bb18 loc(#loc103)
  ^bb16:  // pred: ^bb15
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s32i>, %40 : !s32i), !cir.ptr<!s32i> loc(#loc67)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.call @printIntLine(%42) : (!s32i) -> () loc(#loc68)
    cir.br ^bb17 loc(#loc60)
  ^bb17:  // pred: ^bb16
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %44 = cir.unary(inc, %43) : !s32i, !s32i loc(#loc70)
    cir.store %44, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb15 loc(#loc101)
  ^bb18:  // pred: ^bb15
    cir.br ^bb19 loc(#loc60)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21 loc(#loc53)
  ^bb20:  // pred: ^bb12
    %45 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb21 loc(#loc49)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc49)
  ^bb22:  // pred: ^bb21
    %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
    %48 = cir.cast(bitcast, %47 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc72)
    cir.call @free(%48) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
    cir.br ^bb23 loc(#loc23)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc13)
  } loc(#loc81)
  cir.global external dsolocal @_ZTVN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8155CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_badE = #cir.vtable<{#cir.const_array<[#cir.ptr<null> : !cir.ptr<!u8i>, #cir.global_view<@_ZTIN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8155CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_badE> : !cir.ptr<!u8i>, #cir.global_view<@_ZNK51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8155CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad6actionEi> : !cir.ptr<!u8i>]> : !cir.array<!cir.ptr<!u8i> x 3>}> : !ty_anon_struct2 {alignment = 8 : i64} loc(#loc105)
  cir.global "private" external @_ZTVN10__cxxabiv120__si_class_type_infoE : !cir.ptr<!cir.ptr<!u8i>> loc(#loc74)
  cir.global external @_ZTSN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8155CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_badE = #cir.const_array<"N51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8155CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_badE" : !cir.array<!s8i x 112>> : !cir.array<!s8i x 112> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" external @_ZTVN10__cxxabiv117__class_type_infoE : !cir.ptr<!cir.ptr<!u8i>> loc(#loc74)
  cir.global linkonce_odr comdat @_ZTSN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8156CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_baseE = #cir.const_array<"N51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8156CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_baseE" : !cir.array<!s8i x 113>> : !cir.array<!s8i x 113> {alignment = 1 : i64} loc(#loc74)
  cir.global constant external @_ZTIN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8156CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_baseE = #cir.typeinfo<{#cir.global_view<@_ZTVN10__cxxabiv117__class_type_infoE, [2 : i32]> : !cir.ptr<!u8i>, #cir.global_view<@_ZTSN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8156CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_baseE> : !cir.ptr<!u8i>}> : !ty_anon_struct {alignment = 8 : i64} loc(#loc74)
  cir.global constant external @_ZTIN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8155CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_badE = #cir.typeinfo<{#cir.global_view<@_ZTVN10__cxxabiv120__si_class_type_infoE, [2 : i32]> : !cir.ptr<!u8i>, #cir.global_view<@_ZTSN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8155CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_badE> : !cir.ptr<!u8i>, #cir.global_view<@_ZTIN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_8156CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_baseE> : !cir.ptr<!u8i>}> : !ty_anon_struct1 {alignment = 8 : i64} loc(#loc74)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":49:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":25:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":53:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":28:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":28:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":29:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":29:54)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":26:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":27:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":52:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":29:31)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":29:38)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":29:43)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":29:53)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":30:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":30:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":30:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":30:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":30:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":30:36)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":30:35)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":35:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":32:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":32:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":32:21)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":32:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":34:25)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":34:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":34:20)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":34:21)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":32:30)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":32:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":38:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":50:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":38:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":38:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":39:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":46:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":48:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":40:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":40:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":40:20)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":40:24)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":42:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":45:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":42:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":42:17)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":42:24)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":42:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":44:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":44:37)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":44:38)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":44:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":42:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":42:32)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":49:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":51:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81_bad.cpp":51:9)
#loc74 = loc("./CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81.h":32:1)
#loc75 = loc("./CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_81.h":36:1)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc7, #loc8])
#loc80 = loc(fused[#loc10, #loc11])
#loc81 = loc(fused[#loc12, #loc13])
#loc83 = loc(fused[#loc17, #loc18])
#loc84 = loc(fused[#loc19, #loc20])
#loc85 = loc(fused[#loc22, #loc23])
#loc86 = loc(fused[#loc26, #loc27])
#loc87 = loc(fused[#loc25, #loc27])
#loc88 = loc(fused[#loc24, #loc20])
#loc89 = loc(fused[#loc28, #loc29])
#loc90 = loc(fused[#loc30, #loc31])
#loc91 = loc(fused[#loc32, #loc29])
#loc92 = loc(fused[#loc36, #loc37])
#loc93 = loc(fused[#loc39, #loc38])
#loc94 = loc(fused[#loc40, #loc41])
#loc95 = loc(fused[#loc43, #loc42])
#loc96 = loc(fused[#loc47, #loc46])
#loc97 = loc(fused[#loc48, #loc49])
#loc98 = loc(fused[#loc50, #loc51])
#loc99 = loc(fused[#loc52, #loc53, #loc54, #loc49])
#loc100 = loc(fused[#loc56, #loc55])
#loc101 = loc(fused[#loc59, #loc60])
#loc102 = loc(fused[#loc62, #loc61])
#loc103 = loc(fused[#loc63, #loc64])
#loc104 = loc(fused[#loc70, #loc69])
#loc105 = loc(fused[#loc74, #loc75])
