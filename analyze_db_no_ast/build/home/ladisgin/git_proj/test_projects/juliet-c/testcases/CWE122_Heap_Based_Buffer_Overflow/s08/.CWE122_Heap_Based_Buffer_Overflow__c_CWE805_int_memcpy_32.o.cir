!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc124)
  cir.func private  @printIntLine(!s32i) loc(#loc125)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc126)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc129)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc130)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc129)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc130)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc17)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc131)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc133)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc22)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc25)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc25)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc134)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc135)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc136)
      cir.store %13, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc137)
      cir.scope {
        %16 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc34)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc38)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
        } loc(#loc140)
      } loc(#loc138)
      %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc40)
      cir.store %14, %15 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc141)
    } loc(#loc132)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc143)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc45)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
      cir.scope {
        %7 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc145)
        %8 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc145)
        cir.store %8, %7 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc145)
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc51)
        %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc52)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc52)
        %13 = cir.const #cir.int<100> : !s32i loc(#loc53)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc53)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc146)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc147)
        cir.libc.memcpy %16 bytes from %12 to %10 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc148)
        %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc59)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc60)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc61)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc62)
        %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc62)
      } loc(#loc144)
    } loc(#loc142)
    cir.return loc(#loc10)
  } loc(#loc127)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc65)
  } loc(#loc149)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc154)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc153)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc154)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc76)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc155)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc157)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc81)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc83)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc84)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc84)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc158)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc159)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc83)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc160)
      cir.store %13, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
      cir.scope {
        %16 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc163)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc93)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc95)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc96)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc97)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
        } loc(#loc164)
      } loc(#loc162)
      %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc99)
      cir.store %14, %15 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    } loc(#loc156)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc167)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc104)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
      cir.scope {
        %7 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc169)
        %8 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc169)
        cir.store %8, %7 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc169)
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc110)
        %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc111)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc111)
        %13 = cir.const #cir.int<100> : !s32i loc(#loc112)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc112)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc170)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc171)
        cir.libc.memcpy %16 bytes from %12 to %10 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc172)
        %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc118)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc119)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc120)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc121)
        %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc122)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc121)
      } loc(#loc168)
    } loc(#loc166)
    cir.return loc(#loc69)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":44:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":24:24)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":25:24)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":26:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":28:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":28:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":28:22)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":30:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":30:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":30:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":30:43)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":30:44)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":31:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":31:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":31:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":31:18)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":31:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":31:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":31:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":31:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":32:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":32:10)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":32:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":34:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":43:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":35:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":35:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":35:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":36:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":42:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":37:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":37:33)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":39:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":39:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":39:34)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":39:38)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":39:48)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":39:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":39:49)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":40:26)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":40:31)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":40:32)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":40:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":41:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":41:18)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":76:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":79:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":78:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":78:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":51:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":74:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":53:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":53:11)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":54:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":54:24)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":55:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":55:24)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":56:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":56:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":57:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":63:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":58:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":58:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":58:22)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":60:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":60:30)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":60:34)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":60:44)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":60:45)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":60:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":61:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":61:37)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":61:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":61:21)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":61:18)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":61:27)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":61:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":61:34)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":61:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":62:21)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":62:10)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":62:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":64:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":73:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":65:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":65:23)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":65:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":66:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":72:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":67:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":67:33)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":69:20)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":69:26)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":69:34)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":69:38)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":69:48)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":69:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":69:49)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":70:26)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":70:31)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":70:32)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":70:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":71:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c":71:18)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc11, #loc12])
#loc129 = loc(fused[#loc13, #loc14])
#loc130 = loc(fused[#loc15, #loc16])
#loc131 = loc(fused[#loc18, #loc17])
#loc132 = loc(fused[#loc19, #loc20])
#loc133 = loc(fused[#loc21, #loc22])
#loc134 = loc(fused[#loc26, #loc27])
#loc135 = loc(fused[#loc25, #loc27])
#loc136 = loc(fused[#loc24, #loc28])
#loc137 = loc(fused[#loc29, #loc28])
#loc138 = loc(fused[#loc30, #loc31])
#loc139 = loc(fused[#loc32, #loc33])
#loc140 = loc(fused[#loc35, #loc31])
#loc141 = loc(fused[#loc41, #loc39])
#loc142 = loc(fused[#loc42, #loc43])
#loc143 = loc(fused[#loc44, #loc45])
#loc144 = loc(fused[#loc47, #loc48])
#loc145 = loc(fused[#loc49, #loc50])
#loc146 = loc(fused[#loc54, #loc55])
#loc147 = loc(fused[#loc53, #loc55])
#loc148 = loc(fused[#loc56, #loc57])
#loc149 = loc(fused[#loc64, #loc65])
#loc150 = loc(fused[#loc66, #loc67])
#loc151 = loc(fused[#loc68, #loc69])
#loc152 = loc(fused[#loc70, #loc71])
#loc153 = loc(fused[#loc72, #loc73])
#loc154 = loc(fused[#loc74, #loc75])
#loc155 = loc(fused[#loc77, #loc76])
#loc156 = loc(fused[#loc78, #loc79])
#loc157 = loc(fused[#loc80, #loc81])
#loc158 = loc(fused[#loc85, #loc86])
#loc159 = loc(fused[#loc84, #loc86])
#loc160 = loc(fused[#loc83, #loc87])
#loc161 = loc(fused[#loc88, #loc87])
#loc162 = loc(fused[#loc89, #loc90])
#loc163 = loc(fused[#loc91, #loc92])
#loc164 = loc(fused[#loc94, #loc90])
#loc165 = loc(fused[#loc100, #loc98])
#loc166 = loc(fused[#loc101, #loc102])
#loc167 = loc(fused[#loc103, #loc104])
#loc168 = loc(fused[#loc106, #loc107])
#loc169 = loc(fused[#loc108, #loc109])
#loc170 = loc(fused[#loc113, #loc114])
#loc171 = loc(fused[#loc112, #loc114])
#loc172 = loc(fused[#loc115, #loc116])
