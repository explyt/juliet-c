!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc4)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_snprintf_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc59)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc60)
    cir.br ^bb1 loc(#loc61)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc61)
  ^bb2:  // 2 preds: ^bb1, ^bb7
    %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %3 ^bb3, ^bb8 loc(#loc13)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc62)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc63)
  ^bb5:  // pred: ^bb4
    %4 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc59)
    cir.store %4, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc59)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc60)
    %6 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc17)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc19)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc19)
    %10 = cir.const #cir.int<6> : !u64i loc(#loc64)
    %11 = cir.binop(sub, %9, %10) : !u64i loc(#loc65)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc22)
    %14 = cir.binop(sub, %11, %13) : !u64i loc(#loc66)
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc4)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc4)
    %19 = cir.call @snprintf(%7, %14, %16, %18) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc17)
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc23)
  ^bb7:  // no predecessors
    cir.br ^bb2 loc(#loc12)
  ^bb8:  // 2 preds: ^bb2, ^bb6
    cir.br ^bb9 loc(#loc12)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc6)
  } loc(#loc58)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_snprintf_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc68)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc25)
  } loc(#loc67)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc71)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc73)
  ^bb2:  // 2 preds: ^bb1, ^bb11
    %2 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc39)
    cir.brcond %3 ^bb3, ^bb12 loc(#loc39)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc74)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    %4 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc71)
    cir.store %4, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc71)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc36)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc72)
    cir.br ^bb6 loc(#loc76)
  ^bb6:  // pred: ^bb5
    %6 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc45)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc47)
    %10 = cir.const #cir.int<6> : !u64i loc(#loc77)
    %11 = cir.binop(sub, %9, %10) : !u64i loc(#loc78)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc50)
    %14 = cir.binop(sub, %11, %13) : !u64i loc(#loc79)
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc51)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc51)
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc52)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc52)
    %19 = cir.call @snprintf(%7, %14, %16, %18) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc45)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc80)
    cir.brcond %21 ^bb7, ^bb8 loc(#loc81)
  ^bb7:  // pred: ^bb6
    %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc30)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb8 loc(#loc44)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc44)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc42)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc56)
  ^bb11:  // no predecessors
    cir.br ^bb2 loc(#loc38)
  ^bb12:  // 2 preds: ^bb2, ^bb10
    cir.br ^bb13 loc(#loc38)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc32)
  } loc(#loc70)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:46)
#loc4 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:54)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":32:1)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":46:1)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":39:13)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":39:36)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":40:13)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":40:27)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":34:5)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":45:5)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":34:11)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":35:5)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":36:9)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":43:9)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:13)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:22)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:27)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:31)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:41)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":42:43)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":44:9)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":72:1)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":75:1)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":74:5)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":74:11)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":65:27)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":53:1)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":70:1)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":60:13)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":60:36)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":61:13)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":61:27)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":55:5)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":69:5)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":55:11)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":56:5)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":57:9)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":67:9)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:13)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":66:13)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:17)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:26)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:31)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:35)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:45)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:47)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:50)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:58)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":63:65)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":64:13)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":65:17)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_snprintf_16.c":68:9)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc5, #loc6])
#loc59 = loc(fused[#loc7, #loc8])
#loc60 = loc(fused[#loc9, #loc10])
#loc61 = loc(fused[#loc11, #loc12])
#loc62 = loc(fused[#loc14, #loc12])
#loc63 = loc(fused[#loc15, #loc16])
#loc64 = loc(fused[#loc20, #loc21])
#loc65 = loc(fused[#loc19, #loc21])
#loc66 = loc(fused[#loc19, #loc22])
#loc67 = loc(fused[#loc24, #loc25])
#loc68 = loc(fused[#loc26, #loc27])
#loc69 = loc(fused[#loc28, #loc29])
#loc70 = loc(fused[#loc31, #loc32])
#loc71 = loc(fused[#loc33, #loc34])
#loc72 = loc(fused[#loc35, #loc36])
#loc73 = loc(fused[#loc37, #loc38])
#loc74 = loc(fused[#loc40, #loc38])
#loc75 = loc(fused[#loc41, #loc42])
#loc76 = loc(fused[#loc43, #loc44])
#loc77 = loc(fused[#loc48, #loc49])
#loc78 = loc(fused[#loc47, #loc49])
#loc79 = loc(fused[#loc47, #loc50])
#loc80 = loc(fused[#loc45, #loc53])
#loc81 = loc(fused[#loc54, #loc44])
