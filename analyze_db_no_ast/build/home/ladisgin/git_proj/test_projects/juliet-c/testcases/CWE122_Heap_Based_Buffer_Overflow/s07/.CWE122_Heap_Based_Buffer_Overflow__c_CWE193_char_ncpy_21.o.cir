!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":31:25)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":31:32)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":67:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":67:37)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":100:30)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":100:37)
#loc193 = loc(fused[#loc9, #loc10])
#loc221 = loc(fused[#loc78, #loc79])
#loc242 = loc(fused[#loc137, #loc138])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc189)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc190)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc191)
  cir.func internal private  @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc189)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc17)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc17)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc196)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc197)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc198)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !s32i loc(#loc201)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc26)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc29)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc30)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
          } loc(#loc202)
        } loc(#loc200)
      } loc(#loc195)
    } loc(#loc194)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc203)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc203)
  } loc(#loc192)
  cir.func private  @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc204)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc205)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc207)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc45)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc189)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    %5 = cir.call @badSource(%4) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc50)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc214)
      %7 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc214)
      cir.store %7, %6 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc214)
      %8 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc57)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc59)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc60)
      %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc61)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc60)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc62)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc62)
      %16 = cir.binop(add, %13, %15) : !u64i loc(#loc215)
      %17 = cir.call @strncpy(%9, %10, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc57)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc65)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
    } loc(#loc213)
    cir.return loc(#loc42)
  } loc(#loc208)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc68)
  } loc(#loc216)
  cir.global "private"  internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc219)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.func internal private  @goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc78, #loc79])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc77)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc80)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc219)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc83)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc83)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc87)
      } else {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc88)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc89)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc89)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc89)
        %12 = cir.const #cir.int<1> : !u64i loc(#loc224)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc225)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc226)
        cir.store %15, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc227)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc229)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc100)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc102)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc103)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc104)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
          } loc(#loc230)
        } loc(#loc228)
      } loc(#loc223)
    } loc(#loc222)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc231)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc231)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc231)
  } loc(#loc220)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc111)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc234)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc113)
    %3 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc219)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    %5 = cir.call @goodG2B1Source(%4) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc116)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc236)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc238)
      %7 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc238)
      cir.store %7, %6 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc238)
      %8 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc123)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc125)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc126)
      %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc127)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc126)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc128)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc128)
      %16 = cir.binop(add, %13, %15) : !u64i loc(#loc239)
      %17 = cir.call @strncpy(%9, %10, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc123)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc130)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc131)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    } loc(#loc237)
    cir.return loc(#loc108)
  } loc(#loc232)
  cir.global "private"  internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc240)
  cir.func internal private  @goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc137, #loc138])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc136)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc139)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc240)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc142)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc142)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc144)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc145)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc146)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc145)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc145)
        %12 = cir.const #cir.int<1> : !u64i loc(#loc245)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc246)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc247)
        cir.store %15, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc248)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc250)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc156)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc158)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc159)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc160)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc158)
          } loc(#loc251)
        } loc(#loc249)
      } loc(#loc244)
    } loc(#loc243)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc252)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc252)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc252)
  } loc(#loc241)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc254)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc167)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc255)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc169)
    %3 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc240)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
    %5 = cir.call @goodG2B2Source(%4) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc172)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc257)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc259)
      %7 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc259)
      cir.store %7, %6 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc259)
      %8 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc179)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc181)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc182)
      %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc183)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc182)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc184)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc184)
      %16 = cir.binop(add, %13, %15) : !u64i loc(#loc260)
      %17 = cir.call @strncpy(%9, %10, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc179)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc186)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc187)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc188)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc187)
    } loc(#loc258)
    cir.return loc(#loc164)
  } loc(#loc253)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":29:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":29:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":31:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":40:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":32:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":33:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":38:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":33:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":34:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:24)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:34)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:45)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:46)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:21)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:18)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:28)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:34)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":39:12)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":39:5)
#loc33 = loc("/usr/include/string.h":144:1)
#loc34 = loc("/usr/include/string.h":146:14)
#loc35 = loc("/usr/include/string.h":407:1)
#loc36 = loc("/usr/include/string.h":408:33)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("/usr/include/stdlib.h":687:1)
#loc40 = loc("/usr/include/stdlib.h":687:32)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":42:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":56:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":44:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":44:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":45:12)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":45:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":46:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":46:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":47:22)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":47:12)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":47:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":47:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":48:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":55:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":49:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":49:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:31)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:38)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:48)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":53:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":53:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":54:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":54:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":127:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":131:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":129:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":129:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":130:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":130:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":63:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":63:29)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":72:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":67:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":81:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":68:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":69:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":79:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":69:8)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":70:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":73:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":75:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":72:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:32)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:35)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:38)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:49)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:31)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:50)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:37)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:21)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:28)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:34)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:33)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":80:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":80:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":83:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":97:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":85:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":85:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":86:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":86:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":87:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":87:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":88:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":88:12)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":88:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":88:31)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":89:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":96:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":90:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":90:29)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:17)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:23)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:31)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:38)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:48)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":94:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":94:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":95:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":95:14)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":64:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":64:29)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":100:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":109:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":101:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":102:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":107:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":102:8)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":103:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:32)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:35)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:49)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:31)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:50)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:37)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:21)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:18)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:27)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:28)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:34)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:33)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":108:12)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":108:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":111:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":125:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":113:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":113:12)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":114:12)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":114:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":115:22)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":115:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":116:27)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":116:12)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":116:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":116:31)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":117:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":124:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":118:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":118:29)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:23)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:31)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:38)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:48)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":122:19)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":122:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":123:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":123:14)
#loc189 = loc(fused[#loc1, #loc2])
#loc190 = loc(fused[#loc3, #loc4])
#loc191 = loc(fused[#loc5, #loc6])
#loc192 = loc(fused[#loc7, #loc8])
#loc194 = loc(fused[#loc12, #loc13])
#loc195 = loc(fused[#loc15, #loc13])
#loc196 = loc(fused[#loc18, #loc19])
#loc197 = loc(fused[#loc17, #loc19])
#loc198 = loc(fused[#loc16, #loc20])
#loc199 = loc(fused[#loc21, #loc20])
#loc200 = loc(fused[#loc22, #loc23])
#loc201 = loc(fused[#loc24, #loc25])
#loc202 = loc(fused[#loc27, #loc23])
#loc203 = loc(fused[#loc32, #loc31])
#loc204 = loc(fused[#loc33, #loc34])
#loc205 = loc(fused[#loc35, #loc36])
#loc206 = loc(fused[#loc37, #loc38])
#loc207 = loc(fused[#loc39, #loc40])
#loc208 = loc(fused[#loc41, #loc42])
#loc209 = loc(fused[#loc43, #loc44])
#loc210 = loc(fused[#loc46, #loc45])
#loc211 = loc(fused[#loc48, #loc47])
#loc212 = loc(fused[#loc51, #loc52])
#loc213 = loc(fused[#loc53, #loc54])
#loc214 = loc(fused[#loc55, #loc56])
#loc215 = loc(fused[#loc60, #loc62])
#loc216 = loc(fused[#loc67, #loc68])
#loc217 = loc(fused[#loc69, #loc70])
#loc218 = loc(fused[#loc71, #loc72])
#loc219 = loc(fused[#loc73, #loc74])
#loc220 = loc(fused[#loc76, #loc77])
#loc222 = loc(fused[#loc81, #loc82])
#loc223 = loc(fused[#loc84, #loc85, #loc86, #loc82])
#loc224 = loc(fused[#loc91, #loc92])
#loc225 = loc(fused[#loc93, #loc92])
#loc226 = loc(fused[#loc88, #loc94])
#loc227 = loc(fused[#loc95, #loc94])
#loc228 = loc(fused[#loc96, #loc97])
#loc229 = loc(fused[#loc98, #loc99])
#loc230 = loc(fused[#loc101, #loc97])
#loc231 = loc(fused[#loc106, #loc105])
#loc232 = loc(fused[#loc107, #loc108])
#loc233 = loc(fused[#loc109, #loc110])
#loc234 = loc(fused[#loc112, #loc111])
#loc235 = loc(fused[#loc114, #loc113])
#loc236 = loc(fused[#loc117, #loc118])
#loc237 = loc(fused[#loc119, #loc120])
#loc238 = loc(fused[#loc121, #loc122])
#loc239 = loc(fused[#loc126, #loc128])
#loc240 = loc(fused[#loc133, #loc134])
#loc241 = loc(fused[#loc135, #loc136])
#loc243 = loc(fused[#loc140, #loc141])
#loc244 = loc(fused[#loc143, #loc141])
#loc245 = loc(fused[#loc147, #loc148])
#loc246 = loc(fused[#loc149, #loc148])
#loc247 = loc(fused[#loc144, #loc150])
#loc248 = loc(fused[#loc151, #loc150])
#loc249 = loc(fused[#loc152, #loc153])
#loc250 = loc(fused[#loc154, #loc155])
#loc251 = loc(fused[#loc157, #loc153])
#loc252 = loc(fused[#loc162, #loc161])
#loc253 = loc(fused[#loc163, #loc164])
#loc254 = loc(fused[#loc165, #loc166])
#loc255 = loc(fused[#loc168, #loc167])
#loc256 = loc(fused[#loc170, #loc169])
#loc257 = loc(fused[#loc173, #loc174])
#loc258 = loc(fused[#loc175, #loc176])
#loc259 = loc(fused[#loc177, #loc178])
#loc260 = loc(fused[#loc182, #loc184])
