!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc138)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc139)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc140)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc143)
    cir.goto "source" loc(#loc144)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc19)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc145)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc146)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc148)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc26)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc27)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc150)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc28)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc32)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
      } loc(#loc151)
    } loc(#loc149)
    cir.scope {
      %9 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc153)
      cir.scope {
        %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc155)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc43)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc43)
          cir.store %26, %24 : !u64i, !cir.ptr<!u64i> loc(#loc157)
          cir.for : cond {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc45)
            %28 = cir.const #cir.int<100> : !s32i loc(#loc46)
            %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc46)
            %30 = cir.cmp(lt, %27, %29) : !u64i, !s32i loc(#loc158)
            %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc47)
            cir.condition(%31) loc(#loc47)
          } body {
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc49)
              %28 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc50)
              %29 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
              %31 = cir.get_member %30[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc52)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc160)
              %32 = cir.const #cir.int<0> : !s32i loc(#loc53)
              %33 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc54)
              %34 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              %36 = cir.get_member %35[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc56)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc161)
            } loc(#loc159)
            cir.yield loc(#loc42)
          } step {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc57)
            %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc58)
            cir.store %28, %24 : !u64i, !cir.ptr<!u64i> loc(#loc162)
            cir.yield loc(#loc156)
          } loc(#loc156)
        } loc(#loc156)
      } loc(#loc154)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc59)
      %12 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc60)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc61)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc61)
      %16 = cir.const #cir.int<8> : !u64i loc(#loc163)
      %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc164)
      cir.libc.memcpy %17 bytes from %13 to %11 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc165)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc67)
      %20 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %19 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc68)
      cir.call @printStructLine(%20) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc69)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc70)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc71)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc71)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc70)
    } loc(#loc152)
    cir.return loc(#loc10)
  } loc(#loc141)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc73)
  } loc(#loc166)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc80)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc170)
    cir.goto "source" loc(#loc171)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc84)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc85)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc86)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc86)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc172)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc173)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc174)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc175)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc93)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc94)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc177)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc95)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc97)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc98)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc99)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
      } loc(#loc178)
    } loc(#loc176)
    cir.scope {
      %9 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc180)
      cir.scope {
        %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc182)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc110)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc110)
          cir.store %26, %24 : !u64i, !cir.ptr<!u64i> loc(#loc184)
          cir.for : cond {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc112)
            %28 = cir.const #cir.int<100> : !s32i loc(#loc113)
            %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc113)
            %30 = cir.cmp(lt, %27, %29) : !u64i, !s32i loc(#loc185)
            %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc114)
            cir.condition(%31) loc(#loc114)
          } body {
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc116)
              %28 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc117)
              %29 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
              %31 = cir.get_member %30[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc52)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc187)
              %32 = cir.const #cir.int<0> : !s32i loc(#loc119)
              %33 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc120)
              %34 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc121)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc121)
              %36 = cir.get_member %35[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc56)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc188)
            } loc(#loc186)
            cir.yield loc(#loc109)
          } step {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc122)
            %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc123)
            cir.store %28, %24 : !u64i, !cir.ptr<!u64i> loc(#loc189)
            cir.yield loc(#loc183)
          } loc(#loc183)
        } loc(#loc183)
      } loc(#loc181)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc124)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc124)
      %12 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc125)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc125)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc126)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc126)
      %16 = cir.const #cir.int<8> : !u64i loc(#loc190)
      %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc191)
      cir.libc.memcpy %17 bytes from %13 to %11 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc192)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc131)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc132)
      %20 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %19 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc133)
      cir.call @printStructLine(%20) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc134)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc135)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc136)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc136)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc135)
    } loc(#loc179)
    cir.return loc(#loc77)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":46:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":23:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":25:10)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":26:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":28:29)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":28:36)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":28:39)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":28:59)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":28:60)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":29:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":29:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":29:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":29:17)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":29:14)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":29:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":29:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":29:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":29:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":30:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":45:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":31:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":31:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":40:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":33:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":33:20)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":35:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":39:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":35:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":35:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":35:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":35:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":35:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":36:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":37:36)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":37:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":37:17)
#loc52 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":38:36)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":38:24)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":38:17)
#loc56 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":35:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":35:34)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":42:16)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":42:22)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":42:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":42:34)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":42:54)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":42:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":42:55)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":43:26)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":43:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":43:32)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":43:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":44:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":44:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":80:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":83:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":82:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":82:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":53:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":78:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":55:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":55:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":56:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":56:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":57:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":57:10)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":58:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":60:29)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":60:36)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":60:40)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":60:60)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":60:61)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":60:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":61:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":61:33)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":61:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":61:17)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":61:14)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":61:23)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":61:24)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":61:30)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":61:29)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":62:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":77:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":63:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":63:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":64:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":72:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":65:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":65:20)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":67:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":71:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":67:22)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":67:18)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":67:25)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":67:29)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":67:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":68:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":69:36)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":69:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":69:17)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":70:36)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":70:24)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":70:17)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":67:35)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":67:34)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":74:16)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":74:22)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":74:30)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":74:34)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":74:54)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":74:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":74:55)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":75:26)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":75:31)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":75:32)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":75:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":76:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c":76:14)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc5, #loc6])
#loc140 = loc(fused[#loc7, #loc8])
#loc141 = loc(fused[#loc9, #loc10])
#loc142 = loc(fused[#loc11, #loc12])
#loc143 = loc(fused[#loc14, #loc13])
#loc144 = loc(fused[#loc15, #loc16])
#loc145 = loc(fused[#loc20, #loc21])
#loc146 = loc(fused[#loc19, #loc21])
#loc147 = loc(fused[#loc18, #loc22])
#loc148 = loc(fused[#loc23, #loc22])
#loc149 = loc(fused[#loc24, #loc25])
#loc150 = loc(fused[#loc26, #loc27])
#loc151 = loc(fused[#loc29, #loc25])
#loc152 = loc(fused[#loc33, #loc34])
#loc153 = loc(fused[#loc35, #loc36])
#loc154 = loc(fused[#loc37, #loc38])
#loc155 = loc(fused[#loc39, #loc40])
#loc156 = loc(fused[#loc41, #loc42])
#loc157 = loc(fused[#loc44, #loc43])
#loc158 = loc(fused[#loc45, #loc46])
#loc159 = loc(fused[#loc48, #loc42])
#loc160 = loc(fused[#loc51, #loc49])
#loc161 = loc(fused[#loc55, #loc53])
#loc162 = loc(fused[#loc58, #loc57])
#loc163 = loc(fused[#loc62, #loc63])
#loc164 = loc(fused[#loc61, #loc63])
#loc165 = loc(fused[#loc64, #loc65])
#loc166 = loc(fused[#loc72, #loc73])
#loc167 = loc(fused[#loc74, #loc75])
#loc168 = loc(fused[#loc76, #loc77])
#loc169 = loc(fused[#loc78, #loc79])
#loc170 = loc(fused[#loc81, #loc80])
#loc171 = loc(fused[#loc82, #loc83])
#loc172 = loc(fused[#loc87, #loc88])
#loc173 = loc(fused[#loc86, #loc88])
#loc174 = loc(fused[#loc85, #loc89])
#loc175 = loc(fused[#loc90, #loc89])
#loc176 = loc(fused[#loc91, #loc92])
#loc177 = loc(fused[#loc93, #loc94])
#loc178 = loc(fused[#loc96, #loc92])
#loc179 = loc(fused[#loc100, #loc101])
#loc180 = loc(fused[#loc102, #loc103])
#loc181 = loc(fused[#loc104, #loc105])
#loc182 = loc(fused[#loc106, #loc107])
#loc183 = loc(fused[#loc108, #loc109])
#loc184 = loc(fused[#loc111, #loc110])
#loc185 = loc(fused[#loc112, #loc113])
#loc186 = loc(fused[#loc115, #loc109])
#loc187 = loc(fused[#loc118, #loc116])
#loc188 = loc(fused[#loc121, #loc119])
#loc189 = loc(fused[#loc123, #loc122])
#loc190 = loc(fused[#loc127, #loc128])
#loc191 = loc(fused[#loc126, #loc128])
#loc192 = loc(fused[#loc129, #loc130])
