!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc83)
  cir.func private  @printHexCharLine(!s8i) loc(#loc84)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_multiply_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc86)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc9)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc87)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc11)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc11)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc11)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc11)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc11)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc11)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc11)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc11)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc11)
      cir.yield %21 : !u32i loc(#loc11)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc11)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc11)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc11)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc11)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc11)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc11)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc11)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc11)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc11)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc11)
      cir.yield %25 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc11)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc11)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc88)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc15)
      %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc15)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc16)
      %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc90)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc17)
      cir.if %14 {
        %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc92)
        %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc21)
        %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc21)
        %18 = cir.const #cir.int<2> : !s32i loc(#loc20)
        %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc21)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc21)
        cir.store %20, %15 : !s8i, !cir.ptr<!s8i> loc(#loc92)
        %21 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc22)
        cir.call @printHexCharLine(%21) : (!s8i) -> () loc(#loc23)
      } loc(#loc91)
    } loc(#loc89)
    cir.return loc(#loc6)
  } loc(#loc85)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_multiply_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc93)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc97)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc34)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc34)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc98)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc37)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc37)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc99)
    cir.scope {
      %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc41)
      %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc41)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc101)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc43)
      cir.if %10 {
        %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc103)
        %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc47)
        %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc47)
        %14 = cir.const #cir.int<2> : !s32i loc(#loc46)
        %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc47)
        %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc47)
        cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc103)
        %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc48)
        cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc49)
      } loc(#loc102)
    } loc(#loc100)
    cir.return loc(#loc31)
  } loc(#loc96)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc106)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc57)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc57)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc107)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc59)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc59)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc59)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc59)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc59)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc59)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc59)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc59)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc59)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc59)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc59)
      cir.yield %21 : !u32i loc(#loc59)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc59)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc59)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc59)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc59)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc59)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc59)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc59)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc59)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc59)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc59)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc59)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc59)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc59)
      cir.yield %25 : !u32i loc(#loc59)
    }) : (!cir.bool) -> !u32i loc(#loc59)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc59)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc59)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc63)
      %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc63)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc64)
      %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc110)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc65)
      cir.if %14 {
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc69)
          %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc69)
          %17 = cir.const #cir.int<127> : !s32i loc(#loc70)
          %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc70)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc70)
          %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc70)
          %21 = cir.const #cir.int<2> : !s32i loc(#loc71)
          %22 = cir.binop(div, %20, %21) : !s32i loc(#loc113)
          %23 = cir.cmp(gt, %16, %22) : !s32i, !s32i loc(#loc114)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc73)
          cir.if %24 {
            %25 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc116)
            %26 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc79)
            %27 = cir.cast(integral, %26 : !s8i), !s32i loc(#loc79)
            %28 = cir.const #cir.int<2> : !s32i loc(#loc78)
            %29 = cir.binop(mul, %27, %28) nsw : !s32i loc(#loc79)
            %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc79)
            cir.store %30, %25 : !s8i, !cir.ptr<!s8i> loc(#loc116)
            %31 = cir.load %25 : !cir.ptr<!s8i>, !s8i loc(#loc80)
            cir.call @printHexCharLine(%31) : (!s8i) -> () loc(#loc81)
          } else {
            %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc52)
            %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc52)
            cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc115)
        } loc(#loc112)
      } loc(#loc111)
    } loc(#loc109)
    cir.return loc(#loc54)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":34:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":24:10)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":27:18)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":27:5)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":28:5)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":33:5)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":28:8)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":28:15)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":28:13)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":29:5)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":31:9)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":31:30)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":31:23)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":32:26)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":32:9)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":77:1)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":81:1)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":79:5)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":79:13)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":80:5)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":80:13)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":41:1)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":53:1)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":43:5)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":43:10)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":44:12)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":44:5)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":46:13)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":46:12)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":46:5)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":47:5)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":52:5)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":47:8)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":47:15)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":47:13)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":48:5)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":50:9)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":50:30)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":50:23)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":51:26)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":51:9)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":72:23)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":56:1)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":75:1)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":58:5)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":58:10)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":59:12)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":59:5)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":61:18)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":61:5)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":62:5)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":74:5)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":62:8)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":62:15)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":62:13)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":63:5)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":65:9)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":73:9)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":65:13)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":65:21)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":65:30)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":65:31)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":65:18)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":66:9)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":69:9)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":71:9)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":67:13)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":67:34)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":67:27)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":68:30)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":68:13)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_multiply_01.c":72:13)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc10, #loc9])
#loc88 = loc(fused[#loc12, #loc11])
#loc89 = loc(fused[#loc13, #loc14])
#loc90 = loc(fused[#loc15, #loc16])
#loc91 = loc(fused[#loc18, #loc14])
#loc92 = loc(fused[#loc19, #loc20])
#loc93 = loc(fused[#loc24, #loc25])
#loc94 = loc(fused[#loc26, #loc27])
#loc95 = loc(fused[#loc28, #loc29])
#loc96 = loc(fused[#loc30, #loc31])
#loc97 = loc(fused[#loc32, #loc33])
#loc98 = loc(fused[#loc35, #loc34])
#loc99 = loc(fused[#loc38, #loc36])
#loc100 = loc(fused[#loc39, #loc40])
#loc101 = loc(fused[#loc41, #loc42])
#loc102 = loc(fused[#loc44, #loc40])
#loc103 = loc(fused[#loc45, #loc46])
#loc104 = loc(fused[#loc50, #loc51])
#loc105 = loc(fused[#loc53, #loc54])
#loc106 = loc(fused[#loc55, #loc56])
#loc107 = loc(fused[#loc58, #loc57])
#loc108 = loc(fused[#loc60, #loc59])
#loc109 = loc(fused[#loc61, #loc62])
#loc110 = loc(fused[#loc63, #loc64])
#loc111 = loc(fused[#loc66, #loc62])
#loc112 = loc(fused[#loc67, #loc68])
#loc113 = loc(fused[#loc70, #loc71])
#loc114 = loc(fused[#loc69, #loc72])
#loc115 = loc(fused[#loc74, #loc75, #loc76, #loc68])
#loc116 = loc(fused[#loc77, #loc78])
