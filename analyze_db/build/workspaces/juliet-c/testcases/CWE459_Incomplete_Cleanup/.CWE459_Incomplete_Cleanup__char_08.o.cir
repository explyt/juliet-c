!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE459_Incomplete_Cleanup/CWE459_Incomplete_Cleanup__char_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.good2.filename = #cir.const_array<"goodXXXXXX\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc149)
  cir.global "private" constant cir_private @__const.good1.filename = #cir.const_array<"goodXXXXXX\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc150)
  cir.global "private" constant cir_private @__const.CWE459_Incomplete_Cleanup__char_08_bad.filename = #cir.const_array<"badXXXXXX\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> loc(#loc151)
  cir.func private @mkstemp(!cir.ptr<!s8i>) -> !s32i loc(#loc152)
  cir.func private @fdopen(!s32i, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> extra(#fn_attr) loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"w\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc11)
  cir.func private @fprintf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Temporary file\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc14)
  cir.func private @fclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc155)
  cir.func no_proto @CWE459_Incomplete_Cleanup__char_08_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc158)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc21)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc21)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 10>, !cir.ptr<!cir.array<!s8i x 10>>, ["filename"] {alignment = 1 : i64} loc(#loc151)
          %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pFile"] {alignment = 8 : i64} loc(#loc161)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc", init] {alignment = 4 : i64} loc(#loc162)
          %6 = cir.get_global @__const.CWE459_Incomplete_Cleanup__char_08_bad.filename : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc151)
          cir.copy %6 to %3 : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc151)
          %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc30)
          %8 = cir.call @mkstemp(%7) : (!cir.ptr<!s8i>) -> !s32i loc(#loc31)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc162)
          cir.scope {
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc34)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc36)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc164)
            cir.if %12 {
              %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc38)
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc11)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc11)
              %16 = cir.call @fdopen(%13, %15) : (!s32i, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> extra(#fn_attr) loc(#loc39)
              cir.store %16, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc166)
              cir.scope {
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc44)
                %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
                %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc45)
                %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc168)
                cir.if %20 {
                  %21 = cir.get_global @fprintf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc47)
                  %22 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc48)
                  %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc14)
                  %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc14)
                  %25 = cir.call @fprintf(%22, %24) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc47)
                  %26 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc49)
                  %27 = cir.call @fclose(%26) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc50)
                } loc(#loc169)
              } loc(#loc167)
            } loc(#loc165)
          } loc(#loc163)
        } loc(#loc160)
      } loc(#loc159)
    } loc(#loc157)
    cir.return loc(#loc18)
  } loc(#loc156)
  cir.func no_proto @CWE459_Incomplete_Cleanup__char_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc170)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc59)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
    cir.return %2 : !s32i loc(#loc174)
  } loc(#loc173)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc176)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc179)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc70)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc70)
      cir.if %2 {
        %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["filename"] {alignment = 1 : i64} loc(#loc150)
          %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pFile"] {alignment = 8 : i64} loc(#loc182)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc", init] {alignment = 4 : i64} loc(#loc183)
          %6 = cir.get_global @__const.good1.filename : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc150)
          cir.copy %6 to %3 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc150)
          %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc82)
          %8 = cir.call @mkstemp(%7) : (!cir.ptr<!s8i>) -> !s32i loc(#loc83)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc183)
          cir.scope {
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc87)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc88)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc185)
            cir.if %12 {
              %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc91)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc91)
              %16 = cir.call @fdopen(%13, %15) : (!s32i, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> extra(#fn_attr) loc(#loc92)
              cir.store %16, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc187)
              cir.scope {
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc97)
                %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
                %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc98)
                %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc189)
                cir.if %20 {
                  %21 = cir.get_global @fprintf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc100)
                  %22 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc101)
                  %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc102)
                  %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc102)
                  %25 = cir.call @fprintf(%22, %24) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc100)
                  %26 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc103)
                  %27 = cir.call @fclose(%26) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc104)
                  %28 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc105)
                  %29 = cir.call @unlink(%28) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc106)
                } loc(#loc190)
              } loc(#loc188)
            } loc(#loc186)
          } loc(#loc184)
        } loc(#loc181)
      } loc(#loc180)
    } loc(#loc178)
    cir.return loc(#loc67)
  } loc(#loc177)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc109)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    cir.return %2 : !s32i loc(#loc192)
  } loc(#loc191)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc195)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc115)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc115)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["filename"] {alignment = 1 : i64} loc(#loc149)
          %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pFile"] {alignment = 8 : i64} loc(#loc198)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc", init] {alignment = 4 : i64} loc(#loc199)
          %6 = cir.get_global @__const.good2.filename : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc149)
          cir.copy %6 to %3 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc149)
          %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc124)
          %8 = cir.call @mkstemp(%7) : (!cir.ptr<!s8i>) -> !s32i loc(#loc125)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc199)
          cir.scope {
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc128)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc129)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc130)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc201)
            cir.if %12 {
              %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc133)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc133)
              %16 = cir.call @fdopen(%13, %15) : (!s32i, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> extra(#fn_attr) loc(#loc134)
              cir.store %16, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc203)
              cir.scope {
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc139)
                %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
                %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc140)
                %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc205)
                cir.if %20 {
                  %21 = cir.get_global @fprintf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc142)
                  %22 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc143)
                  %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc144)
                  %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc144)
                  %25 = cir.call @fprintf(%22, %24) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc142)
                  %26 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc145)
                  %27 = cir.call @fclose(%26) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc146)
                  %28 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc147)
                  %29 = cir.call @unlink(%28) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc148)
                } loc(#loc206)
              } loc(#loc204)
            } loc(#loc202)
          } loc(#loc200)
        } loc(#loc197)
      } loc(#loc196)
    } loc(#loc194)
    cir.return loc(#loc112)
  } loc(#loc193)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE459_Incomplete_Cleanup/CWE459_Incomplete_Cleanup__char_08.c":0:0)
#loc1 = loc("CWE459_Incomplete_Cleanup__char_08.c":115:13)
#loc2 = loc("CWE459_Incomplete_Cleanup__char_08.c":115:31)
#loc3 = loc("CWE459_Incomplete_Cleanup__char_08.c":90:13)
#loc4 = loc("CWE459_Incomplete_Cleanup__char_08.c":90:31)
#loc5 = loc("CWE459_Incomplete_Cleanup__char_08.c":57:13)
#loc6 = loc("CWE459_Incomplete_Cleanup__char_08.c":57:31)
#loc7 = loc("/usr/include/stdlib.h":827:1)
#loc8 = loc("/usr/include/stdlib.h":827:39)
#loc9 = loc("/usr/include/stdio.h":299:1)
#loc10 = loc("/usr/include/stdio.h":300:3)
#loc11 = loc("CWE459_Incomplete_Cleanup__char_08.c":63:42)
#loc12 = loc("/usr/include/stdio.h":357:1)
#loc13 = loc("/usr/include/stdio.h":358:45)
#loc14 = loc("CWE459_Incomplete_Cleanup__char_08.c":66:36)
#loc15 = loc("/usr/include/stdio.h":184:1)
#loc16 = loc("/usr/include/stdio.h":184:36)
#loc17 = loc("CWE459_Incomplete_Cleanup__char_08.c":52:1)
#loc18 = loc("CWE459_Incomplete_Cleanup__char_08.c":73:1)
#loc19 = loc("CWE459_Incomplete_Cleanup__char_08.c":54:5)
#loc20 = loc("CWE459_Incomplete_Cleanup__char_08.c":72:5)
#loc21 = loc("CWE459_Incomplete_Cleanup__char_08.c":54:8)
#loc22 = loc("CWE459_Incomplete_Cleanup__char_08.c":54:26)
#loc23 = loc("CWE459_Incomplete_Cleanup__char_08.c":55:5)
#loc24 = loc("CWE459_Incomplete_Cleanup__char_08.c":56:9)
#loc25 = loc("CWE459_Incomplete_Cleanup__char_08.c":71:9)
#loc26 = loc("CWE459_Incomplete_Cleanup__char_08.c":58:13)
#loc27 = loc("CWE459_Incomplete_Cleanup__char_08.c":58:19)
#loc28 = loc("CWE459_Incomplete_Cleanup__char_08.c":60:13)
#loc29 = loc("CWE459_Incomplete_Cleanup__char_08.c":60:44)
#loc30 = loc("CWE459_Incomplete_Cleanup__char_08.c":60:36)
#loc31 = loc("CWE459_Incomplete_Cleanup__char_08.c":60:28)
#loc32 = loc("CWE459_Incomplete_Cleanup__char_08.c":61:13)
#loc33 = loc("CWE459_Incomplete_Cleanup__char_08.c":70:13)
#loc34 = loc("CWE459_Incomplete_Cleanup__char_08.c":61:17)
#loc35 = loc("CWE459_Incomplete_Cleanup__char_08.c":61:30)
#loc36 = loc("CWE459_Incomplete_Cleanup__char_08.c":61:29)
#loc37 = loc("CWE459_Incomplete_Cleanup__char_08.c":62:13)
#loc38 = loc("CWE459_Incomplete_Cleanup__char_08.c":63:32)
#loc39 = loc("CWE459_Incomplete_Cleanup__char_08.c":63:25)
#loc40 = loc("CWE459_Incomplete_Cleanup__char_08.c":63:17)
#loc41 = loc("CWE459_Incomplete_Cleanup__char_08.c":63:45)
#loc42 = loc("CWE459_Incomplete_Cleanup__char_08.c":64:17)
#loc43 = loc("CWE459_Incomplete_Cleanup__char_08.c":69:17)
#loc44 = loc("CWE459_Incomplete_Cleanup__char_08.c":64:21)
#loc45 = loc("CWE459_Incomplete_Cleanup__char_08.c":64:30)
#loc46 = loc("CWE459_Incomplete_Cleanup__char_08.c":65:17)
#loc47 = loc("CWE459_Incomplete_Cleanup__char_08.c":66:21)
#loc48 = loc("CWE459_Incomplete_Cleanup__char_08.c":66:29)
#loc49 = loc("CWE459_Incomplete_Cleanup__char_08.c":67:28)
#loc50 = loc("CWE459_Incomplete_Cleanup__char_08.c":67:21)
#loc51 = loc("CWE459_Incomplete_Cleanup__char_08.c":134:1)
#loc52 = loc("CWE459_Incomplete_Cleanup__char_08.c":138:1)
#loc53 = loc("CWE459_Incomplete_Cleanup__char_08.c":136:5)
#loc54 = loc("CWE459_Incomplete_Cleanup__char_08.c":136:11)
#loc55 = loc("CWE459_Incomplete_Cleanup__char_08.c":137:5)
#loc56 = loc("CWE459_Incomplete_Cleanup__char_08.c":137:11)
#loc57 = loc("CWE459_Incomplete_Cleanup__char_08.c":40:1)
#loc58 = loc("CWE459_Incomplete_Cleanup__char_08.c":43:1)
#loc59 = loc("CWE459_Incomplete_Cleanup__char_08.c":42:12)
#loc60 = loc("CWE459_Incomplete_Cleanup__char_08.c":42:5)
#loc61 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc62 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc63 = loc("CWE459_Incomplete_Cleanup__char_08.c":85:19)
#loc64 = loc("/usr/include/unistd.h":858:1)
#loc65 = loc("/usr/include/unistd.h":858:48)
#loc66 = loc("CWE459_Incomplete_Cleanup__char_08.c":80:1)
#loc67 = loc("CWE459_Incomplete_Cleanup__char_08.c":107:1)
#loc68 = loc("CWE459_Incomplete_Cleanup__char_08.c":82:5)
#loc69 = loc("CWE459_Incomplete_Cleanup__char_08.c":106:5)
#loc70 = loc("CWE459_Incomplete_Cleanup__char_08.c":82:8)
#loc71 = loc("CWE459_Incomplete_Cleanup__char_08.c":82:27)
#loc72 = loc("CWE459_Incomplete_Cleanup__char_08.c":83:5)
#loc73 = loc("CWE459_Incomplete_Cleanup__char_08.c":86:5)
#loc74 = loc("CWE459_Incomplete_Cleanup__char_08.c":88:5)
#loc75 = loc("CWE459_Incomplete_Cleanup__char_08.c":85:9)
#loc76 = loc("CWE459_Incomplete_Cleanup__char_08.c":89:9)
#loc77 = loc("CWE459_Incomplete_Cleanup__char_08.c":105:9)
#loc78 = loc("CWE459_Incomplete_Cleanup__char_08.c":91:13)
#loc79 = loc("CWE459_Incomplete_Cleanup__char_08.c":91:19)
#loc80 = loc("CWE459_Incomplete_Cleanup__char_08.c":93:13)
#loc81 = loc("CWE459_Incomplete_Cleanup__char_08.c":93:44)
#loc82 = loc("CWE459_Incomplete_Cleanup__char_08.c":93:36)
#loc83 = loc("CWE459_Incomplete_Cleanup__char_08.c":93:28)
#loc84 = loc("CWE459_Incomplete_Cleanup__char_08.c":94:13)
#loc85 = loc("CWE459_Incomplete_Cleanup__char_08.c":104:13)
#loc86 = loc("CWE459_Incomplete_Cleanup__char_08.c":94:17)
#loc87 = loc("CWE459_Incomplete_Cleanup__char_08.c":94:30)
#loc88 = loc("CWE459_Incomplete_Cleanup__char_08.c":94:29)
#loc89 = loc("CWE459_Incomplete_Cleanup__char_08.c":95:13)
#loc90 = loc("CWE459_Incomplete_Cleanup__char_08.c":96:32)
#loc91 = loc("CWE459_Incomplete_Cleanup__char_08.c":96:42)
#loc92 = loc("CWE459_Incomplete_Cleanup__char_08.c":96:25)
#loc93 = loc("CWE459_Incomplete_Cleanup__char_08.c":96:17)
#loc94 = loc("CWE459_Incomplete_Cleanup__char_08.c":96:45)
#loc95 = loc("CWE459_Incomplete_Cleanup__char_08.c":97:17)
#loc96 = loc("CWE459_Incomplete_Cleanup__char_08.c":103:17)
#loc97 = loc("CWE459_Incomplete_Cleanup__char_08.c":97:21)
#loc98 = loc("CWE459_Incomplete_Cleanup__char_08.c":97:30)
#loc99 = loc("CWE459_Incomplete_Cleanup__char_08.c":98:17)
#loc100 = loc("CWE459_Incomplete_Cleanup__char_08.c":99:21)
#loc101 = loc("CWE459_Incomplete_Cleanup__char_08.c":99:29)
#loc102 = loc("CWE459_Incomplete_Cleanup__char_08.c":99:36)
#loc103 = loc("CWE459_Incomplete_Cleanup__char_08.c":100:28)
#loc104 = loc("CWE459_Incomplete_Cleanup__char_08.c":100:21)
#loc105 = loc("CWE459_Incomplete_Cleanup__char_08.c":102:28)
#loc106 = loc("CWE459_Incomplete_Cleanup__char_08.c":102:21)
#loc107 = loc("CWE459_Incomplete_Cleanup__char_08.c":45:1)
#loc108 = loc("CWE459_Incomplete_Cleanup__char_08.c":48:1)
#loc109 = loc("CWE459_Incomplete_Cleanup__char_08.c":47:12)
#loc110 = loc("CWE459_Incomplete_Cleanup__char_08.c":47:5)
#loc111 = loc("CWE459_Incomplete_Cleanup__char_08.c":110:1)
#loc112 = loc("CWE459_Incomplete_Cleanup__char_08.c":132:1)
#loc113 = loc("CWE459_Incomplete_Cleanup__char_08.c":112:5)
#loc114 = loc("CWE459_Incomplete_Cleanup__char_08.c":131:5)
#loc115 = loc("CWE459_Incomplete_Cleanup__char_08.c":112:8)
#loc116 = loc("CWE459_Incomplete_Cleanup__char_08.c":112:26)
#loc117 = loc("CWE459_Incomplete_Cleanup__char_08.c":113:5)
#loc118 = loc("CWE459_Incomplete_Cleanup__char_08.c":114:9)
#loc119 = loc("CWE459_Incomplete_Cleanup__char_08.c":130:9)
#loc120 = loc("CWE459_Incomplete_Cleanup__char_08.c":116:13)
#loc121 = loc("CWE459_Incomplete_Cleanup__char_08.c":116:19)
#loc122 = loc("CWE459_Incomplete_Cleanup__char_08.c":118:13)
#loc123 = loc("CWE459_Incomplete_Cleanup__char_08.c":118:44)
#loc124 = loc("CWE459_Incomplete_Cleanup__char_08.c":118:36)
#loc125 = loc("CWE459_Incomplete_Cleanup__char_08.c":118:28)
#loc126 = loc("CWE459_Incomplete_Cleanup__char_08.c":119:13)
#loc127 = loc("CWE459_Incomplete_Cleanup__char_08.c":129:13)
#loc128 = loc("CWE459_Incomplete_Cleanup__char_08.c":119:17)
#loc129 = loc("CWE459_Incomplete_Cleanup__char_08.c":119:30)
#loc130 = loc("CWE459_Incomplete_Cleanup__char_08.c":119:29)
#loc131 = loc("CWE459_Incomplete_Cleanup__char_08.c":120:13)
#loc132 = loc("CWE459_Incomplete_Cleanup__char_08.c":121:32)
#loc133 = loc("CWE459_Incomplete_Cleanup__char_08.c":121:42)
#loc134 = loc("CWE459_Incomplete_Cleanup__char_08.c":121:25)
#loc135 = loc("CWE459_Incomplete_Cleanup__char_08.c":121:17)
#loc136 = loc("CWE459_Incomplete_Cleanup__char_08.c":121:45)
#loc137 = loc("CWE459_Incomplete_Cleanup__char_08.c":122:17)
#loc138 = loc("CWE459_Incomplete_Cleanup__char_08.c":128:17)
#loc139 = loc("CWE459_Incomplete_Cleanup__char_08.c":122:21)
#loc140 = loc("CWE459_Incomplete_Cleanup__char_08.c":122:30)
#loc141 = loc("CWE459_Incomplete_Cleanup__char_08.c":123:17)
#loc142 = loc("CWE459_Incomplete_Cleanup__char_08.c":124:21)
#loc143 = loc("CWE459_Incomplete_Cleanup__char_08.c":124:29)
#loc144 = loc("CWE459_Incomplete_Cleanup__char_08.c":124:36)
#loc145 = loc("CWE459_Incomplete_Cleanup__char_08.c":125:28)
#loc146 = loc("CWE459_Incomplete_Cleanup__char_08.c":125:21)
#loc147 = loc("CWE459_Incomplete_Cleanup__char_08.c":127:28)
#loc148 = loc("CWE459_Incomplete_Cleanup__char_08.c":127:21)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc152 = loc(fused[#loc7, #loc8])
#loc153 = loc(fused[#loc9, #loc10])
#loc154 = loc(fused[#loc12, #loc13])
#loc155 = loc(fused[#loc15, #loc16])
#loc156 = loc(fused[#loc17, #loc18])
#loc157 = loc(fused[#loc19, #loc20])
#loc158 = loc(fused[#loc21, #loc22])
#loc159 = loc(fused[#loc23, #loc20])
#loc160 = loc(fused[#loc24, #loc25])
#loc161 = loc(fused[#loc26, #loc27])
#loc162 = loc(fused[#loc28, #loc29])
#loc163 = loc(fused[#loc32, #loc33])
#loc164 = loc(fused[#loc34, #loc35])
#loc165 = loc(fused[#loc37, #loc33])
#loc166 = loc(fused[#loc40, #loc41])
#loc167 = loc(fused[#loc42, #loc43])
#loc168 = loc(fused[#loc44, #loc45])
#loc169 = loc(fused[#loc46, #loc43])
#loc170 = loc(fused[#loc51, #loc52])
#loc171 = loc(fused[#loc53, #loc54])
#loc172 = loc(fused[#loc55, #loc56])
#loc173 = loc(fused[#loc57, #loc58])
#loc174 = loc(fused[#loc60, #loc59])
#loc175 = loc(fused[#loc61, #loc62])
#loc176 = loc(fused[#loc64, #loc65])
#loc177 = loc(fused[#loc66, #loc67])
#loc178 = loc(fused[#loc68, #loc69])
#loc179 = loc(fused[#loc70, #loc71])
#loc180 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc181 = loc(fused[#loc76, #loc77])
#loc182 = loc(fused[#loc78, #loc79])
#loc183 = loc(fused[#loc80, #loc81])
#loc184 = loc(fused[#loc84, #loc85])
#loc185 = loc(fused[#loc86, #loc87])
#loc186 = loc(fused[#loc89, #loc85])
#loc187 = loc(fused[#loc93, #loc94])
#loc188 = loc(fused[#loc95, #loc96])
#loc189 = loc(fused[#loc97, #loc98])
#loc190 = loc(fused[#loc99, #loc96])
#loc191 = loc(fused[#loc107, #loc108])
#loc192 = loc(fused[#loc110, #loc109])
#loc193 = loc(fused[#loc111, #loc112])
#loc194 = loc(fused[#loc113, #loc114])
#loc195 = loc(fused[#loc115, #loc116])
#loc196 = loc(fused[#loc117, #loc114])
#loc197 = loc(fused[#loc118, #loc119])
#loc198 = loc(fused[#loc120, #loc121])
#loc199 = loc(fused[#loc122, #loc123])
#loc200 = loc(fused[#loc126, #loc127])
#loc201 = loc(fused[#loc128, #loc129])
#loc202 = loc(fused[#loc131, #loc127])
#loc203 = loc(fused[#loc135, #loc136])
#loc204 = loc(fused[#loc137, #loc138])
#loc205 = loc(fused[#loc139, #loc140])
#loc206 = loc(fused[#loc141, #loc138])
