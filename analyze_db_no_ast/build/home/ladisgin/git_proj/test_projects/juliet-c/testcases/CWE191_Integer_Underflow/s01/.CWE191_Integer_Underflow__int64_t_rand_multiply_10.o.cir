!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc190)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc191)
  cir.func private  @printLongLongLine(!s64i) loc(#loc192)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_rand_multiply_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc195)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc190)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc17)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc17)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc17)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc17)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc17)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc17)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc17)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc17)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc17)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc17)
          cir.yield %32 : !u64i loc(#loc17)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc17)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc17)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc17)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc17)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc17)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc17)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc17)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc17)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc17)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc17)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc17)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc17)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc17)
          cir.yield %36 : !u64i loc(#loc17)
        }) : (!cir.bool) -> !u64i loc(#loc17)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc17)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc198)
      } loc(#loc197)
    } loc(#loc196)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc190)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc25)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc26)
          %8 = cir.cmp(lt, %5, %7) : !s64i, !s32i loc(#loc202)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc27)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc204)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc30)
            %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc31)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc204)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc32)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc33)
          } loc(#loc203)
        } loc(#loc201)
      } loc(#loc200)
    } loc(#loc199)
    cir.return loc(#loc8)
  } loc(#loc193)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_rand_multiply_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc205)
  cir.global "private"  external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc210)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc48)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc54)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc190)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc58)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc60)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc60)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc60)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc60)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc60)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc60)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc60)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc60)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc60)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc60)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc60)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc60)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc60)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc60)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc60)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc60)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc60)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc60)
          cir.yield %32 : !u64i loc(#loc60)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc60)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc60)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc60)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc60)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc60)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc60)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc60)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc60)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc60)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc60)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc60)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc60)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc60)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc60)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc60)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc60)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc60)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc60)
          cir.yield %36 : !u64i loc(#loc60)
        }) : (!cir.bool) -> !u64i loc(#loc60)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc60)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc217)
      } loc(#loc216)
    } loc(#loc215)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc210)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc64)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc64)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc71)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc72)
          %8 = cir.cmp(lt, %5, %7) : !s64i, !s32i loc(#loc221)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc73)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
              %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc78)
              %12 = cir.unary(minus, %11) : !s64i, !s64i loc(#loc78)
              %13 = cir.const #cir.int<1> : !s64i loc(#loc78)
              %14 = cir.binop(sub, %12, %13) nsw : !s64i loc(#loc78)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc79)
              %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc79)
              %17 = cir.binop(div, %14, %16) : !s64i loc(#loc224)
              %18 = cir.cmp(gt, %10, %17) : !s64i, !s32i loc(#loc225)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc81)
              cir.if %19 {
                %20 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc227)
                %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc86)
                %23 = cir.cast(integral, %22 : !s32i), !s64i loc(#loc86)
                %24 = cir.binop(mul, %21, %23) nsw : !s64i loc(#loc87)
                cir.store %24, %20 : !s64i, !cir.ptr<!s64i> loc(#loc227)
                %25 = cir.load %20 : !cir.ptr<!s64i>, !s64i loc(#loc88)
                cir.call @printLongLongLine(%25) : (!s64i) -> () loc(#loc89)
              } else {
                %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc49)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc49)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc90)
              } loc(#loc226)
            } loc(#loc223)
          } loc(#loc222)
        } loc(#loc220)
      } loc(#loc219)
    } loc(#loc218)
    cir.return loc(#loc51)
  } loc(#loc212)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc95)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc230)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc190)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc99)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc101)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc101)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc101)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc101)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc101)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc101)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc101)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc101)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc101)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc101)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc101)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc101)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc101)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc101)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc101)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc101)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc101)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc101)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc101)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc101)
          cir.yield %32 : !u64i loc(#loc101)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc101)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc101)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc101)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc101)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc101)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc101)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc101)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc101)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc101)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc101)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc101)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc101)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc101)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc101)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc101)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc101)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc101)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc101)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc101)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc101)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc101)
          cir.yield %36 : !u64i loc(#loc101)
        }) : (!cir.bool) -> !u64i loc(#loc101)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc101)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc233)
      } loc(#loc232)
    } loc(#loc231)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc190)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc105)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc109)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc110)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc110)
          %8 = cir.cmp(lt, %5, %7) : !s64i, !s32i loc(#loc237)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc111)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc115)
              %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc116)
              %12 = cir.unary(minus, %11) : !s64i, !s64i loc(#loc116)
              %13 = cir.const #cir.int<1> : !s64i loc(#loc116)
              %14 = cir.binop(sub, %12, %13) nsw : !s64i loc(#loc116)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc117)
              %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc117)
              %17 = cir.binop(div, %14, %16) : !s64i loc(#loc240)
              %18 = cir.cmp(gt, %10, %17) : !s64i, !s32i loc(#loc241)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc119)
              cir.if %19 {
                %20 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc243)
                %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc125)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc124)
                %23 = cir.cast(integral, %22 : !s32i), !s64i loc(#loc124)
                %24 = cir.binop(mul, %21, %23) nsw : !s64i loc(#loc125)
                cir.store %24, %20 : !s64i, !cir.ptr<!s64i> loc(#loc243)
                %25 = cir.load %20 : !cir.ptr<!s64i>, !s64i loc(#loc126)
                cir.call @printLongLongLine(%25) : (!s64i) -> () loc(#loc127)
              } else {
                %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc128)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc128)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc129)
              } loc(#loc242)
            } loc(#loc239)
          } loc(#loc238)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc234)
    cir.return loc(#loc92)
  } loc(#loc228)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc245)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc134)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc246)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc210)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc138)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc143)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc144)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc145)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc145)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc249)
      } loc(#loc248)
    } loc(#loc247)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc190)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc149)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc153)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc154)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc154)
          %8 = cir.cmp(lt, %5, %7) : !s64i, !s32i loc(#loc253)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc155)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc255)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc159)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc158)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc158)
            %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc159)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc255)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc160)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc161)
          } loc(#loc254)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc250)
    cir.return loc(#loc131)
  } loc(#loc244)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc166)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc258)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc190)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc170)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc170)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc172)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc173)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc173)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc261)
      } loc(#loc260)
    } loc(#loc259)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc190)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc177)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc177)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc181)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc182)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc182)
          %8 = cir.cmp(lt, %5, %7) : !s64i, !s32i loc(#loc265)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc183)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc267)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc187)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc186)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc186)
            %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc187)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc267)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc188)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc189)
          } loc(#loc266)
        } loc(#loc264)
      } loc(#loc263)
    } loc(#loc262)
    cir.return loc(#loc163)
  } loc(#loc256)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":22:1)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":40:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":24:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":25:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":30:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":26:8)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":27:5)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":29:25)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":29:9)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":31:5)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":39:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":31:8)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":32:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":33:9)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":38:9)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":33:12)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":33:19)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":33:17)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":34:9)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":36:13)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":36:37)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":36:30)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":37:31)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":37:13)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":154:1)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":160:1)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":156:5)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":156:14)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":157:5)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":157:14)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":158:5)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":158:14)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":159:5)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":159:14)
#loc44 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc45 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":59:19)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":73:27)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":47:1)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":77:1)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":49:5)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":49:13)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":50:12)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":50:5)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":51:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":55:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":51:8)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":52:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":54:25)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":54:9)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":56:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":76:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":56:8)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":57:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":60:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":62:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":59:9)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":63:9)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":75:9)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":63:12)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":63:19)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":63:17)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":64:9)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":66:13)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":74:13)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":66:17)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":66:25)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":66:35)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":66:36)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":66:22)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":67:13)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":70:13)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":72:13)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":68:17)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":68:41)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":68:34)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":69:35)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":69:17)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":73:17)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":80:1)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":105:1)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":82:5)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":82:13)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":83:12)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":83:5)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":84:5)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":88:5)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":84:8)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":85:5)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":87:25)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":87:9)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":89:5)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":104:5)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":89:8)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":90:5)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":91:9)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":103:9)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":91:12)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":91:19)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":91:17)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":92:9)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":94:13)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":102:13)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":94:17)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":94:25)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":94:35)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":94:36)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":94:22)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":95:13)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":98:13)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":100:13)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":96:17)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":96:41)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":96:34)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":97:35)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":97:17)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":101:27)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":101:17)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":108:1)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":131:1)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":110:5)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":110:13)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":111:12)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":111:5)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":112:5)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":121:5)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":112:8)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":113:5)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":116:5)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":118:5)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":115:19)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":115:9)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":120:17)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":120:16)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":120:9)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":122:5)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":130:5)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":122:8)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":123:5)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":124:9)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":129:9)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":124:12)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":124:19)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":124:17)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":125:9)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":127:13)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":127:37)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":127:30)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":128:31)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":128:13)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":134:1)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":152:1)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":136:5)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":136:13)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":137:12)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":137:5)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":138:5)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":142:5)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":138:8)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":139:5)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":141:17)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":141:16)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":141:9)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":143:5)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":151:5)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":143:8)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":144:5)
#loc179 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":145:9)
#loc180 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":150:9)
#loc181 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":145:12)
#loc182 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":145:19)
#loc183 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":145:17)
#loc184 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":146:9)
#loc185 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":148:13)
#loc186 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":148:37)
#loc187 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":148:30)
#loc188 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":149:31)
#loc189 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_10.c":149:13)
#loc190 = loc(fused[#loc1, #loc2])
#loc191 = loc(fused[#loc3, #loc4])
#loc192 = loc(fused[#loc5, #loc6])
#loc193 = loc(fused[#loc7, #loc8])
#loc194 = loc(fused[#loc9, #loc10])
#loc195 = loc(fused[#loc12, #loc11])
#loc196 = loc(fused[#loc13, #loc14])
#loc197 = loc(fused[#loc16, #loc14])
#loc198 = loc(fused[#loc18, #loc17])
#loc199 = loc(fused[#loc19, #loc20])
#loc200 = loc(fused[#loc22, #loc20])
#loc201 = loc(fused[#loc23, #loc24])
#loc202 = loc(fused[#loc25, #loc26])
#loc203 = loc(fused[#loc28, #loc24])
#loc204 = loc(fused[#loc29, #loc30])
#loc205 = loc(fused[#loc34, #loc35])
#loc206 = loc(fused[#loc36, #loc37])
#loc207 = loc(fused[#loc38, #loc39])
#loc208 = loc(fused[#loc40, #loc41])
#loc209 = loc(fused[#loc42, #loc43])
#loc210 = loc(fused[#loc44, #loc45])
#loc211 = loc(fused[#loc46, #loc47])
#loc212 = loc(fused[#loc50, #loc51])
#loc213 = loc(fused[#loc52, #loc53])
#loc214 = loc(fused[#loc55, #loc54])
#loc215 = loc(fused[#loc56, #loc57])
#loc216 = loc(fused[#loc59, #loc57])
#loc217 = loc(fused[#loc61, #loc60])
#loc218 = loc(fused[#loc62, #loc63])
#loc219 = loc(fused[#loc65, #loc66, #loc67, #loc63])
#loc220 = loc(fused[#loc69, #loc70])
#loc221 = loc(fused[#loc71, #loc72])
#loc222 = loc(fused[#loc74, #loc70])
#loc223 = loc(fused[#loc75, #loc76])
#loc224 = loc(fused[#loc78, #loc79])
#loc225 = loc(fused[#loc77, #loc80])
#loc226 = loc(fused[#loc82, #loc83, #loc84, #loc76])
#loc227 = loc(fused[#loc85, #loc86])
#loc228 = loc(fused[#loc91, #loc92])
#loc229 = loc(fused[#loc93, #loc94])
#loc230 = loc(fused[#loc96, #loc95])
#loc231 = loc(fused[#loc97, #loc98])
#loc232 = loc(fused[#loc100, #loc98])
#loc233 = loc(fused[#loc102, #loc101])
#loc234 = loc(fused[#loc103, #loc104])
#loc235 = loc(fused[#loc106, #loc104])
#loc236 = loc(fused[#loc107, #loc108])
#loc237 = loc(fused[#loc109, #loc110])
#loc238 = loc(fused[#loc112, #loc108])
#loc239 = loc(fused[#loc113, #loc114])
#loc240 = loc(fused[#loc116, #loc117])
#loc241 = loc(fused[#loc115, #loc118])
#loc242 = loc(fused[#loc120, #loc121, #loc122, #loc114])
#loc243 = loc(fused[#loc123, #loc124])
#loc244 = loc(fused[#loc130, #loc131])
#loc245 = loc(fused[#loc132, #loc133])
#loc246 = loc(fused[#loc135, #loc134])
#loc247 = loc(fused[#loc136, #loc137])
#loc248 = loc(fused[#loc139, #loc140, #loc141, #loc137])
#loc249 = loc(fused[#loc146, #loc144])
#loc250 = loc(fused[#loc147, #loc148])
#loc251 = loc(fused[#loc150, #loc148])
#loc252 = loc(fused[#loc151, #loc152])
#loc253 = loc(fused[#loc153, #loc154])
#loc254 = loc(fused[#loc156, #loc152])
#loc255 = loc(fused[#loc157, #loc158])
#loc256 = loc(fused[#loc162, #loc163])
#loc257 = loc(fused[#loc164, #loc165])
#loc258 = loc(fused[#loc167, #loc166])
#loc259 = loc(fused[#loc168, #loc169])
#loc260 = loc(fused[#loc171, #loc169])
#loc261 = loc(fused[#loc174, #loc172])
#loc262 = loc(fused[#loc175, #loc176])
#loc263 = loc(fused[#loc178, #loc176])
#loc264 = loc(fused[#loc179, #loc180])
#loc265 = loc(fused[#loc181, #loc182])
#loc266 = loc(fused[#loc184, #loc180])
#loc267 = loc(fused[#loc185, #loc186])
