!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":23:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":23:29)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":67:25)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":67:33)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":47:25)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":47:33)
#loc110 = loc(fused[#loc11, #loc12])
#loc123 = loc(fused[#loc45, #loc46])
#loc137 = loc(fused[#loc82, #loc83])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc105)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc107)
  cir.func private @printLongLongLine(!s64i) loc(#loc108)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc11, #loc12])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc110)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc13)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc17)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc17)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !cir.bool loc(#loc112)
      cir.if %4 {
        %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc114)
        %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc21)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc20)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc20)
        %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc21)
        cir.store %9, %5 : !s64i, !cir.ptr<!s64i> loc(#loc114)
        %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc22)
        cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc23)
      } loc(#loc113)
    } loc(#loc111)
    cir.return loc(#loc10)
  } loc(#loc109)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc116)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc28)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc117)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc30)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc106)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc107)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc107)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc30)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
    cir.call @badSink(%8) : (!s64i) -> () loc(#loc33)
    cir.return loc(#loc25)
  } loc(#loc115)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc118)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc45, #loc46])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc123)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc47)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc51)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc51)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !cir.bool loc(#loc125)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc55)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc56)
          %7 = cir.const #cir.int<2> : !s32i loc(#loc57)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc57)
          %9 = cir.binop(div, %6, %8) : !s64i loc(#loc128)
          %10 = cir.cmp(lt, %5, %9) : !s64i, !cir.bool loc(#loc129)
          cir.if %10 {
            %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc131)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc64)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc63)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc63)
            %15 = cir.binop(mul, %12, %14) nsw : !s64i loc(#loc64)
            cir.store %15, %11 : !s64i, !cir.ptr<!s64i> loc(#loc131)
            %16 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc65)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc66)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
          } loc(#loc130)
        } loc(#loc127)
      } loc(#loc126)
    } loc(#loc124)
    cir.return loc(#loc44)
  } loc(#loc122)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc72)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc134)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc74)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc106)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc75)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc135)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc135)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc74)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc78)
    cir.call @goodB2GSink(%8) : (!s64i) -> () loc(#loc79)
    cir.return loc(#loc69)
  } loc(#loc132)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc82, #loc83])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc137)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc84)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc88)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc88)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !cir.bool loc(#loc139)
      cir.if %4 {
        %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc141)
        %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc92)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc91)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc91)
        %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc92)
        cir.store %9, %5 : !s64i, !cir.ptr<!s64i> loc(#loc141)
        %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc93)
        cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc94)
      } loc(#loc140)
    } loc(#loc138)
    cir.return loc(#loc81)
  } loc(#loc136)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc143)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc99)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc144)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc101)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc101)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc145)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    cir.call @goodG2BSink(%4) : (!s64i) -> () loc(#loc104)
    cir.return loc(#loc96)
  } loc(#loc142)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":38:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":38:24)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":31:1)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":24:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":25:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":30:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":25:8)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":25:15)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":26:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":28:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":28:33)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":28:26)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":29:27)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":29:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":33:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":40:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":35:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":35:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":36:12)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":36:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":38:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":38:13)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":39:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":39:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":93:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":97:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":95:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":95:13)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":96:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":96:13)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":79:23)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":67:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":82:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":68:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":69:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":81:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":69:8)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":69:15)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":70:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":72:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":80:9)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":72:13)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":72:21)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":72:31)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":72:32)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":73:9)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":76:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":78:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":74:13)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":74:37)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":74:30)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":75:31)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":75:13)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":79:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":84:1)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":91:1)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":86:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":86:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":87:12)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":87:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":89:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":89:13)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":89:20)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":89:24)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":90:17)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":90:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":47:1)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":55:1)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":48:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":49:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":54:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":49:8)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":49:15)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":50:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":52:9)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":52:33)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":52:26)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":53:27)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":53:9)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":57:1)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":64:1)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":59:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":59:13)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":60:12)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":60:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":62:12)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":62:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":63:17)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_41.c":63:5)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc7, #loc8])
#loc109 = loc(fused[#loc9, #loc10])
#loc111 = loc(fused[#loc14, #loc15])
#loc112 = loc(fused[#loc16, #loc17])
#loc113 = loc(fused[#loc18, #loc15])
#loc114 = loc(fused[#loc19, #loc20])
#loc115 = loc(fused[#loc24, #loc25])
#loc116 = loc(fused[#loc26, #loc27])
#loc117 = loc(fused[#loc29, #loc28])
#loc118 = loc(fused[#loc34, #loc35])
#loc119 = loc(fused[#loc36, #loc37])
#loc120 = loc(fused[#loc38, #loc39])
#loc121 = loc(fused[#loc40, #loc41])
#loc122 = loc(fused[#loc43, #loc44])
#loc124 = loc(fused[#loc48, #loc49])
#loc125 = loc(fused[#loc50, #loc51])
#loc126 = loc(fused[#loc52, #loc49])
#loc127 = loc(fused[#loc53, #loc54])
#loc128 = loc(fused[#loc56, #loc57])
#loc129 = loc(fused[#loc55, #loc58])
#loc130 = loc(fused[#loc59, #loc60, #loc61, #loc54])
#loc131 = loc(fused[#loc62, #loc63])
#loc132 = loc(fused[#loc68, #loc69])
#loc133 = loc(fused[#loc70, #loc71])
#loc134 = loc(fused[#loc73, #loc72])
#loc135 = loc(fused[#loc76, #loc77])
#loc136 = loc(fused[#loc80, #loc81])
#loc138 = loc(fused[#loc85, #loc86])
#loc139 = loc(fused[#loc87, #loc88])
#loc140 = loc(fused[#loc89, #loc86])
#loc141 = loc(fused[#loc90, #loc91])
#loc142 = loc(fused[#loc95, #loc96])
#loc143 = loc(fused[#loc97, #loc98])
#loc144 = loc(fused[#loc100, #loc99])
#loc145 = loc(fused[#loc102, #loc101])
