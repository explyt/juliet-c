!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":124:10)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":124:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":124:20)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":124:32)
#loc238 = loc(fused[#loc79, #loc80])
#loc239 = loc(fused[#loc81, #loc82])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc207)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc208)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc209)
  cir.func private @printIntLine(!s32i) loc(#loc210)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc211)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc213)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc19)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc207)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc25)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc26)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc26)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc219)
    cir.store %11, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc220)
    cir.br ^bb3 loc(#loc221)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc32)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc222)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc223)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc36)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb5 loc(#loc30)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc224)
  ^bb9:  // pred: ^bb8
    %19 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc213)
    cir.store %19, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc213)
    cir.br ^bb10 loc(#loc225)
  ^bb10:  // pred: ^bb9
    %20 = cir.const #cir.int<0> : !s32i loc(#loc41)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc41)
    cir.store %21, %1 : !u64i, !cir.ptr<!u64i> loc(#loc226)
    cir.br ^bb11 loc(#loc225)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %22 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc43)
    %23 = cir.const #cir.int<10> : !s32i loc(#loc44)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc44)
    %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc227)
    cir.brcond %25 ^bb12, ^bb16 loc(#loc45)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc228)
  ^bb13:  // pred: ^bb12
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc47)
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc48)
    %28 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc48)
    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %31 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc50)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc51)
    cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.br ^bb14 loc(#loc40)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc40)
  ^bb15:  // pred: ^bb14
    %33 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc53)
    %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc54)
    cir.store %34, %1 : !u64i, !cir.ptr<!u64i> loc(#loc230)
    cir.br ^bb11 loc(#loc225)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc40)
  ^bb17:  // pred: ^bb16
    %35 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc57)
    %38 = cir.load %37 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc58)
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc59)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc60)
    cir.br ^bb18 loc(#loc38)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc12)
  } loc(#loc212)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc231)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc234)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc235)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc76)
  cir.func @main(%arg0: !s32i loc(fused[#loc79, #loc80]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc239)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc85)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc85)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc86)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05_good() : () -> () loc(#loc88)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc75)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc241)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05_bad() : () -> () loc(#loc92)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc242)
    cir.return %17 : !s32i loc(#loc242)
  } loc(#loc237)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc243)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc245)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc246)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc108)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc248)
    cir.br ^bb1 loc(#loc249)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc243)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc250)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb8 loc(#loc114)
  ^bb3:  // pred: ^bb1
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc117)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc118)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc118)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc251)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc252)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc253)
    cir.store %15, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc254)
    cir.br ^bb4 loc(#loc255)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc126)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc256)
    cir.brcond %19 ^bb5, ^bb6 loc(#loc257)
  ^bb5:  // pred: ^bb4
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc130)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc124)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc111)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc111)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc258)
  ^bb10:  // pred: ^bb9
    %23 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc245)
    cir.store %23, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc245)
    cir.br ^bb11 loc(#loc259)
  ^bb11:  // pred: ^bb10
    %24 = cir.const #cir.int<0> : !s32i loc(#loc135)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc135)
    cir.store %25, %1 : !u64i, !cir.ptr<!u64i> loc(#loc260)
    cir.br ^bb12 loc(#loc259)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc137)
    %27 = cir.const #cir.int<10> : !s32i loc(#loc138)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc138)
    %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc261)
    cir.brcond %29 ^bb13, ^bb17 loc(#loc139)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc262)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc141)
    %31 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc142)
    %32 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %30 : !u64i), !cir.ptr<!s32i> loc(#loc142)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
    %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc144)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !u64i), !cir.ptr<!s32i> loc(#loc145)
    cir.store %33, %36 : !s32i, !cir.ptr<!s32i> loc(#loc263)
    cir.br ^bb15 loc(#loc134)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc134)
  ^bb16:  // pred: ^bb15
    %37 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc147)
    %38 = cir.unary(inc, %37) : !u64i, !u64i loc(#loc148)
    cir.store %38, %1 : !u64i, !cir.ptr<!u64i> loc(#loc264)
    cir.br ^bb12 loc(#loc259)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc134)
  ^bb18:  // pred: ^bb17
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
    %40 = cir.const #cir.int<0> : !s32i loc(#loc150)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s32i>, %40 : !s32i), !cir.ptr<!s32i> loc(#loc151)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.call @printIntLine(%42) : (!s32i) -> () loc(#loc152)
    %43 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc153)
    cir.call @free(%44) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc154)
    cir.br ^bb19 loc(#loc132)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc101)
  } loc(#loc244)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc266)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc267)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc268)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc163)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc269)
    cir.br ^bb1 loc(#loc270)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc207)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc167)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc271)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc169)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc170)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc170)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc272)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc273)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc169)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc274)
    cir.store %13, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc275)
    cir.br ^bb3 loc(#loc276)
  ^bb3:  // pred: ^bb2
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc178)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc178)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc277)
    cir.brcond %17 ^bb4, ^bb5 loc(#loc278)
  ^bb4:  // pred: ^bb3
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc180)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc182)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc180)
    cir.br ^bb5 loc(#loc176)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc176)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc166)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc166)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc279)
  ^bb9:  // pred: ^bb8
    %21 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc266)
    cir.store %21, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc266)
    cir.br ^bb10 loc(#loc280)
  ^bb10:  // pred: ^bb9
    %22 = cir.const #cir.int<0> : !s32i loc(#loc187)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc187)
    cir.store %23, %1 : !u64i, !cir.ptr<!u64i> loc(#loc281)
    cir.br ^bb11 loc(#loc280)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %24 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc189)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc190)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc190)
    %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc282)
    cir.brcond %27 ^bb12, ^bb16 loc(#loc191)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc283)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc193)
    %29 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc194)
    %30 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc194)
    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc195)
    %33 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc196)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !u64i), !cir.ptr<!s32i> loc(#loc197)
    cir.store %31, %34 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    cir.br ^bb14 loc(#loc186)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc186)
  ^bb15:  // pred: ^bb14
    %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc199)
    %36 = cir.unary(inc, %35) : !u64i, !u64i loc(#loc200)
    cir.store %36, %1 : !u64i, !cir.ptr<!u64i> loc(#loc285)
    cir.br ^bb11 loc(#loc280)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc186)
  ^bb17:  // pred: ^bb16
    %37 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc201)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc202)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!s32i>, %38 : !s32i), !cir.ptr<!s32i> loc(#loc203)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc204)
    %41 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc205)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc205)
    cir.call @free(%42) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc206)
    cir.br ^bb18 loc(#loc184)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc156)
  } loc(#loc265)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":28:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":49:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":39:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":39:28)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":40:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":40:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":30:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":30:11)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":31:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":31:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":32:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":37:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":32:8)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":33:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":35:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":35:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":35:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":35:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":36:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":36:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":36:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":36:21)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":36:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":36:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":36:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":36:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":38:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":48:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":42:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":45:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":42:18)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":42:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":42:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":42:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":42:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":43:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":44:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":44:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":44:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":44:18)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":44:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":44:31)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":42:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":42:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":46:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":46:27)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":46:28)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":46:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":47:14)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":47:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":108:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":112:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":110:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":110:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":111:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":111:14)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":129:15)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":131:15)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":134:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":136:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":124:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":139:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":125:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":127:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":127:22)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":127:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":129:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":130:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":130:60)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":131:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":134:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":135:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":135:59)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":136:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":138:12)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":138:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":24:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":24:26)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":63:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":56:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":82:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":72:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":72:28)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":73:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":73:16)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":58:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":58:11)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":59:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":59:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":60:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":70:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":60:8)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":61:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":64:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":66:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":63:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":68:23)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":68:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":68:33)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":68:43)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":68:44)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":68:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":69:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":69:37)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":69:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":69:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":69:27)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":69:28)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":69:34)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":69:33)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":71:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":81:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":75:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":78:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":75:18)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":75:14)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":75:21)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":75:25)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":75:23)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":76:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":77:30)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":77:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":77:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":77:18)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":77:19)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":77:31)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":75:30)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":75:29)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":79:22)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":79:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":79:28)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":79:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":80:14)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":80:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":85:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":106:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":96:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":96:28)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":97:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":97:16)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":87:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":87:11)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":88:12)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":88:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":89:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":94:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":89:8)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":90:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":92:23)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":92:30)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":92:33)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":92:43)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":92:44)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":92:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":93:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":93:37)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":93:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":93:21)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":93:27)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":93:28)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":93:34)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":93:33)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":95:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":105:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":99:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":102:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":99:18)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":99:14)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":99:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":99:25)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":99:23)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":100:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":101:30)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":101:23)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":101:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":101:18)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":101:19)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":101:31)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":99:30)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":99:29)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":103:22)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":103:27)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":103:28)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":103:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":104:14)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c":104:9)
#loc207 = loc(fused[#loc1, #loc2])
#loc208 = loc(fused[#loc3, #loc4])
#loc209 = loc(fused[#loc5, #loc6])
#loc210 = loc(fused[#loc7, #loc8])
#loc211 = loc(fused[#loc9, #loc10])
#loc212 = loc(fused[#loc11, #loc12])
#loc213 = loc(fused[#loc13, #loc14])
#loc214 = loc(fused[#loc15, #loc16])
#loc215 = loc(fused[#loc17, #loc18])
#loc216 = loc(fused[#loc20, #loc19])
#loc217 = loc(fused[#loc21, #loc22])
#loc218 = loc(fused[#loc24, #loc22])
#loc219 = loc(fused[#loc25, #loc27])
#loc220 = loc(fused[#loc28, #loc27])
#loc221 = loc(fused[#loc29, #loc30])
#loc222 = loc(fused[#loc31, #loc32])
#loc223 = loc(fused[#loc33, #loc30])
#loc224 = loc(fused[#loc37, #loc38])
#loc225 = loc(fused[#loc39, #loc40])
#loc226 = loc(fused[#loc42, #loc41])
#loc227 = loc(fused[#loc43, #loc44])
#loc228 = loc(fused[#loc46, #loc40])
#loc229 = loc(fused[#loc49, #loc52])
#loc230 = loc(fused[#loc54, #loc53])
#loc231 = loc(fused[#loc61, #loc62])
#loc232 = loc(fused[#loc63, #loc64])
#loc233 = loc(fused[#loc65, #loc66])
#loc234 = loc(fused[#loc67, #loc68])
#loc235 = loc(fused[#loc69, #loc70])
#loc236 = loc(fused[#loc71, #loc72])
#loc237 = loc(fused[#loc77, #loc78])
#loc240 = loc(fused[#loc88, #loc89])
#loc241 = loc(fused[#loc92, #loc93])
#loc242 = loc(fused[#loc96, #loc95])
#loc243 = loc(fused[#loc97, #loc98])
#loc244 = loc(fused[#loc100, #loc101])
#loc245 = loc(fused[#loc102, #loc103])
#loc246 = loc(fused[#loc104, #loc105])
#loc247 = loc(fused[#loc106, #loc107])
#loc248 = loc(fused[#loc109, #loc108])
#loc249 = loc(fused[#loc110, #loc111])
#loc250 = loc(fused[#loc113, #loc114, #loc115, #loc111])
#loc251 = loc(fused[#loc119, #loc120])
#loc252 = loc(fused[#loc118, #loc120])
#loc253 = loc(fused[#loc117, #loc121])
#loc254 = loc(fused[#loc122, #loc121])
#loc255 = loc(fused[#loc123, #loc124])
#loc256 = loc(fused[#loc125, #loc126])
#loc257 = loc(fused[#loc127, #loc124])
#loc258 = loc(fused[#loc131, #loc132])
#loc259 = loc(fused[#loc133, #loc134])
#loc260 = loc(fused[#loc136, #loc135])
#loc261 = loc(fused[#loc137, #loc138])
#loc262 = loc(fused[#loc140, #loc134])
#loc263 = loc(fused[#loc143, #loc146])
#loc264 = loc(fused[#loc148, #loc147])
#loc265 = loc(fused[#loc155, #loc156])
#loc266 = loc(fused[#loc157, #loc158])
#loc267 = loc(fused[#loc159, #loc160])
#loc268 = loc(fused[#loc161, #loc162])
#loc269 = loc(fused[#loc164, #loc163])
#loc270 = loc(fused[#loc165, #loc166])
#loc271 = loc(fused[#loc168, #loc166])
#loc272 = loc(fused[#loc171, #loc172])
#loc273 = loc(fused[#loc170, #loc172])
#loc274 = loc(fused[#loc169, #loc173])
#loc275 = loc(fused[#loc174, #loc173])
#loc276 = loc(fused[#loc175, #loc176])
#loc277 = loc(fused[#loc177, #loc178])
#loc278 = loc(fused[#loc179, #loc176])
#loc279 = loc(fused[#loc183, #loc184])
#loc280 = loc(fused[#loc185, #loc186])
#loc281 = loc(fused[#loc188, #loc187])
#loc282 = loc(fused[#loc189, #loc190])
#loc283 = loc(fused[#loc192, #loc186])
#loc284 = loc(fused[#loc195, #loc198])
#loc285 = loc(fused[#loc200, #loc199])
