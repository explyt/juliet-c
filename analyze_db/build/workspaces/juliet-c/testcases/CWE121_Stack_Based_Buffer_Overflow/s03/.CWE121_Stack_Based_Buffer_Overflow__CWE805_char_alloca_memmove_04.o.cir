!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc155)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    cir.scope {
      %17 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc13)
      cir.if %18 {
        %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
        cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc158)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc17)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc17)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc19)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc20)
        cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc159)
      } loc(#loc157)
    } loc(#loc156)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc161)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc25)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc25)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc26)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc27)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc27)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc27)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc162)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc31)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc31)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc32)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc32)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc34)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc34)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc163)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
      %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc35)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc36)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc36)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc37)
      %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc37)
      %38 = cir.const #cir.int<1> : !u64i loc(#loc164)
      %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc165)
      cir.libc.memmove %39 bytes from %35 to %33 : !cir.ptr<!void>, !u64i loc(#loc166)
      %40 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc42)
      %42 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      %43 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %44 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc44)
      %46 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc46)
      cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc167)
      %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    } loc(#loc160)
    cir.return loc(#loc4)
  } loc(#loc152)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc169)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc170)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc172)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc173)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc61)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc61)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc61)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc61)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc61)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc174)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc61)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc63)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc63)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc63)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc63)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc63)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc63)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc63)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc174)
    cir.scope {
      %17 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc66)
      cir.if %18 {
        %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc55)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc55)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } else {
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
        cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc73)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc73)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc75)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc76)
        cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc178)
      } loc(#loc176)
    } loc(#loc175)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc180)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc81)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc81)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc82)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc83)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc84)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc83)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc83)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc181)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc87)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc87)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc88)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc89)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc88)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc90)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc90)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc182)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
      %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc92)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc93)
      %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc93)
      %38 = cir.const #cir.int<1> : !u64i loc(#loc183)
      %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc184)
      cir.libc.memmove %39 bytes from %35 to %33 : !cir.ptr<!void>, !u64i loc(#loc185)
      %40 = cir.const #cir.int<0> : !s32i loc(#loc98)
      %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc98)
      %42 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
      %43 = cir.const #cir.int<100> : !s32i loc(#loc100)
      %44 = cir.const #cir.int<1> : !s32i loc(#loc101)
      %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc100)
      %46 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc102)
      cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc186)
      %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
      cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    } loc(#loc179)
    cir.return loc(#loc57)
  } loc(#loc171)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc189)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc110)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc110)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc110)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc110)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc110)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc190)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc110)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc110)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc112)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc112)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc112)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc112)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc112)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc112)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc112)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.scope {
      %17 = cir.const #cir.int<1> : !s32i loc(#loc115)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc115)
      cir.if %18 {
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
        cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc193)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc119)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc119)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc121)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc122)
        cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc194)
      } loc(#loc192)
    } loc(#loc191)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc196)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc127)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc127)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc128)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc129)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc130)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc129)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc129)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc197)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc133)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc133)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc134)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc135)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc134)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc136)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc136)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc198)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
      %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc137)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc138)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc139)
      %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc139)
      %38 = cir.const #cir.int<1> : !u64i loc(#loc199)
      %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc200)
      cir.libc.memmove %39 bytes from %35 to %33 : !cir.ptr<!void>, !u64i loc(#loc201)
      %40 = cir.const #cir.int<0> : !s32i loc(#loc144)
      %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc144)
      %42 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      %43 = cir.const #cir.int<100> : !s32i loc(#loc146)
      %44 = cir.const #cir.int<1> : !s32i loc(#loc147)
      %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc146)
      %46 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc148)
      cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc202)
      %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
      cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    } loc(#loc195)
    cir.return loc(#loc106)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":30:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":51:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":32:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":32:12)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":33:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":33:36)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":34:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":34:37)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":35:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":41:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":35:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":36:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":39:16)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":39:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":40:19)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":40:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":40:14)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":40:15)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":42:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":50:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":43:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":43:24)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":44:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":44:24)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":44:29)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":44:33)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":44:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":44:34)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":45:25)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":45:16)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":45:20)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":45:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":47:17)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":47:23)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":47:31)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":47:35)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":47:46)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":47:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":47:47)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":48:23)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":48:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":48:14)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":48:18)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":48:19)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":49:19)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":49:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":108:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":112:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":110:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":110:14)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":111:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":111:14)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":66:19)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":58:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":83:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":60:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":60:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":61:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":61:36)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":62:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":62:37)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":63:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":73:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":63:8)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":64:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":67:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":69:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":66:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":71:16)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":71:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":72:19)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":72:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":72:14)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":72:15)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":74:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":82:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":75:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":75:24)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":76:16)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":76:24)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":76:29)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":76:33)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":76:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":76:34)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":77:25)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":77:16)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":77:20)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":77:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":79:17)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":79:23)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":79:31)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":79:35)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":79:46)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":79:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":79:47)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":80:23)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":80:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":80:14)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":80:18)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":80:19)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":81:19)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":81:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":86:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":106:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":88:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":88:12)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":89:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":89:36)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":90:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":90:37)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":91:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":96:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":91:8)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":92:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":94:16)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":94:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":95:19)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":95:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":95:14)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":95:15)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":97:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":105:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":98:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":98:24)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":99:16)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":99:24)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":99:29)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":99:33)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":99:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":99:34)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":100:25)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":100:16)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":100:20)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":100:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":102:17)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":102:23)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":102:31)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":102:35)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":102:46)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":102:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":102:47)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":103:23)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":103:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":103:14)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":103:18)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":103:19)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":104:19)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c":104:9)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc5, #loc6])
#loc154 = loc(fused[#loc7, #loc8])
#loc155 = loc(fused[#loc9, #loc10])
#loc156 = loc(fused[#loc11, #loc12])
#loc157 = loc(fused[#loc14, #loc12])
#loc158 = loc(fused[#loc16, #loc15])
#loc159 = loc(fused[#loc18, #loc17])
#loc160 = loc(fused[#loc21, #loc22])
#loc161 = loc(fused[#loc23, #loc24])
#loc162 = loc(fused[#loc29, #loc30])
#loc163 = loc(fused[#loc34, #loc31])
#loc164 = loc(fused[#loc38, #loc39])
#loc165 = loc(fused[#loc37, #loc39])
#loc166 = loc(fused[#loc40, #loc41])
#loc167 = loc(fused[#loc43, #loc42])
#loc168 = loc(fused[#loc49, #loc50])
#loc169 = loc(fused[#loc51, #loc52])
#loc170 = loc(fused[#loc53, #loc54])
#loc171 = loc(fused[#loc56, #loc57])
#loc172 = loc(fused[#loc58, #loc59])
#loc173 = loc(fused[#loc60, #loc61])
#loc174 = loc(fused[#loc62, #loc63])
#loc175 = loc(fused[#loc64, #loc65])
#loc176 = loc(fused[#loc67, #loc68, #loc69, #loc65])
#loc177 = loc(fused[#loc72, #loc71])
#loc178 = loc(fused[#loc74, #loc73])
#loc179 = loc(fused[#loc77, #loc78])
#loc180 = loc(fused[#loc79, #loc80])
#loc181 = loc(fused[#loc85, #loc86])
#loc182 = loc(fused[#loc90, #loc87])
#loc183 = loc(fused[#loc94, #loc95])
#loc184 = loc(fused[#loc93, #loc95])
#loc185 = loc(fused[#loc96, #loc97])
#loc186 = loc(fused[#loc99, #loc98])
#loc187 = loc(fused[#loc105, #loc106])
#loc188 = loc(fused[#loc107, #loc108])
#loc189 = loc(fused[#loc109, #loc110])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc113, #loc114])
#loc192 = loc(fused[#loc116, #loc114])
#loc193 = loc(fused[#loc118, #loc117])
#loc194 = loc(fused[#loc120, #loc119])
#loc195 = loc(fused[#loc123, #loc124])
#loc196 = loc(fused[#loc125, #loc126])
#loc197 = loc(fused[#loc131, #loc132])
#loc198 = loc(fused[#loc136, #loc133])
#loc199 = loc(fused[#loc140, #loc141])
#loc200 = loc(fused[#loc139, #loc141])
#loc201 = loc(fused[#loc142, #loc143])
#loc202 = loc(fused[#loc145, #loc144])
