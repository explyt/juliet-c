!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":209:10)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":209:14)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":209:20)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":209:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc320 = loc(fused[#loc184, #loc185])
#loc321 = loc(fused[#loc186, #loc187])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc248)
  cir.global "private" constant cir_private @__const.goodG2B1.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc249)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_06_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc250)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc251)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc252)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc253)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc13)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc254)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc255)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc256)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc257)
  cir.func private @close(!s32i) -> !s32i loc(#loc258)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc259)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc27)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc261)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc250)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_06_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc250)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc250)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc32)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc262)
    cir.scope {
      %13 = cir.const #cir.int<5> : !s32i loc(#loc36)
      %14 = cir.const #cir.int<5> : !s32i loc(#loc37)
      %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc264)
      cir.if %15 {
        cir.scope {
          %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc267)
          %17 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc268)
          %18 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc269)
          %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc270)
          %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc271)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc48)
          cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc270)
          %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc51)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
          %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc51)
          cir.store %25, %20 : !u64i, !cir.ptr<!u64i> loc(#loc271)
          cir.scope {
            cir.do {
              %26 = cir.const #cir.int<2> : !s32i loc(#loc55)
              %27 = cir.const #cir.int<1> : !s32i loc(#loc56)
              %28 = cir.const #cir.int<6> : !s32i loc(#loc57)
              %29 = cir.call @socket(%26, %27, %28) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc58)
              cir.store %29, %19 : !s32i, !cir.ptr<!s32i> loc(#loc273)
              cir.scope {
                %80 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc63)
                %81 = cir.const #cir.int<1> : !s32i loc(#loc64)
                %82 = cir.unary(minus, %81) : !s32i, !s32i loc(#loc64)
                %83 = cir.cmp(eq, %80, %82) : !s32i, !cir.bool loc(#loc275)
                cir.if %83 {
                  cir.break loc(#loc66)
                } loc(#loc276)
              } loc(#loc274)
              %30 = cir.cast(bitcast, %17 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc277)
              %31 = cir.const #cir.int<0> : !s32i loc(#loc69)
              %32 = cir.const #cir.int<16> : !u64i loc(#loc278)
              cir.libc.memset %32 bytes from %30 set to %31 : !cir.ptr<!void>, !s32i, !u64i loc(#loc279)
              %33 = cir.const #cir.int<2> : !s32i loc(#loc74)
              %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc74)
              %35 = cir.get_member %17[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
              cir.store %34, %35 : !u16i, !cir.ptr<!u16i> loc(#loc280)
              %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc13)
              %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc13)
              %38 = cir.call @inet_addr(%37) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc77)
              %39 = cir.get_member %17[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
              %40 = cir.get_member %39[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
              cir.store %38, %40 : !u32i, !cir.ptr<!u32i> loc(#loc281)
              %41 = cir.const #cir.int<27015> : !s32i loc(#loc82)
              %42 = cir.cast(integral, %41 : !s32i), !u16i loc(#loc82)
              %43 = cir.call @htons(%42) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc83)
              %44 = cir.get_member %17[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
              cir.store %43, %44 : !u16i, !cir.ptr<!u16i> loc(#loc282)
              cir.scope {
                %80 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %81 = cir.cast(bitcast, %17 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc284)
                %82 = cir.const #cir.int<16> : !u64i loc(#loc285)
                %83 = cir.cast(integral, %82 : !u64i), !u32i loc(#loc285)
                %84 = cir.call @connect(%80, %81, %83) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc94)
                %85 = cir.const #cir.int<1> : !s32i loc(#loc95)
                %86 = cir.unary(minus, %85) : !s32i, !s32i loc(#loc95)
                %87 = cir.cmp(eq, %84, %86) : !s32i, !cir.bool loc(#loc286)
                cir.if %87 {
                  cir.break loc(#loc97)
                } loc(#loc287)
              } loc(#loc283)
              %45 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %46 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
              %47 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc100)
              %48 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %47 : !u64i), !cir.ptr<!s8i> loc(#loc101)
              %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc288)
              %50 = cir.const #cir.int<1> : !u64i loc(#loc289)
              %51 = cir.const #cir.int<100> : !s32i loc(#loc106)
              %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc106)
              %53 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc107)
              %54 = cir.binop(sub, %52, %53) : !u64i loc(#loc290)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc108)
              %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc108)
              %57 = cir.binop(sub, %54, %56) : !u64i loc(#loc291)
              %58 = cir.binop(mul, %50, %57) : !u64i loc(#loc292)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc110)
              %60 = cir.call @recv(%45, %49, %58, %59) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc111)
              %61 = cir.cast(integral, %60 : !s64i), !s32i loc(#loc111)
              cir.store %61, %16 : !s32i, !cir.ptr<!s32i> loc(#loc293)
              cir.scope {
                %80 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %81 = cir.const #cir.int<1> : !s32i loc(#loc117)
                %82 = cir.unary(minus, %81) : !s32i, !s32i loc(#loc117)
                %83 = cir.cmp(eq, %80, %82) : !s32i, !cir.bool loc(#loc295)
                %84 = cir.ternary(%83, true {
                  %85 = cir.const #true loc(#loc118)
                  cir.yield %85 : !cir.bool loc(#loc118)
                }, false {
                  %85 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %86 = cir.const #cir.int<0> : !s32i loc(#loc120)
                  %87 = cir.cmp(eq, %85, %86) : !s32i, !cir.bool loc(#loc296)
                  %88 = cir.ternary(%87, true {
                    %89 = cir.const #true loc(#loc118)
                    cir.yield %89 : !cir.bool loc(#loc118)
                  }, false {
                    %89 = cir.const #false loc(#loc118)
                    cir.yield %89 : !cir.bool loc(#loc118)
                  }) : (!cir.bool) -> !cir.bool loc(#loc118)
                  cir.yield %88 : !cir.bool loc(#loc118)
                }) : (!cir.bool) -> !cir.bool loc(#loc118)
                cir.if %84 {
                  cir.break loc(#loc122)
                } loc(#loc297)
              } loc(#loc294)
              %62 = cir.const #cir.int<0> : !s32i loc(#loc123)
              %63 = cir.cast(integral, %62 : !s32i), !s8i loc(#loc123)
              %64 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
              %65 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc125)
              %66 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc126)
              %67 = cir.cast(integral, %66 : !s32i), !u64i loc(#loc126)
              %68 = cir.const #cir.int<1> : !u64i loc(#loc298)
              %69 = cir.binop(div, %67, %68) : !u64i loc(#loc299)
              %70 = cir.binop(add, %65, %69) : !u64i loc(#loc300)
              %71 = cir.ptr_stride(%64 : !cir.ptr<!s8i>, %70 : !u64i), !cir.ptr<!s8i> loc(#loc129)
              cir.store %63, %71 : !s8i, !cir.ptr<!s8i> loc(#loc301)
              %72 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc130)
              %73 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
              %74 = cir.const #cir.int<13> : !s32i loc(#loc132)
              %75 = cir.call @strchr(%73, %74) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc130)
              cir.store %75, %18 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc302)
              cir.scope {
                %80 = cir.load %18 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
                %81 = cir.cast(ptr_to_bool, %80 : !cir.ptr<!s8i>), !cir.bool loc(#loc137)
                cir.if %81 {
                  %82 = cir.const #cir.int<0> : !s32i loc(#loc139)
                  %83 = cir.cast(integral, %82 : !s32i), !s8i loc(#loc139)
                  %84 = cir.load deref %18 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
                  cir.store %83, %84 : !s8i, !cir.ptr<!s8i> loc(#loc305)
                } loc(#loc304)
              } loc(#loc303)
              %76 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc142)
              %77 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
              %78 = cir.const #cir.int<10> : !s32i loc(#loc144)
              %79 = cir.call @strchr(%77, %78) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc142)
              cir.store %79, %18 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc306)
              cir.scope {
                %80 = cir.load %18 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
                %81 = cir.cast(ptr_to_bool, %80 : !cir.ptr<!s8i>), !cir.bool loc(#loc149)
                cir.if %81 {
                  %82 = cir.const #cir.int<0> : !s32i loc(#loc151)
                  %83 = cir.cast(integral, %82 : !s32i), !s8i loc(#loc151)
                  %84 = cir.load deref %18 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
                  cir.store %83, %84 : !s8i, !cir.ptr<!s8i> loc(#loc309)
                } loc(#loc308)
              } loc(#loc307)
              cir.yield loc(#loc54)
            } while {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc154)
              %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc154)
              cir.condition(%27) loc(#loc154)
            } loc(#loc272)
          } loc(#loc272)
          cir.scope {
            %26 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc157)
            %27 = cir.const #cir.int<1> : !s32i loc(#loc158)
            %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc158)
            %29 = cir.cmp(ne, %26, %28) : !s32i, !cir.bool loc(#loc311)
            cir.if %29 {
              %30 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc160)
              %31 = cir.call @close(%30) : (!s32i) -> !s32i loc(#loc161)
            } loc(#loc312)
          } loc(#loc310)
        } loc(#loc266)
      } loc(#loc265)
    } loc(#loc263)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc26)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc26)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc162)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc162)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc27)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc27)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc164)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc165)
    cir.return loc(#loc29)
  } loc(#loc260)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc314)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc168)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc315)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc170)
    cir.return loc(#loc167)
  } loc(#loc313)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc316)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc317)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc318)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc181)
  cir.func @main(%arg0: !s32i loc(fused[#loc184, #loc185]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc186, #loc187])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc320)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc321)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc183)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc188)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc189)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc190)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc190)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc191)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc178)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc192)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc322)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_06_good() : () -> () loc(#loc193)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc179)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc195)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc180)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc196)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc323)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_06_bad() : () -> () loc(#loc197)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc181)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc199)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc200)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc324)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc324)
    cir.return %17 : !s32i loc(#loc324)
  } loc(#loc319)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc202)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc325)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc205)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc327)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc249)
    %2 = cir.get_global @__const.goodG2B1.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc249)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc249)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc210)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc328)
    cir.scope {
      %13 = cir.const #cir.int<5> : !s32i loc(#loc214)
      %14 = cir.const #cir.int<5> : !s32i loc(#loc215)
      %15 = cir.cmp(ne, %13, %14) : !s32i, !cir.bool loc(#loc330)
      cir.if %15 {
        %16 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc202)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc202)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc219)
      } else {
        %16 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc220)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc221)
        %18 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc205)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc205)
        %20 = cir.call @strcat(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc220)
      } loc(#loc331)
    } loc(#loc329)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc222)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc222)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc223)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc223)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc224)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc224)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc225)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc226)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc227)
    cir.return loc(#loc207)
  } loc(#loc326)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc333)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc248)
    %2 = cir.get_global @__const.goodG2B2.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc248)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc248)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc232)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc334)
    cir.scope {
      %13 = cir.const #cir.int<5> : !s32i loc(#loc236)
      %14 = cir.const #cir.int<5> : !s32i loc(#loc237)
      %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc336)
      cir.if %15 {
        %16 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc239)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc240)
        %18 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc241)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc241)
        %20 = cir.call @strcat(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc239)
      } loc(#loc337)
    } loc(#loc335)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc242)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc242)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc243)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc243)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc244)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc244)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc245)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc246)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc247)
    cir.return loc(#loc229)
  } loc(#loc332)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":180:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":180:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":158:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":158:28)
#loc5 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":72:5)
#loc6 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":72:28)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/sys/socket.h":102:1)
#loc10 = loc("/usr/include/sys/socket.h":102:62)
#loc11 = loc("/usr/include/arpa/inet.h":34:1)
#loc12 = loc("/usr/include/arpa/inet.h":34:47)
#loc13 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":103:53)
#loc14 = loc("/usr/include/netinet/in.h":404:1)
#loc15 = loc("/usr/include/netinet/in.h":405:40)
#loc16 = loc("/usr/include/sys/socket.h":126:1)
#loc17 = loc("/usr/include/sys/socket.h":126:75)
#loc18 = loc("/usr/include/sys/socket.h":145:1)
#loc19 = loc("/usr/include/sys/socket.h":145:68)
#loc20 = loc("/usr/include/string.h":246:1)
#loc21 = loc("/usr/include/string.h":247:33)
#loc22 = loc("/usr/include/unistd.h":358:1)
#loc23 = loc("/usr/include/unistd.h":358:27)
#loc24 = loc("/usr/include/unistd.h":605:1)
#loc25 = loc("/usr/include/unistd.h":606:14)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":147:12)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":147:38)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":69:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":148:1)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":71:5)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":71:12)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":73:12)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":73:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":74:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":143:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":74:8)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":74:27)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":75:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":76:9)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":142:9)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":81:13)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":81:17)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":82:13)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":82:32)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":83:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":83:19)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":84:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":84:36)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":85:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":85:41)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":85:30)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":85:37)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":86:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":131:21)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":96:40)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":96:49)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":96:62)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":96:33)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":96:17)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":96:73)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":97:17)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":100:17)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":97:21)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":97:38)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":98:17)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":99:21)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":101:24)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":101:25)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":101:34)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":101:37)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":101:51)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":101:17)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":101:52)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":102:38)
#loc75 = loc("/usr/include/netinet/in.h":249:5)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":102:17)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":103:43)
#loc78 = loc("/usr/include/netinet/in.h":251:20)
#loc79 = loc("/usr/include/netinet/in.h":33:15)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":103:17)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":103:63)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":104:42)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":104:36)
#loc84 = loc("/usr/include/netinet/in.h":250:15)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":104:17)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":104:50)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":105:17)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":108:17)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":105:29)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":105:62)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":105:63)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":105:72)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":105:86)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":105:21)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":105:92)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":106:17)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":107:21)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:35)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:59)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:66)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:64)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:50)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:73)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:76)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:87)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:92)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:98)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:108)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:109)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:112)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:30)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:17)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":112:113)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":113:17)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":116:17)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":113:21)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":113:35)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":113:48)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":113:51)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":113:65)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":114:17)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":115:21)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":118:61)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":118:17)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":118:22)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":118:32)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":118:45)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":118:56)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":118:57)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":120:27)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":120:34)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":120:40)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":120:17)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":120:44)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":121:17)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":124:17)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":121:21)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":122:17)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":123:32)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":123:22)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":123:21)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":125:27)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":125:34)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":125:40)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":125:17)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":125:44)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":126:17)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":129:17)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":126:21)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":127:17)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":128:32)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":128:22)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":128:21)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":131:20)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":132:13)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":135:13)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":132:17)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":132:34)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":133:13)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":134:30)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":134:17)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":147:25)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":147:52)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":147:66)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":147:5)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":193:1)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":197:1)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":195:5)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":195:14)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":196:5)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":196:14)
#loc172 = loc("/usr/include/stdlib.h":575:1)
#loc173 = loc("/usr/include/stdlib.h":575:41)
#loc174 = loc("/usr/include/time.h":76:1)
#loc175 = loc("/usr/include/time.h":76:38)
#loc176 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc177 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":214:15)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":216:15)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":219:15)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":221:15)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":209:1)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":224:1)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":210:1)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":212:27)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":212:22)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":212:5)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":214:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":215:5)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":215:68)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":216:5)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":219:5)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":220:5)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":220:67)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":221:5)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":223:12)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":223:5)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":163:19)
#loc203 = loc("/usr/include/string.h":149:1)
#loc204 = loc("/usr/include/string.h":150:14)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":168:22)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":155:1)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":174:1)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":157:5)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":157:12)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":159:12)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":159:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":160:5)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":169:5)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":160:8)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":160:27)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":161:5)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":164:5)
#loc218 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":166:5)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":163:9)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":168:9)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":168:16)
#loc222 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":173:12)
#loc223 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":173:25)
#loc224 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":173:38)
#loc225 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":173:52)
#loc226 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":173:66)
#loc227 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":173:5)
#loc228 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":177:1)
#loc229 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":191:1)
#loc230 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":179:5)
#loc231 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":179:12)
#loc232 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":181:12)
#loc233 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":181:5)
#loc234 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":182:5)
#loc235 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":186:5)
#loc236 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":182:8)
#loc237 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":182:27)
#loc238 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":183:5)
#loc239 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":185:9)
#loc240 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":185:16)
#loc241 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":185:22)
#loc242 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":190:12)
#loc243 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":190:25)
#loc244 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":190:38)
#loc245 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":190:52)
#loc246 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":190:66)
#loc247 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_06.c":190:5)
#loc248 = loc(fused[#loc1, #loc2])
#loc249 = loc(fused[#loc3, #loc4])
#loc250 = loc(fused[#loc5, #loc6])
#loc251 = loc(fused[#loc7, #loc8])
#loc252 = loc(fused[#loc9, #loc10])
#loc253 = loc(fused[#loc11, #loc12])
#loc254 = loc(fused[#loc14, #loc15])
#loc255 = loc(fused[#loc16, #loc17])
#loc256 = loc(fused[#loc18, #loc19])
#loc257 = loc(fused[#loc20, #loc21])
#loc258 = loc(fused[#loc22, #loc23])
#loc259 = loc(fused[#loc24, #loc25])
#loc260 = loc(fused[#loc28, #loc29])
#loc261 = loc(fused[#loc30, #loc31])
#loc262 = loc(fused[#loc33, #loc32])
#loc263 = loc(fused[#loc34, #loc35])
#loc264 = loc(fused[#loc36, #loc37])
#loc265 = loc(fused[#loc38, #loc35])
#loc266 = loc(fused[#loc39, #loc40])
#loc267 = loc(fused[#loc41, #loc42])
#loc268 = loc(fused[#loc43, #loc44])
#loc269 = loc(fused[#loc45, #loc46])
#loc270 = loc(fused[#loc47, #loc48])
#loc271 = loc(fused[#loc49, #loc50])
#loc272 = loc(fused[#loc53, #loc54])
#loc273 = loc(fused[#loc59, #loc60])
#loc274 = loc(fused[#loc61, #loc62])
#loc275 = loc(fused[#loc63, #loc64])
#loc276 = loc(fused[#loc65, #loc62])
#loc277 = loc(fused[#loc67, #loc68])
#loc278 = loc(fused[#loc70, #loc71])
#loc279 = loc(fused[#loc72, #loc73])
#loc280 = loc(fused[#loc76, #loc74])
#loc281 = loc(fused[#loc80, #loc81])
#loc282 = loc(fused[#loc85, #loc86])
#loc283 = loc(fused[#loc87, #loc88])
#loc284 = loc(fused[#loc90, #loc91])
#loc285 = loc(fused[#loc92, #loc93])
#loc286 = loc(fused[#loc94, #loc95])
#loc287 = loc(fused[#loc96, #loc88])
#loc288 = loc(fused[#loc102, #loc103])
#loc289 = loc(fused[#loc104, #loc105])
#loc290 = loc(fused[#loc106, #loc107])
#loc291 = loc(fused[#loc106, #loc108])
#loc292 = loc(fused[#loc104, #loc109])
#loc293 = loc(fused[#loc112, #loc113])
#loc294 = loc(fused[#loc114, #loc115])
#loc295 = loc(fused[#loc116, #loc117])
#loc296 = loc(fused[#loc119, #loc120])
#loc297 = loc(fused[#loc121, #loc115])
#loc298 = loc(fused[#loc127, #loc128])
#loc299 = loc(fused[#loc126, #loc128])
#loc300 = loc(fused[#loc125, #loc128])
#loc301 = loc(fused[#loc124, #loc123])
#loc302 = loc(fused[#loc133, #loc134])
#loc303 = loc(fused[#loc135, #loc136])
#loc304 = loc(fused[#loc138, #loc136])
#loc305 = loc(fused[#loc141, #loc139])
#loc306 = loc(fused[#loc145, #loc146])
#loc307 = loc(fused[#loc147, #loc148])
#loc308 = loc(fused[#loc150, #loc148])
#loc309 = loc(fused[#loc153, #loc151])
#loc310 = loc(fused[#loc155, #loc156])
#loc311 = loc(fused[#loc157, #loc158])
#loc312 = loc(fused[#loc159, #loc156])
#loc313 = loc(fused[#loc166, #loc167])
#loc314 = loc(fused[#loc168, #loc169])
#loc315 = loc(fused[#loc170, #loc171])
#loc316 = loc(fused[#loc172, #loc173])
#loc317 = loc(fused[#loc174, #loc175])
#loc318 = loc(fused[#loc176, #loc177])
#loc319 = loc(fused[#loc182, #loc183])
#loc322 = loc(fused[#loc193, #loc194])
#loc323 = loc(fused[#loc197, #loc198])
#loc324 = loc(fused[#loc201, #loc200])
#loc325 = loc(fused[#loc203, #loc204])
#loc326 = loc(fused[#loc206, #loc207])
#loc327 = loc(fused[#loc208, #loc209])
#loc328 = loc(fused[#loc211, #loc210])
#loc329 = loc(fused[#loc212, #loc213])
#loc330 = loc(fused[#loc214, #loc215])
#loc331 = loc(fused[#loc216, #loc217, #loc218, #loc213])
#loc332 = loc(fused[#loc228, #loc229])
#loc333 = loc(fused[#loc230, #loc231])
#loc334 = loc(fused[#loc233, #loc232])
#loc335 = loc(fused[#loc234, #loc235])
#loc336 = loc(fused[#loc236, #loc237])
#loc337 = loc(fused[#loc238, #loc235])
