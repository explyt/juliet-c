!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_04.c":175:10)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_04.c":175:14)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_04.c":175:20)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_04.c":175:32)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_04.c":73:28)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_04.c":99:28)
#true = #cir.bool<true> : !cir.bool
#loc213 = loc(fused[#loc48, #loc49])
#loc214 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc193)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb1 loc(#loc198)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc199)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc201)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc202)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc203)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc6)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc23)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc25)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc4)
  } loc(#loc194)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc204)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc209)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc210)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc55)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_square_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call @CWE190_Integer_Overflow__int_max_square_04_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_square_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call @CWE190_Integer_Overflow__int_max_square_04_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc217)
    cir.return %17 : !s32i loc(#loc217)
  } loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc66)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.br ^bb1 loc(#loc222)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc79)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc223)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc81)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb3 loc(#loc78)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc78)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc225)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc226)
  ^bb6:  // pred: ^bb5
    %8 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    cir.br ^bb21 loc(#loc87)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc227)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc93)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc93)
    %15 = cir.cmp(gt, %10, %14) : !s32i, !cir.bool loc(#loc228)
    cir.brcond %15 ^bb9, ^bb14 loc(#loc94)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %17 = cir.abs %16 poison : !s32i loc(#loc96)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc96)
    %19 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc97)
    %20 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
    %21 = cir.cast(int_to_float, %20 : !s32i), !cir.double loc(#loc98)
    %22 = cir.call @sqrt(%21) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc97)
    %23 = cir.cast(float_to_int, %22 : !cir.double), !s64i loc(#loc97)
    %24 = cir.cmp(lt, %18, %23) : !s64i, !cir.bool loc(#loc229)
    cir.brcond %24 ^bb10, ^bb11 loc(#loc94)
  ^bb10:  // pred: ^bb9
    %25 = cir.const #true loc(#loc94)
    cir.br ^bb12(%25 : !cir.bool) loc(#loc94)
  ^bb11:  // pred: ^bb9
    %26 = cir.const #false loc(#loc94)
    cir.br ^bb12(%26 : !cir.bool) loc(#loc94)
  ^bb12(%27: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_04.c":73:28)):  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc94)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15(%27 : !cir.bool) loc(#loc94)
  ^bb14:  // pred: ^bb8
    %28 = cir.const #false loc(#loc94)
    cir.br ^bb15(%28 : !cir.bool) loc(#loc94)
  ^bb15(%29: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_04.c":73:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc94)
  ^bb16:  // pred: ^bb15
    cir.brcond %29 ^bb17, ^bb18 loc(#loc230)
  ^bb17:  // pred: ^bb16
    %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %32 = cir.binop(mul, %30, %31) nsw : !s32i loc(#loc103)
    cir.store %32, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %33 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc105)
    cir.br ^bb19 loc(#loc101)
  ^bb18:  // pred: ^bb16
    %34 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc68)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb19 loc(#loc91)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc91)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc84)
  ^bb21:  // 2 preds: ^bb6, ^bb20
    cir.br ^bb22 loc(#loc84)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc70)
  } loc(#loc218)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc232)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc233)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc113)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc236)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc119)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.br ^bb3 loc(#loc116)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc238)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc123)
    cir.brcond %7 ^bb6, ^bb20 loc(#loc239)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc240)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc128)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc128)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc128)
    %13 = cir.cmp(gt, %8, %12) : !s32i, !cir.bool loc(#loc241)
    cir.brcond %13 ^bb8, ^bb13 loc(#loc129)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    %15 = cir.abs %14 poison : !s32i loc(#loc131)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc131)
    %17 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc132)
    %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc133)
    %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc133)
    %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc132)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc132)
    %22 = cir.cmp(lt, %16, %21) : !s64i, !cir.bool loc(#loc242)
    cir.brcond %22 ^bb9, ^bb10 loc(#loc129)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #true loc(#loc129)
    cir.br ^bb11(%23 : !cir.bool) loc(#loc129)
  ^bb10:  // pred: ^bb8
    %24 = cir.const #false loc(#loc129)
    cir.br ^bb11(%24 : !cir.bool) loc(#loc129)
  ^bb11(%25: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_04.c":99:28)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc129)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14(%25 : !cir.bool) loc(#loc129)
  ^bb13:  // pred: ^bb7
    %26 = cir.const #false loc(#loc129)
    cir.br ^bb14(%26 : !cir.bool) loc(#loc129)
  ^bb14(%27: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_04.c":99:28)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc129)
  ^bb15:  // pred: ^bb14
    cir.brcond %27 ^bb16, ^bb17 loc(#loc243)
  ^bb16:  // pred: ^bb15
    %28 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %30 = cir.binop(mul, %28, %29) nsw : !s32i loc(#loc138)
    cir.store %30, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %31 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc140)
    cir.br ^bb18 loc(#loc136)
  ^bb17:  // pred: ^bb15
    %32 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc141)
    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc141)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    cir.br ^bb18 loc(#loc126)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc126)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc122)
  ^bb20:  // 2 preds: ^bb5, ^bb19
    cir.br ^bb21 loc(#loc122)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc108)
  } loc(#loc231)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc149)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb1 loc(#loc248)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc153)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc153)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc249)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc157)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    cir.br ^bb4 loc(#loc155)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc159)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.br ^bb4 loc(#loc152)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc152)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc251)
  ^bb6:  // pred: ^bb5
    %8 = cir.const #cir.int<1> : !s32i loc(#loc163)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc163)
    cir.brcond %9 ^bb7, ^bb10 loc(#loc252)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc253)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc167)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc169)
    cir.br ^bb9 loc(#loc166)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc162)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc162)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc144)
  } loc(#loc244)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc255)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc256)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc176)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.br ^bb1 loc(#loc258)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc180)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc259)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc182)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    cir.br ^bb3 loc(#loc179)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc179)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc261)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc186)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc186)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc262)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc263)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc190)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc192)
    cir.br ^bb8 loc(#loc189)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc185)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc185)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc171)
  } loc(#loc254)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_04.c":30:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_04.c":48:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_04.c":44:13)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_04.c":44:33)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_04.c":32:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_04.c":32:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_04.c":34:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_04.c":34:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_04.c":35:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_04.c":39:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_04.c":35:8)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_04.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_04.c":38:16)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_04.c":38:9)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_04.c":40:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_04.c":47:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_04.c":40:8)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_04.c":41:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_04.c":42:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_04.c":46:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_04.c":44:26)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_04.c":45:26)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_04.c":45:13)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_04.c":158:1)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_04.c":164:1)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_04.c":160:5)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_04.c":160:14)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_04.c":161:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_04.c":161:14)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_04.c":162:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_04.c":162:14)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_04.c":163:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_04.c":163:14)
#loc36 = loc("/usr/include/stdlib.h":575:1)
#loc37 = loc("/usr/include/stdlib.h":575:41)
#loc38 = loc("/usr/include/time.h":76:1)
#loc39 = loc("/usr/include/time.h":76:38)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_04.c":180:15)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_04.c":182:15)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_04.c":185:15)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_04.c":187:15)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_04.c":175:1)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_04.c":190:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_04.c":176:1)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_04.c":178:27)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_04.c":178:22)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_04.c":178:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_04.c":180:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_04.c":181:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_04.c":181:53)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_04.c":182:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_04.c":185:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_04.c":186:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_04.c":186:52)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_04.c":187:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_04.c":189:12)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_04.c":189:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_04.c":68:19)
#loc67 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_04.c":80:23)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_04.c":55:1)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_04.c":83:1)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_04.c":75:13)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_04.c":75:33)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_04.c":57:5)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_04.c":57:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_04.c":59:12)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_04.c":59:5)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_04.c":60:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_04.c":64:5)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_04.c":60:8)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_04.c":61:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_04.c":63:16)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_04.c":63:9)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_04.c":65:5)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_04.c":82:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_04.c":65:8)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_04.c":66:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_04.c":69:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_04.c":71:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_04.c":68:9)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_04.c":73:9)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_04.c":81:9)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_04.c":73:13)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_04.c":73:20)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_04.c":73:35)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_04.c":73:31)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_04.c":73:49)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_04.c":73:62)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_04.c":73:69)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_04.c":74:9)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_04.c":77:9)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_04.c":79:9)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_04.c":75:26)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_04.c":76:26)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_04.c":76:13)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_04.c":80:13)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_04.c":86:1)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_04.c":109:1)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_04.c":101:13)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_04.c":101:33)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_04.c":88:5)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_04.c":88:9)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_04.c":90:12)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_04.c":90:5)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_04.c":91:5)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_04.c":95:5)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_04.c":91:8)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_04.c":92:5)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_04.c":94:16)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_04.c":94:9)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_04.c":96:5)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_04.c":108:5)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_04.c":96:8)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_04.c":97:5)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_04.c":99:9)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_04.c":107:9)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_04.c":99:13)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_04.c":99:20)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_04.c":99:35)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_04.c":99:31)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_04.c":99:49)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_04.c":99:62)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_04.c":99:69)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_04.c":100:9)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_04.c":103:9)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_04.c":105:9)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_04.c":101:26)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_04.c":102:26)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_04.c":102:13)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_04.c":106:23)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_04.c":106:13)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_04.c":112:1)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_04.c":135:1)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_04.c":131:13)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_04.c":131:33)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_04.c":114:5)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_04.c":114:9)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_04.c":116:12)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_04.c":116:5)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_04.c":117:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_04.c":126:5)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_04.c":117:8)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_04.c":118:5)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_04.c":121:5)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_04.c":123:5)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_04.c":120:19)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_04.c":120:9)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_04.c":125:16)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_04.c":125:9)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_04.c":127:5)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_04.c":134:5)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_04.c":127:8)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_04.c":128:5)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_04.c":129:9)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_04.c":133:9)
#loc167 = loc("CWE190_Integer_Overflow__int_max_square_04.c":131:26)
#loc168 = loc("CWE190_Integer_Overflow__int_max_square_04.c":132:26)
#loc169 = loc("CWE190_Integer_Overflow__int_max_square_04.c":132:13)
#loc170 = loc("CWE190_Integer_Overflow__int_max_square_04.c":138:1)
#loc171 = loc("CWE190_Integer_Overflow__int_max_square_04.c":156:1)
#loc172 = loc("CWE190_Integer_Overflow__int_max_square_04.c":152:13)
#loc173 = loc("CWE190_Integer_Overflow__int_max_square_04.c":152:33)
#loc174 = loc("CWE190_Integer_Overflow__int_max_square_04.c":140:5)
#loc175 = loc("CWE190_Integer_Overflow__int_max_square_04.c":140:9)
#loc176 = loc("CWE190_Integer_Overflow__int_max_square_04.c":142:12)
#loc177 = loc("CWE190_Integer_Overflow__int_max_square_04.c":142:5)
#loc178 = loc("CWE190_Integer_Overflow__int_max_square_04.c":143:5)
#loc179 = loc("CWE190_Integer_Overflow__int_max_square_04.c":147:5)
#loc180 = loc("CWE190_Integer_Overflow__int_max_square_04.c":143:8)
#loc181 = loc("CWE190_Integer_Overflow__int_max_square_04.c":144:5)
#loc182 = loc("CWE190_Integer_Overflow__int_max_square_04.c":146:16)
#loc183 = loc("CWE190_Integer_Overflow__int_max_square_04.c":146:9)
#loc184 = loc("CWE190_Integer_Overflow__int_max_square_04.c":148:5)
#loc185 = loc("CWE190_Integer_Overflow__int_max_square_04.c":155:5)
#loc186 = loc("CWE190_Integer_Overflow__int_max_square_04.c":148:8)
#loc187 = loc("CWE190_Integer_Overflow__int_max_square_04.c":149:5)
#loc188 = loc("CWE190_Integer_Overflow__int_max_square_04.c":150:9)
#loc189 = loc("CWE190_Integer_Overflow__int_max_square_04.c":154:9)
#loc190 = loc("CWE190_Integer_Overflow__int_max_square_04.c":152:26)
#loc191 = loc("CWE190_Integer_Overflow__int_max_square_04.c":153:26)
#loc192 = loc("CWE190_Integer_Overflow__int_max_square_04.c":153:13)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc5, #loc6])
#loc196 = loc(fused[#loc7, #loc8])
#loc197 = loc(fused[#loc10, #loc9])
#loc198 = loc(fused[#loc11, #loc12])
#loc199 = loc(fused[#loc14, #loc12])
#loc200 = loc(fused[#loc16, #loc15])
#loc201 = loc(fused[#loc17, #loc18])
#loc202 = loc(fused[#loc20, #loc18])
#loc203 = loc(fused[#loc21, #loc22])
#loc204 = loc(fused[#loc26, #loc27])
#loc205 = loc(fused[#loc28, #loc29])
#loc206 = loc(fused[#loc30, #loc31])
#loc207 = loc(fused[#loc32, #loc33])
#loc208 = loc(fused[#loc34, #loc35])
#loc209 = loc(fused[#loc36, #loc37])
#loc210 = loc(fused[#loc38, #loc39])
#loc211 = loc(fused[#loc40, #loc41])
#loc212 = loc(fused[#loc46, #loc47])
#loc215 = loc(fused[#loc57, #loc58])
#loc216 = loc(fused[#loc61, #loc62])
#loc217 = loc(fused[#loc65, #loc64])
#loc218 = loc(fused[#loc69, #loc70])
#loc219 = loc(fused[#loc71, #loc72])
#loc220 = loc(fused[#loc73, #loc74])
#loc221 = loc(fused[#loc76, #loc75])
#loc222 = loc(fused[#loc77, #loc78])
#loc223 = loc(fused[#loc80, #loc78])
#loc224 = loc(fused[#loc82, #loc81])
#loc225 = loc(fused[#loc83, #loc84])
#loc226 = loc(fused[#loc86, #loc87, #loc88, #loc84])
#loc227 = loc(fused[#loc90, #loc91])
#loc228 = loc(fused[#loc92, #loc93])
#loc229 = loc(fused[#loc96, #loc99])
#loc230 = loc(fused[#loc100, #loc101, #loc102, #loc91])
#loc231 = loc(fused[#loc107, #loc108])
#loc232 = loc(fused[#loc109, #loc110])
#loc233 = loc(fused[#loc111, #loc112])
#loc234 = loc(fused[#loc114, #loc113])
#loc235 = loc(fused[#loc115, #loc116])
#loc236 = loc(fused[#loc118, #loc116])
#loc237 = loc(fused[#loc120, #loc119])
#loc238 = loc(fused[#loc121, #loc122])
#loc239 = loc(fused[#loc124, #loc122])
#loc240 = loc(fused[#loc125, #loc126])
#loc241 = loc(fused[#loc127, #loc128])
#loc242 = loc(fused[#loc131, #loc134])
#loc243 = loc(fused[#loc135, #loc136, #loc137, #loc126])
#loc244 = loc(fused[#loc143, #loc144])
#loc245 = loc(fused[#loc145, #loc146])
#loc246 = loc(fused[#loc147, #loc148])
#loc247 = loc(fused[#loc150, #loc149])
#loc248 = loc(fused[#loc151, #loc152])
#loc249 = loc(fused[#loc154, #loc155, #loc156, #loc152])
#loc250 = loc(fused[#loc160, #loc159])
#loc251 = loc(fused[#loc161, #loc162])
#loc252 = loc(fused[#loc164, #loc162])
#loc253 = loc(fused[#loc165, #loc166])
#loc254 = loc(fused[#loc170, #loc171])
#loc255 = loc(fused[#loc172, #loc173])
#loc256 = loc(fused[#loc174, #loc175])
#loc257 = loc(fused[#loc177, #loc176])
#loc258 = loc(fused[#loc178, #loc179])
#loc259 = loc(fused[#loc181, #loc179])
#loc260 = loc(fused[#loc183, #loc182])
#loc261 = loc(fused[#loc184, #loc185])
#loc262 = loc(fused[#loc187, #loc185])
#loc263 = loc(fused[#loc188, #loc189])
