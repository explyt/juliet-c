!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc10 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":56:72)
#loc11 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":56:79)
#loc30 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":75:76)
#loc31 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":75:83)
#loc53 = loc(fused[#loc10, #loc11])
#loc60 = loc(fused[#loc30, #loc31])
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_system_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @system(!cir.ptr<!s8i>) -> !s32i loc(#loc49)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"command execution failed!\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc5)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc51)
  cir.func @CWE78_OS_Command_Injection__char_listen_socket_system_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc53)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc54)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc55)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc16)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc13)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc17)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc55)
    cir.br ^bb1 loc(#loc56)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
    %8 = cir.call @system(%7) : (!cir.ptr<!s8i>) -> !s32i loc(#loc22)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc23)
    %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc57)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc58)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc5)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc27)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc9)
  } loc(#loc52)
  cir.func @CWE78_OS_Command_Injection__char_listen_socket_system_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc30, #loc31])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc60)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc61)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc62)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc36)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc33)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc61)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc37)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc62)
    cir.br ^bb1 loc(#loc63)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    %8 = cir.call @system(%7) : (!cir.ptr<!s8i>) -> !s32i loc(#loc42)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc64)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc65)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc47)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc48)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc47)
    cir.br ^bb3 loc(#loc40)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc40)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc29)
  } loc(#loc59)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":923:1)
#loc2 = loc("/usr/include/stdlib.h":923:41)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":65:19)
#loc6 = loc("/usr/include/stdlib.h":756:1)
#loc7 = loc("/usr/include/stdlib.h":756:70)
#loc8 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":56:1)
#loc9 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":68:1)
#loc12 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":59:5)
#loc13 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":59:34)
#loc14 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":61:5)
#loc15 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":61:28)
#loc16 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":57:1)
#loc17 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":61:21)
#loc18 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":61:20)
#loc19 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":63:5)
#loc20 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":67:5)
#loc21 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":63:16)
#loc22 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":63:9)
#loc23 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":63:25)
#loc24 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":64:5)
#loc25 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":65:9)
#loc26 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":66:9)
#loc27 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":66:14)
#loc28 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":75:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":87:1)
#loc32 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":78:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":78:34)
#loc34 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":80:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":80:28)
#loc36 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":76:1)
#loc37 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":80:21)
#loc38 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":80:20)
#loc39 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":82:5)
#loc40 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":86:5)
#loc41 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":82:16)
#loc42 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":82:9)
#loc43 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":82:25)
#loc44 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":83:5)
#loc45 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":84:19)
#loc46 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":84:9)
#loc47 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":85:9)
#loc48 = loc("CWE78_OS_Command_Injection__char_listen_socket_system_64b.c":85:14)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc3, #loc4])
#loc51 = loc(fused[#loc6, #loc7])
#loc52 = loc(fused[#loc8, #loc9])
#loc54 = loc(fused[#loc12, #loc13])
#loc55 = loc(fused[#loc14, #loc15])
#loc56 = loc(fused[#loc19, #loc20])
#loc57 = loc(fused[#loc22, #loc23])
#loc58 = loc(fused[#loc24, #loc20])
#loc59 = loc(fused[#loc28, #loc29])
#loc61 = loc(fused[#loc32, #loc33])
#loc62 = loc(fused[#loc34, #loc35])
#loc63 = loc(fused[#loc39, #loc40])
#loc64 = loc(fused[#loc42, #loc43])
#loc65 = loc(fused[#loc44, #loc40])
