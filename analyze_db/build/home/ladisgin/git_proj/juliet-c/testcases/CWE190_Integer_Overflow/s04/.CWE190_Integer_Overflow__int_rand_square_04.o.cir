!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":38:16)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":63:16)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:28)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":94:16)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:28)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc167)
  cir.func private @printIntLine(!s32i) loc(#loc168)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb1 loc(#loc173)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc174)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc17)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc17)
    cir.br ^bb5(%20 : !u32i) loc(#loc17)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc17)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc17)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc17)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc17)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc17)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc17)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc17)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc17)
    cir.br ^bb5(%36 : !u32i) loc(#loc17)
  ^bb5(%37: !u32i loc("CWE190_Integer_Overflow__int_rand_square_04.c":38:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc17)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc176)
  ^bb9:  // pred: ^bb8
    %39 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %40 ^bb10, ^bb13 loc(#loc177)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc178)
  ^bb11:  // pred: ^bb10
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %42 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %43 = cir.binop(mul, %41, %42) nsw : !s32i loc(#loc25)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc27)
    cir.br ^bb12 loc(#loc24)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc20)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc20)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc6)
  } loc(#loc169)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc179)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc49)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc190)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc55)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc55)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc55)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc55)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc55)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc55)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc55)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc55)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc55)
    cir.br ^bb5(%20 : !u32i) loc(#loc55)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc55)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc55)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc55)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc55)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc55)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc55)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc55)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc55)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc55)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc55)
    cir.br ^bb5(%36 : !u32i) loc(#loc55)
  ^bb5(%37: !u32i loc("CWE190_Integer_Overflow__int_rand_square_04.c":63:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc55)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc55)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.br ^bb7 loc(#loc52)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc52)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc192)
  ^bb9:  // pred: ^bb8
    %39 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %40 ^bb10, ^bb11 loc(#loc193)
  ^bb10:  // pred: ^bb9
    %41 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    cir.br ^bb25 loc(#loc61)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc194)
  ^bb12:  // pred: ^bb11
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %44 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
    %45 = cir.unary(minus, %44) : !s32i, !s32i loc(#loc67)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %47 = cir.binop(sub, %45, %46) nsw : !s32i loc(#loc67)
    %48 = cir.cmp(gt, %43, %47) : !s32i, !cir.bool loc(#loc195)
    cir.brcond %48 ^bb13, ^bb18 loc(#loc68)
  ^bb13:  // pred: ^bb12
    %49 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %50 = cir.abs %49 poison : !s32i loc(#loc70)
    %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc70)
    %52 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc71)
    %53 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
    %54 = cir.cast(int_to_float, %53 : !s32i), !cir.double loc(#loc72)
    %55 = cir.call @sqrt(%54) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc71)
    %56 = cir.cast(float_to_int, %55 : !cir.double), !s64i loc(#loc71)
    %57 = cir.cmp(lt, %51, %56) : !s64i, !cir.bool loc(#loc196)
    cir.brcond %57 ^bb14, ^bb15 loc(#loc68)
  ^bb14:  // pred: ^bb13
    %58 = cir.const #true loc(#loc68)
    cir.br ^bb16(%58 : !cir.bool) loc(#loc68)
  ^bb15:  // pred: ^bb13
    %59 = cir.const #false loc(#loc68)
    cir.br ^bb16(%59 : !cir.bool) loc(#loc68)
  ^bb16(%60: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:28)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc68)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19(%60 : !cir.bool) loc(#loc68)
  ^bb18:  // pred: ^bb12
    %61 = cir.const #false loc(#loc68)
    cir.br ^bb19(%61 : !cir.bool) loc(#loc68)
  ^bb19(%62: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:28)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc68)
  ^bb20:  // pred: ^bb19
    cir.brcond %62 ^bb21, ^bb22 loc(#loc197)
  ^bb21:  // pred: ^bb20
    %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %64 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %65 = cir.binop(mul, %63, %64) nsw : !s32i loc(#loc77)
    cir.store %65, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %66 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.call @printIntLine(%66) : (!s32i) -> () loc(#loc79)
    cir.br ^bb23 loc(#loc75)
  ^bb22:  // pred: ^bb20
    %67 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
    %68 = cir.cast(array_to_ptrdecay, %67 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%68) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb23 loc(#loc65)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc65)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc58)
  ^bb25:  // 2 preds: ^bb10, ^bb24
    cir.br ^bb26 loc(#loc58)
  ^bb26:  // pred: ^bb25
    cir.return loc(#loc44)
  } loc(#loc185)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb1 loc(#loc202)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc91)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc203)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc93)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc93)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc93)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc93)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc93)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc93)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc93)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc93)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc93)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc93)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc93)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc93)
    cir.br ^bb5(%20 : !u32i) loc(#loc93)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc93)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc93)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc93)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc93)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc93)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc93)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc93)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc93)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc93)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc93)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc93)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc93)
    cir.br ^bb5(%36 : !u32i) loc(#loc93)
  ^bb5(%37: !u32i loc("CWE190_Integer_Overflow__int_rand_square_04.c":94:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc93)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc93)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.br ^bb7 loc(#loc90)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc90)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc205)
  ^bb9:  // pred: ^bb8
    %39 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %40 ^bb10, ^bb24 loc(#loc206)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc207)
  ^bb11:  // pred: ^bb10
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %42 = cir.const #cir.int<2147483647> : !s32i loc(#loc102)
    %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc102)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc102)
    %46 = cir.cmp(gt, %41, %45) : !s32i, !cir.bool loc(#loc208)
    cir.brcond %46 ^bb12, ^bb17 loc(#loc103)
  ^bb12:  // pred: ^bb11
    %47 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %48 = cir.abs %47 poison : !s32i loc(#loc105)
    %49 = cir.cast(integral, %48 : !s32i), !s64i loc(#loc105)
    %50 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc106)
    %51 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
    %52 = cir.cast(int_to_float, %51 : !s32i), !cir.double loc(#loc107)
    %53 = cir.call @sqrt(%52) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc106)
    %54 = cir.cast(float_to_int, %53 : !cir.double), !s64i loc(#loc106)
    %55 = cir.cmp(lt, %49, %54) : !s64i, !cir.bool loc(#loc209)
    cir.brcond %55 ^bb13, ^bb14 loc(#loc103)
  ^bb13:  // pred: ^bb12
    %56 = cir.const #true loc(#loc103)
    cir.br ^bb15(%56 : !cir.bool) loc(#loc103)
  ^bb14:  // pred: ^bb12
    %57 = cir.const #false loc(#loc103)
    cir.br ^bb15(%57 : !cir.bool) loc(#loc103)
  ^bb15(%58: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc103)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18(%58 : !cir.bool) loc(#loc103)
  ^bb17:  // pred: ^bb11
    %59 = cir.const #false loc(#loc103)
    cir.br ^bb18(%59 : !cir.bool) loc(#loc103)
  ^bb18(%60: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:28)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc103)
  ^bb19:  // pred: ^bb18
    cir.brcond %60 ^bb20, ^bb21 loc(#loc210)
  ^bb20:  // pred: ^bb19
    %61 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %62 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %63 = cir.binop(mul, %61, %62) nsw : !s32i loc(#loc112)
    cir.store %63, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %64 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call @printIntLine(%64) : (!s32i) -> () loc(#loc114)
    cir.br ^bb22 loc(#loc110)
  ^bb21:  // pred: ^bb19
    %65 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc115)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%66) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb22 loc(#loc100)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc100)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc96)
  ^bb24:  // 2 preds: ^bb9, ^bb23
    cir.br ^bb25 loc(#loc96)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc82)
  } loc(#loc198)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb1 loc(#loc215)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc127)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc216)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    cir.br ^bb4 loc(#loc129)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc133)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc126)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc218)
  ^bb6:  // pred: ^bb5
    %8 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc137)
    cir.brcond %9 ^bb7, ^bb10 loc(#loc219)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc220)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc141)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc143)
    cir.br ^bb9 loc(#loc140)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc136)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc136)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc118)
  } loc(#loc211)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc223)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc150)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb1 loc(#loc225)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc154)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc226)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc156)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.br ^bb3 loc(#loc153)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc153)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc228)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc160)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc229)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc230)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc164)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc166)
    cir.br ^bb8 loc(#loc163)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc159)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc159)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc145)
  } loc(#loc221)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":30:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":48:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":44:13)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":44:33)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":32:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":32:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":34:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":34:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":35:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":39:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":35:8)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":38:9)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":40:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":47:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":40:8)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":41:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":42:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":46:9)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":44:26)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":45:26)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":45:13)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":158:1)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":164:1)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":160:5)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":160:14)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":161:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":161:14)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":162:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":162:14)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":163:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":163:14)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":68:19)
#loc41 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":80:23)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":55:1)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":83:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":75:13)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":75:33)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":57:5)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":57:9)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":59:12)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":59:5)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":60:5)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":64:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":60:8)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":61:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":63:9)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":65:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":82:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":65:8)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":66:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":69:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":71:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":68:9)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:9)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":81:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:13)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:20)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:35)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:31)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:49)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:62)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":73:69)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":74:9)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":77:9)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":79:9)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":75:26)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":76:26)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":76:13)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":80:13)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":86:1)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":109:1)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":101:13)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":101:33)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":88:5)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":88:9)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":90:12)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":90:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":91:5)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":95:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":91:8)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":92:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":94:9)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":96:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":108:5)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":96:8)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":97:5)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:9)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":107:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:13)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:20)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:35)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:31)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:49)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:62)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":99:69)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":100:9)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":103:9)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":105:9)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":101:26)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":102:26)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":102:13)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":106:23)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":106:13)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":112:1)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":135:1)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":131:13)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":131:33)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":114:5)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":114:9)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":116:12)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":116:5)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":117:5)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":126:5)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":117:8)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":118:5)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":121:5)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":123:5)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":120:19)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":120:9)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":125:16)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":125:9)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":127:5)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":134:5)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":127:8)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":128:5)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":129:9)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":133:9)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":131:26)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":132:26)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":132:13)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":138:1)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":156:1)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":152:13)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":152:33)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":140:5)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":140:9)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":142:12)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":142:5)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":143:5)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":147:5)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":143:8)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":144:5)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":146:16)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":146:9)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":148:5)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":155:5)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":148:8)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":149:5)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":150:9)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":154:9)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":152:26)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":153:26)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_square_04.c":153:13)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc7, #loc8])
#loc171 = loc(fused[#loc9, #loc10])
#loc172 = loc(fused[#loc12, #loc11])
#loc173 = loc(fused[#loc13, #loc14])
#loc174 = loc(fused[#loc16, #loc14])
#loc175 = loc(fused[#loc18, #loc17])
#loc176 = loc(fused[#loc19, #loc20])
#loc177 = loc(fused[#loc22, #loc20])
#loc178 = loc(fused[#loc23, #loc24])
#loc179 = loc(fused[#loc28, #loc29])
#loc180 = loc(fused[#loc30, #loc31])
#loc181 = loc(fused[#loc32, #loc33])
#loc182 = loc(fused[#loc34, #loc35])
#loc183 = loc(fused[#loc36, #loc37])
#loc184 = loc(fused[#loc38, #loc39])
#loc185 = loc(fused[#loc43, #loc44])
#loc186 = loc(fused[#loc45, #loc46])
#loc187 = loc(fused[#loc47, #loc48])
#loc188 = loc(fused[#loc50, #loc49])
#loc189 = loc(fused[#loc51, #loc52])
#loc190 = loc(fused[#loc54, #loc52])
#loc191 = loc(fused[#loc56, #loc55])
#loc192 = loc(fused[#loc57, #loc58])
#loc193 = loc(fused[#loc60, #loc61, #loc62, #loc58])
#loc194 = loc(fused[#loc64, #loc65])
#loc195 = loc(fused[#loc66, #loc67])
#loc196 = loc(fused[#loc70, #loc73])
#loc197 = loc(fused[#loc74, #loc75, #loc76, #loc65])
#loc198 = loc(fused[#loc81, #loc82])
#loc199 = loc(fused[#loc83, #loc84])
#loc200 = loc(fused[#loc85, #loc86])
#loc201 = loc(fused[#loc88, #loc87])
#loc202 = loc(fused[#loc89, #loc90])
#loc203 = loc(fused[#loc92, #loc90])
#loc204 = loc(fused[#loc94, #loc93])
#loc205 = loc(fused[#loc95, #loc96])
#loc206 = loc(fused[#loc98, #loc96])
#loc207 = loc(fused[#loc99, #loc100])
#loc208 = loc(fused[#loc101, #loc102])
#loc209 = loc(fused[#loc105, #loc108])
#loc210 = loc(fused[#loc109, #loc110, #loc111, #loc100])
#loc211 = loc(fused[#loc117, #loc118])
#loc212 = loc(fused[#loc119, #loc120])
#loc213 = loc(fused[#loc121, #loc122])
#loc214 = loc(fused[#loc124, #loc123])
#loc215 = loc(fused[#loc125, #loc126])
#loc216 = loc(fused[#loc128, #loc129, #loc130, #loc126])
#loc217 = loc(fused[#loc134, #loc133])
#loc218 = loc(fused[#loc135, #loc136])
#loc219 = loc(fused[#loc138, #loc136])
#loc220 = loc(fused[#loc139, #loc140])
#loc221 = loc(fused[#loc144, #loc145])
#loc222 = loc(fused[#loc146, #loc147])
#loc223 = loc(fused[#loc148, #loc149])
#loc224 = loc(fused[#loc151, #loc150])
#loc225 = loc(fused[#loc152, #loc153])
#loc226 = loc(fused[#loc155, #loc153])
#loc227 = loc(fused[#loc157, #loc156])
#loc228 = loc(fused[#loc158, #loc159])
#loc229 = loc(fused[#loc161, #loc159])
#loc230 = loc(fused[#loc162, #loc163])
