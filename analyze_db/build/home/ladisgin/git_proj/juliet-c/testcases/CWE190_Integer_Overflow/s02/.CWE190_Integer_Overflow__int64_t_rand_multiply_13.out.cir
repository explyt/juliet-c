!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":29:25)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":171:10)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":171:14)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":171:20)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":171:32)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":54:25)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":87:25)
#loc243 = loc(fused[#loc57, #loc58])
#loc244 = loc(fused[#loc59, #loc60])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc217)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc218)
  cir.func private @printLongLongLine(!s64i) loc(#loc219)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc13)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc223)
    cir.br ^bb1 loc(#loc224)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc18)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc225)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc226)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc20)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc20)
    %13 = cir.const #cir.int<60> : !s32i loc(#loc20)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc20)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc20)
    %17 = cir.const #cir.int<45> : !s32i loc(#loc20)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc20)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc20)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc20)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc20)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc20)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc20)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc20)
    %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc20)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc20)
    %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc20)
    cir.br ^bb5(%32 : !u64i) loc(#loc20)
  ^bb4:  // pred: ^bb2
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc20)
    %35 = cir.const #cir.int<60> : !s32i loc(#loc20)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc20)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc20)
    %39 = cir.const #cir.int<45> : !s32i loc(#loc20)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc20)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc20)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc20)
    %44 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc20)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc20)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc20)
    %49 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %50 = cir.shift(left, %48 : !u64i, %49 : !s32i) -> !u64i loc(#loc20)
    %51 = cir.binop(xor, %46, %50) : !u64i loc(#loc20)
    %52 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc20)
    %54 = cir.binop(xor, %51, %53) : !u64i loc(#loc20)
    %55 = cir.unary(minus, %54) : !u64i, !u64i loc(#loc20)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc20)
    %58 = cir.binop(sub, %55, %57) : !u64i loc(#loc20)
    cir.br ^bb5(%58 : !u64i) loc(#loc20)
  ^bb5(%59: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":29:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    %60 = cir.cast(integral, %59 : !u64i), !s64i loc(#loc20)
    cir.store %60, %1 : !s64i, !cir.ptr<!s64i> loc(#loc227)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc228)
  ^bb9:  // pred: ^bb8
    %61 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %62 = cir.load %61 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %63 = cir.const #cir.int<5> : !s32i loc(#loc25)
    %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc229)
    cir.brcond %64 ^bb10, ^bb15 loc(#loc230)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc231)
  ^bb11:  // pred: ^bb10
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    %66 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %67 = cir.cast(integral, %66 : !s32i), !s64i loc(#loc30)
    %68 = cir.cmp(gt, %65, %67) : !s64i, !cir.bool loc(#loc232)
    cir.brcond %68 ^bb12, ^bb13 loc(#loc233)
  ^bb12:  // pred: ^bb11
    %69 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc32)
    %70 = cir.const #cir.int<2> : !s32i loc(#loc10)
    %71 = cir.cast(integral, %70 : !s32i), !s64i loc(#loc10)
    %72 = cir.binop(mul, %69, %71) nsw : !s64i loc(#loc32)
    cir.store %72, %0 : !s64i, !cir.ptr<!s64i> loc(#loc221)
    %73 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc33)
    cir.call @printLongLongLine(%73) : (!s64i) -> () loc(#loc34)
    cir.br ^bb13 loc(#loc28)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc28)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc23)
  ^bb15:  // 2 preds: ^bb9, ^bb14
    cir.br ^bb16 loc(#loc23)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc8)
  } loc(#loc220)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc234)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc239)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc240)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc54)
  cir.func @main(%arg0: !s32i loc(fused[#loc57, #loc58]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc59, #loc60])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc244)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc56)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc61)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc62)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc63)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc63)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc64)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc51)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_13_good : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_13_good() : () -> () loc(#loc66)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc52)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc53)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_13_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_13_bad() : () -> () loc(#loc70)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc54)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    cir.return %17 : !s32i loc(#loc247)
  } loc(#loc242)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc250)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc83)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc88)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc253)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc254)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc90)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc90)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc90)
    %13 = cir.const #cir.int<60> : !s32i loc(#loc90)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc90)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc90)
    %17 = cir.const #cir.int<45> : !s32i loc(#loc90)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc90)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc90)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc90)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc90)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc90)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc90)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc90)
    %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc90)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc90)
    %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc90)
    cir.br ^bb5(%32 : !u64i) loc(#loc90)
  ^bb4:  // pred: ^bb2
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc90)
    %35 = cir.const #cir.int<60> : !s32i loc(#loc90)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc90)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc90)
    %39 = cir.const #cir.int<45> : !s32i loc(#loc90)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc90)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc90)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc90)
    %44 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc90)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc90)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc90)
    %49 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %50 = cir.shift(left, %48 : !u64i, %49 : !s32i) -> !u64i loc(#loc90)
    %51 = cir.binop(xor, %46, %50) : !u64i loc(#loc90)
    %52 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc90)
    %54 = cir.binop(xor, %51, %53) : !u64i loc(#loc90)
    %55 = cir.unary(minus, %54) : !u64i, !u64i loc(#loc90)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc90)
    %58 = cir.binop(sub, %55, %57) : !u64i loc(#loc90)
    cir.br ^bb5(%58 : !u64i) loc(#loc90)
  ^bb5(%59: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":54:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc90)
  ^bb6:  // pred: ^bb5
    %60 = cir.cast(integral, %59 : !u64i), !s64i loc(#loc90)
    cir.store %60, %1 : !s64i, !cir.ptr<!s64i> loc(#loc255)
    cir.br ^bb7 loc(#loc86)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc86)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc256)
  ^bb9:  // pred: ^bb8
    %61 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %62 = cir.load %61 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %63 = cir.const #cir.int<5> : !s32i loc(#loc95)
    %64 = cir.cmp(ne, %62, %63) : !s32i, !cir.bool loc(#loc257)
    cir.brcond %64 ^bb10, ^bb11 loc(#loc258)
  ^bb10:  // pred: ^bb9
    %65 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%66) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb21 loc(#loc97)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc259)
  ^bb12:  // pred: ^bb11
    %67 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc102)
    %68 = cir.const #cir.int<0> : !s32i loc(#loc103)
    %69 = cir.cast(integral, %68 : !s32i), !s64i loc(#loc103)
    %70 = cir.cmp(gt, %67, %69) : !s64i, !cir.bool loc(#loc260)
    cir.brcond %70 ^bb13, ^bb19 loc(#loc261)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc262)
  ^bb14:  // pred: ^bb13
    %71 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc107)
    %72 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc108)
    %73 = cir.const #cir.int<2> : !s32i loc(#loc109)
    %74 = cir.cast(integral, %73 : !s32i), !s64i loc(#loc109)
    %75 = cir.binop(div, %72, %74) : !s64i loc(#loc263)
    %76 = cir.cmp(lt, %71, %75) : !s64i, !cir.bool loc(#loc264)
    cir.brcond %76 ^bb15, ^bb16 loc(#loc265)
  ^bb15:  // pred: ^bb14
    %77 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc114)
    %78 = cir.const #cir.int<2> : !s32i loc(#loc80)
    %79 = cir.cast(integral, %78 : !s32i), !s64i loc(#loc80)
    %80 = cir.binop(mul, %77, %79) nsw : !s64i loc(#loc114)
    cir.store %80, %0 : !s64i, !cir.ptr<!s64i> loc(#loc249)
    %81 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc115)
    cir.call @printLongLongLine(%81) : (!s64i) -> () loc(#loc116)
    cir.br ^bb17 loc(#loc112)
  ^bb16:  // pred: ^bb14
    %82 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc76)
    %83 = cir.cast(array_to_ptrdecay, %82 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%83) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    cir.br ^bb17 loc(#loc106)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc106)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc101)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc101)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc93)
  ^bb21:  // 2 preds: ^bb10, ^bb20
    cir.br ^bb22 loc(#loc93)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc78)
  } loc(#loc248)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc267)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc268)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc124)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc269)
    cir.br ^bb1 loc(#loc270)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc129)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc271)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc272)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc131)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc131)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc131)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc131)
    %13 = cir.const #cir.int<60> : !s32i loc(#loc131)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc131)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc131)
    %17 = cir.const #cir.int<45> : !s32i loc(#loc131)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc131)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc131)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc131)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc131)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc131)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc131)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc131)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc131)
    %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc131)
    %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc131)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc131)
    %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc131)
    cir.br ^bb5(%32 : !u64i) loc(#loc131)
  ^bb4:  // pred: ^bb2
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc131)
    %35 = cir.const #cir.int<60> : !s32i loc(#loc131)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc131)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc131)
    %39 = cir.const #cir.int<45> : !s32i loc(#loc131)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc131)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc131)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc131)
    %44 = cir.const #cir.int<30> : !s32i loc(#loc131)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc131)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc131)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc131)
    %49 = cir.const #cir.int<15> : !s32i loc(#loc131)
    %50 = cir.shift(left, %48 : !u64i, %49 : !s32i) -> !u64i loc(#loc131)
    %51 = cir.binop(xor, %46, %50) : !u64i loc(#loc131)
    %52 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc131)
    %54 = cir.binop(xor, %51, %53) : !u64i loc(#loc131)
    %55 = cir.unary(minus, %54) : !u64i, !u64i loc(#loc131)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc131)
    %58 = cir.binop(sub, %55, %57) : !u64i loc(#loc131)
    cir.br ^bb5(%58 : !u64i) loc(#loc131)
  ^bb5(%59: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":87:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc131)
  ^bb6:  // pred: ^bb5
    %60 = cir.cast(integral, %59 : !u64i), !s64i loc(#loc131)
    cir.store %60, %1 : !s64i, !cir.ptr<!s64i> loc(#loc273)
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc127)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc274)
  ^bb9:  // pred: ^bb8
    %61 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %62 = cir.load %61 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    %63 = cir.const #cir.int<5> : !s32i loc(#loc136)
    %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc275)
    cir.brcond %64 ^bb10, ^bb20 loc(#loc276)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc277)
  ^bb11:  // pred: ^bb10
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc140)
    %66 = cir.const #cir.int<0> : !s32i loc(#loc141)
    %67 = cir.cast(integral, %66 : !s32i), !s64i loc(#loc141)
    %68 = cir.cmp(gt, %65, %67) : !s64i, !cir.bool loc(#loc278)
    cir.brcond %68 ^bb12, ^bb18 loc(#loc279)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc280)
  ^bb13:  // pred: ^bb12
    %69 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc145)
    %70 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc146)
    %71 = cir.const #cir.int<2> : !s32i loc(#loc147)
    %72 = cir.cast(integral, %71 : !s32i), !s64i loc(#loc147)
    %73 = cir.binop(div, %70, %72) : !s64i loc(#loc281)
    %74 = cir.cmp(lt, %69, %73) : !s64i, !cir.bool loc(#loc282)
    cir.brcond %74 ^bb14, ^bb15 loc(#loc283)
  ^bb14:  // pred: ^bb13
    %75 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc152)
    %76 = cir.const #cir.int<2> : !s32i loc(#loc121)
    %77 = cir.cast(integral, %76 : !s32i), !s64i loc(#loc121)
    %78 = cir.binop(mul, %75, %77) nsw : !s64i loc(#loc152)
    cir.store %78, %0 : !s64i, !cir.ptr<!s64i> loc(#loc267)
    %79 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc153)
    cir.call @printLongLongLine(%79) : (!s64i) -> () loc(#loc154)
    cir.br ^bb16 loc(#loc150)
  ^bb15:  // pred: ^bb13
    %80 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc155)
    %81 = cir.cast(array_to_ptrdecay, %80 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%81) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    cir.br ^bb16 loc(#loc144)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc144)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc139)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc139)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc134)
  ^bb20:  // 2 preds: ^bb9, ^bb19
    cir.br ^bb21 loc(#loc134)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc119)
  } loc(#loc266)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc285)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc286)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc163)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc287)
    cir.br ^bb1 loc(#loc288)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc168)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc289)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc290)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc173)
    cir.br ^bb4 loc(#loc170)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc174)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc174)
    cir.store %10, %1 : !s64i, !cir.ptr<!s64i> loc(#loc291)
    cir.br ^bb4 loc(#loc166)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc166)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc292)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %13 = cir.const #cir.int<5> : !s32i loc(#loc179)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc293)
    cir.brcond %14 ^bb7, ^bb12 loc(#loc294)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc295)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc183)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc184)
    %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc184)
    %18 = cir.cmp(gt, %15, %17) : !s64i, !cir.bool loc(#loc296)
    cir.brcond %18 ^bb9, ^bb10 loc(#loc297)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc186)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc160)
    %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc160)
    %22 = cir.binop(mul, %19, %21) nsw : !s64i loc(#loc186)
    cir.store %22, %0 : !s64i, !cir.ptr<!s64i> loc(#loc285)
    %23 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc187)
    cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc188)
    cir.br ^bb10 loc(#loc182)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc182)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc177)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc177)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc158)
  } loc(#loc284)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc299)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc300)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc195)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc301)
    cir.br ^bb1 loc(#loc302)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc199)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc200)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc303)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc304)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc202)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc202)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc305)
    cir.br ^bb3 loc(#loc198)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc198)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc306)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc217)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc206)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc207)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc307)
    cir.brcond %12 ^bb6, ^bb11 loc(#loc308)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc309)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc211)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc212)
    %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc212)
    %16 = cir.cmp(gt, %13, %15) : !s64i, !cir.bool loc(#loc310)
    cir.brcond %16 ^bb8, ^bb9 loc(#loc311)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc214)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc192)
    %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc192)
    %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc214)
    cir.store %20, %0 : !s64i, !cir.ptr<!s64i> loc(#loc299)
    %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc215)
    cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc216)
    cir.br ^bb9 loc(#loc210)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc210)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc205)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc205)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc190)
  } loc(#loc298)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":22:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":40:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":36:13)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":36:37)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":24:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":24:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":25:12)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":25:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":26:8)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":26:27)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":27:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":29:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":39:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":31:8)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":31:27)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":32:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":33:9)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":38:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":33:12)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":33:19)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":34:9)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":36:30)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":37:31)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":37:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":154:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":160:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":156:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":156:14)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":157:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":157:14)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":158:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":158:14)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":159:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":159:14)
#loc45 = loc("/usr/include/stdlib.h":575:1)
#loc46 = loc("/usr/include/stdlib.h":575:41)
#loc47 = loc("/usr/include/time.h":76:1)
#loc48 = loc("/usr/include/time.h":76:38)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":176:15)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":178:15)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":181:15)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":183:15)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":171:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":186:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":172:1)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":174:27)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":174:22)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":174:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":176:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":177:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":177:60)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":178:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":181:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":182:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":182:59)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":183:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":185:12)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":185:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":59:19)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":73:27)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":47:1)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":77:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":68:17)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":68:41)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":49:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":49:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":50:12)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":50:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":51:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":55:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":51:8)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":51:27)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":52:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":54:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":56:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":76:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":56:8)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":56:27)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":57:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":60:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":62:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":59:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":63:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":75:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":63:12)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":63:19)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":64:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":66:13)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":74:13)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":66:17)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":66:25)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":66:35)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":66:36)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":67:13)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":70:13)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":72:13)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":68:34)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":69:35)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":69:17)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":73:17)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":80:1)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":105:1)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":96:17)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":96:41)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":82:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":82:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":83:12)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":83:5)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":84:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":88:5)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":84:8)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":84:27)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":85:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":87:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":89:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":104:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":89:8)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":89:27)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":90:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":91:9)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":103:9)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":91:12)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":91:19)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":92:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":94:13)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":102:13)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":94:17)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":94:25)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":94:35)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":94:36)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":95:13)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":98:13)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":100:13)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":96:34)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":97:35)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":97:17)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":101:27)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":101:17)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":108:1)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":131:1)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":127:13)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":127:37)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":110:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":110:13)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":111:12)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":111:5)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":112:5)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":121:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":112:8)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":112:27)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":113:5)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":116:5)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":118:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":115:19)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":115:9)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":120:16)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":120:9)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":122:5)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":130:5)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":122:8)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":122:27)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":123:5)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":124:9)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":129:9)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":124:12)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":124:19)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":125:9)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":127:30)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":128:31)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":128:13)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":134:1)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":152:1)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":148:13)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":148:37)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":136:5)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":136:13)
#loc195 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":137:12)
#loc196 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":137:5)
#loc197 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":138:5)
#loc198 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":142:5)
#loc199 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":138:8)
#loc200 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":138:27)
#loc201 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":139:5)
#loc202 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":141:16)
#loc203 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":141:9)
#loc204 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":143:5)
#loc205 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":151:5)
#loc206 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":143:8)
#loc207 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":143:27)
#loc208 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":144:5)
#loc209 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":145:9)
#loc210 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":150:9)
#loc211 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":145:12)
#loc212 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":145:19)
#loc213 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":146:9)
#loc214 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":148:30)
#loc215 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":149:31)
#loc216 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_13.c":149:13)
#loc217 = loc(fused[#loc1, #loc2])
#loc218 = loc(fused[#loc3, #loc4])
#loc219 = loc(fused[#loc5, #loc6])
#loc220 = loc(fused[#loc7, #loc8])
#loc221 = loc(fused[#loc9, #loc10])
#loc222 = loc(fused[#loc11, #loc12])
#loc223 = loc(fused[#loc14, #loc13])
#loc224 = loc(fused[#loc15, #loc16])
#loc225 = loc(fused[#loc17, #loc18])
#loc226 = loc(fused[#loc19, #loc16])
#loc227 = loc(fused[#loc21, #loc20])
#loc228 = loc(fused[#loc22, #loc23])
#loc229 = loc(fused[#loc24, #loc25])
#loc230 = loc(fused[#loc26, #loc23])
#loc231 = loc(fused[#loc27, #loc28])
#loc232 = loc(fused[#loc29, #loc30])
#loc233 = loc(fused[#loc31, #loc28])
#loc234 = loc(fused[#loc35, #loc36])
#loc235 = loc(fused[#loc37, #loc38])
#loc236 = loc(fused[#loc39, #loc40])
#loc237 = loc(fused[#loc41, #loc42])
#loc238 = loc(fused[#loc43, #loc44])
#loc239 = loc(fused[#loc45, #loc46])
#loc240 = loc(fused[#loc47, #loc48])
#loc241 = loc(fused[#loc49, #loc50])
#loc242 = loc(fused[#loc55, #loc56])
#loc245 = loc(fused[#loc66, #loc67])
#loc246 = loc(fused[#loc70, #loc71])
#loc247 = loc(fused[#loc74, #loc73])
#loc248 = loc(fused[#loc77, #loc78])
#loc249 = loc(fused[#loc79, #loc80])
#loc250 = loc(fused[#loc81, #loc82])
#loc251 = loc(fused[#loc84, #loc83])
#loc252 = loc(fused[#loc85, #loc86])
#loc253 = loc(fused[#loc87, #loc88])
#loc254 = loc(fused[#loc89, #loc86])
#loc255 = loc(fused[#loc91, #loc90])
#loc256 = loc(fused[#loc92, #loc93])
#loc257 = loc(fused[#loc94, #loc95])
#loc258 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc259 = loc(fused[#loc100, #loc101])
#loc260 = loc(fused[#loc102, #loc103])
#loc261 = loc(fused[#loc104, #loc101])
#loc262 = loc(fused[#loc105, #loc106])
#loc263 = loc(fused[#loc108, #loc109])
#loc264 = loc(fused[#loc107, #loc110])
#loc265 = loc(fused[#loc111, #loc112, #loc113, #loc106])
#loc266 = loc(fused[#loc118, #loc119])
#loc267 = loc(fused[#loc120, #loc121])
#loc268 = loc(fused[#loc122, #loc123])
#loc269 = loc(fused[#loc125, #loc124])
#loc270 = loc(fused[#loc126, #loc127])
#loc271 = loc(fused[#loc128, #loc129])
#loc272 = loc(fused[#loc130, #loc127])
#loc273 = loc(fused[#loc132, #loc131])
#loc274 = loc(fused[#loc133, #loc134])
#loc275 = loc(fused[#loc135, #loc136])
#loc276 = loc(fused[#loc137, #loc134])
#loc277 = loc(fused[#loc138, #loc139])
#loc278 = loc(fused[#loc140, #loc141])
#loc279 = loc(fused[#loc142, #loc139])
#loc280 = loc(fused[#loc143, #loc144])
#loc281 = loc(fused[#loc146, #loc147])
#loc282 = loc(fused[#loc145, #loc148])
#loc283 = loc(fused[#loc149, #loc150, #loc151, #loc144])
#loc284 = loc(fused[#loc157, #loc158])
#loc285 = loc(fused[#loc159, #loc160])
#loc286 = loc(fused[#loc161, #loc162])
#loc287 = loc(fused[#loc164, #loc163])
#loc288 = loc(fused[#loc165, #loc166])
#loc289 = loc(fused[#loc167, #loc168])
#loc290 = loc(fused[#loc169, #loc170, #loc171, #loc166])
#loc291 = loc(fused[#loc175, #loc174])
#loc292 = loc(fused[#loc176, #loc177])
#loc293 = loc(fused[#loc178, #loc179])
#loc294 = loc(fused[#loc180, #loc177])
#loc295 = loc(fused[#loc181, #loc182])
#loc296 = loc(fused[#loc183, #loc184])
#loc297 = loc(fused[#loc185, #loc182])
#loc298 = loc(fused[#loc189, #loc190])
#loc299 = loc(fused[#loc191, #loc192])
#loc300 = loc(fused[#loc193, #loc194])
#loc301 = loc(fused[#loc196, #loc195])
#loc302 = loc(fused[#loc197, #loc198])
#loc303 = loc(fused[#loc199, #loc200])
#loc304 = loc(fused[#loc201, #loc198])
#loc305 = loc(fused[#loc203, #loc202])
#loc306 = loc(fused[#loc204, #loc205])
#loc307 = loc(fused[#loc206, #loc207])
#loc308 = loc(fused[#loc208, #loc205])
#loc309 = loc(fused[#loc209, #loc210])
#loc310 = loc(fused[#loc211, #loc212])
#loc311 = loc(fused[#loc213, #loc210])
