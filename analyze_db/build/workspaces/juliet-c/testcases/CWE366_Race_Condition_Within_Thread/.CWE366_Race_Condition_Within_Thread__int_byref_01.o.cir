!s32i = !cir.int<s, 32>
!ty__stdThread = !cir.record<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.record<struct "_stdThreadLock" incomplete>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":24:23)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":24:29)
#loc97 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":38:24)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":38:30)
#true = #cir.bool<true> : !cir.bool
#loc184 = loc(fused[#loc5, #loc6])
#loc221 = loc(fused[#loc97, #loc98])
module @"/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc182)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc184)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc186)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc185)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc188)
      cir.for : cond {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %7 = cir.const #cir.int<1000000> : !s32i loc(#loc17)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc189)
        cir.condition(%8) loc(#loc18)
      } body {
        cir.scope {
          %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
          %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc21)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc21)
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
          cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc191)
        } loc(#loc190)
        cir.yield loc(#loc13)
      } step {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc26)
        cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        cir.yield loc(#loc187)
      } loc(#loc187)
    } loc(#loc187)
    cir.return loc(#loc4)
  } loc(#loc183)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc193)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc194)
  cir.func private @printIntLine(!s32i) loc(#loc195)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_01_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc198)
      %1 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc199)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valBadSink"] {alignment = 4 : i64} loc(#loc200)
      %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc38)
      cir.store %3, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc198)
      %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc40)
      cir.store %4, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc199)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc43)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      cir.scope {
        %7 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc47)
        %8 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc203)
        %9 = cir.call @stdThreadCreate(%7, %8, %0) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc50)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc50)
        %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc50)
        cir.if %11 {
          %12 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc52)
          cir.store %12, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc205)
        } loc(#loc204)
      } loc(#loc202)
      cir.scope {
        %7 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc56)
        %8 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc207)
        %9 = cir.call @stdThreadCreate(%7, %8, %1) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc59)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc59)
        %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc59)
        cir.if %11 {
          %12 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc61)
          cir.store %12, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc209)
        } loc(#loc208)
      } loc(#loc206)
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc65)
        %8 = cir.cast(ptr_to_bool, %7 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc65)
        %9 = cir.ternary(%8, true {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc67)
          %11 = cir.call @stdThreadJoin(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc68)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc68)
          %13 = cir.ternary(%12, true {
            %14 = cir.const #true loc(#loc66)
            cir.yield %14 : !cir.bool loc(#loc66)
          }, false {
            %14 = cir.const #false loc(#loc66)
            cir.yield %14 : !cir.bool loc(#loc66)
          }) : (!cir.bool) -> !cir.bool loc(#loc66)
          cir.yield %13 : !cir.bool loc(#loc66)
        }, false {
          %10 = cir.const #false loc(#loc66)
          cir.yield %10 : !cir.bool loc(#loc66)
        }) : (!cir.bool) -> !cir.bool loc(#loc66)
        cir.if %9 {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc70)
          %11 = cir.call @stdThreadDestroy(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc71)
        } loc(#loc211)
      } loc(#loc210)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc74)
        %8 = cir.cast(ptr_to_bool, %7 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc74)
        %9 = cir.ternary(%8, true {
          %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc76)
          %11 = cir.call @stdThreadJoin(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc77)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc77)
          %13 = cir.ternary(%12, true {
            %14 = cir.const #true loc(#loc75)
            cir.yield %14 : !cir.bool loc(#loc75)
          }, false {
            %14 = cir.const #false loc(#loc75)
            cir.yield %14 : !cir.bool loc(#loc75)
          }) : (!cir.bool) -> !cir.bool loc(#loc75)
          cir.yield %13 : !cir.bool loc(#loc75)
        }, false {
          %10 = cir.const #false loc(#loc75)
          cir.yield %10 : !cir.bool loc(#loc75)
        }) : (!cir.bool) -> !cir.bool loc(#loc75)
        cir.if %9 {
          %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc79)
          %11 = cir.call @stdThreadDestroy(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc80)
        } loc(#loc213)
      } loc(#loc212)
      %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc82)
    } loc(#loc197)
    cir.return loc(#loc34)
  } loc(#loc196)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_01_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc215)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc85)
    cir.return loc(#loc84)
  } loc(#loc214)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc216)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc217)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc218)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc219)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc97, #loc98])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc223)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc103)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc100)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc100)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc222)
    %5 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc217)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc104)
    cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc105)
    cir.scope {
      %9 = cir.const #cir.int<0> : !s32i loc(#loc108)
      cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc225)
      cir.for : cond {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
        %11 = cir.const #cir.int<1000000> : !s32i loc(#loc111)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc226)
        cir.condition(%12) loc(#loc112)
      } body {
        cir.scope {
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc116)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc115)
          %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
          cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc228)
        } loc(#loc227)
        cir.yield loc(#loc107)
      } step {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc120)
        cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc229)
        cir.yield loc(#loc224)
      } loc(#loc224)
    } loc(#loc224)
    %7 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc217)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc121)
    cir.call @stdThreadLockRelease(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc122)
    cir.return loc(#loc96)
  } loc(#loc220)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc230)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc233)
      %1 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc234)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc235)
      %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc130)
      cir.store %3, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc233)
      %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc132)
      cir.store %4, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc234)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc135)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc236)
      cir.scope {
        %9 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc217)
        %10 = cir.call @stdThreadLockCreate(%9) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc139)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc139)
        %12 = cir.unary(not, %11) : !cir.bool, !cir.bool loc(#loc139)
        cir.if %12 {
          cir.return loc(#loc141)
        } loc(#loc238)
      } loc(#loc237)
      cir.scope {
        %9 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc144)
        %10 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc240)
        %11 = cir.call @stdThreadCreate(%9, %10, %0) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc147)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc147)
        %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc147)
        cir.if %13 {
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc149)
          cir.store %14, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc242)
        } loc(#loc241)
      } loc(#loc239)
      cir.scope {
        %9 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc153)
        %10 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc244)
        %11 = cir.call @stdThreadCreate(%9, %10, %1) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc156)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc156)
        %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc156)
        cir.if %13 {
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc158)
          cir.store %14, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc246)
        } loc(#loc245)
      } loc(#loc243)
      cir.scope {
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc162)
        %10 = cir.cast(ptr_to_bool, %9 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc162)
        %11 = cir.ternary(%10, true {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc164)
          %13 = cir.call @stdThreadJoin(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc165)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc165)
          %15 = cir.ternary(%14, true {
            %16 = cir.const #true loc(#loc163)
            cir.yield %16 : !cir.bool loc(#loc163)
          }, false {
            %16 = cir.const #false loc(#loc163)
            cir.yield %16 : !cir.bool loc(#loc163)
          }) : (!cir.bool) -> !cir.bool loc(#loc163)
          cir.yield %15 : !cir.bool loc(#loc163)
        }, false {
          %12 = cir.const #false loc(#loc163)
          cir.yield %12 : !cir.bool loc(#loc163)
        }) : (!cir.bool) -> !cir.bool loc(#loc163)
        cir.if %11 {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc167)
          %13 = cir.call @stdThreadDestroy(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc168)
        } loc(#loc248)
      } loc(#loc247)
      cir.scope {
        %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc171)
        %10 = cir.cast(ptr_to_bool, %9 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc171)
        %11 = cir.ternary(%10, true {
          %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc173)
          %13 = cir.call @stdThreadJoin(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc174)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc174)
          %15 = cir.ternary(%14, true {
            %16 = cir.const #true loc(#loc172)
            cir.yield %16 : !cir.bool loc(#loc172)
          }, false {
            %16 = cir.const #false loc(#loc172)
            cir.yield %16 : !cir.bool loc(#loc172)
          }) : (!cir.bool) -> !cir.bool loc(#loc172)
          cir.yield %15 : !cir.bool loc(#loc172)
        }, false {
          %12 = cir.const #false loc(#loc172)
          cir.yield %12 : !cir.bool loc(#loc172)
        }) : (!cir.bool) -> !cir.bool loc(#loc172)
        cir.if %11 {
          %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc176)
          %13 = cir.call @stdThreadDestroy(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc177)
        } loc(#loc250)
      } loc(#loc249)
      %6 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc217)
      %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc178)
      cir.call @stdThreadLockDestroy(%7) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc179)
      %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc180)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc181)
    } loc(#loc232)
    cir.return loc(#loc126)
  } loc(#loc231)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_01.c":0:0)
#loc1 = loc("../../testcasesupport/std_thread.h":14:1)
#loc2 = loc("../../testcasesupport/std_thread.h":14:74)
#loc3 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":24:1)
#loc4 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":36:1)
#loc7 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":26:5)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":26:27)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":27:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":27:9)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":25:1)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":32:5)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":35:5)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":32:14)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":32:10)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":32:17)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":32:21)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":32:19)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":33:5)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":34:22)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":34:21)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":34:33)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":34:10)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":34:9)
#loc25 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":32:31)
#loc26 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":32:30)
#loc27 = loc("../../testcasesupport/std_thread.h":15:1)
#loc28 = loc("../../testcasesupport/std_thread.h":15:35)
#loc29 = loc("../../testcasesupport/std_thread.h":16:1)
#loc30 = loc("../../testcasesupport/std_thread.h":16:38)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc33 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":55:1)
#loc34 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":80:1)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":57:5)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":79:5)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":58:9)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":58:29)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":59:9)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":59:29)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":60:9)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":60:13)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":61:22)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":61:9)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":62:9)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":65:9)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":62:30)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":62:48)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":62:49)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":62:14)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":63:9)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":64:23)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":64:13)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":66:9)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":69:9)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":66:30)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":66:48)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":66:49)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":66:14)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":67:9)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":68:23)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":68:13)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":70:9)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":73:9)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":70:13)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":70:21)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":70:38)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":70:24)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":71:9)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":72:30)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":72:13)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":74:9)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":77:9)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":74:13)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":74:21)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":74:38)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":74:24)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":75:9)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":76:30)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":76:13)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":78:22)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":78:9)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":118:1)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":121:1)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":120:5)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":120:11)
#loc87 = loc("../../testcasesupport/std_thread.h":18:1)
#loc88 = loc("../../testcasesupport/std_thread.h":18:44)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":22:1)
#loc90 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":22:34)
#loc91 = loc("../../testcasesupport/std_thread.h":19:1)
#loc92 = loc("../../testcasesupport/std_thread.h":19:45)
#loc93 = loc("../../testcasesupport/std_thread.h":20:1)
#loc94 = loc("../../testcasesupport/std_thread.h":20:45)
#loc95 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":38:1)
#loc96 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":51:1)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":40:5)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":40:28)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":41:5)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":41:9)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":39:1)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":45:26)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":45:5)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":46:5)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":49:5)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":46:14)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":46:10)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":46:17)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":46:21)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":46:19)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":47:5)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":48:22)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":48:21)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":48:33)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":48:10)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":48:9)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":46:31)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":46:30)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":50:26)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":50:5)
#loc123 = loc("../../testcasesupport/std_thread.h":21:1)
#loc124 = loc("../../testcasesupport/std_thread.h":21:45)
#loc125 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":86:1)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":116:1)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":88:5)
#loc128 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":115:5)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":89:9)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":89:29)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":90:9)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":90:29)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":91:9)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":91:13)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":92:23)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":92:9)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":93:9)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":96:9)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":93:14)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":94:9)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":95:13)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":97:9)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":100:9)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":97:30)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":97:49)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":97:50)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":97:14)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":98:9)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":99:23)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":99:13)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":101:9)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":104:9)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":101:30)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":101:49)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":101:50)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":101:14)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":102:9)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":103:23)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":103:13)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":105:9)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":108:9)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":105:13)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":105:21)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":105:38)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":105:24)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":106:9)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":107:30)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":107:13)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":109:9)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":112:9)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":109:13)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":109:21)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":109:38)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":109:24)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":110:9)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":111:30)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":111:13)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":113:30)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":113:9)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":114:22)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__int_byref_01.c":114:9)
#loc182 = loc(fused[#loc1, #loc2])
#loc183 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc7, #loc8])
#loc186 = loc(fused[#loc9, #loc10])
#loc187 = loc(fused[#loc12, #loc13])
#loc188 = loc(fused[#loc15, #loc14])
#loc189 = loc(fused[#loc16, #loc17])
#loc190 = loc(fused[#loc19, #loc13])
#loc191 = loc(fused[#loc24, #loc22])
#loc192 = loc(fused[#loc26, #loc25])
#loc193 = loc(fused[#loc27, #loc28])
#loc194 = loc(fused[#loc29, #loc30])
#loc195 = loc(fused[#loc31, #loc32])
#loc196 = loc(fused[#loc33, #loc34])
#loc197 = loc(fused[#loc35, #loc36])
#loc198 = loc(fused[#loc37, #loc38])
#loc199 = loc(fused[#loc39, #loc40])
#loc200 = loc(fused[#loc41, #loc42])
#loc201 = loc(fused[#loc44, #loc43])
#loc202 = loc(fused[#loc45, #loc46])
#loc203 = loc(fused[#loc48, #loc49])
#loc204 = loc(fused[#loc51, #loc46])
#loc205 = loc(fused[#loc53, #loc52])
#loc206 = loc(fused[#loc54, #loc55])
#loc207 = loc(fused[#loc57, #loc58])
#loc208 = loc(fused[#loc60, #loc55])
#loc209 = loc(fused[#loc62, #loc61])
#loc210 = loc(fused[#loc63, #loc64])
#loc211 = loc(fused[#loc69, #loc64])
#loc212 = loc(fused[#loc72, #loc73])
#loc213 = loc(fused[#loc78, #loc73])
#loc214 = loc(fused[#loc83, #loc84])
#loc215 = loc(fused[#loc85, #loc86])
#loc216 = loc(fused[#loc87, #loc88])
#loc217 = loc(fused[#loc89, #loc90])
#loc218 = loc(fused[#loc91, #loc92])
#loc219 = loc(fused[#loc93, #loc94])
#loc220 = loc(fused[#loc95, #loc96])
#loc222 = loc(fused[#loc99, #loc100])
#loc223 = loc(fused[#loc101, #loc102])
#loc224 = loc(fused[#loc106, #loc107])
#loc225 = loc(fused[#loc109, #loc108])
#loc226 = loc(fused[#loc110, #loc111])
#loc227 = loc(fused[#loc113, #loc107])
#loc228 = loc(fused[#loc118, #loc116])
#loc229 = loc(fused[#loc120, #loc119])
#loc230 = loc(fused[#loc123, #loc124])
#loc231 = loc(fused[#loc125, #loc126])
#loc232 = loc(fused[#loc127, #loc128])
#loc233 = loc(fused[#loc129, #loc130])
#loc234 = loc(fused[#loc131, #loc132])
#loc235 = loc(fused[#loc133, #loc134])
#loc236 = loc(fused[#loc136, #loc135])
#loc237 = loc(fused[#loc137, #loc138])
#loc238 = loc(fused[#loc140, #loc138])
#loc239 = loc(fused[#loc142, #loc143])
#loc240 = loc(fused[#loc145, #loc146])
#loc241 = loc(fused[#loc148, #loc143])
#loc242 = loc(fused[#loc150, #loc149])
#loc243 = loc(fused[#loc151, #loc152])
#loc244 = loc(fused[#loc154, #loc155])
#loc245 = loc(fused[#loc157, #loc152])
#loc246 = loc(fused[#loc159, #loc158])
#loc247 = loc(fused[#loc160, #loc161])
#loc248 = loc(fused[#loc166, #loc161])
#loc249 = loc(fused[#loc169, #loc170])
#loc250 = loc(fused[#loc175, #loc170])
