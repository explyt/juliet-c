!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc99)
  cir.func private  @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc100)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc101)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc103)
  cir.func  @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc106)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc18)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc19)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc107)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc22)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc108)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc109)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc110)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc111)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc30)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc113)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc34)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
      } loc(#loc114)
    } loc(#loc112)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc116)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc38)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc116)
      cir.scope {
        %13 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc118)
        %14 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc118)
        cir.store %14, %13 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc118)
        %15 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc43)
        %16 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
        %17 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc45)
        %18 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc46)
        %19 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc47)
        %20 = cir.call @strlen(%19) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc46)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc48)
        %23 = cir.binop(add, %20, %22) : !u64i loc(#loc119)
        %24 = cir.call @strncpy(%16, %17, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc43)
        %25 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
        cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc50)
        %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc51)
        %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc52)
        cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc51)
      } loc(#loc117)
    } loc(#loc115)
    cir.return loc(#loc14)
  } loc(#loc104)
  cir.func internal private  @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc122)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc59)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc123)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc61)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc62)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc62)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc62)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc124)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc125)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc61)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc126)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc72)
      %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc129)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc74)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc75)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc76)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc74)
      } loc(#loc130)
    } loc(#loc128)
    cir.scope {
      %12 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc132)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc80)
      %14 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
      cir.store %14, %12 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
      cir.scope {
        %15 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc134)
        %16 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc134)
        cir.store %16, %15 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc134)
        %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc85)
        %18 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
        %19 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc87)
        %20 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc88)
        %21 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc89)
        %22 = cir.call @strlen(%21) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc88)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc90)
        %25 = cir.binop(add, %22, %24) : !u64i loc(#loc135)
        %26 = cir.call @strncpy(%18, %19, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc85)
        %27 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
        cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc92)
        %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc93)
        %29 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc94)
        cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc93)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc54)
  } loc(#loc120)
  cir.func  @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33L7goodG2BEv() : () -> () loc(#loc97)
    cir.return loc(#loc96)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":144:1)
#loc6 = loc("/usr/include/string.h":146:14)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":31:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":50:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":33:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":33:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":34:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":34:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":35:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":35:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":37:20)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":37:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":37:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":37:41)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":37:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":37:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":38:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":38:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":38:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":38:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":38:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":38:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":38:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":38:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":39:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":49:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":40:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":40:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":41:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":48:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":42:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":42:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":45:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":45:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":45:27)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":45:35)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":45:42)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":45:52)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":46:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":46:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":47:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":47:18)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":57:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":76:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":59:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":59:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":60:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":60:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":61:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":61:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":63:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":63:28)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":63:31)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":63:34)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":63:45)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":63:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":63:46)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":63:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":64:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":64:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":64:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":64:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":64:23)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":64:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":64:30)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":64:29)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":65:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":75:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":66:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":66:23)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":67:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":74:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":68:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":68:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":71:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":71:21)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":71:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":71:35)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":71:42)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":71:52)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":72:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":72:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":73:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":73:18)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":78:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":81:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_33.cpp":80:5)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc5, #loc6])
#loc101 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc9, #loc10])
#loc103 = loc(fused[#loc11, #loc12])
#loc104 = loc(fused[#loc13, #loc14])
#loc105 = loc(fused[#loc15, #loc16])
#loc106 = loc(fused[#loc17, #loc18])
#loc107 = loc(fused[#loc20, #loc19])
#loc108 = loc(fused[#loc23, #loc24])
#loc109 = loc(fused[#loc22, #loc24])
#loc110 = loc(fused[#loc21, #loc25])
#loc111 = loc(fused[#loc26, #loc25])
#loc112 = loc(fused[#loc27, #loc28])
#loc113 = loc(fused[#loc29, #loc30])
#loc114 = loc(fused[#loc31, #loc28])
#loc115 = loc(fused[#loc35, #loc36])
#loc116 = loc(fused[#loc37, #loc38])
#loc117 = loc(fused[#loc39, #loc40])
#loc118 = loc(fused[#loc41, #loc42])
#loc119 = loc(fused[#loc46, #loc48])
#loc120 = loc(fused[#loc53, #loc54])
#loc121 = loc(fused[#loc55, #loc56])
#loc122 = loc(fused[#loc57, #loc58])
#loc123 = loc(fused[#loc60, #loc59])
#loc124 = loc(fused[#loc64, #loc65])
#loc125 = loc(fused[#loc66, #loc65])
#loc126 = loc(fused[#loc61, #loc67])
#loc127 = loc(fused[#loc68, #loc67])
#loc128 = loc(fused[#loc69, #loc70])
#loc129 = loc(fused[#loc71, #loc72])
#loc130 = loc(fused[#loc73, #loc70])
#loc131 = loc(fused[#loc77, #loc78])
#loc132 = loc(fused[#loc79, #loc80])
#loc133 = loc(fused[#loc81, #loc82])
#loc134 = loc(fused[#loc83, #loc84])
#loc135 = loc(fused[#loc88, #loc90])
#loc136 = loc(fused[#loc95, #loc96])
