!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":95:10)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":95:14)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":95:20)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":95:32)
#loc204 = loc(fused[#loc88, #loc89])
#loc205 = loc(fused[#loc90, #loc91])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc167)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc168)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc169)
  cir.func private @printIntLine(!s32i) loc(#loc170)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc171)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc18)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc22)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc178)
        cir.condition(%7) loc(#loc26)
      } body {
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc28)
          %7 = cir.binop(and, %5, %6) : !s32i loc(#loc28)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc28)
          %9 = cir.ternary(%8, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc28)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc28)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc28)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc28)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc28)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc28)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc28)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc28)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc28)
            cir.yield %22 : !u32i loc(#loc28)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc28)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc28)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc28)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc28)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc28)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc28)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc28)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc28)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc28)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc28)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc28)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc28)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc28)
            cir.yield %26 : !u32i loc(#loc28)
          }) : (!cir.bool) -> !u32i loc(#loc28)
          %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc28)
          cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc180)
        } loc(#loc179)
        cir.yield loc(#loc21)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc31)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
        cir.yield loc(#loc176)
      } loc(#loc176)
    } loc(#loc176)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc183)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc184)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc38)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc39)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc185)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc186)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc38)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc187)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc188)
      cir.scope {
        %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
        %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc47)
        %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc190)
        cir.if %23 {
          %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc49)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc50)
          %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc51)
          cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc49)
        } loc(#loc191)
      } loc(#loc189)
      cir.scope {
        %20 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc54)
        cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc193)
        cir.for : cond {
          %22 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc56)
          %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc57)
          %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc194)
          cir.condition(%25) loc(#loc58)
        } body {
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc60)
            %23 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc62)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc63)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc196)
          } loc(#loc195)
          cir.yield loc(#loc53)
        } step {
          %22 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc64)
          %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc65)
          cir.store %23, %4 : !u64i, !cir.ptr<!u64i> loc(#loc197)
          cir.yield loc(#loc192)
        } loc(#loc192)
      } loc(#loc192)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc67)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc68)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc69)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc70)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc71)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc70)
    } loc(#loc182)
    cir.return loc(#loc12)
  } loc(#loc172)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc73)
  } loc(#loc198)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc200)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc201)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc85)
  cir.func @main(%arg0: !s32i loc(fused[#loc88, #loc89]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc90, #loc91])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc205)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc87)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc92)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc93)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc94)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc94)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc95)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc82)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %8 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17_good() : () -> () loc(#loc97)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc83)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc84)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %13 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17_bad() : () -> () loc(#loc101)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc85)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc104)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc208)
    cir.return %17 : !s32i loc(#loc208)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc113)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc117)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc215)
        cir.condition(%7) loc(#loc121)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<20> : !s32i loc(#loc123)
          cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
        } loc(#loc216)
        cir.yield loc(#loc116)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc126)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
        cir.yield loc(#loc213)
      } loc(#loc213)
    } loc(#loc213)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc220)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc221)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc133)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc134)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc134)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc222)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc223)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc224)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc225)
      cir.scope {
        %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc141)
        %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc142)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
        %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc227)
        cir.if %23 {
          %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc144)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc145)
          %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc146)
          cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc144)
        } loc(#loc228)
      } loc(#loc226)
      cir.scope {
        %20 = cir.const #cir.int<0> : !s32i loc(#loc149)
        %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc149)
        cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc230)
        cir.for : cond {
          %22 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc151)
          %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc152)
          %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc231)
          cir.condition(%25) loc(#loc153)
        } body {
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc155)
            %23 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc157)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc158)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc233)
          } loc(#loc232)
          cir.yield loc(#loc148)
        } step {
          %22 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc159)
          %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc160)
          cir.store %23, %4 : !u64i, !cir.ptr<!u64i> loc(#loc234)
          cir.yield loc(#loc229)
        } loc(#loc229)
      } loc(#loc229)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc162)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc163)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc161)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc164)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc165)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc166)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc166)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc165)
    } loc(#loc219)
    cir.return loc(#loc107)
  } loc(#loc209)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":21:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":46:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":23:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":23:9)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":24:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":24:9)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":26:13)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":26:12)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":26:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":27:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":31:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":27:13)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":27:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":27:16)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":27:20)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":27:18)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":28:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":30:16)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":30:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":27:24)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":27:23)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":32:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":45:5)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":33:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":33:16)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":34:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":34:14)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":37:28)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":37:35)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":37:42)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":37:52)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":37:53)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":37:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":38:9)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":38:43)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":38:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":38:27)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":38:33)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":38:34)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":38:40)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":38:39)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":39:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":42:9)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":39:18)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":39:14)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":39:21)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":39:33)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":39:23)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":40:9)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":41:29)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":41:13)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":41:24)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":41:25)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":39:40)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":39:39)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":43:22)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":43:33)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":43:34)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":43:9)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":44:9)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":44:14)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":80:1)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":83:1)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":82:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":82:13)
#loc76 = loc("/usr/include/stdlib.h":575:1)
#loc77 = loc("/usr/include/stdlib.h":575:41)
#loc78 = loc("/usr/include/time.h":76:1)
#loc79 = loc("/usr/include/time.h":76:38)
#loc80 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc81 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":100:15)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":102:15)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":105:15)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":107:15)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":95:1)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":110:1)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":96:1)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":98:27)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":98:22)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":98:5)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":100:5)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":101:5)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":101:69)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":102:5)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":105:5)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":106:5)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":106:68)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":107:5)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":109:12)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":109:5)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":53:1)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":78:1)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":55:5)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":55:9)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":56:5)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":56:9)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":58:13)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":58:12)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":58:5)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":59:5)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":63:5)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":59:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":59:9)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":59:16)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":59:20)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":59:18)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":60:5)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":62:16)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":62:9)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":59:24)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":59:23)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":64:5)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":77:5)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":65:9)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":65:16)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":66:9)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":66:14)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":69:28)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":69:35)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":69:42)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":69:52)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":69:53)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":69:9)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":70:9)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":70:43)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":70:13)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":70:27)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":70:33)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":70:34)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":70:40)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":70:39)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":71:9)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":74:9)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":71:18)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":71:14)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":71:21)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":71:33)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":71:23)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":72:9)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":73:29)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":73:13)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":73:24)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":73:25)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":71:40)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":71:39)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":75:22)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":75:33)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":75:34)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":75:9)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":76:9)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_17.c":76:14)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc7, #loc8])
#loc171 = loc(fused[#loc9, #loc10])
#loc172 = loc(fused[#loc11, #loc12])
#loc173 = loc(fused[#loc13, #loc14])
#loc174 = loc(fused[#loc15, #loc16])
#loc175 = loc(fused[#loc19, #loc17])
#loc176 = loc(fused[#loc20, #loc21])
#loc177 = loc(fused[#loc23, #loc22])
#loc178 = loc(fused[#loc24, #loc25])
#loc179 = loc(fused[#loc27, #loc21])
#loc180 = loc(fused[#loc29, #loc28])
#loc181 = loc(fused[#loc31, #loc30])
#loc182 = loc(fused[#loc32, #loc33])
#loc183 = loc(fused[#loc34, #loc35])
#loc184 = loc(fused[#loc36, #loc37])
#loc185 = loc(fused[#loc40, #loc41])
#loc186 = loc(fused[#loc39, #loc41])
#loc187 = loc(fused[#loc38, #loc42])
#loc188 = loc(fused[#loc43, #loc42])
#loc189 = loc(fused[#loc44, #loc45])
#loc190 = loc(fused[#loc46, #loc47])
#loc191 = loc(fused[#loc48, #loc45])
#loc192 = loc(fused[#loc52, #loc53])
#loc193 = loc(fused[#loc55, #loc54])
#loc194 = loc(fused[#loc56, #loc57])
#loc195 = loc(fused[#loc59, #loc53])
#loc196 = loc(fused[#loc61, #loc60])
#loc197 = loc(fused[#loc65, #loc64])
#loc198 = loc(fused[#loc72, #loc73])
#loc199 = loc(fused[#loc74, #loc75])
#loc200 = loc(fused[#loc76, #loc77])
#loc201 = loc(fused[#loc78, #loc79])
#loc202 = loc(fused[#loc80, #loc81])
#loc203 = loc(fused[#loc86, #loc87])
#loc206 = loc(fused[#loc97, #loc98])
#loc207 = loc(fused[#loc101, #loc102])
#loc208 = loc(fused[#loc105, #loc104])
#loc209 = loc(fused[#loc106, #loc107])
#loc210 = loc(fused[#loc108, #loc109])
#loc211 = loc(fused[#loc110, #loc111])
#loc212 = loc(fused[#loc114, #loc112])
#loc213 = loc(fused[#loc115, #loc116])
#loc214 = loc(fused[#loc118, #loc117])
#loc215 = loc(fused[#loc119, #loc120])
#loc216 = loc(fused[#loc122, #loc116])
#loc217 = loc(fused[#loc124, #loc123])
#loc218 = loc(fused[#loc126, #loc125])
#loc219 = loc(fused[#loc127, #loc128])
#loc220 = loc(fused[#loc129, #loc130])
#loc221 = loc(fused[#loc131, #loc132])
#loc222 = loc(fused[#loc135, #loc136])
#loc223 = loc(fused[#loc134, #loc136])
#loc224 = loc(fused[#loc133, #loc137])
#loc225 = loc(fused[#loc138, #loc137])
#loc226 = loc(fused[#loc139, #loc140])
#loc227 = loc(fused[#loc141, #loc142])
#loc228 = loc(fused[#loc143, #loc140])
#loc229 = loc(fused[#loc147, #loc148])
#loc230 = loc(fused[#loc150, #loc149])
#loc231 = loc(fused[#loc151, #loc152])
#loc232 = loc(fused[#loc154, #loc148])
#loc233 = loc(fused[#loc156, #loc155])
#loc234 = loc(fused[#loc160, #loc159])
