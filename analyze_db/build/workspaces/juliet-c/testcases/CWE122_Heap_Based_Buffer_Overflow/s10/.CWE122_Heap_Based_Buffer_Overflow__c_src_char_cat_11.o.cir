!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc160)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc161)
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc162)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc163)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc164)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc165)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc17)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc168)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc169)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc170)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc173)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc30)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc174)
    } loc(#loc172)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc176)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc176)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc33)
      cir.if %11 {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc36)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc37)
        %15 = cir.const #cir.int<100> : !s32i loc(#loc38)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc39)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc38)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc38)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc178)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc42)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc42)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
        %22 = cir.const #cir.int<100> : !s32i loc(#loc44)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc45)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc44)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc46)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc179)
      } loc(#loc177)
    } loc(#loc175)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc181)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc181)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc181)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc51)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc52)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc51)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc55)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc56)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc57)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc56)
    } loc(#loc180)
    cir.return loc(#loc14)
  } loc(#loc166)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc182)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc66)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc71)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc72)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc72)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc188)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc189)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc190)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc80)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc80)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc193)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc82)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc84)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
      } loc(#loc194)
    } loc(#loc192)
    cir.scope {
      %8 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc196)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc196)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc87)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc87)
      cir.if %11 {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc92)
      } else {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc93)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc94)
        %15 = cir.const #cir.int<50> : !s32i loc(#loc95)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc95)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc95)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc198)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc99)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc99)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
        %22 = cir.const #cir.int<50> : !s32i loc(#loc101)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc101)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc103)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc199)
      } loc(#loc197)
    } loc(#loc195)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc201)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc201)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc201)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc108)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc109)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc108)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc112)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc113)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc113)
    } loc(#loc200)
    cir.return loc(#loc68)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc119)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc120)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc120)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc204)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc205)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc206)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc128)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc128)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc209)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc130)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc132)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc130)
      } loc(#loc210)
    } loc(#loc208)
    cir.scope {
      %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc212)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc212)
      %10 = cir.call %9() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc135)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc135)
      cir.if %11 {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc139)
        %15 = cir.const #cir.int<50> : !s32i loc(#loc140)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc140)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc140)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc214)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc144)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc144)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
        %22 = cir.const #cir.int<50> : !s32i loc(#loc146)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc147)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc146)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc148)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc215)
      } loc(#loc213)
    } loc(#loc211)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc217)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc217)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc217)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc153)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc154)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc153)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc157)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc158)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc159)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc158)
    } loc(#loc216)
    cir.return loc(#loc116)
  } loc(#loc202)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc7 = loc("/usr/include/string.h":149:1)
#loc8 = loc("/usr/include/string.h":150:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":23:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":41:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":26:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":26:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":26:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":26:42)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":26:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":26:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":27:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":27:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":27:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":27:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":27:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":27:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":27:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":28:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":33:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":28:8)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":28:26)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":29:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":31:16)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":31:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":31:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":31:31)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":31:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":31:32)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":32:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":32:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":32:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":32:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":32:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":34:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":40:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":35:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":35:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":37:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":37:16)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":37:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":38:19)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":38:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":39:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":39:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":94:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":98:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":96:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":96:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":97:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":97:14)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":56:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":48:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":71:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":50:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":50:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":51:20)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":51:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":51:31)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":51:42)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":51:43)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":51:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":52:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":52:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":52:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":52:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":52:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":52:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":52:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":52:29)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":53:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":63:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":53:8)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":53:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":54:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":57:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":59:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":56:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":61:16)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":61:22)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":61:27)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":61:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":61:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":61:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":62:22)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":62:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":62:14)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":62:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":62:18)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":64:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":70:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":65:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":65:25)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":67:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":67:16)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":67:22)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":68:19)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":68:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":69:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":69:14)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":74:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":92:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":76:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":76:12)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":77:20)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":77:27)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":77:31)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":77:42)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":77:43)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":77:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":78:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":78:33)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":78:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":78:17)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":78:23)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":78:24)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":78:30)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":78:29)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":79:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":84:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":79:8)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":79:26)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":80:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":82:16)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":82:22)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":82:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":82:30)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":82:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":82:31)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":83:22)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":83:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":83:14)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":83:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":83:18)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":85:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":91:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":86:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":86:25)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":88:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":88:16)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":88:22)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":89:19)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":89:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":90:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c":90:14)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc9, #loc10])
#loc165 = loc(fused[#loc11, #loc12])
#loc166 = loc(fused[#loc13, #loc14])
#loc167 = loc(fused[#loc15, #loc16])
#loc168 = loc(fused[#loc19, #loc20])
#loc169 = loc(fused[#loc18, #loc20])
#loc170 = loc(fused[#loc17, #loc21])
#loc171 = loc(fused[#loc22, #loc21])
#loc172 = loc(fused[#loc23, #loc24])
#loc173 = loc(fused[#loc25, #loc26])
#loc174 = loc(fused[#loc27, #loc24])
#loc175 = loc(fused[#loc31, #loc32])
#loc176 = loc(fused[#loc33, #loc34])
#loc177 = loc(fused[#loc35, #loc32])
#loc178 = loc(fused[#loc40, #loc41])
#loc179 = loc(fused[#loc43, #loc42])
#loc180 = loc(fused[#loc47, #loc48])
#loc181 = loc(fused[#loc49, #loc50])
#loc182 = loc(fused[#loc58, #loc59])
#loc183 = loc(fused[#loc60, #loc61])
#loc184 = loc(fused[#loc62, #loc63])
#loc185 = loc(fused[#loc64, #loc65])
#loc186 = loc(fused[#loc67, #loc68])
#loc187 = loc(fused[#loc69, #loc70])
#loc188 = loc(fused[#loc73, #loc74])
#loc189 = loc(fused[#loc72, #loc74])
#loc190 = loc(fused[#loc71, #loc75])
#loc191 = loc(fused[#loc76, #loc75])
#loc192 = loc(fused[#loc77, #loc78])
#loc193 = loc(fused[#loc79, #loc80])
#loc194 = loc(fused[#loc81, #loc78])
#loc195 = loc(fused[#loc85, #loc86])
#loc196 = loc(fused[#loc87, #loc88])
#loc197 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc198 = loc(fused[#loc97, #loc98])
#loc199 = loc(fused[#loc100, #loc99])
#loc200 = loc(fused[#loc104, #loc105])
#loc201 = loc(fused[#loc106, #loc107])
#loc202 = loc(fused[#loc115, #loc116])
#loc203 = loc(fused[#loc117, #loc118])
#loc204 = loc(fused[#loc121, #loc122])
#loc205 = loc(fused[#loc120, #loc122])
#loc206 = loc(fused[#loc119, #loc123])
#loc207 = loc(fused[#loc124, #loc123])
#loc208 = loc(fused[#loc125, #loc126])
#loc209 = loc(fused[#loc127, #loc128])
#loc210 = loc(fused[#loc129, #loc126])
#loc211 = loc(fused[#loc133, #loc134])
#loc212 = loc(fused[#loc135, #loc136])
#loc213 = loc(fused[#loc137, #loc134])
#loc214 = loc(fused[#loc142, #loc143])
#loc215 = loc(fused[#loc145, #loc144])
#loc216 = loc(fused[#loc149, #loc150])
#loc217 = loc(fused[#loc151, #loc152])
