!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":22:21)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":22:25)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":34:12)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":98:10)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":98:14)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":98:20)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":98:32)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":60:25)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":60:29)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":79:12)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":43:25)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":43:29)
#loc110 = loc(fused[#loc7, #loc8])
#loc123 = loc(fused[#loc42, #loc43])
#loc124 = loc(fused[#loc44, #loc45])
#loc129 = loc(fused[#loc63, #loc64])
#loc139 = loc(fused[#loc90, #loc91])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc107)
  cir.func private @printIntLine(!s32i) loc(#loc108)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc110)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc111)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc12)
    cir.return loc(#loc6)
  } loc(#loc109)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc20)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc20)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc20)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc20)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc20)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc20)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc20)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc20)
    cir.br ^bb3(%18 : !u32i) loc(#loc20)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc20)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc20)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc20)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc20)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc20)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc20)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc20)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc20)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc20)
    cir.br ^bb3(%34 : !u32i) loc(#loc20)
  ^bb3(%35: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":34:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc20)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.call @badSink(%37) : (!s32i) -> () loc(#loc23)
    cir.return loc(#loc14)
  } loc(#loc112)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc118)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc116)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc119)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc39)
  cir.func @main(%arg0: !s32i loc(fused[#loc42, #loc43]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc44, #loc45])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc124)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc46)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc47)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc48)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc48)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc49)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc36)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_41_good() : () -> () loc(#loc51)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc38)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_41_bad() : () -> () loc(#loc55)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc39)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    cir.return %17 : !s32i loc(#loc127)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc60)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc63, #loc64])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc129)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc131)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc132)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<100> : !s32i loc(#loc73)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %6 = cir.binop(div, %4, %5) : !s32i loc(#loc133)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc75)
    cir.br ^bb4 loc(#loc71)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc60)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    cir.br ^bb4 loc(#loc67)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc67)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc62)
  } loc(#loc128)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc82)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc84)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc84)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc84)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc84)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc84)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc84)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc84)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc84)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc84)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc84)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc84)
    cir.br ^bb3(%18 : !u32i) loc(#loc84)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc84)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc84)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc84)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc84)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc84)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc84)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc84)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc84)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc84)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc84)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc84)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc84)
    cir.br ^bb3(%34 : !u32i) loc(#loc84)
  ^bb3(%35: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":79:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc84)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @goodB2GSink(%37) : (!s32i) -> () loc(#loc87)
    cir.return loc(#loc78)
  } loc(#loc134)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc90, #loc91])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc139)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc93)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc140)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc95)
    cir.return loc(#loc89)
  } loc(#loc138)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc101)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc103)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc106)
    cir.return loc(#loc97)
  } loc(#loc141)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":22:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":26:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":23:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":25:18)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":25:24)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":25:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":28:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":36:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":30:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":30:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":32:13)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":32:12)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":32:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":34:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":35:13)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":35:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":83:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":87:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":85:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":85:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":86:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":86:13)
#loc30 = loc("/usr/include/stdlib.h":575:1)
#loc31 = loc("/usr/include/stdlib.h":575:41)
#loc32 = loc("/usr/include/time.h":76:1)
#loc33 = loc("/usr/include/time.h":76:38)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":103:15)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":105:15)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":108:15)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":110:15)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":98:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":113:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":99:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":101:27)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":101:22)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":101:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":103:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":104:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":104:52)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":105:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":108:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":109:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":109:51)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":110:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":112:12)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":112:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":69:19)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":60:1)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":71:1)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":61:1)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":63:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":70:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":63:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":63:17)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":64:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":66:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":68:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":65:22)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":65:28)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":65:9)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":69:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":73:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":81:1)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":75:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":75:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":77:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":77:12)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":77:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":79:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":80:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":80:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":43:1)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":47:1)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":44:1)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":46:18)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":46:24)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":46:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":49:1)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":57:1)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":51:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":51:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":53:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":53:12)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":53:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":55:12)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":55:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":56:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_41.c":56:5)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc10, #loc11])
#loc112 = loc(fused[#loc13, #loc14])
#loc113 = loc(fused[#loc15, #loc16])
#loc114 = loc(fused[#loc19, #loc17])
#loc115 = loc(fused[#loc21, #loc20])
#loc116 = loc(fused[#loc24, #loc25])
#loc117 = loc(fused[#loc26, #loc27])
#loc118 = loc(fused[#loc28, #loc29])
#loc119 = loc(fused[#loc30, #loc31])
#loc120 = loc(fused[#loc32, #loc33])
#loc121 = loc(fused[#loc34, #loc35])
#loc122 = loc(fused[#loc40, #loc41])
#loc125 = loc(fused[#loc51, #loc52])
#loc126 = loc(fused[#loc55, #loc56])
#loc127 = loc(fused[#loc59, #loc58])
#loc128 = loc(fused[#loc61, #loc62])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc68, #loc69])
#loc132 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc133 = loc(fused[#loc73, #loc74])
#loc134 = loc(fused[#loc77, #loc78])
#loc135 = loc(fused[#loc79, #loc80])
#loc136 = loc(fused[#loc83, #loc81])
#loc137 = loc(fused[#loc85, #loc84])
#loc138 = loc(fused[#loc88, #loc89])
#loc140 = loc(fused[#loc93, #loc94])
#loc141 = loc(fused[#loc96, #loc97])
#loc142 = loc(fused[#loc98, #loc99])
#loc143 = loc(fused[#loc102, #loc100])
#loc144 = loc(fused[#loc104, #loc103])
