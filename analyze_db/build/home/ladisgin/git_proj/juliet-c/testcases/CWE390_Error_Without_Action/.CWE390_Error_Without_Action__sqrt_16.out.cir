!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc46 = loc("CWE390_Error_Without_Action__sqrt_16.c":81:10)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_16.c":81:14)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_16.c":81:20)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_16.c":81:32)
#loc111 = loc(fused[#loc46, #loc47])
#loc112 = loc(fused[#loc48, #loc49])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc94)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc95)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc10)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc10)
        cir.condition(%1) loc(#loc10)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc99)
          %1 = cir.const #cir.int<0> : !s32i loc(#loc15)
          %2 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc16)
          cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc100)
          %3 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc17)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc19)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc19)
          %7 = cir.call @sqrt(%6) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc17)
          cir.store %7, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc101)
          cir.scope {
            %9 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc24)
            %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc24)
            %11 = cir.const #cir.int<33> : !s32i loc(#loc25)
            %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc103)
            cir.if %12 {
            } loc(#loc104)
          } loc(#loc102)
          %8 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc27)
          cir.call @printDoubleLine(%8) : (!cir.double) -> () loc(#loc28)
        } loc(#loc98)
        cir.break loc(#loc29)
      } loc(#loc97)
    } loc(#loc97)
    cir.return loc(#loc7)
  } loc(#loc96)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc31)
  } loc(#loc105)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc107)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc43)
  cir.func @main(%arg0: !s32i loc(fused[#loc46, #loc47]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc48, #loc49])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc50)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc51)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc52)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc52)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc53)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc40)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %8 = cir.get_global @CWE390_Error_Without_Action__sqrt_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc113)
    cir.call @CWE390_Error_Without_Action__sqrt_16_good() : () -> () loc(#loc55)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc41)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc42)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %13 = cir.get_global @CWE390_Error_Without_Action__sqrt_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call @CWE390_Error_Without_Action__sqrt_16_bad() : () -> () loc(#loc59)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc43)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.return %17 : !s32i loc(#loc115)
  } loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc64)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc116)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc71)
        cir.condition(%1) loc(#loc71)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc120)
          %1 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %2 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc77)
          cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc121)
          %3 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc78)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc80)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc80)
          %7 = cir.call @sqrt(%6) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc78)
          cir.store %7, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc122)
          cir.scope {
            %9 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc85)
            %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            %11 = cir.const #cir.int<33> : !s32i loc(#loc86)
            %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc124)
            cir.if %12 {
              %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc64)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc64)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc88)
              %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc89)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc90)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
            } loc(#loc125)
          } loc(#loc123)
          %8 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc91)
          cir.call @printDoubleLine(%8) : (!cir.double) -> () loc(#loc92)
        } loc(#loc119)
        cir.break loc(#loc93)
      } loc(#loc118)
    } loc(#loc118)
    cir.return loc(#loc68)
  } loc(#loc117)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_16.c":0:0)
#loc1 = loc("/usr/include/errno.h":37:1)
#loc2 = loc("/usr/include/errno.h":37:45)
#loc3 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("CWE390_Error_Without_Action__sqrt_16.c":23:1)
#loc7 = loc("CWE390_Error_Without_Action__sqrt_16.c":40:1)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_16.c":25:5)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_16.c":39:5)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_16.c":25:11)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_16.c":27:9)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_16.c":37:9)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_16.c":28:13)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_16.c":28:20)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_16.c":29:21)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_16.c":29:13)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:36)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:50)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:49)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:13)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_16.c":30:51)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_16.c":32:13)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_16.c":35:13)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_16.c":32:17)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_16.c":32:26)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_16.c":33:13)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_16.c":36:29)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_16.c":36:13)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_16.c":38:9)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_16.c":67:1)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_16.c":70:1)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_16.c":69:5)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_16.c":69:11)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE390_Error_Without_Action__sqrt_16.c":86:15)
#loc41 = loc("CWE390_Error_Without_Action__sqrt_16.c":88:15)
#loc42 = loc("CWE390_Error_Without_Action__sqrt_16.c":91:15)
#loc43 = loc("CWE390_Error_Without_Action__sqrt_16.c":93:15)
#loc44 = loc("CWE390_Error_Without_Action__sqrt_16.c":81:1)
#loc45 = loc("CWE390_Error_Without_Action__sqrt_16.c":96:1)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_16.c":82:1)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_16.c":84:27)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_16.c":84:22)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_16.c":84:5)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_16.c":86:5)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_16.c":87:5)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_16.c":87:47)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_16.c":88:5)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_16.c":91:5)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_16.c":92:5)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_16.c":92:46)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_16.c":93:5)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_16.c":95:12)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_16.c":95:5)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_16.c":58:27)
#loc65 = loc("/usr/include/stdlib.h":756:1)
#loc66 = loc("/usr/include/stdlib.h":756:70)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_16.c":47:1)
#loc68 = loc("CWE390_Error_Without_Action__sqrt_16.c":65:1)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_16.c":49:5)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_16.c":64:5)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_16.c":49:11)
#loc72 = loc("CWE390_Error_Without_Action__sqrt_16.c":51:9)
#loc73 = loc("CWE390_Error_Without_Action__sqrt_16.c":62:9)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_16.c":52:13)
#loc75 = loc("CWE390_Error_Without_Action__sqrt_16.c":52:20)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_16.c":53:21)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_16.c":53:13)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:36)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:50)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:49)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:13)
#loc82 = loc("CWE390_Error_Without_Action__sqrt_16.c":54:51)
#loc83 = loc("CWE390_Error_Without_Action__sqrt_16.c":56:13)
#loc84 = loc("CWE390_Error_Without_Action__sqrt_16.c":60:13)
#loc85 = loc("CWE390_Error_Without_Action__sqrt_16.c":56:17)
#loc86 = loc("CWE390_Error_Without_Action__sqrt_16.c":56:26)
#loc87 = loc("CWE390_Error_Without_Action__sqrt_16.c":57:13)
#loc88 = loc("CWE390_Error_Without_Action__sqrt_16.c":58:17)
#loc89 = loc("CWE390_Error_Without_Action__sqrt_16.c":59:17)
#loc90 = loc("CWE390_Error_Without_Action__sqrt_16.c":59:22)
#loc91 = loc("CWE390_Error_Without_Action__sqrt_16.c":61:29)
#loc92 = loc("CWE390_Error_Without_Action__sqrt_16.c":61:13)
#loc93 = loc("CWE390_Error_Without_Action__sqrt_16.c":63:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc4, #loc5])
#loc96 = loc(fused[#loc6, #loc7])
#loc97 = loc(fused[#loc8, #loc9])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc13, #loc14])
#loc100 = loc(fused[#loc16, #loc15])
#loc101 = loc(fused[#loc20, #loc21])
#loc102 = loc(fused[#loc22, #loc23])
#loc103 = loc(fused[#loc24, #loc25])
#loc104 = loc(fused[#loc26, #loc23])
#loc105 = loc(fused[#loc30, #loc31])
#loc106 = loc(fused[#loc32, #loc33])
#loc107 = loc(fused[#loc34, #loc35])
#loc108 = loc(fused[#loc36, #loc37])
#loc109 = loc(fused[#loc38, #loc39])
#loc110 = loc(fused[#loc44, #loc45])
#loc113 = loc(fused[#loc55, #loc56])
#loc114 = loc(fused[#loc59, #loc60])
#loc115 = loc(fused[#loc63, #loc62])
#loc116 = loc(fused[#loc65, #loc66])
#loc117 = loc(fused[#loc67, #loc68])
#loc118 = loc(fused[#loc69, #loc70])
#loc119 = loc(fused[#loc72, #loc73])
#loc120 = loc(fused[#loc74, #loc75])
#loc121 = loc(fused[#loc77, #loc76])
#loc122 = loc(fused[#loc81, #loc82])
#loc123 = loc(fused[#loc83, #loc84])
#loc124 = loc(fused[#loc85, #loc86])
#loc125 = loc(fused[#loc87, #loc84])
