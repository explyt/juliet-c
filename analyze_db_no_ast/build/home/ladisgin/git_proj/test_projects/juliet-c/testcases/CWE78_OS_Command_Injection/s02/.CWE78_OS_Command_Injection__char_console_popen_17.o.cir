!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s02/CWE78_OS_Command_Injection__char_console_popen_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc151)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc152)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc153)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc154)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @popen(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc155)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"w\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc12)
  cir.func private  @pclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc156)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_popen_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc160)
    %3 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc160)
    cir.store %3, %2 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc160)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc23)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc27)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc164)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
        cir.condition(%9) loc(#loc31)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc167)
            %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc37)
            %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
            %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc37)
            cir.store %9, %6 : !u64i, !cir.ptr<!u64i> loc(#loc167)
            cir.scope {
              %10 = cir.const #cir.int<100> : !s32i loc(#loc41)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc41)
              %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc42)
              %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc169)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc43)
              %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc43)
              %16 = cir.cmp(gt, %13, %15) : !u64i, !s32i loc(#loc170)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc44)
              cir.if %17 {
                cir.scope {
                  %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
                  %19 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc49)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !u64i), !cir.ptr<!s8i> loc(#loc50)
                  %21 = cir.const #cir.int<100> : !s32i loc(#loc51)
                  %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc51)
                  %23 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc52)
                  %24 = cir.binop(sub, %22, %23) : !u64i loc(#loc173)
                  %25 = cir.cast(integral, %24 : !u64i), !s32i loc(#loc173)
                  %26 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc153)
                  %27 = cir.load %26 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc53)
                  %28 = cir.call @fgets(%20, %25, %27) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc54)
                  %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
                  %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc55)
                  %31 = cir.cmp(ne, %28, %30) : !cir.ptr<!s8i>, !s32i loc(#loc174)
                  %32 = cir.cast(int_to_bool, %31 : !s32i), !cir.bool loc(#loc56)
                  cir.if %32 {
                    %33 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc60)
                    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
                    %35 = cir.call @strlen(%34) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc60)
                    cir.store %35, %6 : !u64i, !cir.ptr<!u64i> loc(#loc176)
                    cir.scope {
                      %36 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc66)
                      %37 = cir.const #cir.int<0> : !s32i loc(#loc67)
                      %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc67)
                      %39 = cir.cmp(gt, %36, %38) : !u64i, !s32i loc(#loc178)
                      %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc68)
                      %41 = cir.ternary(%40, true {
                        %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
                        %43 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc71)
                        %44 = cir.const #cir.int<1> : !s32i loc(#loc72)
                        %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc72)
                        %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc179)
                        %47 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %46 : !u64i), !cir.ptr<!s8i> loc(#loc73)
                        %48 = cir.load %47 : !cir.ptr<!s8i>, !s8i loc(#loc70)
                        %49 = cir.cast(integral, %48 : !s8i), !s32i loc(#loc70)
                        %50 = cir.const #cir.int<10> : !s32i loc(#loc74)
                        %51 = cir.cmp(eq, %49, %50) : !s32i, !s32i loc(#loc180)
                        %52 = cir.cast(int_to_bool, %51 : !s32i), !cir.bool loc(#loc75)
                        %53 = cir.ternary(%52, true {
                          %54 = cir.const #true loc(#loc69)
                          cir.yield %54 : !cir.bool loc(#loc69)
                        }, false {
                          %54 = cir.const #false loc(#loc69)
                          cir.yield %54 : !cir.bool loc(#loc69)
                        }) : (!cir.bool) -> !cir.bool loc(#loc69)
                        cir.yield %53 : !cir.bool loc(#loc69)
                      }, false {
                        %42 = cir.const #false loc(#loc69)
                        cir.yield %42 : !cir.bool loc(#loc69)
                      }) : (!cir.bool) -> !cir.bool loc(#loc69)
                      cir.if %41 {
                        %42 = cir.const #cir.int<0> : !s32i loc(#loc77)
                        %43 = cir.cast(integral, %42 : !s32i), !s8i loc(#loc77)
                        %44 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
                        %45 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc79)
                        %46 = cir.const #cir.int<1> : !s32i loc(#loc80)
                        %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc80)
                        %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc182)
                        %49 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc81)
                        cir.store %43, %49 : !s8i, !cir.ptr<!s8i> loc(#loc183)
                      } loc(#loc181)
                    } loc(#loc177)
                  } else {
                    %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc9)
                    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc9)
                    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc82)
                    %35 = cir.const #cir.int<0> : !s32i loc(#loc83)
                    %36 = cir.cast(integral, %35 : !s32i), !s8i loc(#loc83)
                    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
                    %38 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc85)
                    %39 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc86)
                    cir.store %36, %39 : !s8i, !cir.ptr<!s8i> loc(#loc184)
                  } loc(#loc175)
                } loc(#loc172)
              } loc(#loc171)
            } loc(#loc168)
          } loc(#loc166)
        } loc(#loc165)
        cir.yield loc(#loc26)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc88)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc162)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc187)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc12)
      %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc12)
      %9 = cir.call @popen(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc94)
      cir.store %9, %5 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc188)
      cir.scope {
        %10 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc99)
        %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc100)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc100)
        %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!ty__IO_FILE>, !s32i loc(#loc190)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc101)
        cir.if %14 {
          %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc103)
          %16 = cir.call @pclose(%15) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc104)
        } loc(#loc191)
      } loc(#loc189)
    } loc(#loc186)
    cir.return loc(#loc16)
  } loc(#loc157)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_popen_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc107)
    cir.return loc(#loc106)
  } loc(#loc192)
  cir.func private  @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc194)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc111)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc198)
    %3 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc198)
    cir.store %3, %2 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc198)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc120)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc124)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc127)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc202)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc128)
        cir.condition(%9) loc(#loc128)
      } body {
        cir.scope {
          %6 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc130)
          %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
          %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc111)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc111)
          %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc130)
        } loc(#loc203)
        cir.yield loc(#loc123)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc133)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
        cir.yield loc(#loc200)
      } loc(#loc200)
    } loc(#loc200)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc206)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
      %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc139)
      %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc139)
      %9 = cir.call @popen(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc140)
      cir.store %9, %5 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
      cir.scope {
        %10 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc145)
        %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc146)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc146)
        %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!ty__IO_FILE>, !s32i loc(#loc209)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc147)
        cir.if %14 {
          %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc149)
          %16 = cir.call @pclose(%15) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc150)
        } loc(#loc210)
      } loc(#loc208)
    } loc(#loc205)
    cir.return loc(#loc113)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s02/CWE78_OS_Command_Injection__char_console_popen_17.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":66:31)
#loc10 = loc("/usr/include/stdio.h":903:1)
#loc11 = loc("/usr/include/stdio.h":904:3)
#loc12 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":76:28)
#loc13 = loc("/usr/include/stdio.h":897:1)
#loc14 = loc("/usr/include/stdio.h":897:36)
#loc15 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":39:1)
#loc16 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":82:1)
#loc17 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":41:5)
#loc18 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":41:9)
#loc19 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":42:5)
#loc20 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":42:12)
#loc21 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":43:5)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":43:26)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":44:12)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":44:5)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":45:5)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":72:5)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":45:13)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":45:9)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":45:16)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":45:20)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":45:18)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":46:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":47:9)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":71:9)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":49:13)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":49:41)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":49:30)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":49:37)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":51:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":70:13)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":51:17)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":51:21)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":51:31)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":51:29)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":52:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:17)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":69:17)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:27)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:32)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:31)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:47)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:51)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:61)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:21)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:71)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":54:68)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":55:17)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":63:17)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":65:17)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":58:31)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":58:38)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":58:21)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":58:42)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:21)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":62:21)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:25)
#loc67 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:35)
#loc68 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:33)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:37)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:40)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:45)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:53)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:54)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:59)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":59:56)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":60:21)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":61:43)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":61:25)
#loc79 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":61:30)
#loc80 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":61:38)
#loc81 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":61:39)
#loc82 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":66:21)
#loc83 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":68:37)
#loc84 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":68:21)
#loc85 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":68:26)
#loc86 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":68:33)
#loc87 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":45:24)
#loc88 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":45:23)
#loc89 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":73:5)
#loc90 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":81:5)
#loc91 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":74:9)
#loc92 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":74:15)
#loc93 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":76:22)
#loc94 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":76:16)
#loc95 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":76:9)
#loc96 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":76:31)
#loc97 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":77:9)
#loc98 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":80:9)
#loc99 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":77:13)
#loc100 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":77:21)
#loc101 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":77:18)
#loc102 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":78:9)
#loc103 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":79:20)
#loc104 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":79:13)
#loc105 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":111:1)
#loc106 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":114:1)
#loc107 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":113:5)
#loc108 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":113:13)
#loc109 = loc("/usr/include/string.h":149:1)
#loc110 = loc("/usr/include/string.h":150:14)
#loc111 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":98:22)
#loc112 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":89:1)
#loc113 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":109:1)
#loc114 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":91:5)
#loc115 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":91:9)
#loc116 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":92:5)
#loc117 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":92:12)
#loc118 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":93:5)
#loc119 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":93:26)
#loc120 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":94:12)
#loc121 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":94:5)
#loc122 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":95:5)
#loc123 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":99:5)
#loc124 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":95:13)
#loc125 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":95:9)
#loc126 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":95:16)
#loc127 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":95:20)
#loc128 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":95:18)
#loc129 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":96:5)
#loc130 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":98:9)
#loc131 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":98:16)
#loc132 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":95:24)
#loc133 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":95:23)
#loc134 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":100:5)
#loc135 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":108:5)
#loc136 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":101:9)
#loc137 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":101:15)
#loc138 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":103:22)
#loc139 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":103:28)
#loc140 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":103:16)
#loc141 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":103:9)
#loc142 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":103:31)
#loc143 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":104:9)
#loc144 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":107:9)
#loc145 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":104:13)
#loc146 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":104:21)
#loc147 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":104:18)
#loc148 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":105:9)
#loc149 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":106:20)
#loc150 = loc("CWE78_OS_Command_Injection__char_console_popen_17.c":106:13)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc5, #loc6])
#loc154 = loc(fused[#loc7, #loc8])
#loc155 = loc(fused[#loc10, #loc11])
#loc156 = loc(fused[#loc13, #loc14])
#loc157 = loc(fused[#loc15, #loc16])
#loc158 = loc(fused[#loc17, #loc18])
#loc159 = loc(fused[#loc19, #loc20])
#loc160 = loc(fused[#loc21, #loc22])
#loc161 = loc(fused[#loc24, #loc23])
#loc162 = loc(fused[#loc25, #loc26])
#loc163 = loc(fused[#loc28, #loc27])
#loc164 = loc(fused[#loc29, #loc30])
#loc165 = loc(fused[#loc32, #loc26])
#loc166 = loc(fused[#loc33, #loc34])
#loc167 = loc(fused[#loc35, #loc36])
#loc168 = loc(fused[#loc39, #loc40])
#loc169 = loc(fused[#loc41, #loc42])
#loc170 = loc(fused[#loc41, #loc43])
#loc171 = loc(fused[#loc45, #loc40])
#loc172 = loc(fused[#loc46, #loc47])
#loc173 = loc(fused[#loc51, #loc52])
#loc174 = loc(fused[#loc54, #loc55])
#loc175 = loc(fused[#loc57, #loc58, #loc59, #loc47])
#loc176 = loc(fused[#loc62, #loc63])
#loc177 = loc(fused[#loc64, #loc65])
#loc178 = loc(fused[#loc66, #loc67])
#loc179 = loc(fused[#loc71, #loc72])
#loc180 = loc(fused[#loc70, #loc74])
#loc181 = loc(fused[#loc76, #loc65])
#loc182 = loc(fused[#loc79, #loc80])
#loc183 = loc(fused[#loc78, #loc77])
#loc184 = loc(fused[#loc84, #loc83])
#loc185 = loc(fused[#loc88, #loc87])
#loc186 = loc(fused[#loc89, #loc90])
#loc187 = loc(fused[#loc91, #loc92])
#loc188 = loc(fused[#loc95, #loc96])
#loc189 = loc(fused[#loc97, #loc98])
#loc190 = loc(fused[#loc99, #loc100])
#loc191 = loc(fused[#loc102, #loc98])
#loc192 = loc(fused[#loc105, #loc106])
#loc193 = loc(fused[#loc107, #loc108])
#loc194 = loc(fused[#loc109, #loc110])
#loc195 = loc(fused[#loc112, #loc113])
#loc196 = loc(fused[#loc114, #loc115])
#loc197 = loc(fused[#loc116, #loc117])
#loc198 = loc(fused[#loc118, #loc119])
#loc199 = loc(fused[#loc121, #loc120])
#loc200 = loc(fused[#loc122, #loc123])
#loc201 = loc(fused[#loc125, #loc124])
#loc202 = loc(fused[#loc126, #loc127])
#loc203 = loc(fused[#loc129, #loc123])
#loc204 = loc(fused[#loc133, #loc132])
#loc205 = loc(fused[#loc134, #loc135])
#loc206 = loc(fused[#loc136, #loc137])
#loc207 = loc(fused[#loc141, #loc142])
#loc208 = loc(fused[#loc143, #loc144])
#loc209 = loc(fused[#loc145, #loc146])
#loc210 = loc(fused[#loc148, #loc144])
