!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":125:10)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":125:14)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":125:20)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":125:32)
#loc259 = loc(fused[#loc86, #loc87])
#loc260 = loc(fused[#loc88, #loc89])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc226)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc227)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc228)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc229)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc230)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc226)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc235)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc23)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc237)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc238)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc239)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc242)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc35)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc243)
        } loc(#loc241)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc36)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc38)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc39)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc244)
      } loc(#loc236)
    } loc(#loc234)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc246)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc44)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc45)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc46)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc46)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc247)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc50)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc51)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc51)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc53)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc248)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc55)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc55)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc56)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc249)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc250)
      cir.libc.memcpy %24 bytes from %20 to %18 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc251)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc61)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc61)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc63)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc63)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc65)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc252)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc68)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc69)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc68)
    } loc(#loc245)
    cir.return loc(#loc12)
  } loc(#loc231)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc254)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc255)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc71)
  } loc(#loc253)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc256)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc257)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc83)
  cir.func @main(%arg0: !s32i loc(fused[#loc86, #loc87]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc88, #loc89])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc259)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc260)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc85)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc90)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc91)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc92)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc92)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc93)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc80)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc261)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_good() : () -> () loc(#loc95)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc81)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc82)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc262)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad() : () -> () loc(#loc99)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc83)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc102)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc263)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc263)
    cir.return %17 : !s32i loc(#loc263)
  } loc(#loc258)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc104)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc265)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc109)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc266)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc226)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc114)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc268)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc104)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc104)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc118)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc119)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc120)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc120)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc270)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc271)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc272)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc273)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc128)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc128)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc275)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc130)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc131)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc132)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc130)
          } loc(#loc276)
        } loc(#loc274)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc133)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc133)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc135)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc136)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc277)
      } loc(#loc269)
    } loc(#loc267)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc279)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc141)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc142)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc143)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc144)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc143)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc143)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc280)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc147)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc147)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc148)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc149)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc148)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc150)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc150)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc281)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc151)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc152)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc153)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc153)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc282)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc283)
      cir.libc.memcpy %24 bytes from %20 to %18 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc284)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc158)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc158)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc160)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc161)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc160)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc162)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc285)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc164)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc165)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc166)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc165)
    } loc(#loc278)
    cir.return loc(#loc106)
  } loc(#loc264)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc287)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc171)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc288)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc226)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc175)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc176)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc290)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc178)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc179)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc179)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc292)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc293)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc178)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc294)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc295)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc186)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc187)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc297)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc189)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc190)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc191)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc189)
          } loc(#loc298)
        } loc(#loc296)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc192)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc192)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc194)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc195)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc299)
      } loc(#loc291)
    } loc(#loc289)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc301)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc200)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc200)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc201)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc202)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc203)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc202)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc202)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc302)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc206)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc206)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc207)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc208)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc207)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc209)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc209)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc303)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc210)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc210)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc211)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc211)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc212)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc212)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc304)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc305)
      cir.libc.memcpy %24 bytes from %20 to %18 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc306)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc217)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc217)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc218)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc219)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc220)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc219)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc221)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc307)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc222)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc223)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc224)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc225)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc225)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc224)
    } loc(#loc300)
    cir.return loc(#loc168)
  } loc(#loc286)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":25:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":29:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":50:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":31:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":32:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":32:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":33:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":39:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":33:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":33:20)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":34:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":36:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":36:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":36:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":36:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":36:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":36:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":37:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":37:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":37:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":37:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":37:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":37:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":37:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":37:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":38:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":38:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":38:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":40:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":49:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":41:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":41:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":42:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":42:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":42:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":42:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":42:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":42:34)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":43:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":43:16)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":43:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":43:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":45:16)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":45:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":45:30)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":45:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":45:45)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":45:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":45:46)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":46:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":46:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":46:14)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":46:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":46:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":47:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":47:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":48:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":48:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":109:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":113:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":111:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":111:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":112:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":112:14)
#loc76 = loc("/usr/include/stdlib.h":575:1)
#loc77 = loc("/usr/include/stdlib.h":575:41)
#loc78 = loc("/usr/include/time.h":76:1)
#loc79 = loc("/usr/include/time.h":76:38)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":130:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":132:15)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":135:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":137:15)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":125:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":140:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":126:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":128:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":128:22)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":128:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":130:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":131:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":131:69)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":132:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":135:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":136:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":136:68)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":137:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":139:12)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":139:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":64:19)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":57:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":83:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":59:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":59:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":60:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":60:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":61:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":72:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":61:8)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":61:20)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":62:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":65:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":67:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":64:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":69:24)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":69:31)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":69:35)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":69:46)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":69:47)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":69:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":70:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":70:37)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":70:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":70:21)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":70:27)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":70:28)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":70:34)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":70:33)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":71:19)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":71:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":71:14)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":71:15)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":73:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":82:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":74:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":74:24)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":75:16)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":75:24)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":75:29)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":75:33)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":75:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":75:34)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":76:25)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":76:16)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":76:20)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":76:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":78:16)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":78:22)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":78:30)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":78:34)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":78:45)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":78:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":78:46)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":79:23)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":79:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":79:14)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":79:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":79:19)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":80:19)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":80:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":81:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":81:14)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":86:1)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":107:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":88:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":88:12)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":89:12)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":89:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":90:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":96:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":90:8)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":90:20)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":91:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":93:24)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":93:31)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":93:35)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":93:46)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":93:47)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":93:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":94:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":94:37)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":94:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":94:21)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":94:27)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":94:28)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":94:34)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":94:33)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":95:19)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":95:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":95:14)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":95:15)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":97:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":106:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":98:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":98:24)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":99:16)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":99:24)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":99:29)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":99:33)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":99:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":99:34)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":100:25)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":100:16)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":100:20)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":100:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":102:16)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":102:22)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":102:30)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":102:34)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":102:45)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":102:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":102:46)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":103:23)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":103:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":103:14)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":103:18)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":103:19)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":104:19)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":104:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":105:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c":105:14)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc5, #loc6])
#loc229 = loc(fused[#loc7, #loc8])
#loc230 = loc(fused[#loc9, #loc10])
#loc231 = loc(fused[#loc11, #loc12])
#loc232 = loc(fused[#loc13, #loc14])
#loc233 = loc(fused[#loc16, #loc15])
#loc234 = loc(fused[#loc17, #loc18])
#loc235 = loc(fused[#loc19, #loc20])
#loc236 = loc(fused[#loc21, #loc18])
#loc237 = loc(fused[#loc24, #loc25])
#loc238 = loc(fused[#loc23, #loc25])
#loc239 = loc(fused[#loc22, #loc26])
#loc240 = loc(fused[#loc27, #loc26])
#loc241 = loc(fused[#loc28, #loc29])
#loc242 = loc(fused[#loc30, #loc31])
#loc243 = loc(fused[#loc32, #loc29])
#loc244 = loc(fused[#loc37, #loc36])
#loc245 = loc(fused[#loc40, #loc41])
#loc246 = loc(fused[#loc42, #loc43])
#loc247 = loc(fused[#loc48, #loc49])
#loc248 = loc(fused[#loc53, #loc50])
#loc249 = loc(fused[#loc57, #loc58])
#loc250 = loc(fused[#loc56, #loc58])
#loc251 = loc(fused[#loc59, #loc60])
#loc252 = loc(fused[#loc62, #loc61])
#loc253 = loc(fused[#loc70, #loc71])
#loc254 = loc(fused[#loc72, #loc73])
#loc255 = loc(fused[#loc74, #loc75])
#loc256 = loc(fused[#loc76, #loc77])
#loc257 = loc(fused[#loc78, #loc79])
#loc258 = loc(fused[#loc84, #loc85])
#loc261 = loc(fused[#loc95, #loc96])
#loc262 = loc(fused[#loc99, #loc100])
#loc263 = loc(fused[#loc103, #loc102])
#loc264 = loc(fused[#loc105, #loc106])
#loc265 = loc(fused[#loc107, #loc108])
#loc266 = loc(fused[#loc110, #loc109])
#loc267 = loc(fused[#loc111, #loc112])
#loc268 = loc(fused[#loc113, #loc114])
#loc269 = loc(fused[#loc115, #loc116, #loc117, #loc112])
#loc270 = loc(fused[#loc121, #loc122])
#loc271 = loc(fused[#loc120, #loc122])
#loc272 = loc(fused[#loc119, #loc123])
#loc273 = loc(fused[#loc124, #loc123])
#loc274 = loc(fused[#loc125, #loc126])
#loc275 = loc(fused[#loc127, #loc128])
#loc276 = loc(fused[#loc129, #loc126])
#loc277 = loc(fused[#loc134, #loc133])
#loc278 = loc(fused[#loc137, #loc138])
#loc279 = loc(fused[#loc139, #loc140])
#loc280 = loc(fused[#loc145, #loc146])
#loc281 = loc(fused[#loc150, #loc147])
#loc282 = loc(fused[#loc154, #loc155])
#loc283 = loc(fused[#loc153, #loc155])
#loc284 = loc(fused[#loc156, #loc157])
#loc285 = loc(fused[#loc159, #loc158])
#loc286 = loc(fused[#loc167, #loc168])
#loc287 = loc(fused[#loc169, #loc170])
#loc288 = loc(fused[#loc172, #loc171])
#loc289 = loc(fused[#loc173, #loc174])
#loc290 = loc(fused[#loc175, #loc176])
#loc291 = loc(fused[#loc177, #loc174])
#loc292 = loc(fused[#loc180, #loc181])
#loc293 = loc(fused[#loc179, #loc181])
#loc294 = loc(fused[#loc178, #loc182])
#loc295 = loc(fused[#loc183, #loc182])
#loc296 = loc(fused[#loc184, #loc185])
#loc297 = loc(fused[#loc186, #loc187])
#loc298 = loc(fused[#loc188, #loc185])
#loc299 = loc(fused[#loc193, #loc192])
#loc300 = loc(fused[#loc196, #loc197])
#loc301 = loc(fused[#loc198, #loc199])
#loc302 = loc(fused[#loc204, #loc205])
#loc303 = loc(fused[#loc209, #loc206])
#loc304 = loc(fused[#loc213, #loc214])
#loc305 = loc(fused[#loc212, #loc214])
#loc306 = loc(fused[#loc215, #loc216])
#loc307 = loc(fused[#loc218, #loc217])
