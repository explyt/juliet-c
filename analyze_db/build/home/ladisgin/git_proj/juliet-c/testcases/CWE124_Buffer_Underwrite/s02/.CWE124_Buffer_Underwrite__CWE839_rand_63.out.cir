!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":22:56)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":22:62)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":51:60)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":51:66)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":76:60)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":76:66)
#true = #cir.bool<true> : !cir.bool
#loc129 = loc(fused[#loc8, #loc9])
#loc144 = loc(fused[#loc46, #loc47])
#loc159 = loc(fused[#loc86, #loc87])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc126)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func @CWE124_Buffer_Underwrite__CWE839_rand_63b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc130)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc12)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc11)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc132)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc133)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc133)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc133)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc23)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc135)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc27)
          %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc29)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc29)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc137)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc32)
            cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc139)
            cir.for : cond {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc34)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc35)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc140)
              cir.condition(%17) loc(#loc36)
            } body {
              cir.scope {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc38)
                %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
                %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc39)
                %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc39)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc40)
              } loc(#loc141)
              cir.yield loc(#loc31)
            } step {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc41)
              %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc42)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc142)
              cir.yield loc(#loc138)
            } loc(#loc138)
          } loc(#loc138)
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc43)
        } loc(#loc136)
      } loc(#loc134)
    } loc(#loc131)
    cir.return loc(#loc7)
  } loc(#loc128)
  cir.func @CWE124_Buffer_Underwrite__CWE839_rand_63b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc46, #loc47])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc145)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc50)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc147)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc148)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc148)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc148)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc61)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc150)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc65)
          %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc67)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc67)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc152)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc70)
            cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc154)
            cir.for : cond {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc72)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc73)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc155)
              cir.condition(%17) loc(#loc74)
            } body {
              cir.scope {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc77)
                %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc77)
                %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc78)
              } loc(#loc156)
              cir.yield loc(#loc69)
            } step {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc80)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc157)
              cir.yield loc(#loc153)
            } loc(#loc153)
          } loc(#loc153)
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc81)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc81)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc82)
        } loc(#loc151)
      } loc(#loc149)
    } loc(#loc146)
    cir.return loc(#loc45)
  } loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc83)
  cir.func @CWE124_Buffer_Underwrite__CWE839_rand_63b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc86, #loc87])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc160)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc90)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc162)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc163)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc163)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc163)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc101)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc165)
        %10 = cir.ternary(%9, true {
          %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc104)
          %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc166)
          %14 = cir.ternary(%13, true {
            %15 = cir.const #true loc(#loc102)
            cir.yield %15 : !cir.bool loc(#loc102)
          }, false {
            %15 = cir.const #false loc(#loc102)
            cir.yield %15 : !cir.bool loc(#loc102)
          }) : (!cir.bool) -> !cir.bool loc(#loc102)
          cir.yield %14 : !cir.bool loc(#loc102)
        }, false {
          %11 = cir.const #false loc(#loc102)
          cir.yield %11 : !cir.bool loc(#loc102)
        }) : (!cir.bool) -> !cir.bool loc(#loc102)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc111)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc111)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc168)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc114)
            cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc170)
            cir.for : cond {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc117)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc171)
              cir.condition(%18) loc(#loc118)
            } body {
              cir.scope {
                %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc121)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc121)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc122)
              } loc(#loc172)
              cir.yield loc(#loc113)
            } step {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc124)
              cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc173)
              cir.yield loc(#loc169)
            } loc(#loc169)
          } loc(#loc169)
        } else {
          %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc83)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc83)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc125)
        } loc(#loc167)
      } loc(#loc164)
    } loc(#loc161)
    cir.return loc(#loc85)
  } loc(#loc158)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_63b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":41:23)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":44:1)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":24:5)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":24:17)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":23:1)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":24:16)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":25:5)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":43:5)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":26:9)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":26:13)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":27:9)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":27:30)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":30:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":42:9)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":30:13)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":30:20)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":31:9)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":38:9)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":40:9)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":32:28)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":32:20)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":32:13)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":34:13)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":37:13)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":34:21)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":34:17)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":34:24)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":34:28)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":34:26)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":35:13)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":36:37)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":36:30)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":36:17)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":34:33)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":34:32)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":41:13)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":51:1)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":73:1)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":53:5)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":53:17)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":52:1)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":53:16)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":54:5)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":72:5)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":55:9)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":55:13)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":56:9)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":56:30)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":59:9)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":71:9)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":59:13)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":59:20)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":60:9)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":67:9)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":69:9)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":61:28)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":61:20)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":61:13)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":63:13)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":66:13)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":63:21)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":63:17)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":63:24)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":63:28)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":63:26)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":64:13)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":65:37)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":65:30)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":65:17)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":63:33)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":63:32)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":70:23)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":70:13)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":94:23)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":76:1)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":97:1)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":78:5)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":78:17)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":77:1)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":78:16)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":79:5)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":96:5)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":80:9)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":80:13)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":81:9)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":81:30)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":83:9)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":95:9)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":83:13)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":83:21)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":83:23)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":83:26)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":83:34)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":83:36)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":84:9)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":91:9)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":93:9)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":85:28)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":85:20)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":85:13)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":87:13)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":90:13)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":87:21)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":87:17)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":87:24)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":87:28)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":87:26)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":88:13)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":89:37)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":89:30)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":89:17)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":87:33)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":87:32)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_rand_63b.c":94:13)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc6, #loc7])
#loc130 = loc(fused[#loc10, #loc11])
#loc131 = loc(fused[#loc14, #loc15])
#loc132 = loc(fused[#loc16, #loc17])
#loc133 = loc(fused[#loc18, #loc19])
#loc134 = loc(fused[#loc20, #loc21])
#loc135 = loc(fused[#loc22, #loc23])
#loc136 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc137 = loc(fused[#loc29, #loc27])
#loc138 = loc(fused[#loc30, #loc31])
#loc139 = loc(fused[#loc33, #loc32])
#loc140 = loc(fused[#loc34, #loc35])
#loc141 = loc(fused[#loc37, #loc31])
#loc142 = loc(fused[#loc42, #loc41])
#loc143 = loc(fused[#loc44, #loc45])
#loc145 = loc(fused[#loc48, #loc49])
#loc146 = loc(fused[#loc52, #loc53])
#loc147 = loc(fused[#loc54, #loc55])
#loc148 = loc(fused[#loc56, #loc57])
#loc149 = loc(fused[#loc58, #loc59])
#loc150 = loc(fused[#loc60, #loc61])
#loc151 = loc(fused[#loc62, #loc63, #loc64, #loc59])
#loc152 = loc(fused[#loc67, #loc65])
#loc153 = loc(fused[#loc68, #loc69])
#loc154 = loc(fused[#loc71, #loc70])
#loc155 = loc(fused[#loc72, #loc73])
#loc156 = loc(fused[#loc75, #loc69])
#loc157 = loc(fused[#loc80, #loc79])
#loc158 = loc(fused[#loc84, #loc85])
#loc160 = loc(fused[#loc88, #loc89])
#loc161 = loc(fused[#loc92, #loc93])
#loc162 = loc(fused[#loc94, #loc95])
#loc163 = loc(fused[#loc96, #loc97])
#loc164 = loc(fused[#loc98, #loc99])
#loc165 = loc(fused[#loc100, #loc101])
#loc166 = loc(fused[#loc103, #loc105])
#loc167 = loc(fused[#loc106, #loc107, #loc108, #loc99])
#loc168 = loc(fused[#loc111, #loc109])
#loc169 = loc(fused[#loc112, #loc113])
#loc170 = loc(fused[#loc115, #loc114])
#loc171 = loc(fused[#loc116, #loc117])
#loc172 = loc(fused[#loc119, #loc113])
#loc173 = loc(fused[#loc124, #loc123])
