!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc126)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc127)
  cir.func private  @printIntLine(!s32i) loc(#loc128)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc126)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc11)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc133)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc134)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc19)
          cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc135)
          cir.scope {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc25)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc137)
            %13 = cir.const #cir.int<0> : !s32i loc(#loc26)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !s32i loc(#loc138)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc27)
            cir.if %15 {
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc29)
              %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc29)
              %18 = cir.const #cir.int<2> : !u32i loc(#loc29)
              %19 = cir.binop(mul, %17, %18) : !u32i loc(#loc29)
              %20 = cir.const #cir.int<1> : !u32i loc(#loc29)
              %21 = cir.binop(add, %19, %20) : !u32i loc(#loc29)
              %22 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc30)
              %23 = cir.binop(sub, %21, %22) : !u32i loc(#loc140)
              cir.store %23, %3 : !u32i, !cir.ptr<!u32i> loc(#loc141)
            } loc(#loc139)
          } loc(#loc136)
          %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc32)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc32)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc142)
          %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc35)
        } loc(#loc132)
      } loc(#loc131)
    } loc(#loc130)
    cir.return loc(#loc8)
  } loc(#loc129)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc143)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc146)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc147)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc148)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc146)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc53)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc57)
      } else {
        cir.scope {
          %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc153)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc154)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc64)
          cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc155)
          cir.scope {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc70)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc157)
            %13 = cir.const #cir.int<0> : !s32i loc(#loc71)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !s32i loc(#loc158)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc72)
            cir.if %15 {
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc74)
              %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc74)
              %18 = cir.const #cir.int<2> : !u32i loc(#loc74)
              %19 = cir.binop(mul, %17, %18) : !u32i loc(#loc74)
              %20 = cir.const #cir.int<1> : !u32i loc(#loc74)
              %21 = cir.binop(add, %19, %20) : !u32i loc(#loc74)
              %22 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc75)
              %23 = cir.binop(sub, %21, %22) : !u32i loc(#loc160)
              cir.store %23, %3 : !u32i, !cir.ptr<!u32i> loc(#loc161)
            } loc(#loc159)
          } loc(#loc156)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc79)
            %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc80)
            %13 = cir.cmp(gt, %10, %12) : !u32i, !s32i loc(#loc163)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc81)
            cir.if %14 {
              %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc83)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc84)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc83)
            } loc(#loc164)
          } loc(#loc162)
          %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc85)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc85)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc165)
          %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc88)
        } loc(#loc152)
      } loc(#loc151)
    } loc(#loc150)
    cir.return loc(#loc50)
  } loc(#loc149)
  cir.func no_proto internal private  @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc126)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc93)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc170)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc171)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc101)
          cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc172)
          cir.scope {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc107)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc174)
            %13 = cir.const #cir.int<0> : !s32i loc(#loc108)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !s32i loc(#loc175)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc109)
            cir.if %15 {
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc111)
              %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc111)
              %18 = cir.const #cir.int<2> : !u32i loc(#loc111)
              %19 = cir.binop(mul, %17, %18) : !u32i loc(#loc111)
              %20 = cir.const #cir.int<1> : !u32i loc(#loc111)
              %21 = cir.binop(add, %19, %20) : !u32i loc(#loc111)
              %22 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc112)
              %23 = cir.binop(sub, %21, %22) : !u32i loc(#loc177)
              cir.store %23, %3 : !u32i, !cir.ptr<!u32i> loc(#loc178)
            } loc(#loc176)
          } loc(#loc173)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc116)
            %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc117)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc117)
            %13 = cir.cmp(gt, %10, %12) : !u32i, !s32i loc(#loc180)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc118)
            cir.if %14 {
              %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc120)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc121)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc120)
            } loc(#loc181)
          } loc(#loc179)
          %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc122)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc122)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc182)
          %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc125)
        } loc(#loc169)
      } loc(#loc168)
    } loc(#loc167)
    cir.return loc(#loc90)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":0:0)
#loc1 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":21:1)
#loc2 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":21:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":26:1)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":43:1)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":28:5)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":42:5)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":28:8)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":29:5)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":30:9)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":41:9)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":31:13)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":31:22)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":32:13)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":32:17)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":33:27)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":33:13)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":33:32)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":34:13)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":37:13)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":34:17)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":34:26)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":34:31)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":34:28)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":35:13)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":36:31)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":36:42)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":36:17)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":39:25)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":39:13)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":40:26)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":40:13)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":102:1)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":106:1)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":104:5)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":104:11)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":105:5)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":105:11)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":22:1)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":22:26)
#loc44 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":55:19)
#loc47 = loc("/usr/include/stdlib.h":756:1)
#loc48 = loc("/usr/include/stdlib.h":756:70)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":50:1)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":76:1)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":52:5)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":75:5)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":52:8)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":53:5)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":56:5)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":58:5)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":55:9)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":59:9)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":74:9)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":60:13)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":60:22)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":61:13)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":61:17)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":62:27)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":62:13)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":62:32)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":63:13)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":66:13)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":63:17)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":63:26)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":63:31)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":63:28)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":64:13)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":65:31)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":65:42)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":65:17)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":68:13)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":71:13)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":68:17)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":68:31)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":68:29)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":69:13)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":70:17)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":70:22)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":72:25)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":72:13)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":73:26)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":73:13)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":79:1)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":100:1)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":81:5)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":99:5)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":81:8)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":82:5)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":83:9)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":98:9)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":84:13)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":84:22)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":85:13)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":85:17)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":86:27)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":86:13)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":86:32)
#loc104 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":87:13)
#loc105 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":90:13)
#loc106 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":87:17)
#loc107 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":87:26)
#loc108 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":87:31)
#loc109 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":87:28)
#loc110 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":88:13)
#loc111 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":89:31)
#loc112 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":89:42)
#loc113 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":89:17)
#loc114 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":92:13)
#loc115 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":95:13)
#loc116 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":92:17)
#loc117 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":92:31)
#loc118 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":92:29)
#loc119 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":93:13)
#loc120 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":94:17)
#loc121 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":94:22)
#loc122 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":96:25)
#loc123 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":96:13)
#loc124 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":97:26)
#loc125 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_05.c":97:13)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc7, #loc8])
#loc130 = loc(fused[#loc9, #loc10])
#loc131 = loc(fused[#loc12, #loc10])
#loc132 = loc(fused[#loc13, #loc14])
#loc133 = loc(fused[#loc15, #loc16])
#loc134 = loc(fused[#loc17, #loc18])
#loc135 = loc(fused[#loc20, #loc21])
#loc136 = loc(fused[#loc22, #loc23])
#loc137 = loc(fused[#loc24, #loc25])
#loc138 = loc(fused[#loc24, #loc26])
#loc139 = loc(fused[#loc28, #loc23])
#loc140 = loc(fused[#loc29, #loc30])
#loc141 = loc(fused[#loc31, #loc30])
#loc142 = loc(fused[#loc33, #loc32])
#loc143 = loc(fused[#loc36, #loc37])
#loc144 = loc(fused[#loc38, #loc39])
#loc145 = loc(fused[#loc40, #loc41])
#loc146 = loc(fused[#loc42, #loc43])
#loc147 = loc(fused[#loc44, #loc45])
#loc148 = loc(fused[#loc47, #loc48])
#loc149 = loc(fused[#loc49, #loc50])
#loc150 = loc(fused[#loc51, #loc52])
#loc151 = loc(fused[#loc54, #loc55, #loc56, #loc52])
#loc152 = loc(fused[#loc58, #loc59])
#loc153 = loc(fused[#loc60, #loc61])
#loc154 = loc(fused[#loc62, #loc63])
#loc155 = loc(fused[#loc65, #loc66])
#loc156 = loc(fused[#loc67, #loc68])
#loc157 = loc(fused[#loc69, #loc70])
#loc158 = loc(fused[#loc69, #loc71])
#loc159 = loc(fused[#loc73, #loc68])
#loc160 = loc(fused[#loc74, #loc75])
#loc161 = loc(fused[#loc76, #loc75])
#loc162 = loc(fused[#loc77, #loc78])
#loc163 = loc(fused[#loc79, #loc80])
#loc164 = loc(fused[#loc82, #loc78])
#loc165 = loc(fused[#loc86, #loc85])
#loc166 = loc(fused[#loc89, #loc90])
#loc167 = loc(fused[#loc91, #loc92])
#loc168 = loc(fused[#loc94, #loc92])
#loc169 = loc(fused[#loc95, #loc96])
#loc170 = loc(fused[#loc97, #loc98])
#loc171 = loc(fused[#loc99, #loc100])
#loc172 = loc(fused[#loc102, #loc103])
#loc173 = loc(fused[#loc104, #loc105])
#loc174 = loc(fused[#loc106, #loc107])
#loc175 = loc(fused[#loc106, #loc108])
#loc176 = loc(fused[#loc110, #loc105])
#loc177 = loc(fused[#loc111, #loc112])
#loc178 = loc(fused[#loc113, #loc112])
#loc179 = loc(fused[#loc114, #loc115])
#loc180 = loc(fused[#loc116, #loc117])
#loc181 = loc(fused[#loc119, #loc115])
#loc182 = loc(fused[#loc123, #loc122])
