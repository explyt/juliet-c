!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_negative_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc199)
  cir.func private @printIntLine(!s32i) loc(#loc200)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_negative_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc206)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc206)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc18)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc23)
        %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc24)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc26)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
      } loc(#loc207)
    } loc(#loc205)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc211)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc211)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc30)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc30)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc214)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc214)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc214)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
            %10 = cir.const #cir.int<10> : !s32i loc(#loc42)
            %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc216)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc47)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc47)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc47)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc48)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc49)
            } loc(#loc217)
          } loc(#loc215)
        } loc(#loc213)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc219)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc219)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc219)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc57)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc221)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc60)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc222)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc58)
                cir.yield %17 : !cir.bool loc(#loc58)
              }, false {
                %17 = cir.const #false loc(#loc58)
                cir.yield %17 : !cir.bool loc(#loc58)
              }) : (!cir.bool) -> !cir.bool loc(#loc58)
              cir.yield %16 : !cir.bool loc(#loc58)
            }, false {
              %13 = cir.const #false loc(#loc58)
              cir.yield %13 : !cir.bool loc(#loc58)
            }) : (!cir.bool) -> !cir.bool loc(#loc58)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc66)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc66)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc66)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc67)
            } else {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc8)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc8)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc68)
            } loc(#loc223)
          } loc(#loc220)
        } loc(#loc218)
      } loc(#loc212)
    } loc(#loc210)
    cir.return loc(#loc10)
  } loc(#loc202)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_negative_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc225)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc71)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc226)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc73)
    cir.return loc(#loc70)
  } loc(#loc224)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc80)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc231)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc231)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc84)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc84)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc89)
        %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc90)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
      } else {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc92)
        %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc93)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
      } loc(#loc232)
    } loc(#loc230)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc236)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc236)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc97)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc97)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc239)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc239)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc239)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc109)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc241)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc112)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc242)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc110)
                cir.yield %17 : !cir.bool loc(#loc110)
              }, false {
                %17 = cir.const #false loc(#loc110)
                cir.yield %17 : !cir.bool loc(#loc110)
              }) : (!cir.bool) -> !cir.bool loc(#loc110)
              cir.yield %16 : !cir.bool loc(#loc110)
            }, false {
              %13 = cir.const #false loc(#loc110)
              cir.yield %13 : !cir.bool loc(#loc110)
            }) : (!cir.bool) -> !cir.bool loc(#loc110)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc118)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc118)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc118)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc119)
            } else {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc120)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc120)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc121)
            } loc(#loc243)
          } loc(#loc240)
        } loc(#loc238)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc245)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc245)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc245)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc129)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc247)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc132)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc248)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc130)
                cir.yield %17 : !cir.bool loc(#loc130)
              }, false {
                %17 = cir.const #false loc(#loc130)
                cir.yield %17 : !cir.bool loc(#loc130)
              }) : (!cir.bool) -> !cir.bool loc(#loc130)
              cir.yield %16 : !cir.bool loc(#loc130)
            }, false {
              %13 = cir.const #false loc(#loc130)
              cir.yield %13 : !cir.bool loc(#loc130)
            }) : (!cir.bool) -> !cir.bool loc(#loc130)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc138)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc138)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc138)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc139)
            } else {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc140)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc140)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc141)
            } loc(#loc249)
          } loc(#loc246)
        } loc(#loc244)
      } loc(#loc237)
    } loc(#loc235)
    cir.return loc(#loc76)
  } loc(#loc227)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc147)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc254)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc254)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc151)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc151)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc156)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc158)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
      } loc(#loc255)
    } loc(#loc253)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc259)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc259)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc162)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc162)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc262)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc262)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc262)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
            %10 = cir.const #cir.int<10> : !s32i loc(#loc174)
            %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc264)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc179)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc179)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc179)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc180)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc181)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc181)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc182)
            } loc(#loc265)
          } loc(#loc263)
        } loc(#loc261)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc267)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc267)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc267)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
            %10 = cir.const #cir.int<10> : !s32i loc(#loc190)
            %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc269)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc195)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc195)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc195)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc196)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc197)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc197)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc198)
            } loc(#loc270)
          } loc(#loc268)
        } loc(#loc266)
      } loc(#loc260)
    } loc(#loc258)
    cir.return loc(#loc143)
  } loc(#loc250)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_negative_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":50:27)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":65:27)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":22:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":69:1)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":24:5)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":24:9)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":26:13)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":26:12)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":26:5)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":27:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":37:5)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":27:8)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":27:33)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":28:5)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":31:5)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":33:5)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":30:17)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":30:16)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":30:9)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":36:16)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":36:9)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":38:5)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":68:5)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":38:8)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":38:33)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":39:5)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":53:5)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":55:5)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":40:9)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":52:9)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":41:13)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":41:34)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":44:13)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":51:13)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":44:17)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":44:24)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":45:13)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":47:13)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":49:13)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":46:37)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":46:30)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":46:17)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":50:17)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":56:9)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":67:9)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":57:13)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":57:34)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":59:13)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":66:13)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":59:17)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":59:25)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":59:27)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":59:30)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":59:38)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":59:40)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":60:13)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":62:13)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":64:13)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":61:37)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":61:30)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":61:17)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":65:17)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":179:1)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":183:1)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":181:5)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":181:13)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":182:5)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":182:13)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":78:1)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":123:1)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":80:5)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":80:9)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":82:13)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":82:12)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":82:5)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":83:5)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":92:5)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":83:8)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":83:33)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":84:5)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":87:5)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":89:5)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":86:17)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":86:16)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":86:9)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":91:17)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":91:16)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":91:9)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":93:5)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":122:5)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":93:8)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":93:33)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":94:5)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":107:5)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":109:5)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":95:9)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":106:9)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":96:13)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":96:34)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":98:13)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":105:13)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":98:17)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":98:25)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":98:27)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":98:30)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":98:38)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":98:40)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":99:13)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":101:13)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":103:13)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":100:37)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":100:30)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":100:17)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":104:27)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":104:17)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":110:9)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":121:9)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":111:13)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":111:34)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":113:13)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":120:13)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":113:17)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":113:25)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":113:27)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":113:30)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":113:38)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":113:40)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":114:13)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":116:13)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":118:13)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":115:37)
#loc138 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":115:30)
#loc139 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":115:17)
#loc140 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":119:27)
#loc141 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":119:17)
#loc142 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":128:1)
#loc143 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":177:1)
#loc144 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":130:5)
#loc145 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":130:9)
#loc146 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":132:13)
#loc147 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":132:12)
#loc148 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":132:5)
#loc149 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":133:5)
#loc150 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":144:5)
#loc151 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":133:8)
#loc152 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":133:33)
#loc153 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":134:5)
#loc154 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":138:5)
#loc155 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":140:5)
#loc156 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":137:16)
#loc157 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":137:9)
#loc158 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":143:16)
#loc159 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":143:9)
#loc160 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":145:5)
#loc161 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":176:5)
#loc162 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":145:8)
#loc163 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":145:33)
#loc164 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":146:5)
#loc165 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":160:5)
#loc166 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":162:5)
#loc167 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":147:9)
#loc168 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":159:9)
#loc169 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":148:13)
#loc170 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":148:34)
#loc171 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":151:13)
#loc172 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":158:13)
#loc173 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":151:17)
#loc174 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":151:24)
#loc175 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":152:13)
#loc176 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":154:13)
#loc177 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":156:13)
#loc178 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":153:37)
#loc179 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":153:30)
#loc180 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":153:17)
#loc181 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":157:27)
#loc182 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":157:17)
#loc183 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":163:9)
#loc184 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":175:9)
#loc185 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":164:13)
#loc186 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":164:34)
#loc187 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":167:13)
#loc188 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":174:13)
#loc189 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":167:17)
#loc190 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":167:24)
#loc191 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":168:13)
#loc192 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":170:13)
#loc193 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":172:13)
#loc194 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":169:37)
#loc195 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":169:30)
#loc196 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":169:17)
#loc197 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":173:27)
#loc198 = loc("CWE127_Buffer_Underread__CWE839_negative_12.c":173:17)
#loc199 = loc(fused[#loc1, #loc2])
#loc200 = loc(fused[#loc3, #loc4])
#loc201 = loc(fused[#loc5, #loc6])
#loc202 = loc(fused[#loc9, #loc10])
#loc203 = loc(fused[#loc11, #loc12])
#loc204 = loc(fused[#loc15, #loc13])
#loc205 = loc(fused[#loc16, #loc17])
#loc206 = loc(fused[#loc18, #loc19])
#loc207 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc208 = loc(fused[#loc25, #loc23])
#loc209 = loc(fused[#loc27, #loc26])
#loc210 = loc(fused[#loc28, #loc29])
#loc211 = loc(fused[#loc30, #loc31])
#loc212 = loc(fused[#loc32, #loc33, #loc34, #loc29])
#loc213 = loc(fused[#loc35, #loc36])
#loc214 = loc(fused[#loc37, #loc38])
#loc215 = loc(fused[#loc39, #loc40])
#loc216 = loc(fused[#loc41, #loc42])
#loc217 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc218 = loc(fused[#loc50, #loc51])
#loc219 = loc(fused[#loc52, #loc53])
#loc220 = loc(fused[#loc54, #loc55])
#loc221 = loc(fused[#loc56, #loc57])
#loc222 = loc(fused[#loc59, #loc61])
#loc223 = loc(fused[#loc62, #loc63, #loc64, #loc55])
#loc224 = loc(fused[#loc69, #loc70])
#loc225 = loc(fused[#loc71, #loc72])
#loc226 = loc(fused[#loc73, #loc74])
#loc227 = loc(fused[#loc75, #loc76])
#loc228 = loc(fused[#loc77, #loc78])
#loc229 = loc(fused[#loc81, #loc79])
#loc230 = loc(fused[#loc82, #loc83])
#loc231 = loc(fused[#loc84, #loc85])
#loc232 = loc(fused[#loc86, #loc87, #loc88, #loc83])
#loc233 = loc(fused[#loc91, #loc89])
#loc234 = loc(fused[#loc94, #loc92])
#loc235 = loc(fused[#loc95, #loc96])
#loc236 = loc(fused[#loc97, #loc98])
#loc237 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc238 = loc(fused[#loc102, #loc103])
#loc239 = loc(fused[#loc104, #loc105])
#loc240 = loc(fused[#loc106, #loc107])
#loc241 = loc(fused[#loc108, #loc109])
#loc242 = loc(fused[#loc111, #loc113])
#loc243 = loc(fused[#loc114, #loc115, #loc116, #loc107])
#loc244 = loc(fused[#loc122, #loc123])
#loc245 = loc(fused[#loc124, #loc125])
#loc246 = loc(fused[#loc126, #loc127])
#loc247 = loc(fused[#loc128, #loc129])
#loc248 = loc(fused[#loc131, #loc133])
#loc249 = loc(fused[#loc134, #loc135, #loc136, #loc127])
#loc250 = loc(fused[#loc142, #loc143])
#loc251 = loc(fused[#loc144, #loc145])
#loc252 = loc(fused[#loc148, #loc146])
#loc253 = loc(fused[#loc149, #loc150])
#loc254 = loc(fused[#loc151, #loc152])
#loc255 = loc(fused[#loc153, #loc154, #loc155, #loc150])
#loc256 = loc(fused[#loc157, #loc156])
#loc257 = loc(fused[#loc159, #loc158])
#loc258 = loc(fused[#loc160, #loc161])
#loc259 = loc(fused[#loc162, #loc163])
#loc260 = loc(fused[#loc164, #loc165, #loc166, #loc161])
#loc261 = loc(fused[#loc167, #loc168])
#loc262 = loc(fused[#loc169, #loc170])
#loc263 = loc(fused[#loc171, #loc172])
#loc264 = loc(fused[#loc173, #loc174])
#loc265 = loc(fused[#loc175, #loc176, #loc177, #loc172])
#loc266 = loc(fused[#loc183, #loc184])
#loc267 = loc(fused[#loc185, #loc186])
#loc268 = loc(fused[#loc187, #loc188])
#loc269 = loc(fused[#loc189, #loc190])
#loc270 = loc(fused[#loc191, #loc192, #loc193, #loc188])
