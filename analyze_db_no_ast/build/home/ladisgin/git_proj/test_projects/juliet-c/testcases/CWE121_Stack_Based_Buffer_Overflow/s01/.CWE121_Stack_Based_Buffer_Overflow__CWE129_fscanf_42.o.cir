!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":22:22)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":22:26)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":97:26)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":97:30)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":61:26)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":61:30)
#true = #cir.bool<true> : !cir.bool
#loc181 = loc(fused[#loc8, #loc9])
#loc205 = loc(fused[#loc70, #loc71])
#loc225 = loc(fused[#loc128, #loc129])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc178)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc179)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private  @badSource(%arg0: !s32i loc(fused[#loc8, #loc9])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc7)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc11)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc179)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc12)
    %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc11)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc182)
    cir.return %9 : !s32i loc(#loc182)
  } loc(#loc180)
  cir.func private  @printIntLine(!s32i) loc(#loc183)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc28)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc190)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc191)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc191)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc191)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc193)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc41)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
          %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc47)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc47)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc195)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc50)
            cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc197)
            cir.for : cond {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc52)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc53)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc198)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc54)
              cir.condition(%20) loc(#loc54)
            } body {
              cir.scope {
                %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc56)
                %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc57)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc57)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc58)
              } loc(#loc199)
              cir.yield loc(#loc49)
            } step {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc59)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc60)
              cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc200)
              cir.yield loc(#loc196)
            } loc(#loc196)
          } loc(#loc196)
        } else {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc19)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc61)
        } loc(#loc194)
      } loc(#loc192)
    } loc(#loc189)
    cir.return loc(#loc21)
  } loc(#loc185)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc63)
  } loc(#loc201)
  cir.func internal private  @goodB2GSource(%arg0: !s32i loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc69)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc73)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc179)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
    %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc75)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc75)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc73)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc206)
    cir.return %9 : !s32i loc(#loc206)
  } loc(#loc204)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc87)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc212)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc213)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc213)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc213)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc99)
        %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc215)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc100)
        %12 = cir.ternary(%11, true {
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %14 = cir.const #cir.int<10> : !s32i loc(#loc103)
          %15 = cir.cmp(lt, %13, %14) : !s32i, !s32i loc(#loc216)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc105)
          %17 = cir.ternary(%16, true {
            %18 = cir.const #true loc(#loc101)
            cir.yield %18 : !cir.bool loc(#loc101)
          }, false {
            %18 = cir.const #false loc(#loc101)
            cir.yield %18 : !cir.bool loc(#loc101)
          }) : (!cir.bool) -> !cir.bool loc(#loc101)
          cir.yield %17 : !cir.bool loc(#loc101)
        }, false {
          %13 = cir.const #false loc(#loc101)
          cir.yield %13 : !cir.bool loc(#loc101)
        }) : (!cir.bool) -> !cir.bool loc(#loc101)
        cir.if %12 {
          %13 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %15 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc111)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc111)
          cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc218)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc114)
            cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc220)
            cir.for : cond {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc117)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc221)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc118)
              cir.condition(%21) loc(#loc118)
            } body {
              cir.scope {
                %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc121)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc121)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc122)
              } loc(#loc222)
              cir.yield loc(#loc113)
            } step {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc124)
              cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc223)
              cir.yield loc(#loc219)
            } loc(#loc219)
          } loc(#loc219)
        } else {
          %13 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc78)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc78)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc125)
        } loc(#loc217)
      } loc(#loc214)
    } loc(#loc211)
    cir.return loc(#loc80)
  } loc(#loc207)
  cir.func internal private  @goodG2BSource(%arg0: !s32i loc(fused[#loc128, #loc129])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc127)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc131)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc227)
    cir.return %4 : !s32i loc(#loc227)
  } loc(#loc224)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc140)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc143)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc233)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc234)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc234)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc234)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc155)
        %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc236)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc156)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc160)
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
          %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc162)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc162)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc238)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc165)
            cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc240)
            cir.for : cond {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc167)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc168)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc241)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc169)
              cir.condition(%20) loc(#loc169)
            } body {
              cir.scope {
                %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc171)
                %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc172)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc172)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc172)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc173)
              } loc(#loc242)
              cir.yield loc(#loc164)
            } step {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc174)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc175)
              cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc243)
              cir.yield loc(#loc239)
            } loc(#loc239)
          } loc(#loc239)
        } else {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc176)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc176)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc177)
        } loc(#loc237)
      } loc(#loc235)
    } loc(#loc232)
    cir.return loc(#loc136)
  } loc(#loc228)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":25:19)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":22:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":27:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":23:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":25:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":26:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":26:5)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":51:23)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":29:1)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":54:1)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":31:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":31:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":33:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":33:12)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":33:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":34:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":34:12)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":34:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":34:26)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":35:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":53:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":36:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":36:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":37:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":37:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":40:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":52:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":40:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":40:21)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":40:18)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":41:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":48:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":50:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":42:28)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":42:20)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":42:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":44:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":47:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":44:21)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":44:17)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":44:24)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":44:28)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":44:26)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":45:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":46:37)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":46:30)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":46:17)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":44:33)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":44:32)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":51:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":130:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":134:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":132:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":132:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":133:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":133:13)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":97:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":102:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":98:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":100:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":100:12)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":100:19)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":101:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":101:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":125:23)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":104:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":128:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":106:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":106:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":108:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":108:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":108:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":109:26)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":109:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":109:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":109:30)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":110:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":127:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":111:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":111:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":112:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":112:30)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":114:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":126:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":114:13)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":114:21)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":114:18)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":114:23)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":114:26)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":114:34)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":114:36)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":114:31)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":115:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":122:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":124:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":116:28)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":116:20)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":116:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":118:13)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":121:13)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":118:21)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":118:17)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":118:24)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":118:28)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":118:26)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":119:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":120:37)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":120:30)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":120:17)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":118:33)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":118:32)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":125:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":61:1)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":67:1)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":62:1)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":65:12)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":65:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":66:12)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":66:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":69:1)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":94:1)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":71:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":71:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":73:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":73:12)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":73:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":74:26)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":74:12)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":74:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":74:30)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":75:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":93:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":76:9)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":76:13)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":77:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":77:30)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":80:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":92:9)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":80:13)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":80:21)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":80:18)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":81:9)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":88:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":90:9)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":82:28)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":82:20)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":82:13)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":84:13)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":87:13)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":84:21)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":84:17)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":84:24)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":84:28)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":84:26)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":85:13)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":86:37)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":86:30)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":86:17)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":84:33)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":84:32)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":91:23)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c":91:13)
#loc178 = loc(fused[#loc1, #loc2])
#loc179 = loc(fused[#loc3, #loc4])
#loc180 = loc(fused[#loc6, #loc7])
#loc182 = loc(fused[#loc14, #loc13])
#loc183 = loc(fused[#loc15, #loc16])
#loc184 = loc(fused[#loc17, #loc18])
#loc185 = loc(fused[#loc20, #loc21])
#loc186 = loc(fused[#loc22, #loc23])
#loc187 = loc(fused[#loc26, #loc24])
#loc188 = loc(fused[#loc29, #loc30])
#loc189 = loc(fused[#loc31, #loc32])
#loc190 = loc(fused[#loc33, #loc34])
#loc191 = loc(fused[#loc35, #loc36])
#loc192 = loc(fused[#loc37, #loc38])
#loc193 = loc(fused[#loc39, #loc40])
#loc194 = loc(fused[#loc42, #loc43, #loc44, #loc38])
#loc195 = loc(fused[#loc47, #loc45])
#loc196 = loc(fused[#loc48, #loc49])
#loc197 = loc(fused[#loc51, #loc50])
#loc198 = loc(fused[#loc52, #loc53])
#loc199 = loc(fused[#loc55, #loc49])
#loc200 = loc(fused[#loc60, #loc59])
#loc201 = loc(fused[#loc62, #loc63])
#loc202 = loc(fused[#loc64, #loc65])
#loc203 = loc(fused[#loc66, #loc67])
#loc204 = loc(fused[#loc68, #loc69])
#loc206 = loc(fused[#loc77, #loc76])
#loc207 = loc(fused[#loc79, #loc80])
#loc208 = loc(fused[#loc81, #loc82])
#loc209 = loc(fused[#loc85, #loc83])
#loc210 = loc(fused[#loc88, #loc89])
#loc211 = loc(fused[#loc90, #loc91])
#loc212 = loc(fused[#loc92, #loc93])
#loc213 = loc(fused[#loc94, #loc95])
#loc214 = loc(fused[#loc96, #loc97])
#loc215 = loc(fused[#loc98, #loc99])
#loc216 = loc(fused[#loc102, #loc104])
#loc217 = loc(fused[#loc106, #loc107, #loc108, #loc97])
#loc218 = loc(fused[#loc111, #loc109])
#loc219 = loc(fused[#loc112, #loc113])
#loc220 = loc(fused[#loc115, #loc114])
#loc221 = loc(fused[#loc116, #loc117])
#loc222 = loc(fused[#loc119, #loc113])
#loc223 = loc(fused[#loc124, #loc123])
#loc224 = loc(fused[#loc126, #loc127])
#loc226 = loc(fused[#loc132, #loc131])
#loc227 = loc(fused[#loc134, #loc133])
#loc228 = loc(fused[#loc135, #loc136])
#loc229 = loc(fused[#loc137, #loc138])
#loc230 = loc(fused[#loc141, #loc139])
#loc231 = loc(fused[#loc144, #loc145])
#loc232 = loc(fused[#loc146, #loc147])
#loc233 = loc(fused[#loc148, #loc149])
#loc234 = loc(fused[#loc150, #loc151])
#loc235 = loc(fused[#loc152, #loc153])
#loc236 = loc(fused[#loc154, #loc155])
#loc237 = loc(fused[#loc157, #loc158, #loc159, #loc153])
#loc238 = loc(fused[#loc162, #loc160])
#loc239 = loc(fused[#loc163, #loc164])
#loc240 = loc(fused[#loc166, #loc165])
#loc241 = loc(fused[#loc167, #loc168])
#loc242 = loc(fused[#loc170, #loc164])
#loc243 = loc(fused[#loc175, #loc174])
