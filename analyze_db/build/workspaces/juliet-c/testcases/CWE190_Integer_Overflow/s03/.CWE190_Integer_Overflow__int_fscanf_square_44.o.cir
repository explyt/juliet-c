!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":24:21)
#loc6 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":24:25)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":51:25)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":51:29)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":72:25)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":72:29)
#true = #cir.bool<true> : !cir.bool
#loc105 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc40, #loc41])
#loc128 = loc(fused[#loc68, #loc69])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc103)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc105)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc107)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
      %4 = cir.binop(mul, %2, %3) nsw : !s32i loc(#loc12)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc107)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc14)
    } loc(#loc106)
    cir.return loc(#loc4)
  } loc(#loc104)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc108)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc112)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc26)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc28)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc109)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc19)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc19)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc28)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call %10(%11) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc30)
    cir.return loc(#loc21)
  } loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc116)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc114)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc40, #loc41])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc118)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc120)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %4 = cir.binop(mul, %2, %3) nsw : !s32i loc(#loc47)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc120)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc49)
    } loc(#loc119)
    cir.return loc(#loc39)
  } loc(#loc117)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc123)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc55)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc123)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc58)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc60)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc60)
    cir.return loc(#loc51)
  } loc(#loc121)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc62)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc65)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc68, #loc69])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc128)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc74)
      %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc74)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc74)
      %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc74)
      %6 = cir.cmp(gt, %1, %5) : !s32i, !cir.bool loc(#loc130)
      %7 = cir.ternary(%6, true {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        %9 = cir.abs %8 poison : !s32i loc(#loc77)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc77)
        %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc78)
        %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc79)
        %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc79)
        %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc78)
        %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc78)
        %16 = cir.cmp(lt, %10, %15) : !s64i, !cir.bool loc(#loc131)
        %17 = cir.ternary(%16, true {
          %18 = cir.const #true loc(#loc75)
          cir.yield %18 : !cir.bool loc(#loc75)
        }, false {
          %18 = cir.const #false loc(#loc75)
          cir.yield %18 : !cir.bool loc(#loc75)
        }) : (!cir.bool) -> !cir.bool loc(#loc75)
        cir.yield %17 : !cir.bool loc(#loc75)
      }, false {
        %8 = cir.const #false loc(#loc75)
        cir.yield %8 : !cir.bool loc(#loc75)
      }) : (!cir.bool) -> !cir.bool loc(#loc75)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc133)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
        %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc86)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc133)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc87)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc88)
      } else {
        %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc65)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc65)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } loc(#loc132)
    } loc(#loc129)
    cir.return loc(#loc67)
  } loc(#loc127)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc95)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc136)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc96)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc98)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc109)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc99)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc100)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc100)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc98)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc101)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    cir.call %10(%11) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc101)
    cir.return loc(#loc91)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":26:5)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":28:9)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":28:29)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":28:22)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":29:22)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":29:9)
#loc15 = loc("/usr/include/stdio.h":463:1)
#loc16 = loc("/usr/include/stdio.h":465:33)
#loc17 = loc("/usr/include/stdio.h":149:1)
#loc18 = loc("/usr/include/stdio.h":149:14)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":41:19)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":33:1)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":44:1)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":35:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":37:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":37:29)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":39:12)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":41:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":41:12)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":43:5)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":43:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":97:1)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":101:1)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":99:5)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":99:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":100:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":100:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":51:1)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":58:1)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":52:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":53:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":57:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":55:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":55:29)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":55:22)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":56:22)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":56:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":60:1)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":69:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":62:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":62:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":63:29)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":65:12)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":65:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":67:12)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":67:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":68:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":68:13)
#loc62 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":82:19)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":72:1)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":84:1)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":73:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":75:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":83:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":75:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":75:16)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":75:24)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":75:31)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":75:27)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":75:45)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":75:58)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":75:65)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":76:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":79:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":81:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":77:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":77:29)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":77:22)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":78:22)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":78:9)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":82:9)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":86:1)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":95:1)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":88:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":88:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":89:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":89:29)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":91:12)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":91:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":93:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":93:12)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":93:19)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":94:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_44.c":94:13)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc8, #loc9])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc15, #loc16])
#loc109 = loc(fused[#loc17, #loc18])
#loc110 = loc(fused[#loc20, #loc21])
#loc111 = loc(fused[#loc22, #loc23])
#loc112 = loc(fused[#loc24, #loc25])
#loc113 = loc(fused[#loc27, #loc26])
#loc114 = loc(fused[#loc32, #loc33])
#loc115 = loc(fused[#loc34, #loc35])
#loc116 = loc(fused[#loc36, #loc37])
#loc117 = loc(fused[#loc38, #loc39])
#loc119 = loc(fused[#loc43, #loc44])
#loc120 = loc(fused[#loc45, #loc46])
#loc121 = loc(fused[#loc50, #loc51])
#loc122 = loc(fused[#loc52, #loc53])
#loc123 = loc(fused[#loc54, #loc55])
#loc124 = loc(fused[#loc57, #loc56])
#loc125 = loc(fused[#loc59, #loc58])
#loc126 = loc(fused[#loc63, #loc64])
#loc127 = loc(fused[#loc66, #loc67])
#loc129 = loc(fused[#loc71, #loc72])
#loc130 = loc(fused[#loc73, #loc74])
#loc131 = loc(fused[#loc77, #loc80])
#loc132 = loc(fused[#loc81, #loc82, #loc83, #loc72])
#loc133 = loc(fused[#loc84, #loc85])
#loc134 = loc(fused[#loc90, #loc91])
#loc135 = loc(fused[#loc92, #loc93])
#loc136 = loc(fused[#loc94, #loc95])
#loc137 = loc(fused[#loc97, #loc96])
