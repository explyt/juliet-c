!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc129)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc130)
  cir.func private  @printIntLine(!s32i) loc(#loc131)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc134)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc134)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc137)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc138)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc20)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc139)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc26)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc141)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc27)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !s32i loc(#loc142)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc28)
            cir.if %16 {
              %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc30)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc30)
              %19 = cir.const #cir.int<2> : !u32i loc(#loc30)
              %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc30)
              %21 = cir.const #cir.int<1> : !u32i loc(#loc30)
              %22 = cir.binop(add, %20, %21) : !u32i loc(#loc30)
              %23 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc31)
              %24 = cir.binop(sub, %22, %23) : !u32i loc(#loc144)
              cir.store %24, %4 : !u32i, !cir.ptr<!u32i> loc(#loc145)
            } loc(#loc143)
          } loc(#loc140)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc33)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc33)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc146)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc35)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc36)
        } loc(#loc136)
      } loc(#loc135)
    } loc(#loc133)
    cir.return loc(#loc8)
  } loc(#loc132)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc147)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc150)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc152)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc155)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc155)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc54)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc54)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } else {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc158)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc159)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc66)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc66)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc160)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc72)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc162)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc73)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !s32i loc(#loc163)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc74)
            cir.if %16 {
              %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc76)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc76)
              %19 = cir.const #cir.int<2> : !u32i loc(#loc76)
              %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc76)
              %21 = cir.const #cir.int<1> : !u32i loc(#loc76)
              %22 = cir.binop(add, %20, %21) : !u32i loc(#loc76)
              %23 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc77)
              %24 = cir.binop(sub, %22, %23) : !u32i loc(#loc165)
              cir.store %24, %4 : !u32i, !cir.ptr<!u32i> loc(#loc166)
            } loc(#loc164)
          } loc(#loc161)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc81)
            %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc82)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc82)
            %14 = cir.cmp(gt, %11, %13) : !u32i, !s32i loc(#loc168)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc83)
            cir.if %15 {
              %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc85)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc86)
              cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc85)
            } loc(#loc169)
          } loc(#loc167)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc87)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc87)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc170)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc89)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc90)
        } loc(#loc157)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc51)
  } loc(#loc153)
  cir.func no_proto internal private  @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc173)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc173)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc95)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc95)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc176)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc177)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc104)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc178)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc110)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc180)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc111)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !s32i loc(#loc181)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc112)
            cir.if %16 {
              %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc114)
              %19 = cir.const #cir.int<2> : !u32i loc(#loc114)
              %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc114)
              %21 = cir.const #cir.int<1> : !u32i loc(#loc114)
              %22 = cir.binop(add, %20, %21) : !u32i loc(#loc114)
              %23 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc115)
              %24 = cir.binop(sub, %22, %23) : !u32i loc(#loc183)
              cir.store %24, %4 : !u32i, !cir.ptr<!u32i> loc(#loc184)
            } loc(#loc182)
          } loc(#loc179)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc119)
            %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc120)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc120)
            %14 = cir.cmp(gt, %11, %13) : !u32i, !s32i loc(#loc186)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc121)
            cir.if %15 {
              %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc123)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc124)
              cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc123)
            } loc(#loc187)
          } loc(#loc185)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc125)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc125)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc188)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc128)
        } loc(#loc175)
      } loc(#loc174)
    } loc(#loc172)
    cir.return loc(#loc92)
  } loc(#loc171)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":20:1)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":37:1)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":22:5)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":36:5)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":22:8)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":22:26)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":23:5)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":24:9)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":35:9)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":25:13)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":25:22)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":26:13)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":26:17)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":27:27)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":27:13)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":27:32)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":28:13)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":31:13)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":28:17)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":28:26)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":28:31)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":28:28)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":29:13)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":30:31)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":30:42)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":30:17)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":33:25)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":33:13)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":34:26)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":34:13)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":96:1)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":100:1)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":98:5)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":98:11)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":99:5)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":99:11)
#loc43 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc44 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc45 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":49:19)
#loc48 = loc("/usr/include/stdlib.h":756:1)
#loc49 = loc("/usr/include/stdlib.h":756:70)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":44:1)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":70:1)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":46:5)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":69:5)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":46:8)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":46:27)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":47:5)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":50:5)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":52:5)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":49:9)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":53:9)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":68:9)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":54:13)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":54:22)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":55:13)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":55:17)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":56:27)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":56:13)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":56:32)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":57:13)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":60:13)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":57:17)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":57:26)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":57:31)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":57:28)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":58:13)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":59:31)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":59:42)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":59:17)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":62:13)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":65:13)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":62:17)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":62:31)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":62:29)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":63:13)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":64:17)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":64:22)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":66:25)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":66:13)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":67:26)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":67:13)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":73:1)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":94:1)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":75:5)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":93:5)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":75:8)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":75:26)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":76:5)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":77:9)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":92:9)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":78:13)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":78:22)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":79:13)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":79:17)
#loc104 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":80:27)
#loc105 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":80:13)
#loc106 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":80:32)
#loc107 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":81:13)
#loc108 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":84:13)
#loc109 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":81:17)
#loc110 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":81:26)
#loc111 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":81:31)
#loc112 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":81:28)
#loc113 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":82:13)
#loc114 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":83:31)
#loc115 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":83:42)
#loc116 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":83:17)
#loc117 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":86:13)
#loc118 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":89:13)
#loc119 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":86:17)
#loc120 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":86:31)
#loc121 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":86:29)
#loc122 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":87:13)
#loc123 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":88:17)
#loc124 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":88:22)
#loc125 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":90:25)
#loc126 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":90:13)
#loc127 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":91:26)
#loc128 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_11.c":91:13)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc5, #loc6])
#loc132 = loc(fused[#loc7, #loc8])
#loc133 = loc(fused[#loc9, #loc10])
#loc134 = loc(fused[#loc11, #loc12])
#loc135 = loc(fused[#loc13, #loc10])
#loc136 = loc(fused[#loc14, #loc15])
#loc137 = loc(fused[#loc16, #loc17])
#loc138 = loc(fused[#loc18, #loc19])
#loc139 = loc(fused[#loc21, #loc22])
#loc140 = loc(fused[#loc23, #loc24])
#loc141 = loc(fused[#loc25, #loc26])
#loc142 = loc(fused[#loc25, #loc27])
#loc143 = loc(fused[#loc29, #loc24])
#loc144 = loc(fused[#loc30, #loc31])
#loc145 = loc(fused[#loc32, #loc31])
#loc146 = loc(fused[#loc34, #loc33])
#loc147 = loc(fused[#loc37, #loc38])
#loc148 = loc(fused[#loc39, #loc40])
#loc149 = loc(fused[#loc41, #loc42])
#loc150 = loc(fused[#loc43, #loc44])
#loc151 = loc(fused[#loc45, #loc46])
#loc152 = loc(fused[#loc48, #loc49])
#loc153 = loc(fused[#loc50, #loc51])
#loc154 = loc(fused[#loc52, #loc53])
#loc155 = loc(fused[#loc54, #loc55])
#loc156 = loc(fused[#loc56, #loc57, #loc58, #loc53])
#loc157 = loc(fused[#loc60, #loc61])
#loc158 = loc(fused[#loc62, #loc63])
#loc159 = loc(fused[#loc64, #loc65])
#loc160 = loc(fused[#loc67, #loc68])
#loc161 = loc(fused[#loc69, #loc70])
#loc162 = loc(fused[#loc71, #loc72])
#loc163 = loc(fused[#loc71, #loc73])
#loc164 = loc(fused[#loc75, #loc70])
#loc165 = loc(fused[#loc76, #loc77])
#loc166 = loc(fused[#loc78, #loc77])
#loc167 = loc(fused[#loc79, #loc80])
#loc168 = loc(fused[#loc81, #loc82])
#loc169 = loc(fused[#loc84, #loc80])
#loc170 = loc(fused[#loc88, #loc87])
#loc171 = loc(fused[#loc91, #loc92])
#loc172 = loc(fused[#loc93, #loc94])
#loc173 = loc(fused[#loc95, #loc96])
#loc174 = loc(fused[#loc97, #loc94])
#loc175 = loc(fused[#loc98, #loc99])
#loc176 = loc(fused[#loc100, #loc101])
#loc177 = loc(fused[#loc102, #loc103])
#loc178 = loc(fused[#loc105, #loc106])
#loc179 = loc(fused[#loc107, #loc108])
#loc180 = loc(fused[#loc109, #loc110])
#loc181 = loc(fused[#loc109, #loc111])
#loc182 = loc(fused[#loc113, #loc108])
#loc183 = loc(fused[#loc114, #loc115])
#loc184 = loc(fused[#loc116, #loc115])
#loc185 = loc(fused[#loc117, #loc118])
#loc186 = loc(fused[#loc119, #loc120])
#loc187 = loc(fused[#loc122, #loc118])
#loc188 = loc(fused[#loc126, #loc125])
