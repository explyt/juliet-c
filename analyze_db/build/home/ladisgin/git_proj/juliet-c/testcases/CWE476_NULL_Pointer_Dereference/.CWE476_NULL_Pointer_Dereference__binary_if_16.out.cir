!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc41 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":73:10)
#loc42 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":73:14)
#loc43 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":73:20)
#loc44 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":73:32)
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc95 = loc(fused[#loc41, #loc42])
#loc96 = loc(fused[#loc43, #loc44])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"intOne == 5\00" : !cir.array<!s8i x 12>> : !cir.array<!s8i x 12> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_16_bad() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc8)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc8)
        cir.condition(%1) loc(#loc8)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc84)
          %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc12)
          cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc84)
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
            %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc16)
            %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc16)
            %5 = cir.cmp(ne, %2, %4) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc86)
            %6 = cir.cast(bool_to_int, %5 : !cir.bool), !s32i loc(#loc86)
            %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc17)
            %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc18)
            %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc19)
            %10 = cir.const #cir.int<5> : !s32i loc(#loc20)
            %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc87)
            %12 = cir.cast(bool_to_int, %11 : !cir.bool), !s32i loc(#loc87)
            %13 = cir.binop(and, %6, %12) : !s32i loc(#loc88)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc23)
            cir.if %14 {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc3)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc3)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc25)
            } loc(#loc89)
          } loc(#loc85)
        } loc(#loc83)
        cir.break loc(#loc26)
      } loc(#loc82)
    } loc(#loc82)
    cir.return loc(#loc5)
  } loc(#loc81)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc28)
  } loc(#loc90)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc92)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc38)
  cir.func @main(%arg0: !s32i loc(fused[#loc41, #loc42]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc43, #loc44])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc96)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc40)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc45)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc46)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc47)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc47)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc48)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc35)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %8 = cir.get_global @CWE476_NULL_Pointer_Dereference__binary_if_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call @CWE476_NULL_Pointer_Dereference__binary_if_16_good() : () -> () loc(#loc50)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc37)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %13 = cir.get_global @CWE476_NULL_Pointer_Dereference__binary_if_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call @CWE476_NULL_Pointer_Dereference__binary_if_16_bad() : () -> () loc(#loc54)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc38)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.return %17 : !s32i loc(#loc99)
  } loc(#loc94)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc63)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc63)
        cir.condition(%1) loc(#loc63)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc103)
          %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
          cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc103)
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
            %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc71)
            %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc71)
            %5 = cir.cmp(ne, %2, %4) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc105)
            %6 = cir.ternary(%5, true {
              %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc73)
              %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc18)
              %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %10 = cir.const #cir.int<5> : !s32i loc(#loc75)
              %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc106)
              %12 = cir.ternary(%11, true {
                %13 = cir.const #true loc(#loc72)
                cir.yield %13 : !cir.bool loc(#loc72)
              }, false {
                %13 = cir.const #false loc(#loc72)
                cir.yield %13 : !cir.bool loc(#loc72)
              }) : (!cir.bool) -> !cir.bool loc(#loc72)
              cir.yield %12 : !cir.bool loc(#loc72)
            }, false {
              %7 = cir.const #false loc(#loc72)
              cir.yield %7 : !cir.bool loc(#loc72)
            }) : (!cir.bool) -> !cir.bool loc(#loc72)
            cir.if %6 {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc77)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc77)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc78)
            } loc(#loc107)
          } loc(#loc104)
        } loc(#loc102)
        cir.break loc(#loc79)
      } loc(#loc101)
    } loc(#loc101)
    cir.return loc(#loc60)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_16.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":30:27)
#loc4 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":20:1)
#loc5 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":35:1)
#loc6 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":22:5)
#loc7 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":34:5)
#loc8 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":22:11)
#loc9 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":24:9)
#loc10 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":32:9)
#loc11 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":25:13)
#loc12 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":25:51)
#loc13 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:13)
#loc14 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":31:13)
#loc15 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:18)
#loc16 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:42)
#loc17 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:51)
#loc18 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc19 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:73)
#loc20 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:83)
#loc21 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:17)
#loc22 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:84)
#loc23 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:48)
#loc24 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":29:13)
#loc25 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":30:17)
#loc26 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":33:9)
#loc27 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":59:1)
#loc28 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":62:1)
#loc29 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":61:5)
#loc30 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":61:11)
#loc31 = loc("/usr/include/stdlib.h":575:1)
#loc32 = loc("/usr/include/stdlib.h":575:41)
#loc33 = loc("/usr/include/time.h":76:1)
#loc34 = loc("/usr/include/time.h":76:38)
#loc35 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":78:15)
#loc36 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":80:15)
#loc37 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":83:15)
#loc38 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":85:15)
#loc39 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":73:1)
#loc40 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":88:1)
#loc45 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":74:1)
#loc46 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":76:27)
#loc47 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":76:22)
#loc48 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":76:5)
#loc49 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":78:5)
#loc50 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":79:5)
#loc51 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":79:56)
#loc52 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":80:5)
#loc53 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":83:5)
#loc54 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":84:5)
#loc55 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":84:55)
#loc56 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":85:5)
#loc57 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":87:12)
#loc58 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":87:5)
#loc59 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":42:1)
#loc60 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":57:1)
#loc61 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":44:5)
#loc62 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":56:5)
#loc63 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":44:11)
#loc64 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":46:9)
#loc65 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":54:9)
#loc66 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":47:13)
#loc67 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":47:51)
#loc68 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:13)
#loc69 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":53:13)
#loc70 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:18)
#loc71 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:42)
#loc72 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:48)
#loc73 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:52)
#loc74 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:74)
#loc75 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:84)
#loc76 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":51:13)
#loc77 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":52:27)
#loc78 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":52:17)
#loc79 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":55:9)
#loc80 = loc(fused[#loc1, #loc2])
#loc81 = loc(fused[#loc4, #loc5])
#loc82 = loc(fused[#loc6, #loc7])
#loc83 = loc(fused[#loc9, #loc10])
#loc84 = loc(fused[#loc11, #loc12])
#loc85 = loc(fused[#loc13, #loc14])
#loc86 = loc(fused[#loc15, #loc16])
#loc87 = loc(fused[#loc17, #loc20])
#loc88 = loc(fused[#loc21, #loc22])
#loc89 = loc(fused[#loc24, #loc14])
#loc90 = loc(fused[#loc27, #loc28])
#loc91 = loc(fused[#loc29, #loc30])
#loc92 = loc(fused[#loc31, #loc32])
#loc93 = loc(fused[#loc33, #loc34])
#loc94 = loc(fused[#loc39, #loc40])
#loc97 = loc(fused[#loc50, #loc51])
#loc98 = loc(fused[#loc54, #loc55])
#loc99 = loc(fused[#loc58, #loc57])
#loc100 = loc(fused[#loc59, #loc60])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc64, #loc65])
#loc103 = loc(fused[#loc66, #loc67])
#loc104 = loc(fused[#loc68, #loc69])
#loc105 = loc(fused[#loc70, #loc71])
#loc106 = loc(fused[#loc73, #loc75])
#loc107 = loc(fused[#loc76, #loc69])
