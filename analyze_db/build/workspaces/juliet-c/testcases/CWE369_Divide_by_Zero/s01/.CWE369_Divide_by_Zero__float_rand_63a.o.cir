!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":33:19)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":63:19)
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_63a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc42)
  cir.func private @CWE369_Divide_by_Zero__float_rand_63b_badSink(!cir.ptr<!cir.float>) loc(#loc43)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_63_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc46)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc11)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc11)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc11)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc11)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc11)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc11)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc11)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc11)
    cir.br ^bb3(%17 : !u32i) loc(#loc11)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc11)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc11)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc11)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc11)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc11)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc11)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc11)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc11)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc11)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc11)
    cir.br ^bb3(%33 : !u32i) loc(#loc11)
  ^bb3(%34: !u32i loc("CWE369_Divide_by_Zero__float_rand_63a.c":33:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc11)
    %36 = cir.cast(int_to_float, %35 : !s32i), !cir.float loc(#loc11)
    cir.store %36, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc47)
    cir.call @CWE369_Divide_by_Zero__float_rand_63b_badSink(%0) : (!cir.ptr<!cir.float>) -> () loc(#loc13)
    cir.return loc(#loc6)
  } loc(#loc44)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_63_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc49)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc16)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc50)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc18)
    cir.return loc(#loc15)
  } loc(#loc48)
  cir.func private @CWE369_Divide_by_Zero__float_rand_63b_goodG2BSink(!cir.ptr<!cir.float>) loc(#loc51)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc53)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc26)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc54)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc28)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc55)
    cir.call @CWE369_Divide_by_Zero__float_rand_63b_goodG2BSink(%0) : (!cir.ptr<!cir.float>) -> () loc(#loc30)
    cir.return loc(#loc23)
  } loc(#loc52)
  cir.func private @CWE369_Divide_by_Zero__float_rand_63b_goodB2GSink(!cir.ptr<!cir.float>) loc(#loc56)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc58)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc37)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc59)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc39)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc39)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc39)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc39)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc39)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc39)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc39)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc39)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc39)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc39)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc39)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc39)
    cir.br ^bb3(%17 : !u32i) loc(#loc39)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc39)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc39)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc39)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc39)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc39)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc39)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc39)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc39)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc39)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc39)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc39)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc39)
    cir.br ^bb3(%33 : !u32i) loc(#loc39)
  ^bb3(%34: !u32i loc("CWE369_Divide_by_Zero__float_rand_63a.c":63:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc39)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc39)
    %36 = cir.cast(int_to_float, %35 : !s32i), !cir.float loc(#loc39)
    cir.store %36, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc60)
    cir.call @CWE369_Divide_by_Zero__float_rand_63b_goodB2GSink(%0) : (!cir.ptr<!cir.float>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc57)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_63a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":25:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":25:67)
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":27:1)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":35:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":29:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":29:11)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":31:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":31:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":33:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":34:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":67:1)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":71:1)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":69:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":69:13)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":70:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":70:13)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":42:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":42:68)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":44:1)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":52:1)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":46:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":46:11)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":48:12)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":48:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":50:12)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":50:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":51:5)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":55:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":55:68)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":57:1)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":65:1)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":59:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":59:11)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":61:12)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":61:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":63:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_63a.c":64:5)
#loc42 = loc(fused[#loc1, #loc2])
#loc43 = loc(fused[#loc3, #loc4])
#loc44 = loc(fused[#loc5, #loc6])
#loc45 = loc(fused[#loc7, #loc8])
#loc46 = loc(fused[#loc10, #loc9])
#loc47 = loc(fused[#loc12, #loc11])
#loc48 = loc(fused[#loc14, #loc15])
#loc49 = loc(fused[#loc16, #loc17])
#loc50 = loc(fused[#loc18, #loc19])
#loc51 = loc(fused[#loc20, #loc21])
#loc52 = loc(fused[#loc22, #loc23])
#loc53 = loc(fused[#loc24, #loc25])
#loc54 = loc(fused[#loc27, #loc26])
#loc55 = loc(fused[#loc29, #loc28])
#loc56 = loc(fused[#loc31, #loc32])
#loc57 = loc(fused[#loc33, #loc34])
#loc58 = loc(fused[#loc35, #loc36])
#loc59 = loc(fused[#loc38, #loc37])
#loc60 = loc(fused[#loc40, #loc39])
