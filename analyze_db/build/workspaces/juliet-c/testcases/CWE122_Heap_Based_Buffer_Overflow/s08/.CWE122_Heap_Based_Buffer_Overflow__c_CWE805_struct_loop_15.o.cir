!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc253)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc254)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc255)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc256)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc257)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc259)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc260)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
          %4 = cir.const #cir.int<50> : !s32i loc(#loc23)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc23)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc262)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc263)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc264)
          cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc265)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc267)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc34)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc35)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
            } loc(#loc268)
          } loc(#loc266)
          cir.break loc(#loc36)
        } loc(#loc21)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc37)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc261)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc270)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc272)
        cir.scope {
          %4 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc50)
          cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc274)
          cir.for : cond {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc52)
            %7 = cir.const #cir.int<100> : !s32i loc(#loc53)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc53)
            %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc275)
            cir.condition(%9) loc(#loc54)
          } body {
            cir.scope {
              %6 = cir.const #cir.int<0> : !s32i loc(#loc56)
              %7 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc57)
              %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %9 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %7 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
              cir.store %6, %10 : !s32i, !cir.ptr<!s32i> loc(#loc277)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc60)
              %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc61)
              %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
              %15 = cir.get_member %14[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc63)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc278)
            } loc(#loc276)
            cir.yield loc(#loc49)
          } step {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %7 = cir.unary(inc, %6) : !u64i, !u64i loc(#loc65)
            cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc279)
            cir.yield loc(#loc273)
          } loc(#loc273)
        } loc(#loc273)
      } loc(#loc271)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc281)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc72)
          cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc283)
          cir.for : cond {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc74)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc75)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc75)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc284)
            cir.condition(%15) loc(#loc76)
          } body {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc79)
              %14 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc80)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc81)
              %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc82)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc82)
              cir.copy %17 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc80)
            } loc(#loc285)
            cir.yield loc(#loc71)
          } step {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc83)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc84)
            cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc286)
            cir.yield loc(#loc282)
          } loc(#loc282)
        } loc(#loc282)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc85)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc86)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!ty__twoIntsStruct>, %5 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
        cir.call @printStructLine(%6) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc88)
        %7 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc89)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc90)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc90)
        cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc89)
      } loc(#loc280)
    } loc(#loc269)
    cir.return loc(#loc13)
  } loc(#loc258)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc288)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc93)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc289)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc95)
    cir.return loc(#loc92)
  } loc(#loc287)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc291)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc101)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc292)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc105)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc107)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc107)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          cir.break loc(#loc109)
        } loc(#loc106)
        cir.case(default, []) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc111)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc112)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc112)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc294)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc295)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc296)
          cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc297)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc119)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc120)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc299)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc122)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc123)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc124)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc122)
            } loc(#loc300)
          } loc(#loc298)
          cir.break loc(#loc125)
        } loc(#loc110)
        cir.yield loc(#loc103)
      } loc(#loc103)
    } loc(#loc293)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc302)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc304)
        cir.scope {
          %4 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc136)
          cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc306)
          cir.for : cond {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc138)
            %7 = cir.const #cir.int<100> : !s32i loc(#loc139)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc139)
            %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc307)
            cir.condition(%9) loc(#loc140)
          } body {
            cir.scope {
              %6 = cir.const #cir.int<0> : !s32i loc(#loc142)
              %7 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc143)
              %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc144)
              %9 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %7 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc144)
              %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
              cir.store %6, %10 : !s32i, !cir.ptr<!s32i> loc(#loc309)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc145)
              %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc146)
              %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
              %15 = cir.get_member %14[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc63)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc310)
            } loc(#loc308)
            cir.yield loc(#loc135)
          } step {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc148)
            %7 = cir.unary(inc, %6) : !u64i, !u64i loc(#loc149)
            cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc311)
            cir.yield loc(#loc305)
          } loc(#loc305)
        } loc(#loc305)
      } loc(#loc303)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc313)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc156)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc156)
          cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc315)
          cir.for : cond {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc158)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc159)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc159)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc316)
            cir.condition(%15) loc(#loc160)
          } body {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc162)
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc163)
              %14 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc165)
              %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
              cir.copy %17 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
            } loc(#loc317)
            cir.yield loc(#loc155)
          } step {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc167)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc168)
            cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc318)
            cir.yield loc(#loc314)
          } loc(#loc314)
        } loc(#loc314)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc169)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc170)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!ty__twoIntsStruct>, %5 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc171)
        cir.call @printStructLine(%6) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc172)
        %7 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc173)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc174)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc174)
        cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc173)
      } loc(#loc312)
    } loc(#loc301)
    cir.return loc(#loc98)
  } loc(#loc290)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc320)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc179)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc321)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc183)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc185)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc186)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc186)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc323)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc324)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc185)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc325)
          cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc326)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc193)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc194)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc194)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc328)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc196)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc197)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc198)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc196)
            } loc(#loc329)
          } loc(#loc327)
          cir.break loc(#loc199)
        } loc(#loc184)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc201)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc201)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc202)
          cir.break loc(#loc203)
        } loc(#loc200)
        cir.yield loc(#loc181)
      } loc(#loc181)
    } loc(#loc322)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc331)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc333)
        cir.scope {
          %4 = cir.const #cir.int<0> : !s32i loc(#loc214)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc214)
          cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc335)
          cir.for : cond {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc216)
            %7 = cir.const #cir.int<100> : !s32i loc(#loc217)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc217)
            %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc336)
            cir.condition(%9) loc(#loc218)
          } body {
            cir.scope {
              %6 = cir.const #cir.int<0> : !s32i loc(#loc220)
              %7 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc221)
              %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc222)
              %9 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %7 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc222)
              %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
              cir.store %6, %10 : !s32i, !cir.ptr<!s32i> loc(#loc338)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc223)
              %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc224)
              %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc225)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc225)
              %15 = cir.get_member %14[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc63)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc339)
            } loc(#loc337)
            cir.yield loc(#loc213)
          } step {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc226)
            %7 = cir.unary(inc, %6) : !u64i, !u64i loc(#loc227)
            cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc340)
            cir.yield loc(#loc334)
          } loc(#loc334)
        } loc(#loc334)
      } loc(#loc332)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc342)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc234)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc234)
          cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc344)
          cir.for : cond {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc236)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc237)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc237)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc345)
            cir.condition(%15) loc(#loc238)
          } body {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc240)
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc241)
              %14 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc242)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc243)
              %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc244)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc244)
              cir.copy %17 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc242)
            } loc(#loc346)
            cir.yield loc(#loc233)
          } step {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc245)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc246)
            cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc347)
            cir.yield loc(#loc343)
          } loc(#loc343)
        } loc(#loc343)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc247)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc248)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!ty__twoIntsStruct>, %5 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc249)
        cir.call @printStructLine(%6) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc250)
        %7 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc251)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc252)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc252)
        cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc251)
      } loc(#loc341)
    } loc(#loc330)
    cir.return loc(#loc176)
  } loc(#loc319)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":34:19)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":21:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":59:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":23:21)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":24:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":24:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":25:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":36:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":25:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":29:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":29:40)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":29:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":29:63)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":29:64)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":30:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":30:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":30:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":30:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":30:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":30:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":30:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":31:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":32:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":35:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":37:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":58:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":38:33)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":39:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":47:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":40:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":40:20)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":42:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":46:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":42:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":42:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":42:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":42:29)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":42:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":43:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":44:36)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":44:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":44:17)
#loc59 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":45:36)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":45:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":45:17)
#loc63 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":42:35)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":42:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":48:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":57:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":49:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":49:20)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":51:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":54:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":51:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":51:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":51:25)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":51:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":51:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":52:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":53:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":53:22)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":53:23)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":53:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":53:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":51:35)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":51:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":55:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":55:35)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":55:36)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":55:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":56:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":56:18)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":147:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":151:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":149:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":149:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":150:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":150:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":66:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":104:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":68:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":68:21)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":69:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":69:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":70:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":81:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":70:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":72:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":74:19)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":74:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":75:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":76:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":78:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":78:40)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":78:44)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":78:64)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":78:65)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":78:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":79:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":79:37)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":79:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":79:21)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":79:27)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":79:28)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":79:34)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":79:33)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":80:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":82:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":103:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":83:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":83:33)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":84:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":92:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":85:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":85:20)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":87:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":91:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":87:22)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":87:18)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":87:25)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":87:29)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":87:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":88:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":89:36)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":89:24)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":89:17)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":90:36)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":90:24)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":90:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":87:35)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":87:34)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":93:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":102:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":94:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":94:20)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":96:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":99:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":96:22)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":96:18)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":96:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":96:29)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":96:27)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":97:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":98:17)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":98:22)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":98:23)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":98:34)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":98:27)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":96:35)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":96:34)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":100:30)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":100:35)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":100:36)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":100:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":101:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":101:18)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":107:1)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":145:1)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":109:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":109:21)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":110:12)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":110:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":111:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":122:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":111:12)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":113:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":115:33)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":115:40)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":115:44)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":115:64)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":115:65)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":115:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":116:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":116:37)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":116:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":116:21)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":116:27)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":116:28)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":116:34)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":116:33)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":117:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":118:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":120:19)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":120:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":121:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":123:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":144:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":124:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":124:33)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":125:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":133:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":126:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":126:20)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":128:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":132:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":128:22)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":128:18)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":128:25)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":128:29)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":128:27)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":129:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":130:36)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":130:24)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":130:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":131:36)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":131:24)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":131:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":128:35)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":128:34)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":134:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":143:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":135:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":135:20)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":137:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":140:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":137:22)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":137:18)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":137:25)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":137:29)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":137:27)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":138:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":139:17)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":139:22)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":139:23)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":139:34)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":139:27)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":137:35)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":137:34)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":141:30)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":141:35)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":141:36)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":141:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":142:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c":142:18)
#loc253 = loc(fused[#loc1, #loc2])
#loc254 = loc(fused[#loc3, #loc4])
#loc255 = loc(fused[#loc5, #loc6])
#loc256 = loc(fused[#loc8, #loc9])
#loc257 = loc(fused[#loc10, #loc11])
#loc258 = loc(fused[#loc12, #loc13])
#loc259 = loc(fused[#loc14, #loc15])
#loc260 = loc(fused[#loc17, #loc16])
#loc261 = loc(fused[#loc18, #loc19])
#loc262 = loc(fused[#loc24, #loc25])
#loc263 = loc(fused[#loc23, #loc25])
#loc264 = loc(fused[#loc22, #loc26])
#loc265 = loc(fused[#loc27, #loc26])
#loc266 = loc(fused[#loc28, #loc29])
#loc267 = loc(fused[#loc30, #loc31])
#loc268 = loc(fused[#loc32, #loc29])
#loc269 = loc(fused[#loc40, #loc41])
#loc270 = loc(fused[#loc42, #loc43])
#loc271 = loc(fused[#loc44, #loc45])
#loc272 = loc(fused[#loc46, #loc47])
#loc273 = loc(fused[#loc48, #loc49])
#loc274 = loc(fused[#loc51, #loc50])
#loc275 = loc(fused[#loc52, #loc53])
#loc276 = loc(fused[#loc55, #loc49])
#loc277 = loc(fused[#loc58, #loc56])
#loc278 = loc(fused[#loc62, #loc60])
#loc279 = loc(fused[#loc65, #loc64])
#loc280 = loc(fused[#loc66, #loc67])
#loc281 = loc(fused[#loc68, #loc69])
#loc282 = loc(fused[#loc70, #loc71])
#loc283 = loc(fused[#loc73, #loc72])
#loc284 = loc(fused[#loc74, #loc75])
#loc285 = loc(fused[#loc77, #loc71])
#loc286 = loc(fused[#loc84, #loc83])
#loc287 = loc(fused[#loc91, #loc92])
#loc288 = loc(fused[#loc93, #loc94])
#loc289 = loc(fused[#loc95, #loc96])
#loc290 = loc(fused[#loc97, #loc98])
#loc291 = loc(fused[#loc99, #loc100])
#loc292 = loc(fused[#loc102, #loc101])
#loc293 = loc(fused[#loc103, #loc104])
#loc294 = loc(fused[#loc113, #loc114])
#loc295 = loc(fused[#loc112, #loc114])
#loc296 = loc(fused[#loc111, #loc115])
#loc297 = loc(fused[#loc116, #loc115])
#loc298 = loc(fused[#loc117, #loc118])
#loc299 = loc(fused[#loc119, #loc120])
#loc300 = loc(fused[#loc121, #loc118])
#loc301 = loc(fused[#loc126, #loc127])
#loc302 = loc(fused[#loc128, #loc129])
#loc303 = loc(fused[#loc130, #loc131])
#loc304 = loc(fused[#loc132, #loc133])
#loc305 = loc(fused[#loc134, #loc135])
#loc306 = loc(fused[#loc137, #loc136])
#loc307 = loc(fused[#loc138, #loc139])
#loc308 = loc(fused[#loc141, #loc135])
#loc309 = loc(fused[#loc144, #loc142])
#loc310 = loc(fused[#loc147, #loc145])
#loc311 = loc(fused[#loc149, #loc148])
#loc312 = loc(fused[#loc150, #loc151])
#loc313 = loc(fused[#loc152, #loc153])
#loc314 = loc(fused[#loc154, #loc155])
#loc315 = loc(fused[#loc157, #loc156])
#loc316 = loc(fused[#loc158, #loc159])
#loc317 = loc(fused[#loc161, #loc155])
#loc318 = loc(fused[#loc168, #loc167])
#loc319 = loc(fused[#loc175, #loc176])
#loc320 = loc(fused[#loc177, #loc178])
#loc321 = loc(fused[#loc180, #loc179])
#loc322 = loc(fused[#loc181, #loc182])
#loc323 = loc(fused[#loc187, #loc188])
#loc324 = loc(fused[#loc186, #loc188])
#loc325 = loc(fused[#loc185, #loc189])
#loc326 = loc(fused[#loc190, #loc189])
#loc327 = loc(fused[#loc191, #loc192])
#loc328 = loc(fused[#loc193, #loc194])
#loc329 = loc(fused[#loc195, #loc192])
#loc330 = loc(fused[#loc204, #loc205])
#loc331 = loc(fused[#loc206, #loc207])
#loc332 = loc(fused[#loc208, #loc209])
#loc333 = loc(fused[#loc210, #loc211])
#loc334 = loc(fused[#loc212, #loc213])
#loc335 = loc(fused[#loc215, #loc214])
#loc336 = loc(fused[#loc216, #loc217])
#loc337 = loc(fused[#loc219, #loc213])
#loc338 = loc(fused[#loc222, #loc220])
#loc339 = loc(fused[#loc225, #loc223])
#loc340 = loc(fused[#loc227, #loc226])
#loc341 = loc(fused[#loc228, #loc229])
#loc342 = loc(fused[#loc230, #loc231])
#loc343 = loc(fused[#loc232, #loc233])
#loc344 = loc(fused[#loc235, #loc234])
#loc345 = loc(fused[#loc236, #loc237])
#loc346 = loc(fused[#loc239, #loc233])
#loc347 = loc(fused[#loc246, #loc245])
