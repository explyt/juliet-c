!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc111)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc115)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc11)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc116)
    cir.scope {
      %10 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc15)
      cir.if %11 {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc17)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc18)
        %15 = cir.const #cir.int<100> : !s32i loc(#loc19)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc19)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc19)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc119)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc23)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc23)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
        %22 = cir.const #cir.int<100> : !s32i loc(#loc25)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc25)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc27)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc120)
      } loc(#loc118)
    } loc(#loc117)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc122)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc122)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc122)
      %12 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc32)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc33)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
      %15 = cir.call @strcat(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc32)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc36)
    } loc(#loc121)
    cir.return loc(#loc6)
  } loc(#loc113)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc128)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc49)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc49)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc49)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc49)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc49)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc49)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc49)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc128)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc129)
    cir.scope {
      %10 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc54)
      cir.if %11 {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc58)
      } else {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc59)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc60)
        %15 = cir.const #cir.int<50> : !s32i loc(#loc61)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc62)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc61)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc61)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc132)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc65)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc65)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
        %22 = cir.const #cir.int<50> : !s32i loc(#loc67)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc68)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc67)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc69)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc133)
      } loc(#loc131)
    } loc(#loc130)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc135)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc135)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc135)
      %12 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc74)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc75)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
      %15 = cir.call @strcat(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc74)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    } loc(#loc134)
    cir.return loc(#loc45)
  } loc(#loc126)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc84)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc84)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc84)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc84)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc84)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc84)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc84)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc138)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc139)
    cir.scope {
      %10 = cir.const #cir.int<1> : !s32i loc(#loc89)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc89)
      cir.if %11 {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
        %14 = cir.const #cir.int<65> : !s32i loc(#loc92)
        %15 = cir.const #cir.int<50> : !s32i loc(#loc93)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc93)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc93)
        cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc142)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc97)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc97)
        %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
        %22 = cir.const #cir.int<50> : !s32i loc(#loc99)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc99)
        %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc101)
        cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc143)
      } loc(#loc141)
    } loc(#loc140)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc145)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc145)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc145)
      %12 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc106)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc107)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
      %15 = cir.call @strcat(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc106)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    } loc(#loc144)
    cir.return loc(#loc80)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":0:0)
#loc1 = loc("/usr/include/string.h":149:1)
#loc2 = loc("/usr/include/string.h":150:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":23:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":40:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":25:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":25:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":26:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":26:33)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":27:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":27:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":28:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":33:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":28:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":29:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":31:16)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":31:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":31:27)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":31:31)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":31:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":31:32)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":32:23)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":32:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":32:14)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":32:18)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":32:19)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":34:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":39:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":35:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":35:25)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":37:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":37:16)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":37:22)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":38:19)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":38:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":91:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":95:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":93:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":93:14)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":94:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":94:14)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":55:19)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":47:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":69:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":49:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":49:12)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":50:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":50:33)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":51:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":51:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":52:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":62:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":52:8)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":53:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":56:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":58:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":55:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":60:16)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":60:22)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":60:27)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":60:30)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":60:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":60:31)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":61:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":61:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":61:14)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":61:17)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":61:18)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":63:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":68:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":64:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":64:25)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":66:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":66:16)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":66:22)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":67:19)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":67:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":72:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":89:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":74:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":74:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":75:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":75:33)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":76:12)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":76:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":77:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":82:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":77:8)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":78:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":80:16)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":80:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":80:27)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":80:30)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":80:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":80:31)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":81:22)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":81:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":81:14)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":81:17)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":81:18)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":83:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":88:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":84:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":84:25)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":86:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":86:16)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":86:22)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":87:19)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c":87:9)
#loc111 = loc(fused[#loc1, #loc2])
#loc112 = loc(fused[#loc3, #loc4])
#loc113 = loc(fused[#loc5, #loc6])
#loc114 = loc(fused[#loc7, #loc8])
#loc115 = loc(fused[#loc9, #loc10])
#loc116 = loc(fused[#loc12, #loc11])
#loc117 = loc(fused[#loc13, #loc14])
#loc118 = loc(fused[#loc16, #loc14])
#loc119 = loc(fused[#loc21, #loc22])
#loc120 = loc(fused[#loc24, #loc23])
#loc121 = loc(fused[#loc28, #loc29])
#loc122 = loc(fused[#loc30, #loc31])
#loc123 = loc(fused[#loc37, #loc38])
#loc124 = loc(fused[#loc39, #loc40])
#loc125 = loc(fused[#loc41, #loc42])
#loc126 = loc(fused[#loc44, #loc45])
#loc127 = loc(fused[#loc46, #loc47])
#loc128 = loc(fused[#loc48, #loc49])
#loc129 = loc(fused[#loc51, #loc50])
#loc130 = loc(fused[#loc52, #loc53])
#loc131 = loc(fused[#loc55, #loc56, #loc57, #loc53])
#loc132 = loc(fused[#loc63, #loc64])
#loc133 = loc(fused[#loc66, #loc65])
#loc134 = loc(fused[#loc70, #loc71])
#loc135 = loc(fused[#loc72, #loc73])
#loc136 = loc(fused[#loc79, #loc80])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc83, #loc84])
#loc139 = loc(fused[#loc86, #loc85])
#loc140 = loc(fused[#loc87, #loc88])
#loc141 = loc(fused[#loc90, #loc88])
#loc142 = loc(fused[#loc95, #loc96])
#loc143 = loc(fused[#loc98, #loc97])
#loc144 = loc(fused[#loc102, #loc103])
#loc145 = loc(fused[#loc104, #loc105])
