!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc46 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":111:10)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":111:14)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":111:20)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":111:32)
#loc135 = loc(fused[#loc46, #loc47])
#loc136 = loc(fused[#loc48, #loc49])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc118)
  cir.func private @printHexCharLine(!s8i) loc(#loc119)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_sub_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc121)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc9)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc122)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%4) loc(#loc13)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc14)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
        %7 = cir.ternary(%6, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc14)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc14)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc14)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc14)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc14)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc14)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc14)
          cir.yield %21 : !u32i loc(#loc14)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc14)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc14)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc14)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc14)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc14)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc14)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc14)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc14)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc14)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc14)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc14)
          cir.yield %25 : !u32i loc(#loc14)
        }) : (!cir.bool) -> !u32i loc(#loc14)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc14)
        %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc14)
        cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc124)
        cir.break loc(#loc16)
      } loc(#loc123)
    } loc(#loc123)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
        cir.condition(%4) loc(#loc19)
      } do {
        cir.scope {
          %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc127)
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc24)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc24)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc24)
          %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc24)
          cir.store %8, %3 : !s8i, !cir.ptr<!s8i> loc(#loc127)
          %9 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc25)
          cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc26)
        } loc(#loc126)
        cir.break loc(#loc27)
      } loc(#loc125)
    } loc(#loc125)
    cir.return loc(#loc6)
  } loc(#loc120)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_sub_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc128)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc131)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc43)
  cir.func @main(%arg0: !s32i loc(fused[#loc46, #loc47]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc48, #loc49])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc50)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc51)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc52)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc52)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc53)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc40)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %8 = cir.get_global @CWE191_Integer_Underflow__char_rand_sub_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE191_Integer_Underflow__char_rand_sub_16_good() : () -> () loc(#loc55)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc41)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc42)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %13 = cir.get_global @CWE191_Integer_Underflow__char_rand_sub_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call @CWE191_Integer_Underflow__char_rand_sub_16_bad() : () -> () loc(#loc59)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc43)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.return %17 : !s32i loc(#loc139)
  } loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc141)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc69)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc69)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc142)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc73)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc73)
        cir.condition(%4) loc(#loc73)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc74)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc74)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc74)
        %7 = cir.ternary(%6, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc74)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc74)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc74)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc74)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc74)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc74)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc74)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc74)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc74)
          cir.yield %21 : !u32i loc(#loc74)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc74)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc74)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc74)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc74)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc74)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc74)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc74)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc74)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc74)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc74)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc74)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc74)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc74)
          cir.yield %25 : !u32i loc(#loc74)
        }) : (!cir.bool) -> !u32i loc(#loc74)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc74)
        %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc74)
        cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc144)
        cir.break loc(#loc76)
      } loc(#loc143)
    } loc(#loc143)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc79)
        cir.condition(%4) loc(#loc79)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc82)
          %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc82)
          %5 = cir.const #cir.int<127> : !s32i loc(#loc83)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc83)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc83)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc83)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc147)
          cir.if %9 {
            %10 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc149)
            %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc89)
            %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc89)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc89)
            %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc89)
            cir.store %15, %10 : !s8i, !cir.ptr<!s8i> loc(#loc149)
            %16 = cir.load %10 : !cir.ptr<!s8i>, !s8i loc(#loc90)
            cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc91)
          } else {
            %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc64)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc64)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc92)
          } loc(#loc148)
        } loc(#loc146)
        cir.break loc(#loc93)
      } loc(#loc145)
    } loc(#loc145)
    cir.return loc(#loc66)
  } loc(#loc140)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc151)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc98)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc98)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc152)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc102)
        cir.condition(%4) loc(#loc102)
      } do {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc103)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc104)
        %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc104)
        cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc154)
        cir.break loc(#loc106)
      } loc(#loc153)
    } loc(#loc153)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc109)
        cir.condition(%4) loc(#loc109)
      } do {
        cir.scope {
          %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc157)
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc114)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc114)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc113)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc114)
          %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc114)
          cir.store %8, %3 : !s8i, !cir.ptr<!s8i> loc(#loc157)
          %9 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc115)
          cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc116)
        } loc(#loc156)
        cir.break loc(#loc117)
      } loc(#loc155)
    } loc(#loc155)
    cir.return loc(#loc95)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":41:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":24:10)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":26:11)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":29:22)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":29:9)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":30:9)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":32:5)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":40:5)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":32:11)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":34:9)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":38:9)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":36:13)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":36:34)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":36:27)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":37:30)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":37:13)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":39:9)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":96:1)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":100:1)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":98:5)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":98:13)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":99:5)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":99:13)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":116:15)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":118:15)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":121:15)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":123:15)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":111:1)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":126:1)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":112:1)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":114:27)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":114:22)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":114:5)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":116:5)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":117:5)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":117:53)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":118:5)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":121:5)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":122:5)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":122:52)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":123:5)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":125:12)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":125:5)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":68:23)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":48:1)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":72:1)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":50:5)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":50:10)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":51:12)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":51:5)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":52:5)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":57:5)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":52:11)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":55:22)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":55:9)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":56:9)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":58:5)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":71:5)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":58:11)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":61:9)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":69:9)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":61:13)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":61:20)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":62:9)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":65:9)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":67:9)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":63:13)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":63:34)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":63:27)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":64:30)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":64:13)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":68:13)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":70:9)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":75:1)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":94:1)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":77:5)
#loc97 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":77:10)
#loc98 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":78:12)
#loc99 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":78:5)
#loc100 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":79:5)
#loc101 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":84:5)
#loc102 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":79:11)
#loc103 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":82:17)
#loc104 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":82:16)
#loc105 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":82:9)
#loc106 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":83:9)
#loc107 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":85:5)
#loc108 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":93:5)
#loc109 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":85:11)
#loc110 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":87:9)
#loc111 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":91:9)
#loc112 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":89:13)
#loc113 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":89:34)
#loc114 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":89:27)
#loc115 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":90:30)
#loc116 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":90:13)
#loc117 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":92:9)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc10, #loc9])
#loc123 = loc(fused[#loc11, #loc12])
#loc124 = loc(fused[#loc15, #loc14])
#loc125 = loc(fused[#loc17, #loc18])
#loc126 = loc(fused[#loc20, #loc21])
#loc127 = loc(fused[#loc22, #loc23])
#loc128 = loc(fused[#loc28, #loc29])
#loc129 = loc(fused[#loc30, #loc31])
#loc130 = loc(fused[#loc32, #loc33])
#loc131 = loc(fused[#loc34, #loc35])
#loc132 = loc(fused[#loc36, #loc37])
#loc133 = loc(fused[#loc38, #loc39])
#loc134 = loc(fused[#loc44, #loc45])
#loc137 = loc(fused[#loc55, #loc56])
#loc138 = loc(fused[#loc59, #loc60])
#loc139 = loc(fused[#loc63, #loc62])
#loc140 = loc(fused[#loc65, #loc66])
#loc141 = loc(fused[#loc67, #loc68])
#loc142 = loc(fused[#loc70, #loc69])
#loc143 = loc(fused[#loc71, #loc72])
#loc144 = loc(fused[#loc75, #loc74])
#loc145 = loc(fused[#loc77, #loc78])
#loc146 = loc(fused[#loc80, #loc81])
#loc147 = loc(fused[#loc82, #loc83])
#loc148 = loc(fused[#loc84, #loc85, #loc86, #loc81])
#loc149 = loc(fused[#loc87, #loc88])
#loc150 = loc(fused[#loc94, #loc95])
#loc151 = loc(fused[#loc96, #loc97])
#loc152 = loc(fused[#loc99, #loc98])
#loc153 = loc(fused[#loc100, #loc101])
#loc154 = loc(fused[#loc105, #loc103])
#loc155 = loc(fused[#loc107, #loc108])
#loc156 = loc(fused[#loc110, #loc111])
#loc157 = loc(fused[#loc112, #loc113])
