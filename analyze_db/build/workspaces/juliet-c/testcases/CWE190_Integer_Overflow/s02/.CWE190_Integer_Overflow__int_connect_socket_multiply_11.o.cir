!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc459)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc460)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc461)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc462)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc463)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc464)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc465)
  cir.func private @close(!s32i) -> !s32i loc(#loc466)
  cir.func private @printIntLine(!s32i) loc(#loc467)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_multiply_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc469)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc24)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc470)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc472)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc472)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc28)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc475)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc476)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc477)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc478)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc38)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc477)
          cir.scope {
            cir.do {
              cir.scope {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc45)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc46)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc47)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc481)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc54)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc54)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc483)
                  cir.if %57 {
                    cir.break loc(#loc56)
                  } loc(#loc484)
                } loc(#loc482)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc485)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc59)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc486)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc487)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc64)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc64)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc488)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc67)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc489)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc72)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc72)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc73)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc490)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc492)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc493)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc493)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc84)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc85)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc85)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc494)
                  cir.if %61 {
                    cir.break loc(#loc87)
                  } loc(#loc495)
                } loc(#loc491)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc90)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc90)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc90)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc90)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc90)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc90)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc90)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc91)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc496)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc92)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc93)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc93)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc497)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc99)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc99)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc499)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc100)
                    cir.yield %59 : !cir.bool loc(#loc100)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc102)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc500)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc100)
                      cir.yield %63 : !cir.bool loc(#loc100)
                    }, false {
                      %63 = cir.const #false loc(#loc100)
                      cir.yield %63 : !cir.bool loc(#loc100)
                    }) : (!cir.bool) -> !cir.bool loc(#loc100)
                    cir.yield %62 : !cir.bool loc(#loc100)
                  }) : (!cir.bool) -> !cir.bool loc(#loc100)
                  cir.if %58 {
                    cir.break loc(#loc104)
                  } loc(#loc501)
                } loc(#loc498)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc105)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc105)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc107)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc502)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc109)
                cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc503)
              } loc(#loc480)
              cir.yield loc(#loc42)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc112)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc112)
              cir.condition(%13) loc(#loc112)
            } loc(#loc479)
          } loc(#loc479)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc116)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc116)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc505)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc118)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc119)
            } loc(#loc506)
          } loc(#loc504)
        } loc(#loc474)
      } loc(#loc473)
    } loc(#loc471)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc508)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc508)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc122)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc122)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc128)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc511)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc513)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc131)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc132)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc513)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc134)
          } loc(#loc512)
        } loc(#loc510)
      } loc(#loc509)
    } loc(#loc507)
    cir.return loc(#loc21)
  } loc(#loc468)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_multiply_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc515)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc137)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc516)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc139)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc517)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc141)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc518)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc143)
    cir.return loc(#loc136)
  } loc(#loc514)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc519)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc520)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc150)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc522)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc155)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc523)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc525)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc525)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc159)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc159)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc528)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc529)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc530)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc531)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc169)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc169)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc530)
          cir.scope {
            cir.do {
              cir.scope {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc176)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc177)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc178)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc179)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc534)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc185)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc185)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc536)
                  cir.if %57 {
                    cir.break loc(#loc187)
                  } loc(#loc537)
                } loc(#loc535)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc538)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc190)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc539)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc540)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc195)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc195)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc541)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc197)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc197)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc198)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc542)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc201)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc201)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc202)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc543)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc207)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc545)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc546)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc546)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc212)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc213)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc213)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc547)
                  cir.if %61 {
                    cir.break loc(#loc215)
                  } loc(#loc548)
                } loc(#loc544)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc216)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc217)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc217)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc218)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc218)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc218)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc218)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc218)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc218)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc218)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc219)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc219)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc549)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc220)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc221)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc221)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc550)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc227)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc227)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc552)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc228)
                    cir.yield %59 : !cir.bool loc(#loc228)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc230)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc553)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc228)
                      cir.yield %63 : !cir.bool loc(#loc228)
                    }, false {
                      %63 = cir.const #false loc(#loc228)
                      cir.yield %63 : !cir.bool loc(#loc228)
                    }) : (!cir.bool) -> !cir.bool loc(#loc228)
                    cir.yield %62 : !cir.bool loc(#loc228)
                  }) : (!cir.bool) -> !cir.bool loc(#loc228)
                  cir.if %58 {
                    cir.break loc(#loc232)
                  } loc(#loc554)
                } loc(#loc551)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc233)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc233)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc235)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc235)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc555)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc236)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc237)
                cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc556)
              } loc(#loc533)
              cir.yield loc(#loc173)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc240)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc240)
              cir.condition(%13) loc(#loc240)
            } loc(#loc532)
          } loc(#loc532)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc243)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc244)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc244)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc558)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc246)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc247)
            } loc(#loc559)
          } loc(#loc557)
        } loc(#loc527)
      } loc(#loc526)
    } loc(#loc524)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc561)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc561)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc250)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc250)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc149)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc149)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc255)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc258)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc259)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc564)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc263)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc264)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc265)
              %12 = cir.binop(div, %10, %11) : !s32i loc(#loc567)
              %13 = cir.cmp(lt, %9, %12) : !s32i, !cir.bool loc(#loc568)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc570)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc271)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc272)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc570)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc273)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc274)
              } else {
                %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc150)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc150)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc275)
              } loc(#loc569)
            } loc(#loc566)
          } loc(#loc565)
        } loc(#loc563)
      } loc(#loc562)
    } loc(#loc560)
    cir.return loc(#loc152)
  } loc(#loc521)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc572)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc280)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc573)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc575)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc575)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc284)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc284)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc578)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc579)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc580)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc581)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc294)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc294)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc580)
          cir.scope {
            cir.do {
              cir.scope {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc301)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc302)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc303)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc304)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc584)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc309)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc310)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc310)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc586)
                  cir.if %57 {
                    cir.break loc(#loc312)
                  } loc(#loc587)
                } loc(#loc585)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc588)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc315)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc589)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc590)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc320)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc320)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc591)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc322)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc322)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc323)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc592)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc326)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc326)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc327)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc593)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc332)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc595)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc596)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc596)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc337)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc338)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc338)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc597)
                  cir.if %61 {
                    cir.break loc(#loc340)
                  } loc(#loc598)
                } loc(#loc594)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc341)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc342)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc342)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc343)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc343)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc343)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc343)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc343)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc343)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc343)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc344)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc344)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc599)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc345)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc346)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc346)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc600)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc351)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc352)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc352)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc602)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc353)
                    cir.yield %59 : !cir.bool loc(#loc353)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc354)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc355)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc603)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc353)
                      cir.yield %63 : !cir.bool loc(#loc353)
                    }, false {
                      %63 = cir.const #false loc(#loc353)
                      cir.yield %63 : !cir.bool loc(#loc353)
                    }) : (!cir.bool) -> !cir.bool loc(#loc353)
                    cir.yield %62 : !cir.bool loc(#loc353)
                  }) : (!cir.bool) -> !cir.bool loc(#loc353)
                  cir.if %58 {
                    cir.break loc(#loc357)
                  } loc(#loc604)
                } loc(#loc601)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc358)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc358)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc359)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc360)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc360)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc605)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc361)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc362)
                cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc606)
              } loc(#loc583)
              cir.yield loc(#loc298)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc365)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc365)
              cir.condition(%13) loc(#loc365)
            } loc(#loc582)
          } loc(#loc582)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc368)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc369)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc369)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc608)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc371)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc372)
            } loc(#loc609)
          } loc(#loc607)
        } loc(#loc577)
      } loc(#loc576)
    } loc(#loc574)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc611)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc611)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc375)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc375)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc380)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc381)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc614)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc385)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc386)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc387)
              %12 = cir.binop(div, %10, %11) : !s32i loc(#loc617)
              %13 = cir.cmp(lt, %9, %12) : !s32i, !cir.bool loc(#loc618)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc620)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc394)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc393)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc394)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc620)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc395)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc396)
              } else {
                %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc397)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc397)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc398)
              } loc(#loc619)
            } loc(#loc616)
          } loc(#loc615)
        } loc(#loc613)
      } loc(#loc612)
    } loc(#loc610)
    cir.return loc(#loc277)
  } loc(#loc571)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc622)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc403)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc623)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc625)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc625)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc407)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc407)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc412)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc412)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc413)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc414)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc627)
      } loc(#loc626)
    } loc(#loc624)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc629)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc629)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc418)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc418)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc423)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc424)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc632)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc634)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc428)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc427)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc428)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc634)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc429)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc430)
          } loc(#loc633)
        } loc(#loc631)
      } loc(#loc630)
    } loc(#loc628)
    cir.return loc(#loc400)
  } loc(#loc621)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc636)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc435)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc637)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc639)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc639)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc439)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc439)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc442)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc641)
      } loc(#loc640)
    } loc(#loc638)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc643)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc643)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc446)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc446)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc451)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc452)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc646)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc648)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc456)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc455)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc456)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc648)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc457)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc458)
          } loc(#loc647)
        } loc(#loc645)
      } loc(#loc644)
    } loc(#loc642)
    cir.return loc(#loc432)
  } loc(#loc635)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":77:53)
#loc8 = loc("/usr/include/netinet/in.h":402:1)
#loc9 = loc("/usr/include/netinet/in.h":403:40)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":44:1)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":117:1)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":46:5)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":46:9)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":48:12)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":48:5)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":49:5)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":107:5)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":49:8)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":49:26)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":50:5)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":51:9)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":106:9)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":56:13)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":56:17)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":57:13)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":57:32)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":58:13)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":58:36)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":59:13)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":59:45)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":60:13)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":95:21)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":61:13)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":94:13)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":70:40)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":70:49)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":70:62)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":70:33)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":70:17)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":70:73)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":71:17)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":74:17)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":71:21)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":71:38)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":72:17)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":73:21)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":75:24)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":75:25)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":75:34)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":75:37)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":75:51)
#loc62 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":75:17)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":75:52)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":76:38)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":76:17)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":77:43)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":77:17)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":77:63)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":78:42)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":78:36)
#loc74 = loc("/usr/include/netinet/in.h":250:15)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":78:17)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":78:50)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":79:17)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":82:17)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":79:29)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":79:62)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":79:63)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":79:72)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":79:86)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":79:21)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":79:92)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":80:17)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":81:21)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":85:35)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":85:50)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":85:63)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":85:81)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":85:84)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":85:30)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":85:17)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":85:85)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":86:17)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":89:17)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":86:21)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":86:35)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":86:48)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":86:51)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":86:65)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":87:17)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":88:21)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":91:43)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":91:29)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":91:17)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":93:29)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":93:24)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":93:17)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":93:40)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":95:20)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":96:13)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":99:13)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":96:17)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":96:34)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":97:13)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":98:30)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":98:17)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":108:5)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":116:5)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":108:8)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":108:26)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":109:5)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":110:9)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":115:9)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":110:12)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":110:19)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":111:9)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":113:13)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":113:33)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":113:26)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":114:26)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":114:13)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":343:1)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":349:1)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":345:5)
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":345:14)
#loc139 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":346:5)
#loc140 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":346:14)
#loc141 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":347:5)
#loc142 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":347:14)
#loc143 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":348:5)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":348:14)
#loc145 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc146 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc147 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc148 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":191:19)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":205:27)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":124:1)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":209:1)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":126:5)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":126:9)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":128:12)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":128:5)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":129:5)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":187:5)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":129:8)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":129:26)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":130:5)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":131:9)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":186:9)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":136:13)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":136:17)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":137:13)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":137:32)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":138:13)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":138:36)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":139:13)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":139:45)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":140:13)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":175:21)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":141:13)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":174:13)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":150:40)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":150:49)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":150:62)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":150:33)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":150:17)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":150:73)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":151:17)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":154:17)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":151:21)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":151:38)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":152:17)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":153:21)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":155:24)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":155:25)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":155:34)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":155:37)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":155:51)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":155:17)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":155:52)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":156:38)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":156:17)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":157:53)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":157:43)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":157:17)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":157:63)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":158:42)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":158:36)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":158:17)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":158:50)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":159:17)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":162:17)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":159:29)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":159:62)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":159:63)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":159:72)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":159:86)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":159:21)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":159:92)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":160:17)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":161:21)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":165:35)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":165:50)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":165:63)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":165:81)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":165:84)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":165:30)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":165:17)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":165:85)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":166:17)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":169:17)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":166:21)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":166:35)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":166:48)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":166:51)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":166:65)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":167:17)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":168:21)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":171:43)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":171:29)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":171:17)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":173:29)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":173:24)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":173:17)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":173:40)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":175:20)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":176:13)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":179:13)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":176:17)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":176:34)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":177:13)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":178:30)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":178:17)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":188:5)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":208:5)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":188:8)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":188:27)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":189:5)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":192:5)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":194:5)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":191:9)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":195:9)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":207:9)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":195:12)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":195:19)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":196:9)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":198:13)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":206:13)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":198:17)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":198:25)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":198:33)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":198:34)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":199:13)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":202:13)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":204:13)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":200:17)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":200:37)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":200:30)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":201:30)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":201:17)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":205:17)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":212:1)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":292:1)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":214:5)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":214:9)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":216:12)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":216:5)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":217:5)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":275:5)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":217:8)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":217:26)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":218:5)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":219:9)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":274:9)
#loc289 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":224:13)
#loc290 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":224:17)
#loc291 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":225:13)
#loc292 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":225:32)
#loc293 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":226:13)
#loc294 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":226:36)
#loc295 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":227:13)
#loc296 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":227:45)
#loc297 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":228:13)
#loc298 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":263:21)
#loc299 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":229:13)
#loc300 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":262:13)
#loc301 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":238:40)
#loc302 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":238:49)
#loc303 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":238:62)
#loc304 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":238:33)
#loc305 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":238:17)
#loc306 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":238:73)
#loc307 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":239:17)
#loc308 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":242:17)
#loc309 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":239:21)
#loc310 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":239:38)
#loc311 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":240:17)
#loc312 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":241:21)
#loc313 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":243:24)
#loc314 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":243:25)
#loc315 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":243:34)
#loc316 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":243:37)
#loc317 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":243:51)
#loc318 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":243:17)
#loc319 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":243:52)
#loc320 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":244:38)
#loc321 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":244:17)
#loc322 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":245:53)
#loc323 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":245:43)
#loc324 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":245:17)
#loc325 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":245:63)
#loc326 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":246:42)
#loc327 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":246:36)
#loc328 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":246:17)
#loc329 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":246:50)
#loc330 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":247:17)
#loc331 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":250:17)
#loc332 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":247:29)
#loc333 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":247:62)
#loc334 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":247:63)
#loc335 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":247:72)
#loc336 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":247:86)
#loc337 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":247:21)
#loc338 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":247:92)
#loc339 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":248:17)
#loc340 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":249:21)
#loc341 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":253:35)
#loc342 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":253:50)
#loc343 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":253:63)
#loc344 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":253:81)
#loc345 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":253:84)
#loc346 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":253:30)
#loc347 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":253:17)
#loc348 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":253:85)
#loc349 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":254:17)
#loc350 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":257:17)
#loc351 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":254:21)
#loc352 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":254:35)
#loc353 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":254:48)
#loc354 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":254:51)
#loc355 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":254:65)
#loc356 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":255:17)
#loc357 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":256:21)
#loc358 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":259:43)
#loc359 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":259:29)
#loc360 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":259:17)
#loc361 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":261:29)
#loc362 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":261:24)
#loc363 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":261:17)
#loc364 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":261:40)
#loc365 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":263:20)
#loc366 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":264:13)
#loc367 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":267:13)
#loc368 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":264:17)
#loc369 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":264:34)
#loc370 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":265:13)
#loc371 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":266:30)
#loc372 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":266:17)
#loc373 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":276:5)
#loc374 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":291:5)
#loc375 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":276:8)
#loc376 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":276:26)
#loc377 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":277:5)
#loc378 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":278:9)
#loc379 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":290:9)
#loc380 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":278:12)
#loc381 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":278:19)
#loc382 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":279:9)
#loc383 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":281:13)
#loc384 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":289:13)
#loc385 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":281:17)
#loc386 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":281:25)
#loc387 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":281:33)
#loc388 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":281:34)
#loc389 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":282:13)
#loc390 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":285:13)
#loc391 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":287:13)
#loc392 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":283:17)
#loc393 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":283:37)
#loc394 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":283:30)
#loc395 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":284:30)
#loc396 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":284:17)
#loc397 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":288:27)
#loc398 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":288:17)
#loc399 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":295:1)
#loc400 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":319:1)
#loc401 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":297:5)
#loc402 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":297:9)
#loc403 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":299:12)
#loc404 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":299:5)
#loc405 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":300:5)
#loc406 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":309:5)
#loc407 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":300:8)
#loc408 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":300:27)
#loc409 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":301:5)
#loc410 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":304:5)
#loc411 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":306:5)
#loc412 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":303:19)
#loc413 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":303:9)
#loc414 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":308:16)
#loc415 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":308:9)
#loc416 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":310:5)
#loc417 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":318:5)
#loc418 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":310:8)
#loc419 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":310:26)
#loc420 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":311:5)
#loc421 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":312:9)
#loc422 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":317:9)
#loc423 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":312:12)
#loc424 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":312:19)
#loc425 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":313:9)
#loc426 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":315:13)
#loc427 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":315:33)
#loc428 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":315:26)
#loc429 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":316:26)
#loc430 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":316:13)
#loc431 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":322:1)
#loc432 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":341:1)
#loc433 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":324:5)
#loc434 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":324:9)
#loc435 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":326:12)
#loc436 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":326:5)
#loc437 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":327:5)
#loc438 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":331:5)
#loc439 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":327:8)
#loc440 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":327:26)
#loc441 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":328:5)
#loc442 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":330:16)
#loc443 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":330:9)
#loc444 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":332:5)
#loc445 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":340:5)
#loc446 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":332:8)
#loc447 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":332:26)
#loc448 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":333:5)
#loc449 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":334:9)
#loc450 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":339:9)
#loc451 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":334:12)
#loc452 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":334:19)
#loc453 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":335:9)
#loc454 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":337:13)
#loc455 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":337:33)
#loc456 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":337:26)
#loc457 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":338:26)
#loc458 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_11.c":338:13)
#loc459 = loc(fused[#loc1, #loc2])
#loc460 = loc(fused[#loc3, #loc4])
#loc461 = loc(fused[#loc5, #loc6])
#loc462 = loc(fused[#loc8, #loc9])
#loc463 = loc(fused[#loc10, #loc11])
#loc464 = loc(fused[#loc12, #loc13])
#loc465 = loc(fused[#loc14, #loc15])
#loc466 = loc(fused[#loc16, #loc17])
#loc467 = loc(fused[#loc18, #loc19])
#loc468 = loc(fused[#loc20, #loc21])
#loc469 = loc(fused[#loc22, #loc23])
#loc470 = loc(fused[#loc25, #loc24])
#loc471 = loc(fused[#loc26, #loc27])
#loc472 = loc(fused[#loc28, #loc29])
#loc473 = loc(fused[#loc30, #loc27])
#loc474 = loc(fused[#loc31, #loc32])
#loc475 = loc(fused[#loc33, #loc34])
#loc476 = loc(fused[#loc35, #loc36])
#loc477 = loc(fused[#loc37, #loc38])
#loc478 = loc(fused[#loc39, #loc40])
#loc479 = loc(fused[#loc41, #loc42])
#loc480 = loc(fused[#loc43, #loc44])
#loc481 = loc(fused[#loc49, #loc50])
#loc482 = loc(fused[#loc51, #loc52])
#loc483 = loc(fused[#loc53, #loc54])
#loc484 = loc(fused[#loc55, #loc52])
#loc485 = loc(fused[#loc57, #loc58])
#loc486 = loc(fused[#loc60, #loc61])
#loc487 = loc(fused[#loc62, #loc63])
#loc488 = loc(fused[#loc66, #loc64])
#loc489 = loc(fused[#loc70, #loc71])
#loc490 = loc(fused[#loc75, #loc76])
#loc491 = loc(fused[#loc77, #loc78])
#loc492 = loc(fused[#loc80, #loc81])
#loc493 = loc(fused[#loc82, #loc83])
#loc494 = loc(fused[#loc84, #loc85])
#loc495 = loc(fused[#loc86, #loc78])
#loc496 = loc(fused[#loc90, #loc91])
#loc497 = loc(fused[#loc94, #loc95])
#loc498 = loc(fused[#loc96, #loc97])
#loc499 = loc(fused[#loc98, #loc99])
#loc500 = loc(fused[#loc101, #loc102])
#loc501 = loc(fused[#loc103, #loc97])
#loc502 = loc(fused[#loc107, #loc105])
#loc503 = loc(fused[#loc110, #loc111])
#loc504 = loc(fused[#loc113, #loc114])
#loc505 = loc(fused[#loc115, #loc116])
#loc506 = loc(fused[#loc117, #loc114])
#loc507 = loc(fused[#loc120, #loc121])
#loc508 = loc(fused[#loc122, #loc123])
#loc509 = loc(fused[#loc124, #loc121])
#loc510 = loc(fused[#loc125, #loc126])
#loc511 = loc(fused[#loc127, #loc128])
#loc512 = loc(fused[#loc129, #loc126])
#loc513 = loc(fused[#loc130, #loc131])
#loc514 = loc(fused[#loc135, #loc136])
#loc515 = loc(fused[#loc137, #loc138])
#loc516 = loc(fused[#loc139, #loc140])
#loc517 = loc(fused[#loc141, #loc142])
#loc518 = loc(fused[#loc143, #loc144])
#loc519 = loc(fused[#loc145, #loc146])
#loc520 = loc(fused[#loc147, #loc148])
#loc521 = loc(fused[#loc151, #loc152])
#loc522 = loc(fused[#loc153, #loc154])
#loc523 = loc(fused[#loc156, #loc155])
#loc524 = loc(fused[#loc157, #loc158])
#loc525 = loc(fused[#loc159, #loc160])
#loc526 = loc(fused[#loc161, #loc158])
#loc527 = loc(fused[#loc162, #loc163])
#loc528 = loc(fused[#loc164, #loc165])
#loc529 = loc(fused[#loc166, #loc167])
#loc530 = loc(fused[#loc168, #loc169])
#loc531 = loc(fused[#loc170, #loc171])
#loc532 = loc(fused[#loc172, #loc173])
#loc533 = loc(fused[#loc174, #loc175])
#loc534 = loc(fused[#loc180, #loc181])
#loc535 = loc(fused[#loc182, #loc183])
#loc536 = loc(fused[#loc184, #loc185])
#loc537 = loc(fused[#loc186, #loc183])
#loc538 = loc(fused[#loc188, #loc189])
#loc539 = loc(fused[#loc191, #loc192])
#loc540 = loc(fused[#loc193, #loc194])
#loc541 = loc(fused[#loc196, #loc195])
#loc542 = loc(fused[#loc199, #loc200])
#loc543 = loc(fused[#loc203, #loc204])
#loc544 = loc(fused[#loc205, #loc206])
#loc545 = loc(fused[#loc208, #loc209])
#loc546 = loc(fused[#loc210, #loc211])
#loc547 = loc(fused[#loc212, #loc213])
#loc548 = loc(fused[#loc214, #loc206])
#loc549 = loc(fused[#loc218, #loc219])
#loc550 = loc(fused[#loc222, #loc223])
#loc551 = loc(fused[#loc224, #loc225])
#loc552 = loc(fused[#loc226, #loc227])
#loc553 = loc(fused[#loc229, #loc230])
#loc554 = loc(fused[#loc231, #loc225])
#loc555 = loc(fused[#loc235, #loc233])
#loc556 = loc(fused[#loc238, #loc239])
#loc557 = loc(fused[#loc241, #loc242])
#loc558 = loc(fused[#loc243, #loc244])
#loc559 = loc(fused[#loc245, #loc242])
#loc560 = loc(fused[#loc248, #loc249])
#loc561 = loc(fused[#loc250, #loc251])
#loc562 = loc(fused[#loc252, #loc253, #loc254, #loc249])
#loc563 = loc(fused[#loc256, #loc257])
#loc564 = loc(fused[#loc258, #loc259])
#loc565 = loc(fused[#loc260, #loc257])
#loc566 = loc(fused[#loc261, #loc262])
#loc567 = loc(fused[#loc264, #loc265])
#loc568 = loc(fused[#loc263, #loc266])
#loc569 = loc(fused[#loc267, #loc268, #loc269, #loc262])
#loc570 = loc(fused[#loc270, #loc271])
#loc571 = loc(fused[#loc276, #loc277])
#loc572 = loc(fused[#loc278, #loc279])
#loc573 = loc(fused[#loc281, #loc280])
#loc574 = loc(fused[#loc282, #loc283])
#loc575 = loc(fused[#loc284, #loc285])
#loc576 = loc(fused[#loc286, #loc283])
#loc577 = loc(fused[#loc287, #loc288])
#loc578 = loc(fused[#loc289, #loc290])
#loc579 = loc(fused[#loc291, #loc292])
#loc580 = loc(fused[#loc293, #loc294])
#loc581 = loc(fused[#loc295, #loc296])
#loc582 = loc(fused[#loc297, #loc298])
#loc583 = loc(fused[#loc299, #loc300])
#loc584 = loc(fused[#loc305, #loc306])
#loc585 = loc(fused[#loc307, #loc308])
#loc586 = loc(fused[#loc309, #loc310])
#loc587 = loc(fused[#loc311, #loc308])
#loc588 = loc(fused[#loc313, #loc314])
#loc589 = loc(fused[#loc316, #loc317])
#loc590 = loc(fused[#loc318, #loc319])
#loc591 = loc(fused[#loc321, #loc320])
#loc592 = loc(fused[#loc324, #loc325])
#loc593 = loc(fused[#loc328, #loc329])
#loc594 = loc(fused[#loc330, #loc331])
#loc595 = loc(fused[#loc333, #loc334])
#loc596 = loc(fused[#loc335, #loc336])
#loc597 = loc(fused[#loc337, #loc338])
#loc598 = loc(fused[#loc339, #loc331])
#loc599 = loc(fused[#loc343, #loc344])
#loc600 = loc(fused[#loc347, #loc348])
#loc601 = loc(fused[#loc349, #loc350])
#loc602 = loc(fused[#loc351, #loc352])
#loc603 = loc(fused[#loc354, #loc355])
#loc604 = loc(fused[#loc356, #loc350])
#loc605 = loc(fused[#loc360, #loc358])
#loc606 = loc(fused[#loc363, #loc364])
#loc607 = loc(fused[#loc366, #loc367])
#loc608 = loc(fused[#loc368, #loc369])
#loc609 = loc(fused[#loc370, #loc367])
#loc610 = loc(fused[#loc373, #loc374])
#loc611 = loc(fused[#loc375, #loc376])
#loc612 = loc(fused[#loc377, #loc374])
#loc613 = loc(fused[#loc378, #loc379])
#loc614 = loc(fused[#loc380, #loc381])
#loc615 = loc(fused[#loc382, #loc379])
#loc616 = loc(fused[#loc383, #loc384])
#loc617 = loc(fused[#loc386, #loc387])
#loc618 = loc(fused[#loc385, #loc388])
#loc619 = loc(fused[#loc389, #loc390, #loc391, #loc384])
#loc620 = loc(fused[#loc392, #loc393])
#loc621 = loc(fused[#loc399, #loc400])
#loc622 = loc(fused[#loc401, #loc402])
#loc623 = loc(fused[#loc404, #loc403])
#loc624 = loc(fused[#loc405, #loc406])
#loc625 = loc(fused[#loc407, #loc408])
#loc626 = loc(fused[#loc409, #loc410, #loc411, #loc406])
#loc627 = loc(fused[#loc415, #loc414])
#loc628 = loc(fused[#loc416, #loc417])
#loc629 = loc(fused[#loc418, #loc419])
#loc630 = loc(fused[#loc420, #loc417])
#loc631 = loc(fused[#loc421, #loc422])
#loc632 = loc(fused[#loc423, #loc424])
#loc633 = loc(fused[#loc425, #loc422])
#loc634 = loc(fused[#loc426, #loc427])
#loc635 = loc(fused[#loc431, #loc432])
#loc636 = loc(fused[#loc433, #loc434])
#loc637 = loc(fused[#loc436, #loc435])
#loc638 = loc(fused[#loc437, #loc438])
#loc639 = loc(fused[#loc439, #loc440])
#loc640 = loc(fused[#loc441, #loc438])
#loc641 = loc(fused[#loc443, #loc442])
#loc642 = loc(fused[#loc444, #loc445])
#loc643 = loc(fused[#loc446, #loc447])
#loc644 = loc(fused[#loc448, #loc445])
#loc645 = loc(fused[#loc449, #loc450])
#loc646 = loc(fused[#loc451, #loc452])
#loc647 = loc(fused[#loc453, #loc450])
#loc648 = loc(fused[#loc454, #loc455])
