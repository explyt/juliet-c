!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc453)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc454)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc455)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc456)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc457)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc458)
  cir.func private @close(!s32i) -> !s32i loc(#loc459)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc460)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc18)
  cir.func private @printIntLine(!s32i) loc(#loc461)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc463)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc464)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc30)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc467)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc468)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc469)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc470)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc39)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc39)
            cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc469)
            cir.scope {
              cir.do {
                cir.scope {
                  %10 = cir.const #cir.int<2> : !s32i loc(#loc46)
                  %11 = cir.const #cir.int<1> : !s32i loc(#loc47)
                  %12 = cir.const #cir.int<6> : !s32i loc(#loc48)
                  %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc49)
                  cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc473)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc54)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc55)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc55)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc475)
                    cir.if %55 {
                      cir.break loc(#loc57)
                    } loc(#loc476)
                  } loc(#loc474)
                  %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc477)
                  %15 = cir.const #cir.int<0> : !s32i loc(#loc60)
                  %16 = cir.const #cir.int<16> : !u64i loc(#loc478)
                  cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc479)
                  %17 = cir.const #cir.int<2> : !s32i loc(#loc65)
                  %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc65)
                  %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                  cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc480)
                  %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc68)
                  %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc481)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc73)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc73)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc74)
                  %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc482)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                    %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc484)
                    %54 = cir.const #cir.int<16> : !u64i loc(#loc485)
                    %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc485)
                    %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc85)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc86)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc86)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc486)
                    cir.if %59 {
                      cir.break loc(#loc88)
                    } loc(#loc487)
                  } loc(#loc483)
                  %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                  %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc90)
                  %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc90)
                  %32 = cir.const #cir.int<3> : !s32i loc(#loc91)
                  %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc91)
                  %34 = cir.const #cir.int<4> : !u64i loc(#loc91)
                  %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc91)
                  %36 = cir.const #cir.int<2> : !s32i loc(#loc91)
                  %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc91)
                  %38 = cir.binop(add, %35, %37) : !u64i loc(#loc91)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc92)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc92)
                  %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc488)
                  %42 = cir.const #cir.int<0> : !s32i loc(#loc93)
                  %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc94)
                  %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc94)
                  cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc489)
                  cir.scope {
                    %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc100)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc100)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc491)
                    %56 = cir.ternary(%55, true {
                      %57 = cir.const #true loc(#loc101)
                      cir.yield %57 : !cir.bool loc(#loc101)
                    }, false {
                      %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                      %58 = cir.const #cir.int<0> : !s32i loc(#loc103)
                      %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc492)
                      %60 = cir.ternary(%59, true {
                        %61 = cir.const #true loc(#loc101)
                        cir.yield %61 : !cir.bool loc(#loc101)
                      }, false {
                        %61 = cir.const #false loc(#loc101)
                        cir.yield %61 : !cir.bool loc(#loc101)
                      }) : (!cir.bool) -> !cir.bool loc(#loc101)
                      cir.yield %60 : !cir.bool loc(#loc101)
                    }) : (!cir.bool) -> !cir.bool loc(#loc101)
                    cir.if %56 {
                      cir.break loc(#loc105)
                    } loc(#loc493)
                  } loc(#loc490)
                  %45 = cir.const #cir.int<0> : !s32i loc(#loc106)
                  %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc106)
                  %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                  %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
                  %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc108)
                  cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc494)
                  %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc109)
                  %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc110)
                  cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc495)
                } loc(#loc472)
                cir.yield loc(#loc43)
              } while {
                %10 = cir.const #cir.int<0> : !s32i loc(#loc113)
                %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc113)
                cir.condition(%11) loc(#loc113)
              } loc(#loc471)
            } loc(#loc471)
            cir.scope {
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc117)
              %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc117)
              %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc497)
              cir.if %13 {
                %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc120)
              } loc(#loc498)
            } loc(#loc496)
          } loc(#loc466)
          cir.break loc(#loc121)
        } loc(#loc31)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc18)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc18)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc123)
          cir.break loc(#loc124)
        } loc(#loc122)
        cir.yield loc(#loc28)
      } loc(#loc28)
    } loc(#loc465)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc127)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc129)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc500)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc131)
          cir.break loc(#loc132)
        } loc(#loc128)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc135)
          cir.break loc(#loc136)
        } loc(#loc133)
        cir.yield loc(#loc125)
      } loc(#loc125)
    } loc(#loc499)
    cir.return loc(#loc22)
  } loc(#loc462)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc502)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc139)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc503)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc141)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc504)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc143)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc505)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc145)
    cir.return loc(#loc138)
  } loc(#loc501)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc147)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc507)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc153)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc508)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc157)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc511)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc512)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc513)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc514)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc166)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc166)
            cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc513)
            cir.scope {
              cir.do {
                cir.scope {
                  %10 = cir.const #cir.int<2> : !s32i loc(#loc173)
                  %11 = cir.const #cir.int<1> : !s32i loc(#loc174)
                  %12 = cir.const #cir.int<6> : !s32i loc(#loc175)
                  %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc176)
                  cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc517)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc181)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc182)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc182)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc519)
                    cir.if %55 {
                      cir.break loc(#loc184)
                    } loc(#loc520)
                  } loc(#loc518)
                  %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc521)
                  %15 = cir.const #cir.int<0> : !s32i loc(#loc187)
                  %16 = cir.const #cir.int<16> : !u64i loc(#loc522)
                  cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc523)
                  %17 = cir.const #cir.int<2> : !s32i loc(#loc192)
                  %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc192)
                  %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                  cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc524)
                  %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc194)
                  %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc194)
                  %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc195)
                  %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc525)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc198)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc198)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc199)
                  %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc526)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc204)
                    %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc528)
                    %54 = cir.const #cir.int<16> : !u64i loc(#loc529)
                    %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc529)
                    %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc209)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc210)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc210)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc530)
                    cir.if %59 {
                      cir.break loc(#loc212)
                    } loc(#loc531)
                  } loc(#loc527)
                  %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc213)
                  %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc214)
                  %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc214)
                  %32 = cir.const #cir.int<3> : !s32i loc(#loc215)
                  %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc215)
                  %34 = cir.const #cir.int<4> : !u64i loc(#loc215)
                  %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc215)
                  %36 = cir.const #cir.int<2> : !s32i loc(#loc215)
                  %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc215)
                  %38 = cir.binop(add, %35, %37) : !u64i loc(#loc215)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc216)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc216)
                  %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc532)
                  %42 = cir.const #cir.int<0> : !s32i loc(#loc217)
                  %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc218)
                  %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc218)
                  cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc533)
                  cir.scope {
                    %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc224)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc224)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc535)
                    %56 = cir.ternary(%55, true {
                      %57 = cir.const #true loc(#loc225)
                      cir.yield %57 : !cir.bool loc(#loc225)
                    }, false {
                      %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                      %58 = cir.const #cir.int<0> : !s32i loc(#loc227)
                      %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc536)
                      %60 = cir.ternary(%59, true {
                        %61 = cir.const #true loc(#loc225)
                        cir.yield %61 : !cir.bool loc(#loc225)
                      }, false {
                        %61 = cir.const #false loc(#loc225)
                        cir.yield %61 : !cir.bool loc(#loc225)
                      }) : (!cir.bool) -> !cir.bool loc(#loc225)
                      cir.yield %60 : !cir.bool loc(#loc225)
                    }) : (!cir.bool) -> !cir.bool loc(#loc225)
                    cir.if %56 {
                      cir.break loc(#loc229)
                    } loc(#loc537)
                  } loc(#loc534)
                  %45 = cir.const #cir.int<0> : !s32i loc(#loc230)
                  %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc230)
                  %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                  %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc232)
                  %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc232)
                  cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc538)
                  %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc233)
                  %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc234)
                  cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc539)
                } loc(#loc516)
                cir.yield loc(#loc170)
              } while {
                %10 = cir.const #cir.int<0> : !s32i loc(#loc237)
                %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc237)
                cir.condition(%11) loc(#loc237)
              } loc(#loc515)
            } loc(#loc515)
            cir.scope {
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc240)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc241)
              %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc241)
              %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc541)
              cir.if %13 {
                %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc243)
                %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc244)
              } loc(#loc542)
            } loc(#loc540)
          } loc(#loc510)
          cir.break loc(#loc245)
        } loc(#loc158)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc247)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc247)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc248)
          cir.break loc(#loc249)
        } loc(#loc246)
        cir.yield loc(#loc155)
      } loc(#loc155)
    } loc(#loc509)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc252)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc254)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc254)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc255)
          cir.break loc(#loc256)
        } loc(#loc253)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc260)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc261)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc545)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc265)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc266)
              %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc547)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc267)
            } else {
              %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc147)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc147)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc268)
            } loc(#loc546)
          } loc(#loc544)
          cir.break loc(#loc269)
        } loc(#loc257)
        cir.yield loc(#loc250)
      } loc(#loc250)
    } loc(#loc543)
    cir.return loc(#loc149)
  } loc(#loc506)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc549)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc274)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc275)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc550)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc279)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc553)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc554)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc555)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc556)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc288)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc288)
            cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc555)
            cir.scope {
              cir.do {
                cir.scope {
                  %10 = cir.const #cir.int<2> : !s32i loc(#loc295)
                  %11 = cir.const #cir.int<1> : !s32i loc(#loc296)
                  %12 = cir.const #cir.int<6> : !s32i loc(#loc297)
                  %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc298)
                  cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc559)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc303)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc304)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc304)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc561)
                    cir.if %55 {
                      cir.break loc(#loc306)
                    } loc(#loc562)
                  } loc(#loc560)
                  %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc563)
                  %15 = cir.const #cir.int<0> : !s32i loc(#loc309)
                  %16 = cir.const #cir.int<16> : !u64i loc(#loc564)
                  cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc565)
                  %17 = cir.const #cir.int<2> : !s32i loc(#loc314)
                  %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc314)
                  %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                  cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc566)
                  %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc316)
                  %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc316)
                  %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc317)
                  %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc567)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc320)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc320)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc321)
                  %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc568)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc326)
                    %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc570)
                    %54 = cir.const #cir.int<16> : !u64i loc(#loc571)
                    %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc571)
                    %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc331)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc332)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc332)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc572)
                    cir.if %59 {
                      cir.break loc(#loc334)
                    } loc(#loc573)
                  } loc(#loc569)
                  %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc335)
                  %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc336)
                  %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc336)
                  %32 = cir.const #cir.int<3> : !s32i loc(#loc337)
                  %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc337)
                  %34 = cir.const #cir.int<4> : !u64i loc(#loc337)
                  %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc337)
                  %36 = cir.const #cir.int<2> : !s32i loc(#loc337)
                  %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc337)
                  %38 = cir.binop(add, %35, %37) : !u64i loc(#loc337)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc338)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc338)
                  %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc574)
                  %42 = cir.const #cir.int<0> : !s32i loc(#loc339)
                  %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc340)
                  %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc340)
                  cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc575)
                  cir.scope {
                    %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc345)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc346)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc346)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc577)
                    %56 = cir.ternary(%55, true {
                      %57 = cir.const #true loc(#loc347)
                      cir.yield %57 : !cir.bool loc(#loc347)
                    }, false {
                      %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc348)
                      %58 = cir.const #cir.int<0> : !s32i loc(#loc349)
                      %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc578)
                      %60 = cir.ternary(%59, true {
                        %61 = cir.const #true loc(#loc347)
                        cir.yield %61 : !cir.bool loc(#loc347)
                      }, false {
                        %61 = cir.const #false loc(#loc347)
                        cir.yield %61 : !cir.bool loc(#loc347)
                      }) : (!cir.bool) -> !cir.bool loc(#loc347)
                      cir.yield %60 : !cir.bool loc(#loc347)
                    }) : (!cir.bool) -> !cir.bool loc(#loc347)
                    cir.if %56 {
                      cir.break loc(#loc351)
                    } loc(#loc579)
                  } loc(#loc576)
                  %45 = cir.const #cir.int<0> : !s32i loc(#loc352)
                  %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc352)
                  %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc353)
                  %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc354)
                  %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc354)
                  cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc580)
                  %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc355)
                  %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc356)
                  cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc581)
                } loc(#loc558)
                cir.yield loc(#loc292)
              } while {
                %10 = cir.const #cir.int<0> : !s32i loc(#loc359)
                %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc359)
                cir.condition(%11) loc(#loc359)
              } loc(#loc557)
            } loc(#loc557)
            cir.scope {
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc362)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc363)
              %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc363)
              %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc583)
              cir.if %13 {
                %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc365)
                %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc366)
              } loc(#loc584)
            } loc(#loc582)
          } loc(#loc552)
          cir.break loc(#loc367)
        } loc(#loc280)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc369)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc369)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc370)
          cir.break loc(#loc371)
        } loc(#loc368)
        cir.yield loc(#loc277)
      } loc(#loc277)
    } loc(#loc551)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc374)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc378)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc379)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc587)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc383)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc384)
              %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc589)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc385)
            } else {
              %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc386)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc386)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc387)
            } loc(#loc588)
          } loc(#loc586)
          cir.break loc(#loc388)
        } loc(#loc375)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc390)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc390)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc391)
          cir.break loc(#loc392)
        } loc(#loc389)
        cir.yield loc(#loc372)
      } loc(#loc372)
    } loc(#loc585)
    cir.return loc(#loc271)
  } loc(#loc548)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc591)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc397)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc398)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc592)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc402)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc404)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc404)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc405)
          cir.break loc(#loc406)
        } loc(#loc403)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc408)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc594)
          cir.break loc(#loc410)
        } loc(#loc407)
        cir.yield loc(#loc400)
      } loc(#loc400)
    } loc(#loc593)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc413)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc415)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc416)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc596)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc417)
          cir.break loc(#loc418)
        } loc(#loc414)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc420)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc420)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc421)
          cir.break loc(#loc422)
        } loc(#loc419)
        cir.yield loc(#loc411)
      } loc(#loc411)
    } loc(#loc595)
    cir.return loc(#loc394)
  } loc(#loc590)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc598)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc427)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc428)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc599)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc432)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc434)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc601)
          cir.break loc(#loc436)
        } loc(#loc433)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc438)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc438)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc439)
          cir.break loc(#loc440)
        } loc(#loc437)
        cir.yield loc(#loc430)
      } loc(#loc430)
    } loc(#loc600)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc443)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc445)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc446)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc603)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc447)
          cir.break loc(#loc448)
        } loc(#loc444)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc450)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc450)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc451)
          cir.break loc(#loc452)
        } loc(#loc449)
        cir.yield loc(#loc441)
      } loc(#loc441)
    } loc(#loc602)
    cir.return loc(#loc424)
  } loc(#loc597)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":78:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":111:19)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":44:1)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":125:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":46:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":46:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":48:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":48:12)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":48:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":49:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":113:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":49:12)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":51:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":52:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":107:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":57:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":57:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":58:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":58:28)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":59:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":59:32)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":60:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":60:41)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":61:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":96:17)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":62:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":95:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":71:36)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":71:45)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":71:58)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":71:29)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":71:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":71:69)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":72:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":75:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":72:17)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":72:34)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":73:13)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":74:17)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":76:20)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":76:21)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":76:30)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":76:33)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":76:47)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":76:13)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":76:48)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":77:34)
#loc66 = loc("/usr/include/netinet/in.h":249:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":77:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":78:39)
#loc69 = loc("/usr/include/netinet/in.h":251:20)
#loc70 = loc("/usr/include/netinet/in.h":33:15)
#loc71 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":78:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":78:59)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":79:38)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":79:32)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":79:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":79:46)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":80:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":83:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":80:25)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":80:58)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":80:59)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":80:68)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":80:82)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":80:17)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":80:88)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":81:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":82:17)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":86:31)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":86:46)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":86:59)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":86:77)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":86:80)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":86:26)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":86:13)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":86:81)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":87:13)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":90:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":87:17)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":87:31)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":87:44)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":87:47)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":87:61)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":88:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":89:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":92:39)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":92:25)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":92:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":94:25)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":94:20)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":94:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":94:36)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":96:16)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":97:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":100:9)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":97:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":97:30)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":98:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":99:26)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":99:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":108:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":109:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":111:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":112:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":114:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":124:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":114:12)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":116:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":118:22)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":118:28)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":118:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":119:9)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":120:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":122:19)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":122:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":123:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":373:1)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":379:1)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":375:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":375:14)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":376:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":376:14)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":377:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":377:14)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":378:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":378:14)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":216:23)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":132:1)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":220:1)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":134:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":134:9)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":136:13)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":136:12)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":136:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":137:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":201:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":137:12)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":139:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":140:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":195:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":145:9)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":145:13)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":146:9)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":146:28)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":147:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":147:32)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":148:9)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":148:41)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":149:9)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":184:17)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":150:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":183:9)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":159:36)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":159:45)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":159:58)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":159:29)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":159:13)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":159:69)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":160:13)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":163:13)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":160:17)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":160:34)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":161:13)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":162:17)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":164:20)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":164:21)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":164:30)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":164:33)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":164:47)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":164:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":164:48)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":165:34)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":165:13)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":166:49)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":166:39)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":166:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":166:59)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":167:38)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":167:32)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":167:13)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":167:46)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":168:13)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":171:13)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":168:25)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":168:58)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":168:59)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":168:68)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":168:82)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":168:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":168:88)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":169:13)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":170:17)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":174:31)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":174:46)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":174:59)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":174:77)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":174:80)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":174:26)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":174:13)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":174:81)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":175:13)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":178:13)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":175:17)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":175:31)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":175:44)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":175:47)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":175:61)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":176:13)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":177:17)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":180:39)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":180:25)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":180:13)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":182:25)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":182:20)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":182:13)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":182:36)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":184:16)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":185:9)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":188:9)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":185:13)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":185:30)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":186:9)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":187:26)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":187:13)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":196:5)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":197:5)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":199:19)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":199:9)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":200:9)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":202:5)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":219:5)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":202:12)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":204:5)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":206:19)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":206:9)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":207:9)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":208:5)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":210:9)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":217:9)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":210:13)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":210:21)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":211:9)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":213:9)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":215:9)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":212:26)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":212:32)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":212:13)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":216:13)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":218:9)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":223:1)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":311:1)
#loc272 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":225:5)
#loc273 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":225:9)
#loc274 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":227:13)
#loc275 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":227:12)
#loc276 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":227:5)
#loc277 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":228:5)
#loc278 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":292:5)
#loc279 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":228:12)
#loc280 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":230:5)
#loc281 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":231:5)
#loc282 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":286:5)
#loc283 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":236:9)
#loc284 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":236:13)
#loc285 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":237:9)
#loc286 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":237:28)
#loc287 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":238:9)
#loc288 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":238:32)
#loc289 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":239:9)
#loc290 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":239:41)
#loc291 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":240:9)
#loc292 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":275:17)
#loc293 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":241:9)
#loc294 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":274:9)
#loc295 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":250:36)
#loc296 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":250:45)
#loc297 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":250:58)
#loc298 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":250:29)
#loc299 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":250:13)
#loc300 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":250:69)
#loc301 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":251:13)
#loc302 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":254:13)
#loc303 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":251:17)
#loc304 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":251:34)
#loc305 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":252:13)
#loc306 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":253:17)
#loc307 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":255:20)
#loc308 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":255:21)
#loc309 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":255:30)
#loc310 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":255:33)
#loc311 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":255:47)
#loc312 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":255:13)
#loc313 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":255:48)
#loc314 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":256:34)
#loc315 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":256:13)
#loc316 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":257:49)
#loc317 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":257:39)
#loc318 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":257:13)
#loc319 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":257:59)
#loc320 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":258:38)
#loc321 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":258:32)
#loc322 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":258:13)
#loc323 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":258:46)
#loc324 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":259:13)
#loc325 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":262:13)
#loc326 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":259:25)
#loc327 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":259:58)
#loc328 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":259:59)
#loc329 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":259:68)
#loc330 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":259:82)
#loc331 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":259:17)
#loc332 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":259:88)
#loc333 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":260:13)
#loc334 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":261:17)
#loc335 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":265:31)
#loc336 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":265:46)
#loc337 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":265:59)
#loc338 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":265:77)
#loc339 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":265:80)
#loc340 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":265:26)
#loc341 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":265:13)
#loc342 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":265:81)
#loc343 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":266:13)
#loc344 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":269:13)
#loc345 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":266:17)
#loc346 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":266:31)
#loc347 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":266:44)
#loc348 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":266:47)
#loc349 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":266:61)
#loc350 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":267:13)
#loc351 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":268:17)
#loc352 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":271:39)
#loc353 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":271:25)
#loc354 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":271:13)
#loc355 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":273:25)
#loc356 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":273:20)
#loc357 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":273:13)
#loc358 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":273:36)
#loc359 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":275:16)
#loc360 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":276:9)
#loc361 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":279:9)
#loc362 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":276:13)
#loc363 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":276:30)
#loc364 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":277:9)
#loc365 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":278:26)
#loc366 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":278:13)
#loc367 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":287:5)
#loc368 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":288:5)
#loc369 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":290:19)
#loc370 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":290:9)
#loc371 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":291:9)
#loc372 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":293:5)
#loc373 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":310:5)
#loc374 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":293:12)
#loc375 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":295:5)
#loc376 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":297:9)
#loc377 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":304:9)
#loc378 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":297:13)
#loc379 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":297:21)
#loc380 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":298:9)
#loc381 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":300:9)
#loc382 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":302:9)
#loc383 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":299:26)
#loc384 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":299:32)
#loc385 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":299:13)
#loc386 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":303:23)
#loc387 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":303:13)
#loc388 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":305:9)
#loc389 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":306:5)
#loc390 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":308:19)
#loc391 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":308:9)
#loc392 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":309:9)
#loc393 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":314:1)
#loc394 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":341:1)
#loc395 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":316:5)
#loc396 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":316:9)
#loc397 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":318:13)
#loc398 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":318:12)
#loc399 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":318:5)
#loc400 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":319:5)
#loc401 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":329:5)
#loc402 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":319:12)
#loc403 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":321:5)
#loc404 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":323:19)
#loc405 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":323:9)
#loc406 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":324:9)
#loc407 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":325:5)
#loc408 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":327:16)
#loc409 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":327:9)
#loc410 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":328:9)
#loc411 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":330:5)
#loc412 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":340:5)
#loc413 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":330:12)
#loc414 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":332:5)
#loc415 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":334:22)
#loc416 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":334:28)
#loc417 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":334:9)
#loc418 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":335:9)
#loc419 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":336:5)
#loc420 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":338:19)
#loc421 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":338:9)
#loc422 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":339:9)
#loc423 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":344:1)
#loc424 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":371:1)
#loc425 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":346:5)
#loc426 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":346:9)
#loc427 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":348:13)
#loc428 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":348:12)
#loc429 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":348:5)
#loc430 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":349:5)
#loc431 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":359:5)
#loc432 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":349:12)
#loc433 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":351:5)
#loc434 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":353:16)
#loc435 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":353:9)
#loc436 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":354:9)
#loc437 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":355:5)
#loc438 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":357:19)
#loc439 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":357:9)
#loc440 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":358:9)
#loc441 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":360:5)
#loc442 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":370:5)
#loc443 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":360:12)
#loc444 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":362:5)
#loc445 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":364:22)
#loc446 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":364:28)
#loc447 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":364:9)
#loc448 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":365:9)
#loc449 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":366:5)
#loc450 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":368:19)
#loc451 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":368:9)
#loc452 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_15.c":369:9)
#loc453 = loc(fused[#loc1, #loc2])
#loc454 = loc(fused[#loc3, #loc4])
#loc455 = loc(fused[#loc6, #loc7])
#loc456 = loc(fused[#loc8, #loc9])
#loc457 = loc(fused[#loc10, #loc11])
#loc458 = loc(fused[#loc12, #loc13])
#loc459 = loc(fused[#loc14, #loc15])
#loc460 = loc(fused[#loc16, #loc17])
#loc461 = loc(fused[#loc19, #loc20])
#loc462 = loc(fused[#loc21, #loc22])
#loc463 = loc(fused[#loc23, #loc24])
#loc464 = loc(fused[#loc27, #loc25])
#loc465 = loc(fused[#loc28, #loc29])
#loc466 = loc(fused[#loc32, #loc33])
#loc467 = loc(fused[#loc34, #loc35])
#loc468 = loc(fused[#loc36, #loc37])
#loc469 = loc(fused[#loc38, #loc39])
#loc470 = loc(fused[#loc40, #loc41])
#loc471 = loc(fused[#loc42, #loc43])
#loc472 = loc(fused[#loc44, #loc45])
#loc473 = loc(fused[#loc50, #loc51])
#loc474 = loc(fused[#loc52, #loc53])
#loc475 = loc(fused[#loc54, #loc55])
#loc476 = loc(fused[#loc56, #loc53])
#loc477 = loc(fused[#loc58, #loc59])
#loc478 = loc(fused[#loc61, #loc62])
#loc479 = loc(fused[#loc63, #loc64])
#loc480 = loc(fused[#loc67, #loc65])
#loc481 = loc(fused[#loc71, #loc72])
#loc482 = loc(fused[#loc76, #loc77])
#loc483 = loc(fused[#loc78, #loc79])
#loc484 = loc(fused[#loc81, #loc82])
#loc485 = loc(fused[#loc83, #loc84])
#loc486 = loc(fused[#loc85, #loc86])
#loc487 = loc(fused[#loc87, #loc79])
#loc488 = loc(fused[#loc91, #loc92])
#loc489 = loc(fused[#loc95, #loc96])
#loc490 = loc(fused[#loc97, #loc98])
#loc491 = loc(fused[#loc99, #loc100])
#loc492 = loc(fused[#loc102, #loc103])
#loc493 = loc(fused[#loc104, #loc98])
#loc494 = loc(fused[#loc108, #loc106])
#loc495 = loc(fused[#loc111, #loc112])
#loc496 = loc(fused[#loc114, #loc115])
#loc497 = loc(fused[#loc116, #loc117])
#loc498 = loc(fused[#loc118, #loc115])
#loc499 = loc(fused[#loc125, #loc126])
#loc500 = loc(fused[#loc129, #loc130])
#loc501 = loc(fused[#loc137, #loc138])
#loc502 = loc(fused[#loc139, #loc140])
#loc503 = loc(fused[#loc141, #loc142])
#loc504 = loc(fused[#loc143, #loc144])
#loc505 = loc(fused[#loc145, #loc146])
#loc506 = loc(fused[#loc148, #loc149])
#loc507 = loc(fused[#loc150, #loc151])
#loc508 = loc(fused[#loc154, #loc152])
#loc509 = loc(fused[#loc155, #loc156])
#loc510 = loc(fused[#loc159, #loc160])
#loc511 = loc(fused[#loc161, #loc162])
#loc512 = loc(fused[#loc163, #loc164])
#loc513 = loc(fused[#loc165, #loc166])
#loc514 = loc(fused[#loc167, #loc168])
#loc515 = loc(fused[#loc169, #loc170])
#loc516 = loc(fused[#loc171, #loc172])
#loc517 = loc(fused[#loc177, #loc178])
#loc518 = loc(fused[#loc179, #loc180])
#loc519 = loc(fused[#loc181, #loc182])
#loc520 = loc(fused[#loc183, #loc180])
#loc521 = loc(fused[#loc185, #loc186])
#loc522 = loc(fused[#loc188, #loc189])
#loc523 = loc(fused[#loc190, #loc191])
#loc524 = loc(fused[#loc193, #loc192])
#loc525 = loc(fused[#loc196, #loc197])
#loc526 = loc(fused[#loc200, #loc201])
#loc527 = loc(fused[#loc202, #loc203])
#loc528 = loc(fused[#loc205, #loc206])
#loc529 = loc(fused[#loc207, #loc208])
#loc530 = loc(fused[#loc209, #loc210])
#loc531 = loc(fused[#loc211, #loc203])
#loc532 = loc(fused[#loc215, #loc216])
#loc533 = loc(fused[#loc219, #loc220])
#loc534 = loc(fused[#loc221, #loc222])
#loc535 = loc(fused[#loc223, #loc224])
#loc536 = loc(fused[#loc226, #loc227])
#loc537 = loc(fused[#loc228, #loc222])
#loc538 = loc(fused[#loc232, #loc230])
#loc539 = loc(fused[#loc235, #loc236])
#loc540 = loc(fused[#loc238, #loc239])
#loc541 = loc(fused[#loc240, #loc241])
#loc542 = loc(fused[#loc242, #loc239])
#loc543 = loc(fused[#loc250, #loc251])
#loc544 = loc(fused[#loc258, #loc259])
#loc545 = loc(fused[#loc260, #loc261])
#loc546 = loc(fused[#loc262, #loc263, #loc264, #loc259])
#loc547 = loc(fused[#loc265, #loc266])
#loc548 = loc(fused[#loc270, #loc271])
#loc549 = loc(fused[#loc272, #loc273])
#loc550 = loc(fused[#loc276, #loc274])
#loc551 = loc(fused[#loc277, #loc278])
#loc552 = loc(fused[#loc281, #loc282])
#loc553 = loc(fused[#loc283, #loc284])
#loc554 = loc(fused[#loc285, #loc286])
#loc555 = loc(fused[#loc287, #loc288])
#loc556 = loc(fused[#loc289, #loc290])
#loc557 = loc(fused[#loc291, #loc292])
#loc558 = loc(fused[#loc293, #loc294])
#loc559 = loc(fused[#loc299, #loc300])
#loc560 = loc(fused[#loc301, #loc302])
#loc561 = loc(fused[#loc303, #loc304])
#loc562 = loc(fused[#loc305, #loc302])
#loc563 = loc(fused[#loc307, #loc308])
#loc564 = loc(fused[#loc310, #loc311])
#loc565 = loc(fused[#loc312, #loc313])
#loc566 = loc(fused[#loc315, #loc314])
#loc567 = loc(fused[#loc318, #loc319])
#loc568 = loc(fused[#loc322, #loc323])
#loc569 = loc(fused[#loc324, #loc325])
#loc570 = loc(fused[#loc327, #loc328])
#loc571 = loc(fused[#loc329, #loc330])
#loc572 = loc(fused[#loc331, #loc332])
#loc573 = loc(fused[#loc333, #loc325])
#loc574 = loc(fused[#loc337, #loc338])
#loc575 = loc(fused[#loc341, #loc342])
#loc576 = loc(fused[#loc343, #loc344])
#loc577 = loc(fused[#loc345, #loc346])
#loc578 = loc(fused[#loc348, #loc349])
#loc579 = loc(fused[#loc350, #loc344])
#loc580 = loc(fused[#loc354, #loc352])
#loc581 = loc(fused[#loc357, #loc358])
#loc582 = loc(fused[#loc360, #loc361])
#loc583 = loc(fused[#loc362, #loc363])
#loc584 = loc(fused[#loc364, #loc361])
#loc585 = loc(fused[#loc372, #loc373])
#loc586 = loc(fused[#loc376, #loc377])
#loc587 = loc(fused[#loc378, #loc379])
#loc588 = loc(fused[#loc380, #loc381, #loc382, #loc377])
#loc589 = loc(fused[#loc383, #loc384])
#loc590 = loc(fused[#loc393, #loc394])
#loc591 = loc(fused[#loc395, #loc396])
#loc592 = loc(fused[#loc399, #loc397])
#loc593 = loc(fused[#loc400, #loc401])
#loc594 = loc(fused[#loc409, #loc408])
#loc595 = loc(fused[#loc411, #loc412])
#loc596 = loc(fused[#loc415, #loc416])
#loc597 = loc(fused[#loc423, #loc424])
#loc598 = loc(fused[#loc425, #loc426])
#loc599 = loc(fused[#loc429, #loc427])
#loc600 = loc(fused[#loc430, #loc431])
#loc601 = loc(fused[#loc435, #loc434])
#loc602 = loc(fused[#loc441, #loc442])
#loc603 = loc(fused[#loc445, #loc446])
