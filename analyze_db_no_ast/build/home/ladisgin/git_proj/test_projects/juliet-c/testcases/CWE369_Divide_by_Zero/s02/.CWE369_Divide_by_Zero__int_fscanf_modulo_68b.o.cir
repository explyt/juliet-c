!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE369_Divide_by_Zero__int_fscanf_modulo_68_badData : !s32i {alignment = 4 : i64} loc(#loc42)
  cir.func private  @printIntLine(!s32i) loc(#loc43)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_modulo_68b_badSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_fscanf_modulo_68_badData : !cir.ptr<!s32i> loc(#loc42)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc9)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc46)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc11)
    cir.return loc(#loc6)
  } loc(#loc44)
  cir.global "private"  external @CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodG2BData : !s32i {alignment = 4 : i64} loc(#loc47)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_modulo_68b_goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc49)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodG2BData : !cir.ptr<!s32i> loc(#loc47)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc50)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc20)
    cir.return loc(#loc15)
  } loc(#loc48)
  cir.global "private"  external @CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodB2GData : !s32i {alignment = 4 : i64} loc(#loc51)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc52)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc25)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_modulo_68b_goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc54)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodB2GData : !cir.ptr<!s32i> loc(#loc51)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc33)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc56)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc34)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc38)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc58)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc40)
      } else {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc25)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc25)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc41)
      } loc(#loc57)
    } loc(#loc55)
    cir.return loc(#loc27)
  } loc(#loc53)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":20:1)
#loc2 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":20:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":26:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":31:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":28:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":28:16)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":30:18)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":30:24)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":30:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":21:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":21:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":38:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":43:1)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":40:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":40:16)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":42:18)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":42:24)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":42:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":22:1)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":22:12)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":56:19)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":46:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":58:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":48:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":48:16)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":50:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":57:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":50:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":50:17)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":50:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":51:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":53:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":55:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":52:22)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":52:28)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":52:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_68b.c":56:9)
#loc42 = loc(fused[#loc1, #loc2])
#loc43 = loc(fused[#loc3, #loc4])
#loc44 = loc(fused[#loc5, #loc6])
#loc45 = loc(fused[#loc7, #loc8])
#loc46 = loc(fused[#loc9, #loc10])
#loc47 = loc(fused[#loc12, #loc13])
#loc48 = loc(fused[#loc14, #loc15])
#loc49 = loc(fused[#loc16, #loc17])
#loc50 = loc(fused[#loc18, #loc19])
#loc51 = loc(fused[#loc21, #loc22])
#loc52 = loc(fused[#loc23, #loc24])
#loc53 = loc(fused[#loc26, #loc27])
#loc54 = loc(fused[#loc28, #loc29])
#loc55 = loc(fused[#loc30, #loc31])
#loc56 = loc(fused[#loc32, #loc33])
#loc57 = loc(fused[#loc35, #loc36, #loc37, #loc31])
#loc58 = loc(fused[#loc38, #loc39])
