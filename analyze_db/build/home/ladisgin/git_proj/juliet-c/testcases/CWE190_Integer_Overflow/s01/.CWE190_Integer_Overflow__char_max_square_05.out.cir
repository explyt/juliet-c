!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc50 = loc("CWE190_Integer_Overflow__char_max_square_05.c":170:10)
#loc51 = loc("CWE190_Integer_Overflow__char_max_square_05.c":170:14)
#loc52 = loc("CWE190_Integer_Overflow__char_max_square_05.c":170:20)
#loc53 = loc("CWE190_Integer_Overflow__char_max_square_05.c":170:32)
#loc212 = loc(fused[#loc50, #loc51])
#loc213 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc191)
  cir.func private @printHexCharLine(!s8i) loc(#loc192)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_square_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc194)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc195)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc11)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc191)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc198)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<127> : !s32i loc(#loc17)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc17)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc199)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc200)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc191)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %11 ^bb6, ^bb9 loc(#loc201)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc202)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc25)
    %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc25)
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc8)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc8)
    %16 = cir.binop(mul, %13, %15) nsw : !s32i loc(#loc25)
    %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc25)
    cir.store %17, %0 : !s8i, !cir.ptr<!s8i> loc(#loc194)
    %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc26)
    cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc27)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc20)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc20)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc193)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_square_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc203)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc208)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc209)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc213)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_max_square_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call @CWE190_Integer_Overflow__char_max_square_05_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_max_square_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call @CWE190_Integer_Overflow__char_max_square_05_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    cir.return %17 : !s32i loc(#loc216)
  } loc(#loc211)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc217)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc70)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc219)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc220)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc79)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc79)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc221)
    cir.br ^bb1 loc(#loc222)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc191)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc223)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<127> : !s32i loc(#loc85)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc85)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc224)
    cir.br ^bb3 loc(#loc82)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc82)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc225)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc217)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %11 ^bb6, ^bb7 loc(#loc226)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb13 loc(#loc91)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc227)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc96)
    %15 = cir.cast(integral, %14 : !s8i), !s64i loc(#loc96)
    %16 = cir.cast(integral, %15 : !s64i), !s32i loc(#loc96)
    %17 = cir.abs %16 poison : !s32i loc(#loc97)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc97)
    %19 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc98)
    %20 = cir.const #cir.int<127> : !s32i loc(#loc99)
    %21 = cir.cast(int_to_float, %20 : !s32i), !cir.double loc(#loc99)
    %22 = cir.call @sqrt(%21) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc98)
    %23 = cir.cast(float_to_int, %22 : !cir.double), !s64i loc(#loc98)
    %24 = cir.cmp(le, %18, %23) : !s64i, !cir.bool loc(#loc228)
    cir.brcond %24 ^bb9, ^bb10 loc(#loc229)
  ^bb9:  // pred: ^bb8
    %25 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc104)
    %26 = cir.cast(integral, %25 : !s8i), !s32i loc(#loc104)
    %27 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc76)
    %28 = cir.cast(integral, %27 : !s8i), !s32i loc(#loc76)
    %29 = cir.binop(mul, %26, %28) nsw : !s32i loc(#loc104)
    %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc104)
    cir.store %30, %0 : !s8i, !cir.ptr<!s8i> loc(#loc219)
    %31 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc105)
    cir.call @printHexCharLine(%31) : (!s8i) -> () loc(#loc106)
    cir.br ^bb11 loc(#loc102)
  ^bb10:  // pred: ^bb8
    %32 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc72)
    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb11 loc(#loc95)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc95)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc88)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc88)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc74)
  } loc(#loc218)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc231)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc232)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc114)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc114)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc233)
    cir.br ^bb1 loc(#loc234)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc191)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc235)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<127> : !s32i loc(#loc120)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc120)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc236)
    cir.br ^bb3 loc(#loc117)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc237)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc191)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %11 ^bb6, ^bb12 loc(#loc238)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc239)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc128)
    %13 = cir.cast(integral, %12 : !s8i), !s64i loc(#loc128)
    %14 = cir.cast(integral, %13 : !s64i), !s32i loc(#loc128)
    %15 = cir.abs %14 poison : !s32i loc(#loc129)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc129)
    %17 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc130)
    %18 = cir.const #cir.int<127> : !s32i loc(#loc131)
    %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc131)
    %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc130)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc130)
    %22 = cir.cmp(le, %16, %21) : !s64i, !cir.bool loc(#loc240)
    cir.brcond %22 ^bb8, ^bb9 loc(#loc241)
  ^bb8:  // pred: ^bb7
    %23 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc136)
    %24 = cir.cast(integral, %23 : !s8i), !s32i loc(#loc136)
    %25 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc111)
    %26 = cir.cast(integral, %25 : !s8i), !s32i loc(#loc111)
    %27 = cir.binop(mul, %24, %26) nsw : !s32i loc(#loc136)
    %28 = cir.cast(integral, %27 : !s32i), !s8i loc(#loc136)
    cir.store %28, %0 : !s8i, !cir.ptr<!s8i> loc(#loc231)
    %29 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc137)
    cir.call @printHexCharLine(%29) : (!s8i) -> () loc(#loc138)
    cir.br ^bb10 loc(#loc134)
  ^bb9:  // pred: ^bb7
    %30 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc139)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc139)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc140)
    cir.br ^bb10 loc(#loc127)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc127)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc123)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc123)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc109)
  } loc(#loc230)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc243)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc244)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc147)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc147)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc245)
    cir.br ^bb1 loc(#loc246)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc217)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc247)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    cir.br ^bb4 loc(#loc153)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc157)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc157)
    cir.store %10, %1 : !s8i, !cir.ptr<!s8i> loc(#loc248)
    cir.br ^bb4 loc(#loc150)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc249)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc191)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc161)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc250)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc251)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc165)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc165)
    %16 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc144)
    %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc144)
    %18 = cir.binop(mul, %15, %17) nsw : !s32i loc(#loc165)
    %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc165)
    cir.store %19, %0 : !s8i, !cir.ptr<!s8i> loc(#loc243)
    %20 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc166)
    cir.call @printHexCharLine(%20) : (!s8i) -> () loc(#loc167)
    cir.br ^bb9 loc(#loc164)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc160)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc160)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc142)
  } loc(#loc242)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc253)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc254)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc174)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc174)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc255)
    cir.br ^bb1 loc(#loc256)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc191)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc178)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc257)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc180)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc180)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc258)
    cir.br ^bb3 loc(#loc177)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc177)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc259)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc191)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc184)
    cir.brcond %11 ^bb6, ^bb9 loc(#loc260)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc261)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc188)
    %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc188)
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc171)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc171)
    %16 = cir.binop(mul, %13, %15) nsw : !s32i loc(#loc188)
    %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc188)
    cir.store %17, %0 : !s8i, !cir.ptr<!s8i> loc(#loc253)
    %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc189)
    cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc190)
    cir.br ^bb8 loc(#loc187)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc183)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc183)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc169)
  } loc(#loc252)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_square_05.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_square_05.c":25:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE190_Integer_Overflow__char_max_square_05.c":30:1)
#loc6 = loc("CWE190_Integer_Overflow__char_max_square_05.c":47:1)
#loc7 = loc("CWE190_Integer_Overflow__char_max_square_05.c":43:13)
#loc8 = loc("CWE190_Integer_Overflow__char_max_square_05.c":43:34)
#loc9 = loc("CWE190_Integer_Overflow__char_max_square_05.c":32:5)
#loc10 = loc("CWE190_Integer_Overflow__char_max_square_05.c":32:10)
#loc11 = loc("CWE190_Integer_Overflow__char_max_square_05.c":33:12)
#loc12 = loc("CWE190_Integer_Overflow__char_max_square_05.c":33:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_square_05.c":34:5)
#loc14 = loc("CWE190_Integer_Overflow__char_max_square_05.c":38:5)
#loc15 = loc("CWE190_Integer_Overflow__char_max_square_05.c":34:8)
#loc16 = loc("CWE190_Integer_Overflow__char_max_square_05.c":35:5)
#loc17 = loc("CWE190_Integer_Overflow__char_max_square_05.c":37:16)
#loc18 = loc("CWE190_Integer_Overflow__char_max_square_05.c":37:9)
#loc19 = loc("CWE190_Integer_Overflow__char_max_square_05.c":39:5)
#loc20 = loc("CWE190_Integer_Overflow__char_max_square_05.c":46:5)
#loc21 = loc("CWE190_Integer_Overflow__char_max_square_05.c":39:8)
#loc22 = loc("CWE190_Integer_Overflow__char_max_square_05.c":40:5)
#loc23 = loc("CWE190_Integer_Overflow__char_max_square_05.c":41:9)
#loc24 = loc("CWE190_Integer_Overflow__char_max_square_05.c":45:9)
#loc25 = loc("CWE190_Integer_Overflow__char_max_square_05.c":43:27)
#loc26 = loc("CWE190_Integer_Overflow__char_max_square_05.c":44:30)
#loc27 = loc("CWE190_Integer_Overflow__char_max_square_05.c":44:13)
#loc28 = loc("CWE190_Integer_Overflow__char_max_square_05.c":153:1)
#loc29 = loc("CWE190_Integer_Overflow__char_max_square_05.c":159:1)
#loc30 = loc("CWE190_Integer_Overflow__char_max_square_05.c":155:5)
#loc31 = loc("CWE190_Integer_Overflow__char_max_square_05.c":155:14)
#loc32 = loc("CWE190_Integer_Overflow__char_max_square_05.c":156:5)
#loc33 = loc("CWE190_Integer_Overflow__char_max_square_05.c":156:14)
#loc34 = loc("CWE190_Integer_Overflow__char_max_square_05.c":157:5)
#loc35 = loc("CWE190_Integer_Overflow__char_max_square_05.c":157:14)
#loc36 = loc("CWE190_Integer_Overflow__char_max_square_05.c":158:5)
#loc37 = loc("CWE190_Integer_Overflow__char_max_square_05.c":158:14)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__char_max_square_05.c":175:15)
#loc45 = loc("CWE190_Integer_Overflow__char_max_square_05.c":177:15)
#loc46 = loc("CWE190_Integer_Overflow__char_max_square_05.c":180:15)
#loc47 = loc("CWE190_Integer_Overflow__char_max_square_05.c":182:15)
#loc48 = loc("CWE190_Integer_Overflow__char_max_square_05.c":170:1)
#loc49 = loc("CWE190_Integer_Overflow__char_max_square_05.c":185:1)
#loc54 = loc("CWE190_Integer_Overflow__char_max_square_05.c":171:1)
#loc55 = loc("CWE190_Integer_Overflow__char_max_square_05.c":173:27)
#loc56 = loc("CWE190_Integer_Overflow__char_max_square_05.c":173:22)
#loc57 = loc("CWE190_Integer_Overflow__char_max_square_05.c":173:5)
#loc58 = loc("CWE190_Integer_Overflow__char_max_square_05.c":175:5)
#loc59 = loc("CWE190_Integer_Overflow__char_max_square_05.c":176:5)
#loc60 = loc("CWE190_Integer_Overflow__char_max_square_05.c":176:54)
#loc61 = loc("CWE190_Integer_Overflow__char_max_square_05.c":177:5)
#loc62 = loc("CWE190_Integer_Overflow__char_max_square_05.c":180:5)
#loc63 = loc("CWE190_Integer_Overflow__char_max_square_05.c":181:5)
#loc64 = loc("CWE190_Integer_Overflow__char_max_square_05.c":181:53)
#loc65 = loc("CWE190_Integer_Overflow__char_max_square_05.c":182:5)
#loc66 = loc("CWE190_Integer_Overflow__char_max_square_05.c":184:12)
#loc67 = loc("CWE190_Integer_Overflow__char_max_square_05.c":184:5)
#loc68 = loc("CWE190_Integer_Overflow__char_max_square_05.c":26:1)
#loc69 = loc("CWE190_Integer_Overflow__char_max_square_05.c":26:26)
#loc70 = loc("CWE190_Integer_Overflow__char_max_square_05.c":66:19)
#loc71 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc72 = loc("CWE190_Integer_Overflow__char_max_square_05.c":78:23)
#loc73 = loc("CWE190_Integer_Overflow__char_max_square_05.c":54:1)
#loc74 = loc("CWE190_Integer_Overflow__char_max_square_05.c":81:1)
#loc75 = loc("CWE190_Integer_Overflow__char_max_square_05.c":73:13)
#loc76 = loc("CWE190_Integer_Overflow__char_max_square_05.c":73:34)
#loc77 = loc("CWE190_Integer_Overflow__char_max_square_05.c":56:5)
#loc78 = loc("CWE190_Integer_Overflow__char_max_square_05.c":56:10)
#loc79 = loc("CWE190_Integer_Overflow__char_max_square_05.c":57:12)
#loc80 = loc("CWE190_Integer_Overflow__char_max_square_05.c":57:5)
#loc81 = loc("CWE190_Integer_Overflow__char_max_square_05.c":58:5)
#loc82 = loc("CWE190_Integer_Overflow__char_max_square_05.c":62:5)
#loc83 = loc("CWE190_Integer_Overflow__char_max_square_05.c":58:8)
#loc84 = loc("CWE190_Integer_Overflow__char_max_square_05.c":59:5)
#loc85 = loc("CWE190_Integer_Overflow__char_max_square_05.c":61:16)
#loc86 = loc("CWE190_Integer_Overflow__char_max_square_05.c":61:9)
#loc87 = loc("CWE190_Integer_Overflow__char_max_square_05.c":63:5)
#loc88 = loc("CWE190_Integer_Overflow__char_max_square_05.c":80:5)
#loc89 = loc("CWE190_Integer_Overflow__char_max_square_05.c":63:8)
#loc90 = loc("CWE190_Integer_Overflow__char_max_square_05.c":64:5)
#loc91 = loc("CWE190_Integer_Overflow__char_max_square_05.c":67:5)
#loc92 = loc("CWE190_Integer_Overflow__char_max_square_05.c":69:5)
#loc93 = loc("CWE190_Integer_Overflow__char_max_square_05.c":66:9)
#loc94 = loc("CWE190_Integer_Overflow__char_max_square_05.c":71:9)
#loc95 = loc("CWE190_Integer_Overflow__char_max_square_05.c":79:9)
#loc96 = loc("CWE190_Integer_Overflow__char_max_square_05.c":71:23)
#loc97 = loc("CWE190_Integer_Overflow__char_max_square_05.c":71:13)
#loc98 = loc("CWE190_Integer_Overflow__char_max_square_05.c":71:38)
#loc99 = loc("CWE190_Integer_Overflow__char_max_square_05.c":71:51)
#loc100 = loc("CWE190_Integer_Overflow__char_max_square_05.c":71:59)
#loc101 = loc("CWE190_Integer_Overflow__char_max_square_05.c":72:9)
#loc102 = loc("CWE190_Integer_Overflow__char_max_square_05.c":75:9)
#loc103 = loc("CWE190_Integer_Overflow__char_max_square_05.c":77:9)
#loc104 = loc("CWE190_Integer_Overflow__char_max_square_05.c":73:27)
#loc105 = loc("CWE190_Integer_Overflow__char_max_square_05.c":74:30)
#loc106 = loc("CWE190_Integer_Overflow__char_max_square_05.c":74:13)
#loc107 = loc("CWE190_Integer_Overflow__char_max_square_05.c":78:13)
#loc108 = loc("CWE190_Integer_Overflow__char_max_square_05.c":84:1)
#loc109 = loc("CWE190_Integer_Overflow__char_max_square_05.c":106:1)
#loc110 = loc("CWE190_Integer_Overflow__char_max_square_05.c":98:13)
#loc111 = loc("CWE190_Integer_Overflow__char_max_square_05.c":98:34)
#loc112 = loc("CWE190_Integer_Overflow__char_max_square_05.c":86:5)
#loc113 = loc("CWE190_Integer_Overflow__char_max_square_05.c":86:10)
#loc114 = loc("CWE190_Integer_Overflow__char_max_square_05.c":87:12)
#loc115 = loc("CWE190_Integer_Overflow__char_max_square_05.c":87:5)
#loc116 = loc("CWE190_Integer_Overflow__char_max_square_05.c":88:5)
#loc117 = loc("CWE190_Integer_Overflow__char_max_square_05.c":92:5)
#loc118 = loc("CWE190_Integer_Overflow__char_max_square_05.c":88:8)
#loc119 = loc("CWE190_Integer_Overflow__char_max_square_05.c":89:5)
#loc120 = loc("CWE190_Integer_Overflow__char_max_square_05.c":91:16)
#loc121 = loc("CWE190_Integer_Overflow__char_max_square_05.c":91:9)
#loc122 = loc("CWE190_Integer_Overflow__char_max_square_05.c":93:5)
#loc123 = loc("CWE190_Integer_Overflow__char_max_square_05.c":105:5)
#loc124 = loc("CWE190_Integer_Overflow__char_max_square_05.c":93:8)
#loc125 = loc("CWE190_Integer_Overflow__char_max_square_05.c":94:5)
#loc126 = loc("CWE190_Integer_Overflow__char_max_square_05.c":96:9)
#loc127 = loc("CWE190_Integer_Overflow__char_max_square_05.c":104:9)
#loc128 = loc("CWE190_Integer_Overflow__char_max_square_05.c":96:23)
#loc129 = loc("CWE190_Integer_Overflow__char_max_square_05.c":96:13)
#loc130 = loc("CWE190_Integer_Overflow__char_max_square_05.c":96:38)
#loc131 = loc("CWE190_Integer_Overflow__char_max_square_05.c":96:51)
#loc132 = loc("CWE190_Integer_Overflow__char_max_square_05.c":96:59)
#loc133 = loc("CWE190_Integer_Overflow__char_max_square_05.c":97:9)
#loc134 = loc("CWE190_Integer_Overflow__char_max_square_05.c":100:9)
#loc135 = loc("CWE190_Integer_Overflow__char_max_square_05.c":102:9)
#loc136 = loc("CWE190_Integer_Overflow__char_max_square_05.c":98:27)
#loc137 = loc("CWE190_Integer_Overflow__char_max_square_05.c":99:30)
#loc138 = loc("CWE190_Integer_Overflow__char_max_square_05.c":99:13)
#loc139 = loc("CWE190_Integer_Overflow__char_max_square_05.c":103:23)
#loc140 = loc("CWE190_Integer_Overflow__char_max_square_05.c":103:13)
#loc141 = loc("CWE190_Integer_Overflow__char_max_square_05.c":109:1)
#loc142 = loc("CWE190_Integer_Overflow__char_max_square_05.c":131:1)
#loc143 = loc("CWE190_Integer_Overflow__char_max_square_05.c":127:13)
#loc144 = loc("CWE190_Integer_Overflow__char_max_square_05.c":127:34)
#loc145 = loc("CWE190_Integer_Overflow__char_max_square_05.c":111:5)
#loc146 = loc("CWE190_Integer_Overflow__char_max_square_05.c":111:10)
#loc147 = loc("CWE190_Integer_Overflow__char_max_square_05.c":112:12)
#loc148 = loc("CWE190_Integer_Overflow__char_max_square_05.c":112:5)
#loc149 = loc("CWE190_Integer_Overflow__char_max_square_05.c":113:5)
#loc150 = loc("CWE190_Integer_Overflow__char_max_square_05.c":122:5)
#loc151 = loc("CWE190_Integer_Overflow__char_max_square_05.c":113:8)
#loc152 = loc("CWE190_Integer_Overflow__char_max_square_05.c":114:5)
#loc153 = loc("CWE190_Integer_Overflow__char_max_square_05.c":117:5)
#loc154 = loc("CWE190_Integer_Overflow__char_max_square_05.c":119:5)
#loc155 = loc("CWE190_Integer_Overflow__char_max_square_05.c":116:19)
#loc156 = loc("CWE190_Integer_Overflow__char_max_square_05.c":116:9)
#loc157 = loc("CWE190_Integer_Overflow__char_max_square_05.c":121:16)
#loc158 = loc("CWE190_Integer_Overflow__char_max_square_05.c":121:9)
#loc159 = loc("CWE190_Integer_Overflow__char_max_square_05.c":123:5)
#loc160 = loc("CWE190_Integer_Overflow__char_max_square_05.c":130:5)
#loc161 = loc("CWE190_Integer_Overflow__char_max_square_05.c":123:8)
#loc162 = loc("CWE190_Integer_Overflow__char_max_square_05.c":124:5)
#loc163 = loc("CWE190_Integer_Overflow__char_max_square_05.c":125:9)
#loc164 = loc("CWE190_Integer_Overflow__char_max_square_05.c":129:9)
#loc165 = loc("CWE190_Integer_Overflow__char_max_square_05.c":127:27)
#loc166 = loc("CWE190_Integer_Overflow__char_max_square_05.c":128:30)
#loc167 = loc("CWE190_Integer_Overflow__char_max_square_05.c":128:13)
#loc168 = loc("CWE190_Integer_Overflow__char_max_square_05.c":134:1)
#loc169 = loc("CWE190_Integer_Overflow__char_max_square_05.c":151:1)
#loc170 = loc("CWE190_Integer_Overflow__char_max_square_05.c":147:13)
#loc171 = loc("CWE190_Integer_Overflow__char_max_square_05.c":147:34)
#loc172 = loc("CWE190_Integer_Overflow__char_max_square_05.c":136:5)
#loc173 = loc("CWE190_Integer_Overflow__char_max_square_05.c":136:10)
#loc174 = loc("CWE190_Integer_Overflow__char_max_square_05.c":137:12)
#loc175 = loc("CWE190_Integer_Overflow__char_max_square_05.c":137:5)
#loc176 = loc("CWE190_Integer_Overflow__char_max_square_05.c":138:5)
#loc177 = loc("CWE190_Integer_Overflow__char_max_square_05.c":142:5)
#loc178 = loc("CWE190_Integer_Overflow__char_max_square_05.c":138:8)
#loc179 = loc("CWE190_Integer_Overflow__char_max_square_05.c":139:5)
#loc180 = loc("CWE190_Integer_Overflow__char_max_square_05.c":141:16)
#loc181 = loc("CWE190_Integer_Overflow__char_max_square_05.c":141:9)
#loc182 = loc("CWE190_Integer_Overflow__char_max_square_05.c":143:5)
#loc183 = loc("CWE190_Integer_Overflow__char_max_square_05.c":150:5)
#loc184 = loc("CWE190_Integer_Overflow__char_max_square_05.c":143:8)
#loc185 = loc("CWE190_Integer_Overflow__char_max_square_05.c":144:5)
#loc186 = loc("CWE190_Integer_Overflow__char_max_square_05.c":145:9)
#loc187 = loc("CWE190_Integer_Overflow__char_max_square_05.c":149:9)
#loc188 = loc("CWE190_Integer_Overflow__char_max_square_05.c":147:27)
#loc189 = loc("CWE190_Integer_Overflow__char_max_square_05.c":148:30)
#loc190 = loc("CWE190_Integer_Overflow__char_max_square_05.c":148:13)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc5, #loc6])
#loc194 = loc(fused[#loc7, #loc8])
#loc195 = loc(fused[#loc9, #loc10])
#loc196 = loc(fused[#loc12, #loc11])
#loc197 = loc(fused[#loc13, #loc14])
#loc198 = loc(fused[#loc16, #loc14])
#loc199 = loc(fused[#loc18, #loc17])
#loc200 = loc(fused[#loc19, #loc20])
#loc201 = loc(fused[#loc22, #loc20])
#loc202 = loc(fused[#loc23, #loc24])
#loc203 = loc(fused[#loc28, #loc29])
#loc204 = loc(fused[#loc30, #loc31])
#loc205 = loc(fused[#loc32, #loc33])
#loc206 = loc(fused[#loc34, #loc35])
#loc207 = loc(fused[#loc36, #loc37])
#loc208 = loc(fused[#loc38, #loc39])
#loc209 = loc(fused[#loc40, #loc41])
#loc210 = loc(fused[#loc42, #loc43])
#loc211 = loc(fused[#loc48, #loc49])
#loc214 = loc(fused[#loc59, #loc60])
#loc215 = loc(fused[#loc63, #loc64])
#loc216 = loc(fused[#loc67, #loc66])
#loc217 = loc(fused[#loc68, #loc69])
#loc218 = loc(fused[#loc73, #loc74])
#loc219 = loc(fused[#loc75, #loc76])
#loc220 = loc(fused[#loc77, #loc78])
#loc221 = loc(fused[#loc80, #loc79])
#loc222 = loc(fused[#loc81, #loc82])
#loc223 = loc(fused[#loc84, #loc82])
#loc224 = loc(fused[#loc86, #loc85])
#loc225 = loc(fused[#loc87, #loc88])
#loc226 = loc(fused[#loc90, #loc91, #loc92, #loc88])
#loc227 = loc(fused[#loc94, #loc95])
#loc228 = loc(fused[#loc97, #loc100])
#loc229 = loc(fused[#loc101, #loc102, #loc103, #loc95])
#loc230 = loc(fused[#loc108, #loc109])
#loc231 = loc(fused[#loc110, #loc111])
#loc232 = loc(fused[#loc112, #loc113])
#loc233 = loc(fused[#loc115, #loc114])
#loc234 = loc(fused[#loc116, #loc117])
#loc235 = loc(fused[#loc119, #loc117])
#loc236 = loc(fused[#loc121, #loc120])
#loc237 = loc(fused[#loc122, #loc123])
#loc238 = loc(fused[#loc125, #loc123])
#loc239 = loc(fused[#loc126, #loc127])
#loc240 = loc(fused[#loc129, #loc132])
#loc241 = loc(fused[#loc133, #loc134, #loc135, #loc127])
#loc242 = loc(fused[#loc141, #loc142])
#loc243 = loc(fused[#loc143, #loc144])
#loc244 = loc(fused[#loc145, #loc146])
#loc245 = loc(fused[#loc148, #loc147])
#loc246 = loc(fused[#loc149, #loc150])
#loc247 = loc(fused[#loc152, #loc153, #loc154, #loc150])
#loc248 = loc(fused[#loc158, #loc157])
#loc249 = loc(fused[#loc159, #loc160])
#loc250 = loc(fused[#loc162, #loc160])
#loc251 = loc(fused[#loc163, #loc164])
#loc252 = loc(fused[#loc168, #loc169])
#loc253 = loc(fused[#loc170, #loc171])
#loc254 = loc(fused[#loc172, #loc173])
#loc255 = loc(fused[#loc175, #loc174])
#loc256 = loc(fused[#loc176, #loc177])
#loc257 = loc(fused[#loc179, #loc177])
#loc258 = loc(fused[#loc181, #loc180])
#loc259 = loc(fused[#loc182, #loc183])
#loc260 = loc(fused[#loc185, #loc183])
#loc261 = loc(fused[#loc186, #loc187])
