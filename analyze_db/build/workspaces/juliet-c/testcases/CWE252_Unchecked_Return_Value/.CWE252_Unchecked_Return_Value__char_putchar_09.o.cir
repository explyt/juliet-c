!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_putchar_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc55)
  cir.func private @putchar(!s32i) -> !s32i loc(#loc56)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_putchar_09_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc55)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc9)
      cir.if %2 {
        %3 = cir.const #cir.int<65> : !s32i loc(#loc11)
        %4 = cir.call @putchar(%3) : (!s32i) -> !s32i loc(#loc12)
      } loc(#loc59)
    } loc(#loc58)
    cir.return loc(#loc6)
  } loc(#loc57)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_putchar_09_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc61)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc15)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc62)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc17)
    cir.return loc(#loc14)
  } loc(#loc60)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc63)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc23)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"putchar failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc63)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc29)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc23)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc23)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc33)
      } else {
        cir.scope {
          %3 = cir.const #cir.int<65> : !s32i loc(#loc36)
          %4 = cir.call @putchar(%3) : (!s32i) -> !s32i loc(#loc37)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc38)
          %7 = cir.cmp(eq, %4, %6) : !s32i, !cir.bool loc(#loc69)
          cir.if %7 {
            %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc24)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc24)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc40)
          } loc(#loc70)
        } loc(#loc68)
      } loc(#loc67)
    } loc(#loc66)
    cir.return loc(#loc26)
  } loc(#loc65)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc55)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc45)
      cir.if %2 {
        cir.scope {
          %3 = cir.const #cir.int<65> : !s32i loc(#loc49)
          %4 = cir.call @putchar(%3) : (!s32i) -> !s32i loc(#loc50)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc51)
          %7 = cir.cmp(eq, %4, %6) : !s32i, !cir.bool loc(#loc75)
          cir.if %7 {
            %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc54)
          } loc(#loc76)
        } loc(#loc74)
      } loc(#loc73)
    } loc(#loc72)
    cir.return loc(#loc42)
  } loc(#loc71)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_putchar_09.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdio.h":618:1)
#loc4 = loc("/usr/include/stdio.h":618:28)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":24:1)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":31:1)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":26:5)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":30:5)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":26:8)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":27:5)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":29:22)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":29:9)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":68:1)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":72:1)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":70:5)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":70:11)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":71:5)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":71:11)
#loc19 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc20 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc21 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":43:19)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":50:23)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":38:1)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":53:1)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":40:5)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":52:5)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":40:8)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":41:5)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":44:5)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":46:5)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":43:9)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":48:9)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":51:9)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":48:26)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":48:13)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":48:34)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":49:9)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":50:13)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":56:1)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":66:1)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":58:5)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":65:5)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":58:8)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":59:5)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":61:9)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":64:9)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":61:26)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":61:13)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":61:34)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":62:9)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":63:23)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_putchar_09.c":63:13)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc57 = loc(fused[#loc5, #loc6])
#loc58 = loc(fused[#loc7, #loc8])
#loc59 = loc(fused[#loc10, #loc8])
#loc60 = loc(fused[#loc13, #loc14])
#loc61 = loc(fused[#loc15, #loc16])
#loc62 = loc(fused[#loc17, #loc18])
#loc63 = loc(fused[#loc19, #loc20])
#loc64 = loc(fused[#loc21, #loc22])
#loc65 = loc(fused[#loc25, #loc26])
#loc66 = loc(fused[#loc27, #loc28])
#loc67 = loc(fused[#loc30, #loc31, #loc32, #loc28])
#loc68 = loc(fused[#loc34, #loc35])
#loc69 = loc(fused[#loc37, #loc38])
#loc70 = loc(fused[#loc39, #loc35])
#loc71 = loc(fused[#loc41, #loc42])
#loc72 = loc(fused[#loc43, #loc44])
#loc73 = loc(fused[#loc46, #loc44])
#loc74 = loc(fused[#loc47, #loc48])
#loc75 = loc(fused[#loc50, #loc51])
#loc76 = loc(fused[#loc52, #loc48])
