!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_17.c":214:10)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_17.c":214:14)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_17.c":214:20)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_17.c":214:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc388 = loc(fused[#loc186, #loc187])
#loc389 = loc(fused[#loc188, #loc189])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc313)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc314)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc315)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc316)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc317)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc318)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc319)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc320)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc321)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc322)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc323)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc325)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc33)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc328)
        cir.condition(%4) loc(#loc37)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc331)
            %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc332)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc333)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc334)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc335)
            %7 = cir.const #cir.int<16> : !u64i loc(#loc336)
            %8 = cir.cast(integral, %7 : !u64i), !s32i loc(#loc336)
            cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc333)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc47)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc334)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc49)
            cir.store %12, %6 : !s32i, !cir.ptr<!s32i> loc(#loc335)
            cir.scope {
              cir.do {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc53)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc54)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc55)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc56)
                cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc338)
                cir.scope {
                  %35 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc61)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc62)
                  %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc62)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc340)
                  cir.if %38 {
                    cir.break loc(#loc64)
                  } loc(#loc341)
                } loc(#loc339)
                %17 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc342)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc67)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc343)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc344)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc72)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc72)
                %22 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc345)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc75)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc75)
                %25 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc346)
                %27 = cir.const #cir.int<20000> : !s32i loc(#loc79)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc79)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc80)
                %30 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc347)
                cir.scope {
                  %35 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                  %36 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc349)
                  %37 = cir.const #cir.int<16> : !u64i loc(#loc350)
                  %38 = cir.cast(integral, %37 : !u64i), !u32i loc(#loc350)
                  %39 = cir.call @bind(%35, %36, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc91)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc92)
                  %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc92)
                  %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc351)
                  cir.if %42 {
                    cir.break loc(#loc94)
                  } loc(#loc352)
                } loc(#loc348)
                cir.scope {
                  %35 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                  %36 = cir.const #cir.int<5> : !s32i loc(#loc98)
                  %37 = cir.call @listen(%35, %36) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc99)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc100)
                  %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc100)
                  %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc354)
                  cir.if %40 {
                    cir.break loc(#loc102)
                  } loc(#loc355)
                } loc(#loc353)
                %31 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc104)
                %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc105)
                %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc106)
                cir.store %34, %6 : !s32i, !cir.ptr<!s32i> loc(#loc356)
                cir.scope {
                  %35 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc112)
                  %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc112)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc358)
                  cir.if %38 {
                    cir.break loc(#loc114)
                  } loc(#loc359)
                } loc(#loc357)
                cir.scope {
                  %35 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                  %36 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc361)
                  %37 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc362)
                  %38 = cir.call @getsockname(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc122)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc123)
                  %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc124)
                  %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc363)
                  cir.if %41 {
                    cir.break loc(#loc126)
                  } loc(#loc364)
                } loc(#loc360)
                cir.scope {
                  %35 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc129)
                  %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
                  %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
                  %38 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
                  %39 = cir.load %38 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc130)
                  %40 = cir.call @inet_ntoa(%39) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc130)
                  %41 = cir.call @strcmp(%37, %40) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc129)
                  %42 = cir.const #cir.int<0> : !s32i loc(#loc131)
                  %43 = cir.cmp(eq, %41, %42) : !s32i, !cir.bool loc(#loc366)
                  cir.if %43 {
                    cir.scope {
                      %44 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                      %45 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                      %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                      %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                      %48 = cir.const #cir.int<15> : !u64i loc(#loc369)
                      %49 = cir.const #cir.int<0> : !s32i loc(#loc140)
                      %50 = cir.call @send(%44, %47, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc141)
                      %51 = cir.const #cir.int<1> : !s32i loc(#loc142)
                      %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc142)
                      %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc142)
                      %54 = cir.cmp(eq, %50, %53) : !s64i, !cir.bool loc(#loc370)
                      cir.if %54 {
                        cir.break loc(#loc144)
                      } loc(#loc371)
                    } loc(#loc368)
                  } else {
                    cir.scope {
                      %44 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc147)
                      %45 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                      %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                      %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                      %48 = cir.const #cir.int<8> : !u64i loc(#loc373)
                      %49 = cir.const #cir.int<0> : !s32i loc(#loc150)
                      %50 = cir.call @send(%44, %47, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc151)
                      %51 = cir.const #cir.int<1> : !s32i loc(#loc152)
                      %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc152)
                      %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc152)
                      %54 = cir.cmp(eq, %50, %53) : !s64i, !cir.bool loc(#loc374)
                      cir.if %54 {
                        %55 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                        %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                        cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc154)
                      } loc(#loc375)
                    } loc(#loc372)
                  } loc(#loc367)
                } loc(#loc365)
                cir.yield loc(#loc52)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc155)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc155)
                cir.condition(%14) loc(#loc155)
              } loc(#loc337)
            } loc(#loc337)
            cir.scope {
              %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc158)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc159)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc159)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc377)
              cir.if %16 {
                %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc161)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc162)
              } loc(#loc378)
            } loc(#loc376)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc165)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc166)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc166)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc380)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc168)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc169)
              } loc(#loc381)
            } loc(#loc379)
          } loc(#loc330)
        } loc(#loc329)
        cir.yield loc(#loc32)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
        %3 = cir.unary(inc, %2) : !s32i, !s32i loc(#loc171)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc382)
        cir.yield loc(#loc326)
      } loc(#loc326)
    } loc(#loc326)
    cir.return loc(#loc28)
  } loc(#loc324)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc384)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc174)
    cir.return loc(#loc173)
  } loc(#loc383)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc385)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc386)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc183)
  cir.func @main(%arg0: !s32i loc(fused[#loc186, #loc187]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc188, #loc189])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc388)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc389)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc185)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc190)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc191)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc192)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc192)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc193)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc180)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    %8 = cir.get_global @CWE510_Trapdoor__ip_based_logic_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc390)
    cir.call @CWE510_Trapdoor__ip_based_logic_17_good() : () -> () loc(#loc195)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc181)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc197)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc182)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc182)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    %13 = cir.get_global @CWE510_Trapdoor__ip_based_logic_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc391)
    cir.call @CWE510_Trapdoor__ip_based_logic_17_bad() : () -> () loc(#loc199)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc183)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc183)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc201)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc202)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc392)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc392)
    cir.return %17 : !s32i loc(#loc392)
  } loc(#loc387)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc394)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc210)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc396)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc212)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc213)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc397)
        cir.condition(%4) loc(#loc214)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc400)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc401)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc402)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc221)
            %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc221)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc401)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc223)
            %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc223)
            cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc402)
            cir.scope {
              cir.do {
                %9 = cir.const #cir.int<2> : !s32i loc(#loc226)
                %10 = cir.const #cir.int<1> : !s32i loc(#loc227)
                %11 = cir.const #cir.int<6> : !s32i loc(#loc228)
                %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc229)
                cir.store %12, %3 : !s32i, !cir.ptr<!s32i> loc(#loc404)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                  %32 = cir.const #cir.int<1> : !s32i loc(#loc235)
                  %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc235)
                  %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc406)
                  cir.if %34 {
                    cir.break loc(#loc237)
                  } loc(#loc407)
                } loc(#loc405)
                %13 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc408)
                %14 = cir.const #cir.int<0> : !s32i loc(#loc240)
                %15 = cir.const #cir.int<16> : !u64i loc(#loc409)
                cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc410)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc245)
                %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc245)
                %18 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc411)
                %19 = cir.const #cir.int<0> : !s32i loc(#loc247)
                %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc247)
                %21 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
                %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
                cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc412)
                %23 = cir.const #cir.int<20000> : !s32i loc(#loc249)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc249)
                %25 = cir.call @htons(%24) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc250)
                %26 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
                cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc413)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc255)
                  %32 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc415)
                  %33 = cir.const #cir.int<16> : !u64i loc(#loc416)
                  %34 = cir.cast(integral, %33 : !u64i), !u32i loc(#loc416)
                  %35 = cir.call @bind(%31, %32, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc260)
                  %36 = cir.const #cir.int<1> : !s32i loc(#loc261)
                  %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc261)
                  %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc417)
                  cir.if %38 {
                    cir.break loc(#loc263)
                  } loc(#loc418)
                } loc(#loc414)
                cir.scope {
                  %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc266)
                  %32 = cir.const #cir.int<5> : !s32i loc(#loc267)
                  %33 = cir.call @listen(%31, %32) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc268)
                  %34 = cir.const #cir.int<1> : !s32i loc(#loc269)
                  %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc269)
                  %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc420)
                  cir.if %36 {
                    cir.break loc(#loc271)
                  } loc(#loc421)
                } loc(#loc419)
                %27 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                %28 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc273)
                %29 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc274)
                %30 = cir.call @accept(%27, %28, %29) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc275)
                cir.store %30, %4 : !s32i, !cir.ptr<!s32i> loc(#loc422)
                cir.scope {
                  %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc280)
                  %32 = cir.const #cir.int<1> : !s32i loc(#loc281)
                  %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc281)
                  %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc424)
                  cir.if %34 {
                    cir.break loc(#loc283)
                  } loc(#loc425)
                } loc(#loc423)
                cir.scope {
                  %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc286)
                  %32 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc287)
                  %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc287)
                  %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc287)
                  %35 = cir.const #cir.int<8> : !u64i loc(#loc427)
                  %36 = cir.const #cir.int<0> : !s32i loc(#loc290)
                  %37 = cir.call @send(%31, %34, %35, %36) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc291)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc292)
                  %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc292)
                  %40 = cir.cast(integral, %39 : !s32i), !s64i loc(#loc292)
                  %41 = cir.cmp(eq, %37, %40) : !s64i, !cir.bool loc(#loc428)
                  cir.if %41 {
                    %42 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc294)
                    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc294)
                    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc295)
                  } loc(#loc429)
                } loc(#loc426)
                cir.yield loc(#loc225)
              } while {
                %9 = cir.const #cir.int<0> : !s32i loc(#loc296)
                %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc296)
                cir.condition(%10) loc(#loc296)
              } loc(#loc403)
            } loc(#loc403)
            cir.scope {
              %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc299)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc300)
              %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc300)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc431)
              cir.if %12 {
                %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc302)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc303)
              } loc(#loc432)
            } loc(#loc430)
            cir.scope {
              %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc306)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc307)
              %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc307)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc434)
              cir.if %12 {
                %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc309)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc310)
              } loc(#loc435)
            } loc(#loc433)
          } loc(#loc399)
        } loc(#loc398)
        cir.yield loc(#loc209)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc311)
        %3 = cir.unary(inc, %2) : !s32i, !s32i loc(#loc312)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc436)
        cir.yield loc(#loc395)
      } loc(#loc395)
    } loc(#loc395)
    cir.return loc(#loc205)
  } loc(#loc393)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_17.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:28)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:44)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:44)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_17.c":103:35)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_17.c":41:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_17.c":124:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_17.c":43:5)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_17.c":43:9)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:5)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_17.c":123:5)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:13)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:9)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:16)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:20)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:18)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_17.c":45:5)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_17.c":46:9)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_17.c":122:9)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_17.c":51:13)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_17.c":51:32)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_17.c":51:41)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_17.c":52:13)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_17.c":52:56)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_17.c":53:13)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_17.c":53:35)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_17.c":54:13)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_17.c":54:35)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_17.c":52:36)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_17.c":55:13)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_17.c":107:21)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:39)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:48)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:61)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:32)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:17)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:72)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_17.c":65:17)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_17.c":68:17)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_17.c":65:21)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_17.c":65:37)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_17.c":66:17)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_17.c":67:21)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:24)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:25)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:34)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:37)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:51)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:17)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:52)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_17.c":70:38)
#loc73 = loc("/usr/include/netinet/in.h":249:5)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_17.c":70:17)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_17.c":71:43)
#loc76 = loc("/usr/include/netinet/in.h":251:20)
#loc77 = loc("/usr/include/netinet/in.h":33:15)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_17.c":71:17)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:42)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:36)
#loc81 = loc("/usr/include/netinet/in.h":250:15)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:17)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:47)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:17)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_17.c":76:17)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:26)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:58)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:59)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:68)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:82)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:21)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:88)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_17.c":74:17)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_17.c":75:21)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:17)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_17.c":80:17)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:28)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:42)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:21)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:48)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_17.c":78:17)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_17.c":79:21)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:39)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:53)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:59)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:32)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:17)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:63)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_17.c":82:17)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_17.c":85:17)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_17.c":82:21)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_17.c":82:37)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_17.c":83:17)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_17.c":84:21)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:17)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_17.c":89:17)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:33)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:66)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:67)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:82)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:83)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:21)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:105)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:104)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_17.c":87:17)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_17.c":88:21)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:17)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_17.c":105:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:21)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:46)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:84)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_17.c":92:17)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_17.c":98:17)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_17.c":100:17)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:21)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_17.c":97:21)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:30)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:59)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:79)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:82)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:25)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:89)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_17.c":94:21)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_17.c":96:25)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:21)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_17.c":104:21)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:30)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:61)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:83)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:86)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:25)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:92)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_17.c":102:21)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_17.c":103:25)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_17.c":107:20)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_17.c":108:13)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_17.c":111:13)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_17.c":108:17)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_17.c":108:33)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_17.c":109:13)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_17.c":110:30)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_17.c":110:17)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_17.c":112:13)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_17.c":115:13)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_17.c":112:17)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_17.c":112:33)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_17.c":113:13)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_17.c":114:30)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_17.c":114:17)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:24)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:23)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_17.c":200:1)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_17.c":203:1)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_17.c":202:5)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_17.c":202:11)
#loc176 = loc("/usr/include/stdlib.h":575:1)
#loc177 = loc("/usr/include/stdlib.h":575:41)
#loc178 = loc("/usr/include/time.h":76:1)
#loc179 = loc("/usr/include/time.h":76:38)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_17.c":219:15)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_17.c":221:15)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_17.c":224:15)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_17.c":226:15)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_17.c":214:1)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_17.c":229:1)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_17.c":215:1)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_17.c":217:27)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_17.c":217:22)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_17.c":217:5)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_17.c":219:5)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_17.c":220:5)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_17.c":220:45)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_17.c":221:5)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_17.c":224:5)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_17.c":225:5)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_17.c":225:44)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_17.c":226:5)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_17.c":228:12)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_17.c":228:5)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_17.c":131:1)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_17.c":198:1)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_17.c":133:5)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_17.c":133:9)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:5)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_17.c":197:5)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:13)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:9)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:16)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:20)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:18)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_17.c":135:5)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_17.c":136:9)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_17.c":196:9)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_17.c":141:13)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_17.c":141:32)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_17.c":142:13)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_17.c":142:35)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_17.c":143:13)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_17.c":143:35)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_17.c":144:13)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_17.c":181:21)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:39)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:48)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:61)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:32)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:17)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:72)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_17.c":154:17)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_17.c":157:17)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_17.c":154:21)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_17.c":154:37)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_17.c":155:17)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_17.c":156:21)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:24)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:25)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:34)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:37)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:51)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:17)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:52)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_17.c":159:38)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_17.c":159:17)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_17.c":160:43)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_17.c":160:17)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:42)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:36)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:17)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:47)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:17)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_17.c":165:17)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:26)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:58)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:59)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:68)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:82)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:21)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:88)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_17.c":163:17)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_17.c":164:21)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:17)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_17.c":169:17)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:28)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:42)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:21)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:48)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_17.c":167:17)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_17.c":168:21)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:39)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:53)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:59)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:32)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:17)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:63)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_17.c":171:17)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_17.c":174:17)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_17.c":171:21)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_17.c":171:37)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_17.c":172:17)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_17.c":173:21)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:17)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_17.c":179:17)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:26)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:40)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:57)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:79)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:82)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:21)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:88)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_17.c":177:17)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_17.c":178:31)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_17.c":178:21)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_17.c":181:20)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_17.c":182:13)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_17.c":185:13)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_17.c":182:17)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_17.c":182:33)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_17.c":183:13)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_17.c":184:30)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_17.c":184:17)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_17.c":186:13)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_17.c":189:13)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_17.c":186:17)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_17.c":186:33)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_17.c":187:13)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_17.c":188:30)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_17.c":188:17)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:24)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:23)
#loc313 = loc(fused[#loc1, #loc2])
#loc314 = loc(fused[#loc3, #loc4])
#loc315 = loc(fused[#loc5, #loc6])
#loc316 = loc(fused[#loc7, #loc8])
#loc317 = loc(fused[#loc9, #loc10])
#loc318 = loc(fused[#loc11, #loc12])
#loc319 = loc(fused[#loc13, #loc14])
#loc320 = loc(fused[#loc16, #loc17])
#loc321 = loc(fused[#loc18, #loc19])
#loc322 = loc(fused[#loc22, #loc23])
#loc323 = loc(fused[#loc25, #loc26])
#loc324 = loc(fused[#loc27, #loc28])
#loc325 = loc(fused[#loc29, #loc30])
#loc326 = loc(fused[#loc31, #loc32])
#loc327 = loc(fused[#loc34, #loc33])
#loc328 = loc(fused[#loc35, #loc36])
#loc329 = loc(fused[#loc38, #loc32])
#loc330 = loc(fused[#loc39, #loc40])
#loc331 = loc(fused[#loc41, #loc42])
#loc332 = loc(fused[#loc41, #loc43])
#loc333 = loc(fused[#loc44, #loc45])
#loc334 = loc(fused[#loc46, #loc47])
#loc335 = loc(fused[#loc48, #loc49])
#loc336 = loc(fused[#loc50, #loc45])
#loc337 = loc(fused[#loc51, #loc52])
#loc338 = loc(fused[#loc57, #loc58])
#loc339 = loc(fused[#loc59, #loc60])
#loc340 = loc(fused[#loc61, #loc62])
#loc341 = loc(fused[#loc63, #loc60])
#loc342 = loc(fused[#loc65, #loc66])
#loc343 = loc(fused[#loc68, #loc69])
#loc344 = loc(fused[#loc70, #loc71])
#loc345 = loc(fused[#loc74, #loc72])
#loc346 = loc(fused[#loc78, #loc75])
#loc347 = loc(fused[#loc82, #loc83])
#loc348 = loc(fused[#loc84, #loc85])
#loc349 = loc(fused[#loc87, #loc88])
#loc350 = loc(fused[#loc89, #loc90])
#loc351 = loc(fused[#loc91, #loc92])
#loc352 = loc(fused[#loc93, #loc85])
#loc353 = loc(fused[#loc95, #loc96])
#loc354 = loc(fused[#loc99, #loc100])
#loc355 = loc(fused[#loc101, #loc96])
#loc356 = loc(fused[#loc107, #loc108])
#loc357 = loc(fused[#loc109, #loc110])
#loc358 = loc(fused[#loc111, #loc112])
#loc359 = loc(fused[#loc113, #loc110])
#loc360 = loc(fused[#loc115, #loc116])
#loc361 = loc(fused[#loc118, #loc119])
#loc362 = loc(fused[#loc120, #loc121])
#loc363 = loc(fused[#loc122, #loc123])
#loc364 = loc(fused[#loc125, #loc116])
#loc365 = loc(fused[#loc127, #loc128])
#loc366 = loc(fused[#loc129, #loc131])
#loc367 = loc(fused[#loc132, #loc133, #loc134, #loc128])
#loc368 = loc(fused[#loc135, #loc136])
#loc369 = loc(fused[#loc138, #loc139])
#loc370 = loc(fused[#loc141, #loc142])
#loc371 = loc(fused[#loc143, #loc136])
#loc372 = loc(fused[#loc145, #loc146])
#loc373 = loc(fused[#loc148, #loc149])
#loc374 = loc(fused[#loc151, #loc152])
#loc375 = loc(fused[#loc153, #loc146])
#loc376 = loc(fused[#loc156, #loc157])
#loc377 = loc(fused[#loc158, #loc159])
#loc378 = loc(fused[#loc160, #loc157])
#loc379 = loc(fused[#loc163, #loc164])
#loc380 = loc(fused[#loc165, #loc166])
#loc381 = loc(fused[#loc167, #loc164])
#loc382 = loc(fused[#loc171, #loc170])
#loc383 = loc(fused[#loc172, #loc173])
#loc384 = loc(fused[#loc174, #loc175])
#loc385 = loc(fused[#loc176, #loc177])
#loc386 = loc(fused[#loc178, #loc179])
#loc387 = loc(fused[#loc184, #loc185])
#loc390 = loc(fused[#loc195, #loc196])
#loc391 = loc(fused[#loc199, #loc200])
#loc392 = loc(fused[#loc203, #loc202])
#loc393 = loc(fused[#loc204, #loc205])
#loc394 = loc(fused[#loc206, #loc207])
#loc395 = loc(fused[#loc208, #loc209])
#loc396 = loc(fused[#loc211, #loc210])
#loc397 = loc(fused[#loc212, #loc213])
#loc398 = loc(fused[#loc215, #loc209])
#loc399 = loc(fused[#loc216, #loc217])
#loc400 = loc(fused[#loc218, #loc219])
#loc401 = loc(fused[#loc220, #loc221])
#loc402 = loc(fused[#loc222, #loc223])
#loc403 = loc(fused[#loc224, #loc225])
#loc404 = loc(fused[#loc230, #loc231])
#loc405 = loc(fused[#loc232, #loc233])
#loc406 = loc(fused[#loc234, #loc235])
#loc407 = loc(fused[#loc236, #loc233])
#loc408 = loc(fused[#loc238, #loc239])
#loc409 = loc(fused[#loc241, #loc242])
#loc410 = loc(fused[#loc243, #loc244])
#loc411 = loc(fused[#loc246, #loc245])
#loc412 = loc(fused[#loc248, #loc247])
#loc413 = loc(fused[#loc251, #loc252])
#loc414 = loc(fused[#loc253, #loc254])
#loc415 = loc(fused[#loc256, #loc257])
#loc416 = loc(fused[#loc258, #loc259])
#loc417 = loc(fused[#loc260, #loc261])
#loc418 = loc(fused[#loc262, #loc254])
#loc419 = loc(fused[#loc264, #loc265])
#loc420 = loc(fused[#loc268, #loc269])
#loc421 = loc(fused[#loc270, #loc265])
#loc422 = loc(fused[#loc276, #loc277])
#loc423 = loc(fused[#loc278, #loc279])
#loc424 = loc(fused[#loc280, #loc281])
#loc425 = loc(fused[#loc282, #loc279])
#loc426 = loc(fused[#loc284, #loc285])
#loc427 = loc(fused[#loc288, #loc289])
#loc428 = loc(fused[#loc291, #loc292])
#loc429 = loc(fused[#loc293, #loc285])
#loc430 = loc(fused[#loc297, #loc298])
#loc431 = loc(fused[#loc299, #loc300])
#loc432 = loc(fused[#loc301, #loc298])
#loc433 = loc(fused[#loc304, #loc305])
#loc434 = loc(fused[#loc306, #loc307])
#loc435 = loc(fused[#loc308, #loc305])
#loc436 = loc(fused[#loc312, #loc311])
