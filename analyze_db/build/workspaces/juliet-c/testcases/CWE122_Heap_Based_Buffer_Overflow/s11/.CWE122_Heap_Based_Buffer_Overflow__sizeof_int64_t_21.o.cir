!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":24:28)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":24:38)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":58:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":58:43)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":88:33)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":88:43)
#loc163 = loc(fused[#loc9, #loc10])
#loc187 = loc(fused[#loc68, #loc69])
#loc205 = loc(fused[#loc117, #loc118])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc159)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc160)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc161)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc11)
    cir.br ^bb1 loc(#loc164)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc159)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc165)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc16)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc166)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc167)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc168)
    cir.br ^bb3 loc(#loc169)
  ^bb3:  // pred: ^bb2
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc23)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc24)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc170)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc171)
  ^bb4:  // pred: ^bb3
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc28)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
    cir.br ^bb5 loc(#loc22)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    %16 = cir.const #cir.int<2147483643> : !s64i loc(#loc29)
    %17 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc30)
    cir.store %16, %17 : !s64i, !cir.ptr<!s64i> loc(#loc172)
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
    cir.store %18, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc173)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc173)
    cir.return %19 : !cir.ptr<!s64i> loc(#loc173)
  } loc(#loc162)
  cir.func private @printLongLongLine(!s64i) loc(#loc174)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc175)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc177)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc42)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc178)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc159)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc46)
    %5 = cir.call @badSource(%4) : (!cir.ptr<!s64i>) -> !cir.ptr<!s64i> loc(#loc47)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc180)
    %6 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc50)
    %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc51)
    cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc52)
    %8 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc53)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc54)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc54)
    cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    cir.return loc(#loc39)
  } loc(#loc176)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc182)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc183)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc181)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc184)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s64i> loc(fused[#loc68, #loc69])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc67)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc70)
    cir.br ^bb1 loc(#loc188)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc184)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc189)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb8 loc(#loc75)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc78)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc190)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc191)
    cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc192)
    cir.br ^bb4 loc(#loc193)
  ^bb4:  // pred: ^bb3
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc85)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc86)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s64i>, !cir.bool loc(#loc194)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc195)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc88)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc90)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
    cir.br ^bb6 loc(#loc84)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc84)
  ^bb7:  // pred: ^bb6
    %18 = cir.const #cir.int<2147483643> : !s64i loc(#loc91)
    %19 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc92)
    cir.store %18, %19 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    cir.br ^bb8 loc(#loc72)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc72)
  ^bb9:  // pred: ^bb8
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc94)
    cir.store %20, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc197)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc197)
    cir.return %21 : !cir.ptr<!s64i> loc(#loc197)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc100)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc200)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %3 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc184)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc104)
    %5 = cir.call @goodG2B1Source(%4) : (!cir.ptr<!s64i>) -> !cir.ptr<!s64i> loc(#loc105)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc202)
    %6 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc108)
    %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc109)
    cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc110)
    %8 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc111)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc112)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc112)
    cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc111)
    cir.return loc(#loc97)
  } loc(#loc198)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc203)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s64i> loc(fused[#loc117, #loc118])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc116)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc119)
    cir.br ^bb1 loc(#loc206)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc203)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc207)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc124)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc208)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc124)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc209)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc210)
    cir.br ^bb3 loc(#loc211)
  ^bb3:  // pred: ^bb2
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc131)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc132)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc132)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc212)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc213)
  ^bb4:  // pred: ^bb3
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc134)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc136)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc134)
    cir.br ^bb5 loc(#loc130)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc130)
  ^bb6:  // pred: ^bb5
    %16 = cir.const #cir.int<2147483643> : !s64i loc(#loc137)
    %17 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc138)
    cir.store %16, %17 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    cir.br ^bb7 loc(#loc121)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc121)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc140)
    cir.store %18, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc215)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc215)
    cir.return %19 : !cir.ptr<!s64i> loc(#loc215)
  } loc(#loc204)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc217)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc146)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc218)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %3 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc203)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc150)
    %5 = cir.call @goodG2B2Source(%4) : (!cir.ptr<!s64i>) -> !cir.ptr<!s64i> loc(#loc151)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc220)
    %6 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc154)
    %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc155)
    cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc156)
    %8 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc157)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc158)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc158)
    cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc157)
    cir.return loc(#loc143)
  } loc(#loc216)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":22:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":26:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":30:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":30:34)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":30:45)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":30:46)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":30:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":31:37)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":31:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":31:21)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":31:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":31:28)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":31:34)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":31:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":32:17)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":32:10)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":32:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":34:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":34:5)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc36 = loc("/usr/include/stdlib.h":687:1)
#loc37 = loc("/usr/include/stdlib.h":687:32)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":37:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":47:1)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":39:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":39:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":41:12)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":41:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":42:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":43:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":43:12)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":43:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":43:26)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":45:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":45:23)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":45:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":46:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":46:10)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":112:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":116:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":114:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":114:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":115:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":115:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":54:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":54:29)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":63:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":58:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":73:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":59:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":60:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":71:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":60:8)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":61:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":64:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":66:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":63:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":68:27)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":68:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":68:46)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":68:47)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":68:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":69:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":69:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":69:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":69:21)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":69:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":69:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":69:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":69:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":70:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":70:10)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":70:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":72:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":72:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":75:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":85:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":77:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":77:15)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":79:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":79:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":80:22)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":80:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":81:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":81:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":81:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":81:31)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":83:24)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":83:23)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":83:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":84:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":84:10)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":55:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":55:29)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":88:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":98:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":89:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":90:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":96:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":90:8)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":91:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":93:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":93:34)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":93:46)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":93:47)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":93:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":94:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":94:37)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":94:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":94:21)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":94:27)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":94:28)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":94:34)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":94:33)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":95:17)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":95:10)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":95:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":97:12)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":97:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":100:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":110:1)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":102:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":102:15)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":104:12)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":104:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":105:22)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":105:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":106:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":106:12)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":106:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":106:31)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":108:24)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":108:23)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":108:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":109:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c":109:10)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc12, #loc13])
#loc165 = loc(fused[#loc15, #loc13])
#loc166 = loc(fused[#loc17, #loc18])
#loc167 = loc(fused[#loc16, #loc19])
#loc168 = loc(fused[#loc20, #loc19])
#loc169 = loc(fused[#loc21, #loc22])
#loc170 = loc(fused[#loc23, #loc24])
#loc171 = loc(fused[#loc25, #loc22])
#loc172 = loc(fused[#loc31, #loc29])
#loc173 = loc(fused[#loc33, #loc32])
#loc174 = loc(fused[#loc34, #loc35])
#loc175 = loc(fused[#loc36, #loc37])
#loc176 = loc(fused[#loc38, #loc39])
#loc177 = loc(fused[#loc40, #loc41])
#loc178 = loc(fused[#loc43, #loc42])
#loc179 = loc(fused[#loc45, #loc44])
#loc180 = loc(fused[#loc48, #loc49])
#loc181 = loc(fused[#loc55, #loc56])
#loc182 = loc(fused[#loc57, #loc58])
#loc183 = loc(fused[#loc59, #loc60])
#loc184 = loc(fused[#loc61, #loc62])
#loc185 = loc(fused[#loc63, #loc64])
#loc186 = loc(fused[#loc66, #loc67])
#loc188 = loc(fused[#loc71, #loc72])
#loc189 = loc(fused[#loc74, #loc75, #loc76, #loc72])
#loc190 = loc(fused[#loc79, #loc80])
#loc191 = loc(fused[#loc78, #loc81])
#loc192 = loc(fused[#loc82, #loc81])
#loc193 = loc(fused[#loc83, #loc84])
#loc194 = loc(fused[#loc85, #loc86])
#loc195 = loc(fused[#loc87, #loc84])
#loc196 = loc(fused[#loc93, #loc91])
#loc197 = loc(fused[#loc95, #loc94])
#loc198 = loc(fused[#loc96, #loc97])
#loc199 = loc(fused[#loc98, #loc99])
#loc200 = loc(fused[#loc101, #loc100])
#loc201 = loc(fused[#loc103, #loc102])
#loc202 = loc(fused[#loc106, #loc107])
#loc203 = loc(fused[#loc113, #loc114])
#loc204 = loc(fused[#loc115, #loc116])
#loc206 = loc(fused[#loc120, #loc121])
#loc207 = loc(fused[#loc123, #loc121])
#loc208 = loc(fused[#loc125, #loc126])
#loc209 = loc(fused[#loc124, #loc127])
#loc210 = loc(fused[#loc128, #loc127])
#loc211 = loc(fused[#loc129, #loc130])
#loc212 = loc(fused[#loc131, #loc132])
#loc213 = loc(fused[#loc133, #loc130])
#loc214 = loc(fused[#loc139, #loc137])
#loc215 = loc(fused[#loc141, #loc140])
#loc216 = loc(fused[#loc142, #loc143])
#loc217 = loc(fused[#loc144, #loc145])
#loc218 = loc(fused[#loc147, #loc146])
#loc219 = loc(fused[#loc149, #loc148])
#loc220 = loc(fused[#loc152, #loc153])
