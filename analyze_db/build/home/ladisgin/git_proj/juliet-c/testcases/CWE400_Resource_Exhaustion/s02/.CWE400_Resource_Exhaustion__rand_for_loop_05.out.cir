!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":184:10)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":184:14)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":184:20)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":184:32)
#true = #cir.bool<true> : !cir.bool
#loc262 = loc(fused[#loc60, #loc61])
#loc263 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc236)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc237)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc236)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc19)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc19)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc19)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc19)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc19)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc19)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc19)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc19)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc19)
          cir.yield %23 : !u32i loc(#loc19)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc19)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc19)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc19)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc19)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc19)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc19)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc19)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc19)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc19)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc19)
          cir.yield %27 : !u32i loc(#loc19)
        }) : (!cir.bool) -> !u32i loc(#loc19)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc19)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
      } loc(#loc243)
    } loc(#loc242)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc236)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc248)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc28)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc248)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc31)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc250)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc251)
              cir.condition(%14) loc(#loc35)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc7)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc37)
              } loc(#loc252)
              cir.yield loc(#loc30)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc38)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc39)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc253)
              cir.yield loc(#loc249)
            } loc(#loc249)
          } loc(#loc249)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc245)
    cir.return loc(#loc9)
  } loc(#loc239)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc255)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc256)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc257)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc254)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc259)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc260)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc262)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc263)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc264)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_05_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_05_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc266)
    cir.return %17 : !s32i loc(#loc266)
  } loc(#loc261)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc267)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc86)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc236)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc90)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc90)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc92)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc92)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc92)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc92)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc92)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc92)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc92)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc92)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc92)
          cir.yield %23 : !u32i loc(#loc92)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc92)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc92)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc92)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc92)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc92)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc92)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc92)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc92)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc92)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc92)
          cir.yield %27 : !u32i loc(#loc92)
        }) : (!cir.bool) -> !u32i loc(#loc92)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc92)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
      } loc(#loc272)
    } loc(#loc271)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc267)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc96)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc100)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc277)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc104)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc104)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc277)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc108)
            %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc279)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %14 = cir.const #cir.int<20> : !s32i loc(#loc111)
              %15 = cir.cmp(le, %13, %14) : !s32i, !cir.bool loc(#loc280)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc109)
                cir.yield %17 : !cir.bool loc(#loc109)
              }, false {
                %17 = cir.const #false loc(#loc109)
                cir.yield %17 : !cir.bool loc(#loc109)
              }) : (!cir.bool) -> !cir.bool loc(#loc109)
              cir.yield %16 : !cir.bool loc(#loc109)
            }, false {
              %13 = cir.const #false loc(#loc109)
              cir.yield %13 : !cir.bool loc(#loc109)
            }) : (!cir.bool) -> !cir.bool loc(#loc109)
            cir.if %12 {
              cir.scope {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc115)
                %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc115)
                cir.store %14, %6 : !u64i, !cir.ptr<!u64i> loc(#loc283)
                cir.for : cond {
                  %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc117)
                  %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                  %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc118)
                  %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc284)
                  cir.condition(%18) loc(#loc119)
                } body {
                  cir.scope {
                    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc121)
                    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc121)
                    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc122)
                  } loc(#loc285)
                  cir.yield loc(#loc114)
                } step {
                  %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc123)
                  %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc124)
                  cir.store %16, %6 : !u64i, !cir.ptr<!u64i> loc(#loc286)
                  cir.yield loc(#loc282)
                } loc(#loc282)
              } loc(#loc282)
            } loc(#loc281)
          } loc(#loc278)
        } loc(#loc276)
      } loc(#loc275)
    } loc(#loc274)
    cir.return loc(#loc82)
  } loc(#loc268)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc288)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc130)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc289)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc236)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc134)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc134)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc136)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc136)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc136)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc136)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc136)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc136)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc136)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc136)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc136)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc136)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc136)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc136)
          cir.yield %23 : !u32i loc(#loc136)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc136)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc136)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc136)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc136)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc136)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc136)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc136)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc136)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc136)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc136)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc136)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc136)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc136)
          cir.yield %27 : !u32i loc(#loc136)
        }) : (!cir.bool) -> !u32i loc(#loc136)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc136)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
      } loc(#loc291)
    } loc(#loc290)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc236)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc140)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc140)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc296)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc145)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc145)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc296)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc149)
            %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc298)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %14 = cir.const #cir.int<20> : !s32i loc(#loc152)
              %15 = cir.cmp(le, %13, %14) : !s32i, !cir.bool loc(#loc299)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc150)
                cir.yield %17 : !cir.bool loc(#loc150)
              }, false {
                %17 = cir.const #false loc(#loc150)
                cir.yield %17 : !cir.bool loc(#loc150)
              }) : (!cir.bool) -> !cir.bool loc(#loc150)
              cir.yield %16 : !cir.bool loc(#loc150)
            }, false {
              %13 = cir.const #false loc(#loc150)
              cir.yield %13 : !cir.bool loc(#loc150)
            }) : (!cir.bool) -> !cir.bool loc(#loc150)
            cir.if %12 {
              cir.scope {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc156)
                %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc156)
                cir.store %14, %6 : !u64i, !cir.ptr<!u64i> loc(#loc302)
                cir.for : cond {
                  %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc158)
                  %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                  %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc159)
                  %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc303)
                  cir.condition(%18) loc(#loc160)
                } body {
                  cir.scope {
                    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc162)
                    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc162)
                    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc163)
                  } loc(#loc304)
                  cir.yield loc(#loc155)
                } step {
                  %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc164)
                  %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc165)
                  cir.store %16, %6 : !u64i, !cir.ptr<!u64i> loc(#loc305)
                  cir.yield loc(#loc301)
                } loc(#loc301)
              } loc(#loc301)
            } loc(#loc300)
          } loc(#loc297)
        } loc(#loc295)
      } loc(#loc294)
    } loc(#loc293)
    cir.return loc(#loc126)
  } loc(#loc287)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc307)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc171)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc267)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc175)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc175)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc179)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc179)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc180)
      } else {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc181)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
      } loc(#loc310)
    } loc(#loc309)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc236)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc185)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc185)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc315)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc190)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc190)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc315)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc193)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc193)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc317)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc195)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc196)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc318)
              cir.condition(%14) loc(#loc197)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc199)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc199)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc200)
              } loc(#loc319)
              cir.yield loc(#loc192)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc201)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc202)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc320)
              cir.yield loc(#loc316)
            } loc(#loc316)
          } loc(#loc316)
        } loc(#loc314)
      } loc(#loc313)
    } loc(#loc312)
    cir.return loc(#loc167)
  } loc(#loc306)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc322)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc207)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc208)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc323)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc236)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc212)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc212)
      cir.if %5 {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc214)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc326)
      } loc(#loc325)
    } loc(#loc324)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc236)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc218)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc218)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc330)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc223)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc223)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc330)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc226)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc226)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc332)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc228)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc229)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc229)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc333)
              cir.condition(%14) loc(#loc230)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc232)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc232)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc233)
              } loc(#loc334)
              cir.yield loc(#loc225)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc234)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc235)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc335)
              cir.yield loc(#loc331)
            } loc(#loc331)
          } loc(#loc331)
        } loc(#loc329)
      } loc(#loc328)
    } loc(#loc327)
    cir.return loc(#loc204)
  } loc(#loc321)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_05.c":0:0)
#loc1 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":23:1)
#loc2 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":45:27)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":28:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":49:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":30:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":30:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":32:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":32:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":32:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":33:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":37:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":33:8)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":34:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":36:17)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":36:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":38:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":48:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":38:8)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":39:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":40:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":47:9)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":41:13)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":41:24)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":43:13)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":46:13)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":43:22)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":43:18)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":43:25)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":43:37)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":43:27)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":44:13)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":45:17)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":43:45)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":43:44)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":167:1)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":173:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":169:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":169:14)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":170:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":170:14)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":171:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":171:14)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":172:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":172:14)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":189:15)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":191:15)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":194:15)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":196:15)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":184:1)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":199:1)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":185:1)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":187:27)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":187:22)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":187:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":189:5)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":190:5)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":190:55)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":191:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":194:5)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":195:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":195:54)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":196:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":198:12)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":198:5)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":24:1)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":24:26)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":69:19)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":56:1)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":85:1)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":58:5)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":58:9)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":60:14)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":60:13)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":60:5)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":61:5)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":65:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":61:8)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":62:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":64:17)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":64:9)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":66:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":84:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":66:8)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":67:5)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":70:5)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":72:5)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":69:9)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":73:9)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":83:9)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":74:13)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":74:24)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":76:13)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":82:13)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":76:17)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":76:25)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":76:27)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":76:30)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":76:39)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":77:13)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":78:17)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":81:17)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":78:26)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":78:22)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":78:29)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":78:41)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":78:31)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":79:17)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":80:31)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":80:21)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":78:49)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":78:48)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":88:1)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":112:1)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":90:5)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":90:9)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":92:14)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":92:13)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":92:5)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":93:5)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":97:5)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":93:8)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":94:5)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":96:17)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":96:9)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":98:5)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":111:5)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":98:8)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":99:5)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":100:9)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":110:9)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":101:13)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":101:24)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":103:13)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":109:13)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":103:17)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":103:25)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":103:27)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":103:30)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":103:39)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":104:13)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":105:17)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":108:17)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":105:26)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":105:22)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":105:29)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":105:41)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":105:31)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":106:17)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":107:31)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":107:21)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":105:49)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":105:48)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":115:1)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":141:1)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":117:5)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":117:9)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":119:14)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":119:13)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":119:5)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":120:5)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":129:5)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":120:8)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":121:5)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":124:5)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":126:5)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":123:19)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":123:9)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":128:17)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":128:9)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":130:5)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":140:5)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":130:8)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":131:5)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":132:9)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":139:9)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":133:13)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":133:24)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":135:13)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":138:13)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":135:22)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":135:18)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":135:25)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":135:37)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":135:27)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":136:13)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":137:27)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":137:17)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":135:45)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":135:44)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":144:1)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":165:1)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":146:5)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":146:9)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":148:14)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":148:13)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":148:5)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":149:5)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":153:5)
#loc212 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":149:8)
#loc213 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":150:5)
#loc214 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":152:17)
#loc215 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":152:9)
#loc216 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":154:5)
#loc217 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":164:5)
#loc218 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":154:8)
#loc219 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":155:5)
#loc220 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":156:9)
#loc221 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":163:9)
#loc222 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":157:13)
#loc223 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":157:24)
#loc224 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":159:13)
#loc225 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":162:13)
#loc226 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":159:22)
#loc227 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":159:18)
#loc228 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":159:25)
#loc229 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":159:37)
#loc230 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":159:27)
#loc231 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":160:13)
#loc232 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":161:27)
#loc233 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":161:17)
#loc234 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":159:45)
#loc235 = loc("CWE400_Resource_Exhaustion__rand_for_loop_05.c":159:44)
#loc236 = loc(fused[#loc1, #loc2])
#loc237 = loc(fused[#loc3, #loc4])
#loc238 = loc(fused[#loc5, #loc6])
#loc239 = loc(fused[#loc8, #loc9])
#loc240 = loc(fused[#loc10, #loc11])
#loc241 = loc(fused[#loc14, #loc12])
#loc242 = loc(fused[#loc15, #loc16])
#loc243 = loc(fused[#loc18, #loc16])
#loc244 = loc(fused[#loc20, #loc19])
#loc245 = loc(fused[#loc21, #loc22])
#loc246 = loc(fused[#loc24, #loc22])
#loc247 = loc(fused[#loc25, #loc26])
#loc248 = loc(fused[#loc27, #loc28])
#loc249 = loc(fused[#loc29, #loc30])
#loc250 = loc(fused[#loc32, #loc31])
#loc251 = loc(fused[#loc33, #loc34])
#loc252 = loc(fused[#loc36, #loc30])
#loc253 = loc(fused[#loc39, #loc38])
#loc254 = loc(fused[#loc40, #loc41])
#loc255 = loc(fused[#loc42, #loc43])
#loc256 = loc(fused[#loc44, #loc45])
#loc257 = loc(fused[#loc46, #loc47])
#loc258 = loc(fused[#loc48, #loc49])
#loc259 = loc(fused[#loc50, #loc51])
#loc260 = loc(fused[#loc52, #loc53])
#loc261 = loc(fused[#loc58, #loc59])
#loc264 = loc(fused[#loc69, #loc70])
#loc265 = loc(fused[#loc73, #loc74])
#loc266 = loc(fused[#loc77, #loc76])
#loc267 = loc(fused[#loc78, #loc79])
#loc268 = loc(fused[#loc81, #loc82])
#loc269 = loc(fused[#loc83, #loc84])
#loc270 = loc(fused[#loc87, #loc85])
#loc271 = loc(fused[#loc88, #loc89])
#loc272 = loc(fused[#loc91, #loc89])
#loc273 = loc(fused[#loc93, #loc92])
#loc274 = loc(fused[#loc94, #loc95])
#loc275 = loc(fused[#loc97, #loc98, #loc99, #loc95])
#loc276 = loc(fused[#loc101, #loc102])
#loc277 = loc(fused[#loc103, #loc104])
#loc278 = loc(fused[#loc105, #loc106])
#loc279 = loc(fused[#loc107, #loc108])
#loc280 = loc(fused[#loc110, #loc111])
#loc281 = loc(fused[#loc112, #loc106])
#loc282 = loc(fused[#loc113, #loc114])
#loc283 = loc(fused[#loc116, #loc115])
#loc284 = loc(fused[#loc117, #loc118])
#loc285 = loc(fused[#loc120, #loc114])
#loc286 = loc(fused[#loc124, #loc123])
#loc287 = loc(fused[#loc125, #loc126])
#loc288 = loc(fused[#loc127, #loc128])
#loc289 = loc(fused[#loc131, #loc129])
#loc290 = loc(fused[#loc132, #loc133])
#loc291 = loc(fused[#loc135, #loc133])
#loc292 = loc(fused[#loc137, #loc136])
#loc293 = loc(fused[#loc138, #loc139])
#loc294 = loc(fused[#loc141, #loc139])
#loc295 = loc(fused[#loc142, #loc143])
#loc296 = loc(fused[#loc144, #loc145])
#loc297 = loc(fused[#loc146, #loc147])
#loc298 = loc(fused[#loc148, #loc149])
#loc299 = loc(fused[#loc151, #loc152])
#loc300 = loc(fused[#loc153, #loc147])
#loc301 = loc(fused[#loc154, #loc155])
#loc302 = loc(fused[#loc157, #loc156])
#loc303 = loc(fused[#loc158, #loc159])
#loc304 = loc(fused[#loc161, #loc155])
#loc305 = loc(fused[#loc165, #loc164])
#loc306 = loc(fused[#loc166, #loc167])
#loc307 = loc(fused[#loc168, #loc169])
#loc308 = loc(fused[#loc172, #loc170])
#loc309 = loc(fused[#loc173, #loc174])
#loc310 = loc(fused[#loc176, #loc177, #loc178, #loc174])
#loc311 = loc(fused[#loc182, #loc181])
#loc312 = loc(fused[#loc183, #loc184])
#loc313 = loc(fused[#loc186, #loc184])
#loc314 = loc(fused[#loc187, #loc188])
#loc315 = loc(fused[#loc189, #loc190])
#loc316 = loc(fused[#loc191, #loc192])
#loc317 = loc(fused[#loc194, #loc193])
#loc318 = loc(fused[#loc195, #loc196])
#loc319 = loc(fused[#loc198, #loc192])
#loc320 = loc(fused[#loc202, #loc201])
#loc321 = loc(fused[#loc203, #loc204])
#loc322 = loc(fused[#loc205, #loc206])
#loc323 = loc(fused[#loc209, #loc207])
#loc324 = loc(fused[#loc210, #loc211])
#loc325 = loc(fused[#loc213, #loc211])
#loc326 = loc(fused[#loc215, #loc214])
#loc327 = loc(fused[#loc216, #loc217])
#loc328 = loc(fused[#loc219, #loc217])
#loc329 = loc(fused[#loc220, #loc221])
#loc330 = loc(fused[#loc222, #loc223])
#loc331 = loc(fused[#loc224, #loc225])
#loc332 = loc(fused[#loc227, #loc226])
#loc333 = loc(fused[#loc228, #loc229])
#loc334 = loc(fused[#loc231, #loc225])
#loc335 = loc(fused[#loc235, #loc234])
