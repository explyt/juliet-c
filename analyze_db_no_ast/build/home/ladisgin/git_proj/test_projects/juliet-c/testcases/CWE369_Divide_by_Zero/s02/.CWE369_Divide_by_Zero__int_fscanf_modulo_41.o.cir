!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":22:21)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":22:25)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":60:25)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":60:29)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":43:25)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":43:29)
#loc88 = loc(fused[#loc10, #loc11])
#loc98 = loc(fused[#loc38, #loc39])
#loc107 = loc(fused[#loc67, #loc68])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc84)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc85)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printIntLine(!s32i) loc(#loc86)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc10, #loc11])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc88)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc12)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc13)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc89)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc15)
    cir.return loc(#loc9)
  } loc(#loc87)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_modulo_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc21)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc23)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc85)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc23)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @badSink(%9) : (!s32i) -> () loc(#loc26)
    cir.return loc(#loc17)
  } loc(#loc90)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_modulo_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc93)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc35)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc98)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc40)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !s32i loc(#loc100)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc49)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
        %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc102)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc51)
      } else {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc35)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc52)
      } loc(#loc101)
    } loc(#loc99)
    cir.return loc(#loc37)
  } loc(#loc97)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc58)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc60)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc85)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc61)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc62)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc60)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.call @goodB2GSink(%9) : (!s32i) -> () loc(#loc64)
    cir.return loc(#loc54)
  } loc(#loc103)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc67, #loc68])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc107)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc70)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc108)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc72)
    cir.return loc(#loc66)
  } loc(#loc106)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc78)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc80)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc83)
    cir.return loc(#loc74)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":34:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":26:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":23:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":25:18)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":25:24)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":25:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":28:1)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":36:1)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":30:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":30:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":32:13)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":32:12)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":32:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":34:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":34:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":35:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":35:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":83:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":87:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":85:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":85:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":86:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":86:13)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":69:19)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":60:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":71:1)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":61:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":63:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":70:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":63:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":63:17)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":63:14)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":64:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":66:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":68:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":65:22)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":65:28)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":65:9)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":69:9)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":73:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":81:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":75:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":75:9)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":77:13)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":77:12)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":77:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":79:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":79:12)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":79:19)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":80:17)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":80:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":43:1)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":47:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":44:1)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":46:18)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":46:24)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":46:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":49:1)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":57:1)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":51:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":51:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":53:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":53:12)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":53:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":55:12)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":55:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":56:17)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_41.c":56:5)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc6, #loc7])
#loc87 = loc(fused[#loc8, #loc9])
#loc89 = loc(fused[#loc13, #loc14])
#loc90 = loc(fused[#loc16, #loc17])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc22, #loc20])
#loc93 = loc(fused[#loc27, #loc28])
#loc94 = loc(fused[#loc29, #loc30])
#loc95 = loc(fused[#loc31, #loc32])
#loc96 = loc(fused[#loc33, #loc34])
#loc97 = loc(fused[#loc36, #loc37])
#loc99 = loc(fused[#loc41, #loc42])
#loc100 = loc(fused[#loc43, #loc44])
#loc101 = loc(fused[#loc46, #loc47, #loc48, #loc42])
#loc102 = loc(fused[#loc49, #loc50])
#loc103 = loc(fused[#loc53, #loc54])
#loc104 = loc(fused[#loc55, #loc56])
#loc105 = loc(fused[#loc59, #loc57])
#loc106 = loc(fused[#loc65, #loc66])
#loc108 = loc(fused[#loc70, #loc71])
#loc109 = loc(fused[#loc73, #loc74])
#loc110 = loc(fused[#loc75, #loc76])
#loc111 = loc(fused[#loc79, #loc77])
#loc112 = loc(fused[#loc81, #loc80])
