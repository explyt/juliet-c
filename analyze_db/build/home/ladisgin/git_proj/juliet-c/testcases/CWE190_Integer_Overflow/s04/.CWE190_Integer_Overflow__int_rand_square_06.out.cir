!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":37:16)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":174:10)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":174:14)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":174:20)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":174:32)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":62:16)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:28)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":93:16)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:28)
#true = #cir.bool<true> : !cir.bool
#loc228 = loc(fused[#loc52, #loc53])
#loc229 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc205)
  cir.func private @printIntLine(!s32i) loc(#loc206)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc15)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc16)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc212)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc18)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc18)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc18)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc18)
    cir.br ^bb5(%21 : !u32i) loc(#loc18)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc18)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc18)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc18)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc18)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc18)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc18)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc18)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc18)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc18)
    cir.br ^bb5(%37 : !u32i) loc(#loc18)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__int_rand_square_06.c":37:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc18)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc215)
  ^bb9:  // pred: ^bb8
    %40 = cir.const #cir.int<5> : !s32i loc(#loc22)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc23)
    %42 = cir.cmp(eq, %40, %41) : !s32i, !cir.bool loc(#loc216)
    cir.brcond %42 ^bb10, ^bb13 loc(#loc217)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc218)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %45 = cir.binop(mul, %43, %44) nsw : !s32i loc(#loc27)
    cir.store %45, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc29)
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc21)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc21)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc6)
  } loc(#loc207)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc219)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc224)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc225)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc59)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_rand_square_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call @CWE190_Integer_Overflow__int_rand_square_06_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_rand_square_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call @CWE190_Integer_Overflow__int_rand_square_06_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.return %17 : !s32i loc(#loc232)
  } loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc70)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.br ^bb1 loc(#loc237)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc83)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc84)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc238)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc239)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc86)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc86)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc86)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc86)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc86)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc86)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc86)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc86)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc86)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc86)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc86)
    cir.br ^bb5(%21 : !u32i) loc(#loc86)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc86)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc86)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc86)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc86)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc86)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc86)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc86)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc86)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc86)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc86)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc86)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc86)
    cir.br ^bb5(%37 : !u32i) loc(#loc86)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__int_rand_square_06.c":62:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc86)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc86)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.br ^bb7 loc(#loc82)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc241)
  ^bb9:  // pred: ^bb8
    %40 = cir.const #cir.int<5> : !s32i loc(#loc90)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc91)
    %42 = cir.cmp(ne, %40, %41) : !s32i, !cir.bool loc(#loc242)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc243)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb25 loc(#loc93)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc244)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %46 = cir.const #cir.int<2147483647> : !s32i loc(#loc99)
    %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc99)
    %48 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %49 = cir.binop(sub, %47, %48) nsw : !s32i loc(#loc99)
    %50 = cir.cmp(gt, %45, %49) : !s32i, !cir.bool loc(#loc245)
    cir.brcond %50 ^bb13, ^bb18 loc(#loc100)
  ^bb13:  // pred: ^bb12
    %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %52 = cir.abs %51 poison : !s32i loc(#loc102)
    %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc102)
    %54 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc103)
    %55 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
    %56 = cir.cast(int_to_float, %55 : !s32i), !cir.double loc(#loc104)
    %57 = cir.call @sqrt(%56) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc103)
    %58 = cir.cast(float_to_int, %57 : !cir.double), !s64i loc(#loc103)
    %59 = cir.cmp(lt, %53, %58) : !s64i, !cir.bool loc(#loc246)
    cir.brcond %59 ^bb14, ^bb15 loc(#loc100)
  ^bb14:  // pred: ^bb13
    %60 = cir.const #true loc(#loc100)
    cir.br ^bb16(%60 : !cir.bool) loc(#loc100)
  ^bb15:  // pred: ^bb13
    %61 = cir.const #false loc(#loc100)
    cir.br ^bb16(%61 : !cir.bool) loc(#loc100)
  ^bb16(%62: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:28)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc100)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19(%62 : !cir.bool) loc(#loc100)
  ^bb18:  // pred: ^bb12
    %63 = cir.const #false loc(#loc100)
    cir.br ^bb19(%63 : !cir.bool) loc(#loc100)
  ^bb19(%64: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:28)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc100)
  ^bb20:  // pred: ^bb19
    cir.brcond %64 ^bb21, ^bb22 loc(#loc247)
  ^bb21:  // pred: ^bb20
    %65 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %66 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    %67 = cir.binop(mul, %65, %66) nsw : !s32i loc(#loc109)
    cir.store %67, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %68 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    cir.call @printIntLine(%68) : (!s32i) -> () loc(#loc111)
    cir.br ^bb23 loc(#loc107)
  ^bb22:  // pred: ^bb20
    %69 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc72)
    %70 = cir.cast(array_to_ptrdecay, %69 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%70) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.br ^bb23 loc(#loc97)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc97)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc89)
  ^bb25:  // 2 preds: ^bb10, ^bb24
    cir.br ^bb26 loc(#loc89)
  ^bb26:  // pred: ^bb25
    cir.return loc(#loc74)
  } loc(#loc233)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc250)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc119)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc123)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc124)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc253)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc254)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc126)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc126)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc126)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc126)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc126)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc126)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc126)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc126)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc126)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc126)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc126)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc126)
    cir.br ^bb5(%21 : !u32i) loc(#loc126)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc126)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc126)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc126)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc126)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc126)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc126)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc126)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc126)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc126)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc126)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc126)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc126)
    cir.br ^bb5(%37 : !u32i) loc(#loc126)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__int_rand_square_06.c":93:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc126)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc126)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    cir.br ^bb7 loc(#loc122)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc256)
  ^bb9:  // pred: ^bb8
    %40 = cir.const #cir.int<5> : !s32i loc(#loc130)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc131)
    %42 = cir.cmp(eq, %40, %41) : !s32i, !cir.bool loc(#loc257)
    cir.brcond %42 ^bb10, ^bb24 loc(#loc258)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc259)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    %44 = cir.const #cir.int<2147483647> : !s32i loc(#loc136)
    %45 = cir.unary(minus, %44) : !s32i, !s32i loc(#loc136)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %47 = cir.binop(sub, %45, %46) nsw : !s32i loc(#loc136)
    %48 = cir.cmp(gt, %43, %47) : !s32i, !cir.bool loc(#loc260)
    cir.brcond %48 ^bb12, ^bb17 loc(#loc137)
  ^bb12:  // pred: ^bb11
    %49 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %50 = cir.abs %49 poison : !s32i loc(#loc139)
    %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc139)
    %52 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc140)
    %53 = cir.const #cir.int<2147483647> : !s32i loc(#loc141)
    %54 = cir.cast(int_to_float, %53 : !s32i), !cir.double loc(#loc141)
    %55 = cir.call @sqrt(%54) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc140)
    %56 = cir.cast(float_to_int, %55 : !cir.double), !s64i loc(#loc140)
    %57 = cir.cmp(lt, %51, %56) : !s64i, !cir.bool loc(#loc261)
    cir.brcond %57 ^bb13, ^bb14 loc(#loc137)
  ^bb13:  // pred: ^bb12
    %58 = cir.const #true loc(#loc137)
    cir.br ^bb15(%58 : !cir.bool) loc(#loc137)
  ^bb14:  // pred: ^bb12
    %59 = cir.const #false loc(#loc137)
    cir.br ^bb15(%59 : !cir.bool) loc(#loc137)
  ^bb15(%60: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc137)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18(%60 : !cir.bool) loc(#loc137)
  ^bb17:  // pred: ^bb11
    %61 = cir.const #false loc(#loc137)
    cir.br ^bb18(%61 : !cir.bool) loc(#loc137)
  ^bb18(%62: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:28)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc137)
  ^bb19:  // pred: ^bb18
    cir.brcond %62 ^bb20, ^bb21 loc(#loc262)
  ^bb20:  // pred: ^bb19
    %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %64 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %65 = cir.binop(mul, %63, %64) nsw : !s32i loc(#loc146)
    cir.store %65, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    %66 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.call @printIntLine(%66) : (!s32i) -> () loc(#loc148)
    cir.br ^bb22 loc(#loc144)
  ^bb21:  // pred: ^bb19
    %67 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc149)
    %68 = cir.cast(array_to_ptrdecay, %67 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc149)
    cir.call @printLine(%68) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    cir.br ^bb22 loc(#loc134)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc134)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc129)
  ^bb24:  // 2 preds: ^bb9, ^bb23
    cir.br ^bb25 loc(#loc129)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc114)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc264)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc265)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc157)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.br ^bb1 loc(#loc267)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc161)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc162)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc268)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc269)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc166)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc166)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc167)
    cir.br ^bb4 loc(#loc164)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc168)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.br ^bb4 loc(#loc160)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc160)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc271)
  ^bb6:  // pred: ^bb5
    %9 = cir.const #cir.int<5> : !s32i loc(#loc172)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc173)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc272)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc273)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc274)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc177)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc179)
    cir.br ^bb9 loc(#loc176)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc171)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc171)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc152)
  } loc(#loc263)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc276)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc277)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc186)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    cir.br ^bb1 loc(#loc279)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc190)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc191)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc280)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc281)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc193)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.br ^bb3 loc(#loc189)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc189)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc283)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc197)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc198)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc284)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc285)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc286)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc183)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc202)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc204)
    cir.br ^bb8 loc(#loc201)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc196)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc196)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc181)
  } loc(#loc275)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":29:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":47:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":43:13)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":43:33)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":31:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":31:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":33:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":33:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":34:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":38:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":34:8)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":34:27)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":35:5)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":37:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":39:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":46:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":39:8)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":39:27)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":40:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":41:9)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":45:9)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":43:26)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":44:26)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":44:13)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":157:1)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":163:1)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":159:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":159:14)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":160:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":160:14)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":161:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":161:14)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":162:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":162:14)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":179:15)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":181:15)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":184:15)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":186:15)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":174:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":189:1)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":175:1)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":177:27)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":177:22)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":177:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":179:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":180:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":180:54)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":181:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":184:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":185:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":185:53)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":186:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":188:12)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":188:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":67:19)
#loc71 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":79:23)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":54:1)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":82:1)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":74:13)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":74:33)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":56:5)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":56:9)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":58:12)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":58:5)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":59:5)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":63:5)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":59:8)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":59:27)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":60:5)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":62:9)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":64:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":81:5)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":64:8)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":64:27)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":65:5)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":68:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":70:5)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":67:9)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":80:9)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:13)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:20)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:35)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:31)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:49)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:62)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":72:69)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":73:9)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":76:9)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":78:9)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":74:26)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":75:26)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":75:13)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":79:13)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":85:1)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":108:1)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":100:13)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":100:33)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":87:5)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":87:9)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":89:12)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":89:5)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":90:5)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":94:5)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":90:8)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":90:27)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":91:5)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":93:9)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":95:5)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":107:5)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":95:8)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":95:27)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":96:5)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:9)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":106:9)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:13)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:20)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:35)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:31)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:49)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:62)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":98:69)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":99:9)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":102:9)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":104:9)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":100:26)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":101:26)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":101:13)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":105:23)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":105:13)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":111:1)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":134:1)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":130:13)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":130:33)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":113:5)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":113:9)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":115:12)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":115:5)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":116:5)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":125:5)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":116:8)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":116:27)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":117:5)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":120:5)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":122:5)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":119:19)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":119:9)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":124:16)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":124:9)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":126:5)
#loc171 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":133:5)
#loc172 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":126:8)
#loc173 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":126:27)
#loc174 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":127:5)
#loc175 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":128:9)
#loc176 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":132:9)
#loc177 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":130:26)
#loc178 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":131:26)
#loc179 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":131:13)
#loc180 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":137:1)
#loc181 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":155:1)
#loc182 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":151:13)
#loc183 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":151:33)
#loc184 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":139:5)
#loc185 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":139:9)
#loc186 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":141:12)
#loc187 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":141:5)
#loc188 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":142:5)
#loc189 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":146:5)
#loc190 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":142:8)
#loc191 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":142:27)
#loc192 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":143:5)
#loc193 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":145:16)
#loc194 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":145:9)
#loc195 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":147:5)
#loc196 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":154:5)
#loc197 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":147:8)
#loc198 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":147:27)
#loc199 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":148:5)
#loc200 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":149:9)
#loc201 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":153:9)
#loc202 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":151:26)
#loc203 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":152:26)
#loc204 = loc("CWE190_Integer_Overflow__int_rand_square_06.c":152:13)
#loc205 = loc(fused[#loc1, #loc2])
#loc206 = loc(fused[#loc3, #loc4])
#loc207 = loc(fused[#loc5, #loc6])
#loc208 = loc(fused[#loc7, #loc8])
#loc209 = loc(fused[#loc9, #loc10])
#loc210 = loc(fused[#loc12, #loc11])
#loc211 = loc(fused[#loc13, #loc14])
#loc212 = loc(fused[#loc15, #loc16])
#loc213 = loc(fused[#loc17, #loc14])
#loc214 = loc(fused[#loc19, #loc18])
#loc215 = loc(fused[#loc20, #loc21])
#loc216 = loc(fused[#loc22, #loc23])
#loc217 = loc(fused[#loc24, #loc21])
#loc218 = loc(fused[#loc25, #loc26])
#loc219 = loc(fused[#loc30, #loc31])
#loc220 = loc(fused[#loc32, #loc33])
#loc221 = loc(fused[#loc34, #loc35])
#loc222 = loc(fused[#loc36, #loc37])
#loc223 = loc(fused[#loc38, #loc39])
#loc224 = loc(fused[#loc40, #loc41])
#loc225 = loc(fused[#loc42, #loc43])
#loc226 = loc(fused[#loc44, #loc45])
#loc227 = loc(fused[#loc50, #loc51])
#loc230 = loc(fused[#loc61, #loc62])
#loc231 = loc(fused[#loc65, #loc66])
#loc232 = loc(fused[#loc69, #loc68])
#loc233 = loc(fused[#loc73, #loc74])
#loc234 = loc(fused[#loc75, #loc76])
#loc235 = loc(fused[#loc77, #loc78])
#loc236 = loc(fused[#loc80, #loc79])
#loc237 = loc(fused[#loc81, #loc82])
#loc238 = loc(fused[#loc83, #loc84])
#loc239 = loc(fused[#loc85, #loc82])
#loc240 = loc(fused[#loc87, #loc86])
#loc241 = loc(fused[#loc88, #loc89])
#loc242 = loc(fused[#loc90, #loc91])
#loc243 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc244 = loc(fused[#loc96, #loc97])
#loc245 = loc(fused[#loc98, #loc99])
#loc246 = loc(fused[#loc102, #loc105])
#loc247 = loc(fused[#loc106, #loc107, #loc108, #loc97])
#loc248 = loc(fused[#loc113, #loc114])
#loc249 = loc(fused[#loc115, #loc116])
#loc250 = loc(fused[#loc117, #loc118])
#loc251 = loc(fused[#loc120, #loc119])
#loc252 = loc(fused[#loc121, #loc122])
#loc253 = loc(fused[#loc123, #loc124])
#loc254 = loc(fused[#loc125, #loc122])
#loc255 = loc(fused[#loc127, #loc126])
#loc256 = loc(fused[#loc128, #loc129])
#loc257 = loc(fused[#loc130, #loc131])
#loc258 = loc(fused[#loc132, #loc129])
#loc259 = loc(fused[#loc133, #loc134])
#loc260 = loc(fused[#loc135, #loc136])
#loc261 = loc(fused[#loc139, #loc142])
#loc262 = loc(fused[#loc143, #loc144, #loc145, #loc134])
#loc263 = loc(fused[#loc151, #loc152])
#loc264 = loc(fused[#loc153, #loc154])
#loc265 = loc(fused[#loc155, #loc156])
#loc266 = loc(fused[#loc158, #loc157])
#loc267 = loc(fused[#loc159, #loc160])
#loc268 = loc(fused[#loc161, #loc162])
#loc269 = loc(fused[#loc163, #loc164, #loc165, #loc160])
#loc270 = loc(fused[#loc169, #loc168])
#loc271 = loc(fused[#loc170, #loc171])
#loc272 = loc(fused[#loc172, #loc173])
#loc273 = loc(fused[#loc174, #loc171])
#loc274 = loc(fused[#loc175, #loc176])
#loc275 = loc(fused[#loc180, #loc181])
#loc276 = loc(fused[#loc182, #loc183])
#loc277 = loc(fused[#loc184, #loc185])
#loc278 = loc(fused[#loc187, #loc186])
#loc279 = loc(fused[#loc188, #loc189])
#loc280 = loc(fused[#loc190, #loc191])
#loc281 = loc(fused[#loc192, #loc189])
#loc282 = loc(fused[#loc194, #loc193])
#loc283 = loc(fused[#loc195, #loc196])
#loc284 = loc(fused[#loc197, #loc198])
#loc285 = loc(fused[#loc199, #loc196])
#loc286 = loc(fused[#loc200, #loc201])
