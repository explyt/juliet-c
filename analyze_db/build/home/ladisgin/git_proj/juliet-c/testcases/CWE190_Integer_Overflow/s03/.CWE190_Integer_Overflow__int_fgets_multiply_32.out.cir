!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":145:10)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":145:14)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":145:20)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":145:32)
#loc228 = loc(fused[#loc80, #loc81])
#loc229 = loc(fused[#loc82, #loc83])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc197)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc198)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc199)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc201)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc204)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc205)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc204)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc205)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc208)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc208)
      cir.scope {
        %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc210)
        %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc210)
        cir.store %10, %9 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc210)
        cir.scope {
          %11 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
          %12 = cir.const #cir.int<3> : !s32i loc(#loc34)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc34)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc34)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc34)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc34)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc34)
          %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc34)
          %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc198)
          %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
          %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
          %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc212)
          cir.if %25 {
            %26 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
            %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc42)
            cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc214)
          } else {
            %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc45)
          } loc(#loc213)
        } loc(#loc211)
      } loc(#loc209)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %8 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
      cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    } loc(#loc207)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc217)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc217)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc219)
        cir.if %9 {
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc221)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc60)
          %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc61)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc221)
          %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc63)
        } loc(#loc220)
      } loc(#loc218)
    } loc(#loc216)
    cir.return loc(#loc13)
  } loc(#loc202)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    cir.return loc(#loc65)
  } loc(#loc222)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc225)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc77)
  cir.func @main(%arg0: !s32i loc(fused[#loc80, #loc81]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc82, #loc83])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc84)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc85)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc86)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc86)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc87)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc74)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call @CWE190_Integer_Overflow__int_fgets_multiply_32_good() : () -> () loc(#loc89)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc75)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc76)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call @CWE190_Integer_Overflow__int_fgets_multiply_32_bad() : () -> () loc(#loc93)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc77)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc96)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.return %17 : !s32i loc(#loc232)
  } loc(#loc227)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc236)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc235)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc236)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc106)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc239)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc112)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc239)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc113)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc240)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc115)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc116)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    } loc(#loc238)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc243)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc122)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc243)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc126)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc245)
        cir.if %9 {
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc247)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc129)
          %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc130)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc247)
          %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc131)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc132)
        } loc(#loc246)
      } loc(#loc244)
    } loc(#loc242)
    cir.return loc(#loc99)
  } loc(#loc233)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc133)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc250)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc251)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc250)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc251)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc142)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc254)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc147)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc254)
      cir.scope {
        %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc256)
        %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc256)
        cir.store %10, %9 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc256)
        cir.scope {
          %11 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc155)
          %12 = cir.const #cir.int<3> : !s32i loc(#loc156)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc156)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc156)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc156)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc156)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc156)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc156)
          %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc156)
          %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc198)
          %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc157)
          %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc158)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc159)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc159)
          %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc258)
          cir.if %25 {
            %26 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc163)
            %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc164)
            cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc260)
          } else {
            %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc167)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc167)
            cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc168)
          } loc(#loc259)
        } loc(#loc257)
      } loc(#loc255)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc169)
      %8 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
      cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    } loc(#loc253)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc263)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc175)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc176)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc263)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc179)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc180)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc265)
        cir.if %9 {
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc185)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc186)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc268)
            %14 = cir.cmp(lt, %10, %13) : !s32i, !cir.bool loc(#loc269)
            cir.if %14 {
              %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc271)
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc193)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc192)
              %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc193)
              cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc271)
              %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc194)
              cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc195)
            } else {
              %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc133)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc133)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc196)
            } loc(#loc270)
          } loc(#loc267)
        } loc(#loc266)
      } loc(#loc264)
    } loc(#loc262)
    cir.return loc(#loc135)
  } loc(#loc248)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":43:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":57:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":27:22)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":28:22)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":30:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":47:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":32:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":32:21)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":32:20)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":33:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":45:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":34:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":34:49)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":36:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":44:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":36:23)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":36:36)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":36:53)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":36:17)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":36:63)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":37:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":40:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":42:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":39:29)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":39:24)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":39:17)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":39:40)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":43:17)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":46:21)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":46:10)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":46:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":48:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":56:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":49:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":49:21)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":49:20)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":50:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":55:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":50:12)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":50:19)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":51:9)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":53:13)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":53:33)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":53:26)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":54:26)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":54:13)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":131:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":135:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":133:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":133:13)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":134:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":134:13)
#loc70 = loc("/usr/include/stdlib.h":575:1)
#loc71 = loc("/usr/include/stdlib.h":575:41)
#loc72 = loc("/usr/include/time.h":76:1)
#loc73 = loc("/usr/include/time.h":76:38)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":150:15)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":152:15)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":155:15)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":157:15)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":145:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":160:1)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":146:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":148:27)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":148:22)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":148:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":150:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":151:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":151:57)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":152:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":155:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":156:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":156:56)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":157:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":159:12)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":159:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":64:1)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":86:1)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":66:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":66:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":67:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":67:22)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":68:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":68:22)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":70:12)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":70:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":71:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":76:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":72:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":72:21)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":72:20)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":74:16)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":74:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":75:21)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":75:10)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":75:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":77:5)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":85:5)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":78:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":78:21)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":78:20)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":79:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":84:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":79:12)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":79:19)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":80:9)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":82:13)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":82:33)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":82:26)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":83:26)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":83:13)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":125:27)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":89:1)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":129:1)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":91:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":91:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":92:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":92:22)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":93:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":93:22)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":95:12)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":95:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":96:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":112:5)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":97:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":97:21)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":97:20)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":98:9)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":110:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":99:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":99:49)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":101:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":109:13)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":101:23)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":101:36)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":101:53)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":101:17)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":101:63)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":102:13)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":105:13)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":107:13)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":104:29)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":104:24)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":104:17)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":104:40)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":108:27)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":108:17)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":111:21)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":111:10)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":111:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":113:5)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":128:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":114:9)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":114:21)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":114:20)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":115:9)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":127:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":115:12)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":115:19)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":116:9)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":118:13)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":126:13)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":118:17)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":118:25)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":118:33)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":118:34)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":119:13)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":122:13)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":124:13)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":120:17)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":120:37)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":120:30)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":121:30)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":121:17)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_multiply_32.c":125:17)
#loc197 = loc(fused[#loc1, #loc2])
#loc198 = loc(fused[#loc3, #loc4])
#loc199 = loc(fused[#loc5, #loc6])
#loc200 = loc(fused[#loc7, #loc8])
#loc201 = loc(fused[#loc10, #loc11])
#loc202 = loc(fused[#loc12, #loc13])
#loc203 = loc(fused[#loc14, #loc15])
#loc204 = loc(fused[#loc16, #loc17])
#loc205 = loc(fused[#loc18, #loc19])
#loc206 = loc(fused[#loc21, #loc20])
#loc207 = loc(fused[#loc22, #loc23])
#loc208 = loc(fused[#loc24, #loc25])
#loc209 = loc(fused[#loc27, #loc28])
#loc210 = loc(fused[#loc29, #loc30])
#loc211 = loc(fused[#loc31, #loc32])
#loc212 = loc(fused[#loc36, #loc37])
#loc213 = loc(fused[#loc38, #loc39, #loc40, #loc32])
#loc214 = loc(fused[#loc43, #loc44])
#loc215 = loc(fused[#loc48, #loc46])
#loc216 = loc(fused[#loc49, #loc50])
#loc217 = loc(fused[#loc51, #loc52])
#loc218 = loc(fused[#loc54, #loc55])
#loc219 = loc(fused[#loc56, #loc57])
#loc220 = loc(fused[#loc58, #loc55])
#loc221 = loc(fused[#loc59, #loc60])
#loc222 = loc(fused[#loc64, #loc65])
#loc223 = loc(fused[#loc66, #loc67])
#loc224 = loc(fused[#loc68, #loc69])
#loc225 = loc(fused[#loc70, #loc71])
#loc226 = loc(fused[#loc72, #loc73])
#loc227 = loc(fused[#loc78, #loc79])
#loc230 = loc(fused[#loc89, #loc90])
#loc231 = loc(fused[#loc93, #loc94])
#loc232 = loc(fused[#loc97, #loc96])
#loc233 = loc(fused[#loc98, #loc99])
#loc234 = loc(fused[#loc100, #loc101])
#loc235 = loc(fused[#loc102, #loc103])
#loc236 = loc(fused[#loc104, #loc105])
#loc237 = loc(fused[#loc107, #loc106])
#loc238 = loc(fused[#loc108, #loc109])
#loc239 = loc(fused[#loc110, #loc111])
#loc240 = loc(fused[#loc114, #loc113])
#loc241 = loc(fused[#loc117, #loc115])
#loc242 = loc(fused[#loc118, #loc119])
#loc243 = loc(fused[#loc120, #loc121])
#loc244 = loc(fused[#loc123, #loc124])
#loc245 = loc(fused[#loc125, #loc126])
#loc246 = loc(fused[#loc127, #loc124])
#loc247 = loc(fused[#loc128, #loc129])
#loc248 = loc(fused[#loc134, #loc135])
#loc249 = loc(fused[#loc136, #loc137])
#loc250 = loc(fused[#loc138, #loc139])
#loc251 = loc(fused[#loc140, #loc141])
#loc252 = loc(fused[#loc143, #loc142])
#loc253 = loc(fused[#loc144, #loc145])
#loc254 = loc(fused[#loc146, #loc147])
#loc255 = loc(fused[#loc149, #loc150])
#loc256 = loc(fused[#loc151, #loc152])
#loc257 = loc(fused[#loc153, #loc154])
#loc258 = loc(fused[#loc158, #loc159])
#loc259 = loc(fused[#loc160, #loc161, #loc162, #loc154])
#loc260 = loc(fused[#loc165, #loc166])
#loc261 = loc(fused[#loc171, #loc169])
#loc262 = loc(fused[#loc172, #loc173])
#loc263 = loc(fused[#loc174, #loc175])
#loc264 = loc(fused[#loc177, #loc178])
#loc265 = loc(fused[#loc179, #loc180])
#loc266 = loc(fused[#loc181, #loc178])
#loc267 = loc(fused[#loc182, #loc183])
#loc268 = loc(fused[#loc185, #loc186])
#loc269 = loc(fused[#loc184, #loc187])
#loc270 = loc(fused[#loc188, #loc189, #loc190, #loc183])
#loc271 = loc(fused[#loc191, #loc192])
