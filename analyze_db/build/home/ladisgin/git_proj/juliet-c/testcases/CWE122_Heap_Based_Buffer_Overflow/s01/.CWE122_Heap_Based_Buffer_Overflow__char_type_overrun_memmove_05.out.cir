!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":122:10)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":122:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":122:20)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":122:32)
#loc227 = loc(fused[#loc75, #loc76])
#loc228 = loc(fused[#loc77, #loc78])
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc195)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc196)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc195)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc14)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc203)
          %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
          %5 = cir.const #cir.int<32> : !u64i loc(#loc204)
          %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc205)
          cir.store %7, %3 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc203)
          cir.scope {
            %44 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc25)
            %45 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
            %46 = cir.cast(bitcast, %45 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc26)
            %47 = cir.cmp(eq, %44, %46) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc207)
            cir.if %47 {
              %48 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
              %49 = cir.const #cir.int<1> : !s32i loc(#loc29)
              %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc30)
              cir.call @exit(%50) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
            } loc(#loc208)
          } loc(#loc206)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc7)
          %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc31)
          %12 = cir.get_member %11[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          cir.store %10, %12 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc209)
          %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc33)
          %14 = cir.get_member %13[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %15 = cir.load %14 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc210)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc35)
          %17 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc36)
          %18 = cir.get_member %17[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc211)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc211)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc39)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc39)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc39)
          %24 = cir.const #cir.int<32> : !u64i loc(#loc212)
          cir.libc.memmove %24 bytes from %23 to %20 : !cir.ptr<!void>, !u64i loc(#loc213)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc44)
          %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc44)
          %27 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc45)
          %28 = cir.get_member %27[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %29 = cir.const #cir.int<16> : !u64i loc(#loc214)
          %30 = cir.const #cir.int<1> : !u64i loc(#loc215)
          %31 = cir.binop(div, %29, %30) : !u64i loc(#loc216)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc50)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc50)
          %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc217)
          %35 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
          %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc52)
          cir.store %26, %36 : !s8i, !cir.ptr<!s8i> loc(#loc218)
          %37 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc53)
          %38 = cir.get_member %37[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc219)
          cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc55)
          %40 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc56)
          %41 = cir.get_member %40[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %42 = cir.load %41 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
          %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc220)
          cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc58)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc200)
    cir.return loc(#loc11)
  } loc(#loc199)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc60)
  } loc(#loc221)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc224)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc72)
  cir.func @main(%arg0: !s32i loc(fused[#loc75, #loc76]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc77, #loc78])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc227)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc228)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc79)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc80)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc81)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc81)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc82)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc69)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05_good() : () -> () loc(#loc84)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc70)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc71)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05_bad() : () -> () loc(#loc88)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc72)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc231)
    cir.return %17 : !s32i loc(#loc231)
  } loc(#loc226)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc95)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc232)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc100)
      cir.if %2 {
        %3 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc237)
          %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc109)
          %5 = cir.const #cir.int<32> : !u64i loc(#loc238)
          %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc239)
          cir.store %7, %3 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc237)
          cir.scope {
            %44 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc114)
            %45 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc115)
            %46 = cir.cast(bitcast, %45 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc115)
            %47 = cir.cmp(eq, %44, %46) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc241)
            cir.if %47 {
              %48 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc117)
              %49 = cir.const #cir.int<1> : !s32i loc(#loc118)
              %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc119)
              cir.call @exit(%50) : (!s32i) -> () extra(#fn_attr) loc(#loc117)
            } loc(#loc242)
          } loc(#loc240)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc120)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc120)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc120)
          %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc121)
          %12 = cir.get_member %11[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          cir.store %10, %12 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc243)
          %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc122)
          %14 = cir.get_member %13[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %15 = cir.load %14 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc123)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc244)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc124)
          %17 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc125)
          %18 = cir.get_member %17[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc245)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc245)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc127)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc127)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc127)
          %24 = cir.const #cir.int<16> : !u64i loc(#loc246)
          cir.libc.memmove %24 bytes from %23 to %20 : !cir.ptr<!void>, !u64i loc(#loc247)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc132)
          %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc132)
          %27 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc133)
          %28 = cir.get_member %27[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %29 = cir.const #cir.int<16> : !u64i loc(#loc248)
          %30 = cir.const #cir.int<1> : !u64i loc(#loc249)
          %31 = cir.binop(div, %29, %30) : !u64i loc(#loc250)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc138)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc138)
          %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc251)
          %35 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc133)
          %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc140)
          cir.store %26, %36 : !s8i, !cir.ptr<!s8i> loc(#loc252)
          %37 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc141)
          %38 = cir.get_member %37[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc253)
          cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc143)
          %40 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc144)
          %41 = cir.get_member %40[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %42 = cir.load %41 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc145)
          %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc254)
          cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc146)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc234)
    cir.return loc(#loc97)
  } loc(#loc233)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc195)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc151)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc259)
          %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc157)
          %5 = cir.const #cir.int<32> : !u64i loc(#loc260)
          %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc157)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc261)
          cir.store %7, %3 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc259)
          cir.scope {
            %44 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc162)
            %45 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc163)
            %46 = cir.cast(bitcast, %45 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc163)
            %47 = cir.cmp(eq, %44, %46) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc263)
            cir.if %47 {
              %48 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc165)
              %49 = cir.const #cir.int<1> : !s32i loc(#loc166)
              %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc167)
              cir.call @exit(%50) : (!s32i) -> () extra(#fn_attr) loc(#loc165)
            } loc(#loc264)
          } loc(#loc262)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc168)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc168)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc168)
          %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc169)
          %12 = cir.get_member %11[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          cir.store %10, %12 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc265)
          %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc170)
          %14 = cir.get_member %13[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %15 = cir.load %14 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc171)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc266)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc172)
          %17 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc173)
          %18 = cir.get_member %17[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc267)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc267)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc175)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc175)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc175)
          %24 = cir.const #cir.int<16> : !u64i loc(#loc268)
          cir.libc.memmove %24 bytes from %23 to %20 : !cir.ptr<!void>, !u64i loc(#loc269)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc180)
          %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc180)
          %27 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc181)
          %28 = cir.get_member %27[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %29 = cir.const #cir.int<16> : !u64i loc(#loc270)
          %30 = cir.const #cir.int<1> : !u64i loc(#loc271)
          %31 = cir.binop(div, %29, %30) : !u64i loc(#loc272)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc186)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc186)
          %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc273)
          %35 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc181)
          %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc188)
          cir.store %26, %36 : !s8i, !cir.ptr<!s8i> loc(#loc274)
          %37 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc189)
          %38 = cir.get_member %37[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
          %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc275)
          cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc191)
          %40 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc192)
          %41 = cir.get_member %40[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc32)
          %42 = cir.load %41 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc193)
          %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc276)
          cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc194)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc256)
    cir.return loc(#loc148)
  } loc(#loc255)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":34:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":34:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":46:50)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":56:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":41:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":55:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":41:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":42:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":43:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":54:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":44:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":44:76)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":44:53)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":44:60)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":44:75)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":45:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":45:51)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":45:17)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":45:35)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":45:41)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":45:42)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":45:48)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":45:47)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":46:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":27:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":48:31)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":48:47)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":48:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":50:21)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":26:10)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":50:37)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":50:48)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":50:57)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":50:79)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":50:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":50:80)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":51:93)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":51:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":51:40)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":51:72)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":51:74)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":51:85)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":51:88)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":51:39)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":51:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":52:31)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":52:47)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":52:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":53:31)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":53:47)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":53:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":107:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":111:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":109:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":109:11)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":110:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":110:11)
#loc65 = loc("/usr/include/stdlib.h":575:1)
#loc66 = loc("/usr/include/stdlib.h":575:41)
#loc67 = loc("/usr/include/time.h":76:1)
#loc68 = loc("/usr/include/time.h":76:38)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":127:15)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":129:15)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":132:15)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":134:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":122:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":137:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":123:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":125:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":125:22)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":125:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":127:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":128:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":128:74)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":129:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":132:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":133:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":133:73)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":134:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":136:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":136:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":35:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":35:26)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":68:19)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":63:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":85:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":65:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":84:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":65:8)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":66:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":69:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":71:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":68:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":72:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":83:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":73:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":73:76)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":73:53)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":73:60)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":73:75)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":74:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":74:51)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":74:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":74:35)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":74:41)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":74:42)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":74:48)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":74:47)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":75:50)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":75:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":77:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":77:47)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":77:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":79:21)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":79:37)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":79:48)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":79:57)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":79:89)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":79:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":79:90)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":80:93)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":80:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":80:40)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":80:72)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":80:74)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":80:85)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":80:88)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":80:39)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":80:29)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":81:31)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":81:47)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":81:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":82:31)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":82:47)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":82:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":88:1)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":105:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":90:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":104:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":90:8)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":91:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":92:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":103:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":93:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":93:76)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":93:53)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":93:60)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":93:75)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":94:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":94:51)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":94:17)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":94:35)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":94:41)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":94:42)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":94:48)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":94:47)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":95:50)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":95:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":97:31)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":97:47)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":97:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":99:21)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":99:37)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":99:48)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":99:57)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":99:89)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":99:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":99:90)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":100:93)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":100:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":100:40)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":100:72)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":100:74)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":100:85)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":100:88)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":100:39)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":100:29)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":101:31)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":101:47)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":101:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":102:31)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":102:47)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c":102:13)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc3, #loc4])
#loc197 = loc(fused[#loc5, #loc6])
#loc198 = loc(fused[#loc8, #loc9])
#loc199 = loc(fused[#loc10, #loc11])
#loc200 = loc(fused[#loc12, #loc13])
#loc201 = loc(fused[#loc15, #loc13])
#loc202 = loc(fused[#loc16, #loc17])
#loc203 = loc(fused[#loc18, #loc19])
#loc204 = loc(fused[#loc21, #loc22])
#loc205 = loc(fused[#loc20, #loc19])
#loc206 = loc(fused[#loc23, #loc24])
#loc207 = loc(fused[#loc25, #loc26])
#loc208 = loc(fused[#loc27, #loc24])
#loc209 = loc(fused[#loc31, #loc7])
#loc210 = loc(fused[#loc33, #loc34])
#loc211 = loc(fused[#loc36, #loc38])
#loc212 = loc(fused[#loc40, #loc41])
#loc213 = loc(fused[#loc42, #loc43])
#loc214 = loc(fused[#loc46, #loc47])
#loc215 = loc(fused[#loc48, #loc49])
#loc216 = loc(fused[#loc46, #loc49])
#loc217 = loc(fused[#loc51, #loc50])
#loc218 = loc(fused[#loc45, #loc44])
#loc219 = loc(fused[#loc53, #loc54])
#loc220 = loc(fused[#loc56, #loc57])
#loc221 = loc(fused[#loc59, #loc60])
#loc222 = loc(fused[#loc61, #loc62])
#loc223 = loc(fused[#loc63, #loc64])
#loc224 = loc(fused[#loc65, #loc66])
#loc225 = loc(fused[#loc67, #loc68])
#loc226 = loc(fused[#loc73, #loc74])
#loc229 = loc(fused[#loc84, #loc85])
#loc230 = loc(fused[#loc88, #loc89])
#loc231 = loc(fused[#loc92, #loc91])
#loc232 = loc(fused[#loc93, #loc94])
#loc233 = loc(fused[#loc96, #loc97])
#loc234 = loc(fused[#loc98, #loc99])
#loc235 = loc(fused[#loc101, #loc102, #loc103, #loc99])
#loc236 = loc(fused[#loc105, #loc106])
#loc237 = loc(fused[#loc107, #loc108])
#loc238 = loc(fused[#loc110, #loc111])
#loc239 = loc(fused[#loc109, #loc108])
#loc240 = loc(fused[#loc112, #loc113])
#loc241 = loc(fused[#loc114, #loc115])
#loc242 = loc(fused[#loc116, #loc113])
#loc243 = loc(fused[#loc121, #loc120])
#loc244 = loc(fused[#loc122, #loc123])
#loc245 = loc(fused[#loc125, #loc126])
#loc246 = loc(fused[#loc128, #loc129])
#loc247 = loc(fused[#loc130, #loc131])
#loc248 = loc(fused[#loc134, #loc135])
#loc249 = loc(fused[#loc136, #loc137])
#loc250 = loc(fused[#loc134, #loc137])
#loc251 = loc(fused[#loc139, #loc138])
#loc252 = loc(fused[#loc133, #loc132])
#loc253 = loc(fused[#loc141, #loc142])
#loc254 = loc(fused[#loc144, #loc145])
#loc255 = loc(fused[#loc147, #loc148])
#loc256 = loc(fused[#loc149, #loc150])
#loc257 = loc(fused[#loc152, #loc150])
#loc258 = loc(fused[#loc153, #loc154])
#loc259 = loc(fused[#loc155, #loc156])
#loc260 = loc(fused[#loc158, #loc159])
#loc261 = loc(fused[#loc157, #loc156])
#loc262 = loc(fused[#loc160, #loc161])
#loc263 = loc(fused[#loc162, #loc163])
#loc264 = loc(fused[#loc164, #loc161])
#loc265 = loc(fused[#loc169, #loc168])
#loc266 = loc(fused[#loc170, #loc171])
#loc267 = loc(fused[#loc173, #loc174])
#loc268 = loc(fused[#loc176, #loc177])
#loc269 = loc(fused[#loc178, #loc179])
#loc270 = loc(fused[#loc182, #loc183])
#loc271 = loc(fused[#loc184, #loc185])
#loc272 = loc(fused[#loc182, #loc185])
#loc273 = loc(fused[#loc187, #loc186])
#loc274 = loc(fused[#loc181, #loc180])
#loc275 = loc(fused[#loc189, #loc190])
#loc276 = loc(fused[#loc192, #loc193])
