!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global  external dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_687badDataE = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc126)
  cir.global  external dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6811goodG2BDataE = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc127)
  cir.global  external dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6811goodB2GDataE = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc128)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc130)
  cir.func private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_687badSinkEv() loc(#loc131)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_683badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc134)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc135)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc136)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc137)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc134)
    cir.scope {
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc27)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc139)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc31)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc140)
    } loc(#loc138)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc32)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc141)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc142)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
    cir.scope {
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc38)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc144)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc42)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
      } loc(#loc145)
    } loc(#loc143)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc146)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %13 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_687badDataE : !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    cir.store %12, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc147)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_687badSinkEv() : () -> () loc(#loc47)
    cir.return loc(#loc14)
  } loc(#loc132)
  cir.func private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6811goodG2BSinkEv() loc(#loc148)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_68L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc152)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc58)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc153)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc58)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc154)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc151)
    cir.scope {
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc64)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc156)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc66)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc68)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc66)
      } loc(#loc157)
    } loc(#loc155)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc69)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc158)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc159)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
    cir.scope {
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc75)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc161)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc77)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc78)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc79)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
      } loc(#loc162)
    } loc(#loc160)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    %13 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6811goodG2BDataE : !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
    cir.store %12, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc164)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6811goodG2BSinkEv() : () -> () loc(#loc84)
    cir.return loc(#loc51)
  } loc(#loc149)
  cir.func private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6811goodB2GSinkEv() loc(#loc165)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_68L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc169)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc95)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc170)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc95)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    cir.scope {
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc101)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc173)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc103)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc104)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc105)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
      } loc(#loc174)
    } loc(#loc172)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc106)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc175)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc176)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.scope {
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc112)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc178)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc114)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc115)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc116)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc114)
      } loc(#loc179)
    } loc(#loc177)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
    %13 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6811goodB2GDataE : !cir.ptr<!cir.ptr<!s8i>> loc(#loc128)
    cir.store %12, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6811goodB2GSinkEv() : () -> () loc(#loc121)
    cir.return loc(#loc88)
  } loc(#loc166)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_684goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_68L7goodG2BEv() : () -> () loc(#loc124)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_68L7goodB2GEv() : () -> () loc(#loc125)
    cir.return loc(#loc123)
  } loc(#loc182)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":23:8)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":24:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":24:8)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":25:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":25:8)
#loc7 = loc("/usr/include/stdlib.h":672:1)
#loc8 = loc("/usr/include/stdlib.h":672:45)
#loc9 = loc("/usr/include/stdlib.h":756:1)
#loc10 = loc("/usr/include/stdlib.h":756:70)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":30:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":30:14)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":32:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":43:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":34:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":34:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":35:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":35:62)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":37:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":37:64)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":35:36)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":35:43)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":35:61)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":36:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":36:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":36:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":36:26)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":36:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":36:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":36:39)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":36:38)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":37:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":37:44)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":37:63)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":38:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":38:43)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":38:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":38:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":38:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":38:40)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":38:39)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":40:12)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":40:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":41:15)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":41:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":42:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":50:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":50:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":54:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":65:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":56:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":56:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":57:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":57:62)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":59:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":59:64)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":57:36)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":57:43)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":57:61)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":58:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":58:42)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":58:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":58:26)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":58:32)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":58:33)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":58:39)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":58:38)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":59:37)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":59:44)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":59:63)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":60:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":60:43)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":60:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":60:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":60:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":60:34)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":60:40)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":60:39)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":62:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":62:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":63:19)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":63:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":64:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":51:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":51:18)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":68:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":79:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":70:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":70:12)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":71:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":71:62)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":73:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":73:64)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":71:36)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":71:43)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":71:61)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":72:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":72:42)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":72:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":72:26)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":72:32)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":72:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":72:39)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":72:38)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":73:37)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":73:44)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":73:63)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":74:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":74:43)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":74:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":74:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":74:33)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":74:34)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":74:40)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":74:39)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":76:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":76:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":77:19)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":77:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":78:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":81:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":85:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":83:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_68a.cpp":84:5)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc7, #loc8])
#loc130 = loc(fused[#loc9, #loc10])
#loc131 = loc(fused[#loc11, #loc12])
#loc132 = loc(fused[#loc13, #loc14])
#loc133 = loc(fused[#loc15, #loc16])
#loc134 = loc(fused[#loc17, #loc18])
#loc135 = loc(fused[#loc19, #loc20])
#loc136 = loc(fused[#loc22, #loc23])
#loc137 = loc(fused[#loc21, #loc18])
#loc138 = loc(fused[#loc24, #loc25])
#loc139 = loc(fused[#loc26, #loc27])
#loc140 = loc(fused[#loc28, #loc25])
#loc141 = loc(fused[#loc33, #loc34])
#loc142 = loc(fused[#loc32, #loc20])
#loc143 = loc(fused[#loc35, #loc36])
#loc144 = loc(fused[#loc37, #loc38])
#loc145 = loc(fused[#loc39, #loc36])
#loc146 = loc(fused[#loc44, #loc43])
#loc147 = loc(fused[#loc46, #loc45])
#loc148 = loc(fused[#loc48, #loc49])
#loc149 = loc(fused[#loc50, #loc51])
#loc150 = loc(fused[#loc52, #loc53])
#loc151 = loc(fused[#loc54, #loc55])
#loc152 = loc(fused[#loc56, #loc57])
#loc153 = loc(fused[#loc59, #loc60])
#loc154 = loc(fused[#loc58, #loc55])
#loc155 = loc(fused[#loc61, #loc62])
#loc156 = loc(fused[#loc63, #loc64])
#loc157 = loc(fused[#loc65, #loc62])
#loc158 = loc(fused[#loc70, #loc71])
#loc159 = loc(fused[#loc69, #loc57])
#loc160 = loc(fused[#loc72, #loc73])
#loc161 = loc(fused[#loc74, #loc75])
#loc162 = loc(fused[#loc76, #loc73])
#loc163 = loc(fused[#loc81, #loc80])
#loc164 = loc(fused[#loc83, #loc82])
#loc165 = loc(fused[#loc85, #loc86])
#loc166 = loc(fused[#loc87, #loc88])
#loc167 = loc(fused[#loc89, #loc90])
#loc168 = loc(fused[#loc91, #loc92])
#loc169 = loc(fused[#loc93, #loc94])
#loc170 = loc(fused[#loc96, #loc97])
#loc171 = loc(fused[#loc95, #loc92])
#loc172 = loc(fused[#loc98, #loc99])
#loc173 = loc(fused[#loc100, #loc101])
#loc174 = loc(fused[#loc102, #loc99])
#loc175 = loc(fused[#loc107, #loc108])
#loc176 = loc(fused[#loc106, #loc94])
#loc177 = loc(fused[#loc109, #loc110])
#loc178 = loc(fused[#loc111, #loc112])
#loc179 = loc(fused[#loc113, #loc110])
#loc180 = loc(fused[#loc118, #loc117])
#loc181 = loc(fused[#loc120, #loc119])
#loc182 = loc(fused[#loc122, #loc123])
