!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @putchar(!s32i) -> !s32i loc(#loc68)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"putchar failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc11)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.const #cir.int<65> : !s32i loc(#loc15)
            %2 = cir.call @putchar(%1) : (!s32i) -> !s32i loc(#loc16)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc17)
            %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc73)
            cir.if %4 {
              %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc5)
              %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc19)
            } loc(#loc74)
          } loc(#loc72)
          cir.break loc(#loc20)
        } loc(#loc12)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc22)
          cir.break loc(#loc23)
        } loc(#loc21)
        cir.yield loc(#loc9)
      } loc(#loc9)
    } loc(#loc71)
    cir.return loc(#loc8)
  } loc(#loc70)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc75)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc34)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc37)
          cir.break loc(#loc38)
        } loc(#loc35)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.const #cir.int<65> : !s32i loc(#loc42)
            %2 = cir.call @putchar(%1) : (!s32i) -> !s32i loc(#loc43)
            %3 = cir.const #cir.int<1> : !s32i loc(#loc44)
            %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc44)
            %5 = cir.cmp(eq, %2, %4) : !s32i, !cir.bool loc(#loc81)
            cir.if %5 {
              %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
              %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
              cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc47)
            } loc(#loc82)
          } loc(#loc80)
          cir.break loc(#loc48)
        } loc(#loc39)
        cir.yield loc(#loc32)
      } loc(#loc32)
    } loc(#loc79)
    cir.return loc(#loc31)
  } loc(#loc78)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc53)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.const #cir.int<65> : !s32i loc(#loc57)
            %2 = cir.call @putchar(%1) : (!s32i) -> !s32i loc(#loc58)
            %3 = cir.const #cir.int<1> : !s32i loc(#loc59)
            %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc59)
            %5 = cir.cmp(eq, %2, %4) : !s32i, !cir.bool loc(#loc86)
            cir.if %5 {
              %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc61)
              %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc61)
              cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
            } loc(#loc87)
          } loc(#loc85)
          cir.break loc(#loc63)
        } loc(#loc54)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc66)
          cir.break loc(#loc67)
        } loc(#loc64)
        cir.yield loc(#loc51)
      } loc(#loc51)
    } loc(#loc84)
    cir.return loc(#loc50)
  } loc(#loc83)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":618:1)
#loc2 = loc("/usr/include/stdio.h":618:28)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":33:23)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":38:19)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":24:1)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":41:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":26:5)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":40:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":26:12)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":28:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":31:9)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":34:9)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":31:26)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":31:13)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":31:34)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":32:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":33:13)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":35:9)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":36:5)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":38:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":39:9)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":85:1)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":89:1)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":87:5)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":87:11)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":88:5)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":88:11)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":48:1)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":64:1)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":50:5)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":63:5)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":50:12)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":52:5)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":54:19)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":54:9)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":55:9)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":56:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":58:9)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":61:9)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":58:26)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":58:13)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":58:34)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":59:9)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":60:23)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":60:13)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":62:9)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":67:1)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":83:1)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":69:5)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":82:5)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":69:12)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":71:5)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":73:9)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":76:9)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":73:26)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":73:13)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":73:34)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":74:9)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":75:23)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":75:13)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":77:9)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":78:5)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":80:19)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":80:9)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_15.c":81:9)
#loc68 = loc(fused[#loc1, #loc2])
#loc69 = loc(fused[#loc3, #loc4])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc9, #loc10])
#loc72 = loc(fused[#loc13, #loc14])
#loc73 = loc(fused[#loc16, #loc17])
#loc74 = loc(fused[#loc18, #loc14])
#loc75 = loc(fused[#loc24, #loc25])
#loc76 = loc(fused[#loc26, #loc27])
#loc77 = loc(fused[#loc28, #loc29])
#loc78 = loc(fused[#loc30, #loc31])
#loc79 = loc(fused[#loc32, #loc33])
#loc80 = loc(fused[#loc40, #loc41])
#loc81 = loc(fused[#loc43, #loc44])
#loc82 = loc(fused[#loc45, #loc41])
#loc83 = loc(fused[#loc49, #loc50])
#loc84 = loc(fused[#loc51, #loc52])
#loc85 = loc(fused[#loc55, #loc56])
#loc86 = loc(fused[#loc58, #loc59])
#loc87 = loc(fused[#loc60, #loc56])
