!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType = !cir.record<union "CWE369_Divide_by_Zero__int_rand_divide_34_unionType" {!s32i, !s32i}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc84)
  cir.func private @printIntLine(!s32i) loc(#loc85)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.alloca !ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType, !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc88)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc12)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc14)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc14)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc14)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc14)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc14)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc14)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc14)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc14)
      cir.yield %23 : !u32i loc(#loc14)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc14)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc14)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc14)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc14)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc14)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc14)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc14)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc14)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc14)
      cir.yield %27 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc14)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc17)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc93)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc23)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc93)
      %15 = cir.const #cir.int<100> : !s32i loc(#loc24)
      %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %17 = cir.binop(div, %15, %16) : !s32i loc(#loc94)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc26)
    } loc(#loc92)
    cir.return loc(#loc6)
  } loc(#loc86)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc97)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc95)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.alloca !ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType, !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc100)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc40)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc42)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %6 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc17)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc105)
      %8 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc23)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc105)
      %10 = cir.const #cir.int<100> : !s32i loc(#loc50)
      %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc51)
      %12 = cir.binop(div, %10, %11) : !s32i loc(#loc106)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc52)
    } loc(#loc104)
    cir.return loc(#loc34)
  } loc(#loc98)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType, !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc110)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc63)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc65)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc65)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc65)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc65)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc65)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc65)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc65)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc65)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc65)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc65)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc65)
      cir.yield %23 : !u32i loc(#loc65)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc65)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc65)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc65)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc65)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc65)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc65)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc65)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc65)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc65)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc65)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc65)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc65)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc65)
      cir.yield %27 : !u32i loc(#loc65)
    }) : (!cir.bool) -> !u32i loc(#loc65)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc65)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc17)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc115)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc23)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc115)
      cir.scope {
        %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
        %17 = cir.cmp(ne, %15, %16) : !s32i, !cir.bool loc(#loc117)
        cir.if %17 {
          %18 = cir.const #cir.int<100> : !s32i loc(#loc80)
          %19 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc81)
          %20 = cir.binop(div, %18, %19) : !s32i loc(#loc119)
          cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc82)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc55)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc55)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc83)
        } loc(#loc118)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc57)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":28:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":42:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":30:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":30:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":31:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":31:57)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":33:13)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":33:12)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":33:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":35:12)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":35:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":36:26)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":22:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":36:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":37:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":41:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":38:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":38:28)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":23:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":40:22)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":40:28)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":40:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":89:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":93:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":91:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":91:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":92:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":92:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":49:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":63:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":51:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":51:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":52:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":52:57)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":54:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":54:12)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":54:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":56:12)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":56:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":57:26)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":57:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":58:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":62:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":59:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":59:28)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":61:22)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":61:28)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":61:9)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":84:23)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":66:1)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":87:1)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":68:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":68:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":69:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":69:57)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":71:13)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":71:12)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":71:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":73:12)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":73:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":74:26)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":74:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":75:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":86:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":76:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":76:28)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":78:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":85:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":78:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":78:21)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":79:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":81:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":83:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":80:26)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":80:32)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":80:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":84:13)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc7, #loc8])
#loc88 = loc(fused[#loc9, #loc10])
#loc89 = loc(fused[#loc13, #loc11])
#loc90 = loc(fused[#loc15, #loc14])
#loc91 = loc(fused[#loc18, #loc16])
#loc92 = loc(fused[#loc19, #loc20])
#loc93 = loc(fused[#loc21, #loc22])
#loc94 = loc(fused[#loc24, #loc25])
#loc95 = loc(fused[#loc27, #loc28])
#loc96 = loc(fused[#loc29, #loc30])
#loc97 = loc(fused[#loc31, #loc32])
#loc98 = loc(fused[#loc33, #loc34])
#loc99 = loc(fused[#loc35, #loc36])
#loc100 = loc(fused[#loc37, #loc38])
#loc101 = loc(fused[#loc41, #loc39])
#loc102 = loc(fused[#loc43, #loc42])
#loc103 = loc(fused[#loc45, #loc44])
#loc104 = loc(fused[#loc46, #loc47])
#loc105 = loc(fused[#loc48, #loc49])
#loc106 = loc(fused[#loc50, #loc51])
#loc107 = loc(fused[#loc53, #loc54])
#loc108 = loc(fused[#loc56, #loc57])
#loc109 = loc(fused[#loc58, #loc59])
#loc110 = loc(fused[#loc60, #loc61])
#loc111 = loc(fused[#loc64, #loc62])
#loc112 = loc(fused[#loc66, #loc65])
#loc113 = loc(fused[#loc68, #loc67])
#loc114 = loc(fused[#loc69, #loc70])
#loc115 = loc(fused[#loc71, #loc72])
#loc116 = loc(fused[#loc73, #loc74])
#loc117 = loc(fused[#loc75, #loc76])
#loc118 = loc(fused[#loc77, #loc78, #loc79, #loc74])
#loc119 = loc(fused[#loc80, #loc81])
