!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc32 = loc("CWE617_Reachable_Assertion__zero_12.c":75:10)
#loc33 = loc("CWE617_Reachable_Assertion__zero_12.c":75:14)
#loc34 = loc("CWE617_Reachable_Assertion__zero_12.c":75:20)
#loc35 = loc("CWE617_Reachable_Assertion__zero_12.c":75:32)
#loc73 = loc(fused[#loc32, #loc33])
#loc74 = loc(fused[#loc34, #loc35])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc61)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__zero_12.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__zero_12_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_12_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc64)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc65)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc65)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc11)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
    cir.brcond %3 ^bb2, ^bb10 loc(#loc66)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<4> : !u64i loc(#loc5)
    cir.br ^bb3 loc(#loc5)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc5)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<0> : !s32i loc(#loc5)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc5)
    cir.brcond %6 ^bb5, ^bb6 loc(#loc5)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc5)
  ^bb6:  // pred: ^bb4
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.const #cir.int<27> : !s32i loc(#loc5)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc5)
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
    cir.br ^bb7 loc(#loc5)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc5)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc5)
  ^bb9:  // pred: ^bb8
    cir.br ^bb18 loc(#loc14)
  ^bb10:  // pred: ^bb1
    %15 = cir.const #cir.int<4> : !u64i loc(#loc6)
    cir.br ^bb11 loc(#loc6)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc6)
  ^bb12:  // pred: ^bb11
    %16 = cir.const #cir.int<1> : !s32i loc(#loc6)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc6)
    cir.brcond %17 ^bb13, ^bb14 loc(#loc6)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc6)
  ^bb14:  // pred: ^bb12
    %18 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
    %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc6)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc6)
    %22 = cir.const #cir.int<34> : !s32i loc(#loc6)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc6)
    %24 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc6)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @__assert_fail(%19, %21, %23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc6)
    cir.br ^bb15 loc(#loc6)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc6)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc6)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc10)
  ^bb18:  // 2 preds: ^bb9, ^bb17
    cir.br ^bb19 loc(#loc10)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc8)
  } loc(#loc63)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc68)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc18)
    cir.return loc(#loc17)
  } loc(#loc67)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc69)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc70)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc29)
  cir.func @main(%arg0: !s32i loc(fused[#loc32, #loc33]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc34, #loc35])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc73)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc74)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc31)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc36)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc36)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc37)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc38)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc38)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc39)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc26)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    %8 = cir.get_global @CWE617_Reachable_Assertion__zero_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc75)
    cir.call @CWE617_Reachable_Assertion__zero_12_good() : () -> () loc(#loc41)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc27)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc28)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %13 = cir.get_global @CWE617_Reachable_Assertion__zero_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc76)
    cir.call @CWE617_Reachable_Assertion__zero_12_bad() : () -> () loc(#loc45)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc29)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc48)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    cir.return %17 : !s32i loc(#loc77)
  } loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void good1()\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc79)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc80)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc80)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc55)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %3 ^bb2, ^bb10 loc(#loc81)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<4> : !u64i loc(#loc50)
    cir.br ^bb3 loc(#loc50)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc50)
    cir.brcond %6 ^bb5, ^bb6 loc(#loc50)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc50)
  ^bb6:  // pred: ^bb4
    %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc50)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc50)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc50)
    %11 = cir.const #cir.int<50> : !s32i loc(#loc50)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc50)
    %13 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc50)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc50)
    cir.br ^bb7 loc(#loc50)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc50)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc50)
  ^bb9:  // pred: ^bb8
    cir.br ^bb18 loc(#loc58)
  ^bb10:  // pred: ^bb1
    %15 = cir.const #cir.int<4> : !u64i loc(#loc60)
    cir.br ^bb11 loc(#loc60)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc60)
  ^bb12:  // pred: ^bb11
    %16 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc60)
    cir.brcond %17 ^bb13, ^bb14 loc(#loc60)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc60)
  ^bb14:  // pred: ^bb12
    %18 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc60)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc60)
    %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc60)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc60)
    %22 = cir.const #cir.int<57> : !s32i loc(#loc60)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc60)
    %24 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc60)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @__assert_fail(%19, %21, %23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc60)
    cir.br ^bb15 loc(#loc60)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc60)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc60)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc54)
  ^bb18:  // 2 preds: ^bb9, ^bb17
    cir.br ^bb19 loc(#loc54)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc52)
  } loc(#loc78)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/assert.h":67:1)
#loc4 = loc("/usr/include/assert.h":69:43)
#loc5 = loc("CWE617_Reachable_Assertion__zero_12.c":27:9)
#loc6 = loc("CWE617_Reachable_Assertion__zero_12.c":34:9)
#loc7 = loc("CWE617_Reachable_Assertion__zero_12.c":22:1)
#loc8 = loc("CWE617_Reachable_Assertion__zero_12.c":36:1)
#loc9 = loc("CWE617_Reachable_Assertion__zero_12.c":24:5)
#loc10 = loc("CWE617_Reachable_Assertion__zero_12.c":35:5)
#loc11 = loc("CWE617_Reachable_Assertion__zero_12.c":24:8)
#loc12 = loc("CWE617_Reachable_Assertion__zero_12.c":24:33)
#loc13 = loc("CWE617_Reachable_Assertion__zero_12.c":25:5)
#loc14 = loc("CWE617_Reachable_Assertion__zero_12.c":28:5)
#loc15 = loc("CWE617_Reachable_Assertion__zero_12.c":30:5)
#loc16 = loc("CWE617_Reachable_Assertion__zero_12.c":61:1)
#loc17 = loc("CWE617_Reachable_Assertion__zero_12.c":64:1)
#loc18 = loc("CWE617_Reachable_Assertion__zero_12.c":63:5)
#loc19 = loc("CWE617_Reachable_Assertion__zero_12.c":63:11)
#loc20 = loc("/usr/include/stdlib.h":575:1)
#loc21 = loc("/usr/include/stdlib.h":575:41)
#loc22 = loc("/usr/include/time.h":76:1)
#loc23 = loc("/usr/include/time.h":76:38)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE617_Reachable_Assertion__zero_12.c":80:15)
#loc27 = loc("CWE617_Reachable_Assertion__zero_12.c":82:15)
#loc28 = loc("CWE617_Reachable_Assertion__zero_12.c":85:15)
#loc29 = loc("CWE617_Reachable_Assertion__zero_12.c":87:15)
#loc30 = loc("CWE617_Reachable_Assertion__zero_12.c":75:1)
#loc31 = loc("CWE617_Reachable_Assertion__zero_12.c":90:1)
#loc36 = loc("CWE617_Reachable_Assertion__zero_12.c":76:1)
#loc37 = loc("CWE617_Reachable_Assertion__zero_12.c":78:27)
#loc38 = loc("CWE617_Reachable_Assertion__zero_12.c":78:22)
#loc39 = loc("CWE617_Reachable_Assertion__zero_12.c":78:5)
#loc40 = loc("CWE617_Reachable_Assertion__zero_12.c":80:5)
#loc41 = loc("CWE617_Reachable_Assertion__zero_12.c":81:5)
#loc42 = loc("CWE617_Reachable_Assertion__zero_12.c":81:46)
#loc43 = loc("CWE617_Reachable_Assertion__zero_12.c":82:5)
#loc44 = loc("CWE617_Reachable_Assertion__zero_12.c":85:5)
#loc45 = loc("CWE617_Reachable_Assertion__zero_12.c":86:5)
#loc46 = loc("CWE617_Reachable_Assertion__zero_12.c":86:45)
#loc47 = loc("CWE617_Reachable_Assertion__zero_12.c":87:5)
#loc48 = loc("CWE617_Reachable_Assertion__zero_12.c":89:12)
#loc49 = loc("CWE617_Reachable_Assertion__zero_12.c":89:5)
#loc50 = loc("CWE617_Reachable_Assertion__zero_12.c":50:9)
#loc51 = loc("CWE617_Reachable_Assertion__zero_12.c":43:1)
#loc52 = loc("CWE617_Reachable_Assertion__zero_12.c":59:1)
#loc53 = loc("CWE617_Reachable_Assertion__zero_12.c":45:5)
#loc54 = loc("CWE617_Reachable_Assertion__zero_12.c":58:5)
#loc55 = loc("CWE617_Reachable_Assertion__zero_12.c":45:8)
#loc56 = loc("CWE617_Reachable_Assertion__zero_12.c":45:33)
#loc57 = loc("CWE617_Reachable_Assertion__zero_12.c":46:5)
#loc58 = loc("CWE617_Reachable_Assertion__zero_12.c":51:5)
#loc59 = loc("CWE617_Reachable_Assertion__zero_12.c":53:5)
#loc60 = loc("CWE617_Reachable_Assertion__zero_12.c":57:9)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc63 = loc(fused[#loc7, #loc8])
#loc64 = loc(fused[#loc9, #loc10])
#loc65 = loc(fused[#loc11, #loc12])
#loc66 = loc(fused[#loc13, #loc14, #loc15, #loc10])
#loc67 = loc(fused[#loc16, #loc17])
#loc68 = loc(fused[#loc18, #loc19])
#loc69 = loc(fused[#loc20, #loc21])
#loc70 = loc(fused[#loc22, #loc23])
#loc71 = loc(fused[#loc24, #loc25])
#loc72 = loc(fused[#loc30, #loc31])
#loc75 = loc(fused[#loc41, #loc42])
#loc76 = loc(fused[#loc45, #loc46])
#loc77 = loc(fused[#loc49, #loc48])
#loc78 = loc(fused[#loc51, #loc52])
#loc79 = loc(fused[#loc53, #loc54])
#loc80 = loc(fused[#loc55, #loc56])
#loc81 = loc(fused[#loc57, #loc58, #loc59, #loc54])
