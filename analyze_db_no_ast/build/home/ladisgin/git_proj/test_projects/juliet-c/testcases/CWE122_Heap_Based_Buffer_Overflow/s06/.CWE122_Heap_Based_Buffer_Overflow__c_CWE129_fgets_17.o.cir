!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc351)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc352)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc353)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc354)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc355)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc356)
  cir.func private  @printIntLine(!s32i) loc(#loc357)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc358)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc360)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc361)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc362)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc27)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc363)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc31)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc366)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc35)
        cir.condition(%9) loc(#loc35)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc369)
            %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc369)
            cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc369)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
              %9 = cir.const #cir.int<3> : !s32i loc(#loc44)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc44)
              %11 = cir.const #cir.int<4> : !u64i loc(#loc44)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc44)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc44)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc44)
              %15 = cir.binop(add, %12, %14) : !u64i loc(#loc44)
              %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc44)
              %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc352)
              %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc45)
              %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc46)
              %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc47)
              %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc371)
              %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc48)
              cir.if %23 {
                %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc52)
                %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc53)
                cir.store %25, %2 : !s32i, !cir.ptr<!s32i> loc(#loc373)
              } else {
                %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc56)
              } loc(#loc372)
            } loc(#loc370)
          } loc(#loc368)
        } loc(#loc367)
        cir.yield loc(#loc30)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc58)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc374)
        cir.yield loc(#loc364)
      } loc(#loc364)
    } loc(#loc364)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc61)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc376)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc377)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc65)
        cir.condition(%9) loc(#loc65)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc380)
            %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc381)
            %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc73)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc74)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc74)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc382)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc383)
            %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc73)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc384)
            cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc381)
            cir.scope {
              %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
              %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc80)
              %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc80)
              %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc386)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc81)
              cir.if %22 {
                %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc83)
                %24 = cir.const #cir.int<1> : !s32i loc(#loc84)
                %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc85)
                cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc83)
              } loc(#loc387)
            } loc(#loc385)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc88)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc389)
              cir.for : cond {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc91)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc390)
                %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc92)
                cir.condition(%22) loc(#loc92)
              } body {
                cir.scope {
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc94)
                  %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
                  %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc97)
                  cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc392)
                } loc(#loc391)
                cir.yield loc(#loc87)
              } step {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc99)
                cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc393)
                cir.yield loc(#loc388)
              } loc(#loc388)
            } loc(#loc388)
            cir.scope {
              %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc103)
              %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc395)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc104)
              cir.if %21 {
                %22 = cir.const #cir.int<1> : !s32i loc(#loc108)
                %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
                %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc111)
                cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc397)
                cir.scope {
                  %26 = cir.const #cir.int<0> : !s32i loc(#loc114)
                  cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc399)
                  cir.for : cond {
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                    %28 = cir.const #cir.int<10> : !s32i loc(#loc117)
                    %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc400)
                    %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc118)
                    cir.condition(%30) loc(#loc118)
                  } body {
                    cir.scope {
                      %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
                      %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc122)
                      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc123)
                    } loc(#loc401)
                    cir.yield loc(#loc113)
                  } step {
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc125)
                    cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc402)
                    cir.yield loc(#loc398)
                  } loc(#loc398)
                } loc(#loc398)
              } else {
                %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc126)
              } loc(#loc396)
            } loc(#loc394)
            %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc127)
            %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc128)
            cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc127)
          } loc(#loc379)
        } loc(#loc378)
        cir.yield loc(#loc60)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc130)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc403)
        cir.yield loc(#loc375)
      } loc(#loc375)
    } loc(#loc375)
    cir.return loc(#loc20)
  } loc(#loc359)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc405)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc133)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc406)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc135)
    cir.return loc(#loc132)
  } loc(#loc404)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc137)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc408)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc409)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc410)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc146)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc411)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc150)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc413)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc153)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc414)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc154)
        cir.condition(%9) loc(#loc154)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc417)
            %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc417)
            cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc417)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc162)
              %9 = cir.const #cir.int<3> : !s32i loc(#loc163)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc163)
              %11 = cir.const #cir.int<4> : !u64i loc(#loc163)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc163)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc163)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc163)
              %15 = cir.binop(add, %12, %14) : !u64i loc(#loc163)
              %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc163)
              %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc352)
              %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc164)
              %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc165)
              %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc166)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc166)
              %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc419)
              %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc167)
              cir.if %23 {
                %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc171)
                %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc172)
                cir.store %25, %2 : !s32i, !cir.ptr<!s32i> loc(#loc421)
              } else {
                %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc175)
                %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc175)
                cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc176)
              } loc(#loc420)
            } loc(#loc418)
          } loc(#loc416)
        } loc(#loc415)
        cir.yield loc(#loc149)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc178)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc422)
        cir.yield loc(#loc412)
      } loc(#loc412)
    } loc(#loc412)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc181)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc424)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc183)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc184)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc425)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc185)
        cir.condition(%9) loc(#loc185)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc428)
            %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc429)
            %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc193)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc194)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc194)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc430)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc431)
            %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc193)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc432)
            cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc429)
            cir.scope {
              %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc199)
              %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc200)
              %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc200)
              %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc434)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc201)
              cir.if %22 {
                %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc203)
                %24 = cir.const #cir.int<1> : !s32i loc(#loc204)
                %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc205)
                cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc203)
              } loc(#loc435)
            } loc(#loc433)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc208)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc437)
              cir.for : cond {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc210)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc211)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc438)
                %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc212)
                cir.condition(%22) loc(#loc212)
              } body {
                cir.scope {
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc214)
                  %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
                  %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc216)
                  %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc217)
                  cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc440)
                } loc(#loc439)
                cir.yield loc(#loc207)
              } step {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc218)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc219)
                cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc441)
                cir.yield loc(#loc436)
              } loc(#loc436)
            } loc(#loc436)
            cir.scope {
              %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc223)
              %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc443)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc224)
              %22 = cir.ternary(%21, true {
                %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                %24 = cir.const #cir.int<10> : !s32i loc(#loc227)
                %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc444)
                %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc229)
                %27 = cir.ternary(%26, true {
                  %28 = cir.const #true loc(#loc225)
                  cir.yield %28 : !cir.bool loc(#loc225)
                }, false {
                  %28 = cir.const #false loc(#loc225)
                  cir.yield %28 : !cir.bool loc(#loc225)
                }) : (!cir.bool) -> !cir.bool loc(#loc225)
                cir.yield %27 : !cir.bool loc(#loc225)
              }, false {
                %23 = cir.const #false loc(#loc225)
                cir.yield %23 : !cir.bool loc(#loc225)
              }) : (!cir.bool) -> !cir.bool loc(#loc225)
              cir.if %22 {
                %23 = cir.const #cir.int<1> : !s32i loc(#loc233)
                %24 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc234)
                %25 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc235)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc236)
                cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc446)
                cir.scope {
                  %27 = cir.const #cir.int<0> : !s32i loc(#loc239)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc448)
                  cir.for : cond {
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc241)
                    %29 = cir.const #cir.int<10> : !s32i loc(#loc242)
                    %30 = cir.cmp(lt, %28, %29) : !s32i, !s32i loc(#loc449)
                    %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc243)
                    cir.condition(%31) loc(#loc243)
                  } body {
                    cir.scope {
                      %28 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc245)
                      %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                      %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc247)
                      %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                      cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc248)
                    } loc(#loc450)
                    cir.yield loc(#loc238)
                  } step {
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc249)
                    %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc250)
                    cir.store %29, %6 : !s32i, !cir.ptr<!s32i> loc(#loc451)
                    cir.yield loc(#loc447)
                  } loc(#loc447)
                } loc(#loc447)
              } else {
                %23 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc137)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc137)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc251)
              } loc(#loc445)
            } loc(#loc442)
            %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc252)
            %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc253)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc253)
            cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc252)
          } loc(#loc427)
        } loc(#loc426)
        cir.yield loc(#loc180)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc254)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc255)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc452)
        cir.yield loc(#loc423)
      } loc(#loc423)
    } loc(#loc423)
    cir.return loc(#loc139)
  } loc(#loc407)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc454)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc455)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc456)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc263)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc264)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc457)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc268)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc459)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc270)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc271)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc460)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc272)
        cir.condition(%9) loc(#loc272)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc274)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc462)
        } loc(#loc461)
        cir.yield loc(#loc267)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc276)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc277)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc463)
        cir.yield loc(#loc458)
      } loc(#loc458)
    } loc(#loc458)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc280)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc465)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc282)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc283)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc466)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc284)
        cir.condition(%9) loc(#loc284)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc469)
            %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc470)
            %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc292)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc293)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc293)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc471)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc472)
            %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc292)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc473)
            cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc470)
            cir.scope {
              %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc298)
              %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc299)
              %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc299)
              %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc475)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc300)
              cir.if %22 {
                %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc302)
                %24 = cir.const #cir.int<1> : !s32i loc(#loc303)
                %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc304)
                cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc302)
              } loc(#loc476)
            } loc(#loc474)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc307)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc478)
              cir.for : cond {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc309)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc310)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc479)
                %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc311)
                cir.condition(%22) loc(#loc311)
              } body {
                cir.scope {
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc313)
                  %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc314)
                  %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc315)
                  %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc316)
                  cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc481)
                } loc(#loc480)
                cir.yield loc(#loc306)
              } step {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc317)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc318)
                cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc482)
                cir.yield loc(#loc477)
              } loc(#loc477)
            } loc(#loc477)
            cir.scope {
              %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc321)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc322)
              %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc484)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc323)
              cir.if %21 {
                %22 = cir.const #cir.int<1> : !s32i loc(#loc327)
                %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc328)
                %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc329)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc330)
                cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc486)
                cir.scope {
                  %26 = cir.const #cir.int<0> : !s32i loc(#loc333)
                  cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc488)
                  cir.for : cond {
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc335)
                    %28 = cir.const #cir.int<10> : !s32i loc(#loc336)
                    %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc489)
                    %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc337)
                    cir.condition(%30) loc(#loc337)
                  } body {
                    cir.scope {
                      %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc339)
                      %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc340)
                      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc341)
                      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc339)
                      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc342)
                    } loc(#loc490)
                    cir.yield loc(#loc332)
                  } step {
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc343)
                    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc344)
                    cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc491)
                    cir.yield loc(#loc487)
                  } loc(#loc487)
                } loc(#loc487)
              } else {
                %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc345)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc345)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc346)
              } loc(#loc485)
            } loc(#loc483)
            %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc347)
            %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc348)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc348)
            cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc347)
          } loc(#loc468)
        } loc(#loc467)
        cir.yield loc(#loc279)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc349)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc350)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc492)
        cir.yield loc(#loc464)
      } loc(#loc464)
    } loc(#loc464)
    cir.return loc(#loc257)
  } loc(#loc453)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":42:27)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":70:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":75:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":26:11)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":27:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":27:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":29:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":29:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":29:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":45:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:16)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:20)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:18)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":31:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":44:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":33:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":33:49)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":43:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:36)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:53)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:63)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:60)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":36:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":39:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":41:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":38:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":38:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":38:17)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":38:40)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":42:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":74:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:16)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:20)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":47:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":48:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":73:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":49:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":49:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:58)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:35)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:42)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:47)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:57)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:43)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:40)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:39)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":56:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:22)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:18)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:25)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:29)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":54:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":55:29)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":55:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":55:24)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":55:25)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:34)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:33)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":59:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":71:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":59:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":59:25)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":59:22)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":60:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":67:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":69:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":61:32)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":61:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":61:24)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":61:28)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":66:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:25)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:21)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:28)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:32)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":64:17)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":65:34)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":65:41)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":65:42)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":65:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:37)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:36)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":70:17)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":72:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":72:18)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:24)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":178:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":182:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":180:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":180:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":181:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":181:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":127:27)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":82:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":132:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":84:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":84:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":84:11)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":85:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":85:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":87:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":87:12)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":87:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":103:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:16)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:20)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:18)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":89:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":90:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":102:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":91:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":91:49)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":101:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:23)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:36)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:53)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:63)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:60)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":94:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":97:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":99:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":96:29)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":96:24)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":96:17)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":96:40)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":100:27)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":100:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:24)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:23)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":131:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:16)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:20)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:18)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":105:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":106:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":130:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":107:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":107:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:58)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:35)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:42)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:47)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:57)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:43)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:17)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:27)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:24)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:33)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:34)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:40)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:39)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":114:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:22)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:18)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:25)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:29)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:27)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":112:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":113:29)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":113:17)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":113:24)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":113:25)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:34)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:33)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":128:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:25)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:22)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:27)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:30)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:38)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:40)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:35)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":117:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":124:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":126:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":118:32)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":118:17)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":118:24)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":118:28)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:17)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":123:17)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:25)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:21)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:28)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:32)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:30)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":121:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":122:34)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":122:41)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":122:42)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":122:21)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:37)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:36)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":127:17)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":129:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":129:18)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:24)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:23)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":135:1)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":176:1)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":137:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":137:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":137:11)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":138:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":138:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":140:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":140:12)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":140:5)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:5)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":146:5)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:16)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:20)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:18)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":142:5)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":145:16)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":145:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:24)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:23)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:5)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":175:5)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:9)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:16)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:20)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:18)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":148:5)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":149:9)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":174:9)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":150:13)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":150:17)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:13)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:58)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:35)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:42)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:47)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:57)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:43)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:17)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:27)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:24)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:33)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:34)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:40)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:39)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:13)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":157:13)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:22)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:18)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:25)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:29)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:27)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":155:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":156:29)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":156:17)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":156:24)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":156:25)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:34)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:33)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":160:13)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":172:13)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":160:17)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":160:25)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":160:22)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":161:13)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":168:13)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":170:13)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":162:32)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":162:17)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":162:24)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":162:28)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:17)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":167:17)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:25)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:21)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:28)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:32)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:30)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":165:17)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":166:34)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":166:41)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":166:42)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":166:21)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:37)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:36)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":171:27)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":171:17)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":173:13)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":173:18)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:24)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:23)
#loc351 = loc(fused[#loc1, #loc2])
#loc352 = loc(fused[#loc3, #loc4])
#loc353 = loc(fused[#loc5, #loc6])
#loc354 = loc(fused[#loc7, #loc8])
#loc355 = loc(fused[#loc10, #loc11])
#loc356 = loc(fused[#loc12, #loc13])
#loc357 = loc(fused[#loc14, #loc15])
#loc358 = loc(fused[#loc17, #loc18])
#loc359 = loc(fused[#loc19, #loc20])
#loc360 = loc(fused[#loc21, #loc22])
#loc361 = loc(fused[#loc21, #loc23])
#loc362 = loc(fused[#loc24, #loc25])
#loc363 = loc(fused[#loc28, #loc26])
#loc364 = loc(fused[#loc29, #loc30])
#loc365 = loc(fused[#loc32, #loc31])
#loc366 = loc(fused[#loc33, #loc34])
#loc367 = loc(fused[#loc36, #loc30])
#loc368 = loc(fused[#loc37, #loc38])
#loc369 = loc(fused[#loc39, #loc40])
#loc370 = loc(fused[#loc41, #loc42])
#loc371 = loc(fused[#loc46, #loc47])
#loc372 = loc(fused[#loc49, #loc50, #loc51, #loc42])
#loc373 = loc(fused[#loc54, #loc55])
#loc374 = loc(fused[#loc58, #loc57])
#loc375 = loc(fused[#loc59, #loc60])
#loc376 = loc(fused[#loc62, #loc61])
#loc377 = loc(fused[#loc63, #loc64])
#loc378 = loc(fused[#loc66, #loc60])
#loc379 = loc(fused[#loc67, #loc68])
#loc380 = loc(fused[#loc69, #loc70])
#loc381 = loc(fused[#loc71, #loc72])
#loc382 = loc(fused[#loc75, #loc76])
#loc383 = loc(fused[#loc74, #loc76])
#loc384 = loc(fused[#loc73, #loc72])
#loc385 = loc(fused[#loc77, #loc78])
#loc386 = loc(fused[#loc79, #loc80])
#loc387 = loc(fused[#loc82, #loc78])
#loc388 = loc(fused[#loc86, #loc87])
#loc389 = loc(fused[#loc89, #loc88])
#loc390 = loc(fused[#loc90, #loc91])
#loc391 = loc(fused[#loc93, #loc87])
#loc392 = loc(fused[#loc95, #loc94])
#loc393 = loc(fused[#loc99, #loc98])
#loc394 = loc(fused[#loc100, #loc101])
#loc395 = loc(fused[#loc102, #loc103])
#loc396 = loc(fused[#loc105, #loc106, #loc107, #loc101])
#loc397 = loc(fused[#loc109, #loc108])
#loc398 = loc(fused[#loc112, #loc113])
#loc399 = loc(fused[#loc115, #loc114])
#loc400 = loc(fused[#loc116, #loc117])
#loc401 = loc(fused[#loc119, #loc113])
#loc402 = loc(fused[#loc125, #loc124])
#loc403 = loc(fused[#loc130, #loc129])
#loc404 = loc(fused[#loc131, #loc132])
#loc405 = loc(fused[#loc133, #loc134])
#loc406 = loc(fused[#loc135, #loc136])
#loc407 = loc(fused[#loc138, #loc139])
#loc408 = loc(fused[#loc140, #loc141])
#loc409 = loc(fused[#loc140, #loc142])
#loc410 = loc(fused[#loc143, #loc144])
#loc411 = loc(fused[#loc147, #loc145])
#loc412 = loc(fused[#loc148, #loc149])
#loc413 = loc(fused[#loc151, #loc150])
#loc414 = loc(fused[#loc152, #loc153])
#loc415 = loc(fused[#loc155, #loc149])
#loc416 = loc(fused[#loc156, #loc157])
#loc417 = loc(fused[#loc158, #loc159])
#loc418 = loc(fused[#loc160, #loc161])
#loc419 = loc(fused[#loc165, #loc166])
#loc420 = loc(fused[#loc168, #loc169, #loc170, #loc161])
#loc421 = loc(fused[#loc173, #loc174])
#loc422 = loc(fused[#loc178, #loc177])
#loc423 = loc(fused[#loc179, #loc180])
#loc424 = loc(fused[#loc182, #loc181])
#loc425 = loc(fused[#loc183, #loc184])
#loc426 = loc(fused[#loc186, #loc180])
#loc427 = loc(fused[#loc187, #loc188])
#loc428 = loc(fused[#loc189, #loc190])
#loc429 = loc(fused[#loc191, #loc192])
#loc430 = loc(fused[#loc195, #loc196])
#loc431 = loc(fused[#loc194, #loc196])
#loc432 = loc(fused[#loc193, #loc192])
#loc433 = loc(fused[#loc197, #loc198])
#loc434 = loc(fused[#loc199, #loc200])
#loc435 = loc(fused[#loc202, #loc198])
#loc436 = loc(fused[#loc206, #loc207])
#loc437 = loc(fused[#loc209, #loc208])
#loc438 = loc(fused[#loc210, #loc211])
#loc439 = loc(fused[#loc213, #loc207])
#loc440 = loc(fused[#loc215, #loc214])
#loc441 = loc(fused[#loc219, #loc218])
#loc442 = loc(fused[#loc220, #loc221])
#loc443 = loc(fused[#loc222, #loc223])
#loc444 = loc(fused[#loc226, #loc228])
#loc445 = loc(fused[#loc230, #loc231, #loc232, #loc221])
#loc446 = loc(fused[#loc234, #loc233])
#loc447 = loc(fused[#loc237, #loc238])
#loc448 = loc(fused[#loc240, #loc239])
#loc449 = loc(fused[#loc241, #loc242])
#loc450 = loc(fused[#loc244, #loc238])
#loc451 = loc(fused[#loc250, #loc249])
#loc452 = loc(fused[#loc255, #loc254])
#loc453 = loc(fused[#loc256, #loc257])
#loc454 = loc(fused[#loc258, #loc259])
#loc455 = loc(fused[#loc258, #loc260])
#loc456 = loc(fused[#loc261, #loc262])
#loc457 = loc(fused[#loc265, #loc263])
#loc458 = loc(fused[#loc266, #loc267])
#loc459 = loc(fused[#loc269, #loc268])
#loc460 = loc(fused[#loc270, #loc271])
#loc461 = loc(fused[#loc273, #loc267])
#loc462 = loc(fused[#loc275, #loc274])
#loc463 = loc(fused[#loc277, #loc276])
#loc464 = loc(fused[#loc278, #loc279])
#loc465 = loc(fused[#loc281, #loc280])
#loc466 = loc(fused[#loc282, #loc283])
#loc467 = loc(fused[#loc285, #loc279])
#loc468 = loc(fused[#loc286, #loc287])
#loc469 = loc(fused[#loc288, #loc289])
#loc470 = loc(fused[#loc290, #loc291])
#loc471 = loc(fused[#loc294, #loc295])
#loc472 = loc(fused[#loc293, #loc295])
#loc473 = loc(fused[#loc292, #loc291])
#loc474 = loc(fused[#loc296, #loc297])
#loc475 = loc(fused[#loc298, #loc299])
#loc476 = loc(fused[#loc301, #loc297])
#loc477 = loc(fused[#loc305, #loc306])
#loc478 = loc(fused[#loc308, #loc307])
#loc479 = loc(fused[#loc309, #loc310])
#loc480 = loc(fused[#loc312, #loc306])
#loc481 = loc(fused[#loc314, #loc313])
#loc482 = loc(fused[#loc318, #loc317])
#loc483 = loc(fused[#loc319, #loc320])
#loc484 = loc(fused[#loc321, #loc322])
#loc485 = loc(fused[#loc324, #loc325, #loc326, #loc320])
#loc486 = loc(fused[#loc328, #loc327])
#loc487 = loc(fused[#loc331, #loc332])
#loc488 = loc(fused[#loc334, #loc333])
#loc489 = loc(fused[#loc335, #loc336])
#loc490 = loc(fused[#loc338, #loc332])
#loc491 = loc(fused[#loc344, #loc343])
#loc492 = loc(fused[#loc350, #loc349])
