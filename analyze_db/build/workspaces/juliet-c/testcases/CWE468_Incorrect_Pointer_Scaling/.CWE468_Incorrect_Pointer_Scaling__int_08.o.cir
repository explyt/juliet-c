!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE468_Incorrect_Pointer_Scaling/CWE468_Incorrect_Pointer_Scaling__int_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.good2.intArray = #cir.const_array<[#cir.int<1> : !s32i, #cir.int<2> : !s32i, #cir.int<3> : !s32i, #cir.int<4> : !s32i, #cir.int<5> : !s32i, #cir.int<6> : !s32i, #cir.int<7> : !s32i, #cir.int<8> : !s32i, #cir.int<9> : !s32i, #cir.int<10> : !s32i]> : !cir.array<!s32i x 10> loc(#loc88)
  cir.global "private" constant cir_private @__const.good1.intArray = #cir.const_array<[#cir.int<1> : !s32i, #cir.int<2> : !s32i, #cir.int<3> : !s32i, #cir.int<4> : !s32i, #cir.int<5> : !s32i, #cir.int<6> : !s32i, #cir.int<7> : !s32i, #cir.int<8> : !s32i, #cir.int<9> : !s32i, #cir.int<10> : !s32i]> : !cir.array<!s32i x 10> loc(#loc89)
  cir.global "private" constant cir_private @__const.CWE468_Incorrect_Pointer_Scaling__int_08_bad.intArray = #cir.const_array<[#cir.int<1> : !s32i, #cir.int<2> : !s32i, #cir.int<3> : !s32i, #cir.int<4> : !s32i, #cir.int<5> : !s32i, #cir.int<6> : !s32i, #cir.int<7> : !s32i, #cir.int<8> : !s32i, #cir.int<9> : !s32i, #cir.int<10> : !s32i]> : !cir.array<!s32i x 10> loc(#loc90)
  cir.func private @printIntLine(!s32i) loc(#loc91)
  cir.func no_proto @CWE468_Incorrect_Pointer_Scaling__int_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["intArray"] {alignment = 16 : i64} loc(#loc90)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer", init] {alignment = 8 : i64} loc(#loc93)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["toPrint", init] {alignment = 4 : i64} loc(#loc94)
    cir.br ^bb1 loc(#loc95)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc96)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc97)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc98)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.CWE468_Incorrect_Pointer_Scaling__int_08_bad.intArray : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc90)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc90)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc12)
    cir.store %7, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc93)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc23)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc23)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc99)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc100)
    %13 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc26)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc29)
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc16)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc10)
  } loc(#loc92)
  cir.func no_proto @CWE468_Incorrect_Pointer_Scaling__int_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc103)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc101)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc37)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc38)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    cir.return %2 : !s32i loc(#loc105)
  } loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["intArray"] {alignment = 16 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["toPrint", init] {alignment = 4 : i64} loc(#loc109)
    cir.br ^bb1 loc(#loc110)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc111)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc51)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc112)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb6 loc(#loc54)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc113)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @__const.good1.intArray : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc89)
    cir.copy %8 to %0 : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc89)
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc46)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc108)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc60)
    %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc61)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc64)
    cir.br ^bb5 loc(#loc58)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc50)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc50)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc44)
  } loc(#loc107)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.return %2 : !s32i loc(#loc115)
  } loc(#loc114)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["intArray"] {alignment = 16 : i64} loc(#loc88)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer", init] {alignment = 8 : i64} loc(#loc117)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["toPrint", init] {alignment = 4 : i64} loc(#loc118)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc120)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc77)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc77)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc121)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc122)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.good2.intArray : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc88)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc88)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc72)
    cir.store %7, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc117)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %10 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc84)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc87)
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc76)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc76)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc70)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE468_Incorrect_Pointer_Scaling/CWE468_Incorrect_Pointer_Scaling__int_08.c":0:0)
#loc1 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":79:13)
#loc2 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":79:64)
#loc3 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":63:13)
#loc4 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":63:64)
#loc5 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":38:13)
#loc6 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":38:64)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":33:1)
#loc10 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":46:1)
#loc11 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":39:13)
#loc12 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":39:31)
#loc13 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":42:13)
#loc14 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":42:55)
#loc15 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":35:5)
#loc16 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":45:5)
#loc17 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":35:8)
#loc18 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":35:26)
#loc19 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":36:5)
#loc20 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":37:9)
#loc21 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":44:9)
#loc22 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":42:29)
#loc23 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":42:41)
#loc24 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":42:43)
#loc25 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":42:53)
#loc26 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":42:39)
#loc27 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":42:27)
#loc28 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":43:26)
#loc29 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":43:13)
#loc30 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":89:1)
#loc31 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":93:1)
#loc32 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":91:5)
#loc33 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":91:11)
#loc34 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":92:5)
#loc35 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":92:11)
#loc36 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":21:1)
#loc37 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":24:1)
#loc38 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":23:12)
#loc39 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":23:5)
#loc40 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":58:19)
#loc43 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":53:1)
#loc44 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":71:1)
#loc45 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":64:13)
#loc46 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":64:31)
#loc47 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":67:13)
#loc48 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":67:41)
#loc49 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":55:5)
#loc50 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":70:5)
#loc51 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":55:8)
#loc52 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":55:27)
#loc53 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":56:5)
#loc54 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":59:5)
#loc55 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":61:5)
#loc56 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":58:9)
#loc57 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":62:9)
#loc58 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":69:9)
#loc59 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":67:29)
#loc60 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":67:40)
#loc61 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":67:39)
#loc62 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":67:27)
#loc63 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":68:26)
#loc64 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":68:13)
#loc65 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":26:1)
#loc66 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":29:1)
#loc67 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":28:12)
#loc68 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":28:5)
#loc69 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":74:1)
#loc70 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":87:1)
#loc71 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":80:13)
#loc72 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":80:31)
#loc73 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":83:13)
#loc74 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":83:41)
#loc75 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":76:5)
#loc76 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":86:5)
#loc77 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":76:8)
#loc78 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":76:26)
#loc79 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":77:5)
#loc80 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":78:9)
#loc81 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":85:9)
#loc82 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":83:29)
#loc83 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":83:40)
#loc84 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":83:39)
#loc85 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":83:27)
#loc86 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":84:26)
#loc87 = loc("CWE468_Incorrect_Pointer_Scaling__int_08.c":84:13)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc9, #loc10])
#loc93 = loc(fused[#loc11, #loc12])
#loc94 = loc(fused[#loc13, #loc14])
#loc95 = loc(fused[#loc15, #loc16])
#loc96 = loc(fused[#loc17, #loc18])
#loc97 = loc(fused[#loc19, #loc16])
#loc98 = loc(fused[#loc20, #loc21])
#loc99 = loc(fused[#loc24, #loc25])
#loc100 = loc(fused[#loc23, #loc25])
#loc101 = loc(fused[#loc30, #loc31])
#loc102 = loc(fused[#loc32, #loc33])
#loc103 = loc(fused[#loc34, #loc35])
#loc104 = loc(fused[#loc36, #loc37])
#loc105 = loc(fused[#loc39, #loc38])
#loc106 = loc(fused[#loc40, #loc41])
#loc107 = loc(fused[#loc43, #loc44])
#loc108 = loc(fused[#loc45, #loc46])
#loc109 = loc(fused[#loc47, #loc48])
#loc110 = loc(fused[#loc49, #loc50])
#loc111 = loc(fused[#loc51, #loc52])
#loc112 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc113 = loc(fused[#loc57, #loc58])
#loc114 = loc(fused[#loc65, #loc66])
#loc115 = loc(fused[#loc68, #loc67])
#loc116 = loc(fused[#loc69, #loc70])
#loc117 = loc(fused[#loc71, #loc72])
#loc118 = loc(fused[#loc73, #loc74])
#loc119 = loc(fused[#loc75, #loc76])
#loc120 = loc(fused[#loc77, #loc78])
#loc121 = loc(fused[#loc79, #loc76])
#loc122 = loc(fused[#loc80, #loc81])
