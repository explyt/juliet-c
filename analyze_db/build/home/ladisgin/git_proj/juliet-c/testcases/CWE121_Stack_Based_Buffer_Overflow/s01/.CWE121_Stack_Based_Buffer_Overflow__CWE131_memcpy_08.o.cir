!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc107)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc113)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc114)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc16)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc16)
    cir.store %10, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc115)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc116)
  ^bb5:  // pred: ^bb4
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc109)
    cir.store %11, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc109)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc20)
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc21)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
    %16 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc22)
    %18 = cir.const #cir.int<4> : !u64i loc(#loc117)
    %19 = cir.binop(mul, %17, %18) : !u64i loc(#loc118)
    cir.libc.memcpy %19 bytes from %15 to %13 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc119)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc29)
    %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc30)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc108)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc120)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc38)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc39)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    cir.return %2 : !s32i loc(#loc124)
  } loc(#loc123)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc127)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc128)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc50)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc131)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc54)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc54)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc132)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.br ^bb4 loc(#loc57)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<10> : !s32i loc(#loc60)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc60)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc60)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc60)
    %12 = cir.alloca !u8i, !cir.ptr<!u8i>, %11 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc60)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc60)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc60)
    cir.store %14, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc53)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc134)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc127)
    cir.store %15, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc127)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc65)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc65)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc66)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc66)
    %22 = cir.const #cir.int<4> : !u64i loc(#loc135)
    %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc136)
    cir.libc.memcpy %23 bytes from %19 to %17 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc137)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc73)
    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc74)
    cir.br ^bb7 loc(#loc63)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc45)
  } loc(#loc126)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc76)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.return %2 : !s32i loc(#loc139)
  } loc(#loc138)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc85)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
    cir.br ^bb1 loc(#loc144)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc145)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc89)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc146)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<10> : !s32i loc(#loc92)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc92)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc92)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc92)
    %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc92)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc92)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc147)
    cir.br ^bb3 loc(#loc88)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc148)
  ^bb5:  // pred: ^bb4
    %13 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc141)
    cir.store %13, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc141)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc97)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
    %18 = cir.const #cir.int<10> : !s32i loc(#loc98)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc98)
    %20 = cir.const #cir.int<4> : !u64i loc(#loc149)
    %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc150)
    cir.libc.memcpy %21 bytes from %17 to %15 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc151)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc104)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc105)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc106)
    cir.br ^bb6 loc(#loc95)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc80)
  } loc(#loc140)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":35:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":50:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":45:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":45:28)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":37:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":37:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":38:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":38:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":39:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":43:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":39:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":39:26)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":40:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":42:23)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":42:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":44:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":49:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:22)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:30)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:33)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:43)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:44)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":48:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":48:27)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":48:28)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":48:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":97:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":101:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":99:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":99:14)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":100:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":100:14)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":23:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":26:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":25:12)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":25:5)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":64:19)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":57:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":77:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":72:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":72:28)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":59:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":59:11)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":60:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":60:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":61:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":70:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":61:8)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":61:27)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":62:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":65:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":67:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":64:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":69:23)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":69:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":71:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":76:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:16)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:30)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:33)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:43)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:44)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":75:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":75:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":75:28)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":75:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":28:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":31:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":30:12)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":30:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":80:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":95:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":90:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":90:28)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":82:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":82:11)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":83:12)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":83:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":84:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":88:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":84:8)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":84:26)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":85:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":87:23)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":87:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":89:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":94:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:16)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:22)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:33)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:43)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:44)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":93:22)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":93:27)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":93:28)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":93:9)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc10, #loc9])
#loc112 = loc(fused[#loc11, #loc12])
#loc113 = loc(fused[#loc13, #loc14])
#loc114 = loc(fused[#loc15, #loc12])
#loc115 = loc(fused[#loc17, #loc16])
#loc116 = loc(fused[#loc18, #loc19])
#loc117 = loc(fused[#loc23, #loc24])
#loc118 = loc(fused[#loc22, #loc24])
#loc119 = loc(fused[#loc25, #loc26])
#loc120 = loc(fused[#loc31, #loc32])
#loc121 = loc(fused[#loc33, #loc34])
#loc122 = loc(fused[#loc35, #loc36])
#loc123 = loc(fused[#loc37, #loc38])
#loc124 = loc(fused[#loc40, #loc39])
#loc125 = loc(fused[#loc41, #loc42])
#loc126 = loc(fused[#loc44, #loc45])
#loc127 = loc(fused[#loc46, #loc47])
#loc128 = loc(fused[#loc48, #loc49])
#loc129 = loc(fused[#loc51, #loc50])
#loc130 = loc(fused[#loc52, #loc53])
#loc131 = loc(fused[#loc54, #loc55])
#loc132 = loc(fused[#loc56, #loc57, #loc58, #loc53])
#loc133 = loc(fused[#loc61, #loc60])
#loc134 = loc(fused[#loc62, #loc63])
#loc135 = loc(fused[#loc67, #loc68])
#loc136 = loc(fused[#loc66, #loc68])
#loc137 = loc(fused[#loc69, #loc70])
#loc138 = loc(fused[#loc75, #loc76])
#loc139 = loc(fused[#loc78, #loc77])
#loc140 = loc(fused[#loc79, #loc80])
#loc141 = loc(fused[#loc81, #loc82])
#loc142 = loc(fused[#loc83, #loc84])
#loc143 = loc(fused[#loc86, #loc85])
#loc144 = loc(fused[#loc87, #loc88])
#loc145 = loc(fused[#loc89, #loc90])
#loc146 = loc(fused[#loc91, #loc88])
#loc147 = loc(fused[#loc93, #loc92])
#loc148 = loc(fused[#loc94, #loc95])
#loc149 = loc(fused[#loc99, #loc100])
#loc150 = loc(fused[#loc98, #loc100])
#loc151 = loc(fused[#loc101, #loc102])
