!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":169:10)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":169:14)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":169:20)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":169:32)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:28)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:28)
#true = #cir.bool<true> : !cir.bool
#loc226 = loc(fused[#loc55, #loc56])
#loc227 = loc(fused[#loc57, #loc58])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc204)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc205)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc207)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_09_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc204)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc22)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc206)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc22)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc214)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc204)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc215)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc216)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc30)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc32)
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc25)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc208)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_09_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc217)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc222)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc223)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc227)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc62)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_09_good : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE190_Integer_Overflow__int_fscanf_square_09_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_09_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call @CWE190_Integer_Overflow__int_fscanf_square_09_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    cir.return %17 : !s32i loc(#loc230)
  } loc(#loc225)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc204)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc237)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc90)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc206)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc90)
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc238)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc231)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc239)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb21 loc(#loc97)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc240)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc103)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc103)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc103)
    %22 = cir.cmp(gt, %17, %21) : !s32i, !cir.bool loc(#loc241)
    cir.brcond %22 ^bb9, ^bb14 loc(#loc104)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %24 = cir.abs %23 poison : !s32i loc(#loc106)
    %25 = cir.cast(integral, %24 : !s32i), !s64i loc(#loc106)
    %26 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc107)
    %27 = cir.const #cir.int<2147483647> : !s32i loc(#loc108)
    %28 = cir.cast(int_to_float, %27 : !s32i), !cir.double loc(#loc108)
    %29 = cir.call @sqrt(%28) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc107)
    %30 = cir.cast(float_to_int, %29 : !cir.double), !s64i loc(#loc107)
    %31 = cir.cmp(lt, %25, %30) : !s64i, !cir.bool loc(#loc242)
    cir.brcond %31 ^bb10, ^bb11 loc(#loc104)
  ^bb10:  // pred: ^bb9
    %32 = cir.const #true loc(#loc104)
    cir.br ^bb12(%32 : !cir.bool) loc(#loc104)
  ^bb11:  // pred: ^bb9
    %33 = cir.const #false loc(#loc104)
    cir.br ^bb12(%33 : !cir.bool) loc(#loc104)
  ^bb12(%34: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:28)):  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc104)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15(%34 : !cir.bool) loc(#loc104)
  ^bb14:  // pred: ^bb8
    %35 = cir.const #false loc(#loc104)
    cir.br ^bb15(%35 : !cir.bool) loc(#loc104)
  ^bb15(%36: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc104)
  ^bb16:  // pred: ^bb15
    cir.brcond %36 ^bb17, ^bb18 loc(#loc243)
  ^bb17:  // pred: ^bb16
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %38 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %39 = cir.binop(mul, %37, %38) nsw : !s32i loc(#loc113)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc115)
    cir.br ^bb19 loc(#loc111)
  ^bb18:  // pred: ^bb16
    %41 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb19 loc(#loc101)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc101)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc94)
  ^bb21:  // 2 preds: ^bb6, ^bb20
    cir.br ^bb22 loc(#loc94)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc79)
  } loc(#loc232)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb1 loc(#loc248)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc204)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc249)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc129)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc206)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc130)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc131)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc131)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc129)
    cir.br ^bb3 loc(#loc126)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc250)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc204)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %14 ^bb6, ^bb20 loc(#loc251)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc252)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc139)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc139)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc139)
    %20 = cir.cmp(gt, %15, %19) : !s32i, !cir.bool loc(#loc253)
    cir.brcond %20 ^bb8, ^bb13 loc(#loc140)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %22 = cir.abs %21 poison : !s32i loc(#loc142)
    %23 = cir.cast(integral, %22 : !s32i), !s64i loc(#loc142)
    %24 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc143)
    %25 = cir.const #cir.int<2147483647> : !s32i loc(#loc144)
    %26 = cir.cast(int_to_float, %25 : !s32i), !cir.double loc(#loc144)
    %27 = cir.call @sqrt(%26) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc143)
    %28 = cir.cast(float_to_int, %27 : !cir.double), !s64i loc(#loc143)
    %29 = cir.cmp(lt, %23, %28) : !s64i, !cir.bool loc(#loc254)
    cir.brcond %29 ^bb9, ^bb10 loc(#loc140)
  ^bb9:  // pred: ^bb8
    %30 = cir.const #true loc(#loc140)
    cir.br ^bb11(%30 : !cir.bool) loc(#loc140)
  ^bb10:  // pred: ^bb8
    %31 = cir.const #false loc(#loc140)
    cir.br ^bb11(%31 : !cir.bool) loc(#loc140)
  ^bb11(%32: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:28)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc140)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14(%32 : !cir.bool) loc(#loc140)
  ^bb13:  // pred: ^bb7
    %33 = cir.const #false loc(#loc140)
    cir.br ^bb14(%33 : !cir.bool) loc(#loc140)
  ^bb14(%34: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:28)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc140)
  ^bb15:  // pred: ^bb14
    cir.brcond %34 ^bb16, ^bb17 loc(#loc255)
  ^bb16:  // pred: ^bb15
    %35 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %36 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %37 = cir.binop(mul, %35, %36) nsw : !s32i loc(#loc149)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc151)
    cir.br ^bb18 loc(#loc147)
  ^bb17:  // pred: ^bb15
    %39 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc152)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc152)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    cir.br ^bb18 loc(#loc137)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc137)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc133)
  ^bb20:  // 2 preds: ^bb5, ^bb19
    cir.br ^bb21 loc(#loc133)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc118)
  } loc(#loc244)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc258)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc160)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    cir.br ^bb1 loc(#loc260)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc231)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc164)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc261)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc169)
    cir.br ^bb4 loc(#loc166)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc170)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc163)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc263)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc204)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc174)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc174)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc264)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc265)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc178)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc180)
    cir.br ^bb9 loc(#loc177)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc173)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc173)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc155)
  } loc(#loc256)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc267)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc268)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc187)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.br ^bb1 loc(#loc270)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc204)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc191)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc271)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc193)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    cir.br ^bb3 loc(#loc190)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc190)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc273)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc204)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc197)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc274)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc275)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc201)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc203)
    cir.br ^bb8 loc(#loc200)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc196)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc196)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc182)
  } loc(#loc266)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":32:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":24:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":42:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":38:13)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":38:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":28:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":29:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":32:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":32:16)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":34:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":41:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":34:8)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":35:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":36:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":40:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":38:26)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":39:26)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":39:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":152:1)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":158:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":154:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":154:14)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":155:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":155:14)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":156:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":156:14)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":157:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":157:14)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":174:15)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":176:15)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":179:15)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":181:15)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":169:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":184:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":170:1)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":172:27)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":172:22)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":172:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":174:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":175:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":175:56)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":176:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":179:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":180:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":180:55)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":181:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":183:12)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":183:5)
#loc73 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc74 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":62:19)
#loc76 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":74:23)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":49:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":77:1)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":69:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":69:33)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":51:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":51:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":53:12)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":53:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":54:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":58:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":54:8)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":55:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":57:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":57:16)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":57:23)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":59:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":76:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":59:8)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":60:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":63:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":65:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":62:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:9)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":75:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:13)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:20)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:35)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:31)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:49)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:62)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":67:69)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":68:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":71:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":73:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":69:26)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":70:26)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":70:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":74:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":80:1)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":103:1)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":95:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":95:33)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":82:5)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":82:9)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":84:12)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":84:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":85:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":89:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":85:8)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":86:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":88:9)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":88:16)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":88:23)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":90:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":102:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":90:8)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":91:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":101:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:13)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:20)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:35)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:31)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:49)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:62)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":93:69)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":94:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":97:9)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":99:9)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":95:26)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":96:26)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":96:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":100:23)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":100:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":106:1)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":129:1)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":125:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":125:33)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":108:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":108:9)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":110:12)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":110:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":111:5)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":120:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":111:8)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":112:5)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":115:5)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":117:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":114:19)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":114:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":119:16)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":119:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":121:5)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":128:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":121:8)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":122:5)
#loc176 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":123:9)
#loc177 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":127:9)
#loc178 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":125:26)
#loc179 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":126:26)
#loc180 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":126:13)
#loc181 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":132:1)
#loc182 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":150:1)
#loc183 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":146:13)
#loc184 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":146:33)
#loc185 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":134:5)
#loc186 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":134:9)
#loc187 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":136:12)
#loc188 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":136:5)
#loc189 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":137:5)
#loc190 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":141:5)
#loc191 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":137:8)
#loc192 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":138:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":140:16)
#loc194 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":140:9)
#loc195 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":142:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":149:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":142:8)
#loc198 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":143:5)
#loc199 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":144:9)
#loc200 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":148:9)
#loc201 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":146:26)
#loc202 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":147:26)
#loc203 = loc("CWE190_Integer_Overflow__int_fscanf_square_09.c":147:13)
#loc204 = loc(fused[#loc1, #loc2])
#loc205 = loc(fused[#loc3, #loc4])
#loc206 = loc(fused[#loc5, #loc6])
#loc207 = loc(fused[#loc8, #loc9])
#loc208 = loc(fused[#loc10, #loc11])
#loc209 = loc(fused[#loc12, #loc13])
#loc210 = loc(fused[#loc14, #loc15])
#loc211 = loc(fused[#loc17, #loc16])
#loc212 = loc(fused[#loc18, #loc19])
#loc213 = loc(fused[#loc21, #loc19])
#loc214 = loc(fused[#loc24, #loc25])
#loc215 = loc(fused[#loc27, #loc25])
#loc216 = loc(fused[#loc28, #loc29])
#loc217 = loc(fused[#loc33, #loc34])
#loc218 = loc(fused[#loc35, #loc36])
#loc219 = loc(fused[#loc37, #loc38])
#loc220 = loc(fused[#loc39, #loc40])
#loc221 = loc(fused[#loc41, #loc42])
#loc222 = loc(fused[#loc43, #loc44])
#loc223 = loc(fused[#loc45, #loc46])
#loc224 = loc(fused[#loc47, #loc48])
#loc225 = loc(fused[#loc53, #loc54])
#loc228 = loc(fused[#loc64, #loc65])
#loc229 = loc(fused[#loc68, #loc69])
#loc230 = loc(fused[#loc72, #loc71])
#loc231 = loc(fused[#loc73, #loc74])
#loc232 = loc(fused[#loc78, #loc79])
#loc233 = loc(fused[#loc80, #loc81])
#loc234 = loc(fused[#loc82, #loc83])
#loc235 = loc(fused[#loc85, #loc84])
#loc236 = loc(fused[#loc86, #loc87])
#loc237 = loc(fused[#loc89, #loc87])
#loc238 = loc(fused[#loc93, #loc94])
#loc239 = loc(fused[#loc96, #loc97, #loc98, #loc94])
#loc240 = loc(fused[#loc100, #loc101])
#loc241 = loc(fused[#loc102, #loc103])
#loc242 = loc(fused[#loc106, #loc109])
#loc243 = loc(fused[#loc110, #loc111, #loc112, #loc101])
#loc244 = loc(fused[#loc117, #loc118])
#loc245 = loc(fused[#loc119, #loc120])
#loc246 = loc(fused[#loc121, #loc122])
#loc247 = loc(fused[#loc124, #loc123])
#loc248 = loc(fused[#loc125, #loc126])
#loc249 = loc(fused[#loc128, #loc126])
#loc250 = loc(fused[#loc132, #loc133])
#loc251 = loc(fused[#loc135, #loc133])
#loc252 = loc(fused[#loc136, #loc137])
#loc253 = loc(fused[#loc138, #loc139])
#loc254 = loc(fused[#loc142, #loc145])
#loc255 = loc(fused[#loc146, #loc147, #loc148, #loc137])
#loc256 = loc(fused[#loc154, #loc155])
#loc257 = loc(fused[#loc156, #loc157])
#loc258 = loc(fused[#loc158, #loc159])
#loc259 = loc(fused[#loc161, #loc160])
#loc260 = loc(fused[#loc162, #loc163])
#loc261 = loc(fused[#loc165, #loc166, #loc167, #loc163])
#loc262 = loc(fused[#loc171, #loc170])
#loc263 = loc(fused[#loc172, #loc173])
#loc264 = loc(fused[#loc175, #loc173])
#loc265 = loc(fused[#loc176, #loc177])
#loc266 = loc(fused[#loc181, #loc182])
#loc267 = loc(fused[#loc183, #loc184])
#loc268 = loc(fused[#loc185, #loc186])
#loc269 = loc(fused[#loc188, #loc187])
#loc270 = loc(fused[#loc189, #loc190])
#loc271 = loc(fused[#loc192, #loc190])
#loc272 = loc(fused[#loc194, #loc193])
#loc273 = loc(fused[#loc195, #loc196])
#loc274 = loc(fused[#loc198, #loc196])
#loc275 = loc(fused[#loc199, #loc200])
