!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":33:25)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":69:25)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":106:25)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc195)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLongLongLine(!s64i) loc(#loc197)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc200)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc14)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc201)
    cir.br ^bb1 loc(#loc202)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc18)
    cir.br ^bb2 loc(#loc16)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc16)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc20)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc20)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc20)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc20)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc20)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc20)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc20)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc20)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc20)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc20)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc20)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc20)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc20)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc20)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc20)
    cir.br ^bb7(%29 : !u64i) loc(#loc20)
  ^bb6:  // pred: ^bb4
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc20)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc20)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc20)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc20)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc20)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc20)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc20)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc20)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc20)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc20)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc20)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc20)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc20)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc20)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc20)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc20)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc20)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc20)
    cir.br ^bb7(%55 : !u64i) loc(#loc20)
  ^bb7(%56: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":33:25)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc20)
    cir.store %57, %1 : !s64i, !cir.ptr<!s64i> loc(#loc203)
    cir.br ^bb10 loc(#loc22)
  ^bb9:  // pred: ^bb2
    %58 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc204)
  ^bb12:  // pred: ^bb11
    %60 = cir.const #cir.int<7> : !s32i loc(#loc27)
    cir.br ^bb13 loc(#loc25)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %60 : !s32i, ^bb18 [
      7: ^bb15
    ] loc(#loc25)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc28)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc205)
  ^bb16:  // pred: ^bb15
    %61 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    %62 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc11)
    %63 = cir.binop(mul, %61, %62) nsw : !s64i loc(#loc31)
    cir.store %63, %0 : !s64i, !cir.ptr<!s64i> loc(#loc199)
    %64 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
    cir.call @printLongLongLine(%64) : (!s64i) -> () loc(#loc33)
    cir.br ^bb17 loc(#loc30)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc34)
  ^bb18:  // pred: ^bb13
    %65 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%66) : (!cir.ptr<!s8i>) -> () loc(#loc36)
    cir.br ^bb19 loc(#loc37)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc26)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc9)
  } loc(#loc198)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc207)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc208)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc209)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc210)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc206)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc211)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc58)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc215)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc62)
    cir.br ^bb2 loc(#loc60)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc60)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc64)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc64)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc64)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc64)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc64)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc64)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc64)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc64)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc64)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc64)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc64)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc64)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc64)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc64)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc64)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc64)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc64)
    cir.br ^bb7(%29 : !u64i) loc(#loc64)
  ^bb6:  // pred: ^bb4
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc64)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc64)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc64)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc64)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc64)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc64)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc64)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc64)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc64)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc64)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc64)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc64)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc64)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc64)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc64)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc64)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc64)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc64)
    cir.br ^bb7(%55 : !u64i) loc(#loc64)
  ^bb7(%56: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":69:25)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc64)
  ^bb8:  // pred: ^bb7
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc64)
    cir.store %57, %1 : !s64i, !cir.ptr<!s64i> loc(#loc217)
    cir.br ^bb10 loc(#loc66)
  ^bb9:  // pred: ^bb2
    %58 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb10 loc(#loc69)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc61)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc218)
  ^bb12:  // pred: ^bb11
    %60 = cir.const #cir.int<8> : !s32i loc(#loc72)
    cir.br ^bb13 loc(#loc70)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %60 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc70)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc73)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %61 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb22 loc(#loc76)
  ^bb16:  // pred: ^bb13
    cir.br ^bb17 loc(#loc219)
  ^bb17:  // pred: ^bb16
    %63 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc79)
    %64 = cir.call @imaxabs(%63) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc80)
    %65 = cir.cast(int_to_float, %64 : !s64i), !cir.long_double<!cir.f80> loc(#loc80)
    %66 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc81)
    %67 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc82)
    %68 = cir.cast(int_to_float, %67 : !s64i), !cir.long_double<!cir.f80> loc(#loc82)
    %69 = cir.call @sqrtl(%68) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc81)
    %70 = cir.cmp(le, %65, %69) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc220)
    cir.brcond %70 ^bb18, ^bb19 loc(#loc221)
  ^bb18:  // pred: ^bb17
    %71 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc87)
    %72 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc55)
    %73 = cir.binop(mul, %71, %72) nsw : !s64i loc(#loc87)
    cir.store %73, %0 : !s64i, !cir.ptr<!s64i> loc(#loc213)
    %74 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc88)
    cir.call @printLongLongLine(%74) : (!s64i) -> () loc(#loc89)
    cir.br ^bb20 loc(#loc85)
  ^bb19:  // pred: ^bb17
    %75 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
    %76 = cir.cast(array_to_ptrdecay, %75 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%76) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb20 loc(#loc78)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc78)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc91)
  ^bb22:  // 2 preds: ^bb15, ^bb21
    cir.br ^bb23 loc(#loc71)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc53)
  } loc(#loc212)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc98)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc102)
    cir.br ^bb2 loc(#loc100)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc100)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc104)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc104)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc104)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc104)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc104)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc104)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc104)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc104)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc104)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc104)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc104)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc104)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc104)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc104)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc104)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc104)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc104)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc104)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc104)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc104)
    cir.br ^bb7(%29 : !u64i) loc(#loc104)
  ^bb6:  // pred: ^bb4
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc104)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc104)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc104)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc104)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc104)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc104)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc104)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc104)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc104)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc104)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc104)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc104)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc104)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc104)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc104)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc104)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc104)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc104)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc104)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc104)
    cir.br ^bb7(%55 : !u64i) loc(#loc104)
  ^bb7(%56: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":106:25)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc104)
  ^bb8:  // pred: ^bb7
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc104)
    cir.store %57, %1 : !s64i, !cir.ptr<!s64i> loc(#loc227)
    cir.br ^bb10 loc(#loc106)
  ^bb9:  // pred: ^bb2
    %58 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc107)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    cir.br ^bb10 loc(#loc109)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc101)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc228)
  ^bb12:  // pred: ^bb11
    %60 = cir.const #cir.int<7> : !s32i loc(#loc112)
    cir.br ^bb13 loc(#loc110)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %60 : !s32i, ^bb21 [
      7: ^bb15
    ] loc(#loc110)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc113)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc229)
  ^bb16:  // pred: ^bb15
    %61 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc116)
    %62 = cir.call @imaxabs(%61) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc117)
    %63 = cir.cast(int_to_float, %62 : !s64i), !cir.long_double<!cir.f80> loc(#loc117)
    %64 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc118)
    %65 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc119)
    %66 = cir.cast(int_to_float, %65 : !s64i), !cir.long_double<!cir.f80> loc(#loc119)
    %67 = cir.call @sqrtl(%66) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc118)
    %68 = cir.cmp(le, %63, %67) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc230)
    cir.brcond %68 ^bb17, ^bb18 loc(#loc231)
  ^bb17:  // pred: ^bb16
    %69 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc124)
    %70 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc95)
    %71 = cir.binop(mul, %69, %70) nsw : !s64i loc(#loc124)
    cir.store %71, %0 : !s64i, !cir.ptr<!s64i> loc(#loc223)
    %72 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc125)
    cir.call @printLongLongLine(%72) : (!s64i) -> () loc(#loc126)
    cir.br ^bb19 loc(#loc122)
  ^bb18:  // pred: ^bb16
    %73 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc127)
    %74 = cir.cast(array_to_ptrdecay, %73 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%74) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    cir.br ^bb19 loc(#loc115)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc115)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc129)
  ^bb21:  // pred: ^bb13
    %75 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
    %76 = cir.cast(array_to_ptrdecay, %75 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%76) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb22 loc(#loc132)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc111)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc93)
  } loc(#loc222)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc139)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc143)
    cir.br ^bb2 loc(#loc141)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc141)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc144)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc145)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    cir.br ^bb6 loc(#loc147)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<2> : !s32i loc(#loc148)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc148)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc237)
    cir.br ^bb6 loc(#loc150)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc142)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc238)
  ^bb8:  // pred: ^bb7
    %8 = cir.const #cir.int<7> : !s32i loc(#loc153)
    cir.br ^bb9 loc(#loc151)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %8 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc151)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc154)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc239)
  ^bb12:  // pred: ^bb11
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc157)
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc136)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc157)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc233)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc158)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc159)
    cir.br ^bb13 loc(#loc156)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc160)
  ^bb14:  // pred: ^bb9
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc161)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc161)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc162)
    cir.br ^bb15 loc(#loc163)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc152)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc134)
  } loc(#loc232)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc241)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc242)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc170)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc243)
    cir.br ^bb1 loc(#loc244)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc174)
    cir.br ^bb2 loc(#loc172)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc172)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc175)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<2> : !s32i loc(#loc176)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc176)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc245)
    cir.br ^bb6 loc(#loc178)
  ^bb5:  // pred: ^bb2
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc179)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc180)
    cir.br ^bb6 loc(#loc181)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc173)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc246)
  ^bb8:  // pred: ^bb7
    %8 = cir.const #cir.int<7> : !s32i loc(#loc184)
    cir.br ^bb9 loc(#loc182)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %8 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc182)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc185)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc247)
  ^bb12:  // pred: ^bb11
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc188)
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc167)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc188)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc241)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc189)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc190)
    cir.br ^bb13 loc(#loc187)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc191)
  ^bb14:  // pred: ^bb9
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc192)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc192)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    cir.br ^bb15 loc(#loc194)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc183)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc165)
  } loc(#loc240)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":37:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":25:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":54:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":45:9)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":45:33)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":27:13)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":28:12)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":29:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":39:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":29:12)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":31:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":33:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":34:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":37:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":38:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":40:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":53:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":40:12)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":42:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":43:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":47:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":45:26)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":46:27)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":46:9)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":48:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":51:19)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":51:9)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":52:9)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":198:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":204:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":200:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":200:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":201:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":201:14)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":202:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":202:14)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":203:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":203:14)
#loc48 = loc("/usr/include/inttypes.h":351:1)
#loc49 = loc("/usr/include/inttypes.h":351:74)
#loc50 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":91:23)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":61:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":95:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":86:13)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":86:37)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":63:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":63:13)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":64:12)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":64:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":65:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":75:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":65:12)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":67:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":69:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":70:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":73:19)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":73:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":74:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":76:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":94:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":76:12)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":78:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":80:19)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":80:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":81:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":92:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:31)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:40)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:46)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:55)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":85:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":88:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":90:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":86:30)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":87:31)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":87:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":91:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":93:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":98:1)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":132:1)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":119:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":119:37)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":100:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":100:13)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":101:12)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":101:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":102:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":112:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":102:12)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":104:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":106:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":107:9)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":110:19)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":110:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":111:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":113:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":131:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":113:12)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":115:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":125:9)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:31)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:13)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:40)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:46)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:55)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":118:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":121:9)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":123:9)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":119:30)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":120:31)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":120:13)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":124:23)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":124:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":126:9)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":129:19)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":129:9)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":130:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":135:1)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":164:1)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":155:9)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":155:33)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":137:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":137:13)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":138:12)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":138:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":139:5)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":149:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":139:12)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":141:5)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":143:19)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":143:9)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":144:9)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":147:16)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":147:9)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":148:9)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":150:5)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":163:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":150:12)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":152:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":153:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":157:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":155:26)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":156:27)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":156:9)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":158:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":161:19)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":161:9)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":162:9)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":167:1)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":196:1)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":187:9)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":187:33)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":169:5)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":169:13)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":170:12)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":170:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":171:5)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":181:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":171:12)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":173:5)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":175:16)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":175:9)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":176:9)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":179:19)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":179:9)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":180:9)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":182:5)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":195:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":182:12)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":184:5)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":185:5)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":189:5)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":187:26)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":188:27)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":188:9)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":190:5)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":193:19)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":193:9)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":194:9)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc3, #loc4])
#loc197 = loc(fused[#loc6, #loc7])
#loc198 = loc(fused[#loc8, #loc9])
#loc199 = loc(fused[#loc10, #loc11])
#loc200 = loc(fused[#loc12, #loc13])
#loc201 = loc(fused[#loc15, #loc14])
#loc202 = loc(fused[#loc16, #loc17])
#loc203 = loc(fused[#loc21, #loc20])
#loc204 = loc(fused[#loc25, #loc26])
#loc205 = loc(fused[#loc29, #loc30])
#loc206 = loc(fused[#loc38, #loc39])
#loc207 = loc(fused[#loc40, #loc41])
#loc208 = loc(fused[#loc42, #loc43])
#loc209 = loc(fused[#loc44, #loc45])
#loc210 = loc(fused[#loc46, #loc47])
#loc211 = loc(fused[#loc48, #loc49])
#loc212 = loc(fused[#loc52, #loc53])
#loc213 = loc(fused[#loc54, #loc55])
#loc214 = loc(fused[#loc56, #loc57])
#loc215 = loc(fused[#loc59, #loc58])
#loc216 = loc(fused[#loc60, #loc61])
#loc217 = loc(fused[#loc65, #loc64])
#loc218 = loc(fused[#loc70, #loc71])
#loc219 = loc(fused[#loc77, #loc78])
#loc220 = loc(fused[#loc80, #loc83])
#loc221 = loc(fused[#loc84, #loc85, #loc86, #loc78])
#loc222 = loc(fused[#loc92, #loc93])
#loc223 = loc(fused[#loc94, #loc95])
#loc224 = loc(fused[#loc96, #loc97])
#loc225 = loc(fused[#loc99, #loc98])
#loc226 = loc(fused[#loc100, #loc101])
#loc227 = loc(fused[#loc105, #loc104])
#loc228 = loc(fused[#loc110, #loc111])
#loc229 = loc(fused[#loc114, #loc115])
#loc230 = loc(fused[#loc117, #loc120])
#loc231 = loc(fused[#loc121, #loc122, #loc123, #loc115])
#loc232 = loc(fused[#loc133, #loc134])
#loc233 = loc(fused[#loc135, #loc136])
#loc234 = loc(fused[#loc137, #loc138])
#loc235 = loc(fused[#loc140, #loc139])
#loc236 = loc(fused[#loc141, #loc142])
#loc237 = loc(fused[#loc149, #loc148])
#loc238 = loc(fused[#loc151, #loc152])
#loc239 = loc(fused[#loc155, #loc156])
#loc240 = loc(fused[#loc164, #loc165])
#loc241 = loc(fused[#loc166, #loc167])
#loc242 = loc(fused[#loc168, #loc169])
#loc243 = loc(fused[#loc171, #loc170])
#loc244 = loc(fused[#loc172, #loc173])
#loc245 = loc(fused[#loc177, #loc176])
#loc246 = loc(fused[#loc182, #loc183])
#loc247 = loc(fused[#loc186, #loc187])
