!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc112 = loc("CWE510_Trapdoor__network_listen_01.c":110:10)
#loc113 = loc("CWE510_Trapdoor__network_listen_01.c":110:14)
#loc114 = loc("CWE510_Trapdoor__network_listen_01.c":110:20)
#loc115 = loc("CWE510_Trapdoor__network_listen_01.c":110:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc170 = loc(fused[#loc112, #loc113])
#loc171 = loc(fused[#loc114, #loc115])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc126)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc127)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc128)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc129)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc130)
  cir.func private @close(!s32i) -> !s32i loc(#loc131)
  cir.func no_proto @CWE510_Trapdoor__network_listen_01_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc134)
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc135)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc136)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc20)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc135)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc22)
      cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc136)
      cir.scope {
        cir.do {
          %7 = cir.const #cir.int<2> : !s32i loc(#loc25)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %9 = cir.const #cir.int<6> : !s32i loc(#loc27)
          %10 = cir.call @socket(%7, %8, %9) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc28)
          cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc138)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc34)
            %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc140)
            cir.if %32 {
              cir.break loc(#loc36)
            } loc(#loc141)
          } loc(#loc139)
          %11 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc142)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc39)
          %13 = cir.const #cir.int<16> : !u64i loc(#loc143)
          cir.libc.memset %13 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc144)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc44)
          %15 = cir.cast(integral, %14 : !s32i), !u16i loc(#loc44)
          %16 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc45)
          cir.store %15, %16 : !u16i, !cir.ptr<!u16i> loc(#loc145)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc47)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc47)
          %19 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc48)
          %20 = cir.get_member %19[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc49)
          cir.store %18, %20 : !u32i, !cir.ptr<!u32i> loc(#loc146)
          %21 = cir.const #cir.int<30000> : !s32i loc(#loc51)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc51)
          %23 = cir.call @htons(%22) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc52)
          %24 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc53)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc147)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            %30 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc149)
            %31 = cir.const #cir.int<16> : !u64i loc(#loc150)
            %32 = cir.cast(integral, %31 : !u64i), !u32i loc(#loc150)
            %33 = cir.call @bind(%29, %30, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc63)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc64)
            %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc64)
            %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc151)
            cir.if %36 {
              cir.break loc(#loc66)
            } loc(#loc152)
          } loc(#loc148)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            %30 = cir.const #cir.int<5> : !s32i loc(#loc70)
            %31 = cir.call @listen(%29, %30) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc71)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc72)
            %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc72)
            %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc154)
            cir.if %34 {
              cir.break loc(#loc74)
            } loc(#loc155)
          } loc(#loc153)
          %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %26 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc76)
          %27 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc77)
          %28 = cir.call @accept(%25, %26, %27) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc78)
          cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc156)
          cir.scope {
            %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc84)
            %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc84)
            %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc158)
            cir.if %32 {
              cir.break loc(#loc86)
            } loc(#loc159)
          } loc(#loc157)
          cir.yield loc(#loc24)
        } while {
          %7 = cir.const #cir.int<0> : !s32i loc(#loc87)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc87)
          cir.condition(%8) loc(#loc87)
        } loc(#loc137)
      } loc(#loc137)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc90)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc91)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc161)
        cir.if %10 {
          %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc94)
        } loc(#loc162)
      } loc(#loc160)
      cir.scope {
        %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc98)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc98)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc164)
        cir.if %10 {
          %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc101)
        } loc(#loc165)
      } loc(#loc163)
    } loc(#loc133)
    cir.return loc(#loc14)
  } loc(#loc132)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc166)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc167)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc109)
  cir.func @main(%arg0: !s32i loc(fused[#loc112, #loc113]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc114, #loc115])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc111)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc116)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc117)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc118)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc118)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc119)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc108)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %8 = cir.get_global @CWE510_Trapdoor__network_listen_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call @CWE510_Trapdoor__network_listen_01_bad() : () -> () loc(#loc121)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc109)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc124)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    cir.return %12 : !s32i loc(#loc173)
  } loc(#loc169)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_01.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/unistd.h":358:1)
#loc12 = loc("/usr/include/unistd.h":358:27)
#loc13 = loc("CWE510_Trapdoor__network_listen_01.c":39:1)
#loc14 = loc("CWE510_Trapdoor__network_listen_01.c":99:1)
#loc15 = loc("CWE510_Trapdoor__network_listen_01.c":41:5)
#loc16 = loc("CWE510_Trapdoor__network_listen_01.c":98:5)
#loc17 = loc("CWE510_Trapdoor__network_listen_01.c":46:9)
#loc18 = loc("CWE510_Trapdoor__network_listen_01.c":46:28)
#loc19 = loc("CWE510_Trapdoor__network_listen_01.c":47:9)
#loc20 = loc("CWE510_Trapdoor__network_listen_01.c":47:31)
#loc21 = loc("CWE510_Trapdoor__network_listen_01.c":48:9)
#loc22 = loc("CWE510_Trapdoor__network_listen_01.c":48:31)
#loc23 = loc("CWE510_Trapdoor__network_listen_01.c":49:9)
#loc24 = loc("CWE510_Trapdoor__network_listen_01.c":83:17)
#loc25 = loc("CWE510_Trapdoor__network_listen_01.c":58:35)
#loc26 = loc("CWE510_Trapdoor__network_listen_01.c":58:44)
#loc27 = loc("CWE510_Trapdoor__network_listen_01.c":58:57)
#loc28 = loc("CWE510_Trapdoor__network_listen_01.c":58:28)
#loc29 = loc("CWE510_Trapdoor__network_listen_01.c":58:13)
#loc30 = loc("CWE510_Trapdoor__network_listen_01.c":58:68)
#loc31 = loc("CWE510_Trapdoor__network_listen_01.c":59:13)
#loc32 = loc("CWE510_Trapdoor__network_listen_01.c":62:13)
#loc33 = loc("CWE510_Trapdoor__network_listen_01.c":59:17)
#loc34 = loc("CWE510_Trapdoor__network_listen_01.c":59:33)
#loc35 = loc("CWE510_Trapdoor__network_listen_01.c":60:13)
#loc36 = loc("CWE510_Trapdoor__network_listen_01.c":61:17)
#loc37 = loc("CWE510_Trapdoor__network_listen_01.c":63:20)
#loc38 = loc("CWE510_Trapdoor__network_listen_01.c":63:21)
#loc39 = loc("CWE510_Trapdoor__network_listen_01.c":63:30)
#loc40 = loc("CWE510_Trapdoor__network_listen_01.c":63:33)
#loc41 = loc("CWE510_Trapdoor__network_listen_01.c":63:47)
#loc42 = loc("CWE510_Trapdoor__network_listen_01.c":63:13)
#loc43 = loc("CWE510_Trapdoor__network_listen_01.c":63:48)
#loc44 = loc("CWE510_Trapdoor__network_listen_01.c":64:34)
#loc45 = loc("/usr/include/netinet/in.h":249:5)
#loc46 = loc("CWE510_Trapdoor__network_listen_01.c":64:13)
#loc47 = loc("CWE510_Trapdoor__network_listen_01.c":65:39)
#loc48 = loc("/usr/include/netinet/in.h":251:20)
#loc49 = loc("/usr/include/netinet/in.h":33:15)
#loc50 = loc("CWE510_Trapdoor__network_listen_01.c":65:13)
#loc51 = loc("CWE510_Trapdoor__network_listen_01.c":66:38)
#loc52 = loc("CWE510_Trapdoor__network_listen_01.c":66:32)
#loc53 = loc("/usr/include/netinet/in.h":250:15)
#loc54 = loc("CWE510_Trapdoor__network_listen_01.c":66:13)
#loc55 = loc("CWE510_Trapdoor__network_listen_01.c":66:43)
#loc56 = loc("CWE510_Trapdoor__network_listen_01.c":67:13)
#loc57 = loc("CWE510_Trapdoor__network_listen_01.c":70:13)
#loc58 = loc("CWE510_Trapdoor__network_listen_01.c":67:22)
#loc59 = loc("CWE510_Trapdoor__network_listen_01.c":67:54)
#loc60 = loc("CWE510_Trapdoor__network_listen_01.c":67:55)
#loc61 = loc("CWE510_Trapdoor__network_listen_01.c":67:64)
#loc62 = loc("CWE510_Trapdoor__network_listen_01.c":67:78)
#loc63 = loc("CWE510_Trapdoor__network_listen_01.c":67:17)
#loc64 = loc("CWE510_Trapdoor__network_listen_01.c":67:84)
#loc65 = loc("CWE510_Trapdoor__network_listen_01.c":68:13)
#loc66 = loc("CWE510_Trapdoor__network_listen_01.c":69:17)
#loc67 = loc("CWE510_Trapdoor__network_listen_01.c":71:13)
#loc68 = loc("CWE510_Trapdoor__network_listen_01.c":74:13)
#loc69 = loc("CWE510_Trapdoor__network_listen_01.c":71:24)
#loc70 = loc("CWE510_Trapdoor__network_listen_01.c":71:38)
#loc71 = loc("CWE510_Trapdoor__network_listen_01.c":71:17)
#loc72 = loc("CWE510_Trapdoor__network_listen_01.c":71:44)
#loc73 = loc("CWE510_Trapdoor__network_listen_01.c":72:13)
#loc74 = loc("CWE510_Trapdoor__network_listen_01.c":73:17)
#loc75 = loc("CWE510_Trapdoor__network_listen_01.c":76:35)
#loc76 = loc("CWE510_Trapdoor__network_listen_01.c":76:49)
#loc77 = loc("CWE510_Trapdoor__network_listen_01.c":76:55)
#loc78 = loc("CWE510_Trapdoor__network_listen_01.c":76:28)
#loc79 = loc("CWE510_Trapdoor__network_listen_01.c":76:13)
#loc80 = loc("CWE510_Trapdoor__network_listen_01.c":76:59)
#loc81 = loc("CWE510_Trapdoor__network_listen_01.c":77:13)
#loc82 = loc("CWE510_Trapdoor__network_listen_01.c":80:13)
#loc83 = loc("CWE510_Trapdoor__network_listen_01.c":77:17)
#loc84 = loc("CWE510_Trapdoor__network_listen_01.c":77:33)
#loc85 = loc("CWE510_Trapdoor__network_listen_01.c":78:13)
#loc86 = loc("CWE510_Trapdoor__network_listen_01.c":79:17)
#loc87 = loc("CWE510_Trapdoor__network_listen_01.c":83:16)
#loc88 = loc("CWE510_Trapdoor__network_listen_01.c":84:9)
#loc89 = loc("CWE510_Trapdoor__network_listen_01.c":87:9)
#loc90 = loc("CWE510_Trapdoor__network_listen_01.c":84:13)
#loc91 = loc("CWE510_Trapdoor__network_listen_01.c":84:29)
#loc92 = loc("CWE510_Trapdoor__network_listen_01.c":85:9)
#loc93 = loc("CWE510_Trapdoor__network_listen_01.c":86:26)
#loc94 = loc("CWE510_Trapdoor__network_listen_01.c":86:13)
#loc95 = loc("CWE510_Trapdoor__network_listen_01.c":88:9)
#loc96 = loc("CWE510_Trapdoor__network_listen_01.c":91:9)
#loc97 = loc("CWE510_Trapdoor__network_listen_01.c":88:13)
#loc98 = loc("CWE510_Trapdoor__network_listen_01.c":88:29)
#loc99 = loc("CWE510_Trapdoor__network_listen_01.c":89:9)
#loc100 = loc("CWE510_Trapdoor__network_listen_01.c":90:26)
#loc101 = loc("CWE510_Trapdoor__network_listen_01.c":90:13)
#loc102 = loc("/usr/include/stdlib.h":575:1)
#loc103 = loc("/usr/include/stdlib.h":575:41)
#loc104 = loc("/usr/include/time.h":76:1)
#loc105 = loc("/usr/include/time.h":76:38)
#loc106 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc107 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc108 = loc("CWE510_Trapdoor__network_listen_01.c":115:15)
#loc109 = loc("CWE510_Trapdoor__network_listen_01.c":117:15)
#loc110 = loc("CWE510_Trapdoor__network_listen_01.c":110:1)
#loc111 = loc("CWE510_Trapdoor__network_listen_01.c":120:1)
#loc116 = loc("CWE510_Trapdoor__network_listen_01.c":111:1)
#loc117 = loc("CWE510_Trapdoor__network_listen_01.c":113:27)
#loc118 = loc("CWE510_Trapdoor__network_listen_01.c":113:22)
#loc119 = loc("CWE510_Trapdoor__network_listen_01.c":113:5)
#loc120 = loc("CWE510_Trapdoor__network_listen_01.c":115:5)
#loc121 = loc("CWE510_Trapdoor__network_listen_01.c":116:5)
#loc122 = loc("CWE510_Trapdoor__network_listen_01.c":116:44)
#loc123 = loc("CWE510_Trapdoor__network_listen_01.c":117:5)
#loc124 = loc("CWE510_Trapdoor__network_listen_01.c":119:12)
#loc125 = loc("CWE510_Trapdoor__network_listen_01.c":119:5)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc7, #loc8])
#loc130 = loc(fused[#loc9, #loc10])
#loc131 = loc(fused[#loc11, #loc12])
#loc132 = loc(fused[#loc13, #loc14])
#loc133 = loc(fused[#loc15, #loc16])
#loc134 = loc(fused[#loc17, #loc18])
#loc135 = loc(fused[#loc19, #loc20])
#loc136 = loc(fused[#loc21, #loc22])
#loc137 = loc(fused[#loc23, #loc24])
#loc138 = loc(fused[#loc29, #loc30])
#loc139 = loc(fused[#loc31, #loc32])
#loc140 = loc(fused[#loc33, #loc34])
#loc141 = loc(fused[#loc35, #loc32])
#loc142 = loc(fused[#loc37, #loc38])
#loc143 = loc(fused[#loc40, #loc41])
#loc144 = loc(fused[#loc42, #loc43])
#loc145 = loc(fused[#loc46, #loc44])
#loc146 = loc(fused[#loc50, #loc47])
#loc147 = loc(fused[#loc54, #loc55])
#loc148 = loc(fused[#loc56, #loc57])
#loc149 = loc(fused[#loc59, #loc60])
#loc150 = loc(fused[#loc61, #loc62])
#loc151 = loc(fused[#loc63, #loc64])
#loc152 = loc(fused[#loc65, #loc57])
#loc153 = loc(fused[#loc67, #loc68])
#loc154 = loc(fused[#loc71, #loc72])
#loc155 = loc(fused[#loc73, #loc68])
#loc156 = loc(fused[#loc79, #loc80])
#loc157 = loc(fused[#loc81, #loc82])
#loc158 = loc(fused[#loc83, #loc84])
#loc159 = loc(fused[#loc85, #loc82])
#loc160 = loc(fused[#loc88, #loc89])
#loc161 = loc(fused[#loc90, #loc91])
#loc162 = loc(fused[#loc92, #loc89])
#loc163 = loc(fused[#loc95, #loc96])
#loc164 = loc(fused[#loc97, #loc98])
#loc165 = loc(fused[#loc99, #loc96])
#loc166 = loc(fused[#loc102, #loc103])
#loc167 = loc(fused[#loc104, #loc105])
#loc168 = loc(fused[#loc106, #loc107])
#loc169 = loc(fused[#loc110, #loc111])
#loc172 = loc(fused[#loc121, #loc122])
#loc173 = loc(fused[#loc125, #loc124])
