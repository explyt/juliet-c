!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":44:66)
#loc6 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":44:70)
#loc13 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":55:70)
#loc14 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":55:74)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":62:70)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":62:74)
#loc41 = loc(fused[#loc5, #loc6])
#loc44 = loc(fused[#loc13, #loc14])
#loc48 = loc(fused[#loc24, #loc25])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc39)
  cir.func  @CWE369_Divide_by_Zero__int_listen_socket_divide_52c_badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc42)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc10)
    cir.return loc(#loc4)
  } loc(#loc40)
  cir.func  @CWE369_Divide_by_Zero__int_listen_socket_divide_52c_goodG2BSink(%arg0: !s32i loc(fused[#loc13, #loc14])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc15)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc45)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc18)
    cir.return loc(#loc12)
  } loc(#loc43)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc46)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc21)
  cir.func  @CWE369_Divide_by_Zero__int_listen_socket_divide_52c_goodB2GSink(%arg0: !s32i loc(fused[#loc24, #loc25])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc26)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc30)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !s32i loc(#loc50)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc31)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc35)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc52)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc37)
      } else {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc21)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc21)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc38)
      } loc(#loc51)
    } loc(#loc49)
    cir.return loc(#loc23)
  } loc(#loc47)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":44:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":48:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":45:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":47:18)
#loc9 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":47:24)
#loc10 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":47:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":55:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":59:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":56:1)
#loc16 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":58:18)
#loc17 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":58:24)
#loc18 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":58:5)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":71:19)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":62:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":73:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":63:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":65:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":72:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":65:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":65:17)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":65:14)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":66:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":68:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":70:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":67:22)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":67:28)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":67:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_52c.c":71:9)
#loc39 = loc(fused[#loc1, #loc2])
#loc40 = loc(fused[#loc3, #loc4])
#loc42 = loc(fused[#loc8, #loc9])
#loc43 = loc(fused[#loc11, #loc12])
#loc45 = loc(fused[#loc16, #loc17])
#loc46 = loc(fused[#loc19, #loc20])
#loc47 = loc(fused[#loc22, #loc23])
#loc49 = loc(fused[#loc27, #loc28])
#loc50 = loc(fused[#loc29, #loc30])
#loc51 = loc(fused[#loc32, #loc33, #loc34, #loc28])
#loc52 = loc(fused[#loc35, #loc36])
