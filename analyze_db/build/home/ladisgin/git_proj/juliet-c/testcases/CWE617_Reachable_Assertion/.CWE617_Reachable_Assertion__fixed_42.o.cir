!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("CWE617_Reachable_Assertion__fixed_42.c":25:22)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_42.c":25:26)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_42.c":46:26)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_42.c":46:30)
#loc52 = loc(fused[#loc3, #loc4])
#loc63 = loc(fused[#loc31, #loc32])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc3, #loc4])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc52)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc5)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc6)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc7)
    %4 = cir.binop(sub, %2, %3) nsw : !s32i loc(#loc6)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.return %6 : !s32i loc(#loc54)
  } loc(#loc51)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr1) loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc13)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_42.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc13)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_42_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc13)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc19)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc22)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc13)
    cir.br ^bb1 loc(#loc13)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc13)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %7 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc13)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc13)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc13)
  ^bb4:  // pred: ^bb2
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc13)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc13)
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc13)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc13)
    %13 = cir.const #cir.int<39> : !s32i loc(#loc13)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
    %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc13)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc13)
    cir.call @__assert_fail(%10, %12, %14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc13)
    cir.br ^bb5 loc(#loc13)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc13)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc15)
  } loc(#loc56)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc61)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc26)
  } loc(#loc60)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc31, #loc32])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc63)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc30)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc33)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc34)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %4 = cir.binop(add, %2, %3) nsw : !s32i loc(#loc34)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.return %6 : !s32i loc(#loc65)
  } loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc45)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc48)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc39)
    cir.br ^bb1 loc(#loc39)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc39)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %7 = cir.const #cir.int<5> : !s32i loc(#loc39)
    %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc39)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc39)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc39)
  ^bb4:  // pred: ^bb2
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc39)
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc39)
    %13 = cir.const #cir.int<61> : !s32i loc(#loc39)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc39)
    %15 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc39)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @__assert_fail(%10, %12, %14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc39)
    cir.br ^bb5 loc(#loc39)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc39)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc39)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc41)
  } loc(#loc66)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_42.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__fixed_42.c":25:1)
#loc2 = loc("CWE617_Reachable_Assertion__fixed_42.c":30:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_42.c":26:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_42.c":28:12)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_42.c":28:25)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_42.c":28:5)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_42.c":29:12)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_42.c":29:5)
#loc11 = loc("/usr/include/assert.h":67:1)
#loc12 = loc("/usr/include/assert.h":69:43)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_42.c":39:5)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_42.c":32:1)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_42.c":40:1)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_42.c":34:5)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_42.c":34:9)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_42.c":36:13)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_42.c":36:12)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_42.c":36:5)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_42.c":37:22)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_42.c":37:12)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_42.c":37:5)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_42.c":37:26)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_42.c":64:1)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_42.c":67:1)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_42.c":66:5)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_42.c":66:13)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_42.c":46:1)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_42.c":51:1)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_42.c":47:1)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_42.c":49:12)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_42.c":49:25)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_42.c":49:5)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_42.c":50:12)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_42.c":50:5)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_42.c":61:5)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_42.c":54:1)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_42.c":62:1)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_42.c":56:5)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_42.c":56:9)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_42.c":58:13)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_42.c":58:12)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_42.c":58:5)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_42.c":59:26)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_42.c":59:12)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_42.c":59:5)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_42.c":59:30)
#loc51 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc8, #loc7])
#loc54 = loc(fused[#loc10, #loc9])
#loc55 = loc(fused[#loc11, #loc12])
#loc56 = loc(fused[#loc14, #loc15])
#loc57 = loc(fused[#loc16, #loc17])
#loc58 = loc(fused[#loc20, #loc18])
#loc59 = loc(fused[#loc23, #loc24])
#loc60 = loc(fused[#loc25, #loc26])
#loc61 = loc(fused[#loc27, #loc28])
#loc62 = loc(fused[#loc29, #loc30])
#loc64 = loc(fused[#loc36, #loc35])
#loc65 = loc(fused[#loc38, #loc37])
#loc66 = loc(fused[#loc40, #loc41])
#loc67 = loc(fused[#loc42, #loc43])
#loc68 = loc(fused[#loc46, #loc44])
#loc69 = loc(fused[#loc49, #loc50])
