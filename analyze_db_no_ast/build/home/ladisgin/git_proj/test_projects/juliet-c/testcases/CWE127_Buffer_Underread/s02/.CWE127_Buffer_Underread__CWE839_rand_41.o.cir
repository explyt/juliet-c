!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":22:21)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":22:25)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":83:25)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":83:29)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":54:25)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":54:29)
#true = #cir.bool<true> : !cir.bool
#loc121 = loc(fused[#loc10, #loc11])
#loc135 = loc(fused[#loc49, #loc50])
#loc147 = loc(fused[#loc86, #loc87])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc117)
  cir.func private  @printIntLine(!s32i) loc(#loc118)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc121)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc12)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc123)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc123)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc123)
      cir.scope {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc20)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc125)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
        cir.if %6 {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc26)
          %9 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc26)
          %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc27)
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc28)
        } loc(#loc126)
      } loc(#loc124)
    } loc(#loc122)
    cir.return loc(#loc9)
  } loc(#loc120)
  cir.func no_proto  @CWE127_Buffer_Underread__CWE839_rand_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc34)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc36)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc36)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc36)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc36)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc36)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc36)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc36)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc36)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc36)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc36)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc36)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc36)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc36)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc36)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc36)
      cir.yield %21 : !u32i loc(#loc36)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc36)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc36)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc36)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc36)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc36)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc36)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc36)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc36)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc36)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc36)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc36)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc36)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc36)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc36)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc36)
      cir.yield %25 : !u32i loc(#loc36)
    }) : (!cir.bool) -> !u32i loc(#loc36)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc36)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    cir.call @badSink(%9) : (!s32i) -> () loc(#loc39)
    cir.return loc(#loc30)
  } loc(#loc127)
  cir.func no_proto  @CWE127_Buffer_Underread__CWE839_rand_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc132)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc131)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc46)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc49, #loc50])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc135)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc137)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc137)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc137)
      cir.scope {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc59)
        %5 = cir.cmp(ge, %3, %4) : !s32i, !s32i loc(#loc139)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc60)
        %7 = cir.ternary(%6, true {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc63)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc140)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc65)
          %12 = cir.ternary(%11, true {
            %13 = cir.const #true loc(#loc61)
            cir.yield %13 : !cir.bool loc(#loc61)
          }, false {
            %13 = cir.const #false loc(#loc61)
            cir.yield %13 : !cir.bool loc(#loc61)
          }) : (!cir.bool) -> !cir.bool loc(#loc61)
          cir.yield %12 : !cir.bool loc(#loc61)
        }, false {
          %8 = cir.const #false loc(#loc61)
          cir.yield %8 : !cir.bool loc(#loc61)
        }) : (!cir.bool) -> !cir.bool loc(#loc61)
        cir.if %7 {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc70)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc70)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc71)
        } else {
          %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc46)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc46)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc72)
        } loc(#loc141)
      } loc(#loc138)
    } loc(#loc136)
    cir.return loc(#loc48)
  } loc(#loc134)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc78)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc80)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc80)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc80)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc80)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc80)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc80)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc80)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc80)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc80)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc80)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc80)
      cir.yield %21 : !u32i loc(#loc80)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc80)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc80)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc80)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc80)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc80)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc80)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc80)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc80)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc80)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc80)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc80)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc80)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc80)
      cir.yield %25 : !u32i loc(#loc80)
    }) : (!cir.bool) -> !u32i loc(#loc80)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc80)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.call @goodB2GSink(%9) : (!s32i) -> () loc(#loc83)
    cir.return loc(#loc74)
  } loc(#loc142)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc86, #loc87])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc147)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc149)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc149)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc149)
      cir.scope {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc96)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc151)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc97)
        cir.if %6 {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
          %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc102)
          %9 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc102)
          %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc103)
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc104)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc104)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc105)
        } loc(#loc152)
      } loc(#loc150)
    } loc(#loc148)
    cir.return loc(#loc85)
  } loc(#loc146)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc111)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc113)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc116)
    cir.return loc(#loc107)
  } loc(#loc153)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":34:23)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":22:1)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":37:1)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":23:1)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":24:5)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":36:5)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":25:9)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":25:30)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":28:9)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":35:9)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":28:13)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":28:20)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":28:18)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":29:9)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":31:9)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":33:9)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":30:33)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":30:26)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":30:13)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":34:13)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":39:1)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":47:1)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":41:5)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":41:9)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":43:13)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":43:12)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":43:5)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":45:12)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":45:5)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":46:13)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":46:5)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":109:1)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":113:1)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":111:5)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":111:13)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":112:5)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":112:13)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":94:23)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":83:1)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":97:1)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":84:1)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":85:5)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":96:5)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":86:9)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":86:30)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:9)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":95:9)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:13)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:21)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:18)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:23)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:26)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:34)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:36)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:31)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":89:9)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":91:9)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":93:9)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":90:33)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":90:26)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":90:13)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":94:13)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":99:1)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":107:1)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":101:5)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":101:9)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":103:13)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":103:12)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":103:5)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":105:12)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":105:5)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":106:17)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":106:5)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":54:1)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":69:1)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":55:1)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":56:5)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":68:5)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":57:9)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":57:30)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":60:9)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":67:9)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":60:13)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":60:20)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":60:18)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":61:9)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":63:9)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":65:9)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":62:33)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":62:26)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":62:13)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":66:23)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":66:13)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":71:1)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":80:1)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":73:5)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":73:9)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":75:13)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":75:12)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":75:5)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":78:12)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":78:5)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":79:17)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":79:5)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc8, #loc9])
#loc122 = loc(fused[#loc13, #loc14])
#loc123 = loc(fused[#loc15, #loc16])
#loc124 = loc(fused[#loc17, #loc18])
#loc125 = loc(fused[#loc19, #loc20])
#loc126 = loc(fused[#loc22, #loc23, #loc24, #loc18])
#loc127 = loc(fused[#loc29, #loc30])
#loc128 = loc(fused[#loc31, #loc32])
#loc129 = loc(fused[#loc35, #loc33])
#loc130 = loc(fused[#loc37, #loc36])
#loc131 = loc(fused[#loc40, #loc41])
#loc132 = loc(fused[#loc42, #loc43])
#loc133 = loc(fused[#loc44, #loc45])
#loc134 = loc(fused[#loc47, #loc48])
#loc136 = loc(fused[#loc52, #loc53])
#loc137 = loc(fused[#loc54, #loc55])
#loc138 = loc(fused[#loc56, #loc57])
#loc139 = loc(fused[#loc58, #loc59])
#loc140 = loc(fused[#loc62, #loc64])
#loc141 = loc(fused[#loc66, #loc67, #loc68, #loc57])
#loc142 = loc(fused[#loc73, #loc74])
#loc143 = loc(fused[#loc75, #loc76])
#loc144 = loc(fused[#loc79, #loc77])
#loc145 = loc(fused[#loc81, #loc80])
#loc146 = loc(fused[#loc84, #loc85])
#loc148 = loc(fused[#loc89, #loc90])
#loc149 = loc(fused[#loc91, #loc92])
#loc150 = loc(fused[#loc93, #loc94])
#loc151 = loc(fused[#loc95, #loc96])
#loc152 = loc(fused[#loc98, #loc99, #loc100, #loc94])
#loc153 = loc(fused[#loc106, #loc107])
#loc154 = loc(fused[#loc108, #loc109])
#loc155 = loc(fused[#loc112, #loc110])
#loc156 = loc(fused[#loc114, #loc113])
