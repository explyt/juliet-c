!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc320)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc321)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc322)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private @printIntLine(!s32i) loc(#loc323)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc325)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc21)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc23)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc321)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc23)
          cir.break loc(#loc25)
        } loc(#loc22)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc27)
          cir.break loc(#loc28)
        } loc(#loc26)
        cir.yield loc(#loc19)
      } loc(#loc19)
    } loc(#loc327)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc31)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc330)
            %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc331)
            %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc331)
            cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc331)
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc42)
              %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc333)
              cir.if %9 {
                %10 = cir.const #cir.int<1> : !s32i loc(#loc46)
                %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
                %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc48)
                %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc48)
                cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc335)
                cir.scope {
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc51)
                  cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc337)
                  cir.for : cond {
                    %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                    %16 = cir.const #cir.int<10> : !s32i loc(#loc54)
                    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc338)
                    cir.condition(%17) loc(#loc55)
                  } body {
                    cir.scope {
                      %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                      %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc58)
                      %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc58)
                      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                      cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc59)
                    } loc(#loc339)
                    cir.yield loc(#loc50)
                  } step {
                    %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                    %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc61)
                    cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc340)
                    cir.yield loc(#loc336)
                  } loc(#loc336)
                } loc(#loc336)
              } else {
                %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc62)
              } loc(#loc334)
            } loc(#loc332)
          } loc(#loc329)
          cir.break loc(#loc63)
        } loc(#loc32)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc66)
          cir.break loc(#loc67)
        } loc(#loc64)
        cir.yield loc(#loc29)
      } loc(#loc29)
    } loc(#loc328)
    cir.return loc(#loc13)
  } loc(#loc324)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc342)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc70)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc343)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc72)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc344)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc74)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc345)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc76)
    cir.return loc(#loc69)
  } loc(#loc341)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc347)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc348)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc88)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc90)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc321)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc90)
          cir.break loc(#loc93)
        } loc(#loc89)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc96)
          cir.break loc(#loc97)
        } loc(#loc94)
        cir.yield loc(#loc86)
      } loc(#loc86)
    } loc(#loc349)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc100)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc102)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc102)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          cir.break loc(#loc104)
        } loc(#loc101)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc352)
            %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc353)
            %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc353)
            cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc353)
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc115)
              %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc355)
              %10 = cir.ternary(%9, true {
                %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                %12 = cir.const #cir.int<10> : !s32i loc(#loc118)
                %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc356)
                %14 = cir.ternary(%13, true {
                  %15 = cir.const #true loc(#loc116)
                  cir.yield %15 : !cir.bool loc(#loc116)
                }, false {
                  %15 = cir.const #false loc(#loc116)
                  cir.yield %15 : !cir.bool loc(#loc116)
                }) : (!cir.bool) -> !cir.bool loc(#loc116)
                cir.yield %14 : !cir.bool loc(#loc116)
              }, false {
                %11 = cir.const #false loc(#loc116)
                cir.yield %11 : !cir.bool loc(#loc116)
              }) : (!cir.bool) -> !cir.bool loc(#loc116)
              cir.if %10 {
                %11 = cir.const #cir.int<1> : !s32i loc(#loc123)
                %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc125)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc125)
                cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc358)
                cir.scope {
                  %15 = cir.const #cir.int<0> : !s32i loc(#loc128)
                  cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc360)
                  cir.for : cond {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                    %17 = cir.const #cir.int<10> : !s32i loc(#loc131)
                    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc361)
                    cir.condition(%18) loc(#loc132)
                  } body {
                    cir.scope {
                      %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                      %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc135)
                      %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc135)
                      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc136)
                    } loc(#loc362)
                    cir.yield loc(#loc127)
                  } step {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                    %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc138)
                    cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc363)
                    cir.yield loc(#loc359)
                  } loc(#loc359)
                } loc(#loc359)
              } else {
                %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc78)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc78)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc139)
              } loc(#loc357)
            } loc(#loc354)
          } loc(#loc351)
          cir.break loc(#loc140)
        } loc(#loc105)
        cir.yield loc(#loc98)
      } loc(#loc98)
    } loc(#loc350)
    cir.return loc(#loc80)
  } loc(#loc346)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc365)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc146)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc366)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc150)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc152)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc321)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc153)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc154)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc154)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc152)
          cir.break loc(#loc155)
        } loc(#loc151)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc157)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc157)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc158)
          cir.break loc(#loc159)
        } loc(#loc156)
        cir.yield loc(#loc148)
      } loc(#loc148)
    } loc(#loc367)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc162)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc370)
            %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc371)
            %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc371)
            cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc371)
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc173)
              %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc373)
              %10 = cir.ternary(%9, true {
                %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
                %12 = cir.const #cir.int<10> : !s32i loc(#loc176)
                %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc374)
                %14 = cir.ternary(%13, true {
                  %15 = cir.const #true loc(#loc174)
                  cir.yield %15 : !cir.bool loc(#loc174)
                }, false {
                  %15 = cir.const #false loc(#loc174)
                  cir.yield %15 : !cir.bool loc(#loc174)
                }) : (!cir.bool) -> !cir.bool loc(#loc174)
                cir.yield %14 : !cir.bool loc(#loc174)
              }, false {
                %11 = cir.const #false loc(#loc174)
                cir.yield %11 : !cir.bool loc(#loc174)
              }) : (!cir.bool) -> !cir.bool loc(#loc174)
              cir.if %10 {
                %11 = cir.const #cir.int<1> : !s32i loc(#loc181)
                %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc183)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc183)
                cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc376)
                cir.scope {
                  %15 = cir.const #cir.int<0> : !s32i loc(#loc186)
                  cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc378)
                  cir.for : cond {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                    %17 = cir.const #cir.int<10> : !s32i loc(#loc189)
                    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc379)
                    cir.condition(%18) loc(#loc190)
                  } body {
                    cir.scope {
                      %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc192)
                      %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc193)
                      %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc193)
                      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc193)
                      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc194)
                    } loc(#loc380)
                    cir.yield loc(#loc185)
                  } step {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc195)
                    %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc196)
                    cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc381)
                    cir.yield loc(#loc377)
                  } loc(#loc377)
                } loc(#loc377)
              } else {
                %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc197)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc197)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc198)
              } loc(#loc375)
            } loc(#loc372)
          } loc(#loc369)
          cir.break loc(#loc199)
        } loc(#loc163)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc201)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc201)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc202)
          cir.break loc(#loc203)
        } loc(#loc200)
        cir.yield loc(#loc160)
      } loc(#loc160)
    } loc(#loc368)
    cir.return loc(#loc142)
  } loc(#loc364)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc383)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc208)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc209)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc384)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc213)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc215)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc215)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc216)
          cir.break loc(#loc217)
        } loc(#loc214)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc219)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc386)
          cir.break loc(#loc221)
        } loc(#loc218)
        cir.yield loc(#loc211)
      } loc(#loc211)
    } loc(#loc385)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc224)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc389)
            %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc390)
            %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc390)
            cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc390)
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc234)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc235)
              %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc392)
              cir.if %9 {
                %10 = cir.const #cir.int<1> : !s32i loc(#loc239)
                %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc240)
                %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc241)
                %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc241)
                cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc394)
                cir.scope {
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc244)
                  cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc396)
                  cir.for : cond {
                    %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                    %16 = cir.const #cir.int<10> : !s32i loc(#loc247)
                    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc397)
                    cir.condition(%17) loc(#loc248)
                  } body {
                    cir.scope {
                      %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                      %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc251)
                      %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc251)
                      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc251)
                      cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc252)
                    } loc(#loc398)
                    cir.yield loc(#loc243)
                  } step {
                    %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc253)
                    %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc254)
                    cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc399)
                    cir.yield loc(#loc395)
                  } loc(#loc395)
                } loc(#loc395)
              } else {
                %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc255)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc255)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc256)
              } loc(#loc393)
            } loc(#loc391)
          } loc(#loc388)
          cir.break loc(#loc257)
        } loc(#loc225)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc259)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc259)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc260)
          cir.break loc(#loc261)
        } loc(#loc258)
        cir.yield loc(#loc222)
      } loc(#loc222)
    } loc(#loc387)
    cir.return loc(#loc205)
  } loc(#loc382)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc401)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc266)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc267)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc402)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc271)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc273)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc404)
          cir.break loc(#loc275)
        } loc(#loc272)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc277)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc277)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc278)
          cir.break loc(#loc279)
        } loc(#loc276)
        cir.yield loc(#loc269)
      } loc(#loc269)
    } loc(#loc403)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc282)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc407)
            %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc408)
            %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc408)
            cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc408)
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc292)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc293)
              %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc410)
              cir.if %9 {
                %10 = cir.const #cir.int<1> : !s32i loc(#loc297)
                %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc298)
                %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc299)
                %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc299)
                cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc412)
                cir.scope {
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc302)
                  cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc414)
                  cir.for : cond {
                    %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc304)
                    %16 = cir.const #cir.int<10> : !s32i loc(#loc305)
                    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc415)
                    cir.condition(%17) loc(#loc306)
                  } body {
                    cir.scope {
                      %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc308)
                      %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc309)
                      %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc309)
                      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc309)
                      cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc310)
                    } loc(#loc416)
                    cir.yield loc(#loc301)
                  } step {
                    %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc311)
                    %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc312)
                    cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc417)
                    cir.yield loc(#loc413)
                  } loc(#loc413)
                } loc(#loc413)
              } else {
                %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc313)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc313)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc314)
              } loc(#loc411)
            } loc(#loc409)
          } loc(#loc406)
          cir.break loc(#loc315)
        } loc(#loc283)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc317)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc317)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc318)
          cir.break loc(#loc319)
        } loc(#loc316)
        cir.yield loc(#loc280)
      } loc(#loc280)
    } loc(#loc405)
    cir.return loc(#loc263)
  } loc(#loc400)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":31:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":35:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":57:23)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":22:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":66:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":24:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":24:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":26:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":26:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":26:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":27:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":37:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":27:12)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":29:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":31:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":31:16)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":32:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":33:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":35:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":36:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":38:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":65:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":38:12)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":40:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":41:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":59:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":42:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":42:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":43:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":43:30)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":46:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":58:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":46:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":46:21)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":47:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":54:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":56:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":48:28)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":48:20)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":48:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":50:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":53:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":50:21)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":50:17)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":50:24)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":50:28)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":50:26)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":51:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":52:37)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":52:30)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":52:17)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":50:33)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":50:32)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":57:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":60:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":61:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":63:19)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":63:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":64:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":260:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":266:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":262:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":262:14)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":263:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":263:14)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":264:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":264:14)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":265:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":265:14)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":111:23)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":73:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":116:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":75:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":75:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":77:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":77:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":77:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":78:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":88:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":78:12)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":80:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":82:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":82:16)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":82:23)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":83:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":84:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":86:19)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":86:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":87:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":89:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":115:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":89:12)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":91:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":93:19)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":93:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":94:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":95:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":96:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":113:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":97:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":97:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":98:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":98:30)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":100:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":112:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":100:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":100:21)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":100:23)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":100:26)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":100:34)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":100:36)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":101:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":108:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":110:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":102:28)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":102:20)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":102:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":104:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":107:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":104:21)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":104:17)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":104:24)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":104:28)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":104:26)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":105:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":106:37)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":106:30)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":106:17)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":104:33)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":104:32)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":111:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":114:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":119:1)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":162:1)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":121:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":121:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":123:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":123:12)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":123:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":124:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":134:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":124:12)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":126:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":128:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":128:16)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":128:23)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":129:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":130:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":132:19)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":132:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":133:9)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":135:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":161:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":135:12)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":137:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":138:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":155:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":139:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":139:13)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":140:9)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":140:30)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":142:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":154:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":142:13)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":142:21)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":142:23)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":142:26)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":142:34)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":142:36)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":143:9)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":150:9)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":152:9)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":144:28)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":144:20)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":144:13)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":146:13)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":149:13)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":146:21)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":146:17)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":146:24)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":146:28)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":146:26)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":147:13)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":148:37)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":148:30)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":148:17)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":146:33)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":146:32)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":153:23)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":153:13)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":156:5)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":157:5)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":159:19)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":159:9)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":160:9)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":165:1)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":210:1)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":167:5)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":167:9)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":169:13)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":169:12)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":169:5)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":170:5)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":181:5)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":170:12)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":172:5)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":174:19)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":174:9)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":175:9)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":176:5)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":179:16)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":179:9)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":180:9)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":182:5)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":209:5)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":182:12)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":184:5)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":185:5)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":203:5)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":186:9)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":186:13)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":187:9)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":187:30)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":190:9)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":202:9)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":190:13)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":190:21)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":191:9)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":198:9)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":200:9)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":192:28)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":192:20)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":192:13)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":194:13)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":197:13)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":194:21)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":194:17)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":194:24)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":194:28)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":194:26)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":195:13)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":196:37)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":196:30)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":196:17)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":194:33)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":194:32)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":201:23)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":201:13)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":204:5)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":205:5)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":207:19)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":207:9)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":208:9)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":213:1)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":258:1)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":215:5)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":215:9)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":217:13)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":217:12)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":217:5)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":218:5)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":229:5)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":218:12)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":220:5)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":223:16)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":223:9)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":224:9)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":225:5)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":227:19)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":227:9)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":228:9)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":230:5)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":257:5)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":230:12)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":232:5)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":233:5)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":251:5)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":234:9)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":234:13)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":235:9)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":235:30)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":238:9)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":250:9)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":238:13)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":238:21)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":239:9)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":246:9)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":248:9)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":240:28)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":240:20)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":240:13)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":242:13)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":245:13)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":242:21)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":242:17)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":242:24)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":242:28)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":242:26)
#loc307 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":243:13)
#loc308 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":244:37)
#loc309 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":244:30)
#loc310 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":244:17)
#loc311 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":242:33)
#loc312 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":242:32)
#loc313 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":249:23)
#loc314 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":249:13)
#loc315 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":252:5)
#loc316 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":253:5)
#loc317 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":255:19)
#loc318 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":255:9)
#loc319 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c":256:9)
#loc320 = loc(fused[#loc1, #loc2])
#loc321 = loc(fused[#loc3, #loc4])
#loc322 = loc(fused[#loc6, #loc7])
#loc323 = loc(fused[#loc9, #loc10])
#loc324 = loc(fused[#loc12, #loc13])
#loc325 = loc(fused[#loc14, #loc15])
#loc326 = loc(fused[#loc18, #loc16])
#loc327 = loc(fused[#loc19, #loc20])
#loc328 = loc(fused[#loc29, #loc30])
#loc329 = loc(fused[#loc33, #loc34])
#loc330 = loc(fused[#loc35, #loc36])
#loc331 = loc(fused[#loc37, #loc38])
#loc332 = loc(fused[#loc39, #loc40])
#loc333 = loc(fused[#loc41, #loc42])
#loc334 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc335 = loc(fused[#loc48, #loc46])
#loc336 = loc(fused[#loc49, #loc50])
#loc337 = loc(fused[#loc52, #loc51])
#loc338 = loc(fused[#loc53, #loc54])
#loc339 = loc(fused[#loc56, #loc50])
#loc340 = loc(fused[#loc61, #loc60])
#loc341 = loc(fused[#loc68, #loc69])
#loc342 = loc(fused[#loc70, #loc71])
#loc343 = loc(fused[#loc72, #loc73])
#loc344 = loc(fused[#loc74, #loc75])
#loc345 = loc(fused[#loc76, #loc77])
#loc346 = loc(fused[#loc79, #loc80])
#loc347 = loc(fused[#loc81, #loc82])
#loc348 = loc(fused[#loc85, #loc83])
#loc349 = loc(fused[#loc86, #loc87])
#loc350 = loc(fused[#loc98, #loc99])
#loc351 = loc(fused[#loc106, #loc107])
#loc352 = loc(fused[#loc108, #loc109])
#loc353 = loc(fused[#loc110, #loc111])
#loc354 = loc(fused[#loc112, #loc113])
#loc355 = loc(fused[#loc114, #loc115])
#loc356 = loc(fused[#loc117, #loc119])
#loc357 = loc(fused[#loc120, #loc121, #loc122, #loc113])
#loc358 = loc(fused[#loc125, #loc123])
#loc359 = loc(fused[#loc126, #loc127])
#loc360 = loc(fused[#loc129, #loc128])
#loc361 = loc(fused[#loc130, #loc131])
#loc362 = loc(fused[#loc133, #loc127])
#loc363 = loc(fused[#loc138, #loc137])
#loc364 = loc(fused[#loc141, #loc142])
#loc365 = loc(fused[#loc143, #loc144])
#loc366 = loc(fused[#loc147, #loc145])
#loc367 = loc(fused[#loc148, #loc149])
#loc368 = loc(fused[#loc160, #loc161])
#loc369 = loc(fused[#loc164, #loc165])
#loc370 = loc(fused[#loc166, #loc167])
#loc371 = loc(fused[#loc168, #loc169])
#loc372 = loc(fused[#loc170, #loc171])
#loc373 = loc(fused[#loc172, #loc173])
#loc374 = loc(fused[#loc175, #loc177])
#loc375 = loc(fused[#loc178, #loc179, #loc180, #loc171])
#loc376 = loc(fused[#loc183, #loc181])
#loc377 = loc(fused[#loc184, #loc185])
#loc378 = loc(fused[#loc187, #loc186])
#loc379 = loc(fused[#loc188, #loc189])
#loc380 = loc(fused[#loc191, #loc185])
#loc381 = loc(fused[#loc196, #loc195])
#loc382 = loc(fused[#loc204, #loc205])
#loc383 = loc(fused[#loc206, #loc207])
#loc384 = loc(fused[#loc210, #loc208])
#loc385 = loc(fused[#loc211, #loc212])
#loc386 = loc(fused[#loc220, #loc219])
#loc387 = loc(fused[#loc222, #loc223])
#loc388 = loc(fused[#loc226, #loc227])
#loc389 = loc(fused[#loc228, #loc229])
#loc390 = loc(fused[#loc230, #loc231])
#loc391 = loc(fused[#loc232, #loc233])
#loc392 = loc(fused[#loc234, #loc235])
#loc393 = loc(fused[#loc236, #loc237, #loc238, #loc233])
#loc394 = loc(fused[#loc241, #loc239])
#loc395 = loc(fused[#loc242, #loc243])
#loc396 = loc(fused[#loc245, #loc244])
#loc397 = loc(fused[#loc246, #loc247])
#loc398 = loc(fused[#loc249, #loc243])
#loc399 = loc(fused[#loc254, #loc253])
#loc400 = loc(fused[#loc262, #loc263])
#loc401 = loc(fused[#loc264, #loc265])
#loc402 = loc(fused[#loc268, #loc266])
#loc403 = loc(fused[#loc269, #loc270])
#loc404 = loc(fused[#loc274, #loc273])
#loc405 = loc(fused[#loc280, #loc281])
#loc406 = loc(fused[#loc284, #loc285])
#loc407 = loc(fused[#loc286, #loc287])
#loc408 = loc(fused[#loc288, #loc289])
#loc409 = loc(fused[#loc290, #loc291])
#loc410 = loc(fused[#loc292, #loc293])
#loc411 = loc(fused[#loc294, #loc295, #loc296, #loc291])
#loc412 = loc(fused[#loc299, #loc297])
#loc413 = loc(fused[#loc300, #loc301])
#loc414 = loc(fused[#loc303, #loc302])
#loc415 = loc(fused[#loc304, #loc305])
#loc416 = loc(fused[#loc307, #loc301])
#loc417 = loc(fused[#loc312, #loc311])
