!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc81)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc82)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc83)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc85)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc12)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc87)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc88)
    cir.goto "sink" loc(#loc89)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc21)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %3 = cir.cast(int_to_float, %2 : !s32i), !cir.double loc(#loc18)
    cir.store %3, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc88)
    cir.scope {
      %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc24)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc25)
      %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc82)
      %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
      %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc27)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
      %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc91)
      cir.if %15 {
        %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc32)
        %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc33)
        cir.store %17, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc93)
      } else {
        %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc36)
      } loc(#loc92)
    } loc(#loc90)
    %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc37)
    %5 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc38)
    %6 = cir.call @sqrt(%5) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc37)
    %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc37)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc39)
    cir.return loc(#loc14)
  } loc(#loc86)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc41)
  } loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc97)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc98)
    cir.goto "sink" loc(#loc99)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc53)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %3 = cir.cast(int_to_float, %2 : !s32i), !cir.double loc(#loc50)
    cir.store %3, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc98)
    cir.scope {
      %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc56)
      %5 = cir.const #cir.int<256> : !s32i loc(#loc57)
      %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc82)
      %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc58)
      %8 = cir.call @fgets(%4, %5, %7) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc59)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc60)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc60)
      %11 = cir.cmp(ne, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc101)
      cir.if %11 {
        %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc64)
        %13 = cir.call @atof(%12) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc65)
        cir.store %13, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc103)
      } else {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc68)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc68)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } loc(#loc102)
    } loc(#loc100)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc72)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc73)
      %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc73)
      %7 = cir.cmp(lt, %4, %6) : !cir.double, !cir.bool loc(#loc105)
      cir.if %7 {
        %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc77)
      } else {
        %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc78)
        %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc79)
        %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc78)
        %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc78)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc80)
      } loc(#loc106)
    } loc(#loc104)
    cir.return loc(#loc46)
  } loc(#loc96)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":41:23)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":23:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":46:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":28:9)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":28:41)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":29:9)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":29:31)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":25:5)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":25:10)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":26:1)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":34:9)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":42:9)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":34:19)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":34:32)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":34:49)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":34:13)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":34:59)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":35:9)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":38:9)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":40:9)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":37:33)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":37:28)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":37:13)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":37:44)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":41:13)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":44:28)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":44:33)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":44:9)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":86:1)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":89:1)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":88:5)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":88:11)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":77:23)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":53:1)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":84:1)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":58:9)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":58:41)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":59:9)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":59:31)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":55:5)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":55:10)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":56:1)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":64:9)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":72:9)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":64:19)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":64:32)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":64:49)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":64:13)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":64:59)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":65:9)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":68:9)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":70:9)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":67:33)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":67:28)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":67:13)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":67:44)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":71:23)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":71:13)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":75:9)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":82:9)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":75:13)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":75:28)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":76:9)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":78:9)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":80:9)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":77:13)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":81:32)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":81:37)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18.c":81:13)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc84 = loc(fused[#loc7, #loc8])
#loc85 = loc(fused[#loc10, #loc11])
#loc86 = loc(fused[#loc13, #loc14])
#loc87 = loc(fused[#loc15, #loc16])
#loc88 = loc(fused[#loc17, #loc18])
#loc89 = loc(fused[#loc19, #loc20])
#loc90 = loc(fused[#loc22, #loc23])
#loc91 = loc(fused[#loc27, #loc28])
#loc92 = loc(fused[#loc29, #loc30, #loc31, #loc23])
#loc93 = loc(fused[#loc34, #loc35])
#loc94 = loc(fused[#loc40, #loc41])
#loc95 = loc(fused[#loc42, #loc43])
#loc96 = loc(fused[#loc45, #loc46])
#loc97 = loc(fused[#loc47, #loc48])
#loc98 = loc(fused[#loc49, #loc50])
#loc99 = loc(fused[#loc51, #loc52])
#loc100 = loc(fused[#loc54, #loc55])
#loc101 = loc(fused[#loc59, #loc60])
#loc102 = loc(fused[#loc61, #loc62, #loc63, #loc55])
#loc103 = loc(fused[#loc66, #loc67])
#loc104 = loc(fused[#loc70, #loc71])
#loc105 = loc(fused[#loc72, #loc73])
#loc106 = loc(fused[#loc74, #loc75, #loc76, #loc71])
