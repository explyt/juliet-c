!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc194)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc195)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc196)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc12)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc199)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc201)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc16)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc203)
      } loc(#loc202)
    } loc(#loc200)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc205)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc208)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc209)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc31)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc31)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc208)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc30)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc30)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc30)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc30)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc30)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc30)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc30)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc209)
          %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc34)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc35)
          %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc37)
        } loc(#loc207)
      } loc(#loc206)
    } loc(#loc204)
    cir.return loc(#loc9)
  } loc(#loc197)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc211)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc212)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc213)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc214)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc210)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    cir.return %2 : !s32i loc(#loc216)
  } loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc52)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc217)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc218)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc61)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc221)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc223)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc65)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc65)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc68)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc68)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc68)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc227)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc72)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc72)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc77)
      } else {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc230)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc231)
          %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc84)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
          %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc84)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc230)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc83)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc83)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc83)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc83)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc83)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc83)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc83)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc83)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc231)
          %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc87)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc88)
          %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc90)
        } loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc58)
  } loc(#loc219)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc233)
    cir.return %2 : !s32i loc(#loc233)
  } loc(#loc232)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc235)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc236)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc238)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc103)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc103)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc106)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc106)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc106)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc242)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc110)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc110)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc245)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc246)
          %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc119)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc120)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
          %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc119)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc245)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc118)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc118)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc118)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc118)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc118)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc118)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc118)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc118)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc246)
          %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc121)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc121)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc122)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc123)
          %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc124)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc124)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc125)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc96)
  } loc(#loc234)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc126)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc247)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc133)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc250)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc252)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc137)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc143)
      } else {
        %5 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc126)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc126)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
      } loc(#loc253)
    } loc(#loc251)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc256)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc147)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc147)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc259)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc260)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc156)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc156)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc259)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc155)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc155)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc155)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc155)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc155)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc155)
          %17 = cir.binop(mul, %14, %16) : !u64i loc(#loc155)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc155)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc155)
          cir.store %19, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc260)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc158)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc159)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc159)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc160)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc160)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc158)
          %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc161)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc162)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc255)
    cir.return loc(#loc130)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc167)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc263)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc265)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc171)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc171)
      cir.if %4 {
        %5 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc174)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc174)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc174)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc267)
      } loc(#loc266)
    } loc(#loc264)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc269)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc178)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc178)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc272)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc273)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc187)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc188)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc187)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc272)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc186)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc186)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc186)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc186)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc186)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc186)
          %17 = cir.binop(mul, %14, %16) : !u64i loc(#loc186)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc186)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc186)
          cir.store %19, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc273)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc189)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc190)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc190)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc191)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc191)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc189)
          %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc192)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc192)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc193)
        } loc(#loc271)
      } loc(#loc270)
    } loc(#loc268)
    cir.return loc(#loc164)
  } loc(#loc261)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":47:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":40:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":59:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":42:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":42:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":43:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":43:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":44:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":48:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":44:8)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":44:26)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":45:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":47:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":49:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":58:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":49:8)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":49:26)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":50:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":51:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":57:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":53:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":53:49)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":54:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":54:35)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":53:30)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":53:45)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":55:26)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":55:32)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":55:19)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":56:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":56:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":163:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":169:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":165:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":165:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":166:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":166:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":167:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":167:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":168:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":168:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":28:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":31:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":30:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":30:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":78:19)
#loc53 = loc("/usr/include/wchar.h":247:1)
#loc54 = loc("/usr/include/wchar.h":247:51)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":66:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":90:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":68:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":68:12)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":69:12)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":69:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":70:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":74:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":70:8)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":70:26)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":71:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":73:24)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":73:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":75:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":89:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":75:8)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":75:27)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":76:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":79:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":81:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":78:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":82:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":88:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":84:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":84:52)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":85:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":85:35)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":84:30)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":84:48)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":86:26)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":86:32)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":86:19)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":87:35)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":87:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":33:1)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":36:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":35:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":35:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":93:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":112:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":95:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":95:12)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":96:12)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":96:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":97:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":101:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":97:8)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":97:26)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":98:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":100:24)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":100:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":102:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":111:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":102:8)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":102:26)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":103:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":104:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":110:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":106:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":106:52)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":107:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":107:35)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":106:30)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":106:48)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":108:26)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":108:32)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":108:19)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":109:35)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":109:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":127:24)
#loc127 = loc("/usr/include/string.h":141:1)
#loc128 = loc("/usr/include/string.h":142:14)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":115:1)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":139:1)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":117:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":117:12)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":118:12)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":118:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":119:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":128:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":119:8)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":119:27)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":120:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":123:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":125:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":122:19)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":122:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":127:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":129:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":138:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":129:8)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":129:26)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":130:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":131:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":137:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":133:13)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":133:49)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":134:13)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":134:35)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":133:30)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":133:45)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":135:19)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":135:26)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":135:32)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":136:31)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":136:13)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":142:1)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":161:1)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":144:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":144:12)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":145:12)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":145:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":146:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":150:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":146:8)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":146:26)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":147:5)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":149:24)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":149:9)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":151:5)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":160:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":151:8)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":151:26)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":152:5)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":153:9)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":159:9)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":155:13)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":155:49)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":156:13)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":156:35)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":155:30)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":155:45)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":157:19)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":157:26)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":157:32)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":158:31)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":158:13)
#loc194 = loc(fused[#loc2, #loc3])
#loc195 = loc(fused[#loc4, #loc5])
#loc196 = loc(fused[#loc6, #loc7])
#loc197 = loc(fused[#loc8, #loc9])
#loc198 = loc(fused[#loc10, #loc11])
#loc199 = loc(fused[#loc13, #loc12])
#loc200 = loc(fused[#loc14, #loc15])
#loc201 = loc(fused[#loc16, #loc17])
#loc202 = loc(fused[#loc18, #loc15])
#loc203 = loc(fused[#loc19, #loc1])
#loc204 = loc(fused[#loc20, #loc21])
#loc205 = loc(fused[#loc22, #loc23])
#loc206 = loc(fused[#loc24, #loc21])
#loc207 = loc(fused[#loc25, #loc26])
#loc208 = loc(fused[#loc27, #loc28])
#loc209 = loc(fused[#loc29, #loc30])
#loc210 = loc(fused[#loc38, #loc39])
#loc211 = loc(fused[#loc40, #loc41])
#loc212 = loc(fused[#loc42, #loc43])
#loc213 = loc(fused[#loc44, #loc45])
#loc214 = loc(fused[#loc46, #loc47])
#loc215 = loc(fused[#loc48, #loc49])
#loc216 = loc(fused[#loc51, #loc50])
#loc217 = loc(fused[#loc53, #loc54])
#loc218 = loc(fused[#loc55, #loc56])
#loc219 = loc(fused[#loc57, #loc58])
#loc220 = loc(fused[#loc59, #loc60])
#loc221 = loc(fused[#loc62, #loc61])
#loc222 = loc(fused[#loc63, #loc64])
#loc223 = loc(fused[#loc65, #loc66])
#loc224 = loc(fused[#loc67, #loc64])
#loc225 = loc(fused[#loc69, #loc68])
#loc226 = loc(fused[#loc70, #loc71])
#loc227 = loc(fused[#loc72, #loc73])
#loc228 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc229 = loc(fused[#loc78, #loc79])
#loc230 = loc(fused[#loc80, #loc81])
#loc231 = loc(fused[#loc82, #loc83])
#loc232 = loc(fused[#loc91, #loc92])
#loc233 = loc(fused[#loc94, #loc93])
#loc234 = loc(fused[#loc95, #loc96])
#loc235 = loc(fused[#loc97, #loc98])
#loc236 = loc(fused[#loc100, #loc99])
#loc237 = loc(fused[#loc101, #loc102])
#loc238 = loc(fused[#loc103, #loc104])
#loc239 = loc(fused[#loc105, #loc102])
#loc240 = loc(fused[#loc107, #loc106])
#loc241 = loc(fused[#loc108, #loc109])
#loc242 = loc(fused[#loc110, #loc111])
#loc243 = loc(fused[#loc112, #loc109])
#loc244 = loc(fused[#loc113, #loc114])
#loc245 = loc(fused[#loc115, #loc116])
#loc246 = loc(fused[#loc117, #loc118])
#loc247 = loc(fused[#loc127, #loc128])
#loc248 = loc(fused[#loc129, #loc130])
#loc249 = loc(fused[#loc131, #loc132])
#loc250 = loc(fused[#loc134, #loc133])
#loc251 = loc(fused[#loc135, #loc136])
#loc252 = loc(fused[#loc137, #loc138])
#loc253 = loc(fused[#loc139, #loc140, #loc141, #loc136])
#loc254 = loc(fused[#loc144, #loc126])
#loc255 = loc(fused[#loc145, #loc146])
#loc256 = loc(fused[#loc147, #loc148])
#loc257 = loc(fused[#loc149, #loc146])
#loc258 = loc(fused[#loc150, #loc151])
#loc259 = loc(fused[#loc152, #loc153])
#loc260 = loc(fused[#loc154, #loc155])
#loc261 = loc(fused[#loc163, #loc164])
#loc262 = loc(fused[#loc165, #loc166])
#loc263 = loc(fused[#loc168, #loc167])
#loc264 = loc(fused[#loc169, #loc170])
#loc265 = loc(fused[#loc171, #loc172])
#loc266 = loc(fused[#loc173, #loc170])
#loc267 = loc(fused[#loc175, #loc174])
#loc268 = loc(fused[#loc176, #loc177])
#loc269 = loc(fused[#loc178, #loc179])
#loc270 = loc(fused[#loc180, #loc177])
#loc271 = loc(fused[#loc181, #loc182])
#loc272 = loc(fused[#loc183, #loc184])
#loc273 = loc(fused[#loc185, #loc186])
