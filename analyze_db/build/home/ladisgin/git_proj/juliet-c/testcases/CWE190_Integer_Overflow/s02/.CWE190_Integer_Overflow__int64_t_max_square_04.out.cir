!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":171:10)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":171:14)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":171:20)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":171:32)
#loc209 = loc(fused[#loc48, #loc49])
#loc210 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc189)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc193)
    cir.br ^bb1 loc(#loc194)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc195)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc15)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc197)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc198)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc199)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc23)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc6)
    %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc23)
    cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc191)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc24)
    cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc25)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc4)
  } loc(#loc190)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc200)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc205)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc206)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc207)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc210)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc55)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_max_square_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call @CWE190_Integer_Overflow__int64_t_max_square_04_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_max_square_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call @CWE190_Integer_Overflow__int64_t_max_square_04_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc213)
    cir.return %17 : !s32i loc(#loc213)
  } loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc66)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc214)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc77)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc218)
    cir.br ^bb1 loc(#loc219)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc220)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc83)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc221)
    cir.br ^bb3 loc(#loc80)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc222)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc223)
  ^bb6:  // pred: ^bb5
    %8 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb13 loc(#loc89)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc224)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc94)
    %11 = cir.call @imaxabs(%10) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc95)
    %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc95)
    %13 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc96)
    %14 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc97)
    %15 = cir.cast(int_to_float, %14 : !s64i), !cir.long_double<!cir.f80> loc(#loc97)
    %16 = cir.call @sqrtl(%15) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc96)
    %17 = cir.cmp(le, %12, %16) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc225)
    cir.brcond %17 ^bb9, ^bb10 loc(#loc226)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc102)
    %19 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc74)
    %20 = cir.binop(mul, %18, %19) nsw : !s64i loc(#loc102)
    cir.store %20, %0 : !s64i, !cir.ptr<!s64i> loc(#loc216)
    %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc104)
    cir.br ^bb11 loc(#loc100)
  ^bb10:  // pred: ^bb8
    %22 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc70)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.br ^bb11 loc(#loc93)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc93)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc86)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc86)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc72)
  } loc(#loc215)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc228)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc112)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc230)
    cir.br ^bb1 loc(#loc231)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc116)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc232)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc118)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc233)
    cir.br ^bb3 loc(#loc115)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc115)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc234)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %7 ^bb6, ^bb12 loc(#loc235)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc236)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc126)
    %9 = cir.call @imaxabs(%8) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc127)
    %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc127)
    %11 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc128)
    %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc129)
    %13 = cir.cast(int_to_float, %12 : !s64i), !cir.long_double<!cir.f80> loc(#loc129)
    %14 = cir.call @sqrtl(%13) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc128)
    %15 = cir.cmp(le, %10, %14) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc237)
    cir.brcond %15 ^bb8, ^bb9 loc(#loc238)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc134)
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc109)
    %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc134)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc228)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc135)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc136)
    cir.br ^bb10 loc(#loc132)
  ^bb9:  // pred: ^bb7
    %20 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc137)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc137)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc138)
    cir.br ^bb10 loc(#loc125)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc125)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc121)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc121)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc107)
  } loc(#loc227)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc145)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc149)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc149)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc244)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    cir.br ^bb4 loc(#loc151)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc155)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc155)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc245)
    cir.br ^bb4 loc(#loc148)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc148)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc246)
  ^bb6:  // pred: ^bb5
    %9 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc159)
    cir.brcond %10 ^bb7, ^bb10 loc(#loc247)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc248)
  ^bb8:  // pred: ^bb7
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc163)
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc142)
    %13 = cir.binop(mul, %11, %12) nsw : !s64i loc(#loc163)
    cir.store %13, %0 : !s64i, !cir.ptr<!s64i> loc(#loc240)
    %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc164)
    cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc165)
    cir.br ^bb9 loc(#loc162)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc158)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc158)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc140)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc250)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc251)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc172)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc252)
    cir.br ^bb1 loc(#loc253)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc176)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc254)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc178)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc178)
    cir.store %6, %1 : !s64i, !cir.ptr<!s64i> loc(#loc255)
    cir.br ^bb3 loc(#loc175)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc175)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc256)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc182)
    cir.brcond %8 ^bb6, ^bb9 loc(#loc257)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc258)
  ^bb7:  // pred: ^bb6
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc186)
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc169)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc186)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc250)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc187)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc188)
    cir.br ^bb8 loc(#loc185)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc181)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc181)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc167)
  } loc(#loc249)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":31:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":48:1)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":44:13)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":44:37)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":33:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":33:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":34:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":34:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":35:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":39:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":35:8)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":38:16)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":38:9)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":40:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":47:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":40:8)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":41:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":42:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":46:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":44:30)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":45:31)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":45:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":154:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":160:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":156:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":156:14)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":157:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":157:14)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":158:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":158:14)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":159:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":159:14)
#loc36 = loc("/usr/include/stdlib.h":575:1)
#loc37 = loc("/usr/include/stdlib.h":575:41)
#loc38 = loc("/usr/include/time.h":76:1)
#loc39 = loc("/usr/include/time.h":76:38)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":176:15)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":178:15)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":181:15)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":183:15)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":171:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":186:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":172:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":174:27)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":174:22)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":174:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":176:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":177:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":177:57)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":178:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":181:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":182:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":182:56)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":183:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":185:12)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":185:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":67:19)
#loc67 = loc("/usr/include/inttypes.h":351:1)
#loc68 = loc("/usr/include/inttypes.h":351:74)
#loc69 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":79:23)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":55:1)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":82:1)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":74:13)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":74:37)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":57:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":57:13)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":58:12)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":58:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":59:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":63:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":59:8)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":60:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":62:16)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":62:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":64:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":81:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":64:8)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":65:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":68:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":70:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":67:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":80:9)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:31)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:40)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:46)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":72:55)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":73:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":76:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":78:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":74:30)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":75:31)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":75:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":79:13)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":85:1)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":107:1)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":99:13)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":99:37)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":87:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":87:13)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":88:12)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":88:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":89:5)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":93:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":89:8)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":90:5)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":92:16)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":92:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":94:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":106:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":94:8)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":95:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:9)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":105:9)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:31)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:13)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:40)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:46)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":97:55)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":98:9)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":101:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":103:9)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":99:30)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":100:31)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":100:13)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":104:23)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":104:13)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":110:1)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":132:1)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":128:13)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":128:37)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":112:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":112:13)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":113:12)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":113:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":114:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":123:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":114:8)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":115:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":118:5)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":120:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":117:19)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":117:9)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":122:16)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":122:9)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":124:5)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":131:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":124:8)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":125:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":126:9)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":130:9)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":128:30)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":129:31)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":129:13)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":135:1)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":152:1)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":148:13)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":148:37)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":137:5)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":137:13)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":138:12)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":138:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":139:5)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":143:5)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":139:8)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":140:5)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":142:16)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":142:9)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":144:5)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":151:5)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":144:8)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":145:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":146:9)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":150:9)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":148:30)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":149:31)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_max_square_04.c":149:13)
#loc189 = loc(fused[#loc1, #loc2])
#loc190 = loc(fused[#loc3, #loc4])
#loc191 = loc(fused[#loc5, #loc6])
#loc192 = loc(fused[#loc7, #loc8])
#loc193 = loc(fused[#loc10, #loc9])
#loc194 = loc(fused[#loc11, #loc12])
#loc195 = loc(fused[#loc14, #loc12])
#loc196 = loc(fused[#loc16, #loc15])
#loc197 = loc(fused[#loc17, #loc18])
#loc198 = loc(fused[#loc20, #loc18])
#loc199 = loc(fused[#loc21, #loc22])
#loc200 = loc(fused[#loc26, #loc27])
#loc201 = loc(fused[#loc28, #loc29])
#loc202 = loc(fused[#loc30, #loc31])
#loc203 = loc(fused[#loc32, #loc33])
#loc204 = loc(fused[#loc34, #loc35])
#loc205 = loc(fused[#loc36, #loc37])
#loc206 = loc(fused[#loc38, #loc39])
#loc207 = loc(fused[#loc40, #loc41])
#loc208 = loc(fused[#loc46, #loc47])
#loc211 = loc(fused[#loc57, #loc58])
#loc212 = loc(fused[#loc61, #loc62])
#loc213 = loc(fused[#loc65, #loc64])
#loc214 = loc(fused[#loc67, #loc68])
#loc215 = loc(fused[#loc71, #loc72])
#loc216 = loc(fused[#loc73, #loc74])
#loc217 = loc(fused[#loc75, #loc76])
#loc218 = loc(fused[#loc78, #loc77])
#loc219 = loc(fused[#loc79, #loc80])
#loc220 = loc(fused[#loc82, #loc80])
#loc221 = loc(fused[#loc84, #loc83])
#loc222 = loc(fused[#loc85, #loc86])
#loc223 = loc(fused[#loc88, #loc89, #loc90, #loc86])
#loc224 = loc(fused[#loc92, #loc93])
#loc225 = loc(fused[#loc95, #loc98])
#loc226 = loc(fused[#loc99, #loc100, #loc101, #loc93])
#loc227 = loc(fused[#loc106, #loc107])
#loc228 = loc(fused[#loc108, #loc109])
#loc229 = loc(fused[#loc110, #loc111])
#loc230 = loc(fused[#loc113, #loc112])
#loc231 = loc(fused[#loc114, #loc115])
#loc232 = loc(fused[#loc117, #loc115])
#loc233 = loc(fused[#loc119, #loc118])
#loc234 = loc(fused[#loc120, #loc121])
#loc235 = loc(fused[#loc123, #loc121])
#loc236 = loc(fused[#loc124, #loc125])
#loc237 = loc(fused[#loc127, #loc130])
#loc238 = loc(fused[#loc131, #loc132, #loc133, #loc125])
#loc239 = loc(fused[#loc139, #loc140])
#loc240 = loc(fused[#loc141, #loc142])
#loc241 = loc(fused[#loc143, #loc144])
#loc242 = loc(fused[#loc146, #loc145])
#loc243 = loc(fused[#loc147, #loc148])
#loc244 = loc(fused[#loc150, #loc151, #loc152, #loc148])
#loc245 = loc(fused[#loc156, #loc155])
#loc246 = loc(fused[#loc157, #loc158])
#loc247 = loc(fused[#loc160, #loc158])
#loc248 = loc(fused[#loc161, #loc162])
#loc249 = loc(fused[#loc166, #loc167])
#loc250 = loc(fused[#loc168, #loc169])
#loc251 = loc(fused[#loc170, #loc171])
#loc252 = loc(fused[#loc173, #loc172])
#loc253 = loc(fused[#loc174, #loc175])
#loc254 = loc(fused[#loc177, #loc175])
#loc255 = loc(fused[#loc179, #loc178])
#loc256 = loc(fused[#loc180, #loc181])
#loc257 = loc(fused[#loc183, #loc181])
#loc258 = loc(fused[#loc184, #loc185])
