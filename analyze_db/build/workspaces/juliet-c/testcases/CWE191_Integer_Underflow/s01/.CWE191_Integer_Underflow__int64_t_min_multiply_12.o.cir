!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc181)
  cir.func private @printLongLongLine(!s64i) loc(#loc182)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_multiply_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc185)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc186)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc16)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc190)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc190)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc191)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc25)
    %9 = cir.unary(minus, %8) nsw : !s64i, !s64i loc(#loc25)
    %10 = cir.const #cir.int<1> : !s64i loc(#loc25)
    %11 = cir.binop(sub, %9, %10) nsw : !s64i loc(#loc25)
    cir.store %11, %2 : !s64i, !cir.ptr<!s64i> loc(#loc192)
    cir.br ^bb4 loc(#loc23)
  ^bb3:  // pred: ^bb1
    %12 = cir.const #cir.int<2> : !s32i loc(#loc27)
    %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc28)
    %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc28)
    cir.store %14, %2 : !s64i, !cir.ptr<!s64i> loc(#loc193)
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc194)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc195)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc195)
    %17 = cir.call %16() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc32)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc32)
    cir.brcond %18 ^bb7, ^bb12 loc(#loc196)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc197)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc39)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc40)
    %22 = cir.cmp(lt, %19, %21) : !s64i, !cir.bool loc(#loc198)
    cir.brcond %22 ^bb9, ^bb10 loc(#loc199)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc42)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %25 = cir.cast(integral, %24 : !s32i), !s64i loc(#loc11)
    %26 = cir.binop(mul, %23, %25) nsw : !s64i loc(#loc42)
    cir.store %26, %0 : !s64i, !cir.ptr<!s64i> loc(#loc185)
    %27 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc43)
    cir.call @printLongLongLine(%27) : (!s64i) -> () loc(#loc44)
    cir.br ^bb10 loc(#loc38)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc38)
  ^bb11:  // pred: ^bb10
    cir.br ^bb22 loc(#loc35)
  ^bb12:  // pred: ^bb6
    cir.br ^bb13 loc(#loc200)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc47)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %30 = cir.cast(integral, %29 : !s32i), !s64i loc(#loc48)
    %31 = cir.cmp(lt, %28, %30) : !s64i, !cir.bool loc(#loc201)
    cir.brcond %31 ^bb14, ^bb20 loc(#loc202)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc203)
  ^bb15:  // pred: ^bb14
    %32 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc52)
    %33 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc53)
    %34 = cir.unary(minus, %33) nsw : !s64i, !s64i loc(#loc53)
    %35 = cir.const #cir.int<1> : !s64i loc(#loc53)
    %36 = cir.binop(sub, %34, %35) nsw : !s64i loc(#loc53)
    %37 = cir.const #cir.int<2> : !s32i loc(#loc54)
    %38 = cir.cast(integral, %37 : !s32i), !s64i loc(#loc54)
    %39 = cir.binop(div, %36, %38) : !s64i loc(#loc204)
    %40 = cir.cmp(gt, %32, %39) : !s64i, !cir.bool loc(#loc205)
    cir.brcond %40 ^bb16, ^bb17 loc(#loc206)
  ^bb16:  // pred: ^bb15
    %41 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc59)
    %42 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %43 = cir.cast(integral, %42 : !s32i), !s64i loc(#loc13)
    %44 = cir.binop(mul, %41, %43) nsw : !s64i loc(#loc59)
    cir.store %44, %1 : !s64i, !cir.ptr<!s64i> loc(#loc186)
    %45 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc60)
    cir.call @printLongLongLine(%45) : (!s64i) -> () loc(#loc61)
    cir.br ^bb18 loc(#loc57)
  ^bb17:  // pred: ^bb15
    %46 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc7)
    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.br ^bb18 loc(#loc51)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc51)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc46)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc46)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc31)
  ^bb22:  // 2 preds: ^bb11, ^bb21
    cir.br ^bb23 loc(#loc31)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc9)
  } loc(#loc184)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_multiply_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc208)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc209)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    cir.return loc(#loc64)
  } loc(#loc207)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc212)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc77)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    cir.br ^bb1 loc(#loc215)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc216)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc216)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc81)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc217)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc86)
    %9 = cir.unary(minus, %8) nsw : !s64i, !s64i loc(#loc86)
    %10 = cir.const #cir.int<1> : !s64i loc(#loc86)
    %11 = cir.binop(sub, %9, %10) nsw : !s64i loc(#loc86)
    cir.store %11, %2 : !s64i, !cir.ptr<!s64i> loc(#loc218)
    cir.br ^bb4 loc(#loc84)
  ^bb3:  // pred: ^bb1
    %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc88)
    %13 = cir.unary(minus, %12) nsw : !s64i, !s64i loc(#loc88)
    %14 = cir.const #cir.int<1> : !s64i loc(#loc88)
    %15 = cir.binop(sub, %13, %14) nsw : !s64i loc(#loc88)
    cir.store %15, %2 : !s64i, !cir.ptr<!s64i> loc(#loc219)
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc80)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc220)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc221)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc221)
    %18 = cir.call %17() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc92)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %19 ^bb7, ^bb17 loc(#loc222)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc223)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc99)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %22 = cir.cast(integral, %21 : !s32i), !s64i loc(#loc100)
    %23 = cir.cmp(lt, %20, %22) : !s64i, !cir.bool loc(#loc224)
    cir.brcond %23 ^bb9, ^bb15 loc(#loc225)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc226)
  ^bb10:  // pred: ^bb9
    %24 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc104)
    %25 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc105)
    %26 = cir.unary(minus, %25) nsw : !s64i, !s64i loc(#loc105)
    %27 = cir.const #cir.int<1> : !s64i loc(#loc105)
    %28 = cir.binop(sub, %26, %27) nsw : !s64i loc(#loc105)
    %29 = cir.const #cir.int<2> : !s32i loc(#loc106)
    %30 = cir.cast(integral, %29 : !s32i), !s64i loc(#loc106)
    %31 = cir.binop(div, %28, %30) : !s64i loc(#loc227)
    %32 = cir.cmp(gt, %24, %31) : !s64i, !cir.bool loc(#loc228)
    cir.brcond %32 ^bb11, ^bb12 loc(#loc229)
  ^bb11:  // pred: ^bb10
    %33 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc111)
    %34 = cir.const #cir.int<2> : !s32i loc(#loc72)
    %35 = cir.cast(integral, %34 : !s32i), !s64i loc(#loc72)
    %36 = cir.binop(mul, %33, %35) nsw : !s64i loc(#loc111)
    cir.store %36, %0 : !s64i, !cir.ptr<!s64i> loc(#loc211)
    %37 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc112)
    cir.call @printLongLongLine(%37) : (!s64i) -> () loc(#loc113)
    cir.br ^bb13 loc(#loc109)
  ^bb12:  // pred: ^bb10
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc114)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc114)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.br ^bb13 loc(#loc103)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc103)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc98)
  ^bb15:  // 2 preds: ^bb8, ^bb14
    cir.br ^bb16 loc(#loc98)
  ^bb16:  // pred: ^bb15
    cir.br ^bb27 loc(#loc95)
  ^bb17:  // pred: ^bb6
    cir.br ^bb18 loc(#loc230)
  ^bb18:  // pred: ^bb17
    %40 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc118)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc119)
    %43 = cir.cmp(lt, %40, %42) : !s64i, !cir.bool loc(#loc231)
    cir.brcond %43 ^bb19, ^bb25 loc(#loc232)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc233)
  ^bb20:  // pred: ^bb19
    %44 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc123)
    %45 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc124)
    %46 = cir.unary(minus, %45) nsw : !s64i, !s64i loc(#loc124)
    %47 = cir.const #cir.int<1> : !s64i loc(#loc124)
    %48 = cir.binop(sub, %46, %47) nsw : !s64i loc(#loc124)
    %49 = cir.const #cir.int<2> : !s32i loc(#loc125)
    %50 = cir.cast(integral, %49 : !s32i), !s64i loc(#loc125)
    %51 = cir.binop(div, %48, %50) : !s64i loc(#loc234)
    %52 = cir.cmp(gt, %44, %51) : !s64i, !cir.bool loc(#loc235)
    cir.brcond %52 ^bb21, ^bb22 loc(#loc236)
  ^bb21:  // pred: ^bb20
    %53 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc130)
    %54 = cir.const #cir.int<2> : !s32i loc(#loc74)
    %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc74)
    %56 = cir.binop(mul, %53, %55) nsw : !s64i loc(#loc130)
    cir.store %56, %1 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    %57 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc131)
    cir.call @printLongLongLine(%57) : (!s64i) -> () loc(#loc132)
    cir.br ^bb23 loc(#loc128)
  ^bb22:  // pred: ^bb20
    %58 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc133)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    cir.br ^bb23 loc(#loc122)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc122)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc117)
  ^bb25:  // 2 preds: ^bb18, ^bb24
    cir.br ^bb26 loc(#loc117)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc91)
  ^bb27:  // 2 preds: ^bb16, ^bb26
    cir.br ^bb28 loc(#loc91)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc70)
  } loc(#loc210)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc239)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc240)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc143)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc241)
    cir.br ^bb1 loc(#loc242)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc243)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc243)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc147)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc147)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc244)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc152)
    %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc153)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc153)
    cir.store %10, %2 : !s64i, !cir.ptr<!s64i> loc(#loc245)
    cir.br ^bb4 loc(#loc150)
  ^bb3:  // pred: ^bb1
    %11 = cir.const #cir.int<2> : !s32i loc(#loc155)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc156)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc156)
    cir.store %13, %2 : !s64i, !cir.ptr<!s64i> loc(#loc246)
    cir.br ^bb4 loc(#loc146)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc146)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc247)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc248)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc248)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc160)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc160)
    cir.brcond %17 ^bb7, ^bb12 loc(#loc249)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc250)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc167)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc168)
    %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc168)
    %21 = cir.cmp(lt, %18, %20) : !s64i, !cir.bool loc(#loc251)
    cir.brcond %21 ^bb9, ^bb10 loc(#loc252)
  ^bb9:  // pred: ^bb8
    %22 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc170)
    %23 = cir.const #cir.int<2> : !s32i loc(#loc138)
    %24 = cir.cast(integral, %23 : !s32i), !s64i loc(#loc138)
    %25 = cir.binop(mul, %22, %24) nsw : !s64i loc(#loc170)
    cir.store %25, %0 : !s64i, !cir.ptr<!s64i> loc(#loc238)
    %26 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc171)
    cir.call @printLongLongLine(%26) : (!s64i) -> () loc(#loc172)
    cir.br ^bb10 loc(#loc166)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc166)
  ^bb11:  // pred: ^bb10
    cir.br ^bb17 loc(#loc163)
  ^bb12:  // pred: ^bb6
    cir.br ^bb13 loc(#loc253)
  ^bb13:  // pred: ^bb12
    %27 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc175)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc176)
    %29 = cir.cast(integral, %28 : !s32i), !s64i loc(#loc176)
    %30 = cir.cmp(lt, %27, %29) : !s64i, !cir.bool loc(#loc254)
    cir.brcond %30 ^bb14, ^bb15 loc(#loc255)
  ^bb14:  // pred: ^bb13
    %31 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc178)
    %32 = cir.const #cir.int<2> : !s32i loc(#loc140)
    %33 = cir.cast(integral, %32 : !s32i), !s64i loc(#loc140)
    %34 = cir.binop(mul, %31, %33) nsw : !s64i loc(#loc178)
    cir.store %34, %1 : !s64i, !cir.ptr<!s64i> loc(#loc239)
    %35 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc179)
    cir.call @printLongLongLine(%35) : (!s64i) -> () loc(#loc180)
    cir.br ^bb15 loc(#loc174)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc174)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc159)
  ^bb17:  // 2 preds: ^bb11, ^bb16
    cir.br ^bb18 loc(#loc159)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc136)
  } loc(#loc237)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":57:27)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":61:1)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":41:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":41:37)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":52:17)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":52:41)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":24:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":24:13)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":25:12)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":25:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":26:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":35:5)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":26:8)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":26:33)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":27:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":30:5)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":32:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":29:16)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":29:9)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":34:17)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":34:16)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":34:9)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":36:5)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":60:5)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":36:8)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":36:33)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":37:5)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":44:5)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":46:5)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":38:9)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":43:9)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":38:12)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":38:19)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":39:9)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":41:30)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":42:31)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":42:13)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":47:9)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":59:9)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":47:12)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":47:19)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":48:9)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":50:13)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":58:13)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":50:17)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":50:25)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":50:35)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":50:36)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":51:13)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":54:13)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":56:13)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":52:34)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":53:35)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":53:17)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":57:17)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":155:1)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":159:1)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":157:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":157:13)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":158:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":158:13)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":70:1)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":116:1)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":91:17)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":91:41)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":107:17)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":107:41)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":72:5)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":72:13)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":73:12)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":73:5)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":74:5)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":83:5)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":74:8)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":74:33)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":75:5)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":78:5)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":80:5)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":77:16)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":77:9)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":82:16)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":82:9)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":84:5)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":115:5)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":84:8)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":84:33)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":85:5)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":99:5)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":101:5)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":86:9)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":98:9)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":86:12)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":86:19)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":87:9)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":89:13)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":97:13)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":89:17)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":89:25)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":89:35)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":89:36)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":90:13)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":93:13)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":95:13)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":91:34)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":92:35)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":92:17)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":96:27)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":96:17)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":102:9)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":114:9)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":102:12)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":102:19)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":103:9)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":105:13)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":113:13)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":105:17)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":105:25)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":105:35)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":105:36)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":106:13)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":109:13)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":111:13)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":107:34)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":108:35)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":108:17)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":112:27)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":112:17)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":121:1)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":153:1)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":140:13)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":140:37)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":149:13)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":149:37)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":123:5)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":123:13)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":124:12)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":124:5)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":125:5)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":134:5)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":125:8)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":125:33)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":126:5)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":129:5)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":131:5)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":128:17)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":128:16)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":128:9)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":133:17)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":133:16)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":133:9)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":135:5)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":152:5)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":135:8)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":135:33)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":136:5)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":143:5)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":145:5)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":137:9)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":142:9)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":137:12)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":137:19)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":138:9)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":140:30)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":141:31)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":141:13)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":146:9)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":151:9)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":146:12)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":146:19)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":147:9)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":149:30)
#loc179 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":150:31)
#loc180 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_12.c":150:13)
#loc181 = loc(fused[#loc1, #loc2])
#loc182 = loc(fused[#loc3, #loc4])
#loc183 = loc(fused[#loc5, #loc6])
#loc184 = loc(fused[#loc8, #loc9])
#loc185 = loc(fused[#loc10, #loc11])
#loc186 = loc(fused[#loc12, #loc13])
#loc187 = loc(fused[#loc14, #loc15])
#loc188 = loc(fused[#loc17, #loc16])
#loc189 = loc(fused[#loc18, #loc19])
#loc190 = loc(fused[#loc20, #loc21])
#loc191 = loc(fused[#loc22, #loc23, #loc24, #loc19])
#loc192 = loc(fused[#loc26, #loc25])
#loc193 = loc(fused[#loc29, #loc27])
#loc194 = loc(fused[#loc30, #loc31])
#loc195 = loc(fused[#loc32, #loc33])
#loc196 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc197 = loc(fused[#loc37, #loc38])
#loc198 = loc(fused[#loc39, #loc40])
#loc199 = loc(fused[#loc41, #loc38])
#loc200 = loc(fused[#loc45, #loc46])
#loc201 = loc(fused[#loc47, #loc48])
#loc202 = loc(fused[#loc49, #loc46])
#loc203 = loc(fused[#loc50, #loc51])
#loc204 = loc(fused[#loc53, #loc54])
#loc205 = loc(fused[#loc52, #loc55])
#loc206 = loc(fused[#loc56, #loc57, #loc58, #loc51])
#loc207 = loc(fused[#loc63, #loc64])
#loc208 = loc(fused[#loc65, #loc66])
#loc209 = loc(fused[#loc67, #loc68])
#loc210 = loc(fused[#loc69, #loc70])
#loc211 = loc(fused[#loc71, #loc72])
#loc212 = loc(fused[#loc73, #loc74])
#loc213 = loc(fused[#loc75, #loc76])
#loc214 = loc(fused[#loc78, #loc77])
#loc215 = loc(fused[#loc79, #loc80])
#loc216 = loc(fused[#loc81, #loc82])
#loc217 = loc(fused[#loc83, #loc84, #loc85, #loc80])
#loc218 = loc(fused[#loc87, #loc86])
#loc219 = loc(fused[#loc89, #loc88])
#loc220 = loc(fused[#loc90, #loc91])
#loc221 = loc(fused[#loc92, #loc93])
#loc222 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc223 = loc(fused[#loc97, #loc98])
#loc224 = loc(fused[#loc99, #loc100])
#loc225 = loc(fused[#loc101, #loc98])
#loc226 = loc(fused[#loc102, #loc103])
#loc227 = loc(fused[#loc105, #loc106])
#loc228 = loc(fused[#loc104, #loc107])
#loc229 = loc(fused[#loc108, #loc109, #loc110, #loc103])
#loc230 = loc(fused[#loc116, #loc117])
#loc231 = loc(fused[#loc118, #loc119])
#loc232 = loc(fused[#loc120, #loc117])
#loc233 = loc(fused[#loc121, #loc122])
#loc234 = loc(fused[#loc124, #loc125])
#loc235 = loc(fused[#loc123, #loc126])
#loc236 = loc(fused[#loc127, #loc128, #loc129, #loc122])
#loc237 = loc(fused[#loc135, #loc136])
#loc238 = loc(fused[#loc137, #loc138])
#loc239 = loc(fused[#loc139, #loc140])
#loc240 = loc(fused[#loc141, #loc142])
#loc241 = loc(fused[#loc144, #loc143])
#loc242 = loc(fused[#loc145, #loc146])
#loc243 = loc(fused[#loc147, #loc148])
#loc244 = loc(fused[#loc149, #loc150, #loc151, #loc146])
#loc245 = loc(fused[#loc154, #loc152])
#loc246 = loc(fused[#loc157, #loc155])
#loc247 = loc(fused[#loc158, #loc159])
#loc248 = loc(fused[#loc160, #loc161])
#loc249 = loc(fused[#loc162, #loc163, #loc164, #loc159])
#loc250 = loc(fused[#loc165, #loc166])
#loc251 = loc(fused[#loc167, #loc168])
#loc252 = loc(fused[#loc169, #loc166])
#loc253 = loc(fused[#loc173, #loc174])
#loc254 = loc(fused[#loc175, #loc176])
#loc255 = loc(fused[#loc177, #loc174])
