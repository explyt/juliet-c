!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc93)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc95)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc97)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc98)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc13)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc14)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc99)
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc12)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc100)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc100)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %7 ^bb8, ^bb11 loc(#loc19)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc101)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc22)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc6)
    %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc22)
    cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc95)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc23)
    cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc24)
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc18)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc4)
  } loc(#loc94)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc102)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc105)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc34)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc108)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc44)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc48)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc48)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc49)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    cir.br ^bb4 loc(#loc51)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc47)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc113)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc113)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc54)
    cir.brcond %7 ^bb8, ^bb14 loc(#loc54)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc114)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc57)
    %9 = cir.call @imaxabs(%8) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc58)
    %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc58)
    %11 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc59)
    %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc60)
    %13 = cir.cast(int_to_float, %12 : !s64i), !cir.long_double<!cir.f80> loc(#loc60)
    %14 = cir.call @sqrtl(%13) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc59)
    %15 = cir.cmp(le, %10, %14) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc115)
    cir.brcond %15 ^bb10, ^bb11 loc(#loc116)
  ^bb10:  // pred: ^bb9
    %16 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc65)
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc41)
    %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc65)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc108)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc66)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc67)
    cir.br ^bb12 loc(#loc63)
  ^bb11:  // pred: ^bb9
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc37)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb12 loc(#loc56)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc56)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc69)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc53)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc39)
  } loc(#loc107)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc118)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc76)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc121)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc80)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc80)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2> : !s32i loc(#loc81)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc81)
    cir.store %6, %1 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc79)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc123)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc123)
  ^bb7:  // pred: ^bb6
    %7 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %8 ^bb8, ^bb11 loc(#loc86)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc124)
  ^bb9:  // pred: ^bb8
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc89)
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc73)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc89)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc118)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc90)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc91)
    cir.br ^bb10 loc(#loc88)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc92)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc85)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc71)
  } loc(#loc117)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":44:1)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":39:13)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":39:37)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":27:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":34:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":29:11)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":32:16)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":33:9)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":43:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":35:11)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":41:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":39:30)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":40:31)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":40:13)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":42:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":99:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":103:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":101:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":101:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":102:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":102:13)
#loc32 = loc("/usr/include/inttypes.h":351:1)
#loc33 = loc("/usr/include/inttypes.h":351:74)
#loc34 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":71:23)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":51:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":75:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":66:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":66:37)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":53:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":53:13)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":54:12)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":54:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":55:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":60:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":55:11)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":58:16)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":58:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":59:9)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":61:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":74:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":61:11)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:9)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":72:9)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:31)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:13)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:40)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:46)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":64:55)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":65:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":68:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":70:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":66:30)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":67:31)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":67:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":71:13)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":73:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":78:1)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":97:1)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":92:13)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":92:37)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":80:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":80:13)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":81:12)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":81:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":82:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":87:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":82:11)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":85:16)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":85:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":86:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":88:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":96:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":88:11)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":90:9)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":94:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":92:30)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":93:31)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":93:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_16.c":95:9)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc7, #loc8])
#loc97 = loc(fused[#loc10, #loc9])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc15, #loc14])
#loc100 = loc(fused[#loc17, #loc18])
#loc101 = loc(fused[#loc20, #loc21])
#loc102 = loc(fused[#loc26, #loc27])
#loc103 = loc(fused[#loc28, #loc29])
#loc104 = loc(fused[#loc30, #loc31])
#loc105 = loc(fused[#loc32, #loc33])
#loc106 = loc(fused[#loc35, #loc36])
#loc107 = loc(fused[#loc38, #loc39])
#loc108 = loc(fused[#loc40, #loc41])
#loc109 = loc(fused[#loc42, #loc43])
#loc110 = loc(fused[#loc45, #loc44])
#loc111 = loc(fused[#loc46, #loc47])
#loc112 = loc(fused[#loc50, #loc49])
#loc113 = loc(fused[#loc52, #loc53])
#loc114 = loc(fused[#loc55, #loc56])
#loc115 = loc(fused[#loc58, #loc61])
#loc116 = loc(fused[#loc62, #loc63, #loc64, #loc56])
#loc117 = loc(fused[#loc70, #loc71])
#loc118 = loc(fused[#loc72, #loc73])
#loc119 = loc(fused[#loc74, #loc75])
#loc120 = loc(fused[#loc77, #loc76])
#loc121 = loc(fused[#loc78, #loc79])
#loc122 = loc(fused[#loc82, #loc81])
#loc123 = loc(fused[#loc84, #loc85])
#loc124 = loc(fused[#loc87, #loc88])
