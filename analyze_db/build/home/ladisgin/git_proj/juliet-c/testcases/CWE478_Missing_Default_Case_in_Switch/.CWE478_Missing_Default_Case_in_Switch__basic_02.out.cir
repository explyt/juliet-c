!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":119:10)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":119:14)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":119:20)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":119:32)
#loc148 = loc(fused[#loc49, #loc50])
#loc149 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc1)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc4)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc133)
    cir.br ^bb1 loc(#loc134)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %3 ^bb2, ^bb12 loc(#loc135)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc136)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc1)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc1)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc20)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc137)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.br ^bb5 loc(#loc23)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %9 : !s32i, ^bb9 [
      0: ^bb7,
      1: ^bb8
    ] loc(#loc23)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc4)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc4)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
    cir.br ^bb9 loc(#loc28)
  ^bb8:  // pred: ^bb5
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    cir.br ^bb9 loc(#loc30)
  ^bb9:  // 3 preds: ^bb5, ^bb7, ^bb8
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // pred: ^bb9
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    cir.br ^bb11 loc(#loc18)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc14)
  ^bb12:  // 2 preds: ^bb1, ^bb11
    cir.br ^bb13 loc(#loc14)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc9)
  } loc(#loc131)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc142)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc145)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc149)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc56)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_02_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_02_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.return %17 : !s32i loc(#loc152)
  } loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc154)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc155)
    cir.br ^bb1 loc(#loc156)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc76)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc157)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb14 loc(#loc78)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc158)
  ^bb4:  // pred: ^bb3
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc71)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc84)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc159)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.br ^bb5 loc(#loc161)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // pred: ^bb5
    cir.switch.flat %11 : !s32i, ^bb10 [
      0: ^bb8,
      1: ^bb9
    ] loc(#loc87)
  ^bb7:  // no predecessors
    cir.br ^bb8 loc(#loc90)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc91)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc91)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    cir.br ^bb11 loc(#loc93)
  ^bb9:  // pred: ^bb6
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc94)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc94)
    cir.store %15, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    cir.br ^bb11 loc(#loc96)
  ^bb10:  // pred: ^bb6
    cir.return loc(#loc97)
  ^bb11:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb12 loc(#loc88)
  ^bb12:  // pred: ^bb11
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb13 loc(#loc82)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc75)
  ^bb14:  // 2 preds: ^bb2, ^bb13
    cir.br ^bb15 loc(#loc75)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc69)
  } loc(#loc153)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc166)
    cir.br ^bb1 loc(#loc167)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc108)
    cir.brcond %3 ^bb2, ^bb13 loc(#loc168)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc169)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc103)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc103)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc113)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc170)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    cir.br ^bb4 loc(#loc172)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    cir.br ^bb5 loc(#loc116)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %9 : !s32i, ^bb9 [
      0: ^bb7,
      1: ^bb8
    ] loc(#loc116)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc119)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc120)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc120)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
    cir.br ^bb10 loc(#loc122)
  ^bb8:  // pred: ^bb5
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc123)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc123)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc174)
    cir.br ^bb10 loc(#loc125)
  ^bb9:  // pred: ^bb5
    cir.return loc(#loc126)
  ^bb10:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb11 loc(#loc117)
  ^bb11:  // pred: ^bb10
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    cir.br ^bb12 loc(#loc111)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc107)
  ^bb13:  // 2 preds: ^bb1, ^bb12
    cir.br ^bb14 loc(#loc107)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc101)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_02.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":25:38)
#loc2 = loc("/usr/include/stdlib.h":573:1)
#loc3 = loc("/usr/include/stdlib.h":573:24)
#loc4 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":31:30)
#loc5 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":34:30)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":20:1)
#loc9 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":41:1)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":25:13)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":26:13)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":26:17)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":22:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":40:5)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":22:8)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":23:5)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":24:9)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":39:9)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":27:18)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":27:27)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":27:13)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":27:28)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":28:13)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":37:13)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":28:21)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":30:13)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":31:17)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":32:17)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":34:17)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":35:17)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":38:23)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":38:13)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":104:1)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":108:1)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":106:5)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":106:11)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":107:5)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":107:11)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":124:15)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":126:15)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":129:15)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":131:15)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":119:1)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":134:1)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":120:1)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":122:27)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":122:22)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":122:5)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":124:5)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":125:5)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":125:58)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":126:5)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":129:5)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":130:5)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":130:57)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":131:5)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":133:12)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":133:5)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":53:19)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":48:1)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":76:1)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":58:13)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":58:38)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":59:13)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":59:17)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":50:5)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":75:5)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":50:8)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":51:5)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":54:5)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":56:5)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":53:9)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":57:9)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":74:9)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":60:18)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":60:27)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":60:13)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":60:28)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":61:13)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":72:13)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":61:21)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":63:13)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":64:30)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":64:17)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":65:17)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":67:30)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":67:17)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":68:17)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":71:17)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":73:23)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":73:13)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":79:1)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":102:1)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":84:13)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":84:38)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":85:13)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":85:17)
#loc106 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":81:5)
#loc107 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":101:5)
#loc108 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":81:8)
#loc109 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":82:5)
#loc110 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":83:9)
#loc111 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":100:9)
#loc112 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":86:18)
#loc113 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":86:27)
#loc114 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":86:13)
#loc115 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":86:28)
#loc116 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":87:13)
#loc117 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":98:13)
#loc118 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":87:21)
#loc119 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":89:13)
#loc120 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":90:30)
#loc121 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":90:17)
#loc122 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":91:17)
#loc123 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":93:30)
#loc124 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":93:17)
#loc125 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":94:17)
#loc126 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":97:17)
#loc127 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":99:23)
#loc128 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":99:13)
#loc129 = loc(fused[#loc2, #loc3])
#loc130 = loc(fused[#loc6, #loc7])
#loc131 = loc(fused[#loc8, #loc9])
#loc132 = loc(fused[#loc10, #loc1])
#loc133 = loc(fused[#loc11, #loc12])
#loc134 = loc(fused[#loc13, #loc14])
#loc135 = loc(fused[#loc16, #loc14])
#loc136 = loc(fused[#loc17, #loc18])
#loc137 = loc(fused[#loc19, #loc20])
#loc138 = loc(fused[#loc21, #loc22])
#loc139 = loc(fused[#loc23, #loc24])
#loc140 = loc(fused[#loc27, #loc4])
#loc141 = loc(fused[#loc29, #loc5])
#loc142 = loc(fused[#loc33, #loc34])
#loc143 = loc(fused[#loc35, #loc36])
#loc144 = loc(fused[#loc37, #loc38])
#loc145 = loc(fused[#loc39, #loc40])
#loc146 = loc(fused[#loc41, #loc42])
#loc147 = loc(fused[#loc47, #loc48])
#loc150 = loc(fused[#loc58, #loc59])
#loc151 = loc(fused[#loc62, #loc63])
#loc152 = loc(fused[#loc66, #loc65])
#loc153 = loc(fused[#loc68, #loc69])
#loc154 = loc(fused[#loc70, #loc71])
#loc155 = loc(fused[#loc72, #loc73])
#loc156 = loc(fused[#loc74, #loc75])
#loc157 = loc(fused[#loc77, #loc78, #loc79, #loc75])
#loc158 = loc(fused[#loc81, #loc82])
#loc159 = loc(fused[#loc83, #loc84])
#loc160 = loc(fused[#loc85, #loc86])
#loc161 = loc(fused[#loc87, #loc88])
#loc162 = loc(fused[#loc92, #loc91])
#loc163 = loc(fused[#loc95, #loc94])
#loc164 = loc(fused[#loc100, #loc101])
#loc165 = loc(fused[#loc102, #loc103])
#loc166 = loc(fused[#loc104, #loc105])
#loc167 = loc(fused[#loc106, #loc107])
#loc168 = loc(fused[#loc109, #loc107])
#loc169 = loc(fused[#loc110, #loc111])
#loc170 = loc(fused[#loc112, #loc113])
#loc171 = loc(fused[#loc114, #loc115])
#loc172 = loc(fused[#loc116, #loc117])
#loc173 = loc(fused[#loc121, #loc120])
#loc174 = loc(fused[#loc124, #loc123])
