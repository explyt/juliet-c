!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":22:29)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":48:25)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":48:33)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":68:25)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":68:33)
#loc92 = loc(fused[#loc5, #loc6])
#loc104 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc62, #loc63])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc90)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc92)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc94)
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc12)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc11)
      %5 = cir.binop(add, %2, %4) nsw : !s64i loc(#loc12)
      cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc94)
      %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc13)
      cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc14)
    } loc(#loc93)
    cir.return loc(#loc4)
  } loc(#loc91)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_add_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc97)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s64i)>> loc(#loc20)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>> loc(#loc97)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc21)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc23)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc99)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, !cir.ptr<!cir.func<(!s64i)>> loc(#loc25)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!s64i)>>, !s64i) -> () loc(#loc25)
    cir.return loc(#loc16)
  } loc(#loc95)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_add_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc100)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc35, #loc36])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc104)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc37)
    cir.scope {
      %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc106)
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc42)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc41)
      %5 = cir.binop(add, %2, %4) nsw : !s64i loc(#loc42)
      cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc106)
      %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc43)
      cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc44)
    } loc(#loc105)
    cir.return loc(#loc34)
  } loc(#loc103)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc109)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s64i)>> loc(#loc50)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>> loc(#loc109)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc51)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc110)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc53)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, !cir.ptr<!cir.func<(!s64i)>> loc(#loc55)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc56)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s64i)>>, !s64i) -> () loc(#loc55)
    cir.return loc(#loc46)
  } loc(#loc107)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc59)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc62, #loc63])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc114)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc64)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc67)
      %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc68)
      %3 = cir.cmp(lt, %1, %2) : !s64i, !cir.bool loc(#loc116)
      cir.if %3 {
        %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc118)
        %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc74)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc73)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc73)
        %8 = cir.binop(add, %5, %7) nsw : !s64i loc(#loc74)
        cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc118)
        %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc75)
        cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc76)
      } else {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc59)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc59)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc77)
      } loc(#loc117)
    } loc(#loc115)
    cir.return loc(#loc61)
  } loc(#loc113)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!s64i)>> loc(#loc83)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>> loc(#loc121)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc84)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc86)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s64i)>>>, !cir.ptr<!cir.func<(!s64i)>> loc(#loc88)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc89)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!s64i)>>, !s64i) -> () loc(#loc88)
    cir.return loc(#loc79)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":29:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":26:9)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":26:33)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":26:26)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":27:27)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":27:9)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":31:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":41:1)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":33:13)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":35:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":35:33)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":36:12)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":36:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":38:12)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":40:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":40:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":92:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":96:1)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":94:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":94:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":95:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":95:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":48:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":55:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":49:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":50:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":54:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":52:9)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":52:33)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":52:26)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":53:27)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":53:9)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":57:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":65:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":59:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":59:13)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":60:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":60:33)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":61:12)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":61:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":63:12)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":64:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":64:13)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":78:19)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":68:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":80:1)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":69:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":71:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":79:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":71:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":71:16)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":72:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":75:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":77:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":73:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":73:33)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":73:26)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":74:27)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":74:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":78:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":82:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":90:1)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":84:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":84:13)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":85:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":85:33)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":86:12)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":86:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":88:12)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":88:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":89:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_add_44.c":89:13)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc8, #loc9])
#loc94 = loc(fused[#loc10, #loc11])
#loc95 = loc(fused[#loc15, #loc16])
#loc96 = loc(fused[#loc17, #loc18])
#loc97 = loc(fused[#loc19, #loc20])
#loc98 = loc(fused[#loc22, #loc21])
#loc99 = loc(fused[#loc24, #loc23])
#loc100 = loc(fused[#loc27, #loc28])
#loc101 = loc(fused[#loc29, #loc30])
#loc102 = loc(fused[#loc31, #loc32])
#loc103 = loc(fused[#loc33, #loc34])
#loc105 = loc(fused[#loc38, #loc39])
#loc106 = loc(fused[#loc40, #loc41])
#loc107 = loc(fused[#loc45, #loc46])
#loc108 = loc(fused[#loc47, #loc48])
#loc109 = loc(fused[#loc49, #loc50])
#loc110 = loc(fused[#loc52, #loc51])
#loc111 = loc(fused[#loc54, #loc53])
#loc112 = loc(fused[#loc57, #loc58])
#loc113 = loc(fused[#loc60, #loc61])
#loc115 = loc(fused[#loc65, #loc66])
#loc116 = loc(fused[#loc67, #loc68])
#loc117 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc118 = loc(fused[#loc72, #loc73])
#loc119 = loc(fused[#loc78, #loc79])
#loc120 = loc(fused[#loc80, #loc81])
#loc121 = loc(fused[#loc82, #loc83])
#loc122 = loc(fused[#loc85, #loc84])
#loc123 = loc(fused[#loc87, #loc86])
