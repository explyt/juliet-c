!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":22:21)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":22:25)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":72:25)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":72:29)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":49:25)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":49:29)
#true = #cir.bool<true> : !cir.bool
#loc118 = loc(fused[#loc8, #loc9])
#loc134 = loc(fused[#loc45, #loc46])
#loc151 = loc(fused[#loc85, #loc86])
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc115)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc8, #loc9])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc118)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc120)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
      %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc14)
      cir.store %3, %1 : !u64i, !cir.ptr<!u64i> loc(#loc120)
      cir.scope {
        %4 = cir.const #cir.int<0> : !s32i loc(#loc17)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc17)
        cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc122)
        cir.for : cond {
          %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc19)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc20)
          %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc123)
          cir.condition(%9) loc(#loc21)
        } body {
          cir.scope {
            %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
            cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc23)
          } loc(#loc124)
          cir.yield loc(#loc16)
        } step {
          %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc24)
          %7 = cir.unary(inc, %6) : !u64i, !u64i loc(#loc25)
          cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc125)
          cir.yield loc(#loc121)
        } loc(#loc121)
      } loc(#loc121)
    } loc(#loc119)
    cir.return loc(#loc7)
  } loc(#loc117)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc33)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc33)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc33)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc33)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc33)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc33)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc33)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc33)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc33)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc33)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc33)
      cir.yield %21 : !u32i loc(#loc33)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc33)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc33)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc33)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc33)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc33)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc33)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc33)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc33)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc33)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc33)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc33)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc33)
      cir.yield %25 : !u32i loc(#loc33)
    }) : (!cir.bool) -> !u32i loc(#loc33)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc33)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.call @badSink(%9) : (!s32i) -> () loc(#loc36)
    cir.return loc(#loc27)
  } loc(#loc126)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc131)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc132)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc130)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc45, #loc46])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc134)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc136)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc51)
      %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc51)
      cir.store %3, %1 : !u64i, !cir.ptr<!u64i> loc(#loc136)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc138)
        %7 = cir.ternary(%6, true {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
          %9 = cir.const #cir.int<20> : !s32i loc(#loc58)
          %10 = cir.cmp(le, %8, %9) : !s32i, !cir.bool loc(#loc139)
          %11 = cir.ternary(%10, true {
            %12 = cir.const #true loc(#loc56)
            cir.yield %12 : !cir.bool loc(#loc56)
          }, false {
            %12 = cir.const #false loc(#loc56)
            cir.yield %12 : !cir.bool loc(#loc56)
          }) : (!cir.bool) -> !cir.bool loc(#loc56)
          cir.yield %11 : !cir.bool loc(#loc56)
        }, false {
          %8 = cir.const #false loc(#loc56)
          cir.yield %8 : !cir.bool loc(#loc56)
        }) : (!cir.bool) -> !cir.bool loc(#loc56)
        cir.if %7 {
          cir.scope {
            %8 = cir.const #cir.int<0> : !s32i loc(#loc62)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc62)
            cir.store %9, %1 : !u64i, !cir.ptr<!u64i> loc(#loc142)
            cir.for : cond {
              %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc64)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc65)
              %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc143)
              cir.condition(%13) loc(#loc66)
            } body {
              cir.scope {
                %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc68)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc68)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc69)
              } loc(#loc144)
              cir.yield loc(#loc61)
            } step {
              %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc70)
              %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc71)
              cir.store %11, %1 : !u64i, !cir.ptr<!u64i> loc(#loc145)
              cir.yield loc(#loc141)
            } loc(#loc141)
          } loc(#loc141)
        } loc(#loc140)
      } loc(#loc137)
    } loc(#loc135)
    cir.return loc(#loc44)
  } loc(#loc133)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc77)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc79)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc79)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc79)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc79)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc79)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc79)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc79)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc79)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc79)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc79)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc79)
      cir.yield %21 : !u32i loc(#loc79)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc79)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc79)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc79)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc79)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc79)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc79)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc79)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc79)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc79)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc79)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc79)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc79)
      cir.yield %25 : !u32i loc(#loc79)
    }) : (!cir.bool) -> !u32i loc(#loc79)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc79)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    cir.call @goodB2GSink(%9) : (!s32i) -> () loc(#loc82)
    cir.return loc(#loc73)
  } loc(#loc146)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc85, #loc86])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc151)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc153)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc91)
      %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc91)
      cir.store %3, %1 : !u64i, !cir.ptr<!u64i> loc(#loc153)
      cir.scope {
        %4 = cir.const #cir.int<0> : !s32i loc(#loc94)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc94)
        cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc155)
        cir.for : cond {
          %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc96)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc97)
          %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc156)
          cir.condition(%9) loc(#loc98)
        } body {
          cir.scope {
            %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc100)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc100)
            cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc101)
          } loc(#loc157)
          cir.yield loc(#loc93)
        } step {
          %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc102)
          %7 = cir.unary(inc, %6) : !u64i, !u64i loc(#loc103)
          cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc158)
          cir.yield loc(#loc154)
        } loc(#loc154)
      } loc(#loc154)
    } loc(#loc152)
    cir.return loc(#loc84)
  } loc(#loc150)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc109)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc111)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc114)
    cir.return loc(#loc105)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":29:23)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":22:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":32:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":23:1)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":24:5)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":31:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":25:9)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":25:20)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":27:9)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":30:9)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":27:18)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":27:14)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":27:21)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":27:33)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":27:23)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":28:9)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":29:13)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":27:41)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":27:40)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":34:1)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":42:1)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":36:5)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":36:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":38:14)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":38:13)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":38:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":40:13)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":40:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":41:13)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":41:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":97:1)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":101:1)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":99:5)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":99:13)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":100:5)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":100:13)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":72:1)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":85:1)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":73:1)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":74:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":84:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":75:9)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":75:20)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":77:9)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":83:9)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":77:13)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":77:21)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":77:23)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":77:26)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":77:35)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":78:9)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":79:13)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":82:13)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":79:22)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":79:18)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":79:25)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":79:37)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":79:27)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":80:13)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":81:27)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":81:17)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":79:45)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":79:44)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":87:1)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":95:1)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":89:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":89:9)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":91:14)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":91:13)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":91:5)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":93:13)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":93:5)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":94:17)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":94:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":49:1)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":59:1)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":50:1)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":51:5)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":58:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":52:9)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":52:20)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":54:9)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":57:9)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":54:18)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":54:14)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":54:21)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":54:33)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":54:23)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":55:9)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":56:23)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":56:13)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":54:41)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":54:40)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":61:1)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":69:1)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":63:5)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":63:9)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":65:14)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":65:13)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":65:5)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":67:13)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":67:5)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":68:17)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_41.c":68:5)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc6, #loc7])
#loc119 = loc(fused[#loc11, #loc12])
#loc120 = loc(fused[#loc13, #loc14])
#loc121 = loc(fused[#loc15, #loc16])
#loc122 = loc(fused[#loc18, #loc17])
#loc123 = loc(fused[#loc19, #loc20])
#loc124 = loc(fused[#loc22, #loc16])
#loc125 = loc(fused[#loc25, #loc24])
#loc126 = loc(fused[#loc26, #loc27])
#loc127 = loc(fused[#loc28, #loc29])
#loc128 = loc(fused[#loc32, #loc30])
#loc129 = loc(fused[#loc34, #loc33])
#loc130 = loc(fused[#loc37, #loc38])
#loc131 = loc(fused[#loc39, #loc40])
#loc132 = loc(fused[#loc41, #loc42])
#loc133 = loc(fused[#loc43, #loc44])
#loc135 = loc(fused[#loc48, #loc49])
#loc136 = loc(fused[#loc50, #loc51])
#loc137 = loc(fused[#loc52, #loc53])
#loc138 = loc(fused[#loc54, #loc55])
#loc139 = loc(fused[#loc57, #loc58])
#loc140 = loc(fused[#loc59, #loc53])
#loc141 = loc(fused[#loc60, #loc61])
#loc142 = loc(fused[#loc63, #loc62])
#loc143 = loc(fused[#loc64, #loc65])
#loc144 = loc(fused[#loc67, #loc61])
#loc145 = loc(fused[#loc71, #loc70])
#loc146 = loc(fused[#loc72, #loc73])
#loc147 = loc(fused[#loc74, #loc75])
#loc148 = loc(fused[#loc78, #loc76])
#loc149 = loc(fused[#loc80, #loc79])
#loc150 = loc(fused[#loc83, #loc84])
#loc152 = loc(fused[#loc88, #loc89])
#loc153 = loc(fused[#loc90, #loc91])
#loc154 = loc(fused[#loc92, #loc93])
#loc155 = loc(fused[#loc95, #loc94])
#loc156 = loc(fused[#loc96, #loc97])
#loc157 = loc(fused[#loc99, #loc93])
#loc158 = loc(fused[#loc103, #loc102])
#loc159 = loc(fused[#loc104, #loc105])
#loc160 = loc(fused[#loc106, #loc107])
#loc161 = loc(fused[#loc110, #loc108])
#loc162 = loc(fused[#loc112, #loc111])
