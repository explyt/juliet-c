!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc72)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc11)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"CWE617_Reachable_Assertion__fscanf_15.c\00" : !cir.array<!s8i x 40>> : !cir.array<!s8i x 40> {alignment = 1 : i64} loc(#loc11)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void CWE617_Reachable_Assertion__fscanf_15_bad()\00" : !cir.array<!s8i x 49>> : !cir.array<!s8i x 49> {alignment = 1 : i64} loc(#loc11)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc77)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.br ^bb1 loc(#loc79)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc21)
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc19)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc23)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc73)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc23)
    cir.br ^bb6 loc(#loc25)
  ^bb5:  // pred: ^bb2
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc26)
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc11)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc11)
  ^bb9:  // pred: ^bb8
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %13 = cir.const #cir.int<5> : !s32i loc(#loc11)
    %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc11)
    cir.brcond %14 ^bb10, ^bb11 loc(#loc11)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc11)
  ^bb11:  // pred: ^bb9
    %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc11)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc11)
    %17 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc11)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc11)
    %19 = cir.const #cir.int<42> : !s32i loc(#loc11)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc11)
    %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 49>> loc(#loc11)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 49>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @__assert_fail(%16, %18, %20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc11)
    cir.br ^bb12 loc(#loc11)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc11)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc11)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc13)
  } loc(#loc76)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc81)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc82)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc40)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc44)
    cir.br ^bb2 loc(#loc42)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc42)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc45)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    cir.br ^bb6 loc(#loc48)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<5> : !s32i loc(#loc49)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc49)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.br ^bb6 loc(#loc52)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc43)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc34)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc34)
  ^bb9:  // pred: ^bb8
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc34)
    %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc34)
    cir.brcond %11 ^bb10, ^bb11 loc(#loc34)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc34)
  ^bb11:  // pred: ^bb9
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc34)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc34)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc34)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc34)
    %16 = cir.const #cir.int<67> : !s32i loc(#loc34)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc34)
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb12 loc(#loc34)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc34)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc34)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc36)
  } loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc59)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc63)
    cir.br ^bb2 loc(#loc61)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc61)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc64)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<5> : !s32i loc(#loc65)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc65)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb6 loc(#loc68)
  ^bb5:  // pred: ^bb2
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    cir.br ^bb6 loc(#loc71)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc62)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc53)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc53)
  ^bb9:  // pred: ^bb8
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc53)
    %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc53)
    cir.brcond %11 ^bb10, ^bb11 loc(#loc53)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc53)
  ^bb11:  // pred: ^bb9
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc53)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc53)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc53)
    %16 = cir.const #cir.int<88> : !s32i loc(#loc53)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc53)
    %18 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc53)
    cir.br ^bb12 loc(#loc53)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc53)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc53)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc55)
  } loc(#loc88)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE617_Reachable_Assertion__fscanf_15.c":34:23)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE617_Reachable_Assertion__fscanf_15.c":38:19)
#loc9 = loc("/usr/include/assert.h":69:1)
#loc10 = loc("/usr/include/assert.h":71:43)
#loc11 = loc("CWE617_Reachable_Assertion__fscanf_15.c":42:5)
#loc12 = loc("CWE617_Reachable_Assertion__fscanf_15.c":25:1)
#loc13 = loc("CWE617_Reachable_Assertion__fscanf_15.c":43:1)
#loc14 = loc("CWE617_Reachable_Assertion__fscanf_15.c":27:5)
#loc15 = loc("CWE617_Reachable_Assertion__fscanf_15.c":27:9)
#loc16 = loc("CWE617_Reachable_Assertion__fscanf_15.c":29:13)
#loc17 = loc("CWE617_Reachable_Assertion__fscanf_15.c":29:12)
#loc18 = loc("CWE617_Reachable_Assertion__fscanf_15.c":29:5)
#loc19 = loc("CWE617_Reachable_Assertion__fscanf_15.c":30:5)
#loc20 = loc("CWE617_Reachable_Assertion__fscanf_15.c":40:5)
#loc21 = loc("CWE617_Reachable_Assertion__fscanf_15.c":30:12)
#loc22 = loc("CWE617_Reachable_Assertion__fscanf_15.c":32:5)
#loc23 = loc("CWE617_Reachable_Assertion__fscanf_15.c":34:9)
#loc24 = loc("CWE617_Reachable_Assertion__fscanf_15.c":34:16)
#loc25 = loc("CWE617_Reachable_Assertion__fscanf_15.c":35:9)
#loc26 = loc("CWE617_Reachable_Assertion__fscanf_15.c":38:9)
#loc27 = loc("CWE617_Reachable_Assertion__fscanf_15.c":39:9)
#loc28 = loc("CWE617_Reachable_Assertion__fscanf_15.c":91:1)
#loc29 = loc("CWE617_Reachable_Assertion__fscanf_15.c":95:1)
#loc30 = loc("CWE617_Reachable_Assertion__fscanf_15.c":93:5)
#loc31 = loc("CWE617_Reachable_Assertion__fscanf_15.c":93:14)
#loc32 = loc("CWE617_Reachable_Assertion__fscanf_15.c":94:5)
#loc33 = loc("CWE617_Reachable_Assertion__fscanf_15.c":94:14)
#loc34 = loc("CWE617_Reachable_Assertion__fscanf_15.c":67:5)
#loc35 = loc("CWE617_Reachable_Assertion__fscanf_15.c":50:1)
#loc36 = loc("CWE617_Reachable_Assertion__fscanf_15.c":68:1)
#loc37 = loc("CWE617_Reachable_Assertion__fscanf_15.c":52:5)
#loc38 = loc("CWE617_Reachable_Assertion__fscanf_15.c":52:9)
#loc39 = loc("CWE617_Reachable_Assertion__fscanf_15.c":54:13)
#loc40 = loc("CWE617_Reachable_Assertion__fscanf_15.c":54:12)
#loc41 = loc("CWE617_Reachable_Assertion__fscanf_15.c":54:5)
#loc42 = loc("CWE617_Reachable_Assertion__fscanf_15.c":55:5)
#loc43 = loc("CWE617_Reachable_Assertion__fscanf_15.c":65:5)
#loc44 = loc("CWE617_Reachable_Assertion__fscanf_15.c":55:12)
#loc45 = loc("CWE617_Reachable_Assertion__fscanf_15.c":57:5)
#loc46 = loc("CWE617_Reachable_Assertion__fscanf_15.c":59:19)
#loc47 = loc("CWE617_Reachable_Assertion__fscanf_15.c":59:9)
#loc48 = loc("CWE617_Reachable_Assertion__fscanf_15.c":60:9)
#loc49 = loc("CWE617_Reachable_Assertion__fscanf_15.c":63:16)
#loc50 = loc("CWE617_Reachable_Assertion__fscanf_15.c":63:29)
#loc51 = loc("CWE617_Reachable_Assertion__fscanf_15.c":63:9)
#loc52 = loc("CWE617_Reachable_Assertion__fscanf_15.c":64:9)
#loc53 = loc("CWE617_Reachable_Assertion__fscanf_15.c":88:5)
#loc54 = loc("CWE617_Reachable_Assertion__fscanf_15.c":71:1)
#loc55 = loc("CWE617_Reachable_Assertion__fscanf_15.c":89:1)
#loc56 = loc("CWE617_Reachable_Assertion__fscanf_15.c":73:5)
#loc57 = loc("CWE617_Reachable_Assertion__fscanf_15.c":73:9)
#loc58 = loc("CWE617_Reachable_Assertion__fscanf_15.c":75:13)
#loc59 = loc("CWE617_Reachable_Assertion__fscanf_15.c":75:12)
#loc60 = loc("CWE617_Reachable_Assertion__fscanf_15.c":75:5)
#loc61 = loc("CWE617_Reachable_Assertion__fscanf_15.c":76:5)
#loc62 = loc("CWE617_Reachable_Assertion__fscanf_15.c":86:5)
#loc63 = loc("CWE617_Reachable_Assertion__fscanf_15.c":76:12)
#loc64 = loc("CWE617_Reachable_Assertion__fscanf_15.c":78:5)
#loc65 = loc("CWE617_Reachable_Assertion__fscanf_15.c":80:16)
#loc66 = loc("CWE617_Reachable_Assertion__fscanf_15.c":80:29)
#loc67 = loc("CWE617_Reachable_Assertion__fscanf_15.c":80:9)
#loc68 = loc("CWE617_Reachable_Assertion__fscanf_15.c":81:9)
#loc69 = loc("CWE617_Reachable_Assertion__fscanf_15.c":84:19)
#loc70 = loc("CWE617_Reachable_Assertion__fscanf_15.c":84:9)
#loc71 = loc("CWE617_Reachable_Assertion__fscanf_15.c":85:9)
#loc72 = loc(fused[#loc1, #loc2])
#loc73 = loc(fused[#loc3, #loc4])
#loc74 = loc(fused[#loc6, #loc7])
#loc75 = loc(fused[#loc9, #loc10])
#loc76 = loc(fused[#loc12, #loc13])
#loc77 = loc(fused[#loc14, #loc15])
#loc78 = loc(fused[#loc18, #loc16])
#loc79 = loc(fused[#loc19, #loc20])
#loc80 = loc(fused[#loc28, #loc29])
#loc81 = loc(fused[#loc30, #loc31])
#loc82 = loc(fused[#loc32, #loc33])
#loc83 = loc(fused[#loc35, #loc36])
#loc84 = loc(fused[#loc37, #loc38])
#loc85 = loc(fused[#loc41, #loc39])
#loc86 = loc(fused[#loc42, #loc43])
#loc87 = loc(fused[#loc51, #loc50])
#loc88 = loc(fused[#loc54, #loc55])
#loc89 = loc(fused[#loc56, #loc57])
#loc90 = loc(fused[#loc60, #loc58])
#loc91 = loc(fused[#loc61, #loc62])
#loc92 = loc(fused[#loc67, #loc66])
