!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc165)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%4) loc(#loc15)
      } do {
        %3 = cir.const #cir.int<5> : !s32i loc(#loc16)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc17)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
        cir.break loc(#loc19)
      } loc(#loc170)
    } loc(#loc170)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
        cir.condition(%4) loc(#loc22)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc174)
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc175)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc175)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc175)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc32)
            %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc177)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc33)
            cir.if %9 {
              %10 = cir.const #cir.int<1> : !s32i loc(#loc37)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
              %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc39)
              cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc179)
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc42)
                cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc181)
                cir.for : cond {
                  %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc44)
                  %16 = cir.const #cir.int<10> : !s32i loc(#loc45)
                  %17 = cir.cmp(lt, %15, %16) : !s32i, !s32i loc(#loc182)
                  %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc46)
                  cir.condition(%18) loc(#loc46)
                } body {
                  cir.scope {
                    %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
                    %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc49)
                    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc49)
                    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc49)
                    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc50)
                  } loc(#loc183)
                  cir.yield loc(#loc41)
                } step {
                  %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc51)
                  %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc52)
                  cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc184)
                  cir.yield loc(#loc180)
                } loc(#loc180)
              } loc(#loc180)
            } else {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc53)
            } loc(#loc178)
          } loc(#loc176)
        } loc(#loc173)
        cir.break loc(#loc54)
      } loc(#loc172)
    } loc(#loc172)
    cir.return loc(#loc7)
  } loc(#loc167)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc185)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc67)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc71)
        cir.condition(%4) loc(#loc71)
      } do {
        %3 = cir.const #cir.int<5> : !s32i loc(#loc72)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc73)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        cir.break loc(#loc75)
      } loc(#loc191)
    } loc(#loc191)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc78)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc78)
        cir.condition(%4) loc(#loc78)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc195)
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc196)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc196)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc196)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc88)
            %8 = cir.cmp(ge, %6, %7) : !s32i, !s32i loc(#loc198)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc89)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc92)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc199)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc94)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc90)
                cir.yield %16 : !cir.bool loc(#loc90)
              }, false {
                %16 = cir.const #false loc(#loc90)
                cir.yield %16 : !cir.bool loc(#loc90)
              }) : (!cir.bool) -> !cir.bool loc(#loc90)
              cir.yield %15 : !cir.bool loc(#loc90)
            }, false {
              %11 = cir.const #false loc(#loc90)
              cir.yield %11 : !cir.bool loc(#loc90)
            }) : (!cir.bool) -> !cir.bool loc(#loc90)
            cir.if %10 {
              %11 = cir.const #cir.int<1> : !s32i loc(#loc98)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %13 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc100)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc100)
              cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc201)
              cir.scope {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc103)
                cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc203)
                cir.for : cond {
                  %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %17 = cir.const #cir.int<10> : !s32i loc(#loc106)
                  %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc204)
                  %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc107)
                  cir.condition(%19) loc(#loc107)
                } body {
                  cir.scope {
                    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                    %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc110)
                    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc110)
                    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc111)
                  } loc(#loc205)
                  cir.yield loc(#loc102)
                } step {
                  %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                  %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc113)
                  cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc206)
                  cir.yield loc(#loc202)
                } loc(#loc202)
              } loc(#loc202)
            } else {
              %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc61)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc61)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc114)
            } loc(#loc200)
          } loc(#loc197)
        } loc(#loc194)
        cir.break loc(#loc115)
      } loc(#loc193)
    } loc(#loc193)
    cir.return loc(#loc63)
  } loc(#loc188)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc121)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc125)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc125)
        cir.condition(%4) loc(#loc125)
      } do {
        %3 = cir.const #cir.int<7> : !s32i loc(#loc126)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
        cir.break loc(#loc128)
      } loc(#loc210)
    } loc(#loc210)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc131)
        cir.condition(%4) loc(#loc131)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc214)
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc215)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc215)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc215)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc141)
            %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc217)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc142)
            cir.if %9 {
              %10 = cir.const #cir.int<1> : !s32i loc(#loc146)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc148)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc148)
              cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc219)
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc151)
                cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc221)
                cir.for : cond {
                  %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc153)
                  %16 = cir.const #cir.int<10> : !s32i loc(#loc154)
                  %17 = cir.cmp(lt, %15, %16) : !s32i, !s32i loc(#loc222)
                  %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc155)
                  cir.condition(%18) loc(#loc155)
                } body {
                  cir.scope {
                    %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc157)
                    %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc158)
                    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc158)
                    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc158)
                    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc159)
                  } loc(#loc223)
                  cir.yield loc(#loc150)
                } step {
                  %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                  %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc161)
                  cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc224)
                  cir.yield loc(#loc220)
                } loc(#loc220)
              } loc(#loc220)
            } else {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc162)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc162)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc163)
            } loc(#loc218)
          } loc(#loc216)
        } loc(#loc213)
        cir.break loc(#loc164)
      } loc(#loc212)
    } loc(#loc212)
    cir.return loc(#loc117)
  } loc(#loc207)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":51:27)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":56:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":24:5)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":24:9)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":26:13)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":26:12)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":26:5)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":27:5)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":32:5)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":27:11)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":30:17)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":30:16)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":30:9)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":31:9)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":33:5)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":55:5)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":33:11)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":35:9)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":53:9)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":36:13)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":36:17)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":37:13)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":37:34)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":40:13)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":52:13)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":40:17)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":40:24)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":40:22)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":41:13)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":48:13)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":50:13)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":42:32)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":42:24)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":42:17)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:17)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":47:17)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:25)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:21)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:28)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:32)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:30)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":45:17)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":46:41)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":46:34)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":46:21)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:37)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:36)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":51:17)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":54:9)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":136:1)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":140:1)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":138:5)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":138:13)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":139:5)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":139:13)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":91:27)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":63:1)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":96:1)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":65:5)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":65:9)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":67:13)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":67:12)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":67:5)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":68:5)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":73:5)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":68:11)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":71:17)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":71:16)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":71:9)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":72:9)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":74:5)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":95:5)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":74:11)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":76:9)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":93:9)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":77:13)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":77:17)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":78:13)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":78:34)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:13)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":92:13)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:17)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:25)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:22)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:27)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:30)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:38)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:40)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:35)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":81:13)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":88:13)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":90:13)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":82:32)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":82:24)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":82:17)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:17)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":87:17)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:25)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:21)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:28)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:32)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:30)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":85:17)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":86:41)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":86:34)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":86:21)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:37)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:36)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":91:17)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":94:9)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":99:1)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":134:1)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":101:5)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":101:9)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":103:13)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":103:12)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":103:5)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":104:5)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":110:5)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":104:11)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":108:16)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":108:9)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":109:9)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":111:5)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":133:5)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":111:11)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":113:9)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":131:9)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":114:13)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":114:17)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":115:13)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":115:34)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":118:13)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":130:13)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":118:17)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":118:24)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":118:22)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":119:13)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":126:13)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":128:13)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":120:32)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":120:24)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":120:17)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:17)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":125:17)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:25)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:21)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:28)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:32)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:30)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":123:17)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":124:41)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":124:34)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":124:21)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:37)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:36)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":129:27)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":129:17)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":132:9)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc6, #loc7])
#loc168 = loc(fused[#loc8, #loc9])
#loc169 = loc(fused[#loc12, #loc10])
#loc170 = loc(fused[#loc13, #loc14])
#loc171 = loc(fused[#loc18, #loc16])
#loc172 = loc(fused[#loc20, #loc21])
#loc173 = loc(fused[#loc23, #loc24])
#loc174 = loc(fused[#loc25, #loc26])
#loc175 = loc(fused[#loc27, #loc28])
#loc176 = loc(fused[#loc29, #loc30])
#loc177 = loc(fused[#loc31, #loc32])
#loc178 = loc(fused[#loc34, #loc35, #loc36, #loc30])
#loc179 = loc(fused[#loc39, #loc37])
#loc180 = loc(fused[#loc40, #loc41])
#loc181 = loc(fused[#loc43, #loc42])
#loc182 = loc(fused[#loc44, #loc45])
#loc183 = loc(fused[#loc47, #loc41])
#loc184 = loc(fused[#loc52, #loc51])
#loc185 = loc(fused[#loc55, #loc56])
#loc186 = loc(fused[#loc57, #loc58])
#loc187 = loc(fused[#loc59, #loc60])
#loc188 = loc(fused[#loc62, #loc63])
#loc189 = loc(fused[#loc64, #loc65])
#loc190 = loc(fused[#loc68, #loc66])
#loc191 = loc(fused[#loc69, #loc70])
#loc192 = loc(fused[#loc74, #loc72])
#loc193 = loc(fused[#loc76, #loc77])
#loc194 = loc(fused[#loc79, #loc80])
#loc195 = loc(fused[#loc81, #loc82])
#loc196 = loc(fused[#loc83, #loc84])
#loc197 = loc(fused[#loc85, #loc86])
#loc198 = loc(fused[#loc87, #loc88])
#loc199 = loc(fused[#loc91, #loc93])
#loc200 = loc(fused[#loc95, #loc96, #loc97, #loc86])
#loc201 = loc(fused[#loc100, #loc98])
#loc202 = loc(fused[#loc101, #loc102])
#loc203 = loc(fused[#loc104, #loc103])
#loc204 = loc(fused[#loc105, #loc106])
#loc205 = loc(fused[#loc108, #loc102])
#loc206 = loc(fused[#loc113, #loc112])
#loc207 = loc(fused[#loc116, #loc117])
#loc208 = loc(fused[#loc118, #loc119])
#loc209 = loc(fused[#loc122, #loc120])
#loc210 = loc(fused[#loc123, #loc124])
#loc211 = loc(fused[#loc127, #loc126])
#loc212 = loc(fused[#loc129, #loc130])
#loc213 = loc(fused[#loc132, #loc133])
#loc214 = loc(fused[#loc134, #loc135])
#loc215 = loc(fused[#loc136, #loc137])
#loc216 = loc(fused[#loc138, #loc139])
#loc217 = loc(fused[#loc140, #loc141])
#loc218 = loc(fused[#loc143, #loc144, #loc145, #loc139])
#loc219 = loc(fused[#loc148, #loc146])
#loc220 = loc(fused[#loc149, #loc150])
#loc221 = loc(fused[#loc152, #loc151])
#loc222 = loc(fused[#loc153, #loc154])
#loc223 = loc(fused[#loc156, #loc150])
#loc224 = loc(fused[#loc161, #loc160])
