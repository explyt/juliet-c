!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:10)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:14)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:20)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:32)
#loc266 = loc(fused[#loc66, #loc67])
#loc267 = loc(fused[#loc68, #loc69])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc4)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc247)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc248)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc250)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc251)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc17)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc253)
          cir.break loc(#loc20)
        } loc(#loc18)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc4)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc4)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc22)
          cir.break loc(#loc23)
        } loc(#loc21)
        cir.yield loc(#loc15)
      } loc(#loc15)
    } loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc26)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc256)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc257)
            %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc34)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
            %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc34)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc256)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc33)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc33)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc33)
            %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc33)
            %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc33)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc33)
            cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc257)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc37)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc37)
            %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc38)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc40)
          } loc(#loc255)
          cir.break loc(#loc41)
        } loc(#loc27)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc42)
        cir.yield loc(#loc24)
      } loc(#loc24)
    } loc(#loc254)
    cir.return loc(#loc10)
  } loc(#loc249)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc259)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc260)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc261)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc262)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc47)
  } loc(#loc258)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc263)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc63)
  cir.func @main(%arg0: !s32i loc(fused[#loc66, #loc67]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc68, #loc69])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc267)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc65)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc70)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc71)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc72)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc72)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc73)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc60)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc268)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good() : () -> () loc(#loc75)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc61)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc62)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc269)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad() : () -> () loc(#loc79)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc63)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc82)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc270)
    cir.return %17 : !s32i loc(#loc270)
  } loc(#loc265)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc271)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc272)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc274)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc275)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc96)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc98)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc98)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc98)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc277)
          cir.break loc(#loc100)
        } loc(#loc97)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc102)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc102)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          cir.break loc(#loc104)
        } loc(#loc101)
        cir.yield loc(#loc94)
      } loc(#loc94)
    } loc(#loc276)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc107)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc109)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc109)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          cir.break loc(#loc111)
        } loc(#loc108)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc280)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc281)
            %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc119)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc120)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
            %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc119)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc280)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc118)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc118)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc118)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc118)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc118)
            %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc118)
            %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc118)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc118)
            cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc281)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc121)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc121)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc122)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
            %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc123)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc124)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc124)
            cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc125)
          } loc(#loc279)
          cir.break loc(#loc126)
        } loc(#loc112)
        cir.yield loc(#loc105)
      } loc(#loc105)
    } loc(#loc278)
    cir.return loc(#loc89)
  } loc(#loc273)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc283)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc131)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc284)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc135)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc137)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc137)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc137)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc286)
          cir.break loc(#loc139)
        } loc(#loc136)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc141)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc141)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc142)
          cir.break loc(#loc143)
        } loc(#loc140)
        cir.yield loc(#loc133)
      } loc(#loc133)
    } loc(#loc285)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc146)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc289)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc290)
            %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc154)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc155)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc155)
            %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc154)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc289)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc153)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc153)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc153)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc153)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc153)
            %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc153)
            %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc153)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc153)
            cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc290)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc156)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc156)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc157)
            %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc158)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc159)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc159)
            cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc160)
          } loc(#loc288)
          cir.break loc(#loc161)
        } loc(#loc147)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc163)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc163)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc164)
          cir.break loc(#loc165)
        } loc(#loc162)
        cir.yield loc(#loc144)
      } loc(#loc144)
    } loc(#loc287)
    cir.return loc(#loc128)
  } loc(#loc282)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc166)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc291)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc293)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc173)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc294)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc177)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc179)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc179)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc180)
          cir.break loc(#loc181)
        } loc(#loc178)
        cir.case(default, []) {
          %3 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc166)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc166)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc166)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc296)
          cir.break loc(#loc184)
        } loc(#loc182)
        cir.yield loc(#loc175)
      } loc(#loc175)
    } loc(#loc295)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc187)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc299)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc300)
            %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc195)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc196)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc196)
            %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc195)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc299)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc194)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc194)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc194)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc194)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc194)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc194)
            %15 = cir.binop(mul, %12, %14) : !u64i loc(#loc194)
            %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc194)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc194)
            cir.store %17, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc300)
            %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc197)
            %19 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc198)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc198)
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc199)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc199)
            %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc197)
            %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc200)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc200)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc201)
          } loc(#loc298)
          cir.break loc(#loc202)
        } loc(#loc188)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc204)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc204)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc205)
          cir.break loc(#loc206)
        } loc(#loc203)
        cir.yield loc(#loc185)
      } loc(#loc185)
    } loc(#loc297)
    cir.return loc(#loc170)
  } loc(#loc292)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc302)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc211)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc303)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc215)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc217)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc217)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc217)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc305)
          cir.break loc(#loc219)
        } loc(#loc216)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc221)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc221)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc222)
          cir.break loc(#loc223)
        } loc(#loc220)
        cir.yield loc(#loc213)
      } loc(#loc213)
    } loc(#loc304)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc226)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc308)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc309)
            %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc234)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc235)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc235)
            %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc234)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc308)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc233)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc233)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc233)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc233)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc233)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc233)
            %15 = cir.binop(mul, %12, %14) : !u64i loc(#loc233)
            %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc233)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc233)
            cir.store %17, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc309)
            %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc236)
            %19 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc237)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc237)
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc238)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc238)
            %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc236)
            %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc239)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc239)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc240)
          } loc(#loc307)
          cir.break loc(#loc241)
        } loc(#loc227)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc243)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc243)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc244)
          cir.break loc(#loc245)
        } loc(#loc242)
        cir.yield loc(#loc224)
      } loc(#loc224)
    } loc(#loc306)
    cir.return loc(#loc208)
  } loc(#loc301)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":35:24)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":39:19)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":27:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":58:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":29:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":29:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":30:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":30:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":31:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":41:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":31:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":33:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":35:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":36:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":37:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":39:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":40:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":42:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":57:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":42:12)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":44:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":45:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":51:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:45)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":48:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":48:31)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:26)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:41)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:15)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":50:27)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":50:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":52:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":53:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":55:19)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":55:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":56:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":200:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":206:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":202:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":202:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":203:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":203:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":204:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":204:14)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":205:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":205:14)
#loc56 = loc("/usr/include/stdlib.h":575:1)
#loc57 = loc("/usr/include/stdlib.h":575:41)
#loc58 = loc("/usr/include/time.h":76:1)
#loc59 = loc("/usr/include/time.h":76:38)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":222:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":224:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":227:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":229:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":232:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":218:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":220:27)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":220:22)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":220:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":222:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":223:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":223:56)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":224:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":227:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":228:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":228:55)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":229:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":231:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":231:5)
#loc84 = loc("/usr/include/wchar.h":247:1)
#loc85 = loc("/usr/include/wchar.h":247:51)
#loc86 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc87 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":65:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":96:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":67:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":67:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":68:12)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":68:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":69:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":79:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":69:12)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":71:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":73:24)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":73:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":74:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":75:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":77:19)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":77:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":78:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":80:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":95:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":80:12)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":82:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":84:19)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":84:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":85:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":86:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":87:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":93:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:48)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":90:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":90:31)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:26)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:44)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:22)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:28)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:15)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":92:31)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":92:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":94:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":99:1)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":130:1)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":101:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":101:12)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":102:12)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":102:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":103:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":113:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":103:12)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":105:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":107:24)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":107:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":108:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":109:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":111:19)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":111:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":112:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":114:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":129:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":114:12)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":116:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":117:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":123:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:48)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":120:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":120:31)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:26)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:44)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:22)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:28)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:15)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":122:31)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":122:9)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":124:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":125:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":127:19)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":127:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":128:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":145:24)
#loc167 = loc("/usr/include/string.h":141:1)
#loc168 = loc("/usr/include/string.h":142:14)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":133:1)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":164:1)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":135:5)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":135:12)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":136:12)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":136:5)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":137:5)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":147:5)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":137:12)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":139:5)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":141:19)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":141:9)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":142:9)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":143:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":145:9)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":146:9)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":148:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":163:5)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":148:12)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":150:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":151:5)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":157:5)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:45)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":154:9)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":154:31)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:26)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:41)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:15)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:22)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:28)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":156:27)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":156:9)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":158:5)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":159:5)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":161:19)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":161:9)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":162:9)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":167:1)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":198:1)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":169:5)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":169:12)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":170:12)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":170:5)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":171:5)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":181:5)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":171:12)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":173:5)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":175:24)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":175:9)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":176:9)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":177:5)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":179:19)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":179:9)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":180:9)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":182:5)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":197:5)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":182:12)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":184:5)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":185:5)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":191:5)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:9)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:45)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":188:9)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":188:31)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:26)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:41)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:15)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:22)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:28)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":190:27)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":190:9)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":192:5)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":193:5)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":195:19)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":195:9)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":196:9)
#loc246 = loc(fused[#loc2, #loc3])
#loc247 = loc(fused[#loc5, #loc6])
#loc248 = loc(fused[#loc7, #loc8])
#loc249 = loc(fused[#loc9, #loc10])
#loc250 = loc(fused[#loc11, #loc12])
#loc251 = loc(fused[#loc14, #loc13])
#loc252 = loc(fused[#loc15, #loc16])
#loc253 = loc(fused[#loc19, #loc1])
#loc254 = loc(fused[#loc24, #loc25])
#loc255 = loc(fused[#loc28, #loc29])
#loc256 = loc(fused[#loc30, #loc31])
#loc257 = loc(fused[#loc32, #loc33])
#loc258 = loc(fused[#loc46, #loc47])
#loc259 = loc(fused[#loc48, #loc49])
#loc260 = loc(fused[#loc50, #loc51])
#loc261 = loc(fused[#loc52, #loc53])
#loc262 = loc(fused[#loc54, #loc55])
#loc263 = loc(fused[#loc56, #loc57])
#loc264 = loc(fused[#loc58, #loc59])
#loc265 = loc(fused[#loc64, #loc65])
#loc268 = loc(fused[#loc75, #loc76])
#loc269 = loc(fused[#loc79, #loc80])
#loc270 = loc(fused[#loc83, #loc82])
#loc271 = loc(fused[#loc84, #loc85])
#loc272 = loc(fused[#loc86, #loc87])
#loc273 = loc(fused[#loc88, #loc89])
#loc274 = loc(fused[#loc90, #loc91])
#loc275 = loc(fused[#loc93, #loc92])
#loc276 = loc(fused[#loc94, #loc95])
#loc277 = loc(fused[#loc99, #loc98])
#loc278 = loc(fused[#loc105, #loc106])
#loc279 = loc(fused[#loc113, #loc114])
#loc280 = loc(fused[#loc115, #loc116])
#loc281 = loc(fused[#loc117, #loc118])
#loc282 = loc(fused[#loc127, #loc128])
#loc283 = loc(fused[#loc129, #loc130])
#loc284 = loc(fused[#loc132, #loc131])
#loc285 = loc(fused[#loc133, #loc134])
#loc286 = loc(fused[#loc138, #loc137])
#loc287 = loc(fused[#loc144, #loc145])
#loc288 = loc(fused[#loc148, #loc149])
#loc289 = loc(fused[#loc150, #loc151])
#loc290 = loc(fused[#loc152, #loc153])
#loc291 = loc(fused[#loc167, #loc168])
#loc292 = loc(fused[#loc169, #loc170])
#loc293 = loc(fused[#loc171, #loc172])
#loc294 = loc(fused[#loc174, #loc173])
#loc295 = loc(fused[#loc175, #loc176])
#loc296 = loc(fused[#loc183, #loc166])
#loc297 = loc(fused[#loc185, #loc186])
#loc298 = loc(fused[#loc189, #loc190])
#loc299 = loc(fused[#loc191, #loc192])
#loc300 = loc(fused[#loc193, #loc194])
#loc301 = loc(fused[#loc207, #loc208])
#loc302 = loc(fused[#loc209, #loc210])
#loc303 = loc(fused[#loc212, #loc211])
#loc304 = loc(fused[#loc213, #loc214])
#loc305 = loc(fused[#loc218, #loc217])
#loc306 = loc(fused[#loc224, #loc225])
#loc307 = loc(fused[#loc228, #loc229])
#loc308 = loc(fused[#loc230, #loc231])
#loc309 = loc(fused[#loc232, #loc233])
