!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":27:61)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":27:68)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":43:65)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":43:72)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":55:65)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":55:72)
#loc71 = loc(fused[#loc9, #loc10])
#loc77 = loc(fused[#loc29, #loc30])
#loc84 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc67)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc68)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc69)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc72)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc73)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc71)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc15)
    cir.br ^bb1 loc(#loc74)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc18)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc19)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc19)
    %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc18)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc72)
    %7 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc14)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc14)
    %10 = cir.binop(add, %7, %9) : !u64i loc(#loc14)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc14)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc14)
    %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    cir.store %14, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc73)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc21)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc21)
    %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc22)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc23)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc23)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc24)
    cir.br ^bb2 loc(#loc17)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc8)
  } loc(#loc70)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc75)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc29, #loc30])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc78)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc79)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc77)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc35)
    cir.br ^bb1 loc(#loc80)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc38)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
    %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc38)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc78)
    %7 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc34)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc34)
    %10 = cir.binop(add, %7, %9) : !u64i loc(#loc34)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc34)
    %13 = cir.binop(mul, %10, %12) : !u64i loc(#loc34)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc34)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc34)
    cir.store %15, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc79)
    %16 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc40)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc41)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc42)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
    %21 = cir.call @strcpy(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc40)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    cir.br ^bb2 loc(#loc37)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc28)
  } loc(#loc76)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc81)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc82)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc51, #loc52])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc85)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc86)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc84)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc57)
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc60)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc61)
    %6 = cir.call @wcslen(%5) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc60)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc85)
    %7 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc56)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc56)
    %10 = cir.binop(add, %7, %9) : !u64i loc(#loc56)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc56)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc56)
    %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc56)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc56)
    cir.store %14, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc86)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc62)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc62)
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc63)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc63)
    %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc64)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc65)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc65)
    cir.call @printWLine(%21) : (!cir.ptr<!s32i>) -> () loc(#loc66)
    cir.br ^bb2 loc(#loc59)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc50)
  } loc(#loc83)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/wchar.h":98:1)
#loc4 = loc("/usr/include/wchar.h":100:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":27:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":36:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":31:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":31:45)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":32:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":32:31)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":28:1)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":29:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":35:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":31:26)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":31:41)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":33:22)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":33:28)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":33:15)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":34:27)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":34:9)
#loc25 = loc("/usr/include/string.h":141:1)
#loc26 = loc("/usr/include/string.h":142:14)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":43:1)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":52:1)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":47:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":47:45)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":48:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":48:31)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":44:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":45:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":51:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":47:26)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":47:41)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":49:15)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":49:22)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":49:28)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":50:27)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":50:9)
#loc45 = loc("/usr/include/wchar.h":247:1)
#loc46 = loc("/usr/include/wchar.h":247:51)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":55:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":64:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":59:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":59:48)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":60:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":60:31)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":56:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":57:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":63:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":59:26)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":59:44)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":61:22)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":61:28)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":61:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":62:31)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c":62:9)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc70 = loc(fused[#loc7, #loc8])
#loc72 = loc(fused[#loc11, #loc12])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc16, #loc17])
#loc75 = loc(fused[#loc25, #loc26])
#loc76 = loc(fused[#loc27, #loc28])
#loc78 = loc(fused[#loc31, #loc32])
#loc79 = loc(fused[#loc33, #loc34])
#loc80 = loc(fused[#loc36, #loc37])
#loc81 = loc(fused[#loc45, #loc46])
#loc82 = loc(fused[#loc47, #loc48])
#loc83 = loc(fused[#loc49, #loc50])
#loc85 = loc(fused[#loc53, #loc54])
#loc86 = loc(fused[#loc55, #loc56])
#loc87 = loc(fused[#loc58, #loc59])
