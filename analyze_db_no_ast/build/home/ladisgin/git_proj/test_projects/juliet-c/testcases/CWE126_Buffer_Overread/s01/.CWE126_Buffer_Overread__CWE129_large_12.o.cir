!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_large_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc205)
  cir.func private  @printIntLine(!s32i) loc(#loc206)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc207)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_large_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc212)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc212)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
      cir.if %6 {
        %7 = cir.const #cir.int<10> : !s32i loc(#loc23)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc25)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
      } loc(#loc213)
    } loc(#loc211)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc217)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc217)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc29)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc29)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc220)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc220)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc220)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc41)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc222)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc42)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc47)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc47)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc47)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc48)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc49)
            } loc(#loc223)
          } loc(#loc221)
        } loc(#loc219)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc225)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc225)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc225)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc57)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc227)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc58)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc61)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc228)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc63)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc59)
                cir.yield %19 : !cir.bool loc(#loc59)
              }, false {
                %19 = cir.const #false loc(#loc59)
                cir.yield %19 : !cir.bool loc(#loc59)
              }) : (!cir.bool) -> !cir.bool loc(#loc59)
              cir.yield %18 : !cir.bool loc(#loc59)
            }, false {
              %14 = cir.const #false loc(#loc59)
              cir.yield %14 : !cir.bool loc(#loc59)
            }) : (!cir.bool) -> !cir.bool loc(#loc59)
            cir.if %13 {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc68)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc68)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc68)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc69)
            } else {
              %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc8)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc8)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
            } loc(#loc229)
          } loc(#loc226)
        } loc(#loc224)
      } loc(#loc218)
    } loc(#loc216)
    cir.return loc(#loc10)
  } loc(#loc208)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_large_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc75)
    cir.return loc(#loc72)
  } loc(#loc230)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc82)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc237)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc237)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc86)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc86)
      cir.if %6 {
        %7 = cir.const #cir.int<10> : !s32i loc(#loc91)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
      } else {
        %7 = cir.const #cir.int<10> : !s32i loc(#loc93)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
      } loc(#loc238)
    } loc(#loc236)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc242)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc97)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc97)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc245)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc245)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc245)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc109)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc247)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc110)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc113)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc248)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc115)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc111)
                cir.yield %19 : !cir.bool loc(#loc111)
              }, false {
                %19 = cir.const #false loc(#loc111)
                cir.yield %19 : !cir.bool loc(#loc111)
              }) : (!cir.bool) -> !cir.bool loc(#loc111)
              cir.yield %18 : !cir.bool loc(#loc111)
            }, false {
              %14 = cir.const #false loc(#loc111)
              cir.yield %14 : !cir.bool loc(#loc111)
            }) : (!cir.bool) -> !cir.bool loc(#loc111)
            cir.if %13 {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc120)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc120)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc120)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc121)
            } else {
              %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc122)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc122)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc123)
            } loc(#loc249)
          } loc(#loc246)
        } loc(#loc244)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc251)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc251)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc251)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc131)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc253)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc132)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc135)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc254)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc137)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc133)
                cir.yield %19 : !cir.bool loc(#loc133)
              }, false {
                %19 = cir.const #false loc(#loc133)
                cir.yield %19 : !cir.bool loc(#loc133)
              }) : (!cir.bool) -> !cir.bool loc(#loc133)
              cir.yield %18 : !cir.bool loc(#loc133)
            }, false {
              %14 = cir.const #false loc(#loc133)
              cir.yield %14 : !cir.bool loc(#loc133)
            }) : (!cir.bool) -> !cir.bool loc(#loc133)
            cir.if %13 {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc142)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc142)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc142)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc143)
            } else {
              %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc144)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc144)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc145)
            } loc(#loc255)
          } loc(#loc252)
        } loc(#loc250)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc78)
  } loc(#loc233)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc151)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc155)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc155)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc160)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc262)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc162)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
      } loc(#loc261)
    } loc(#loc259)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc265)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc265)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc166)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc166)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc268)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc268)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc268)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc178)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc270)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc179)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc184)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc184)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc185)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc186)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc186)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc187)
            } loc(#loc271)
          } loc(#loc269)
        } loc(#loc267)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc273)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc273)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc273)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc195)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc275)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc196)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc201)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc201)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc201)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc202)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc203)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc203)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc204)
            } loc(#loc276)
          } loc(#loc274)
        } loc(#loc272)
      } loc(#loc266)
    } loc(#loc264)
    cir.return loc(#loc147)
  } loc(#loc256)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_large_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":50:27)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":65:27)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":22:1)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":69:1)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":24:5)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":24:9)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":26:13)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":26:12)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":26:5)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":27:5)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":37:5)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":27:8)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":27:33)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":28:5)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":31:5)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":33:5)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":30:16)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":30:9)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":36:16)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":36:9)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":38:5)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":68:5)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":38:8)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":38:33)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":39:5)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":53:5)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":55:5)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":40:9)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":52:9)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":41:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":41:34)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":44:13)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":51:13)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":44:17)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":44:25)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":44:22)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":45:13)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":47:13)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":49:13)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":46:37)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":46:30)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":46:17)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":50:17)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":56:9)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":67:9)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":57:13)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":57:34)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":59:13)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":66:13)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":59:17)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":59:25)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":59:22)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":59:27)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":59:30)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":59:38)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":59:40)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":59:35)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":60:13)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":62:13)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":64:13)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":61:37)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":61:30)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":61:17)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":65:17)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":179:1)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":183:1)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":181:5)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":181:13)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":182:5)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":182:13)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":78:1)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":123:1)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":80:5)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":80:9)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":82:13)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":82:12)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":82:5)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":83:5)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":92:5)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":83:8)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":83:33)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":84:5)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":87:5)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":89:5)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":86:16)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":86:9)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":91:16)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":91:9)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":93:5)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":122:5)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":93:8)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":93:33)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":94:5)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":107:5)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":109:5)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":95:9)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":106:9)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":96:13)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":96:34)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":98:13)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":105:13)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":98:17)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":98:25)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":98:22)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":98:27)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":98:30)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":98:38)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":98:40)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":98:35)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":99:13)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":101:13)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":103:13)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":100:37)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":100:30)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":100:17)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":104:27)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":104:17)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":110:9)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":121:9)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":111:13)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":111:34)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":113:13)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":120:13)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":113:17)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":113:25)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":113:22)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":113:27)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":113:30)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":113:38)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":113:40)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":113:35)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":114:13)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":116:13)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":118:13)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":115:37)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":115:30)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":115:17)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":119:27)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":119:17)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":128:1)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":177:1)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":130:5)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":130:9)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":132:13)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":132:12)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":132:5)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":133:5)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":144:5)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":133:8)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":133:33)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":134:5)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":138:5)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":140:5)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":137:16)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":137:9)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":143:16)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":143:9)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":145:5)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":176:5)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":145:8)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":145:33)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":146:5)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":160:5)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":162:5)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":147:9)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":159:9)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":148:13)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":148:34)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":151:13)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":158:13)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":151:17)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":151:25)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":151:22)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":152:13)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":154:13)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":156:13)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":153:37)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":153:30)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":153:17)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":157:27)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":157:17)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":163:9)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":175:9)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":164:13)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":164:34)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":167:13)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":174:13)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":167:17)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":167:25)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":167:22)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":168:13)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":170:13)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":172:13)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":169:37)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":169:30)
#loc202 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":169:17)
#loc203 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":173:27)
#loc204 = loc("CWE126_Buffer_Overread__CWE129_large_12.c":173:17)
#loc205 = loc(fused[#loc1, #loc2])
#loc206 = loc(fused[#loc3, #loc4])
#loc207 = loc(fused[#loc5, #loc6])
#loc208 = loc(fused[#loc9, #loc10])
#loc209 = loc(fused[#loc11, #loc12])
#loc210 = loc(fused[#loc15, #loc13])
#loc211 = loc(fused[#loc16, #loc17])
#loc212 = loc(fused[#loc18, #loc19])
#loc213 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc214 = loc(fused[#loc24, #loc23])
#loc215 = loc(fused[#loc26, #loc25])
#loc216 = loc(fused[#loc27, #loc28])
#loc217 = loc(fused[#loc29, #loc30])
#loc218 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc219 = loc(fused[#loc34, #loc35])
#loc220 = loc(fused[#loc36, #loc37])
#loc221 = loc(fused[#loc38, #loc39])
#loc222 = loc(fused[#loc40, #loc41])
#loc223 = loc(fused[#loc43, #loc44, #loc45, #loc39])
#loc224 = loc(fused[#loc50, #loc51])
#loc225 = loc(fused[#loc52, #loc53])
#loc226 = loc(fused[#loc54, #loc55])
#loc227 = loc(fused[#loc56, #loc57])
#loc228 = loc(fused[#loc60, #loc62])
#loc229 = loc(fused[#loc64, #loc65, #loc66, #loc55])
#loc230 = loc(fused[#loc71, #loc72])
#loc231 = loc(fused[#loc73, #loc74])
#loc232 = loc(fused[#loc75, #loc76])
#loc233 = loc(fused[#loc77, #loc78])
#loc234 = loc(fused[#loc79, #loc80])
#loc235 = loc(fused[#loc83, #loc81])
#loc236 = loc(fused[#loc84, #loc85])
#loc237 = loc(fused[#loc86, #loc87])
#loc238 = loc(fused[#loc88, #loc89, #loc90, #loc85])
#loc239 = loc(fused[#loc92, #loc91])
#loc240 = loc(fused[#loc94, #loc93])
#loc241 = loc(fused[#loc95, #loc96])
#loc242 = loc(fused[#loc97, #loc98])
#loc243 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc244 = loc(fused[#loc102, #loc103])
#loc245 = loc(fused[#loc104, #loc105])
#loc246 = loc(fused[#loc106, #loc107])
#loc247 = loc(fused[#loc108, #loc109])
#loc248 = loc(fused[#loc112, #loc114])
#loc249 = loc(fused[#loc116, #loc117, #loc118, #loc107])
#loc250 = loc(fused[#loc124, #loc125])
#loc251 = loc(fused[#loc126, #loc127])
#loc252 = loc(fused[#loc128, #loc129])
#loc253 = loc(fused[#loc130, #loc131])
#loc254 = loc(fused[#loc134, #loc136])
#loc255 = loc(fused[#loc138, #loc139, #loc140, #loc129])
#loc256 = loc(fused[#loc146, #loc147])
#loc257 = loc(fused[#loc148, #loc149])
#loc258 = loc(fused[#loc152, #loc150])
#loc259 = loc(fused[#loc153, #loc154])
#loc260 = loc(fused[#loc155, #loc156])
#loc261 = loc(fused[#loc157, #loc158, #loc159, #loc154])
#loc262 = loc(fused[#loc161, #loc160])
#loc263 = loc(fused[#loc163, #loc162])
#loc264 = loc(fused[#loc164, #loc165])
#loc265 = loc(fused[#loc166, #loc167])
#loc266 = loc(fused[#loc168, #loc169, #loc170, #loc165])
#loc267 = loc(fused[#loc171, #loc172])
#loc268 = loc(fused[#loc173, #loc174])
#loc269 = loc(fused[#loc175, #loc176])
#loc270 = loc(fused[#loc177, #loc178])
#loc271 = loc(fused[#loc180, #loc181, #loc182, #loc176])
#loc272 = loc(fused[#loc188, #loc189])
#loc273 = loc(fused[#loc190, #loc191])
#loc274 = loc(fused[#loc192, #loc193])
#loc275 = loc(fused[#loc194, #loc195])
#loc276 = loc(fused[#loc197, #loc198, #loc199, #loc193])
