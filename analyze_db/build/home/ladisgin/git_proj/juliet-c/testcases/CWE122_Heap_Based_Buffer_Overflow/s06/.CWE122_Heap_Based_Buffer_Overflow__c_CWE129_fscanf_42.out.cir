!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":22:22)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":22:26)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":166:10)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":166:14)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":166:20)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":166:32)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":111:26)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":111:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":68:26)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":68:30)
#true = #cir.bool<true> : !cir.bool
#loc301 = loc(fused[#loc8, #loc9])
#loc342 = loc(fused[#loc113, #loc114])
#loc343 = loc(fused[#loc115, #loc116])
#loc348 = loc(fused[#loc133, #loc134])
#loc380 = loc(fused[#loc219, #loc220])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc298)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc299)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc8, #loc9])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc7)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc11)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc299)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc12)
    %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc11)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc302)
    cir.return %9 : !s32i loc(#loc302)
  } loc(#loc300)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc303)
  cir.func private @exit(!s32i) extra(#fn_attr1) loc(#loc304)
  cir.func private @printIntLine(!s32i) loc(#loc305)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc306)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc23)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc307)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc309)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc34)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc313)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc314)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc43)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc44)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc44)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc315)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc316)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc43)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc317)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc314)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc50)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc50)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc319)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc52)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc53)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc54)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc52)
        } loc(#loc320)
      } loc(#loc318)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc57)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc322)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc60)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc323)
          cir.condition(%20) loc(#loc61)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc63)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc65)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc66)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc325)
          } loc(#loc324)
          cir.yield loc(#loc56)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc68)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc326)
          cir.yield loc(#loc321)
        } loc(#loc321)
      } loc(#loc321)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc72)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc328)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc79)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc330)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc82)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc332)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc84)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc85)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc333)
              cir.condition(%27) loc(#loc86)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc90)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc91)
              } loc(#loc334)
              cir.yield loc(#loc81)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc93)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc335)
              cir.yield loc(#loc331)
            } loc(#loc331)
          } loc(#loc331)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc23)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc23)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc94)
        } loc(#loc329)
      } loc(#loc327)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc95)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc95)
    } loc(#loc312)
    cir.return loc(#loc27)
  } loc(#loc308)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc337)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc99)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc338)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc101)
    cir.return loc(#loc98)
  } loc(#loc336)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc339)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc340)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc110)
  cir.func @main(%arg0: !s32i loc(fused[#loc113, #loc114]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc115, #loc116])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc342)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc343)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc112)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc117)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc118)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc119)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc119)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc120)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc107)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc344)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_good() : () -> () loc(#loc122)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc108)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc109)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc345)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_bad() : () -> () loc(#loc126)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc110)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc129)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc346)
    cir.return %17 : !s32i loc(#loc346)
  } loc(#loc341)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc133, #loc134])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc132)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc136)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc299)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc137)
    %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc138)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc138)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc136)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc349)
    cir.return %9 : !s32i loc(#loc349)
  } loc(#loc347)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc141)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc351)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc147)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc150)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc353)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc355)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc356)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc159)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc160)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc160)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc357)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc358)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc159)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc359)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc356)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc166)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc361)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc168)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc169)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc170)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc168)
        } loc(#loc362)
      } loc(#loc360)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc173)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc364)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc176)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc365)
          cir.condition(%20) loc(#loc177)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc179)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc181)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc182)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc367)
          } loc(#loc366)
          cir.yield loc(#loc172)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc184)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc368)
          cir.yield loc(#loc363)
        } loc(#loc363)
      } loc(#loc363)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc187)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc188)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc370)
        %20 = cir.ternary(%19, true {
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc190)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc191)
          %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc371)
          %24 = cir.ternary(%23, true {
            %25 = cir.const #true loc(#loc189)
            cir.yield %25 : !cir.bool loc(#loc189)
          }, false {
            %25 = cir.const #false loc(#loc189)
            cir.yield %25 : !cir.bool loc(#loc189)
          }) : (!cir.bool) -> !cir.bool loc(#loc189)
          cir.yield %24 : !cir.bool loc(#loc189)
        }, false {
          %21 = cir.const #false loc(#loc189)
          cir.yield %21 : !cir.bool loc(#loc189)
        }) : (!cir.bool) -> !cir.bool loc(#loc189)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc196)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc197)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc198)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc199)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc373)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc202)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc375)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc204)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc205)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc376)
              cir.condition(%28) loc(#loc206)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc208)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc209)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc210)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc208)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc211)
              } loc(#loc377)
              cir.yield loc(#loc201)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc212)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc213)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc378)
              cir.yield loc(#loc374)
            } loc(#loc374)
          } loc(#loc374)
        } else {
          %21 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc141)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc141)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc214)
        } loc(#loc372)
      } loc(#loc369)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc215)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc216)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc216)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc215)
    } loc(#loc354)
    cir.return loc(#loc143)
  } loc(#loc350)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc219, #loc220])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc380)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc218)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc222)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc381)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc382)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc382)
    cir.return %4 : !s32i loc(#loc382)
  } loc(#loc379)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc384)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc230)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc231)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc385)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc233)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc234)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc386)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc388)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc389)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc243)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc244)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc244)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc390)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc391)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc243)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc392)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc389)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc249)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc250)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc250)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc394)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc252)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc253)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc254)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc252)
        } loc(#loc395)
      } loc(#loc393)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc257)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc397)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc259)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc260)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc398)
          cir.condition(%20) loc(#loc261)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc263)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc264)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc265)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc266)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc400)
          } loc(#loc399)
          cir.yield loc(#loc256)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc267)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc268)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc401)
          cir.yield loc(#loc396)
        } loc(#loc396)
      } loc(#loc396)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc271)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc272)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc403)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc276)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc277)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc278)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc279)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc405)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc282)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc407)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc284)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc285)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc408)
              cir.condition(%27) loc(#loc286)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc288)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc289)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc290)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc288)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc291)
              } loc(#loc409)
              cir.yield loc(#loc281)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc292)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc293)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc410)
              cir.yield loc(#loc406)
            } loc(#loc406)
          } loc(#loc406)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc294)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc294)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc295)
        } loc(#loc404)
      } loc(#loc402)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc296)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc297)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc297)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc296)
    } loc(#loc387)
    cir.return loc(#loc227)
  } loc(#loc383)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":25:19)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":22:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":23:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":25:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":25:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":26:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":26:5)
#loc15 = loc("/usr/include/stdlib.h":672:1)
#loc16 = loc("/usr/include/stdlib.h":672:45)
#loc17 = loc("/usr/include/stdlib.h":756:1)
#loc18 = loc("/usr/include/stdlib.h":756:70)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":57:23)
#loc24 = loc("/usr/include/stdlib.h":687:1)
#loc25 = loc("/usr/include/stdlib.h":687:32)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":29:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":61:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":31:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":31:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":33:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":33:12)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":33:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":34:22)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":34:12)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":34:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":34:26)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":35:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":60:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":36:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":36:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:54)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:31)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:38)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:43)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:53)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:39)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:30)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:36)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:35)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":43:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":41:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":42:25)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":42:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":42:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":42:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:29)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":46:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":58:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":46:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":46:21)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":47:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":54:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":56:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":48:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":48:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":48:20)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":48:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":53:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:21)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:28)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:26)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":51:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":52:30)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":52:37)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":52:38)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":52:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:33)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:32)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":57:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":59:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":59:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":151:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":155:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":153:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":153:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":154:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":154:13)
#loc103 = loc("/usr/include/stdlib.h":575:1)
#loc104 = loc("/usr/include/stdlib.h":575:41)
#loc105 = loc("/usr/include/time.h":76:1)
#loc106 = loc("/usr/include/time.h":76:38)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":171:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":173:15)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":176:15)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":178:15)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":166:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":181:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":167:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":169:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":169:22)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":169:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":171:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":172:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":172:64)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":173:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":176:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":177:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":177:63)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":178:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":180:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":180:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":111:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":116:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":112:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":114:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":114:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":114:19)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":115:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":115:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":145:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":118:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":149:1)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":120:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":120:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":122:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":122:12)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":122:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":123:26)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":123:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":123:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":123:30)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":124:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":148:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":125:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":125:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:54)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:31)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:38)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:43)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:53)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:39)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:29)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:30)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:36)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:35)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":132:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:18)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:14)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:21)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:25)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:23)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":130:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":131:25)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":131:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":131:20)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":131:21)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:30)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:29)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":146:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:21)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:23)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:26)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:34)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:36)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":135:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":142:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":144:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":136:28)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":136:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":136:20)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":136:24)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":141:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:21)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:17)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:24)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:28)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:26)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":139:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":140:30)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":140:37)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":140:38)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":140:17)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:33)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:32)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":145:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":147:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":147:14)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":68:1)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":74:1)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":69:1)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":72:12)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":72:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":73:12)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":73:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":76:1)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":108:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":78:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":78:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":80:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":80:12)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":80:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":81:26)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":81:12)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":81:5)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":81:30)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":82:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":107:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":83:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":83:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:54)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:31)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:38)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:43)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:53)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:39)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:23)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:29)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:30)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:36)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:35)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":90:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:18)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:14)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:21)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:25)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:23)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":88:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":89:25)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":89:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":89:20)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":89:21)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:30)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:29)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":93:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":105:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":93:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":93:21)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":94:9)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":101:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":103:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":95:28)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":95:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":95:20)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":95:24)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":100:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:21)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:17)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:24)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:28)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:26)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":98:13)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":99:30)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":99:37)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":99:38)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":99:17)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:33)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:32)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":104:23)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":104:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":106:9)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":106:14)
#loc298 = loc(fused[#loc1, #loc2])
#loc299 = loc(fused[#loc3, #loc4])
#loc300 = loc(fused[#loc6, #loc7])
#loc302 = loc(fused[#loc14, #loc13])
#loc303 = loc(fused[#loc15, #loc16])
#loc304 = loc(fused[#loc17, #loc18])
#loc305 = loc(fused[#loc19, #loc20])
#loc306 = loc(fused[#loc21, #loc22])
#loc307 = loc(fused[#loc24, #loc25])
#loc308 = loc(fused[#loc26, #loc27])
#loc309 = loc(fused[#loc28, #loc29])
#loc310 = loc(fused[#loc32, #loc30])
#loc311 = loc(fused[#loc35, #loc36])
#loc312 = loc(fused[#loc37, #loc38])
#loc313 = loc(fused[#loc39, #loc40])
#loc314 = loc(fused[#loc41, #loc42])
#loc315 = loc(fused[#loc45, #loc46])
#loc316 = loc(fused[#loc44, #loc46])
#loc317 = loc(fused[#loc43, #loc42])
#loc318 = loc(fused[#loc47, #loc48])
#loc319 = loc(fused[#loc49, #loc50])
#loc320 = loc(fused[#loc51, #loc48])
#loc321 = loc(fused[#loc55, #loc56])
#loc322 = loc(fused[#loc58, #loc57])
#loc323 = loc(fused[#loc59, #loc60])
#loc324 = loc(fused[#loc62, #loc56])
#loc325 = loc(fused[#loc64, #loc63])
#loc326 = loc(fused[#loc68, #loc67])
#loc327 = loc(fused[#loc69, #loc70])
#loc328 = loc(fused[#loc71, #loc72])
#loc329 = loc(fused[#loc73, #loc74, #loc75, #loc70])
#loc330 = loc(fused[#loc77, #loc76])
#loc331 = loc(fused[#loc80, #loc81])
#loc332 = loc(fused[#loc83, #loc82])
#loc333 = loc(fused[#loc84, #loc85])
#loc334 = loc(fused[#loc87, #loc81])
#loc335 = loc(fused[#loc93, #loc92])
#loc336 = loc(fused[#loc97, #loc98])
#loc337 = loc(fused[#loc99, #loc100])
#loc338 = loc(fused[#loc101, #loc102])
#loc339 = loc(fused[#loc103, #loc104])
#loc340 = loc(fused[#loc105, #loc106])
#loc341 = loc(fused[#loc111, #loc112])
#loc344 = loc(fused[#loc122, #loc123])
#loc345 = loc(fused[#loc126, #loc127])
#loc346 = loc(fused[#loc130, #loc129])
#loc347 = loc(fused[#loc131, #loc132])
#loc349 = loc(fused[#loc140, #loc139])
#loc350 = loc(fused[#loc142, #loc143])
#loc351 = loc(fused[#loc144, #loc145])
#loc352 = loc(fused[#loc148, #loc146])
#loc353 = loc(fused[#loc151, #loc152])
#loc354 = loc(fused[#loc153, #loc154])
#loc355 = loc(fused[#loc155, #loc156])
#loc356 = loc(fused[#loc157, #loc158])
#loc357 = loc(fused[#loc161, #loc162])
#loc358 = loc(fused[#loc160, #loc162])
#loc359 = loc(fused[#loc159, #loc158])
#loc360 = loc(fused[#loc163, #loc164])
#loc361 = loc(fused[#loc165, #loc166])
#loc362 = loc(fused[#loc167, #loc164])
#loc363 = loc(fused[#loc171, #loc172])
#loc364 = loc(fused[#loc174, #loc173])
#loc365 = loc(fused[#loc175, #loc176])
#loc366 = loc(fused[#loc178, #loc172])
#loc367 = loc(fused[#loc180, #loc179])
#loc368 = loc(fused[#loc184, #loc183])
#loc369 = loc(fused[#loc185, #loc186])
#loc370 = loc(fused[#loc187, #loc188])
#loc371 = loc(fused[#loc190, #loc192])
#loc372 = loc(fused[#loc193, #loc194, #loc195, #loc186])
#loc373 = loc(fused[#loc197, #loc196])
#loc374 = loc(fused[#loc200, #loc201])
#loc375 = loc(fused[#loc203, #loc202])
#loc376 = loc(fused[#loc204, #loc205])
#loc377 = loc(fused[#loc207, #loc201])
#loc378 = loc(fused[#loc213, #loc212])
#loc379 = loc(fused[#loc217, #loc218])
#loc381 = loc(fused[#loc223, #loc222])
#loc382 = loc(fused[#loc225, #loc224])
#loc383 = loc(fused[#loc226, #loc227])
#loc384 = loc(fused[#loc228, #loc229])
#loc385 = loc(fused[#loc232, #loc230])
#loc386 = loc(fused[#loc235, #loc236])
#loc387 = loc(fused[#loc237, #loc238])
#loc388 = loc(fused[#loc239, #loc240])
#loc389 = loc(fused[#loc241, #loc242])
#loc390 = loc(fused[#loc245, #loc246])
#loc391 = loc(fused[#loc244, #loc246])
#loc392 = loc(fused[#loc243, #loc242])
#loc393 = loc(fused[#loc247, #loc248])
#loc394 = loc(fused[#loc249, #loc250])
#loc395 = loc(fused[#loc251, #loc248])
#loc396 = loc(fused[#loc255, #loc256])
#loc397 = loc(fused[#loc258, #loc257])
#loc398 = loc(fused[#loc259, #loc260])
#loc399 = loc(fused[#loc262, #loc256])
#loc400 = loc(fused[#loc264, #loc263])
#loc401 = loc(fused[#loc268, #loc267])
#loc402 = loc(fused[#loc269, #loc270])
#loc403 = loc(fused[#loc271, #loc272])
#loc404 = loc(fused[#loc273, #loc274, #loc275, #loc270])
#loc405 = loc(fused[#loc277, #loc276])
#loc406 = loc(fused[#loc280, #loc281])
#loc407 = loc(fused[#loc283, #loc282])
#loc408 = loc(fused[#loc284, #loc285])
#loc409 = loc(fused[#loc287, #loc281])
#loc410 = loc(fused[#loc293, #loc292])
