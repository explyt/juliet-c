!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":29:25)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":29:32)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":95:10)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":95:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":95:20)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":95:32)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":56:29)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":56:36)
#loc156 = loc(fused[#loc7, #loc8])
#loc181 = loc(fused[#loc81, #loc82])
#loc182 = loc(fused[#loc83, #loc84])
#loc187 = loc(fused[#loc101, #loc102])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc154)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc10)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc10)
    %4 = cir.const #cir.int<65> : !s32i loc(#loc11)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc12)
    cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc157)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc16)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc18)
    %15 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc20)
    cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc158)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
    cir.store %16, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc159)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
    cir.return %17 : !cir.ptr<!s8i> loc(#loc159)
  } loc(#loc155)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc160)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc27)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc163)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc36)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc37)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc37)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc166)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc167)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc36)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc45)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc171)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc47)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc49)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc47)
      } loc(#loc172)
    } loc(#loc170)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    %9 = cir.call @badSource(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc51)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc175)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc175)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc175)
      %12 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc58)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc59)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc60)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc60)
      %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc27)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc27)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
      %20 = cir.call @snprintf(%13, %16, %18, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc58)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc65)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
    } loc(#loc174)
    cir.return loc(#loc33)
  } loc(#loc164)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc68)
  } loc(#loc176)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc178)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc78)
  cir.func @main(%arg0: !s32i loc(fused[#loc81, #loc82]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc83, #loc84])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc182)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc85)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc86)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc87)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc87)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc88)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42_good() : () -> () loc(#loc90)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc76)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc77)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42_bad() : () -> () loc(#loc94)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc78)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    cir.return %17 : !s32i loc(#loc185)
  } loc(#loc180)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc101, #loc102])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc100)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc104)
    %4 = cir.const #cir.int<65> : !s32i loc(#loc105)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc106)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc106)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc106)
    cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc188)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc110)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc112)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc112)
    %15 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc114)
    cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc189)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    cir.store %16, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
    cir.return %17 : !cir.ptr<!s8i> loc(#loc190)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc121)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc122)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc122)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc193)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc194)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc195)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc196)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc130)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc130)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc198)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc132)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc133)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc134)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc132)
      } loc(#loc199)
    } loc(#loc197)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    %9 = cir.call @goodG2BSource(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc136)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc202)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc202)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc202)
      %12 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc143)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc144)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc145)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc145)
      %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc147)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc147)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
      %20 = cir.call @snprintf(%13, %16, %18, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc143)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc150)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc151)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
    } loc(#loc201)
    cir.return loc(#loc118)
  } loc(#loc191)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":29:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":35:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":30:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":32:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":32:18)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":32:23)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":32:27)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":32:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":32:28)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":33:19)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":33:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":33:10)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":33:14)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":33:15)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":34:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":34:5)
#loc23 = loc("/usr/include/stdio.h":385:1)
#loc24 = loc("/usr/include/stdio.h":387:62)
#loc25 = loc("/usr/include/string.h":407:1)
#loc26 = loc("/usr/include/string.h":408:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":46:38)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("/usr/include/stdlib.h":687:1)
#loc31 = loc("/usr/include/stdlib.h":687:32)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":37:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":50:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":39:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":39:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":40:20)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":40:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":40:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":40:42)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":40:43)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":40:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":41:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":41:33)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":41:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":41:17)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":41:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":41:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":41:30)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":41:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":42:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":42:12)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":42:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":42:26)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":43:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":49:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":44:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":44:25)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":46:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":46:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":46:24)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":46:31)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":46:44)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":47:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":47:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":48:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":48:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":80:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":83:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":82:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":82:13)
#loc71 = loc("/usr/include/stdlib.h":575:1)
#loc72 = loc("/usr/include/stdlib.h":575:41)
#loc73 = loc("/usr/include/time.h":76:1)
#loc74 = loc("/usr/include/time.h":76:38)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":100:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":102:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":105:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":107:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":95:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":110:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":96:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":98:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":98:22)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":98:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":100:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":101:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":101:71)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":102:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":105:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":106:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":106:70)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":107:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":109:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":109:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":56:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":62:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":57:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":59:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":59:18)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":59:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":59:26)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":59:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":59:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":60:18)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":60:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":60:10)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":60:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":60:14)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":61:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":61:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":65:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":78:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":67:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":67:12)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":68:20)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":68:27)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":68:31)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":68:42)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":68:43)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":68:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":69:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":69:33)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":69:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":69:17)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":69:23)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":69:24)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":69:30)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":69:29)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":70:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":70:12)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":70:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":70:30)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":71:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":77:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":72:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":72:25)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":74:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":74:18)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":74:24)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":74:31)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":74:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":74:44)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":75:19)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":75:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":76:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c":76:14)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc17, #loc16])
#loc159 = loc(fused[#loc22, #loc21])
#loc160 = loc(fused[#loc23, #loc24])
#loc161 = loc(fused[#loc25, #loc26])
#loc162 = loc(fused[#loc28, #loc29])
#loc163 = loc(fused[#loc30, #loc31])
#loc164 = loc(fused[#loc32, #loc33])
#loc165 = loc(fused[#loc34, #loc35])
#loc166 = loc(fused[#loc38, #loc39])
#loc167 = loc(fused[#loc37, #loc39])
#loc168 = loc(fused[#loc36, #loc40])
#loc169 = loc(fused[#loc41, #loc40])
#loc170 = loc(fused[#loc42, #loc43])
#loc171 = loc(fused[#loc44, #loc45])
#loc172 = loc(fused[#loc46, #loc43])
#loc173 = loc(fused[#loc52, #loc53])
#loc174 = loc(fused[#loc54, #loc55])
#loc175 = loc(fused[#loc56, #loc57])
#loc176 = loc(fused[#loc67, #loc68])
#loc177 = loc(fused[#loc69, #loc70])
#loc178 = loc(fused[#loc71, #loc72])
#loc179 = loc(fused[#loc73, #loc74])
#loc180 = loc(fused[#loc79, #loc80])
#loc183 = loc(fused[#loc90, #loc91])
#loc184 = loc(fused[#loc94, #loc95])
#loc185 = loc(fused[#loc98, #loc97])
#loc186 = loc(fused[#loc99, #loc100])
#loc188 = loc(fused[#loc108, #loc109])
#loc189 = loc(fused[#loc111, #loc110])
#loc190 = loc(fused[#loc116, #loc115])
#loc191 = loc(fused[#loc117, #loc118])
#loc192 = loc(fused[#loc119, #loc120])
#loc193 = loc(fused[#loc123, #loc124])
#loc194 = loc(fused[#loc122, #loc124])
#loc195 = loc(fused[#loc121, #loc125])
#loc196 = loc(fused[#loc126, #loc125])
#loc197 = loc(fused[#loc127, #loc128])
#loc198 = loc(fused[#loc129, #loc130])
#loc199 = loc(fused[#loc131, #loc128])
#loc200 = loc(fused[#loc137, #loc138])
#loc201 = loc(fused[#loc139, #loc140])
#loc202 = loc(fused[#loc141, #loc142])
