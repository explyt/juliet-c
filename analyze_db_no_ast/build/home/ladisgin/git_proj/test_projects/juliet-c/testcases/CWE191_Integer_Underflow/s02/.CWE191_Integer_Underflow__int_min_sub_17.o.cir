!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc134)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_sub_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc137)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc138)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc142)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc18)
        cir.condition(%8) loc(#loc18)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc20)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc20)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc20)
          cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc144)
        } loc(#loc143)
        cir.yield loc(#loc13)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc23)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
        cir.yield loc(#loc140)
      } loc(#loc140)
    } loc(#loc140)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc26)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc147)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc148)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc30)
        cir.condition(%8) loc(#loc30)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc151)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc36)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc151)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc37)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc38)
          } loc(#loc150)
        } loc(#loc149)
        cir.yield loc(#loc25)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc40)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
        cir.yield loc(#loc146)
      } loc(#loc146)
    } loc(#loc146)
    cir.return loc(#loc4)
  } loc(#loc135)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_sub_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc153)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc159)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc160)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc61)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc164)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc65)
        cir.condition(%8) loc(#loc65)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc67)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc67)
          cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
        } loc(#loc165)
        cir.yield loc(#loc60)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc70)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc162)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc73)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc169)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc170)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc77)
        cir.condition(%8) loc(#loc77)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc82)
            %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc82)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc82)
            %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc82)
            %10 = cir.cmp(gt, %5, %9) : !s32i, !s32i loc(#loc173)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc83)
            cir.if %11 {
              %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc175)
              %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc88)
              %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc89)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc175)
              %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc91)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc49)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc49)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc92)
            } loc(#loc174)
          } loc(#loc172)
        } loc(#loc171)
        cir.yield loc(#loc72)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc94)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc176)
        cir.yield loc(#loc168)
      } loc(#loc168)
    } loc(#loc168)
    cir.return loc(#loc51)
  } loc(#loc157)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc179)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc102)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc106)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc184)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc110)
        cir.condition(%8) loc(#loc110)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc112)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc113)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc186)
        } loc(#loc185)
        cir.yield loc(#loc105)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc116)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
        cir.yield loc(#loc182)
      } loc(#loc182)
    } loc(#loc182)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc119)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc121)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc122)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc190)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc123)
        cir.condition(%8) loc(#loc123)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc193)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc128)
            %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc129)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc193)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc130)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc131)
          } loc(#loc192)
        } loc(#loc191)
        cir.yield loc(#loc118)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc133)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc194)
        cir.yield loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.return loc(#loc96)
  } loc(#loc177)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":41:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":24:5)
#loc6 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":24:9)
#loc7 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":24:11)
#loc8 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":25:5)
#loc9 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":25:9)
#loc10 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":27:12)
#loc11 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":27:5)
#loc12 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":28:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":32:5)
#loc14 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":28:13)
#loc15 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":28:9)
#loc16 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":28:16)
#loc17 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":28:20)
#loc18 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":28:18)
#loc19 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":29:5)
#loc20 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":31:16)
#loc21 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":31:9)
#loc22 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":28:24)
#loc23 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":28:23)
#loc24 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":33:5)
#loc25 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":40:5)
#loc26 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":33:13)
#loc27 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":33:9)
#loc28 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":33:16)
#loc29 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":33:20)
#loc30 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":33:18)
#loc31 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":34:5)
#loc32 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":35:9)
#loc33 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":39:9)
#loc34 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":37:13)
#loc35 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":37:33)
#loc36 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":37:26)
#loc37 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":38:26)
#loc38 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":38:13)
#loc39 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":33:24)
#loc40 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":33:23)
#loc41 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":96:1)
#loc42 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":100:1)
#loc43 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":98:5)
#loc44 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":98:13)
#loc45 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":99:5)
#loc46 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":99:13)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":69:23)
#loc50 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":48:1)
#loc51 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":72:1)
#loc52 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":50:5)
#loc53 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":50:9)
#loc54 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":50:11)
#loc55 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":51:5)
#loc56 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":51:9)
#loc57 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":53:12)
#loc58 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":53:5)
#loc59 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":54:5)
#loc60 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":58:5)
#loc61 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":54:13)
#loc62 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":54:9)
#loc63 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":54:16)
#loc64 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":54:20)
#loc65 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":54:18)
#loc66 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":55:5)
#loc67 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":57:16)
#loc68 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":57:9)
#loc69 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":54:24)
#loc70 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":54:23)
#loc71 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":59:5)
#loc72 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":71:5)
#loc73 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":59:13)
#loc74 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":59:9)
#loc75 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":59:16)
#loc76 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":59:20)
#loc77 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":59:18)
#loc78 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":60:5)
#loc79 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":62:9)
#loc80 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":70:9)
#loc81 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":62:13)
#loc82 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":62:20)
#loc83 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":62:18)
#loc84 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":63:9)
#loc85 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":66:9)
#loc86 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":68:9)
#loc87 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":64:13)
#loc88 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":64:33)
#loc89 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":64:26)
#loc90 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":65:26)
#loc91 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":65:13)
#loc92 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":69:13)
#loc93 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":59:24)
#loc94 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":59:23)
#loc95 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":75:1)
#loc96 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":94:1)
#loc97 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":77:5)
#loc98 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":77:9)
#loc99 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":77:11)
#loc100 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":78:5)
#loc101 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":78:9)
#loc102 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":80:12)
#loc103 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":80:5)
#loc104 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":81:5)
#loc105 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":85:5)
#loc106 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":81:13)
#loc107 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":81:9)
#loc108 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":81:16)
#loc109 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":81:20)
#loc110 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":81:18)
#loc111 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":82:5)
#loc112 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":84:17)
#loc113 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":84:16)
#loc114 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":84:9)
#loc115 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":81:24)
#loc116 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":81:23)
#loc117 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":86:5)
#loc118 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":93:5)
#loc119 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":86:13)
#loc120 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":86:9)
#loc121 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":86:16)
#loc122 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":86:20)
#loc123 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":86:18)
#loc124 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":87:5)
#loc125 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":88:9)
#loc126 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":92:9)
#loc127 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":90:13)
#loc128 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":90:33)
#loc129 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":90:26)
#loc130 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":91:26)
#loc131 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":91:13)
#loc132 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":86:24)
#loc133 = loc("CWE191_Integer_Underflow__int_min_sub_17.c":86:23)
#loc134 = loc(fused[#loc1, #loc2])
#loc135 = loc(fused[#loc3, #loc4])
#loc136 = loc(fused[#loc5, #loc6])
#loc137 = loc(fused[#loc5, #loc7])
#loc138 = loc(fused[#loc8, #loc9])
#loc139 = loc(fused[#loc11, #loc10])
#loc140 = loc(fused[#loc12, #loc13])
#loc141 = loc(fused[#loc15, #loc14])
#loc142 = loc(fused[#loc16, #loc17])
#loc143 = loc(fused[#loc19, #loc13])
#loc144 = loc(fused[#loc21, #loc20])
#loc145 = loc(fused[#loc23, #loc22])
#loc146 = loc(fused[#loc24, #loc25])
#loc147 = loc(fused[#loc27, #loc26])
#loc148 = loc(fused[#loc28, #loc29])
#loc149 = loc(fused[#loc31, #loc25])
#loc150 = loc(fused[#loc32, #loc33])
#loc151 = loc(fused[#loc34, #loc35])
#loc152 = loc(fused[#loc40, #loc39])
#loc153 = loc(fused[#loc41, #loc42])
#loc154 = loc(fused[#loc43, #loc44])
#loc155 = loc(fused[#loc45, #loc46])
#loc156 = loc(fused[#loc47, #loc48])
#loc157 = loc(fused[#loc50, #loc51])
#loc158 = loc(fused[#loc52, #loc53])
#loc159 = loc(fused[#loc52, #loc54])
#loc160 = loc(fused[#loc55, #loc56])
#loc161 = loc(fused[#loc58, #loc57])
#loc162 = loc(fused[#loc59, #loc60])
#loc163 = loc(fused[#loc62, #loc61])
#loc164 = loc(fused[#loc63, #loc64])
#loc165 = loc(fused[#loc66, #loc60])
#loc166 = loc(fused[#loc68, #loc67])
#loc167 = loc(fused[#loc70, #loc69])
#loc168 = loc(fused[#loc71, #loc72])
#loc169 = loc(fused[#loc74, #loc73])
#loc170 = loc(fused[#loc75, #loc76])
#loc171 = loc(fused[#loc78, #loc72])
#loc172 = loc(fused[#loc79, #loc80])
#loc173 = loc(fused[#loc81, #loc82])
#loc174 = loc(fused[#loc84, #loc85, #loc86, #loc80])
#loc175 = loc(fused[#loc87, #loc88])
#loc176 = loc(fused[#loc94, #loc93])
#loc177 = loc(fused[#loc95, #loc96])
#loc178 = loc(fused[#loc97, #loc98])
#loc179 = loc(fused[#loc97, #loc99])
#loc180 = loc(fused[#loc100, #loc101])
#loc181 = loc(fused[#loc103, #loc102])
#loc182 = loc(fused[#loc104, #loc105])
#loc183 = loc(fused[#loc107, #loc106])
#loc184 = loc(fused[#loc108, #loc109])
#loc185 = loc(fused[#loc111, #loc105])
#loc186 = loc(fused[#loc114, #loc112])
#loc187 = loc(fused[#loc116, #loc115])
#loc188 = loc(fused[#loc117, #loc118])
#loc189 = loc(fused[#loc120, #loc119])
#loc190 = loc(fused[#loc121, #loc122])
#loc191 = loc(fused[#loc124, #loc118])
#loc192 = loc(fused[#loc125, #loc126])
#loc193 = loc(fused[#loc127, #loc128])
#loc194 = loc(fused[#loc133, #loc132])
