!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc67)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc69)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc7)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc70)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc9)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc9)
    %5 = cir.const #cir.int<2> : !u32i loc(#loc9)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc9)
    %7 = cir.const #cir.int<1> : !u32i loc(#loc9)
    %8 = cir.binop(add, %6, %7) : !u32i loc(#loc9)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc71)
    cir.scope {
      %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc73)
      %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc15)
      %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc14)
      %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc74)
      cir.store %12, %9 : !u32i, !cir.ptr<!u32i> loc(#loc73)
      %13 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc16)
      cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc17)
    } loc(#loc72)
    cir.return loc(#loc4)
  } loc(#loc68)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc20)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc75)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc28)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc80)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc30)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc30)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc81)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc83)
      %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc36)
      %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc35)
      %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc84)
      cir.store %8, %5 : !u32i, !cir.ptr<!u32i> loc(#loc83)
      %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc37)
      cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc38)
    } loc(#loc82)
    cir.return loc(#loc25)
  } loc(#loc78)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc39)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc47)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc88)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc49)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc49)
    %5 = cir.const #cir.int<2> : !u32i loc(#loc49)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc49)
    %7 = cir.const #cir.int<1> : !u32i loc(#loc49)
    %8 = cir.binop(add, %6, %7) : !u32i loc(#loc49)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc89)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc53)
      %10 = cir.cast(integral, %9 : !u32i), !s64i loc(#loc53)
      %11 = cir.cast(integral, %10 : !s64i), !s32i loc(#loc53)
      %12 = cir.abs %11 poison : !s32i loc(#loc54)
      %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc54)
      %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc55)
      %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc56)
      %17 = cir.const #cir.int<2> : !u32i loc(#loc56)
      %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc56)
      %19 = cir.const #cir.int<1> : !u32i loc(#loc56)
      %20 = cir.binop(add, %18, %19) : !u32i loc(#loc56)
      %21 = cir.cast(int_to_float, %20 : !u32i), !cir.double loc(#loc56)
      %22 = cir.call @sqrt(%21) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc55)
      %23 = cir.cast(float_to_int, %22 : !cir.double), !s64i loc(#loc55)
      %24 = cir.cmp(lt, %13, %23) : !s64i, !cir.bool loc(#loc91)
      cir.if %24 {
        %25 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc93)
        %26 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc63)
        %27 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc62)
        %28 = cir.binop(mul, %26, %27) : !u32i loc(#loc94)
        cir.store %28, %25 : !u32i, !cir.ptr<!u32i> loc(#loc93)
        %29 = cir.load %25 : !cir.ptr<!u32i>, !u32i loc(#loc64)
        cir.call @printUnsignedLine(%29) : (!u32i) -> () loc(#loc65)
      } else {
        %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
        %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } loc(#loc92)
    } loc(#loc90)
    cir.return loc(#loc44)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":35:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":26:18)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":27:12)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":27:5)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":29:12)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":29:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":34:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":32:9)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":32:38)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":32:31)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":33:27)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":74:1)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":78:1)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":76:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":76:13)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":77:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":77:13)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":42:1)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":53:1)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":44:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":44:18)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":45:12)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":45:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":47:12)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":47:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":48:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":52:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":50:9)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":50:38)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":50:31)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":51:27)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":51:9)
#loc39 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":70:19)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":56:1)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":72:1)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":58:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":58:18)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":59:12)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":59:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":61:12)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":61:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":63:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":71:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":63:19)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":63:9)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":63:33)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":63:46)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":63:54)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":64:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":67:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":69:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":65:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":65:38)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":65:31)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":66:27)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":66:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_01.c":70:9)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc70 = loc(fused[#loc8, #loc7])
#loc71 = loc(fused[#loc10, #loc9])
#loc72 = loc(fused[#loc11, #loc12])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc15, #loc14])
#loc75 = loc(fused[#loc18, #loc19])
#loc76 = loc(fused[#loc20, #loc21])
#loc77 = loc(fused[#loc22, #loc23])
#loc78 = loc(fused[#loc24, #loc25])
#loc79 = loc(fused[#loc26, #loc27])
#loc80 = loc(fused[#loc29, #loc28])
#loc81 = loc(fused[#loc31, #loc30])
#loc82 = loc(fused[#loc32, #loc33])
#loc83 = loc(fused[#loc34, #loc35])
#loc84 = loc(fused[#loc36, #loc35])
#loc85 = loc(fused[#loc40, #loc41])
#loc86 = loc(fused[#loc43, #loc44])
#loc87 = loc(fused[#loc45, #loc46])
#loc88 = loc(fused[#loc48, #loc47])
#loc89 = loc(fused[#loc50, #loc49])
#loc90 = loc(fused[#loc51, #loc52])
#loc91 = loc(fused[#loc54, #loc57])
#loc92 = loc(fused[#loc58, #loc59, #loc60, #loc52])
#loc93 = loc(fused[#loc61, #loc62])
#loc94 = loc(fused[#loc63, #loc62])
