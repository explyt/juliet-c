!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc33 = loc("CWE190_Integer_Overflow__char_max_square_45.c":113:10)
#loc34 = loc("CWE190_Integer_Overflow__char_max_square_45.c":113:14)
#loc35 = loc("CWE190_Integer_Overflow__char_max_square_45.c":113:20)
#loc36 = loc("CWE190_Integer_Overflow__char_max_square_45.c":113:32)
#loc139 = loc(fused[#loc33, #loc34])
#loc140 = loc(fused[#loc35, #loc36])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__char_max_square_45_badData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc125)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_square_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc127)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc7)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc128)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc9)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc9)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc129)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc11)
    %6 = cir.get_global @CWE190_Integer_Overflow__char_max_square_45_badData : !cir.ptr<!s8i> loc(#loc125)
    cir.store %5, %6 : !s8i, !cir.ptr<!s8i> loc(#loc130)
    %7 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc13)
    cir.return loc(#loc4)
  } loc(#loc126)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_square_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc17)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    cir.return loc(#loc16)
  } loc(#loc132)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc135)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc136)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc30)
  cir.func @main(%arg0: !s32i loc(fused[#loc33, #loc34]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc35, #loc36])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc140)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc32)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc37)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc37)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc38)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc39)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc39)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc40)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc27)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_max_square_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call @CWE190_Integer_Overflow__char_max_square_45_good() : () -> () loc(#loc42)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc28)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc29)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_max_square_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call @CWE190_Integer_Overflow__char_max_square_45_bad() : () -> () loc(#loc46)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc30)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc49)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.return %17 : !s32i loc(#loc143)
  } loc(#loc138)
  cir.func private @printHexCharLine(!s8i) loc(#loc144)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc146)
    %1 = cir.get_global @CWE190_Integer_Overflow__char_max_square_45_badData : !cir.ptr<!s8i> loc(#loc125)
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc56)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc146)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc148)
      %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc61)
      %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc61)
      %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc60)
      %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc60)
      %8 = cir.binop(mul, %5, %7) nsw : !s32i loc(#loc61)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc61)
      cir.store %9, %3 : !s8i, !cir.ptr<!s8i> loc(#loc148)
      %10 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc62)
      cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc63)
    } loc(#loc147)
    cir.return loc(#loc54)
  } loc(#loc145)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__char_max_square_45_goodG2BData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc149)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc151)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc70)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc70)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc152)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc72)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc72)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc153)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc74)
    %6 = cir.get_global @CWE190_Integer_Overflow__char_max_square_45_goodG2BData : !cir.ptr<!s8i> loc(#loc149)
    cir.store %5, %6 : !s8i, !cir.ptr<!s8i> loc(#loc154)
    %7 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc76)
    cir.return loc(#loc67)
  } loc(#loc150)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc157)
    %1 = cir.get_global @CWE190_Integer_Overflow__char_max_square_45_goodG2BData : !cir.ptr<!s8i> loc(#loc149)
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc81)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc157)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc159)
      %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc86)
      %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc86)
      %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc85)
      %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc85)
      %8 = cir.binop(mul, %5, %7) nsw : !s32i loc(#loc86)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc86)
      cir.store %9, %3 : !s8i, !cir.ptr<!s8i> loc(#loc159)
      %10 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc87)
      cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc88)
    } loc(#loc158)
    cir.return loc(#loc79)
  } loc(#loc156)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__char_max_square_45_goodB2GData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc160)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc162)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc95)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc95)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc163)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc97)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc97)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc164)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc99)
    %6 = cir.get_global @CWE190_Integer_Overflow__char_max_square_45_goodB2GData : !cir.ptr<!s8i> loc(#loc160)
    cir.store %5, %6 : !s8i, !cir.ptr<!s8i> loc(#loc165)
    %7 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc101)
    cir.return loc(#loc92)
  } loc(#loc161)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc104)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc168)
    %1 = cir.get_global @CWE190_Integer_Overflow__char_max_square_45_goodB2GData : !cir.ptr<!s8i> loc(#loc160)
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc108)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc168)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc111)
      %4 = cir.cast(integral, %3 : !s8i), !s64i loc(#loc111)
      %5 = cir.cast(integral, %4 : !s64i), !s32i loc(#loc111)
      %6 = cir.abs %5 poison : !s32i loc(#loc112)
      %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc112)
      %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc113)
      %9 = cir.const #cir.int<127> : !s32i loc(#loc114)
      %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc114)
      %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc113)
      %12 = cir.cast(float_to_int, %11 : !cir.double), !s64i loc(#loc113)
      %13 = cir.cmp(le, %7, %12) : !s64i, !cir.bool loc(#loc170)
      cir.if %13 {
        %14 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc172)
        %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc121)
        %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc121)
        %17 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc120)
        %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc120)
        %19 = cir.binop(mul, %16, %18) nsw : !s32i loc(#loc121)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc121)
        cir.store %20, %14 : !s8i, !cir.ptr<!s8i> loc(#loc172)
        %21 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc122)
        cir.call @printHexCharLine(%21) : (!s8i) -> () loc(#loc123)
      } else {
        %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc104)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc104)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc124)
      } loc(#loc171)
    } loc(#loc169)
    cir.return loc(#loc106)
  } loc(#loc167)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_45.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_square_45.c":22:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_square_45.c":22:13)
#loc3 = loc("CWE190_Integer_Overflow__char_max_square_45.c":38:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_square_45.c":46:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_square_45.c":40:5)
#loc6 = loc("CWE190_Integer_Overflow__char_max_square_45.c":40:10)
#loc7 = loc("CWE190_Integer_Overflow__char_max_square_45.c":41:12)
#loc8 = loc("CWE190_Integer_Overflow__char_max_square_45.c":41:5)
#loc9 = loc("CWE190_Integer_Overflow__char_max_square_45.c":43:12)
#loc10 = loc("CWE190_Integer_Overflow__char_max_square_45.c":43:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_square_45.c":44:59)
#loc12 = loc("CWE190_Integer_Overflow__char_max_square_45.c":44:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_square_45.c":45:5)
#loc14 = loc("CWE190_Integer_Overflow__char_max_square_45.c":45:13)
#loc15 = loc("CWE190_Integer_Overflow__char_max_square_45.c":99:1)
#loc16 = loc("CWE190_Integer_Overflow__char_max_square_45.c":103:1)
#loc17 = loc("CWE190_Integer_Overflow__char_max_square_45.c":101:5)
#loc18 = loc("CWE190_Integer_Overflow__char_max_square_45.c":101:13)
#loc19 = loc("CWE190_Integer_Overflow__char_max_square_45.c":102:5)
#loc20 = loc("CWE190_Integer_Overflow__char_max_square_45.c":102:13)
#loc21 = loc("/usr/include/stdlib.h":575:1)
#loc22 = loc("/usr/include/stdlib.h":575:41)
#loc23 = loc("/usr/include/time.h":76:1)
#loc24 = loc("/usr/include/time.h":76:38)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE190_Integer_Overflow__char_max_square_45.c":118:15)
#loc28 = loc("CWE190_Integer_Overflow__char_max_square_45.c":120:15)
#loc29 = loc("CWE190_Integer_Overflow__char_max_square_45.c":123:15)
#loc30 = loc("CWE190_Integer_Overflow__char_max_square_45.c":125:15)
#loc31 = loc("CWE190_Integer_Overflow__char_max_square_45.c":113:1)
#loc32 = loc("CWE190_Integer_Overflow__char_max_square_45.c":128:1)
#loc37 = loc("CWE190_Integer_Overflow__char_max_square_45.c":114:1)
#loc38 = loc("CWE190_Integer_Overflow__char_max_square_45.c":116:27)
#loc39 = loc("CWE190_Integer_Overflow__char_max_square_45.c":116:22)
#loc40 = loc("CWE190_Integer_Overflow__char_max_square_45.c":116:5)
#loc41 = loc("CWE190_Integer_Overflow__char_max_square_45.c":118:5)
#loc42 = loc("CWE190_Integer_Overflow__char_max_square_45.c":119:5)
#loc43 = loc("CWE190_Integer_Overflow__char_max_square_45.c":119:54)
#loc44 = loc("CWE190_Integer_Overflow__char_max_square_45.c":120:5)
#loc45 = loc("CWE190_Integer_Overflow__char_max_square_45.c":123:5)
#loc46 = loc("CWE190_Integer_Overflow__char_max_square_45.c":124:5)
#loc47 = loc("CWE190_Integer_Overflow__char_max_square_45.c":124:53)
#loc48 = loc("CWE190_Integer_Overflow__char_max_square_45.c":125:5)
#loc49 = loc("CWE190_Integer_Overflow__char_max_square_45.c":127:12)
#loc50 = loc("CWE190_Integer_Overflow__char_max_square_45.c":127:5)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc53 = loc("CWE190_Integer_Overflow__char_max_square_45.c":28:1)
#loc54 = loc("CWE190_Integer_Overflow__char_max_square_45.c":36:1)
#loc55 = loc("CWE190_Integer_Overflow__char_max_square_45.c":30:5)
#loc56 = loc("CWE190_Integer_Overflow__char_max_square_45.c":30:17)
#loc57 = loc("CWE190_Integer_Overflow__char_max_square_45.c":31:5)
#loc58 = loc("CWE190_Integer_Overflow__char_max_square_45.c":35:5)
#loc59 = loc("CWE190_Integer_Overflow__char_max_square_45.c":33:9)
#loc60 = loc("CWE190_Integer_Overflow__char_max_square_45.c":33:30)
#loc61 = loc("CWE190_Integer_Overflow__char_max_square_45.c":33:23)
#loc62 = loc("CWE190_Integer_Overflow__char_max_square_45.c":34:26)
#loc63 = loc("CWE190_Integer_Overflow__char_max_square_45.c":34:9)
#loc64 = loc("CWE190_Integer_Overflow__char_max_square_45.c":23:1)
#loc65 = loc("CWE190_Integer_Overflow__char_max_square_45.c":23:13)
#loc66 = loc("CWE190_Integer_Overflow__char_max_square_45.c":63:1)
#loc67 = loc("CWE190_Integer_Overflow__char_max_square_45.c":71:1)
#loc68 = loc("CWE190_Integer_Overflow__char_max_square_45.c":65:5)
#loc69 = loc("CWE190_Integer_Overflow__char_max_square_45.c":65:10)
#loc70 = loc("CWE190_Integer_Overflow__char_max_square_45.c":66:12)
#loc71 = loc("CWE190_Integer_Overflow__char_max_square_45.c":66:5)
#loc72 = loc("CWE190_Integer_Overflow__char_max_square_45.c":68:12)
#loc73 = loc("CWE190_Integer_Overflow__char_max_square_45.c":68:5)
#loc74 = loc("CWE190_Integer_Overflow__char_max_square_45.c":69:63)
#loc75 = loc("CWE190_Integer_Overflow__char_max_square_45.c":69:5)
#loc76 = loc("CWE190_Integer_Overflow__char_max_square_45.c":70:5)
#loc77 = loc("CWE190_Integer_Overflow__char_max_square_45.c":70:17)
#loc78 = loc("CWE190_Integer_Overflow__char_max_square_45.c":53:1)
#loc79 = loc("CWE190_Integer_Overflow__char_max_square_45.c":61:1)
#loc80 = loc("CWE190_Integer_Overflow__char_max_square_45.c":55:5)
#loc81 = loc("CWE190_Integer_Overflow__char_max_square_45.c":55:17)
#loc82 = loc("CWE190_Integer_Overflow__char_max_square_45.c":56:5)
#loc83 = loc("CWE190_Integer_Overflow__char_max_square_45.c":60:5)
#loc84 = loc("CWE190_Integer_Overflow__char_max_square_45.c":58:9)
#loc85 = loc("CWE190_Integer_Overflow__char_max_square_45.c":58:30)
#loc86 = loc("CWE190_Integer_Overflow__char_max_square_45.c":58:23)
#loc87 = loc("CWE190_Integer_Overflow__char_max_square_45.c":59:26)
#loc88 = loc("CWE190_Integer_Overflow__char_max_square_45.c":59:9)
#loc89 = loc("CWE190_Integer_Overflow__char_max_square_45.c":24:1)
#loc90 = loc("CWE190_Integer_Overflow__char_max_square_45.c":24:13)
#loc91 = loc("CWE190_Integer_Overflow__char_max_square_45.c":89:1)
#loc92 = loc("CWE190_Integer_Overflow__char_max_square_45.c":97:1)
#loc93 = loc("CWE190_Integer_Overflow__char_max_square_45.c":91:5)
#loc94 = loc("CWE190_Integer_Overflow__char_max_square_45.c":91:10)
#loc95 = loc("CWE190_Integer_Overflow__char_max_square_45.c":92:12)
#loc96 = loc("CWE190_Integer_Overflow__char_max_square_45.c":92:5)
#loc97 = loc("CWE190_Integer_Overflow__char_max_square_45.c":94:12)
#loc98 = loc("CWE190_Integer_Overflow__char_max_square_45.c":94:5)
#loc99 = loc("CWE190_Integer_Overflow__char_max_square_45.c":95:63)
#loc100 = loc("CWE190_Integer_Overflow__char_max_square_45.c":95:5)
#loc101 = loc("CWE190_Integer_Overflow__char_max_square_45.c":96:5)
#loc102 = loc("CWE190_Integer_Overflow__char_max_square_45.c":96:17)
#loc103 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc104 = loc("CWE190_Integer_Overflow__char_max_square_45.c":85:19)
#loc105 = loc("CWE190_Integer_Overflow__char_max_square_45.c":74:1)
#loc106 = loc("CWE190_Integer_Overflow__char_max_square_45.c":87:1)
#loc107 = loc("CWE190_Integer_Overflow__char_max_square_45.c":76:5)
#loc108 = loc("CWE190_Integer_Overflow__char_max_square_45.c":76:17)
#loc109 = loc("CWE190_Integer_Overflow__char_max_square_45.c":78:5)
#loc110 = loc("CWE190_Integer_Overflow__char_max_square_45.c":86:5)
#loc111 = loc("CWE190_Integer_Overflow__char_max_square_45.c":78:19)
#loc112 = loc("CWE190_Integer_Overflow__char_max_square_45.c":78:9)
#loc113 = loc("CWE190_Integer_Overflow__char_max_square_45.c":78:34)
#loc114 = loc("CWE190_Integer_Overflow__char_max_square_45.c":78:47)
#loc115 = loc("CWE190_Integer_Overflow__char_max_square_45.c":78:55)
#loc116 = loc("CWE190_Integer_Overflow__char_max_square_45.c":79:5)
#loc117 = loc("CWE190_Integer_Overflow__char_max_square_45.c":82:5)
#loc118 = loc("CWE190_Integer_Overflow__char_max_square_45.c":84:5)
#loc119 = loc("CWE190_Integer_Overflow__char_max_square_45.c":80:9)
#loc120 = loc("CWE190_Integer_Overflow__char_max_square_45.c":80:30)
#loc121 = loc("CWE190_Integer_Overflow__char_max_square_45.c":80:23)
#loc122 = loc("CWE190_Integer_Overflow__char_max_square_45.c":81:26)
#loc123 = loc("CWE190_Integer_Overflow__char_max_square_45.c":81:9)
#loc124 = loc("CWE190_Integer_Overflow__char_max_square_45.c":85:9)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc128 = loc(fused[#loc8, #loc7])
#loc129 = loc(fused[#loc10, #loc9])
#loc130 = loc(fused[#loc12, #loc11])
#loc131 = loc(fused[#loc13, #loc14])
#loc132 = loc(fused[#loc15, #loc16])
#loc133 = loc(fused[#loc17, #loc18])
#loc134 = loc(fused[#loc19, #loc20])
#loc135 = loc(fused[#loc21, #loc22])
#loc136 = loc(fused[#loc23, #loc24])
#loc137 = loc(fused[#loc25, #loc26])
#loc138 = loc(fused[#loc31, #loc32])
#loc141 = loc(fused[#loc42, #loc43])
#loc142 = loc(fused[#loc46, #loc47])
#loc143 = loc(fused[#loc50, #loc49])
#loc144 = loc(fused[#loc51, #loc52])
#loc145 = loc(fused[#loc53, #loc54])
#loc146 = loc(fused[#loc55, #loc56])
#loc147 = loc(fused[#loc57, #loc58])
#loc148 = loc(fused[#loc59, #loc60])
#loc149 = loc(fused[#loc64, #loc65])
#loc150 = loc(fused[#loc66, #loc67])
#loc151 = loc(fused[#loc68, #loc69])
#loc152 = loc(fused[#loc71, #loc70])
#loc153 = loc(fused[#loc73, #loc72])
#loc154 = loc(fused[#loc75, #loc74])
#loc155 = loc(fused[#loc76, #loc77])
#loc156 = loc(fused[#loc78, #loc79])
#loc157 = loc(fused[#loc80, #loc81])
#loc158 = loc(fused[#loc82, #loc83])
#loc159 = loc(fused[#loc84, #loc85])
#loc160 = loc(fused[#loc89, #loc90])
#loc161 = loc(fused[#loc91, #loc92])
#loc162 = loc(fused[#loc93, #loc94])
#loc163 = loc(fused[#loc96, #loc95])
#loc164 = loc(fused[#loc98, #loc97])
#loc165 = loc(fused[#loc100, #loc99])
#loc166 = loc(fused[#loc101, #loc102])
#loc167 = loc(fused[#loc105, #loc106])
#loc168 = loc(fused[#loc107, #loc108])
#loc169 = loc(fused[#loc109, #loc110])
#loc170 = loc(fused[#loc112, #loc115])
#loc171 = loc(fused[#loc116, #loc117, #loc118, #loc110])
#loc172 = loc(fused[#loc119, #loc120])
