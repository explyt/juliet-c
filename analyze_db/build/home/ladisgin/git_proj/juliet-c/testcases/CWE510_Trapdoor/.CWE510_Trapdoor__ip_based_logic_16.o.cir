!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc269)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc270)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc271)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc272)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc273)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc274)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc275)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc276)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc277)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc278)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc279)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc282)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc283)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc284)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc285)
    cir.br ^bb1 loc(#loc286)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc286)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc40)
    cir.brcond %6 ^bb3, ^bb52 loc(#loc40)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc287)
  ^bb4:  // pred: ^bb3
    %7 = cir.const #cir.int<16> : !u64i loc(#loc288)
    %8 = cir.cast(integral, %7 : !u64i), !s32i loc(#loc288)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc35)
    cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc37)
    cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    cir.br ^bb5 loc(#loc289)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc289)
  ^bb6:  // pred: ^bb40
    %13 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %14 ^bb7, ^bb41 loc(#loc46)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %15 = cir.const #cir.int<2> : !s32i loc(#loc47)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %17 = cir.const #cir.int<6> : !s32i loc(#loc49)
    %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
    cir.store %18, %3 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    cir.br ^bb8 loc(#loc291)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc56)
    %22 = cir.cmp(eq, %19, %21) : !s32i, !cir.bool loc(#loc292)
    cir.brcond %22 ^bb9, ^bb10 loc(#loc293)
  ^bb9:  // pred: ^bb8
    cir.br ^bb41 loc(#loc58)
  ^bb10:  // pred: ^bb8
    cir.br ^bb11 loc(#loc54)
  ^bb11:  // pred: ^bb10
    %23 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc294)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %25 = cir.const #cir.int<16> : !u64i loc(#loc295)
    cir.libc.memset %25 bytes from %23 set to %24 : !cir.ptr<!void>, !s32i, !u64i loc(#loc296)
    %26 = cir.const #cir.int<2> : !s32i loc(#loc66)
    %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc66)
    %28 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
    cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc297)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc69)
    %31 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
    %32 = cir.get_member %31[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
    cir.store %30, %32 : !u32i, !cir.ptr<!u32i> loc(#loc298)
    %33 = cir.const #cir.int<20000> : !s32i loc(#loc73)
    %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc73)
    %35 = cir.call @htons(%34) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc74)
    %36 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
    cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc299)
    cir.br ^bb12 loc(#loc300)
  ^bb12:  // pred: ^bb11
    %37 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %38 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc301)
    %39 = cir.const #cir.int<16> : !u64i loc(#loc302)
    %40 = cir.cast(integral, %39 : !u64i), !u32i loc(#loc302)
    %41 = cir.call @bind(%37, %38, %40) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc85)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc86)
    %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc303)
    cir.brcond %44 ^bb13, ^bb14 loc(#loc304)
  ^bb13:  // pred: ^bb12
    cir.br ^bb41 loc(#loc88)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc79)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc305)
  ^bb16:  // pred: ^bb15
    %45 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %46 = cir.const #cir.int<5> : !s32i loc(#loc92)
    %47 = cir.call @listen(%45, %46) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc93)
    %48 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %49 = cir.unary(minus, %48) : !s32i, !s32i loc(#loc94)
    %50 = cir.cmp(eq, %47, %49) : !s32i, !cir.bool loc(#loc306)
    cir.brcond %50 ^bb17, ^bb18 loc(#loc307)
  ^bb17:  // pred: ^bb16
    cir.br ^bb41 loc(#loc96)
  ^bb18:  // pred: ^bb16
    cir.br ^bb19 loc(#loc90)
  ^bb19:  // pred: ^bb18
    %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %52 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc98)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc99)
    %54 = cir.call @accept(%51, %52, %53) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc100)
    cir.store %54, %4 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    cir.br ^bb20 loc(#loc309)
  ^bb20:  // pred: ^bb19
    %55 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %56 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc106)
    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc310)
    cir.brcond %58 ^bb21, ^bb22 loc(#loc311)
  ^bb21:  // pred: ^bb20
    cir.br ^bb41 loc(#loc108)
  ^bb22:  // pred: ^bb20
    cir.br ^bb23 loc(#loc104)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc312)
  ^bb24:  // pred: ^bb23
    %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %60 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc313)
    %61 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc314)
    %62 = cir.call @getsockname(%59, %60, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc116)
    %63 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc118)
    %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc315)
    cir.brcond %65 ^bb25, ^bb26 loc(#loc316)
  ^bb25:  // pred: ^bb24
    cir.br ^bb41 loc(#loc120)
  ^bb26:  // pred: ^bb24
    cir.br ^bb27 loc(#loc110)
  ^bb27:  // pred: ^bb26
    cir.br ^bb28 loc(#loc317)
  ^bb28:  // pred: ^bb27
    %66 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc123)
    %67 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
    %68 = cir.cast(array_to_ptrdecay, %67 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
    %69 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
    %70 = cir.load %69 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc124)
    %71 = cir.call @inet_ntoa(%70) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc124)
    %72 = cir.call @strcmp(%68, %71) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc123)
    %73 = cir.const #cir.int<0> : !s32i loc(#loc125)
    %74 = cir.cmp(eq, %72, %73) : !s32i, !cir.bool loc(#loc318)
    cir.brcond %74 ^bb29, ^bb34 loc(#loc319)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc320)
  ^bb30:  // pred: ^bb29
    %75 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %76 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
    %77 = cir.cast(array_to_ptrdecay, %76 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
    %78 = cir.cast(bitcast, %77 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
    %79 = cir.const #cir.int<15> : !u64i loc(#loc321)
    %80 = cir.const #cir.int<0> : !s32i loc(#loc134)
    %81 = cir.call @send(%75, %78, %79, %80) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc135)
    %82 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %83 = cir.unary(minus, %82) : !s32i, !s32i loc(#loc136)
    %84 = cir.cast(integral, %83 : !s32i), !s64i loc(#loc136)
    %85 = cir.cmp(eq, %81, %84) : !s64i, !cir.bool loc(#loc322)
    cir.brcond %85 ^bb31, ^bb32 loc(#loc323)
  ^bb31:  // pred: ^bb30
    cir.br ^bb41 loc(#loc138)
  ^bb32:  // pred: ^bb30
    cir.br ^bb33 loc(#loc130)
  ^bb33:  // pred: ^bb32
    cir.br ^bb39 loc(#loc127)
  ^bb34:  // pred: ^bb28
    cir.br ^bb35 loc(#loc324)
  ^bb35:  // pred: ^bb34
    %86 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %87 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
    %88 = cir.cast(array_to_ptrdecay, %87 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
    %89 = cir.cast(bitcast, %88 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
    %90 = cir.const #cir.int<8> : !u64i loc(#loc325)
    %91 = cir.const #cir.int<0> : !s32i loc(#loc144)
    %92 = cir.call @send(%86, %89, %90, %91) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc145)
    %93 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %94 = cir.unary(minus, %93) : !s32i, !s32i loc(#loc146)
    %95 = cir.cast(integral, %94 : !s32i), !s64i loc(#loc146)
    %96 = cir.cmp(eq, %92, %95) : !s64i, !cir.bool loc(#loc326)
    cir.brcond %96 ^bb36, ^bb37 loc(#loc327)
  ^bb36:  // pred: ^bb35
    %97 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
    %98 = cir.cast(array_to_ptrdecay, %97 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%98) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    cir.br ^bb37 loc(#loc140)
  ^bb37:  // 2 preds: ^bb35, ^bb36
    cir.br ^bb38 loc(#loc140)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc122)
  ^bb39:  // 2 preds: ^bb33, ^bb38
    cir.br ^bb40 loc(#loc122)
  ^bb40:  // pred: ^bb39
    cir.br ^bb6 loc(#loc45)
  ^bb41:  // 7 preds: ^bb6, ^bb9, ^bb13, ^bb17, ^bb21, ^bb25, ^bb31
    cir.br ^bb42 loc(#loc45)
  ^bb42:  // pred: ^bb41
    cir.br ^bb43 loc(#loc328)
  ^bb43:  // pred: ^bb42
    %99 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %100 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %101 = cir.unary(minus, %100) : !s32i, !s32i loc(#loc152)
    %102 = cir.cmp(ne, %99, %101) : !s32i, !cir.bool loc(#loc329)
    cir.brcond %102 ^bb44, ^bb45 loc(#loc330)
  ^bb44:  // pred: ^bb43
    %103 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    %104 = cir.call @close(%103) : (!s32i) -> !s32i loc(#loc155)
    cir.br ^bb45 loc(#loc150)
  ^bb45:  // 2 preds: ^bb43, ^bb44
    cir.br ^bb46 loc(#loc150)
  ^bb46:  // pred: ^bb45
    cir.br ^bb47 loc(#loc331)
  ^bb47:  // pred: ^bb46
    %105 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %106 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %107 = cir.unary(minus, %106) : !s32i, !s32i loc(#loc159)
    %108 = cir.cmp(ne, %105, %107) : !s32i, !cir.bool loc(#loc332)
    cir.brcond %108 ^bb48, ^bb49 loc(#loc333)
  ^bb48:  // pred: ^bb47
    %109 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    %110 = cir.call @close(%109) : (!s32i) -> !s32i loc(#loc162)
    cir.br ^bb49 loc(#loc157)
  ^bb49:  // 2 preds: ^bb47, ^bb48
    cir.br ^bb50 loc(#loc157)
  ^bb50:  // pred: ^bb49
    cir.br ^bb51 loc(#loc42)
  ^bb51:  // pred: ^bb50
    cir.br ^bb52 loc(#loc163)
  ^bb52:  // 2 preds: ^bb2, ^bb51
    cir.br ^bb53 loc(#loc39)
  ^bb53:  // pred: ^bb52
    cir.return loc(#loc28)
  } loc(#loc280)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc335)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc166)
    cir.return loc(#loc165)
  } loc(#loc334)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc337)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc338)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc339)
    cir.br ^bb1 loc(#loc340)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc340)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc178)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc178)
    cir.brcond %4 ^bb3, ^bb39 loc(#loc178)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc341)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<1> : !s32i loc(#loc173)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc173)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc338)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc175)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.br ^bb5 loc(#loc342)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc342)
  ^bb6:  // pred: ^bb27
    %9 = cir.const #cir.int<0> : !s32i loc(#loc183)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc183)
    cir.brcond %10 ^bb7, ^bb28 loc(#loc183)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %11 = cir.const #cir.int<2> : !s32i loc(#loc184)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc185)
    %13 = cir.const #cir.int<6> : !s32i loc(#loc186)
    %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc187)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc343)
    cir.br ^bb8 loc(#loc344)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc193)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc193)
    %18 = cir.cmp(eq, %15, %17) : !s32i, !cir.bool loc(#loc345)
    cir.brcond %18 ^bb9, ^bb10 loc(#loc346)
  ^bb9:  // pred: ^bb8
    cir.br ^bb28 loc(#loc195)
  ^bb10:  // pred: ^bb8
    cir.br ^bb11 loc(#loc191)
  ^bb11:  // pred: ^bb10
    %19 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc347)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc198)
    %21 = cir.const #cir.int<16> : !u64i loc(#loc348)
    cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc349)
    %22 = cir.const #cir.int<2> : !s32i loc(#loc203)
    %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc203)
    %24 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
    cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc350)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc205)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc205)
    %27 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
    %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
    cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc351)
    %29 = cir.const #cir.int<20000> : !s32i loc(#loc207)
    %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc207)
    %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc208)
    %32 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
    cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc352)
    cir.br ^bb12 loc(#loc353)
  ^bb12:  // pred: ^bb11
    %33 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc213)
    %34 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc354)
    %35 = cir.const #cir.int<16> : !u64i loc(#loc355)
    %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc355)
    %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc218)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc219)
    %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc219)
    %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc356)
    cir.brcond %40 ^bb13, ^bb14 loc(#loc357)
  ^bb13:  // pred: ^bb12
    cir.br ^bb28 loc(#loc221)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc212)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc358)
  ^bb16:  // pred: ^bb15
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    %42 = cir.const #cir.int<5> : !s32i loc(#loc225)
    %43 = cir.call @listen(%41, %42) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc226)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc227)
    %45 = cir.unary(minus, %44) : !s32i, !s32i loc(#loc227)
    %46 = cir.cmp(eq, %43, %45) : !s32i, !cir.bool loc(#loc359)
    cir.brcond %46 ^bb17, ^bb18 loc(#loc360)
  ^bb17:  // pred: ^bb16
    cir.br ^bb28 loc(#loc229)
  ^bb18:  // pred: ^bb16
    cir.br ^bb19 loc(#loc223)
  ^bb19:  // pred: ^bb18
    %47 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    %48 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc231)
    %49 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc232)
    %50 = cir.call @accept(%47, %48, %49) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc233)
    cir.store %50, %2 : !s32i, !cir.ptr<!s32i> loc(#loc361)
    cir.br ^bb20 loc(#loc362)
  ^bb20:  // pred: ^bb19
    %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc238)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc239)
    %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc239)
    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc363)
    cir.brcond %54 ^bb21, ^bb22 loc(#loc364)
  ^bb21:  // pred: ^bb20
    cir.br ^bb28 loc(#loc241)
  ^bb22:  // pred: ^bb20
    cir.br ^bb23 loc(#loc237)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc365)
  ^bb24:  // pred: ^bb23
    %55 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc244)
    %56 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc245)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc245)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc245)
    %59 = cir.const #cir.int<8> : !u64i loc(#loc366)
    %60 = cir.const #cir.int<0> : !s32i loc(#loc248)
    %61 = cir.call @send(%55, %58, %59, %60) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc249)
    %62 = cir.const #cir.int<1> : !s32i loc(#loc250)
    %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc250)
    %64 = cir.cast(integral, %63 : !s32i), !s64i loc(#loc250)
    %65 = cir.cmp(eq, %61, %64) : !s64i, !cir.bool loc(#loc367)
    cir.brcond %65 ^bb25, ^bb26 loc(#loc368)
  ^bb25:  // pred: ^bb24
    %66 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc252)
    %67 = cir.cast(array_to_ptrdecay, %66 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc252)
    cir.call @printLine(%67) : (!cir.ptr<!s8i>) -> () loc(#loc253)
    cir.br ^bb26 loc(#loc243)
  ^bb26:  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc243)
  ^bb27:  // pred: ^bb26
    cir.br ^bb6 loc(#loc182)
  ^bb28:  // 5 preds: ^bb6, ^bb9, ^bb13, ^bb17, ^bb21
    cir.br ^bb29 loc(#loc182)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc369)
  ^bb30:  // pred: ^bb29
    %68 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc256)
    %69 = cir.const #cir.int<1> : !s32i loc(#loc257)
    %70 = cir.unary(minus, %69) : !s32i, !s32i loc(#loc257)
    %71 = cir.cmp(ne, %68, %70) : !s32i, !cir.bool loc(#loc370)
    cir.brcond %71 ^bb31, ^bb32 loc(#loc371)
  ^bb31:  // pred: ^bb30
    %72 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc259)
    %73 = cir.call @close(%72) : (!s32i) -> !s32i loc(#loc260)
    cir.br ^bb32 loc(#loc255)
  ^bb32:  // 2 preds: ^bb30, ^bb31
    cir.br ^bb33 loc(#loc255)
  ^bb33:  // pred: ^bb32
    cir.br ^bb34 loc(#loc372)
  ^bb34:  // pred: ^bb33
    %74 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc263)
    %75 = cir.const #cir.int<1> : !s32i loc(#loc264)
    %76 = cir.unary(minus, %75) : !s32i, !s32i loc(#loc264)
    %77 = cir.cmp(ne, %74, %76) : !s32i, !cir.bool loc(#loc373)
    cir.brcond %77 ^bb35, ^bb36 loc(#loc374)
  ^bb35:  // pred: ^bb34
    %78 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc266)
    %79 = cir.call @close(%78) : (!s32i) -> !s32i loc(#loc267)
    cir.br ^bb36 loc(#loc262)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    cir.br ^bb37 loc(#loc262)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc180)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc268)
  ^bb39:  // 2 preds: ^bb2, ^bb38
    cir.br ^bb40 loc(#loc177)
  ^bb40:  // pred: ^bb39
    cir.return loc(#loc169)
  } loc(#loc336)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_16.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:28)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:44)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:44)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_16.c":102:35)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_16.c":41:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_16.c":124:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_16.c":50:13)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_16.c":50:32)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_16.c":50:41)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_16.c":51:13)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_16.c":51:56)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_16.c":52:13)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_16.c":52:35)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_16.c":53:13)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_16.c":53:35)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_16.c":43:5)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_16.c":123:5)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_16.c":43:11)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_16.c":45:9)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_16.c":121:9)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_16.c":51:36)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_16.c":54:13)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_16.c":106:21)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_16.c":106:20)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:39)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:48)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:61)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:32)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:17)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:72)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_16.c":64:17)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_16.c":67:17)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_16.c":64:21)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_16.c":64:37)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_16.c":65:17)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_16.c":66:21)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:24)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:25)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:34)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:37)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:51)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:17)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:52)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_16.c":69:38)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_16.c":69:17)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_16.c":70:43)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_16.c":70:17)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_16.c":71:42)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_16.c":71:36)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_16.c":71:17)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_16.c":71:47)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:17)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_16.c":75:17)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:26)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:58)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:59)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:68)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:82)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:21)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:88)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_16.c":73:17)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_16.c":74:21)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:17)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_16.c":79:17)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:28)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:42)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:21)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:48)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_16.c":77:17)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_16.c":78:21)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:39)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:53)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:59)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:32)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:17)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:63)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_16.c":81:17)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_16.c":84:17)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_16.c":81:21)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_16.c":81:37)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_16.c":82:17)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_16.c":83:21)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:17)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_16.c":88:17)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:33)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:66)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:67)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:82)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:83)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:21)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:105)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:104)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_16.c":86:17)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_16.c":87:21)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:17)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_16.c":104:17)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:21)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:46)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:84)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_16.c":91:17)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_16.c":97:17)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_16.c":99:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:21)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_16.c":96:21)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:30)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:59)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:79)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:82)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:25)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:89)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_16.c":93:21)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_16.c":95:25)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:21)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_16.c":103:21)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:30)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:61)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:83)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:86)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:25)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:92)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_16.c":101:21)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_16.c":102:25)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_16.c":107:13)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_16.c":110:13)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_16.c":107:17)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_16.c":107:33)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_16.c":108:13)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_16.c":109:30)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_16.c":109:17)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_16.c":111:13)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_16.c":114:13)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_16.c":111:17)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_16.c":111:33)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_16.c":112:13)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_16.c":113:30)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_16.c":113:17)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_16.c":122:9)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_16.c":200:1)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_16.c":203:1)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_16.c":202:5)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_16.c":202:11)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_16.c":131:1)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_16.c":198:1)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_16.c":140:13)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_16.c":140:32)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_16.c":141:13)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_16.c":141:35)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_16.c":142:13)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_16.c":142:35)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_16.c":133:5)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_16.c":197:5)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_16.c":133:11)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_16.c":135:9)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_16.c":195:9)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_16.c":143:13)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_16.c":180:21)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_16.c":180:20)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:39)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:48)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:61)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:32)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:17)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:72)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_16.c":153:17)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_16.c":156:17)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_16.c":153:21)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_16.c":153:37)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_16.c":154:17)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_16.c":155:21)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:24)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:25)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:34)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:37)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:51)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:17)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:52)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_16.c":158:38)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_16.c":158:17)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_16.c":159:43)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_16.c":159:17)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_16.c":160:42)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_16.c":160:36)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_16.c":160:17)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_16.c":160:47)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:17)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_16.c":164:17)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:26)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:58)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:59)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:68)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:82)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:21)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:88)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_16.c":162:17)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_16.c":163:21)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:17)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_16.c":168:17)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:28)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:42)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:21)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:48)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_16.c":166:17)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_16.c":167:21)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:39)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:53)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:59)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:32)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:17)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:63)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_16.c":170:17)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_16.c":173:17)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_16.c":170:21)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_16.c":170:37)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_16.c":171:17)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_16.c":172:21)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:17)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_16.c":178:17)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:26)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:40)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:57)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:79)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:82)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:21)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:88)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_16.c":176:17)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_16.c":177:31)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_16.c":177:21)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_16.c":181:13)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_16.c":184:13)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_16.c":181:17)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_16.c":181:33)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_16.c":182:13)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_16.c":183:30)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_16.c":183:17)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_16.c":185:13)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_16.c":188:13)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_16.c":185:17)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_16.c":185:33)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_16.c":186:13)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_16.c":187:30)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_16.c":187:17)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_16.c":196:9)
#loc269 = loc(fused[#loc1, #loc2])
#loc270 = loc(fused[#loc3, #loc4])
#loc271 = loc(fused[#loc5, #loc6])
#loc272 = loc(fused[#loc7, #loc8])
#loc273 = loc(fused[#loc9, #loc10])
#loc274 = loc(fused[#loc11, #loc12])
#loc275 = loc(fused[#loc13, #loc14])
#loc276 = loc(fused[#loc16, #loc17])
#loc277 = loc(fused[#loc18, #loc19])
#loc278 = loc(fused[#loc22, #loc23])
#loc279 = loc(fused[#loc25, #loc26])
#loc280 = loc(fused[#loc27, #loc28])
#loc281 = loc(fused[#loc29, #loc30])
#loc282 = loc(fused[#loc29, #loc31])
#loc283 = loc(fused[#loc32, #loc33])
#loc284 = loc(fused[#loc34, #loc35])
#loc285 = loc(fused[#loc36, #loc37])
#loc286 = loc(fused[#loc38, #loc39])
#loc287 = loc(fused[#loc41, #loc42])
#loc288 = loc(fused[#loc43, #loc33])
#loc289 = loc(fused[#loc44, #loc45])
#loc290 = loc(fused[#loc51, #loc52])
#loc291 = loc(fused[#loc53, #loc54])
#loc292 = loc(fused[#loc55, #loc56])
#loc293 = loc(fused[#loc57, #loc54])
#loc294 = loc(fused[#loc59, #loc60])
#loc295 = loc(fused[#loc62, #loc63])
#loc296 = loc(fused[#loc64, #loc65])
#loc297 = loc(fused[#loc68, #loc66])
#loc298 = loc(fused[#loc72, #loc69])
#loc299 = loc(fused[#loc76, #loc77])
#loc300 = loc(fused[#loc78, #loc79])
#loc301 = loc(fused[#loc81, #loc82])
#loc302 = loc(fused[#loc83, #loc84])
#loc303 = loc(fused[#loc85, #loc86])
#loc304 = loc(fused[#loc87, #loc79])
#loc305 = loc(fused[#loc89, #loc90])
#loc306 = loc(fused[#loc93, #loc94])
#loc307 = loc(fused[#loc95, #loc90])
#loc308 = loc(fused[#loc101, #loc102])
#loc309 = loc(fused[#loc103, #loc104])
#loc310 = loc(fused[#loc105, #loc106])
#loc311 = loc(fused[#loc107, #loc104])
#loc312 = loc(fused[#loc109, #loc110])
#loc313 = loc(fused[#loc112, #loc113])
#loc314 = loc(fused[#loc114, #loc115])
#loc315 = loc(fused[#loc116, #loc117])
#loc316 = loc(fused[#loc119, #loc110])
#loc317 = loc(fused[#loc121, #loc122])
#loc318 = loc(fused[#loc123, #loc125])
#loc319 = loc(fused[#loc126, #loc127, #loc128, #loc122])
#loc320 = loc(fused[#loc129, #loc130])
#loc321 = loc(fused[#loc132, #loc133])
#loc322 = loc(fused[#loc135, #loc136])
#loc323 = loc(fused[#loc137, #loc130])
#loc324 = loc(fused[#loc139, #loc140])
#loc325 = loc(fused[#loc142, #loc143])
#loc326 = loc(fused[#loc145, #loc146])
#loc327 = loc(fused[#loc147, #loc140])
#loc328 = loc(fused[#loc149, #loc150])
#loc329 = loc(fused[#loc151, #loc152])
#loc330 = loc(fused[#loc153, #loc150])
#loc331 = loc(fused[#loc156, #loc157])
#loc332 = loc(fused[#loc158, #loc159])
#loc333 = loc(fused[#loc160, #loc157])
#loc334 = loc(fused[#loc164, #loc165])
#loc335 = loc(fused[#loc166, #loc167])
#loc336 = loc(fused[#loc168, #loc169])
#loc337 = loc(fused[#loc170, #loc171])
#loc338 = loc(fused[#loc172, #loc173])
#loc339 = loc(fused[#loc174, #loc175])
#loc340 = loc(fused[#loc176, #loc177])
#loc341 = loc(fused[#loc179, #loc180])
#loc342 = loc(fused[#loc181, #loc182])
#loc343 = loc(fused[#loc188, #loc189])
#loc344 = loc(fused[#loc190, #loc191])
#loc345 = loc(fused[#loc192, #loc193])
#loc346 = loc(fused[#loc194, #loc191])
#loc347 = loc(fused[#loc196, #loc197])
#loc348 = loc(fused[#loc199, #loc200])
#loc349 = loc(fused[#loc201, #loc202])
#loc350 = loc(fused[#loc204, #loc203])
#loc351 = loc(fused[#loc206, #loc205])
#loc352 = loc(fused[#loc209, #loc210])
#loc353 = loc(fused[#loc211, #loc212])
#loc354 = loc(fused[#loc214, #loc215])
#loc355 = loc(fused[#loc216, #loc217])
#loc356 = loc(fused[#loc218, #loc219])
#loc357 = loc(fused[#loc220, #loc212])
#loc358 = loc(fused[#loc222, #loc223])
#loc359 = loc(fused[#loc226, #loc227])
#loc360 = loc(fused[#loc228, #loc223])
#loc361 = loc(fused[#loc234, #loc235])
#loc362 = loc(fused[#loc236, #loc237])
#loc363 = loc(fused[#loc238, #loc239])
#loc364 = loc(fused[#loc240, #loc237])
#loc365 = loc(fused[#loc242, #loc243])
#loc366 = loc(fused[#loc246, #loc247])
#loc367 = loc(fused[#loc249, #loc250])
#loc368 = loc(fused[#loc251, #loc243])
#loc369 = loc(fused[#loc254, #loc255])
#loc370 = loc(fused[#loc256, #loc257])
#loc371 = loc(fused[#loc258, #loc255])
#loc372 = loc(fused[#loc261, #loc262])
#loc373 = loc(fused[#loc263, #loc264])
#loc374 = loc(fused[#loc265, #loc262])
