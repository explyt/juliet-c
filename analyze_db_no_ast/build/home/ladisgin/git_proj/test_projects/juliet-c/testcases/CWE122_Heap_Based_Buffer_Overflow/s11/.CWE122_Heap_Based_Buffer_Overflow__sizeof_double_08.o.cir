!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc128)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc129)
  cir.func private  @printDoubleLine(!cir.double) loc(#loc130)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc131)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc134)
    cir.scope {
      %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc136)
      %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
      cir.if %9 {
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc138)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc139)
        cir.store %13, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc140)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc27)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc28)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!cir.double>, !s32i loc(#loc142)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc29)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc33)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc143)
        } loc(#loc141)
        %14 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc34)
        %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc35)
        cir.store %14, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc144)
      } loc(#loc137)
    } loc(#loc135)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc37)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc38)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc39)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc40)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc41)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc41)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc40)
    cir.return loc(#loc10)
  } loc(#loc132)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc145)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.return %2 : !s32i loc(#loc149)
  } loc(#loc148)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc59)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc153)
    cir.scope {
      %7 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc155)
      %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc63)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc63)
      cir.if %9 {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc69)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc157)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc158)
        cir.store %13, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc159)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc76)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc77)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!cir.double>, !s32i loc(#loc161)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc78)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc80)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc81)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc82)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc80)
          } loc(#loc162)
        } loc(#loc160)
        %14 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc83)
        %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc84)
        cir.store %14, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc163)
      } loc(#loc156)
    } loc(#loc154)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc86)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc87)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc88)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc89)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc90)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc90)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc89)
    cir.return loc(#loc56)
  } loc(#loc151)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.return %2 : !s32i loc(#loc165)
  } loc(#loc164)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc99)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc168)
    cir.scope {
      %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc170)
      %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc103)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc103)
      cir.if %9 {
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc106)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc172)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc173)
        cir.store %13, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc174)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc113)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc114)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc114)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!cir.double>, !s32i loc(#loc176)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc115)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc117)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc118)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc119)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc117)
          } loc(#loc177)
        } loc(#loc175)
        %14 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc120)
        %15 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc121)
        cir.store %14, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc178)
      } loc(#loc171)
    } loc(#loc169)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc123)
    %3 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc124)
    cir.call @printDoubleLine(%3) : (!cir.double) -> () loc(#loc125)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc126)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc127)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc127)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc126)
    cir.return loc(#loc96)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":35:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":51:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":37:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":37:14)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":39:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":39:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":40:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":47:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":40:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":40:26)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":41:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":44:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":44:33)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":44:44)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":44:45)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":44:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":45:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":45:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":45:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":45:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":45:18)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":45:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":45:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":45:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":45:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":46:17)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":46:10)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":46:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":49:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":49:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":49:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":50:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":50:10)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":98:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":102:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":100:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":100:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":101:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":101:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":23:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":26:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":25:12)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":25:5)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":66:19)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":58:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":78:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":60:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":60:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":62:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":62:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":63:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":74:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":63:8)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":63:27)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":64:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":67:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":69:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":66:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":71:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":71:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":71:45)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":71:46)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":71:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":72:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":72:37)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":72:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":72:21)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":72:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":72:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":72:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":72:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":72:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":73:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":73:10)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":73:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":76:22)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":76:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":76:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":77:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":77:10)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":28:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":31:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":30:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":30:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":81:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":96:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":83:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":83:14)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":85:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":85:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":86:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":92:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":86:8)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":86:26)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":87:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":89:26)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":89:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":89:45)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":89:46)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":89:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":90:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":90:37)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":90:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":90:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":90:18)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":90:27)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":90:28)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":90:34)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":90:33)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":91:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":91:10)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":91:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":94:22)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":94:21)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":94:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":95:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c":95:10)
#loc128 = loc(fused[#loc1, #loc2])
#loc129 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc7, #loc8])
#loc132 = loc(fused[#loc9, #loc10])
#loc133 = loc(fused[#loc11, #loc12])
#loc134 = loc(fused[#loc14, #loc13])
#loc135 = loc(fused[#loc15, #loc16])
#loc136 = loc(fused[#loc17, #loc18])
#loc137 = loc(fused[#loc19, #loc16])
#loc138 = loc(fused[#loc21, #loc22])
#loc139 = loc(fused[#loc20, #loc23])
#loc140 = loc(fused[#loc24, #loc23])
#loc141 = loc(fused[#loc25, #loc26])
#loc142 = loc(fused[#loc27, #loc28])
#loc143 = loc(fused[#loc30, #loc26])
#loc144 = loc(fused[#loc36, #loc34])
#loc145 = loc(fused[#loc42, #loc43])
#loc146 = loc(fused[#loc44, #loc45])
#loc147 = loc(fused[#loc46, #loc47])
#loc148 = loc(fused[#loc48, #loc49])
#loc149 = loc(fused[#loc51, #loc50])
#loc150 = loc(fused[#loc52, #loc53])
#loc151 = loc(fused[#loc55, #loc56])
#loc152 = loc(fused[#loc57, #loc58])
#loc153 = loc(fused[#loc60, #loc59])
#loc154 = loc(fused[#loc61, #loc62])
#loc155 = loc(fused[#loc63, #loc64])
#loc156 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc157 = loc(fused[#loc70, #loc71])
#loc158 = loc(fused[#loc69, #loc72])
#loc159 = loc(fused[#loc73, #loc72])
#loc160 = loc(fused[#loc74, #loc75])
#loc161 = loc(fused[#loc76, #loc77])
#loc162 = loc(fused[#loc79, #loc75])
#loc163 = loc(fused[#loc85, #loc83])
#loc164 = loc(fused[#loc91, #loc92])
#loc165 = loc(fused[#loc94, #loc93])
#loc166 = loc(fused[#loc95, #loc96])
#loc167 = loc(fused[#loc97, #loc98])
#loc168 = loc(fused[#loc100, #loc99])
#loc169 = loc(fused[#loc101, #loc102])
#loc170 = loc(fused[#loc103, #loc104])
#loc171 = loc(fused[#loc105, #loc102])
#loc172 = loc(fused[#loc107, #loc108])
#loc173 = loc(fused[#loc106, #loc109])
#loc174 = loc(fused[#loc110, #loc109])
#loc175 = loc(fused[#loc111, #loc112])
#loc176 = loc(fused[#loc113, #loc114])
#loc177 = loc(fused[#loc116, #loc112])
#loc178 = loc(fused[#loc122, #loc120])
