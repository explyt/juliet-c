!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc110)
  cir.func private @printIntLine(!s32i) loc(#loc111)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc112)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc115)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc116)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc19)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
      cir.for : cond {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc119)
        cir.condition(%6) loc(#loc23)
      } body {
        cir.scope {
          %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc25)
          %5 = cir.const #cir.int<10> : !s32i loc(#loc26)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc26)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc121)
          cir.store %8, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc122)
          cir.scope {
            %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
            %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
            %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc32)
            %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc124)
            cir.if %12 {
              %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc34)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc35)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc36)
              cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
            } loc(#loc125)
          } loc(#loc123)
        } loc(#loc120)
        cir.yield loc(#loc18)
      } step {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
        %5 = cir.unary(inc, %4) nsw : !s32i, !s32i loc(#loc38)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
        cir.yield loc(#loc117)
      } loc(#loc117)
    } loc(#loc117)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc128)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc128)
      cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc128)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc44)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc44)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc45)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc45)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc129)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc130)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc131)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc51)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc52)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc53)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc54)
      %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc55)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc54)
    } loc(#loc127)
    cir.return loc(#loc10)
  } loc(#loc113)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc132)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc66)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc137)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc70)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
      cir.for : cond {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc73)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc140)
        cir.condition(%6) loc(#loc74)
      } body {
        cir.scope {
          %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc76)
          %5 = cir.const #cir.int<10> : !s32i loc(#loc77)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc77)
          %7 = cir.const #cir.int<4> : !u64i loc(#loc142)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc143)
          %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc76)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
          cir.store %10, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
          cir.scope {
            %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc85)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
            %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc147)
            cir.if %14 {
              %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc87)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc88)
              %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc89)
              cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc87)
            } loc(#loc148)
          } loc(#loc146)
        } loc(#loc141)
        cir.yield loc(#loc69)
      } step {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
        %5 = cir.unary(inc, %4) nsw : !s32i, !s32i loc(#loc91)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
        cir.yield loc(#loc138)
      } loc(#loc138)
    } loc(#loc138)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc151)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc151)
      cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc151)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc97)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc98)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc98)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc152)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc153)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc154)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc104)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc105)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc106)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc107)
      %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc108)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    } loc(#loc150)
    cir.return loc(#loc61)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":23:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":24:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":31:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":26:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":26:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":26:16)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":26:20)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":26:18)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":27:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":29:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":29:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":29:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":29:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":30:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":30:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":30:21)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":30:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":30:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":30:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":30:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":26:24)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":26:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":32:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":38:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":33:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":33:28)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":35:16)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":35:22)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":35:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":35:33)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":35:43)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":35:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":35:44)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":36:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":36:27)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":36:28)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":36:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":37:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":37:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":66:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":69:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":68:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":68:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":46:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":64:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":48:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":48:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":49:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":49:11)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":50:12)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":50:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":51:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":56:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":51:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":51:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":51:16)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":51:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":51:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":52:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":54:23)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":54:30)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":54:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":54:43)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":54:44)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":54:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":55:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":55:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":55:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":55:21)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":55:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":55:28)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":55:34)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":55:33)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":51:24)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":51:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":57:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":63:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":58:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":58:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":60:16)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":60:22)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":60:30)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":60:33)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":60:43)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":60:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":60:44)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":61:22)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":61:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":61:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":61:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":62:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c":62:14)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc9, #loc10])
#loc114 = loc(fused[#loc11, #loc12])
#loc115 = loc(fused[#loc13, #loc14])
#loc116 = loc(fused[#loc16, #loc15])
#loc117 = loc(fused[#loc17, #loc18])
#loc118 = loc(fused[#loc20, #loc19])
#loc119 = loc(fused[#loc21, #loc22])
#loc120 = loc(fused[#loc24, #loc18])
#loc121 = loc(fused[#loc25, #loc27])
#loc122 = loc(fused[#loc28, #loc27])
#loc123 = loc(fused[#loc29, #loc30])
#loc124 = loc(fused[#loc31, #loc32])
#loc125 = loc(fused[#loc33, #loc30])
#loc126 = loc(fused[#loc38, #loc37])
#loc127 = loc(fused[#loc39, #loc40])
#loc128 = loc(fused[#loc41, #loc42])
#loc129 = loc(fused[#loc46, #loc47])
#loc130 = loc(fused[#loc45, #loc47])
#loc131 = loc(fused[#loc48, #loc49])
#loc132 = loc(fused[#loc56, #loc57])
#loc133 = loc(fused[#loc58, #loc59])
#loc134 = loc(fused[#loc60, #loc61])
#loc135 = loc(fused[#loc62, #loc63])
#loc136 = loc(fused[#loc64, #loc65])
#loc137 = loc(fused[#loc67, #loc66])
#loc138 = loc(fused[#loc68, #loc69])
#loc139 = loc(fused[#loc71, #loc70])
#loc140 = loc(fused[#loc72, #loc73])
#loc141 = loc(fused[#loc75, #loc69])
#loc142 = loc(fused[#loc78, #loc79])
#loc143 = loc(fused[#loc77, #loc79])
#loc144 = loc(fused[#loc76, #loc80])
#loc145 = loc(fused[#loc81, #loc80])
#loc146 = loc(fused[#loc82, #loc83])
#loc147 = loc(fused[#loc84, #loc85])
#loc148 = loc(fused[#loc86, #loc83])
#loc149 = loc(fused[#loc91, #loc90])
#loc150 = loc(fused[#loc92, #loc93])
#loc151 = loc(fused[#loc94, #loc95])
#loc152 = loc(fused[#loc99, #loc100])
#loc153 = loc(fused[#loc98, #loc100])
#loc154 = loc(fused[#loc101, #loc102])
