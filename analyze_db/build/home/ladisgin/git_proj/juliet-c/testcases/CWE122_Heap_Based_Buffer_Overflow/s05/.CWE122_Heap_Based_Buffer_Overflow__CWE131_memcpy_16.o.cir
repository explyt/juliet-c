!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc93)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc94)
  cir.func private @printIntLine(!s32i) loc(#loc95)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc96)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc100)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc101)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc19)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc21)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc21)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc102)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc103)
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc27)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc105)
    cir.brcond %13 ^bb5, ^bb6 loc(#loc106)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc31)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
    cir.br ^bb6 loc(#loc25)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc25)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc32)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc107)
  ^bb10:  // pred: ^bb9
    %17 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc98)
    cir.store %17, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc98)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc35)
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc36)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc37)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc37)
    %24 = cir.const #cir.int<4> : !u64i loc(#loc108)
    %25 = cir.binop(mul, %23, %24) : !u64i loc(#loc109)
    cir.libc.memcpy %25 bytes from %21 to %19 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc110)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc44)
    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc45)
    %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc46)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc47)
    cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc46)
    cir.br ^bb11 loc(#loc34)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc10)
  } loc(#loc97)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc49)
  } loc(#loc111)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc115)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc58)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc116)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc117)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc62)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc63)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc64)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc64)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc118)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc119)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    cir.br ^bb4 loc(#loc122)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc72)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc72)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc123)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc124)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc74)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc76)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc74)
    cir.br ^bb6 loc(#loc70)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc70)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc77)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc61)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc125)
  ^bb10:  // pred: ^bb9
    %19 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc114)
    cir.store %19, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc114)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc80)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc81)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc81)
    %24 = cir.const #cir.int<10> : !s32i loc(#loc82)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc82)
    %26 = cir.const #cir.int<4> : !u64i loc(#loc126)
    %27 = cir.binop(mul, %25, %26) : !u64i loc(#loc127)
    cir.libc.memcpy %27 bytes from %23 to %21 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc128)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc89)
    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc90)
    %32 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc91)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
    cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc91)
    cir.br ^bb11 loc(#loc79)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc53)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":33:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":33:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":31:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:11)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:32)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:37)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:28)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:34)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":30:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":32:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":38:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:16)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:22)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:43)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:44)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:28)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":37:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":37:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":66:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":69:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":68:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":68:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":46:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":64:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:11)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":49:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":49:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":50:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":56:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":50:11)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:43)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:44)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:37)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:21)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:27)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:34)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":55:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":63:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:16)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:22)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:33)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:43)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:44)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:22)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:28)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":62:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":62:14)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc7, #loc8])
#loc97 = loc(fused[#loc9, #loc10])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc13, #loc14])
#loc100 = loc(fused[#loc16, #loc15])
#loc101 = loc(fused[#loc17, #loc18])
#loc102 = loc(fused[#loc20, #loc22])
#loc103 = loc(fused[#loc23, #loc22])
#loc104 = loc(fused[#loc24, #loc25])
#loc105 = loc(fused[#loc26, #loc27])
#loc106 = loc(fused[#loc28, #loc25])
#loc107 = loc(fused[#loc33, #loc34])
#loc108 = loc(fused[#loc38, #loc39])
#loc109 = loc(fused[#loc37, #loc39])
#loc110 = loc(fused[#loc40, #loc41])
#loc111 = loc(fused[#loc48, #loc49])
#loc112 = loc(fused[#loc50, #loc51])
#loc113 = loc(fused[#loc52, #loc53])
#loc114 = loc(fused[#loc54, #loc55])
#loc115 = loc(fused[#loc56, #loc57])
#loc116 = loc(fused[#loc59, #loc58])
#loc117 = loc(fused[#loc60, #loc61])
#loc118 = loc(fused[#loc65, #loc66])
#loc119 = loc(fused[#loc64, #loc66])
#loc120 = loc(fused[#loc63, #loc67])
#loc121 = loc(fused[#loc68, #loc67])
#loc122 = loc(fused[#loc69, #loc70])
#loc123 = loc(fused[#loc71, #loc72])
#loc124 = loc(fused[#loc73, #loc70])
#loc125 = loc(fused[#loc78, #loc79])
#loc126 = loc(fused[#loc83, #loc84])
#loc127 = loc(fused[#loc82, #loc84])
#loc128 = loc(fused[#loc85, #loc86])
