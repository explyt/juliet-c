!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":106:10)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":106:14)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":106:20)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":106:32)
#loc199 = loc(fused[#loc87, #loc88])
#loc200 = loc(fused[#loc89, #loc90])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc163)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc165)
  cir.func private @printIntLine(!s32i) loc(#loc166)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc167)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc172)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc172)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc20)
      cir.if %6 {
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc25)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc26)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc174)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc27)
        %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc174)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc29)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
      } loc(#loc173)
    } loc(#loc171)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc178)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc179)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc37)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc38)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc180)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc181)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc37)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc182)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc183)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc46)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc185)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc48)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc50)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc48)
        } loc(#loc186)
      } loc(#loc184)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc53)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc188)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc56)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc189)
          cir.condition(%24) loc(#loc57)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc59)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc62)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc191)
          } loc(#loc190)
          cir.yield loc(#loc52)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc63)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc64)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc192)
          cir.yield loc(#loc187)
        } loc(#loc187)
      } loc(#loc187)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc67)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc68)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc69)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc70)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
    } loc(#loc177)
    cir.return loc(#loc12)
  } loc(#loc168)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc72)
  } loc(#loc193)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc195)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc196)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc84)
  cir.func @main(%arg0: !s32i loc(fused[#loc87, #loc88]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc89, #loc90])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc200)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc86)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc91)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc92)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc93)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc93)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc94)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc81)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %8 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12_good() : () -> () loc(#loc96)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc82)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc83)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %13 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12_bad() : () -> () loc(#loc100)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc84)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc103)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    cir.return %17 : !s32i loc(#loc203)
  } loc(#loc198)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc110)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc208)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc208)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc114)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc114)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc119)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc121)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
      } loc(#loc209)
    } loc(#loc207)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc213)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc214)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc129)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc130)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc215)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc216)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc217)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc218)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc138)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc138)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc220)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc140)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc141)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc142)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc140)
        } loc(#loc221)
      } loc(#loc219)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc145)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc145)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc223)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc147)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc148)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc224)
          cir.condition(%24) loc(#loc149)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc151)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc152)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc153)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc154)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc226)
          } loc(#loc225)
          cir.yield loc(#loc144)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc155)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc156)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc227)
          cir.yield loc(#loc222)
        } loc(#loc222)
      } loc(#loc222)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc158)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc159)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc157)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc160)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc161)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc162)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc162)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc161)
    } loc(#loc212)
    cir.return loc(#loc106)
  } loc(#loc204)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":21:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":52:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":23:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":23:9)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":25:13)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":25:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":25:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":26:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":37:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":26:8)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":26:33)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":27:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":32:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":34:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":29:16)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":29:26)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":29:30)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":29:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":36:16)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":36:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":38:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":51:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":39:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":39:16)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":40:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":40:14)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":43:28)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":43:35)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":43:42)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":43:52)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":43:53)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":43:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":44:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":44:43)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":44:13)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":44:27)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":44:33)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":44:34)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":44:40)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":44:39)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":45:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":48:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":45:18)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":45:14)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":45:21)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":45:33)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":45:23)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":46:9)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":47:29)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":47:13)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":47:24)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":47:25)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":45:40)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":45:39)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":49:22)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":49:33)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":49:34)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":49:9)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":50:9)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":50:14)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":91:1)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":94:1)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":93:5)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":93:13)
#loc75 = loc("/usr/include/stdlib.h":575:1)
#loc76 = loc("/usr/include/stdlib.h":575:41)
#loc77 = loc("/usr/include/time.h":76:1)
#loc78 = loc("/usr/include/time.h":76:38)
#loc79 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc80 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":111:15)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":113:15)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":116:15)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":118:15)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":106:1)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":121:1)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":107:1)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":109:27)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":109:22)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":109:5)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":111:5)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":112:5)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":112:70)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":113:5)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":116:5)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":117:5)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":117:69)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":118:5)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":120:12)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":120:5)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":60:1)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":89:1)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":62:5)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":62:9)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":64:13)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":64:12)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":64:5)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":65:5)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":74:5)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":65:8)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":65:33)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":66:5)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":69:5)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":71:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":68:16)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":68:9)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":73:16)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":73:9)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":75:5)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":88:5)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":76:9)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":76:16)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":77:9)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":77:14)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":80:28)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":80:35)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":80:42)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":80:52)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":80:53)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":80:9)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":81:9)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":81:43)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":81:13)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":81:27)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":81:33)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":81:34)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":81:40)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":81:39)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":82:9)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":85:9)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":82:18)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":82:14)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":82:21)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":82:33)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":82:23)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":83:9)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":84:29)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":84:13)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":84:24)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":84:25)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":82:40)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":82:39)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":86:22)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":86:33)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":86:34)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":86:9)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":87:9)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_12.c":87:14)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc166 = loc(fused[#loc7, #loc8])
#loc167 = loc(fused[#loc9, #loc10])
#loc168 = loc(fused[#loc11, #loc12])
#loc169 = loc(fused[#loc13, #loc14])
#loc170 = loc(fused[#loc17, #loc15])
#loc171 = loc(fused[#loc18, #loc19])
#loc172 = loc(fused[#loc20, #loc21])
#loc173 = loc(fused[#loc22, #loc23, #loc24, #loc19])
#loc174 = loc(fused[#loc25, #loc26])
#loc175 = loc(fused[#loc28, #loc27])
#loc176 = loc(fused[#loc30, #loc29])
#loc177 = loc(fused[#loc31, #loc32])
#loc178 = loc(fused[#loc33, #loc34])
#loc179 = loc(fused[#loc35, #loc36])
#loc180 = loc(fused[#loc39, #loc40])
#loc181 = loc(fused[#loc38, #loc40])
#loc182 = loc(fused[#loc37, #loc41])
#loc183 = loc(fused[#loc42, #loc41])
#loc184 = loc(fused[#loc43, #loc44])
#loc185 = loc(fused[#loc45, #loc46])
#loc186 = loc(fused[#loc47, #loc44])
#loc187 = loc(fused[#loc51, #loc52])
#loc188 = loc(fused[#loc54, #loc53])
#loc189 = loc(fused[#loc55, #loc56])
#loc190 = loc(fused[#loc58, #loc52])
#loc191 = loc(fused[#loc60, #loc59])
#loc192 = loc(fused[#loc64, #loc63])
#loc193 = loc(fused[#loc71, #loc72])
#loc194 = loc(fused[#loc73, #loc74])
#loc195 = loc(fused[#loc75, #loc76])
#loc196 = loc(fused[#loc77, #loc78])
#loc197 = loc(fused[#loc79, #loc80])
#loc198 = loc(fused[#loc85, #loc86])
#loc201 = loc(fused[#loc96, #loc97])
#loc202 = loc(fused[#loc100, #loc101])
#loc203 = loc(fused[#loc104, #loc103])
#loc204 = loc(fused[#loc105, #loc106])
#loc205 = loc(fused[#loc107, #loc108])
#loc206 = loc(fused[#loc111, #loc109])
#loc207 = loc(fused[#loc112, #loc113])
#loc208 = loc(fused[#loc114, #loc115])
#loc209 = loc(fused[#loc116, #loc117, #loc118, #loc113])
#loc210 = loc(fused[#loc120, #loc119])
#loc211 = loc(fused[#loc122, #loc121])
#loc212 = loc(fused[#loc123, #loc124])
#loc213 = loc(fused[#loc125, #loc126])
#loc214 = loc(fused[#loc127, #loc128])
#loc215 = loc(fused[#loc131, #loc132])
#loc216 = loc(fused[#loc130, #loc132])
#loc217 = loc(fused[#loc129, #loc133])
#loc218 = loc(fused[#loc134, #loc133])
#loc219 = loc(fused[#loc135, #loc136])
#loc220 = loc(fused[#loc137, #loc138])
#loc221 = loc(fused[#loc139, #loc136])
#loc222 = loc(fused[#loc143, #loc144])
#loc223 = loc(fused[#loc146, #loc145])
#loc224 = loc(fused[#loc147, #loc148])
#loc225 = loc(fused[#loc150, #loc144])
#loc226 = loc(fused[#loc152, #loc151])
#loc227 = loc(fused[#loc156, #loc155])
