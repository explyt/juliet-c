!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc401)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc402)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc403)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc404)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc405)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc406)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc407)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc408)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc410)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc411)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc412)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc413)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    cir.store %4, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc414)
    cir.br ^bb1 loc(#loc415)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc31)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc32)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc416)
    cir.brcond %7 ^bb2, ^bb9 loc(#loc417)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc418)
  ^bb3:  // pred: ^bb2
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc36)
    %9 = cir.const #cir.int<50> : !s32i loc(#loc37)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc37)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc419)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc420)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc36)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc421)
    cir.store %14, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc410)
    cir.br ^bb4 loc(#loc422)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc43)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc43)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc423)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc424)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc45)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc47)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc45)
    cir.br ^bb6 loc(#loc41)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc41)
  ^bb7:  // pred: ^bb6
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %23 = cir.const #cir.int<65> : !s32i loc(#loc49)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc50)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc50)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc50)
    %28 = cir.call @wmemset(%22, %23, %27) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc52)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    %31 = cir.const #cir.int<50> : !s32i loc(#loc55)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc55)
    %34 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc57)
    cir.store %29, %34 : !s32i, !cir.ptr<!s32i> loc(#loc425)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc58)
    cir.store %36, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc426)
    cir.br ^bb8 loc(#loc35)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc30)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc30)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc427)
  ^bb11:  // pred: ^bb10
    %37 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %38 = cir.const #cir.int<5> : !s32i loc(#loc63)
    %39 = cir.cmp(eq, %37, %38) : !s32i, !cir.bool loc(#loc428)
    cir.brcond %39 ^bb12, ^bb19 loc(#loc429)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc430)
  ^bb13:  // pred: ^bb12
    %40 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc67)
    %41 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc68)
    %43 = cir.call @strlen(%42) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc67)
    cir.store %43, %1 : !u64i, !cir.ptr<!u64i> loc(#loc411)
    %44 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc69)
    %45 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc70)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc71)
    %48 = cir.binop(add, %45, %47) : !u64i loc(#loc431)
    %49 = cir.const #cir.int<4> : !u64i loc(#loc432)
    %50 = cir.call @calloc(%48, %49) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
    cir.store %50, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc412)
    cir.br ^bb14 loc(#loc433)
  ^bb14:  // pred: ^bb13
    %51 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc76)
    %52 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
    %53 = cir.cmp(eq, %51, %52) : !cir.ptr<!void>, !cir.bool loc(#loc434)
    cir.brcond %53 ^bb15, ^bb16 loc(#loc435)
  ^bb15:  // pred: ^bb14
    %54 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc79)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc81)
    cir.call @exit(%56) : (!s32i) -> () extra(#fn_attr) loc(#loc79)
    cir.br ^bb16 loc(#loc75)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc75)
  ^bb17:  // pred: ^bb16
    %57 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
    %59 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
    %61 = cir.call @wcscpy(%58, %60) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc84)
    %62 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%63) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %64 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
    cir.call @free(%64) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc88)
    cir.br ^bb18 loc(#loc66)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc61)
  ^bb19:  // 2 preds: ^bb11, ^bb18
    cir.br ^bb20 loc(#loc61)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc18)
  } loc(#loc409)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc437)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc91)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc438)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc93)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc439)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc95)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc440)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc97)
    cir.return loc(#loc90)
  } loc(#loc436)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc99)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc441)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc442)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc444)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc445)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc446)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc447)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc114)
    cir.store %4, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc448)
    cir.br ^bb1 loc(#loc449)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc118)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc119)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc450)
    cir.brcond %7 ^bb2, ^bb9 loc(#loc451)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc452)
  ^bb3:  // pred: ^bb2
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc123)
    %9 = cir.const #cir.int<50> : !s32i loc(#loc124)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc124)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc453)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc454)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc455)
    cir.store %14, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc444)
    cir.br ^bb4 loc(#loc456)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc130)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc130)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc457)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc458)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc132)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc134)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc132)
    cir.br ^bb6 loc(#loc128)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc128)
  ^bb7:  // pred: ^bb6
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc135)
    %23 = cir.const #cir.int<65> : !s32i loc(#loc136)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc137)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc137)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc137)
    %28 = cir.call @wmemset(%22, %23, %27) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc139)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc140)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc141)
    %31 = cir.const #cir.int<50> : !s32i loc(#loc142)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc142)
    %34 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc144)
    cir.store %29, %34 : !s32i, !cir.ptr<!s32i> loc(#loc459)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc145)
    cir.store %36, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc460)
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc117)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc117)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc461)
  ^bb11:  // pred: ^bb10
    %37 = cir.const #cir.int<5> : !s32i loc(#loc149)
    %38 = cir.const #cir.int<5> : !s32i loc(#loc150)
    %39 = cir.cmp(ne, %37, %38) : !s32i, !cir.bool loc(#loc462)
    cir.brcond %39 ^bb12, ^bb13 loc(#loc463)
  ^bb12:  // pred: ^bb11
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    cir.br ^bb20 loc(#loc152)
  ^bb13:  // pred: ^bb11
    cir.br ^bb14 loc(#loc464)
  ^bb14:  // pred: ^bb13
    %42 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc157)
    %43 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc158)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc158)
    %45 = cir.call @wcslen(%44) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc157)
    cir.store %45, %1 : !u64i, !cir.ptr<!u64i> loc(#loc445)
    %46 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc159)
    %47 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc160)
    %48 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc161)
    %50 = cir.binop(add, %47, %49) : !u64i loc(#loc465)
    %51 = cir.const #cir.int<4> : !u64i loc(#loc466)
    %52 = cir.call @calloc(%50, %51) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
    cir.store %52, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc446)
    cir.br ^bb15 loc(#loc467)
  ^bb15:  // pred: ^bb14
    %53 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc166)
    %54 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc167)
    %55 = cir.cmp(eq, %53, %54) : !cir.ptr<!void>, !cir.bool loc(#loc468)
    cir.brcond %55 ^bb16, ^bb17 loc(#loc469)
  ^bb16:  // pred: ^bb15
    %56 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc169)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc171)
    cir.call @exit(%58) : (!s32i) -> () extra(#fn_attr) loc(#loc169)
    cir.br ^bb17 loc(#loc165)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc165)
  ^bb18:  // pred: ^bb17
    %59 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc172)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc172)
    %61 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc173)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc173)
    %63 = cir.call @wcscpy(%60, %62) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc174)
    %64 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc175)
    %65 = cir.cast(bitcast, %64 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc175)
    cir.call @printWLine(%65) : (!cir.ptr<!s32i>) -> () loc(#loc176)
    %66 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc177)
    cir.call @free(%66) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc178)
    cir.br ^bb19 loc(#loc156)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc148)
  ^bb20:  // 2 preds: ^bb12, ^bb19
    cir.br ^bb21 loc(#loc148)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc105)
  } loc(#loc443)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc471)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc472)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc473)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc474)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc189)
    cir.store %4, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc475)
    cir.br ^bb1 loc(#loc476)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc193)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc194)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc477)
    cir.brcond %7 ^bb2, ^bb9 loc(#loc478)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc479)
  ^bb3:  // pred: ^bb2
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc198)
    %9 = cir.const #cir.int<50> : !s32i loc(#loc199)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc199)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc480)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc481)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc198)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc482)
    cir.store %14, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc471)
    cir.br ^bb4 loc(#loc483)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc204)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc205)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc205)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc484)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc485)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc207)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc208)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc209)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc207)
    cir.br ^bb6 loc(#loc203)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc203)
  ^bb7:  // pred: ^bb6
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc210)
    %23 = cir.const #cir.int<65> : !s32i loc(#loc211)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc212)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc213)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc212)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc212)
    %28 = cir.call @wmemset(%22, %23, %27) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc214)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc215)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc216)
    %31 = cir.const #cir.int<50> : !s32i loc(#loc217)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc218)
    %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc217)
    %34 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc219)
    cir.store %29, %34 : !s32i, !cir.ptr<!s32i> loc(#loc486)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc220)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc220)
    cir.store %36, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc487)
    cir.br ^bb8 loc(#loc197)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc192)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc192)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc488)
  ^bb11:  // pred: ^bb10
    %37 = cir.const #cir.int<5> : !s32i loc(#loc224)
    %38 = cir.const #cir.int<5> : !s32i loc(#loc225)
    %39 = cir.cmp(eq, %37, %38) : !s32i, !cir.bool loc(#loc489)
    cir.brcond %39 ^bb12, ^bb19 loc(#loc490)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc491)
  ^bb13:  // pred: ^bb12
    %40 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc229)
    %41 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc230)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc230)
    %43 = cir.call @wcslen(%42) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc229)
    cir.store %43, %1 : !u64i, !cir.ptr<!u64i> loc(#loc472)
    %44 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc231)
    %45 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc232)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc233)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc233)
    %48 = cir.binop(add, %45, %47) : !u64i loc(#loc492)
    %49 = cir.const #cir.int<4> : !u64i loc(#loc493)
    %50 = cir.call @calloc(%48, %49) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc231)
    cir.store %50, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc473)
    cir.br ^bb14 loc(#loc494)
  ^bb14:  // pred: ^bb13
    %51 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc238)
    %52 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc239)
    %53 = cir.cmp(eq, %51, %52) : !cir.ptr<!void>, !cir.bool loc(#loc495)
    cir.brcond %53 ^bb15, ^bb16 loc(#loc496)
  ^bb15:  // pred: ^bb14
    %54 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc241)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc242)
    %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc243)
    cir.call @exit(%56) : (!s32i) -> () extra(#fn_attr) loc(#loc241)
    cir.br ^bb16 loc(#loc237)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc237)
  ^bb17:  // pred: ^bb16
    %57 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc244)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc244)
    %59 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc245)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc245)
    %61 = cir.call @wcscpy(%58, %60) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc246)
    %62 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc247)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc247)
    cir.call @printWLine(%63) : (!cir.ptr<!s32i>) -> () loc(#loc248)
    %64 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc249)
    cir.call @free(%64) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc250)
    cir.br ^bb18 loc(#loc228)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc223)
  ^bb19:  // 2 preds: ^bb11, ^bb18
    cir.br ^bb20 loc(#loc223)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc180)
  } loc(#loc470)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc497)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc499)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc500)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc501)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc502)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc263)
    cir.store %4, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc503)
    cir.br ^bb1 loc(#loc504)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc267)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc268)
    %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc505)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc506)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc272)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc272)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc273)
    cir.br ^bb10 loc(#loc270)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc507)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc276)
    %11 = cir.const #cir.int<50> : !s32i loc(#loc277)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc277)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc508)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc509)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc276)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc510)
    cir.store %16, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc499)
    cir.br ^bb5 loc(#loc511)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc282)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc283)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc283)
    %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc512)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc513)
  ^bb6:  // pred: ^bb5
    %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc285)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc286)
    %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc287)
    cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc285)
    cir.br ^bb7 loc(#loc281)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc281)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc288)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc288)
    %26 = cir.const #cir.int<65> : !s32i loc(#loc289)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc290)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc291)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc290)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc290)
    cir.libc.memset %30 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc514)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc294)
    %32 = cir.cast(integral, %31 : !s32i), !s8i loc(#loc294)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc295)
    %34 = cir.const #cir.int<50> : !s32i loc(#loc296)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc297)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc296)
    %37 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc298)
    cir.store %32, %37 : !s8i, !cir.ptr<!s8i> loc(#loc515)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc299)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc299)
    cir.store %39, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc516)
    cir.br ^bb9 loc(#loc275)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc266)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc266)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc517)
  ^bb12:  // pred: ^bb11
    %40 = cir.const #cir.int<5> : !s32i loc(#loc303)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc304)
    %42 = cir.cmp(eq, %40, %41) : !s32i, !cir.bool loc(#loc518)
    cir.brcond %42 ^bb13, ^bb20 loc(#loc519)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc520)
  ^bb14:  // pred: ^bb13
    %43 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc308)
    %44 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc309)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc309)
    %46 = cir.call @strlen(%45) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc308)
    cir.store %46, %1 : !u64i, !cir.ptr<!u64i> loc(#loc500)
    %47 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc310)
    %48 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc311)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc312)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc312)
    %51 = cir.binop(add, %48, %50) : !u64i loc(#loc521)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc313)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc313)
    %54 = cir.call @calloc(%51, %53) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc310)
    cir.store %54, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc501)
    cir.br ^bb15 loc(#loc522)
  ^bb15:  // pred: ^bb14
    %55 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc316)
    %56 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc317)
    %57 = cir.cmp(eq, %55, %56) : !cir.ptr<!void>, !cir.bool loc(#loc523)
    cir.brcond %57 ^bb16, ^bb17 loc(#loc524)
  ^bb16:  // pred: ^bb15
    %58 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc319)
    %59 = cir.const #cir.int<1> : !s32i loc(#loc320)
    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc321)
    cir.call @exit(%60) : (!s32i) -> () extra(#fn_attr) loc(#loc319)
    cir.br ^bb17 loc(#loc315)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc315)
  ^bb18:  // pred: ^bb17
    %61 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc322)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc322)
    %63 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc323)
    %64 = cir.cast(bitcast, %63 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc323)
    %65 = cir.call @strcpy(%62, %64) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc324)
    %66 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc325)
    %67 = cir.cast(bitcast, %66 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc325)
    cir.call @printLine(%67) : (!cir.ptr<!s8i>) -> () loc(#loc326)
    %68 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc327)
    cir.call @free(%68) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc328)
    cir.br ^bb19 loc(#loc307)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc302)
  ^bb20:  // 2 preds: ^bb12, ^bb19
    cir.br ^bb21 loc(#loc302)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc254)
  } loc(#loc498)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc526)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc527)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc528)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc529)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc339)
    cir.store %4, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc530)
    cir.br ^bb1 loc(#loc531)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc343)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc344)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc532)
    cir.brcond %7 ^bb2, ^bb9 loc(#loc533)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc534)
  ^bb3:  // pred: ^bb2
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc348)
    %9 = cir.const #cir.int<50> : !s32i loc(#loc349)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc349)
    %11 = cir.const #cir.int<1> : !u64i loc(#loc535)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc536)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc348)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc537)
    cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc526)
    cir.br ^bb4 loc(#loc538)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc354)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc355)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc355)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc539)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc540)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc357)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc358)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc359)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc357)
    cir.br ^bb6 loc(#loc353)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc353)
  ^bb7:  // pred: ^bb6
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc360)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc360)
    %24 = cir.const #cir.int<65> : !s32i loc(#loc361)
    %25 = cir.const #cir.int<50> : !s32i loc(#loc362)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc363)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc362)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc362)
    cir.libc.memset %28 bytes from %23 set to %24 : !cir.ptr<!void>, !s32i, !u64i loc(#loc541)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc366)
    %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc366)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc367)
    %32 = cir.const #cir.int<50> : !s32i loc(#loc368)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc369)
    %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc368)
    %35 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %34 : !s32i), !cir.ptr<!s8i> loc(#loc370)
    cir.store %30, %35 : !s8i, !cir.ptr<!s8i> loc(#loc542)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc371)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc371)
    cir.store %37, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc543)
    cir.br ^bb8 loc(#loc347)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc342)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc342)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc544)
  ^bb11:  // pred: ^bb10
    %38 = cir.const #cir.int<5> : !s32i loc(#loc375)
    %39 = cir.const #cir.int<5> : !s32i loc(#loc376)
    %40 = cir.cmp(eq, %38, %39) : !s32i, !cir.bool loc(#loc545)
    cir.brcond %40 ^bb12, ^bb19 loc(#loc546)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc547)
  ^bb13:  // pred: ^bb12
    %41 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc380)
    %42 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc381)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc381)
    %44 = cir.call @strlen(%43) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc380)
    cir.store %44, %1 : !u64i, !cir.ptr<!u64i> loc(#loc527)
    %45 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc382)
    %46 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc383)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc384)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc384)
    %49 = cir.binop(add, %46, %48) : !u64i loc(#loc548)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc385)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc385)
    %52 = cir.call @calloc(%49, %51) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc382)
    cir.store %52, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc528)
    cir.br ^bb14 loc(#loc549)
  ^bb14:  // pred: ^bb13
    %53 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc388)
    %54 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc389)
    %55 = cir.cmp(eq, %53, %54) : !cir.ptr<!void>, !cir.bool loc(#loc550)
    cir.brcond %55 ^bb15, ^bb16 loc(#loc551)
  ^bb15:  // pred: ^bb14
    %56 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc391)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc392)
    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc393)
    cir.call @exit(%58) : (!s32i) -> () extra(#fn_attr) loc(#loc391)
    cir.br ^bb16 loc(#loc387)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc387)
  ^bb17:  // pred: ^bb16
    %59 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc394)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc394)
    %61 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc395)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc395)
    %63 = cir.call @strcpy(%60, %62) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc396)
    %64 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc397)
    %65 = cir.cast(bitcast, %64 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc397)
    cir.call @printLine(%65) : (!cir.ptr<!s8i>) -> () loc(#loc398)
    %66 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc399)
    cir.call @free(%66) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc400)
    cir.br ^bb18 loc(#loc379)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc374)
  ^bb19:  // 2 preds: ^bb11, ^bb18
    cir.br ^bb20 loc(#loc374)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc330)
  } loc(#loc525)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":29:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":56:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":36:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":36:75)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":48:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":48:49)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":49:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":49:68)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":31:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":31:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":32:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":32:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":33:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":43:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":33:8)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":33:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":34:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":35:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":42:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":36:50)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":36:57)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":36:60)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":36:74)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":37:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":37:50)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":37:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":37:34)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":37:40)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":37:41)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":37:47)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":37:46)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":38:21)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":38:36)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":38:42)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":38:45)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":38:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":39:35)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":39:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":39:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":39:30)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":39:31)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":41:28)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":41:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":44:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":55:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":44:8)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":44:27)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":45:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":46:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":54:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":48:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":48:45)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":49:35)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":49:42)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":49:50)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":49:53)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":49:67)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":50:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":50:41)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":50:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":50:25)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":50:31)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":50:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":50:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":50:37)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":51:26)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":51:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":51:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":52:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":52:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":53:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":53:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":192:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":198:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":194:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":194:14)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":195:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":195:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":196:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":196:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":197:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":197:14)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":81:19)
#loc100 = loc("/usr/include/wchar.h":247:1)
#loc101 = loc("/usr/include/wchar.h":247:51)
#loc102 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc103 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":63:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":95:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":70:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":70:75)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":87:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":87:52)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":88:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":88:68)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":65:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":65:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":66:12)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":66:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":67:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":77:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":67:8)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":67:27)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":68:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":69:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":76:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":70:50)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":70:57)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":70:60)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":70:74)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":71:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":71:50)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":71:17)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":71:34)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":71:40)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":71:41)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":71:47)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":71:46)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":72:21)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":72:36)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":72:42)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":72:45)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":72:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":73:35)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":73:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":73:27)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":73:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":73:31)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":75:28)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":75:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":78:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":94:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":78:8)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":78:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":79:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":82:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":84:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":81:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":85:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":93:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":87:30)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":87:48)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":88:35)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":88:42)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":88:50)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":88:53)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":88:67)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":89:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":89:41)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":89:17)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":89:25)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":89:31)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":89:32)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":89:38)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":89:37)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":90:26)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":90:32)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":90:19)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":91:35)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":91:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":92:18)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":92:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":98:1)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":125:1)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":105:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":105:75)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":117:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":117:52)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":118:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":118:68)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":100:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":100:12)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":101:12)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":101:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":102:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":112:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":102:8)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":102:27)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":103:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":104:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":111:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":105:50)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":105:57)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":105:60)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":105:74)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":106:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":106:50)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":106:17)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":106:34)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":106:40)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":106:41)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":106:47)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":106:46)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":107:21)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":107:36)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":107:42)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":107:45)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":107:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":108:35)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":108:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":108:27)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":108:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":108:31)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":110:28)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":110:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":113:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":124:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":113:8)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":113:27)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":114:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":115:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":123:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":117:30)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":117:48)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":118:35)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":118:42)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":118:50)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":118:53)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":118:67)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":119:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":119:41)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":119:17)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":119:25)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":119:31)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":119:32)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":119:38)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":119:37)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":120:26)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":120:32)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":120:19)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":121:35)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":121:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":122:18)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":122:13)
#loc251 = loc("/usr/include/string.h":141:1)
#loc252 = loc("/usr/include/string.h":142:14)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":128:1)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":160:1)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":140:13)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":140:67)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":152:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":152:49)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":153:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":153:54)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":130:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":130:12)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":131:12)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":131:5)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":132:5)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":147:5)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":132:8)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":132:27)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":133:5)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":136:5)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":138:5)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":135:19)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":135:9)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":139:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":146:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":140:45)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":140:52)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":140:55)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":140:66)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":141:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":141:51)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":141:17)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":141:35)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":141:41)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":141:42)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":141:48)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":141:47)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":142:20)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":142:36)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":142:41)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":142:44)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":142:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":142:45)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":143:36)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":143:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":143:28)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":143:31)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":143:32)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":145:28)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":145:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":148:5)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":159:5)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":148:8)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":148:27)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":149:5)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":150:9)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":158:9)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":152:30)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":152:45)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":153:35)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":153:42)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":153:50)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":153:53)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":154:13)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":154:41)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":154:17)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":154:25)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":154:31)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":154:32)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":154:38)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":154:37)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":155:26)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":155:32)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":155:19)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":156:31)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":156:13)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":157:18)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":157:13)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":163:1)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":190:1)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":170:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":170:67)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":182:13)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":182:49)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":183:13)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":183:54)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":165:5)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":165:12)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":166:12)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":166:5)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":167:5)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":177:5)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":167:8)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":167:27)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":168:5)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":169:9)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":176:9)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":170:45)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":170:52)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":170:55)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":170:66)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":171:13)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":171:51)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":171:17)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":171:35)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":171:41)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":171:42)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":171:48)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":171:47)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":172:20)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":172:36)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":172:41)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":172:44)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":172:13)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":172:45)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":173:36)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":173:13)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":173:28)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":173:31)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":173:32)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":175:28)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":175:13)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":178:5)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":189:5)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":178:8)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":178:27)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":179:5)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":180:9)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":188:9)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":182:30)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":182:45)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":183:35)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":183:42)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":183:50)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":183:53)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":184:13)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":184:41)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":184:17)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":184:25)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":184:31)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":184:32)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":184:38)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":184:37)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":185:26)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":185:32)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":185:19)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":186:31)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":186:13)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":187:18)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c":187:13)
#loc401 = loc(fused[#loc1, #loc2])
#loc402 = loc(fused[#loc3, #loc4])
#loc403 = loc(fused[#loc5, #loc6])
#loc404 = loc(fused[#loc7, #loc8])
#loc405 = loc(fused[#loc9, #loc10])
#loc406 = loc(fused[#loc11, #loc12])
#loc407 = loc(fused[#loc13, #loc14])
#loc408 = loc(fused[#loc15, #loc16])
#loc409 = loc(fused[#loc17, #loc18])
#loc410 = loc(fused[#loc19, #loc20])
#loc411 = loc(fused[#loc21, #loc22])
#loc412 = loc(fused[#loc23, #loc24])
#loc413 = loc(fused[#loc25, #loc26])
#loc414 = loc(fused[#loc28, #loc27])
#loc415 = loc(fused[#loc29, #loc30])
#loc416 = loc(fused[#loc31, #loc32])
#loc417 = loc(fused[#loc33, #loc30])
#loc418 = loc(fused[#loc34, #loc35])
#loc419 = loc(fused[#loc38, #loc39])
#loc420 = loc(fused[#loc37, #loc39])
#loc421 = loc(fused[#loc36, #loc20])
#loc422 = loc(fused[#loc40, #loc41])
#loc423 = loc(fused[#loc42, #loc43])
#loc424 = loc(fused[#loc44, #loc41])
#loc425 = loc(fused[#loc54, #loc53])
#loc426 = loc(fused[#loc59, #loc58])
#loc427 = loc(fused[#loc60, #loc61])
#loc428 = loc(fused[#loc62, #loc63])
#loc429 = loc(fused[#loc64, #loc61])
#loc430 = loc(fused[#loc65, #loc66])
#loc431 = loc(fused[#loc70, #loc71])
#loc432 = loc(fused[#loc72, #loc73])
#loc433 = loc(fused[#loc74, #loc75])
#loc434 = loc(fused[#loc76, #loc77])
#loc435 = loc(fused[#loc78, #loc75])
#loc436 = loc(fused[#loc89, #loc90])
#loc437 = loc(fused[#loc91, #loc92])
#loc438 = loc(fused[#loc93, #loc94])
#loc439 = loc(fused[#loc95, #loc96])
#loc440 = loc(fused[#loc97, #loc98])
#loc441 = loc(fused[#loc100, #loc101])
#loc442 = loc(fused[#loc102, #loc103])
#loc443 = loc(fused[#loc104, #loc105])
#loc444 = loc(fused[#loc106, #loc107])
#loc445 = loc(fused[#loc108, #loc109])
#loc446 = loc(fused[#loc110, #loc111])
#loc447 = loc(fused[#loc112, #loc113])
#loc448 = loc(fused[#loc115, #loc114])
#loc449 = loc(fused[#loc116, #loc117])
#loc450 = loc(fused[#loc118, #loc119])
#loc451 = loc(fused[#loc120, #loc117])
#loc452 = loc(fused[#loc121, #loc122])
#loc453 = loc(fused[#loc125, #loc126])
#loc454 = loc(fused[#loc124, #loc126])
#loc455 = loc(fused[#loc123, #loc107])
#loc456 = loc(fused[#loc127, #loc128])
#loc457 = loc(fused[#loc129, #loc130])
#loc458 = loc(fused[#loc131, #loc128])
#loc459 = loc(fused[#loc141, #loc140])
#loc460 = loc(fused[#loc146, #loc145])
#loc461 = loc(fused[#loc147, #loc148])
#loc462 = loc(fused[#loc149, #loc150])
#loc463 = loc(fused[#loc151, #loc152, #loc153, #loc148])
#loc464 = loc(fused[#loc155, #loc156])
#loc465 = loc(fused[#loc160, #loc161])
#loc466 = loc(fused[#loc162, #loc163])
#loc467 = loc(fused[#loc164, #loc165])
#loc468 = loc(fused[#loc166, #loc167])
#loc469 = loc(fused[#loc168, #loc165])
#loc470 = loc(fused[#loc179, #loc180])
#loc471 = loc(fused[#loc181, #loc182])
#loc472 = loc(fused[#loc183, #loc184])
#loc473 = loc(fused[#loc185, #loc186])
#loc474 = loc(fused[#loc187, #loc188])
#loc475 = loc(fused[#loc190, #loc189])
#loc476 = loc(fused[#loc191, #loc192])
#loc477 = loc(fused[#loc193, #loc194])
#loc478 = loc(fused[#loc195, #loc192])
#loc479 = loc(fused[#loc196, #loc197])
#loc480 = loc(fused[#loc200, #loc201])
#loc481 = loc(fused[#loc199, #loc201])
#loc482 = loc(fused[#loc198, #loc182])
#loc483 = loc(fused[#loc202, #loc203])
#loc484 = loc(fused[#loc204, #loc205])
#loc485 = loc(fused[#loc206, #loc203])
#loc486 = loc(fused[#loc216, #loc215])
#loc487 = loc(fused[#loc221, #loc220])
#loc488 = loc(fused[#loc222, #loc223])
#loc489 = loc(fused[#loc224, #loc225])
#loc490 = loc(fused[#loc226, #loc223])
#loc491 = loc(fused[#loc227, #loc228])
#loc492 = loc(fused[#loc232, #loc233])
#loc493 = loc(fused[#loc234, #loc235])
#loc494 = loc(fused[#loc236, #loc237])
#loc495 = loc(fused[#loc238, #loc239])
#loc496 = loc(fused[#loc240, #loc237])
#loc497 = loc(fused[#loc251, #loc252])
#loc498 = loc(fused[#loc253, #loc254])
#loc499 = loc(fused[#loc255, #loc256])
#loc500 = loc(fused[#loc257, #loc258])
#loc501 = loc(fused[#loc259, #loc260])
#loc502 = loc(fused[#loc261, #loc262])
#loc503 = loc(fused[#loc264, #loc263])
#loc504 = loc(fused[#loc265, #loc266])
#loc505 = loc(fused[#loc267, #loc268])
#loc506 = loc(fused[#loc269, #loc270, #loc271, #loc266])
#loc507 = loc(fused[#loc274, #loc275])
#loc508 = loc(fused[#loc278, #loc279])
#loc509 = loc(fused[#loc277, #loc279])
#loc510 = loc(fused[#loc276, #loc256])
#loc511 = loc(fused[#loc280, #loc281])
#loc512 = loc(fused[#loc282, #loc283])
#loc513 = loc(fused[#loc284, #loc281])
#loc514 = loc(fused[#loc292, #loc293])
#loc515 = loc(fused[#loc295, #loc294])
#loc516 = loc(fused[#loc300, #loc299])
#loc517 = loc(fused[#loc301, #loc302])
#loc518 = loc(fused[#loc303, #loc304])
#loc519 = loc(fused[#loc305, #loc302])
#loc520 = loc(fused[#loc306, #loc307])
#loc521 = loc(fused[#loc311, #loc312])
#loc522 = loc(fused[#loc314, #loc315])
#loc523 = loc(fused[#loc316, #loc317])
#loc524 = loc(fused[#loc318, #loc315])
#loc525 = loc(fused[#loc329, #loc330])
#loc526 = loc(fused[#loc331, #loc332])
#loc527 = loc(fused[#loc333, #loc334])
#loc528 = loc(fused[#loc335, #loc336])
#loc529 = loc(fused[#loc337, #loc338])
#loc530 = loc(fused[#loc340, #loc339])
#loc531 = loc(fused[#loc341, #loc342])
#loc532 = loc(fused[#loc343, #loc344])
#loc533 = loc(fused[#loc345, #loc342])
#loc534 = loc(fused[#loc346, #loc347])
#loc535 = loc(fused[#loc350, #loc351])
#loc536 = loc(fused[#loc349, #loc351])
#loc537 = loc(fused[#loc348, #loc332])
#loc538 = loc(fused[#loc352, #loc353])
#loc539 = loc(fused[#loc354, #loc355])
#loc540 = loc(fused[#loc356, #loc353])
#loc541 = loc(fused[#loc364, #loc365])
#loc542 = loc(fused[#loc367, #loc366])
#loc543 = loc(fused[#loc372, #loc371])
#loc544 = loc(fused[#loc373, #loc374])
#loc545 = loc(fused[#loc375, #loc376])
#loc546 = loc(fused[#loc377, #loc374])
#loc547 = loc(fused[#loc378, #loc379])
#loc548 = loc(fused[#loc383, #loc384])
#loc549 = loc(fused[#loc386, #loc387])
#loc550 = loc(fused[#loc388, #loc389])
#loc551 = loc(fused[#loc390, #loc387])
