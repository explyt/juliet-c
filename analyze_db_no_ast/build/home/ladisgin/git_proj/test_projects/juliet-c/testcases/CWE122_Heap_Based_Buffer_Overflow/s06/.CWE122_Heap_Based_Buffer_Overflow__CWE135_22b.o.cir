!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":27:59)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":27:66)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":53:64)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":53:71)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":75:64)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":75:71)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":92:63)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":92:70)
#loc190 = loc(fused[#loc17, #loc18])
#loc205 = loc(fused[#loc62, #loc63])
#loc218 = loc(fused[#loc105, #loc106])
#loc232 = loc(fused[#loc147, #loc148])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc182)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc183)
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc184)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc185)
  cir.func private  @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc186)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc188)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc17, #loc18])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc190)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc19)
    cir.scope {
      %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal : !cir.ptr<!s32i> loc(#loc182)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc22)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc194)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc195)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc30)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc30)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc194)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc32)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc33)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc196)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc197)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc195)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !s32i loc(#loc199)
            %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc41)
            cir.if %29 {
              %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc43)
              %31 = cir.const #cir.int<1> : !s32i loc(#loc44)
              %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc45)
              cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc43)
            } loc(#loc200)
          } loc(#loc198)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc46)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc47)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc47)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc48)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc49)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc49)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc50)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc51)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc52)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc51)
        } loc(#loc193)
      } loc(#loc192)
    } loc(#loc191)
    cir.return loc(#loc16)
  } loc(#loc189)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc201)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc55)
  cir.func private  @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc202)
  cir.func private  @printWLine(!cir.ptr<!s32i>) loc(#loc203)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(%arg0: !cir.ptr<!void> loc(fused[#loc62, #loc63])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc205)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc64)
    cir.scope {
      %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc201)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc67)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc55)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc55)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      } else {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc209)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc210)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc78)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc78)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc209)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc80)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc81)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc82)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc82)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc211)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc212)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc210)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !s32i loc(#loc214)
            %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc89)
            cir.if %29 {
              %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc91)
              %31 = cir.const #cir.int<1> : !s32i loc(#loc92)
              %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc93)
              cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc91)
            } loc(#loc215)
          } loc(#loc213)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc94)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc94)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc95)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc95)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc96)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc97)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc98)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc99)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc100)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
        } loc(#loc208)
      } loc(#loc207)
    } loc(#loc206)
    cir.return loc(#loc61)
  } loc(#loc204)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc216)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(%arg0: !cir.ptr<!void> loc(fused[#loc105, #loc106])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc218)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc107)
    cir.scope {
      %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc216)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc110)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc222)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc223)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc118)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc119)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc119)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc118)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc222)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc120)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc121)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc122)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc122)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc224)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc225)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc120)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc223)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc127)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc128)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !s32i loc(#loc227)
            %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc129)
            cir.if %29 {
              %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc131)
              %31 = cir.const #cir.int<1> : !s32i loc(#loc132)
              %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc133)
              cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc131)
            } loc(#loc228)
          } loc(#loc226)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc134)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc135)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc135)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc136)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc137)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc137)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc138)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc139)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc140)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc139)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.return loc(#loc104)
  } loc(#loc217)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc229)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc230)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc147, #loc148])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc232)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc149)
    cir.scope {
      %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc229)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc152)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc152)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc236)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc237)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc160)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc161)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc160)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc236)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc162)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc163)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc164)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc164)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc238)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc165)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc165)
          %17 = cir.call @calloc(%14, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc162)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc237)
          cir.scope {
            %28 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc168)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc169)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !s32i loc(#loc240)
            %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc170)
            cir.if %31 {
              %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc172)
              %33 = cir.const #cir.int<1> : !s32i loc(#loc173)
              %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc174)
              cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc172)
            } loc(#loc241)
          } loc(#loc239)
          %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc175)
          %19 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc176)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc176)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc177)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc177)
          %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc175)
          %24 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc178)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc178)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc179)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc180)
          %27 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc181)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc180)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc233)
    cir.return loc(#loc146)
  } loc(#loc231)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":25:12)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/stdlib.h":675:1)
#loc6 = loc("/usr/include/stdlib.h":676:14)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/wchar.h":98:1)
#loc10 = loc("/usr/include/wchar.h":100:14)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":27:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":41:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":28:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":29:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":40:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":29:8)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":30:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":31:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":39:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":33:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":33:49)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:68)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":33:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":33:45)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:42)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:50)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:53)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:67)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:41)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:25)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:31)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:32)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:38)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:37)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":36:26)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":36:32)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":36:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":37:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":37:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":38:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":38:18)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":48:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":48:12)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":58:19)
#loc56 = loc("/usr/include/wchar.h":247:1)
#loc57 = loc("/usr/include/wchar.h":247:51)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":53:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":72:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":54:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":55:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":71:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":55:8)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":56:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":59:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":61:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":58:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":62:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":70:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":64:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":64:52)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:68)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":64:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":64:48)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:35)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:42)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:50)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:53)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:67)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:41)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:25)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:31)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:32)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:38)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:37)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":67:26)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":67:32)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":67:19)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":68:35)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":68:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":69:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":69:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":49:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":49:12)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":75:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":89:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":76:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":77:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":88:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":77:8)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":78:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":79:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":87:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":81:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":81:52)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:68)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":81:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":81:48)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:35)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:42)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:50)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:53)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:67)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:41)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:17)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:25)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:22)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:31)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:32)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:38)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:37)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":84:26)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":84:32)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":84:19)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":85:35)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":85:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":86:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":86:18)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":50:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":50:12)
#loc143 = loc("/usr/include/string.h":141:1)
#loc144 = loc("/usr/include/string.h":142:14)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":92:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":106:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":93:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":94:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":105:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":94:8)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":95:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":96:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":104:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":98:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":98:49)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:54)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":98:30)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":98:45)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:35)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:42)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:50)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:53)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:41)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:17)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:25)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:22)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:31)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:32)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:38)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:37)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":101:19)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":101:26)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":101:32)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":102:31)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":102:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":103:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":103:18)
#loc182 = loc(fused[#loc1, #loc2])
#loc183 = loc(fused[#loc3, #loc4])
#loc184 = loc(fused[#loc5, #loc6])
#loc185 = loc(fused[#loc7, #loc8])
#loc186 = loc(fused[#loc9, #loc10])
#loc187 = loc(fused[#loc11, #loc12])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc15, #loc16])
#loc191 = loc(fused[#loc20, #loc21])
#loc192 = loc(fused[#loc23, #loc21])
#loc193 = loc(fused[#loc24, #loc25])
#loc194 = loc(fused[#loc26, #loc27])
#loc195 = loc(fused[#loc28, #loc29])
#loc196 = loc(fused[#loc33, #loc34])
#loc197 = loc(fused[#loc35, #loc36])
#loc198 = loc(fused[#loc37, #loc38])
#loc199 = loc(fused[#loc39, #loc40])
#loc200 = loc(fused[#loc42, #loc38])
#loc201 = loc(fused[#loc53, #loc54])
#loc202 = loc(fused[#loc56, #loc57])
#loc203 = loc(fused[#loc58, #loc59])
#loc204 = loc(fused[#loc60, #loc61])
#loc206 = loc(fused[#loc65, #loc66])
#loc207 = loc(fused[#loc68, #loc69, #loc70, #loc66])
#loc208 = loc(fused[#loc72, #loc73])
#loc209 = loc(fused[#loc74, #loc75])
#loc210 = loc(fused[#loc76, #loc77])
#loc211 = loc(fused[#loc81, #loc82])
#loc212 = loc(fused[#loc83, #loc84])
#loc213 = loc(fused[#loc85, #loc86])
#loc214 = loc(fused[#loc87, #loc88])
#loc215 = loc(fused[#loc90, #loc86])
#loc216 = loc(fused[#loc101, #loc102])
#loc217 = loc(fused[#loc103, #loc104])
#loc219 = loc(fused[#loc108, #loc109])
#loc220 = loc(fused[#loc111, #loc109])
#loc221 = loc(fused[#loc112, #loc113])
#loc222 = loc(fused[#loc114, #loc115])
#loc223 = loc(fused[#loc116, #loc117])
#loc224 = loc(fused[#loc121, #loc122])
#loc225 = loc(fused[#loc123, #loc124])
#loc226 = loc(fused[#loc125, #loc126])
#loc227 = loc(fused[#loc127, #loc128])
#loc228 = loc(fused[#loc130, #loc126])
#loc229 = loc(fused[#loc141, #loc142])
#loc230 = loc(fused[#loc143, #loc144])
#loc231 = loc(fused[#loc145, #loc146])
#loc233 = loc(fused[#loc150, #loc151])
#loc234 = loc(fused[#loc153, #loc151])
#loc235 = loc(fused[#loc154, #loc155])
#loc236 = loc(fused[#loc156, #loc157])
#loc237 = loc(fused[#loc158, #loc159])
#loc238 = loc(fused[#loc163, #loc164])
#loc239 = loc(fused[#loc166, #loc167])
#loc240 = loc(fused[#loc168, #loc169])
#loc241 = loc(fused[#loc171, #loc167])
