!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc140)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc141)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc142)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc143)
  cir.func no_proto private @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_badSink(...) loc(#loc144)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc147)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc149)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc22)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc22)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc150)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc151)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
      cir.scope {
        %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc154)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc31)
          %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc32)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
        } loc(#loc155)
      } loc(#loc153)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc34)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc35)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc35)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc35)
      %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc40)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc40)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc42)
      cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc156)
      %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc157)
    } loc(#loc148)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData : !cir.ptr<!cir.ptr<!void>> loc(#loc143)
    cir.store %2, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc158)
    %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_badSink : !cir.ptr<!cir.func<(...)>> loc(#loc159)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc159)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc12)
  } loc(#loc145)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc161)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc160)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc163)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc164)
  cir.func no_proto private @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodG2BSink(...) loc(#loc165)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc168)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc170)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc71)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc72)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc72)
      %10 = cir.const #cir.int<1> : !u64i loc(#loc171)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc172)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
      cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
      cir.scope {
        %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
        %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
        %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc78)
        %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc175)
        cir.if %33 {
          %34 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc80)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc82)
          cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc80)
        } loc(#loc176)
      } loc(#loc174)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
      %16 = cir.const #cir.int<65> : !s32i loc(#loc84)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc85)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc86)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc85)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc85)
      cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc177)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc89)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc89)
      %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
      %24 = cir.const #cir.int<50> : !s32i loc(#loc91)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc92)
      %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc91)
      %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc93)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc178)
      %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc94)
      cir.store %29, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc179)
    } loc(#loc169)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc96)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData : !cir.ptr<!cir.ptr<!void>> loc(#loc163)
    cir.store %2, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc180)
    %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodG2BSink : !cir.ptr<!cir.func<(...)>> loc(#loc181)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc181)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc98)
    cir.return loc(#loc62)
  } loc(#loc166)
  cir.func no_proto private @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodB2GSink(...) loc(#loc182)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc184)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc106)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc185)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc187)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc112)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc113)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc113)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc188)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc189)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc112)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc190)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
      cir.scope {
        %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc119)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc119)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc192)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc121)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc122)
          %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc123)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc121)
        } loc(#loc193)
      } loc(#loc191)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc125)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc126)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc126)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc126)
      %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc128)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc129)
      %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc131)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc132)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc131)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc133)
      cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc194)
      %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc134)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc195)
    } loc(#loc186)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData : !cir.ptr<!cir.ptr<!void>> loc(#loc164)
    cir.store %2, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc196)
    %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodB2GSink : !cir.ptr<!cir.func<(...)>> loc(#loc197)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc197)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc138)
    cir.return loc(#loc103)
  } loc(#loc183)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":22:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":22:8)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":29:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":29:60)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":31:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":45:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":33:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":34:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":34:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":35:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":42:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:71)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:46)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:53)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:56)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:70)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:36)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:42)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:38)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:41)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:26)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":41:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":41:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":43:60)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":43:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":44:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":44:59)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":89:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":93:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":91:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":91:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":92:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":92:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":23:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":23:8)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":24:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":24:8)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":52:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":52:64)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":56:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":70:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":58:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":58:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":59:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":59:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":60:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":67:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:63)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:41)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:48)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:51)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:62)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:47)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:31)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:37)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:44)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:43)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:16)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:32)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:37)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:40)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:41)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:32)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:24)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:28)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":66:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":66:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":68:64)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":68:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":69:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":69:63)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":53:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":53:64)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":73:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":87:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":75:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":75:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":76:12)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":76:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":77:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":84:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:71)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:46)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:53)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:56)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:70)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:46)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:30)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:36)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:37)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:43)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:42)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:17)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:32)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:38)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:41)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:31)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:23)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:26)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:27)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":83:24)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":83:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":85:64)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":85:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":86:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":86:63)
#loc140 = loc(fused[#loc1, #loc2])
#loc141 = loc(fused[#loc3, #loc4])
#loc142 = loc(fused[#loc5, #loc6])
#loc143 = loc(fused[#loc7, #loc8])
#loc144 = loc(fused[#loc9, #loc10])
#loc145 = loc(fused[#loc11, #loc12])
#loc146 = loc(fused[#loc13, #loc14])
#loc147 = loc(fused[#loc16, #loc15])
#loc148 = loc(fused[#loc17, #loc18])
#loc149 = loc(fused[#loc19, #loc20])
#loc150 = loc(fused[#loc23, #loc24])
#loc151 = loc(fused[#loc22, #loc24])
#loc152 = loc(fused[#loc21, #loc20])
#loc153 = loc(fused[#loc25, #loc26])
#loc154 = loc(fused[#loc27, #loc28])
#loc155 = loc(fused[#loc29, #loc26])
#loc156 = loc(fused[#loc39, #loc38])
#loc157 = loc(fused[#loc44, #loc43])
#loc158 = loc(fused[#loc46, #loc45])
#loc159 = loc(fused[#loc47, #loc48])
#loc160 = loc(fused[#loc49, #loc50])
#loc161 = loc(fused[#loc51, #loc52])
#loc162 = loc(fused[#loc53, #loc54])
#loc163 = loc(fused[#loc55, #loc56])
#loc164 = loc(fused[#loc57, #loc58])
#loc165 = loc(fused[#loc59, #loc60])
#loc166 = loc(fused[#loc61, #loc62])
#loc167 = loc(fused[#loc63, #loc64])
#loc168 = loc(fused[#loc66, #loc65])
#loc169 = loc(fused[#loc67, #loc68])
#loc170 = loc(fused[#loc69, #loc70])
#loc171 = loc(fused[#loc73, #loc74])
#loc172 = loc(fused[#loc72, #loc74])
#loc173 = loc(fused[#loc71, #loc70])
#loc174 = loc(fused[#loc75, #loc76])
#loc175 = loc(fused[#loc77, #loc78])
#loc176 = loc(fused[#loc79, #loc76])
#loc177 = loc(fused[#loc87, #loc88])
#loc178 = loc(fused[#loc90, #loc89])
#loc179 = loc(fused[#loc95, #loc94])
#loc180 = loc(fused[#loc97, #loc96])
#loc181 = loc(fused[#loc98, #loc99])
#loc182 = loc(fused[#loc100, #loc101])
#loc183 = loc(fused[#loc102, #loc103])
#loc184 = loc(fused[#loc104, #loc105])
#loc185 = loc(fused[#loc107, #loc106])
#loc186 = loc(fused[#loc108, #loc109])
#loc187 = loc(fused[#loc110, #loc111])
#loc188 = loc(fused[#loc114, #loc115])
#loc189 = loc(fused[#loc113, #loc115])
#loc190 = loc(fused[#loc112, #loc111])
#loc191 = loc(fused[#loc116, #loc117])
#loc192 = loc(fused[#loc118, #loc119])
#loc193 = loc(fused[#loc120, #loc117])
#loc194 = loc(fused[#loc130, #loc129])
#loc195 = loc(fused[#loc135, #loc134])
#loc196 = loc(fused[#loc137, #loc136])
#loc197 = loc(fused[#loc138, #loc139])
