!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc3 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":24:57)
#loc4 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":24:112)
#loc5 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":24:117)
#loc19 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":31:57)
!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G = !cir.record<class "CWE191_Integer_Underflow__char_min_multiply_84::CWE191_Integer_Underflow__char_min_multiply_84_goodB2G" {!s8i} #cir.record.decl.ast>
#loc42 = loc(fused[#loc4, #loc5])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func @_ZN46CWE191_Integer_Underflow__char_min_multiply_8454CWE191_Integer_Underflow__char_min_multiply_84_goodB2GC2Ec(%arg0: !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G> loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":24:57), %arg1: !s8i loc(fused[#loc4, #loc5])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc3)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc42)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>> loc(#loc6)
    cir.store %arg1, %1 : !s8i, !cir.ptr<!s8i> loc(#loc6)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>>, !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G> loc(#loc3)
    %3 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc7)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc8)
    cir.store %3, %4 : !s8i, !cir.ptr<!s8i> loc(#loc43)
    %5 = cir.const #cir.int<127> : !s32i loc(#loc10)
    %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc10)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc10)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc10)
    %10 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc8)
    cir.store %9, %10 : !s8i, !cir.ptr<!s8i> loc(#loc44)
    cir.return loc(#loc2)
  } loc(#loc41)
  cir.func private @_ZN46CWE191_Integer_Underflow__char_min_multiply_8454CWE191_Integer_Underflow__char_min_multiply_84_goodB2GC1Ec(!cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>, !s8i) alias(@_ZN46CWE191_Integer_Underflow__char_min_multiply_8454CWE191_Integer_Underflow__char_min_multiply_84_goodB2GC2Ec) loc(#loc41)
  cir.func private @printHexCharLine(!s8i) loc(#loc45)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc16)
  cir.func @_ZN46CWE191_Integer_Underflow__char_min_multiply_8454CWE191_Integer_Underflow__char_min_multiply_84_goodB2GD2Ev(%arg0: !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G> loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":31:57)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc19)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>> loc(#loc20)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>>, !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G> loc(#loc19)
    cir.scope {
      %2 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc8)
      %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc23)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc23)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc24)
      %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc49)
      cir.if %6 {
        cir.scope {
          %7 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc8)
          %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc28)
          %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc28)
          %10 = cir.const #cir.int<127> : !s32i loc(#loc29)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc29)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc29)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc30)
          %15 = cir.binop(div, %13, %14) : !s32i loc(#loc52)
          %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc53)
          cir.if %16 {
            %17 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc55)
            %18 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G> -> !cir.ptr<!s8i> loc(#loc8)
            %19 = cir.load %18 : !cir.ptr<!s8i>, !s8i loc(#loc37)
            %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc37)
            %21 = cir.const #cir.int<2> : !s32i loc(#loc36)
            %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc37)
            %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc37)
            cir.store %23, %17 : !s8i, !cir.ptr<!s8i> loc(#loc55)
            %24 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc38)
            cir.call @printHexCharLine(%24) : (!s8i) -> () loc(#loc39)
          } else {
            %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc16)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc16)
            cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc40)
          } loc(#loc54)
        } loc(#loc51)
      } loc(#loc50)
    } loc(#loc48)
    cir.return loc(#loc18)
  } loc(#loc47)
  cir.func private @_ZN46CWE191_Integer_Underflow__char_min_multiply_8454CWE191_Integer_Underflow__char_min_multiply_84_goodB2GD1Ev(!cir.ptr<!ty_CWE191_Integer_Underflow__char_min_multiply_843A3ACWE191_Integer_Underflow__char_min_multiply_84_goodB2G>) alias(@_ZN46CWE191_Integer_Underflow__char_min_multiply_8454CWE191_Integer_Underflow__char_min_multiply_84_goodB2GD2Ev) loc(#loc47)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":0:0)
#loc1 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":24:1)
#loc2 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":29:1)
#loc6 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":25:1)
#loc7 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":26:12)
#loc8 = loc("./CWE191_Integer_Underflow__char_min_multiply_84.h":56:10)
#loc9 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":26:5)
#loc10 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":28:12)
#loc11 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":28:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc16 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":43:23)
#loc17 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":31:1)
#loc18 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":46:1)
#loc20 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":32:1)
#loc21 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":33:5)
#loc22 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":45:5)
#loc23 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":33:8)
#loc24 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":33:15)
#loc25 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":34:5)
#loc26 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":36:9)
#loc27 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":44:9)
#loc28 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":36:13)
#loc29 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":36:21)
#loc30 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":36:30)
#loc31 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":36:31)
#loc32 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":37:9)
#loc33 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":40:9)
#loc34 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":42:9)
#loc35 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":38:13)
#loc36 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":38:34)
#loc37 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":38:27)
#loc38 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":39:30)
#loc39 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":39:13)
#loc40 = loc("CWE191_Integer_Underflow__char_min_multiply_84_goodB2G.cpp":43:13)
#loc41 = loc(fused[#loc1, #loc2])
#loc43 = loc(fused[#loc9, #loc7])
#loc44 = loc(fused[#loc11, #loc10])
#loc45 = loc(fused[#loc12, #loc13])
#loc46 = loc(fused[#loc14, #loc15])
#loc47 = loc(fused[#loc17, #loc18])
#loc48 = loc(fused[#loc21, #loc22])
#loc49 = loc(fused[#loc23, #loc24])
#loc50 = loc(fused[#loc25, #loc22])
#loc51 = loc(fused[#loc26, #loc27])
#loc52 = loc(fused[#loc29, #loc30])
#loc53 = loc(fused[#loc28, #loc31])
#loc54 = loc(fused[#loc32, #loc33, #loc34, #loc27])
#loc55 = loc(fused[#loc35, #loc36])
