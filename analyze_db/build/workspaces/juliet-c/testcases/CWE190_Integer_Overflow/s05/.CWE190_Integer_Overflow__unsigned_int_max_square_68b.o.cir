!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_max_square_68_badData : !u32i {alignment = 4 : i64} loc(#loc55)
  cir.func private @printUnsignedLine(!u32i) loc(#loc56)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_68b_badSink() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc58)
    %1 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_68_badData : !cir.ptr<!u32i> loc(#loc55)
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc8)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc58)
    cir.scope {
      %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc60)
      %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc13)
      %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc12)
      %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc61)
      cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc60)
      %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc14)
      cir.call @printUnsignedLine(%7) : (!u32i) -> () loc(#loc15)
    } loc(#loc59)
    cir.return loc(#loc6)
  } loc(#loc57)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_max_square_68_goodG2BData : !u32i {alignment = 4 : i64} loc(#loc62)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_68b_goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc64)
    %1 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_68_goodG2BData : !cir.ptr<!u32i> loc(#loc62)
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc21)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc64)
    cir.scope {
      %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc66)
      %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc26)
      %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc25)
      %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc67)
      cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc66)
      %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc27)
      cir.call @printUnsignedLine(%7) : (!u32i) -> () loc(#loc28)
    } loc(#loc65)
    cir.return loc(#loc19)
  } loc(#loc63)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_max_square_68_goodB2GData : !u32i {alignment = 4 : i64} loc(#loc68)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc31)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_68b_goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc71)
    %1 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_68_goodB2GData : !cir.ptr<!u32i> loc(#loc68)
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc38)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc71)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc41)
      %4 = cir.cast(integral, %3 : !u32i), !s64i loc(#loc41)
      %5 = cir.cast(integral, %4 : !s64i), !s32i loc(#loc41)
      %6 = cir.abs %5 poison : !s32i loc(#loc42)
      %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc42)
      %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc43)
      %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc44)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc44)
      %11 = cir.const #cir.int<2> : !u32i loc(#loc44)
      %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc44)
      %13 = cir.const #cir.int<1> : !u32i loc(#loc44)
      %14 = cir.binop(add, %12, %13) : !u32i loc(#loc44)
      %15 = cir.cast(int_to_float, %14 : !u32i), !cir.double loc(#loc44)
      %16 = cir.call @sqrt(%15) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc43)
      %17 = cir.cast(float_to_int, %16 : !cir.double), !s64i loc(#loc43)
      %18 = cir.cmp(lt, %7, %17) : !s64i, !cir.bool loc(#loc73)
      cir.if %18 {
        %19 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc75)
        %20 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc51)
        %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc50)
        %22 = cir.binop(mul, %20, %21) : !u32i loc(#loc76)
        cir.store %22, %19 : !u32i, !cir.ptr<!u32i> loc(#loc75)
        %23 = cir.load %19 : !cir.ptr<!u32i>, !u32i loc(#loc52)
        cir.call @printUnsignedLine(%23) : (!u32i) -> () loc(#loc53)
      } else {
        %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc34)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc34)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc54)
      } loc(#loc74)
    } loc(#loc72)
    cir.return loc(#loc36)
  } loc(#loc70)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":22:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":22:21)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":28:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":36:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":30:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":30:25)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":31:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":35:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":33:9)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":33:38)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":33:31)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":34:27)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":34:9)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":23:1)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":23:21)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":43:1)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":51:1)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":45:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":45:25)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":46:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":50:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":48:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":48:38)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":48:31)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":49:27)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":49:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":24:1)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":24:21)
#loc31 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":65:19)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":54:1)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":67:1)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":56:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":56:25)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":58:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":66:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":58:19)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":58:9)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":58:33)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":58:46)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":58:54)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":59:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":62:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":64:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":60:9)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":60:38)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":60:31)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":61:27)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":61:9)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_68b.c":65:9)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc57 = loc(fused[#loc5, #loc6])
#loc58 = loc(fused[#loc7, #loc8])
#loc59 = loc(fused[#loc9, #loc10])
#loc60 = loc(fused[#loc11, #loc12])
#loc61 = loc(fused[#loc13, #loc12])
#loc62 = loc(fused[#loc16, #loc17])
#loc63 = loc(fused[#loc18, #loc19])
#loc64 = loc(fused[#loc20, #loc21])
#loc65 = loc(fused[#loc22, #loc23])
#loc66 = loc(fused[#loc24, #loc25])
#loc67 = loc(fused[#loc26, #loc25])
#loc68 = loc(fused[#loc29, #loc30])
#loc69 = loc(fused[#loc32, #loc33])
#loc70 = loc(fused[#loc35, #loc36])
#loc71 = loc(fused[#loc37, #loc38])
#loc72 = loc(fused[#loc39, #loc40])
#loc73 = loc(fused[#loc42, #loc45])
#loc74 = loc(fused[#loc46, #loc47, #loc48, #loc40])
#loc75 = loc(fused[#loc49, #loc50])
#loc76 = loc(fused[#loc51, #loc50])
