!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":139:10)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":139:14)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":139:20)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":139:32)
#loc248 = loc(fused[#loc77, #loc78])
#loc249 = loc(fused[#loc79, #loc80])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc219)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc220)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc223)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc11)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc226)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc18)
        %8 = cir.const #cir.int<65> : !s32i loc(#loc19)
        %9 = cir.const #cir.int<100> : !s32i loc(#loc20)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc20)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc20)
        cir.libc.memset %12 bytes from %7 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc228)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc24)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
        %16 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc26)
        %19 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc28)
        cir.store %14, %19 : !s8i, !cir.ptr<!s8i> loc(#loc229)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc231)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc232)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc233)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc231)
      cir.store %6, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc231)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc36)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc36)
      cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc234)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc42)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc42)
        cir.store %19, %4 : !u64i, !cir.ptr<!u64i> loc(#loc236)
        cir.for : cond {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc44)
          %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc45)
          %22 = cir.cmp(lt, %20, %21) : !u64i, !cir.bool loc(#loc237)
          cir.condition(%22) loc(#loc46)
        } body {
          cir.scope {
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
            %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc49)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !u64i), !cir.ptr<!s8i> loc(#loc50)
            %23 = cir.load %22 : !cir.ptr<!s8i>, !s8i loc(#loc48)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %25 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc52)
            %26 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc52)
            cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc239)
          } loc(#loc238)
          cir.yield loc(#loc41)
        } step {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc53)
          %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc54)
          cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc240)
          cir.yield loc(#loc235)
        } loc(#loc235)
      } loc(#loc235)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc55)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc55)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc56)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc56)
      %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc58)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc58)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc241)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    } loc(#loc230)
    cir.return loc(#loc6)
  } loc(#loc221)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc242)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc245)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc74)
  cir.func @main(%arg0: !s32i loc(fused[#loc77, #loc78]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc249)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc81)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc82)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc83)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc83)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc84)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08_good() : () -> () loc(#loc86)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc73)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08_bad() : () -> () loc(#loc90)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc74)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc252)
    cir.return %17 : !s32i loc(#loc252)
  } loc(#loc247)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc97)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc254)
    cir.return %2 : !s32i loc(#loc254)
  } loc(#loc253)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc256)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc257)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc106)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc258)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc110)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc110)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc115)
      } else {
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc116)
        %8 = cir.const #cir.int<65> : !s32i loc(#loc117)
        %9 = cir.const #cir.int<50> : !s32i loc(#loc118)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc118)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc118)
        cir.libc.memset %12 bytes from %7 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc262)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc122)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc122)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc124)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc125)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc124)
        %19 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc126)
        cir.store %14, %19 : !s8i, !cir.ptr<!s8i> loc(#loc263)
      } loc(#loc261)
    } loc(#loc259)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc265)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc266)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc267)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc265)
      cir.store %6, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc265)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc134)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc134)
      cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc268)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc140)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc140)
        cir.store %19, %4 : !u64i, !cir.ptr<!u64i> loc(#loc270)
        cir.for : cond {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc142)
          %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc143)
          %22 = cir.cmp(lt, %20, %21) : !u64i, !cir.bool loc(#loc271)
          cir.condition(%22) loc(#loc144)
        } body {
          cir.scope {
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
            %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc147)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !u64i), !cir.ptr<!s8i> loc(#loc148)
            %23 = cir.load %22 : !cir.ptr<!s8i>, !s8i loc(#loc146)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc149)
            %25 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc150)
            %26 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc150)
            cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc273)
          } loc(#loc272)
          cir.yield loc(#loc139)
        } step {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc151)
          %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc152)
          cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc274)
          cir.yield loc(#loc269)
        } loc(#loc269)
      } loc(#loc269)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc153)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc153)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc154)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc155)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc154)
      %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc156)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc156)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc275)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
      cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    } loc(#loc264)
    cir.return loc(#loc101)
  } loc(#loc255)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc161)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc277)
    cir.return %2 : !s32i loc(#loc277)
  } loc(#loc276)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc279)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc280)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc169)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc281)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc283)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc173)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc173)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc176)
        %8 = cir.const #cir.int<65> : !s32i loc(#loc177)
        %9 = cir.const #cir.int<50> : !s32i loc(#loc178)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc179)
        %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc178)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc178)
        cir.libc.memset %12 bytes from %7 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc285)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc182)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc182)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc183)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc184)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc185)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc184)
        %19 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc186)
        cir.store %14, %19 : !s8i, !cir.ptr<!s8i> loc(#loc286)
      } loc(#loc284)
    } loc(#loc282)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc288)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc289)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc290)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc288)
      cir.store %6, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc288)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc194)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc195)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc194)
      cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc291)
      cir.scope {
        %18 = cir.const #cir.int<0> : !s32i loc(#loc200)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc200)
        cir.store %19, %4 : !u64i, !cir.ptr<!u64i> loc(#loc293)
        cir.for : cond {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc202)
          %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc203)
          %22 = cir.cmp(lt, %20, %21) : !u64i, !cir.bool loc(#loc294)
          cir.condition(%22) loc(#loc204)
        } body {
          cir.scope {
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc206)
            %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc207)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !u64i), !cir.ptr<!s8i> loc(#loc208)
            %23 = cir.load %22 : !cir.ptr<!s8i>, !s8i loc(#loc206)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc209)
            %25 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc210)
            %26 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc210)
            cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc296)
          } loc(#loc295)
          cir.yield loc(#loc199)
        } step {
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc211)
          %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc212)
          cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc297)
          cir.yield loc(#loc292)
        } loc(#loc292)
      } loc(#loc292)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc213)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc213)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc214)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc215)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc214)
      %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc216)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc216)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc298)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc217)
      cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc218)
    } loc(#loc287)
    cir.return loc(#loc164)
  } loc(#loc278)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":37:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":60:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":39:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":39:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":40:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":40:24)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":41:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":41:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":42:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":47:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":42:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":42:26)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":43:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":45:16)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":45:22)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":45:27)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":45:31)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":45:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":45:32)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":46:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":46:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":46:14)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":46:18)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":46:19)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":48:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":59:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":49:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":49:25)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":50:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":50:16)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":50:19)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":51:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":51:26)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":51:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":51:30)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":53:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":56:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":53:18)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":53:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":53:21)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":53:25)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":53:23)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":54:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":55:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":55:28)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":55:29)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":55:18)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":55:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":53:35)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":53:34)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":57:22)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":57:14)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":57:17)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":57:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":58:19)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":58:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":123:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":127:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":125:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":125:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":126:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":126:14)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":144:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":146:15)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":149:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":151:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":139:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":154:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":140:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":142:27)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":142:22)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":142:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":144:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":145:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":145:74)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":146:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":149:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":150:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":150:73)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":151:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":153:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":153:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":25:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":28:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":27:12)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":27:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":75:19)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":67:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":95:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":69:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":69:12)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":70:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":70:24)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":71:12)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":71:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":72:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":82:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":72:8)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":72:27)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":73:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":76:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":78:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":75:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":80:16)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":80:22)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":80:27)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":80:30)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":80:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":80:31)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":81:22)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":81:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":81:14)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":81:17)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":81:18)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":83:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":94:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":84:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":84:25)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":85:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":85:16)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":85:19)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":86:19)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":86:26)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":86:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":86:30)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":88:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":91:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":88:18)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":88:14)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":88:21)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":88:25)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":88:23)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":89:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":90:23)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":90:28)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":90:29)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":90:18)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":90:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":88:35)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":88:34)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":92:22)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":92:14)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":92:17)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":92:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":93:19)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":93:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":30:1)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":33:1)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":32:12)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":32:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":98:1)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":121:1)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":100:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":100:12)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":101:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":101:24)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":102:12)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":102:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":103:5)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":108:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":103:8)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":103:26)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":104:5)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":106:16)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":106:22)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":106:27)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":106:30)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":106:9)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":106:31)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":107:22)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":107:9)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":107:14)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":107:17)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":107:18)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":109:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":120:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":110:9)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":110:25)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":111:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":111:16)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":111:19)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":112:19)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":112:26)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":112:9)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":112:30)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":114:9)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":117:9)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":114:18)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":114:14)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":114:21)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":114:25)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":114:23)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":115:9)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":116:23)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":116:28)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":116:29)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":116:18)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":116:13)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":114:35)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":114:34)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":118:22)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":118:14)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":118:17)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":118:9)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":119:19)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c":119:9)
#loc219 = loc(fused[#loc1, #loc2])
#loc220 = loc(fused[#loc3, #loc4])
#loc221 = loc(fused[#loc5, #loc6])
#loc222 = loc(fused[#loc7, #loc8])
#loc223 = loc(fused[#loc9, #loc10])
#loc224 = loc(fused[#loc12, #loc11])
#loc225 = loc(fused[#loc13, #loc14])
#loc226 = loc(fused[#loc15, #loc16])
#loc227 = loc(fused[#loc17, #loc14])
#loc228 = loc(fused[#loc22, #loc23])
#loc229 = loc(fused[#loc25, #loc24])
#loc230 = loc(fused[#loc29, #loc30])
#loc231 = loc(fused[#loc31, #loc32])
#loc232 = loc(fused[#loc33, #loc34])
#loc233 = loc(fused[#loc33, #loc35])
#loc234 = loc(fused[#loc38, #loc39])
#loc235 = loc(fused[#loc40, #loc41])
#loc236 = loc(fused[#loc43, #loc42])
#loc237 = loc(fused[#loc44, #loc45])
#loc238 = loc(fused[#loc47, #loc41])
#loc239 = loc(fused[#loc52, #loc50])
#loc240 = loc(fused[#loc54, #loc53])
#loc241 = loc(fused[#loc58, #loc55])
#loc242 = loc(fused[#loc61, #loc62])
#loc243 = loc(fused[#loc63, #loc64])
#loc244 = loc(fused[#loc65, #loc66])
#loc245 = loc(fused[#loc67, #loc68])
#loc246 = loc(fused[#loc69, #loc70])
#loc247 = loc(fused[#loc75, #loc76])
#loc250 = loc(fused[#loc86, #loc87])
#loc251 = loc(fused[#loc90, #loc91])
#loc252 = loc(fused[#loc94, #loc93])
#loc253 = loc(fused[#loc95, #loc96])
#loc254 = loc(fused[#loc98, #loc97])
#loc255 = loc(fused[#loc100, #loc101])
#loc256 = loc(fused[#loc102, #loc103])
#loc257 = loc(fused[#loc104, #loc105])
#loc258 = loc(fused[#loc107, #loc106])
#loc259 = loc(fused[#loc108, #loc109])
#loc260 = loc(fused[#loc110, #loc111])
#loc261 = loc(fused[#loc112, #loc113, #loc114, #loc109])
#loc262 = loc(fused[#loc120, #loc121])
#loc263 = loc(fused[#loc123, #loc122])
#loc264 = loc(fused[#loc127, #loc128])
#loc265 = loc(fused[#loc129, #loc130])
#loc266 = loc(fused[#loc131, #loc132])
#loc267 = loc(fused[#loc131, #loc133])
#loc268 = loc(fused[#loc136, #loc137])
#loc269 = loc(fused[#loc138, #loc139])
#loc270 = loc(fused[#loc141, #loc140])
#loc271 = loc(fused[#loc142, #loc143])
#loc272 = loc(fused[#loc145, #loc139])
#loc273 = loc(fused[#loc150, #loc148])
#loc274 = loc(fused[#loc152, #loc151])
#loc275 = loc(fused[#loc156, #loc153])
#loc276 = loc(fused[#loc159, #loc160])
#loc277 = loc(fused[#loc162, #loc161])
#loc278 = loc(fused[#loc163, #loc164])
#loc279 = loc(fused[#loc165, #loc166])
#loc280 = loc(fused[#loc167, #loc168])
#loc281 = loc(fused[#loc170, #loc169])
#loc282 = loc(fused[#loc171, #loc172])
#loc283 = loc(fused[#loc173, #loc174])
#loc284 = loc(fused[#loc175, #loc172])
#loc285 = loc(fused[#loc180, #loc181])
#loc286 = loc(fused[#loc183, #loc182])
#loc287 = loc(fused[#loc187, #loc188])
#loc288 = loc(fused[#loc189, #loc190])
#loc289 = loc(fused[#loc191, #loc192])
#loc290 = loc(fused[#loc191, #loc193])
#loc291 = loc(fused[#loc196, #loc197])
#loc292 = loc(fused[#loc198, #loc199])
#loc293 = loc(fused[#loc201, #loc200])
#loc294 = loc(fused[#loc202, #loc203])
#loc295 = loc(fused[#loc205, #loc199])
#loc296 = loc(fused[#loc210, #loc208])
#loc297 = loc(fused[#loc212, #loc211])
#loc298 = loc(fused[#loc216, #loc213])
