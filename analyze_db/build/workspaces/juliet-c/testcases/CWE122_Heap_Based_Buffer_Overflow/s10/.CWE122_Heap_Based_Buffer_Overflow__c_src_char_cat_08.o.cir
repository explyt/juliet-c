!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc165)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc166)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc167)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc168)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc171)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc172)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc174)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc176)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc28)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc177)
    } loc(#loc175)
    cir.scope {
      %8 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc179)
      %9 = cir.call %8() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc31)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc31)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc35)
        %14 = cir.const #cir.int<100> : !s32i loc(#loc36)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc37)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc36)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc36)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc181)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc40)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
        %21 = cir.const #cir.int<100> : !s32i loc(#loc42)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc42)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc44)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc182)
      } loc(#loc180)
    } loc(#loc178)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc184)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc184)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc184)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc49)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc50)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc49)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc54)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc55)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc54)
    } loc(#loc183)
    cir.return loc(#loc12)
  } loc(#loc169)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc185)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc64)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    cir.return %2 : !s32i loc(#loc189)
  } loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc66)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc71)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc72)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc72)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc192)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc193)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc194)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc80)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc80)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc197)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc82)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc84)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
      } loc(#loc198)
    } loc(#loc196)
    cir.scope {
      %8 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc200)
      %9 = cir.call %8() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc87)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc87)
      cir.if %10 {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc92)
      } else {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc93)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc94)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc95)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc95)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc95)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc202)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc99)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc99)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc101)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc101)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc103)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc203)
      } loc(#loc201)
    } loc(#loc199)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc205)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc205)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc205)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc108)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc109)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc108)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc112)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc113)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc113)
    } loc(#loc204)
    cir.return loc(#loc68)
  } loc(#loc190)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc117)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    cir.return %2 : !s32i loc(#loc207)
  } loc(#loc206)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc123)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc124)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc124)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc210)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc211)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc212)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc132)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc215)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc134)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc136)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc134)
      } loc(#loc216)
    } loc(#loc214)
    cir.scope {
      %8 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc218)
      %9 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc139)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc139)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc143)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc144)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc144)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc144)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc220)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc148)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc148)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc150)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc151)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc150)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc152)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc221)
      } loc(#loc219)
    } loc(#loc217)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc223)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc223)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc223)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc157)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc158)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc157)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc161)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc162)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc163)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc162)
    } loc(#loc222)
    cir.return loc(#loc120)
  } loc(#loc208)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":149:1)
#loc6 = loc("/usr/include/string.h":150:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":37:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":55:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":39:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":39:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":40:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":40:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":40:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":40:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":40:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":40:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":41:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":41:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":41:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":41:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":41:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":41:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":41:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":41:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":42:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":47:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":42:8)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":42:26)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":43:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":45:16)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":45:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":45:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":45:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":45:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":45:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":46:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":46:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":46:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":46:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":46:19)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":48:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":54:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":49:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":49:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":51:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":51:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":51:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":52:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":52:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":53:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":53:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":108:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":112:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":110:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":110:14)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":111:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":111:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":25:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":28:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":27:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":27:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":70:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":62:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":85:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":64:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":64:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":65:20)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":65:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":65:31)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":65:42)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":65:43)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":65:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":66:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":66:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":66:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":66:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":66:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":66:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":66:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":66:29)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":67:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":77:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":67:8)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":67:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":68:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":71:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":73:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":70:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":75:16)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":75:22)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":75:27)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":75:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":75:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":75:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":76:22)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":76:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":76:14)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":76:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":76:18)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":78:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":84:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":79:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":79:25)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":81:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":81:16)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":81:22)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":82:19)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":82:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":83:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":83:14)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":30:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":33:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":32:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":32:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":88:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":106:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":90:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":90:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":91:20)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":91:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":91:31)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":91:42)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":91:43)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":91:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":92:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":92:33)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":92:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":92:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":92:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":92:24)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":92:30)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":92:29)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":93:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":98:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":93:8)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":93:26)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":94:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":96:16)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":96:22)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":96:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":96:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":96:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":96:31)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":97:22)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":97:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":97:14)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":97:17)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":97:18)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":99:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":105:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":100:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":100:25)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":102:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":102:16)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":102:22)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":103:19)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":103:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":104:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c":104:14)
#loc164 = loc(fused[#loc1, #loc2])
#loc165 = loc(fused[#loc3, #loc4])
#loc166 = loc(fused[#loc5, #loc6])
#loc167 = loc(fused[#loc7, #loc8])
#loc168 = loc(fused[#loc9, #loc10])
#loc169 = loc(fused[#loc11, #loc12])
#loc170 = loc(fused[#loc13, #loc14])
#loc171 = loc(fused[#loc17, #loc18])
#loc172 = loc(fused[#loc16, #loc18])
#loc173 = loc(fused[#loc15, #loc19])
#loc174 = loc(fused[#loc20, #loc19])
#loc175 = loc(fused[#loc21, #loc22])
#loc176 = loc(fused[#loc23, #loc24])
#loc177 = loc(fused[#loc25, #loc22])
#loc178 = loc(fused[#loc29, #loc30])
#loc179 = loc(fused[#loc31, #loc32])
#loc180 = loc(fused[#loc33, #loc30])
#loc181 = loc(fused[#loc38, #loc39])
#loc182 = loc(fused[#loc41, #loc40])
#loc183 = loc(fused[#loc45, #loc46])
#loc184 = loc(fused[#loc47, #loc48])
#loc185 = loc(fused[#loc56, #loc57])
#loc186 = loc(fused[#loc58, #loc59])
#loc187 = loc(fused[#loc60, #loc61])
#loc188 = loc(fused[#loc62, #loc63])
#loc189 = loc(fused[#loc65, #loc64])
#loc190 = loc(fused[#loc67, #loc68])
#loc191 = loc(fused[#loc69, #loc70])
#loc192 = loc(fused[#loc73, #loc74])
#loc193 = loc(fused[#loc72, #loc74])
#loc194 = loc(fused[#loc71, #loc75])
#loc195 = loc(fused[#loc76, #loc75])
#loc196 = loc(fused[#loc77, #loc78])
#loc197 = loc(fused[#loc79, #loc80])
#loc198 = loc(fused[#loc81, #loc78])
#loc199 = loc(fused[#loc85, #loc86])
#loc200 = loc(fused[#loc87, #loc88])
#loc201 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc202 = loc(fused[#loc97, #loc98])
#loc203 = loc(fused[#loc100, #loc99])
#loc204 = loc(fused[#loc104, #loc105])
#loc205 = loc(fused[#loc106, #loc107])
#loc206 = loc(fused[#loc115, #loc116])
#loc207 = loc(fused[#loc118, #loc117])
#loc208 = loc(fused[#loc119, #loc120])
#loc209 = loc(fused[#loc121, #loc122])
#loc210 = loc(fused[#loc125, #loc126])
#loc211 = loc(fused[#loc124, #loc126])
#loc212 = loc(fused[#loc123, #loc127])
#loc213 = loc(fused[#loc128, #loc127])
#loc214 = loc(fused[#loc129, #loc130])
#loc215 = loc(fused[#loc131, #loc132])
#loc216 = loc(fused[#loc133, #loc130])
#loc217 = loc(fused[#loc137, #loc138])
#loc218 = loc(fused[#loc139, #loc140])
#loc219 = loc(fused[#loc141, #loc138])
#loc220 = loc(fused[#loc146, #loc147])
#loc221 = loc(fused[#loc149, #loc148])
#loc222 = loc(fused[#loc153, #loc154])
#loc223 = loc(fused[#loc155, #loc156])
