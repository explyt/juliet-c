!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc41 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":104:10)
#loc42 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":104:14)
#loc43 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":104:20)
#loc44 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":104:32)
#loc126 = loc(fused[#loc41, #loc42])
#loc127 = loc(fused[#loc43, #loc44])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"i was 5\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc112)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc114)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc12)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc115)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc116)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<5> : !s32i loc(#loc20)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %6 ^bb5, ^bb6 loc(#loc119)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc24)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc11)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc11)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc7)
  } loc(#loc111)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc120)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc123)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc38)
  cir.func @main(%arg0: !s32i loc(fused[#loc41, #loc42]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc43, #loc44])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc40)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc45)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc46)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc47)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc47)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc48)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc35)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %8 = cir.get_global @CWE481_Assigning_Instead_of_Comparing__basic_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE481_Assigning_Instead_of_Comparing__basic_08_good() : () -> () loc(#loc50)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc37)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %13 = cir.get_global @CWE481_Assigning_Instead_of_Comparing__basic_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call @CWE481_Assigning_Instead_of_Comparing__basic_08_bad() : () -> () loc(#loc54)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc38)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.return %17 : !s32i loc(#loc130)
  } loc(#loc125)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc61)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    cir.return %2 : !s32i loc(#loc132)
  } loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc134)
    cir.br ^bb1 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc136)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc70)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc70)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc137)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb10 loc(#loc73)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc138)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.br ^bb5 loc(#loc139)
  ^bb5:  // pred: ^bb4
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc82)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc140)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc141)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc84)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb7 loc(#loc80)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc80)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc77)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc69)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc69)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc65)
  } loc(#loc133)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.return %2 : !s32i loc(#loc143)
  } loc(#loc142)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc145)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc147)
    %2 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc96)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc148)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc149)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.br ^bb4 loc(#loc150)
  ^bb4:  // pred: ^bb3
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc105)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc151)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc152)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc107)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    cir.br ^bb6 loc(#loc103)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc103)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc100)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc95)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc95)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc91)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":42:27)
#loc6 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":33:1)
#loc7 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":46:1)
#loc8 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":38:13)
#loc9 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":38:32)
#loc10 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":35:5)
#loc11 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":45:5)
#loc12 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":35:8)
#loc13 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":35:26)
#loc14 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":36:5)
#loc15 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":37:9)
#loc16 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":44:9)
#loc17 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":38:27)
#loc18 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":40:13)
#loc19 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":43:13)
#loc20 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":40:26)
#loc21 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":40:16)
#loc22 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":40:24)
#loc23 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":41:13)
#loc24 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":42:17)
#loc25 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":89:1)
#loc26 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":93:1)
#loc27 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":91:5)
#loc28 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":91:11)
#loc29 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":92:5)
#loc30 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":92:11)
#loc31 = loc("/usr/include/stdlib.h":575:1)
#loc32 = loc("/usr/include/stdlib.h":575:41)
#loc33 = loc("/usr/include/time.h":76:1)
#loc34 = loc("/usr/include/time.h":76:38)
#loc35 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":109:15)
#loc36 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":111:15)
#loc37 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":114:15)
#loc38 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":116:15)
#loc39 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":104:1)
#loc40 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":119:1)
#loc45 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":105:1)
#loc46 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":107:27)
#loc47 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":107:22)
#loc48 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":107:5)
#loc49 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":109:5)
#loc50 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":110:5)
#loc51 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":110:58)
#loc52 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":111:5)
#loc53 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":114:5)
#loc54 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":115:5)
#loc55 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":115:57)
#loc56 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":116:5)
#loc57 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":118:12)
#loc58 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":118:5)
#loc59 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":21:1)
#loc60 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":24:1)
#loc61 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":23:12)
#loc62 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":23:5)
#loc63 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":58:19)
#loc64 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":53:1)
#loc65 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":71:1)
#loc66 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":63:13)
#loc67 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":63:32)
#loc68 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":55:5)
#loc69 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":70:5)
#loc70 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":55:8)
#loc71 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":55:27)
#loc72 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":56:5)
#loc73 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":59:5)
#loc74 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":61:5)
#loc75 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":58:9)
#loc76 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":62:9)
#loc77 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":69:9)
#loc78 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":63:27)
#loc79 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":65:13)
#loc80 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":68:13)
#loc81 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":65:16)
#loc82 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":65:27)
#loc83 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":66:13)
#loc84 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":67:27)
#loc85 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":67:17)
#loc86 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":26:1)
#loc87 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":29:1)
#loc88 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":28:12)
#loc89 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":28:5)
#loc90 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":74:1)
#loc91 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":87:1)
#loc92 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":79:13)
#loc93 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":79:32)
#loc94 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":76:5)
#loc95 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":86:5)
#loc96 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":76:8)
#loc97 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":76:26)
#loc98 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":77:5)
#loc99 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":78:9)
#loc100 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":85:9)
#loc101 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":79:27)
#loc102 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":81:13)
#loc103 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":84:13)
#loc104 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":81:16)
#loc105 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":81:27)
#loc106 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":82:13)
#loc107 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":83:27)
#loc108 = loc("CWE481_Assigning_Instead_of_Comparing__basic_08.c":83:17)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc6, #loc7])
#loc112 = loc(fused[#loc8, #loc9])
#loc113 = loc(fused[#loc10, #loc11])
#loc114 = loc(fused[#loc12, #loc13])
#loc115 = loc(fused[#loc14, #loc11])
#loc116 = loc(fused[#loc15, #loc16])
#loc117 = loc(fused[#loc18, #loc19])
#loc118 = loc(fused[#loc21, #loc20])
#loc119 = loc(fused[#loc23, #loc19])
#loc120 = loc(fused[#loc25, #loc26])
#loc121 = loc(fused[#loc27, #loc28])
#loc122 = loc(fused[#loc29, #loc30])
#loc123 = loc(fused[#loc31, #loc32])
#loc124 = loc(fused[#loc33, #loc34])
#loc125 = loc(fused[#loc39, #loc40])
#loc128 = loc(fused[#loc50, #loc51])
#loc129 = loc(fused[#loc54, #loc55])
#loc130 = loc(fused[#loc58, #loc57])
#loc131 = loc(fused[#loc59, #loc60])
#loc132 = loc(fused[#loc62, #loc61])
#loc133 = loc(fused[#loc64, #loc65])
#loc134 = loc(fused[#loc66, #loc67])
#loc135 = loc(fused[#loc68, #loc69])
#loc136 = loc(fused[#loc70, #loc71])
#loc137 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc138 = loc(fused[#loc76, #loc77])
#loc139 = loc(fused[#loc79, #loc80])
#loc140 = loc(fused[#loc81, #loc82])
#loc141 = loc(fused[#loc83, #loc80])
#loc142 = loc(fused[#loc86, #loc87])
#loc143 = loc(fused[#loc89, #loc88])
#loc144 = loc(fused[#loc90, #loc91])
#loc145 = loc(fused[#loc92, #loc93])
#loc146 = loc(fused[#loc94, #loc95])
#loc147 = loc(fused[#loc96, #loc97])
#loc148 = loc(fused[#loc98, #loc95])
#loc149 = loc(fused[#loc99, #loc100])
#loc150 = loc(fused[#loc102, #loc103])
#loc151 = loc(fused[#loc104, #loc105])
#loc152 = loc(fused[#loc106, #loc103])
