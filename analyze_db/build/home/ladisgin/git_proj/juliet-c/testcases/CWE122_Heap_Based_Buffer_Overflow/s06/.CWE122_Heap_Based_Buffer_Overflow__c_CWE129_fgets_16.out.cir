!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":196:10)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":196:14)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":196:20)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":196:32)
#true = #cir.bool<true> : !cir.bool
#loc374 = loc(fused[#loc129, #loc130])
#loc375 = loc(fused[#loc131, #loc132])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc325)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc326)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc327)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc328)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc329)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc330)
  cir.func private @printIntLine(!s32i) loc(#loc331)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc332)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc334)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc28)
        cir.condition(%4) loc(#loc28)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc338)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc338)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc338)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc36)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc36)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc36)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc36)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc36)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc36)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc36)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc36)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc326)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc37)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc38)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc340)
            cir.if %19 {
              %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
              %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc44)
              cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc342)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc47)
            } loc(#loc341)
          } loc(#loc339)
        } loc(#loc337)
        cir.break loc(#loc48)
      } loc(#loc336)
    } loc(#loc336)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc51)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
        cir.condition(%4) loc(#loc51)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc345)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc346)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc58)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc59)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc59)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc347)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc348)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc58)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc349)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc346)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc65)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc351)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc67)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc68)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc69)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc67)
            } loc(#loc352)
          } loc(#loc350)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc72)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc354)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc75)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc355)
              cir.condition(%18) loc(#loc76)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc81)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc357)
              } loc(#loc356)
              cir.yield loc(#loc71)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc83)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc358)
              cir.yield loc(#loc353)
            } loc(#loc353)
          } loc(#loc353)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc360)
            cir.if %17 {
              %18 = cir.const #cir.int<1> : !s32i loc(#loc91)
              %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc94)
              cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc362)
              cir.scope {
                %22 = cir.const #cir.int<0> : !s32i loc(#loc97)
                cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc364)
                cir.for : cond {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                  %24 = cir.const #cir.int<10> : !s32i loc(#loc100)
                  %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc365)
                  cir.condition(%25) loc(#loc101)
                } body {
                  cir.scope {
                    %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
                    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc105)
                    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc106)
                  } loc(#loc366)
                  cir.yield loc(#loc96)
                } step {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                  %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc108)
                  cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc367)
                  cir.yield loc(#loc363)
                } loc(#loc363)
              } loc(#loc363)
            } else {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc109)
            } loc(#loc361)
          } loc(#loc359)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc110)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc111)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc110)
        } loc(#loc344)
        cir.break loc(#loc112)
      } loc(#loc343)
    } loc(#loc343)
    cir.return loc(#loc20)
  } loc(#loc333)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc369)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc115)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc370)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc117)
    cir.return loc(#loc114)
  } loc(#loc368)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc371)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc372)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc126)
  cir.func @main(%arg0: !s32i loc(fused[#loc129, #loc130]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc131, #loc132])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc374)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc375)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc128)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc133)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc134)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc135)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc135)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc136)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc123)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc137)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc376)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_good() : () -> () loc(#loc138)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc124)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc140)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc125)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc377)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_bad() : () -> () loc(#loc142)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc126)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc145)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc378)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc378)
    cir.return %17 : !s32i loc(#loc378)
  } loc(#loc373)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc147)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc380)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc153)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc381)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc157)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc157)
        cir.condition(%4) loc(#loc157)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc384)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc384)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc384)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc164)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc165)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc165)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc165)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc165)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc165)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc165)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc165)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc165)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc326)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc166)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc167)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc168)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc386)
            cir.if %19 {
              %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc172)
              %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc173)
              cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc388)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc176)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc176)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc177)
            } loc(#loc387)
          } loc(#loc385)
        } loc(#loc383)
        cir.break loc(#loc178)
      } loc(#loc382)
    } loc(#loc382)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc181)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc181)
        cir.condition(%4) loc(#loc181)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc391)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc392)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc188)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc189)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc189)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc393)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc394)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc188)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc395)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc392)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc194)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc195)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc195)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc397)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc197)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc198)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc199)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc197)
            } loc(#loc398)
          } loc(#loc396)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc202)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc400)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc204)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc205)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc401)
              cir.condition(%18) loc(#loc206)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc208)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc210)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc211)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc403)
              } loc(#loc402)
              cir.yield loc(#loc201)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc212)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc213)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc404)
              cir.yield loc(#loc399)
            } loc(#loc399)
          } loc(#loc399)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc217)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc406)
            %18 = cir.ternary(%17, true {
              %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc220)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc407)
              %22 = cir.ternary(%21, true {
                %23 = cir.const #true loc(#loc218)
                cir.yield %23 : !cir.bool loc(#loc218)
              }, false {
                %23 = cir.const #false loc(#loc218)
                cir.yield %23 : !cir.bool loc(#loc218)
              }) : (!cir.bool) -> !cir.bool loc(#loc218)
              cir.yield %22 : !cir.bool loc(#loc218)
            }, false {
              %19 = cir.const #false loc(#loc218)
              cir.yield %19 : !cir.bool loc(#loc218)
            }) : (!cir.bool) -> !cir.bool loc(#loc218)
            cir.if %18 {
              %19 = cir.const #cir.int<1> : !s32i loc(#loc225)
              %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc228)
              cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc409)
              cir.scope {
                %23 = cir.const #cir.int<0> : !s32i loc(#loc231)
                cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc411)
                cir.for : cond {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                  %25 = cir.const #cir.int<10> : !s32i loc(#loc234)
                  %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc412)
                  cir.condition(%26) loc(#loc235)
                } body {
                  cir.scope {
                    %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
                    %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc239)
                    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc240)
                  } loc(#loc413)
                  cir.yield loc(#loc230)
                } step {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc241)
                  %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc242)
                  cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc414)
                  cir.yield loc(#loc410)
                } loc(#loc410)
              } loc(#loc410)
            } else {
              %19 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc147)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc147)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc243)
            } loc(#loc408)
          } loc(#loc405)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc244)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc245)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc245)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc244)
        } loc(#loc390)
        cir.break loc(#loc246)
      } loc(#loc389)
    } loc(#loc389)
    cir.return loc(#loc149)
  } loc(#loc379)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc416)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc251)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc252)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc417)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc256)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc256)
        cir.condition(%4) loc(#loc256)
      } do {
        %3 = cir.const #cir.int<7> : !s32i loc(#loc257)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc419)
        cir.break loc(#loc259)
      } loc(#loc418)
    } loc(#loc418)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc262)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc262)
        cir.condition(%4) loc(#loc262)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc422)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc423)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc269)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc270)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc270)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc424)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc425)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc269)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc426)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc423)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc275)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc276)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc276)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc428)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc278)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc279)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc280)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc278)
            } loc(#loc429)
          } loc(#loc427)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc283)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc431)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc285)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc286)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc432)
              cir.condition(%18) loc(#loc287)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc289)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc290)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc291)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc292)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc434)
              } loc(#loc433)
              cir.yield loc(#loc282)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc293)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc294)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc435)
              cir.yield loc(#loc430)
            } loc(#loc430)
          } loc(#loc430)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc297)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc298)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc437)
            cir.if %17 {
              %18 = cir.const #cir.int<1> : !s32i loc(#loc302)
              %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc303)
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc304)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc305)
              cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc439)
              cir.scope {
                %22 = cir.const #cir.int<0> : !s32i loc(#loc308)
                cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc441)
                cir.for : cond {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc310)
                  %24 = cir.const #cir.int<10> : !s32i loc(#loc311)
                  %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc442)
                  cir.condition(%25) loc(#loc312)
                } body {
                  cir.scope {
                    %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc314)
                    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc315)
                    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc316)
                    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc314)
                    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc317)
                  } loc(#loc443)
                  cir.yield loc(#loc307)
                } step {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc318)
                  %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc319)
                  cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc444)
                  cir.yield loc(#loc440)
                } loc(#loc440)
              } loc(#loc440)
            } else {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc320)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc320)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc321)
            } loc(#loc438)
          } loc(#loc436)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc322)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc323)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc323)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc322)
        } loc(#loc421)
        cir.break loc(#loc324)
      } loc(#loc420)
    } loc(#loc420)
    cir.return loc(#loc248)
  } loc(#loc415)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":41:27)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":70:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":76:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":28:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":28:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":29:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":45:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":29:11)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":31:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":43:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":32:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":32:49)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":42:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:36)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:53)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:63)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":35:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":38:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":40:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":37:29)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":37:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":37:17)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":37:40)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":41:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":44:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":46:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":75:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":46:11)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":48:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":73:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":49:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":49:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:58)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:42)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:47)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:57)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:43)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:27)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:33)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:34)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:40)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:39)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":56:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:25)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":54:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":55:29)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":55:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":55:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":55:25)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:34)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:33)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":59:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":71:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":59:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":59:25)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":60:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":67:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":69:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":61:32)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":61:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":61:24)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":61:28)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":66:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:25)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:21)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:28)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:32)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":64:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":65:34)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":65:41)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":65:42)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":65:21)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:37)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:36)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":70:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":72:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":72:18)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":74:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":181:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":185:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":183:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":183:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":184:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":184:13)
#loc119 = loc("/usr/include/stdlib.h":575:1)
#loc120 = loc("/usr/include/stdlib.h":575:41)
#loc121 = loc("/usr/include/time.h":76:1)
#loc122 = loc("/usr/include/time.h":76:38)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":201:15)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":203:15)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":206:15)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":208:15)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":196:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":211:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":197:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":199:27)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":199:22)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":199:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":201:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":202:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":202:63)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":203:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":206:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":207:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":207:62)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":208:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":210:12)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":210:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":128:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":83:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":134:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":85:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":85:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":87:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":87:12)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":87:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":88:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":104:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":88:11)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":90:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":102:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":91:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":91:49)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":101:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:23)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:36)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:53)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:17)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:63)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":94:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":97:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":99:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":96:29)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":96:24)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":96:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":96:40)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":100:27)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":100:17)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":103:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":105:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":133:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":105:11)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":107:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":131:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":108:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":108:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:58)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:35)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:42)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:47)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:57)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:43)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:27)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:33)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:34)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:40)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:39)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":115:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:22)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:18)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:29)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:27)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":113:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":114:29)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":114:17)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":114:24)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":114:25)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:34)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:33)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":129:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:25)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:27)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:30)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:38)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:40)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":118:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":125:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":127:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":119:32)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":119:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":119:24)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":119:28)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:17)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":124:17)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:25)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:21)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:28)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:32)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:30)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":122:17)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":123:34)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":123:41)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":123:42)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":123:21)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:37)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:36)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":128:17)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":130:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":130:18)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":132:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":137:1)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":179:1)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":139:5)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":139:9)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":141:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":141:12)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":141:5)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":142:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":148:5)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":142:11)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":146:16)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":146:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":147:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":149:5)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":178:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":149:11)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":151:9)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":176:9)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":152:13)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":152:17)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:58)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:35)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:42)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:47)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:57)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:13)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:43)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:17)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:27)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:33)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:34)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:40)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:39)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":159:13)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:22)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:18)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:25)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:29)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:27)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":157:13)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":158:29)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":158:17)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":158:24)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":158:25)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:34)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:33)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":162:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":174:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":162:17)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":162:25)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":163:13)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":170:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":172:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":164:32)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":164:17)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":164:24)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":164:28)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:17)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":169:17)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:25)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:21)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:28)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:32)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:30)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":167:17)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":168:34)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":168:41)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":168:42)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":168:21)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:37)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:36)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":173:27)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":173:17)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":175:13)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":175:18)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":177:9)
#loc325 = loc(fused[#loc1, #loc2])
#loc326 = loc(fused[#loc3, #loc4])
#loc327 = loc(fused[#loc5, #loc6])
#loc328 = loc(fused[#loc7, #loc8])
#loc329 = loc(fused[#loc10, #loc11])
#loc330 = loc(fused[#loc12, #loc13])
#loc331 = loc(fused[#loc14, #loc15])
#loc332 = loc(fused[#loc17, #loc18])
#loc333 = loc(fused[#loc19, #loc20])
#loc334 = loc(fused[#loc21, #loc22])
#loc335 = loc(fused[#loc25, #loc23])
#loc336 = loc(fused[#loc26, #loc27])
#loc337 = loc(fused[#loc29, #loc30])
#loc338 = loc(fused[#loc31, #loc32])
#loc339 = loc(fused[#loc33, #loc34])
#loc340 = loc(fused[#loc38, #loc39])
#loc341 = loc(fused[#loc40, #loc41, #loc42, #loc34])
#loc342 = loc(fused[#loc45, #loc46])
#loc343 = loc(fused[#loc49, #loc50])
#loc344 = loc(fused[#loc52, #loc53])
#loc345 = loc(fused[#loc54, #loc55])
#loc346 = loc(fused[#loc56, #loc57])
#loc347 = loc(fused[#loc60, #loc61])
#loc348 = loc(fused[#loc59, #loc61])
#loc349 = loc(fused[#loc58, #loc57])
#loc350 = loc(fused[#loc62, #loc63])
#loc351 = loc(fused[#loc64, #loc65])
#loc352 = loc(fused[#loc66, #loc63])
#loc353 = loc(fused[#loc70, #loc71])
#loc354 = loc(fused[#loc73, #loc72])
#loc355 = loc(fused[#loc74, #loc75])
#loc356 = loc(fused[#loc77, #loc71])
#loc357 = loc(fused[#loc79, #loc78])
#loc358 = loc(fused[#loc83, #loc82])
#loc359 = loc(fused[#loc84, #loc85])
#loc360 = loc(fused[#loc86, #loc87])
#loc361 = loc(fused[#loc88, #loc89, #loc90, #loc85])
#loc362 = loc(fused[#loc92, #loc91])
#loc363 = loc(fused[#loc95, #loc96])
#loc364 = loc(fused[#loc98, #loc97])
#loc365 = loc(fused[#loc99, #loc100])
#loc366 = loc(fused[#loc102, #loc96])
#loc367 = loc(fused[#loc108, #loc107])
#loc368 = loc(fused[#loc113, #loc114])
#loc369 = loc(fused[#loc115, #loc116])
#loc370 = loc(fused[#loc117, #loc118])
#loc371 = loc(fused[#loc119, #loc120])
#loc372 = loc(fused[#loc121, #loc122])
#loc373 = loc(fused[#loc127, #loc128])
#loc376 = loc(fused[#loc138, #loc139])
#loc377 = loc(fused[#loc142, #loc143])
#loc378 = loc(fused[#loc146, #loc145])
#loc379 = loc(fused[#loc148, #loc149])
#loc380 = loc(fused[#loc150, #loc151])
#loc381 = loc(fused[#loc154, #loc152])
#loc382 = loc(fused[#loc155, #loc156])
#loc383 = loc(fused[#loc158, #loc159])
#loc384 = loc(fused[#loc160, #loc161])
#loc385 = loc(fused[#loc162, #loc163])
#loc386 = loc(fused[#loc167, #loc168])
#loc387 = loc(fused[#loc169, #loc170, #loc171, #loc163])
#loc388 = loc(fused[#loc174, #loc175])
#loc389 = loc(fused[#loc179, #loc180])
#loc390 = loc(fused[#loc182, #loc183])
#loc391 = loc(fused[#loc184, #loc185])
#loc392 = loc(fused[#loc186, #loc187])
#loc393 = loc(fused[#loc190, #loc191])
#loc394 = loc(fused[#loc189, #loc191])
#loc395 = loc(fused[#loc188, #loc187])
#loc396 = loc(fused[#loc192, #loc193])
#loc397 = loc(fused[#loc194, #loc195])
#loc398 = loc(fused[#loc196, #loc193])
#loc399 = loc(fused[#loc200, #loc201])
#loc400 = loc(fused[#loc203, #loc202])
#loc401 = loc(fused[#loc204, #loc205])
#loc402 = loc(fused[#loc207, #loc201])
#loc403 = loc(fused[#loc209, #loc208])
#loc404 = loc(fused[#loc213, #loc212])
#loc405 = loc(fused[#loc214, #loc215])
#loc406 = loc(fused[#loc216, #loc217])
#loc407 = loc(fused[#loc219, #loc221])
#loc408 = loc(fused[#loc222, #loc223, #loc224, #loc215])
#loc409 = loc(fused[#loc226, #loc225])
#loc410 = loc(fused[#loc229, #loc230])
#loc411 = loc(fused[#loc232, #loc231])
#loc412 = loc(fused[#loc233, #loc234])
#loc413 = loc(fused[#loc236, #loc230])
#loc414 = loc(fused[#loc242, #loc241])
#loc415 = loc(fused[#loc247, #loc248])
#loc416 = loc(fused[#loc249, #loc250])
#loc417 = loc(fused[#loc253, #loc251])
#loc418 = loc(fused[#loc254, #loc255])
#loc419 = loc(fused[#loc258, #loc257])
#loc420 = loc(fused[#loc260, #loc261])
#loc421 = loc(fused[#loc263, #loc264])
#loc422 = loc(fused[#loc265, #loc266])
#loc423 = loc(fused[#loc267, #loc268])
#loc424 = loc(fused[#loc271, #loc272])
#loc425 = loc(fused[#loc270, #loc272])
#loc426 = loc(fused[#loc269, #loc268])
#loc427 = loc(fused[#loc273, #loc274])
#loc428 = loc(fused[#loc275, #loc276])
#loc429 = loc(fused[#loc277, #loc274])
#loc430 = loc(fused[#loc281, #loc282])
#loc431 = loc(fused[#loc284, #loc283])
#loc432 = loc(fused[#loc285, #loc286])
#loc433 = loc(fused[#loc288, #loc282])
#loc434 = loc(fused[#loc290, #loc289])
#loc435 = loc(fused[#loc294, #loc293])
#loc436 = loc(fused[#loc295, #loc296])
#loc437 = loc(fused[#loc297, #loc298])
#loc438 = loc(fused[#loc299, #loc300, #loc301, #loc296])
#loc439 = loc(fused[#loc303, #loc302])
#loc440 = loc(fused[#loc306, #loc307])
#loc441 = loc(fused[#loc309, #loc308])
#loc442 = loc(fused[#loc310, #loc311])
#loc443 = loc(fused[#loc313, #loc307])
#loc444 = loc(fused[#loc319, #loc318])
