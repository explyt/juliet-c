!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc136)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc137)
  cir.func private  @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc138)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc140)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc16)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc143)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%3) loc(#loc20)
      } do {
        cir.scope {
          %2 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc146)
          cir.scope {
            %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc27)
            %4 = cir.const #cir.int<20> : !s32i loc(#loc28)
            %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc137)
            %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
            %7 = cir.call @fgets(%3, %4, %6) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc30)
            %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
            %10 = cir.cmp(ne, %7, %9) : !cir.ptr<!s8i>, !s32i loc(#loc148)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc32)
            cir.if %11 {
              %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc36)
              %13 = cir.call @atof(%12) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc37)
              %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc37)
              cir.store %14, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc150)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc40)
            } loc(#loc149)
          } loc(#loc147)
        } loc(#loc145)
        cir.break loc(#loc41)
      } loc(#loc144)
    } loc(#loc144)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%3) loc(#loc44)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc153)
          %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc49)
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc50)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc50)
          %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc154)
          %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc154)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc153)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc52)
        } loc(#loc152)
        cir.break loc(#loc53)
      } loc(#loc151)
    } loc(#loc151)
    cir.return loc(#loc13)
  } loc(#loc141)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc155)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc60)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc65)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc160)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc69)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc69)
        cir.condition(%3) loc(#loc69)
      } do {
        cir.scope {
          %2 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc163)
          cir.scope {
            %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc76)
            %4 = cir.const #cir.int<20> : !s32i loc(#loc77)
            %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc137)
            %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc78)
            %7 = cir.call @fgets(%3, %4, %6) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc79)
            %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc80)
            %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc80)
            %10 = cir.cmp(ne, %7, %9) : !cir.ptr<!s8i>, !s32i loc(#loc165)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc81)
            cir.if %11 {
              %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc85)
              %13 = cir.call @atof(%12) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc86)
              %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc86)
              cir.store %14, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc167)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc89)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc89)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc90)
            } loc(#loc166)
          } loc(#loc164)
        } loc(#loc162)
        cir.break loc(#loc91)
      } loc(#loc161)
    } loc(#loc161)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc94)
        cir.condition(%3) loc(#loc94)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc97)
          %3 = cir.cast(floating, %2 : !cir.float), !cir.double loc(#loc97)
          %4 = cir.fabs %3 : !cir.double loc(#loc97)
          %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc98)
          %6 = cir.cmp(gt, %4, %5) : !cir.double, !s32i loc(#loc170)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc100)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc172)
            %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc106)
            %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc107)
            %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc107)
            %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc173)
            %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc173)
            cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc172)
            %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc109)
          } else {
            %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc60)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc60)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          } loc(#loc171)
        } loc(#loc169)
        cir.break loc(#loc111)
      } loc(#loc168)
    } loc(#loc168)
    cir.return loc(#loc62)
  } loc(#loc158)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc116)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc176)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc120)
        cir.condition(%3) loc(#loc120)
      } do {
        %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc121)
        cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc178)
        cir.break loc(#loc123)
      } loc(#loc177)
    } loc(#loc177)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc126)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc126)
        cir.condition(%3) loc(#loc126)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc181)
          %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc131)
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc132)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc132)
          %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc182)
          %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc182)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc181)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc134)
        } loc(#loc180)
        cir.break loc(#loc135)
      } loc(#loc179)
    } loc(#loc179)
    cir.return loc(#loc113)
  } loc(#loc174)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":43:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":26:1)
#loc13 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":57:1)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":28:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":28:11)
#loc16 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":30:12)
#loc17 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":30:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":31:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":47:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":31:11)
#loc21 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":33:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":45:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":34:13)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":34:45)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":36:13)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":44:13)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":36:23)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":36:36)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":36:53)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":36:17)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":36:63)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":36:60)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":37:13)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":40:13)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":42:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":39:36)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":39:31)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":39:17)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":39:47)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":43:17)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":46:9)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":48:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":56:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":48:11)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":50:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":54:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":52:13)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":52:44)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":52:32)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":52:40)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":53:26)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":53:13)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":55:9)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":125:1)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":129:1)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":127:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":127:13)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":128:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":128:13)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":96:23)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":64:1)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":100:1)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":66:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":66:11)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":68:12)
#loc66 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":68:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":69:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":85:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":69:11)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":71:9)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":83:9)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":72:13)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":72:45)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":74:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":82:13)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":74:23)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":74:36)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":74:53)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":74:17)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":74:63)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":74:60)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":75:13)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":78:13)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":80:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":77:36)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":77:31)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":77:17)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":77:47)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":81:27)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":81:17)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":84:9)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":86:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":99:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":86:11)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":89:9)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":97:9)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":89:17)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":89:25)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":89:12)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":89:23)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":90:9)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":93:9)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":95:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":91:13)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":91:44)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":91:32)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":91:40)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":92:26)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":92:13)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":96:13)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":98:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":103:1)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":123:1)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":105:5)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":105:11)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":107:12)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":107:5)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":108:5)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":113:5)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":108:11)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":111:16)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":111:9)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":112:9)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":114:5)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":122:5)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":114:11)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":116:9)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":120:9)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":118:13)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":118:44)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":118:32)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":118:40)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":119:26)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":119:13)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_16.c":121:9)
#loc136 = loc(fused[#loc1, #loc2])
#loc137 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc5, #loc6])
#loc139 = loc(fused[#loc7, #loc8])
#loc140 = loc(fused[#loc10, #loc11])
#loc141 = loc(fused[#loc12, #loc13])
#loc142 = loc(fused[#loc14, #loc15])
#loc143 = loc(fused[#loc17, #loc16])
#loc144 = loc(fused[#loc18, #loc19])
#loc145 = loc(fused[#loc21, #loc22])
#loc146 = loc(fused[#loc23, #loc24])
#loc147 = loc(fused[#loc25, #loc26])
#loc148 = loc(fused[#loc30, #loc31])
#loc149 = loc(fused[#loc33, #loc34, #loc35, #loc26])
#loc150 = loc(fused[#loc38, #loc39])
#loc151 = loc(fused[#loc42, #loc43])
#loc152 = loc(fused[#loc45, #loc46])
#loc153 = loc(fused[#loc47, #loc48])
#loc154 = loc(fused[#loc49, #loc50])
#loc155 = loc(fused[#loc54, #loc55])
#loc156 = loc(fused[#loc56, #loc57])
#loc157 = loc(fused[#loc58, #loc59])
#loc158 = loc(fused[#loc61, #loc62])
#loc159 = loc(fused[#loc63, #loc64])
#loc160 = loc(fused[#loc66, #loc65])
#loc161 = loc(fused[#loc67, #loc68])
#loc162 = loc(fused[#loc70, #loc71])
#loc163 = loc(fused[#loc72, #loc73])
#loc164 = loc(fused[#loc74, #loc75])
#loc165 = loc(fused[#loc79, #loc80])
#loc166 = loc(fused[#loc82, #loc83, #loc84, #loc75])
#loc167 = loc(fused[#loc87, #loc88])
#loc168 = loc(fused[#loc92, #loc93])
#loc169 = loc(fused[#loc95, #loc96])
#loc170 = loc(fused[#loc99, #loc98])
#loc171 = loc(fused[#loc101, #loc102, #loc103, #loc96])
#loc172 = loc(fused[#loc104, #loc105])
#loc173 = loc(fused[#loc106, #loc107])
#loc174 = loc(fused[#loc112, #loc113])
#loc175 = loc(fused[#loc114, #loc115])
#loc176 = loc(fused[#loc117, #loc116])
#loc177 = loc(fused[#loc118, #loc119])
#loc178 = loc(fused[#loc122, #loc121])
#loc179 = loc(fused[#loc124, #loc125])
#loc180 = loc(fused[#loc127, #loc128])
#loc181 = loc(fused[#loc129, #loc130])
#loc182 = loc(fused[#loc131, #loc132])
