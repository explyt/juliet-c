!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc40 = loc("CWE617_Reachable_Assertion__fixed_34.c":82:10)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_34.c":82:14)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_34.c":82:20)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_34.c":82:32)
!ty_CWE617_Reachable_Assertion__fixed_34_unionType = !cir.struct<union "CWE617_Reachable_Assertion__fixed_34_unionType" {!s32i, !s32i}>
#loc92 = loc(fused[#loc40, #loc41])
#loc93 = loc(fused[#loc42, #loc43])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_34.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_34_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %2 = cir.alloca !ty_CWE617_Reachable_Assertion__fixed_34_unionType, !cir.ptr<!ty_CWE617_Reachable_Assertion__fixed_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc81)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc13)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc15)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc15)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %9 = cir.get_member %2[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__fixed_34_unionType> -> !cir.ptr<!s32i> loc(#loc19)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb1 loc(#loc85)
  ^bb1:  // pred: ^bb0
    %10 = cir.get_member %2[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__fixed_34_unionType> -> !cir.ptr<!s32i> loc(#loc23)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc7)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.br ^bb2 loc(#loc3)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc3)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc3)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc3)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc3)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc3)
  ^bb5:  // pred: ^bb3
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc3)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc3)
    %20 = cir.const #cir.int<43> : !s32i loc(#loc3)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc3)
    %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%17, %19, %21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb6 loc(#loc3)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc3)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc3)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc5)
  } loc(#loc78)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc25)
  } loc(#loc86)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc88)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc89)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc37)
  cir.func @main(%arg0: !s32i loc(fused[#loc40, #loc41]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc42, #loc43])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc93)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc39)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc44)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc45)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc46)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc46)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc47)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc34)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %8 = cir.get_global @CWE617_Reachable_Assertion__fixed_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call @CWE617_Reachable_Assertion__fixed_34_good() : () -> () loc(#loc49)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc35)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc36)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %13 = cir.get_global @CWE617_Reachable_Assertion__fixed_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call @CWE617_Reachable_Assertion__fixed_34_bad() : () -> () loc(#loc53)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc37)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    cir.return %17 : !s32i loc(#loc96)
  } loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %2 = cir.alloca !ty_CWE617_Reachable_Assertion__fixed_34_unionType, !cir.ptr<!ty_CWE617_Reachable_Assertion__fixed_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc100)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc68)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc70)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc70)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %9 = cir.get_member %2[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__fixed_34_unionType> -> !cir.ptr<!s32i> loc(#loc19)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %10 = cir.get_member %2[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__fixed_34_unionType> -> !cir.ptr<!s32i> loc(#loc23)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc58)
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc58)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc58)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc58)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc58)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc58)
  ^bb5:  // pred: ^bb3
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc58)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc58)
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc58)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc58)
    %20 = cir.const #cir.int<64> : !s32i loc(#loc58)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc58)
    %22 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @__assert_fail(%17, %19, %21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc58)
    cir.br ^bb6 loc(#loc58)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc58)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc58)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc76)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc60)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_34.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_34.c":43:9)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_34.c":31:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_34.c":45:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_34.c":41:9)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_34.c":41:28)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_34.c":33:5)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_34.c":33:9)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_34.c":34:5)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_34.c":34:52)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_34.c":36:13)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_34.c":36:12)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_34.c":36:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_34.c":38:12)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_34.c":38:25)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_34.c":38:5)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_34.c":39:26)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_34.c":25:9)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_34.c":39:5)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_34.c":40:5)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_34.c":44:5)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_34.c":26:9)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_34.c":68:1)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_34.c":71:1)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_34.c":70:5)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_34.c":70:13)
#loc28 = loc("/usr/include/stdlib.h":575:1)
#loc29 = loc("/usr/include/stdlib.h":575:41)
#loc30 = loc("/usr/include/time.h":76:1)
#loc31 = loc("/usr/include/time.h":76:38)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_34.c":87:15)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_34.c":89:15)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_34.c":92:15)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_34.c":94:15)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_34.c":82:1)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_34.c":97:1)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_34.c":83:1)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_34.c":85:27)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_34.c":85:22)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_34.c":85:5)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_34.c":87:5)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_34.c":88:5)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_34.c":88:47)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_34.c":89:5)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_34.c":92:5)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_34.c":93:5)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_34.c":93:46)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_34.c":94:5)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_34.c":96:12)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_34.c":96:5)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_34.c":64:9)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_34.c":52:1)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_34.c":66:1)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_34.c":62:9)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_34.c":62:28)
#loc63 = loc("CWE617_Reachable_Assertion__fixed_34.c":54:5)
#loc64 = loc("CWE617_Reachable_Assertion__fixed_34.c":54:9)
#loc65 = loc("CWE617_Reachable_Assertion__fixed_34.c":55:5)
#loc66 = loc("CWE617_Reachable_Assertion__fixed_34.c":55:52)
#loc67 = loc("CWE617_Reachable_Assertion__fixed_34.c":57:13)
#loc68 = loc("CWE617_Reachable_Assertion__fixed_34.c":57:12)
#loc69 = loc("CWE617_Reachable_Assertion__fixed_34.c":57:5)
#loc70 = loc("CWE617_Reachable_Assertion__fixed_34.c":59:12)
#loc71 = loc("CWE617_Reachable_Assertion__fixed_34.c":59:25)
#loc72 = loc("CWE617_Reachable_Assertion__fixed_34.c":59:5)
#loc73 = loc("CWE617_Reachable_Assertion__fixed_34.c":60:26)
#loc74 = loc("CWE617_Reachable_Assertion__fixed_34.c":60:5)
#loc75 = loc("CWE617_Reachable_Assertion__fixed_34.c":61:5)
#loc76 = loc("CWE617_Reachable_Assertion__fixed_34.c":65:5)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc4, #loc5])
#loc79 = loc(fused[#loc6, #loc7])
#loc80 = loc(fused[#loc8, #loc9])
#loc81 = loc(fused[#loc10, #loc11])
#loc82 = loc(fused[#loc14, #loc12])
#loc83 = loc(fused[#loc17, #loc16])
#loc84 = loc(fused[#loc20, #loc18])
#loc85 = loc(fused[#loc21, #loc22])
#loc86 = loc(fused[#loc24, #loc25])
#loc87 = loc(fused[#loc26, #loc27])
#loc88 = loc(fused[#loc28, #loc29])
#loc89 = loc(fused[#loc30, #loc31])
#loc90 = loc(fused[#loc32, #loc33])
#loc91 = loc(fused[#loc38, #loc39])
#loc94 = loc(fused[#loc49, #loc50])
#loc95 = loc(fused[#loc53, #loc54])
#loc96 = loc(fused[#loc57, #loc56])
#loc97 = loc(fused[#loc59, #loc60])
#loc98 = loc(fused[#loc61, #loc62])
#loc99 = loc(fused[#loc63, #loc64])
#loc100 = loc(fused[#loc65, #loc66])
#loc101 = loc(fused[#loc69, #loc67])
#loc102 = loc(fused[#loc72, #loc71])
#loc103 = loc(fused[#loc74, #loc73])
#loc104 = loc(fused[#loc75, #loc76])
