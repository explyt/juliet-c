!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_08.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_08_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc73)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    cir.br ^bb1 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc76)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc77)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<5> : !s32i loc(#loc16)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc16)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc3)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc3)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc3)
    %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc3)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc3)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc3)
  ^bb8:  // pred: ^bb6
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc3)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc3)
    %16 = cir.const #cir.int<50> : !s32i loc(#loc3)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc3)
    %18 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb9 loc(#loc3)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc3)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc3)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc5)
  } loc(#loc72)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc80)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc81)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc79)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc26)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc27)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.return %2 : !s32i loc(#loc83)
  } loc(#loc82)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc38)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.br ^bb1 loc(#loc88)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc89)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc42)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc42)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc90)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc31)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    cir.br ^bb4 loc(#loc45)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<5> : !s32i loc(#loc48)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc48)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.br ^bb4 loc(#loc41)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc41)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc32)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc32)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc32)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc32)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc32)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc32)
  ^bb9:  // pred: ^bb7
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc32)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc32)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc32)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc32)
    %18 = cir.const #cir.int<74> : !s32i loc(#loc32)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc32)
    %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc32)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @__assert_fail(%15, %17, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb10 loc(#loc32)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc32)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc32)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc34)
  } loc(#loc85)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.return %2 : !s32i loc(#loc93)
  } loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc61)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb1 loc(#loc97)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc98)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc65)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc65)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc99)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<5> : !s32i loc(#loc68)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc68)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.br ^bb3 loc(#loc64)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc64)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc55)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc55)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc55)
    %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc55)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc55)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc55)
  ^bb8:  // pred: ^bb6
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc55)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc55)
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc55)
    %16 = cir.const #cir.int<89> : !s32i loc(#loc55)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc55)
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc55)
    cir.br ^bb9 loc(#loc55)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc55)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc55)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc57)
  } loc(#loc94)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_08.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_08.c":50:5)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_08.c":39:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_08.c":51:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_08.c":41:5)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_08.c":41:9)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_08.c":43:13)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_08.c":43:12)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_08.c":43:5)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_08.c":44:5)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_08.c":48:5)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_08.c":44:8)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_08.c":44:26)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_08.c":45:5)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_08.c":47:16)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_08.c":47:29)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_08.c":47:9)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_08.c":92:1)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_08.c":96:1)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_08.c":94:5)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_08.c":94:14)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_08.c":95:5)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_08.c":95:14)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_08.c":27:1)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_08.c":30:1)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_08.c":29:12)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_08.c":29:5)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_08.c":66:19)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_08.c":74:5)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_08.c":58:1)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_08.c":75:1)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_08.c":60:5)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_08.c":60:9)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_08.c":62:13)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_08.c":62:12)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_08.c":62:5)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_08.c":63:5)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_08.c":72:5)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_08.c":63:8)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_08.c":63:27)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_08.c":64:5)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_08.c":67:5)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_08.c":69:5)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_08.c":66:9)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_08.c":71:16)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_08.c":71:29)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_08.c":71:9)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_08.c":32:1)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_08.c":35:1)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_08.c":34:12)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_08.c":34:5)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_08.c":89:5)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_08.c":78:1)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_08.c":90:1)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_08.c":80:5)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_08.c":80:9)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_08.c":82:13)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_08.c":82:12)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_08.c":82:5)
#loc63 = loc("CWE617_Reachable_Assertion__fixed_08.c":83:5)
#loc64 = loc("CWE617_Reachable_Assertion__fixed_08.c":87:5)
#loc65 = loc("CWE617_Reachable_Assertion__fixed_08.c":83:8)
#loc66 = loc("CWE617_Reachable_Assertion__fixed_08.c":83:26)
#loc67 = loc("CWE617_Reachable_Assertion__fixed_08.c":84:5)
#loc68 = loc("CWE617_Reachable_Assertion__fixed_08.c":86:16)
#loc69 = loc("CWE617_Reachable_Assertion__fixed_08.c":86:29)
#loc70 = loc("CWE617_Reachable_Assertion__fixed_08.c":86:9)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc4, #loc5])
#loc73 = loc(fused[#loc6, #loc7])
#loc74 = loc(fused[#loc10, #loc8])
#loc75 = loc(fused[#loc11, #loc12])
#loc76 = loc(fused[#loc13, #loc14])
#loc77 = loc(fused[#loc15, #loc12])
#loc78 = loc(fused[#loc18, #loc17])
#loc79 = loc(fused[#loc19, #loc20])
#loc80 = loc(fused[#loc21, #loc22])
#loc81 = loc(fused[#loc23, #loc24])
#loc82 = loc(fused[#loc25, #loc26])
#loc83 = loc(fused[#loc28, #loc27])
#loc84 = loc(fused[#loc29, #loc30])
#loc85 = loc(fused[#loc33, #loc34])
#loc86 = loc(fused[#loc35, #loc36])
#loc87 = loc(fused[#loc39, #loc37])
#loc88 = loc(fused[#loc40, #loc41])
#loc89 = loc(fused[#loc42, #loc43])
#loc90 = loc(fused[#loc44, #loc45, #loc46, #loc41])
#loc91 = loc(fused[#loc50, #loc49])
#loc92 = loc(fused[#loc51, #loc52])
#loc93 = loc(fused[#loc54, #loc53])
#loc94 = loc(fused[#loc56, #loc57])
#loc95 = loc(fused[#loc58, #loc59])
#loc96 = loc(fused[#loc62, #loc60])
#loc97 = loc(fused[#loc63, #loc64])
#loc98 = loc(fused[#loc65, #loc66])
#loc99 = loc(fused[#loc67, #loc64])
#loc100 = loc(fused[#loc70, #loc69])
