!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc76)
  cir.func private  @printHexCharLine(!s8i) loc(#loc77)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_char_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
          cir.yield %22 : !u32i loc(#loc16)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc16)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc16)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc16)
          cir.yield %26 : !u32i loc(#loc16)
        }) : (!cir.bool) -> !u32i loc(#loc16)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc16)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
      } loc(#loc82)
    } loc(#loc81)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc85)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc21)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc85)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc22)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc23)
    } loc(#loc84)
    cir.return loc(#loc6)
  } loc(#loc78)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_char_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc86)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc38)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc42)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc46)
      } else {
        %5 = cir.const #cir.int<127> : !s32i loc(#loc47)
        %6 = cir.const #cir.int<5> : !s32i loc(#loc48)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc47)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
      } loc(#loc94)
    } loc(#loc93)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc97)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc53)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc97)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc54)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc55)
    } loc(#loc96)
    cir.return loc(#loc34)
  } loc(#loc90)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc61)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc65)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc65)
      cir.if %4 {
        %5 = cir.const #cir.int<127> : !s32i loc(#loc67)
        %6 = cir.const #cir.int<5> : !s32i loc(#loc68)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc67)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
      } loc(#loc102)
    } loc(#loc101)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc105)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc73)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc105)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc74)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc75)
    } loc(#loc104)
    cir.return loc(#loc57)
  } loc(#loc98)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":28:1)
#loc6 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":43:1)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":30:5)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":30:9)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":32:13)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":32:12)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":32:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":33:5)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":37:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":33:8)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":34:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":36:16)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":36:9)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":38:5)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":42:5)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":40:9)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":40:31)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":41:26)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":41:9)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":90:1)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":94:1)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":92:5)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":92:14)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":93:5)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":93:14)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":58:19)
#loc33 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":50:1)
#loc34 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":70:1)
#loc35 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":52:5)
#loc36 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":52:9)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":54:13)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":54:12)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":54:5)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":55:5)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":64:5)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":55:8)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":56:5)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":59:5)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":61:5)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":58:9)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":63:16)
#loc48 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":63:25)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":63:9)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":65:5)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":69:5)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":67:9)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":67:31)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":68:26)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":68:9)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":73:1)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":88:1)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":75:5)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":75:9)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":77:13)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":77:12)
#loc62 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":77:5)
#loc63 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":78:5)
#loc64 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":82:5)
#loc65 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":78:8)
#loc66 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":79:5)
#loc67 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":81:16)
#loc68 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":81:25)
#loc69 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":81:9)
#loc70 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":83:5)
#loc71 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":87:5)
#loc72 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":85:9)
#loc73 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":85:31)
#loc74 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":86:26)
#loc75 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_04.c":86:9)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc7, #loc8])
#loc80 = loc(fused[#loc11, #loc9])
#loc81 = loc(fused[#loc12, #loc13])
#loc82 = loc(fused[#loc15, #loc13])
#loc83 = loc(fused[#loc17, #loc16])
#loc84 = loc(fused[#loc18, #loc19])
#loc85 = loc(fused[#loc20, #loc21])
#loc86 = loc(fused[#loc24, #loc25])
#loc87 = loc(fused[#loc26, #loc27])
#loc88 = loc(fused[#loc28, #loc29])
#loc89 = loc(fused[#loc30, #loc31])
#loc90 = loc(fused[#loc33, #loc34])
#loc91 = loc(fused[#loc35, #loc36])
#loc92 = loc(fused[#loc39, #loc37])
#loc93 = loc(fused[#loc40, #loc41])
#loc94 = loc(fused[#loc43, #loc44, #loc45, #loc41])
#loc95 = loc(fused[#loc49, #loc48])
#loc96 = loc(fused[#loc50, #loc51])
#loc97 = loc(fused[#loc52, #loc53])
#loc98 = loc(fused[#loc56, #loc57])
#loc99 = loc(fused[#loc58, #loc59])
#loc100 = loc(fused[#loc62, #loc60])
#loc101 = loc(fused[#loc63, #loc64])
#loc102 = loc(fused[#loc66, #loc64])
#loc103 = loc(fused[#loc69, #loc68])
#loc104 = loc(fused[#loc70, #loc71])
#loc105 = loc(fused[#loc72, #loc73])
