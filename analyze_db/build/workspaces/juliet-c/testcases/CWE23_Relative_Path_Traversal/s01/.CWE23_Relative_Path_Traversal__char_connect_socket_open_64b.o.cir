!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":60:14)
#loc8 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":60:21)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":82:18)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":82:25)
#loc70 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc38, #loc39])
module @"/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc67)
  cir.func private @close(!s32i) -> !s32i loc(#loc68)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_647badSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc71)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc70)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc72)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc73)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc15)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc12)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    cir.store %5, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc72)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc16)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    cir.store %7, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc73)
    cir.br ^bb1 loc(#loc74)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc21)
    %10 = cir.const #cir.int<64> : !s32i loc(#loc22)
    %11 = cir.binop(or, %9, %10) : !s32i loc(#loc75)
    %12 = cir.const #cir.int<256> : !s32i loc(#loc23)
    %13 = cir.const #cir.int<128> : !s32i loc(#loc24)
    %14 = cir.binop(or, %12, %13) : !s32i loc(#loc76)
    %15 = cir.call @open(%8, %11, %14) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc25)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.br ^bb2 loc(#loc78)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc32)
    %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc79)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc80)
  ^bb3:  // pred: ^bb2
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc35)
    cir.br ^bb4 loc(#loc29)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc29)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc69)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_6411goodG2BSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc82)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc84)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc85)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc46)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc43)
    cir.store %5, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc84)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc47)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    cir.store %7, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc52)
    %10 = cir.const #cir.int<64> : !s32i loc(#loc53)
    %11 = cir.binop(or, %9, %10) : !s32i loc(#loc87)
    %12 = cir.const #cir.int<256> : !s32i loc(#loc54)
    %13 = cir.const #cir.int<128> : !s32i loc(#loc55)
    %14 = cir.binop(or, %12, %13) : !s32i loc(#loc88)
    %15 = cir.call @open(%8, %11, %14) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc56)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.br ^bb2 loc(#loc90)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc63)
    %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc91)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc92)
  ^bb3:  // pred: ^bb2
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc66)
    cir.br ^bb4 loc(#loc60)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc60)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc50)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc37)
  } loc(#loc81)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":0:0)
#loc1 = loc("/usr/include/fcntl.h":209:1)
#loc2 = loc("/usr/include/fcntl.h":209:56)
#loc3 = loc("/usr/include/unistd.h":358:1)
#loc4 = loc("/usr/include/unistd.h":358:27)
#loc5 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":60:1)
#loc6 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":75:1)
#loc9 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":67:9)
#loc10 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":67:13)
#loc11 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":63:5)
#loc12 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":63:34)
#loc13 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":65:5)
#loc14 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":65:28)
#loc15 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":61:1)
#loc16 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":65:21)
#loc17 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":65:20)
#loc18 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":66:5)
#loc19 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":74:5)
#loc20 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":69:25)
#loc21 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":69:31)
#loc22 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":69:38)
#loc23 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":69:47)
#loc24 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":69:55)
#loc25 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":69:20)
#loc26 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":69:9)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":69:63)
#loc28 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":70:9)
#loc29 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":73:9)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":70:13)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":70:26)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":70:25)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":71:9)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":72:19)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":72:13)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":82:1)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":97:1)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":89:9)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":89:13)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":85:5)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":85:34)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":87:5)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":87:28)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":83:1)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":87:21)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":87:20)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":88:5)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":96:5)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":91:25)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":91:31)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":91:38)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":91:47)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":91:55)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":91:20)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":91:9)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":91:63)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":92:9)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":95:9)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":92:13)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":92:26)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":92:25)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":93:9)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":94:19)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_64b.cpp":94:13)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc71 = loc(fused[#loc9, #loc10])
#loc72 = loc(fused[#loc11, #loc12])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc18, #loc19])
#loc75 = loc(fused[#loc21, #loc22])
#loc76 = loc(fused[#loc23, #loc24])
#loc77 = loc(fused[#loc26, #loc27])
#loc78 = loc(fused[#loc28, #loc29])
#loc79 = loc(fused[#loc30, #loc31])
#loc80 = loc(fused[#loc33, #loc29])
#loc81 = loc(fused[#loc36, #loc37])
#loc83 = loc(fused[#loc40, #loc41])
#loc84 = loc(fused[#loc42, #loc43])
#loc85 = loc(fused[#loc44, #loc45])
#loc86 = loc(fused[#loc49, #loc50])
#loc87 = loc(fused[#loc52, #loc53])
#loc88 = loc(fused[#loc54, #loc55])
#loc89 = loc(fused[#loc57, #loc58])
#loc90 = loc(fused[#loc59, #loc60])
#loc91 = loc(fused[#loc61, #loc62])
#loc92 = loc(fused[#loc64, #loc60])
