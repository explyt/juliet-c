!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty_CWE190_Integer_Overflow__int_max_add_34_unionType = !cir.struct<union "CWE190_Integer_Overflow__int_max_add_34_unionType" {!s32i, !s32i}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc89)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_34_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc92)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc93)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int_max_add_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_add_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc94)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc13)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %7 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_add_34_unionType> -> !cir.ptr<!s32i> loc(#loc18)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_add_34_unionType> -> !cir.ptr<!s32i> loc(#loc22)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc6)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.br ^bb2 loc(#loc99)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc25)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc27)
    cir.br ^bb3 loc(#loc24)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc90)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_34_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc100)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc105)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc106)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int_max_add_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_add_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc107)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc44)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc46)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %7 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_add_34_unionType> -> !cir.ptr<!s32i> loc(#loc18)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_add_34_unionType> -> !cir.ptr<!s32i> loc(#loc22)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb2 loc(#loc112)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc54)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc56)
    cir.br ^bb3 loc(#loc53)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc51)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc35)
  } loc(#loc103)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc59)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc116)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int_max_add_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_add_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc118)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %7 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_add_34_unionType> -> !cir.ptr<!s32i> loc(#loc18)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_add_34_unionType> -> !cir.ptr<!s32i> loc(#loc22)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.br ^bb2 loc(#loc123)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc81)
    %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc124)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc125)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %15 = cir.binop(add, %13, %14) nsw : !s32i loc(#loc85)
    cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc87)
    cir.br ^bb5 loc(#loc83)
  ^bb4:  // pred: ^bb2
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc59)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb5 loc(#loc79)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc79)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc77)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc61)
  } loc(#loc114)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_34.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_add_34.c":28:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_add_34.c":45:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_add_34.c":38:9)
#loc6 = loc("CWE190_Integer_Overflow__int_max_add_34.c":38:28)
#loc7 = loc("CWE190_Integer_Overflow__int_max_add_34.c":41:13)
#loc8 = loc("CWE190_Integer_Overflow__int_max_add_34.c":41:33)
#loc9 = loc("CWE190_Integer_Overflow__int_max_add_34.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_add_34.c":30:9)
#loc11 = loc("CWE190_Integer_Overflow__int_max_add_34.c":31:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_add_34.c":31:55)
#loc13 = loc("CWE190_Integer_Overflow__int_max_add_34.c":33:12)
#loc14 = loc("CWE190_Integer_Overflow__int_max_add_34.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_add_34.c":35:12)
#loc16 = loc("CWE190_Integer_Overflow__int_max_add_34.c":35:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_add_34.c":36:26)
#loc18 = loc("CWE190_Integer_Overflow__int_max_add_34.c":22:9)
#loc19 = loc("CWE190_Integer_Overflow__int_max_add_34.c":36:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_add_34.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_add_34.c":44:5)
#loc22 = loc("CWE190_Integer_Overflow__int_max_add_34.c":23:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_add_34.c":39:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_add_34.c":43:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_add_34.c":41:26)
#loc26 = loc("CWE190_Integer_Overflow__int_max_add_34.c":42:26)
#loc27 = loc("CWE190_Integer_Overflow__int_max_add_34.c":42:13)
#loc28 = loc("CWE190_Integer_Overflow__int_max_add_34.c":96:1)
#loc29 = loc("CWE190_Integer_Overflow__int_max_add_34.c":100:1)
#loc30 = loc("CWE190_Integer_Overflow__int_max_add_34.c":98:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_add_34.c":98:13)
#loc32 = loc("CWE190_Integer_Overflow__int_max_add_34.c":99:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_add_34.c":99:13)
#loc34 = loc("CWE190_Integer_Overflow__int_max_add_34.c":52:1)
#loc35 = loc("CWE190_Integer_Overflow__int_max_add_34.c":69:1)
#loc36 = loc("CWE190_Integer_Overflow__int_max_add_34.c":62:9)
#loc37 = loc("CWE190_Integer_Overflow__int_max_add_34.c":62:28)
#loc38 = loc("CWE190_Integer_Overflow__int_max_add_34.c":65:13)
#loc39 = loc("CWE190_Integer_Overflow__int_max_add_34.c":65:33)
#loc40 = loc("CWE190_Integer_Overflow__int_max_add_34.c":54:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_add_34.c":54:9)
#loc42 = loc("CWE190_Integer_Overflow__int_max_add_34.c":55:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_add_34.c":55:55)
#loc44 = loc("CWE190_Integer_Overflow__int_max_add_34.c":57:12)
#loc45 = loc("CWE190_Integer_Overflow__int_max_add_34.c":57:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_add_34.c":59:12)
#loc47 = loc("CWE190_Integer_Overflow__int_max_add_34.c":59:5)
#loc48 = loc("CWE190_Integer_Overflow__int_max_add_34.c":60:26)
#loc49 = loc("CWE190_Integer_Overflow__int_max_add_34.c":60:5)
#loc50 = loc("CWE190_Integer_Overflow__int_max_add_34.c":61:5)
#loc51 = loc("CWE190_Integer_Overflow__int_max_add_34.c":68:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_add_34.c":63:9)
#loc53 = loc("CWE190_Integer_Overflow__int_max_add_34.c":67:9)
#loc54 = loc("CWE190_Integer_Overflow__int_max_add_34.c":65:26)
#loc55 = loc("CWE190_Integer_Overflow__int_max_add_34.c":66:26)
#loc56 = loc("CWE190_Integer_Overflow__int_max_add_34.c":66:13)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE190_Integer_Overflow__int_max_add_34.c":91:23)
#loc60 = loc("CWE190_Integer_Overflow__int_max_add_34.c":72:1)
#loc61 = loc("CWE190_Integer_Overflow__int_max_add_34.c":94:1)
#loc62 = loc("CWE190_Integer_Overflow__int_max_add_34.c":82:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_add_34.c":82:28)
#loc64 = loc("CWE190_Integer_Overflow__int_max_add_34.c":86:13)
#loc65 = loc("CWE190_Integer_Overflow__int_max_add_34.c":86:33)
#loc66 = loc("CWE190_Integer_Overflow__int_max_add_34.c":74:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_add_34.c":74:9)
#loc68 = loc("CWE190_Integer_Overflow__int_max_add_34.c":75:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_add_34.c":75:55)
#loc70 = loc("CWE190_Integer_Overflow__int_max_add_34.c":77:12)
#loc71 = loc("CWE190_Integer_Overflow__int_max_add_34.c":77:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_add_34.c":79:12)
#loc73 = loc("CWE190_Integer_Overflow__int_max_add_34.c":79:5)
#loc74 = loc("CWE190_Integer_Overflow__int_max_add_34.c":80:26)
#loc75 = loc("CWE190_Integer_Overflow__int_max_add_34.c":80:5)
#loc76 = loc("CWE190_Integer_Overflow__int_max_add_34.c":81:5)
#loc77 = loc("CWE190_Integer_Overflow__int_max_add_34.c":93:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_add_34.c":84:9)
#loc79 = loc("CWE190_Integer_Overflow__int_max_add_34.c":92:9)
#loc80 = loc("CWE190_Integer_Overflow__int_max_add_34.c":84:13)
#loc81 = loc("CWE190_Integer_Overflow__int_max_add_34.c":84:20)
#loc82 = loc("CWE190_Integer_Overflow__int_max_add_34.c":85:9)
#loc83 = loc("CWE190_Integer_Overflow__int_max_add_34.c":88:9)
#loc84 = loc("CWE190_Integer_Overflow__int_max_add_34.c":90:9)
#loc85 = loc("CWE190_Integer_Overflow__int_max_add_34.c":86:26)
#loc86 = loc("CWE190_Integer_Overflow__int_max_add_34.c":87:26)
#loc87 = loc("CWE190_Integer_Overflow__int_max_add_34.c":87:13)
#loc88 = loc("CWE190_Integer_Overflow__int_max_add_34.c":91:13)
#loc89 = loc(fused[#loc1, #loc2])
#loc90 = loc(fused[#loc3, #loc4])
#loc91 = loc(fused[#loc5, #loc6])
#loc92 = loc(fused[#loc7, #loc8])
#loc93 = loc(fused[#loc9, #loc10])
#loc94 = loc(fused[#loc11, #loc12])
#loc95 = loc(fused[#loc14, #loc13])
#loc96 = loc(fused[#loc16, #loc15])
#loc97 = loc(fused[#loc19, #loc17])
#loc98 = loc(fused[#loc20, #loc21])
#loc99 = loc(fused[#loc23, #loc24])
#loc100 = loc(fused[#loc28, #loc29])
#loc101 = loc(fused[#loc30, #loc31])
#loc102 = loc(fused[#loc32, #loc33])
#loc103 = loc(fused[#loc34, #loc35])
#loc104 = loc(fused[#loc36, #loc37])
#loc105 = loc(fused[#loc38, #loc39])
#loc106 = loc(fused[#loc40, #loc41])
#loc107 = loc(fused[#loc42, #loc43])
#loc108 = loc(fused[#loc45, #loc44])
#loc109 = loc(fused[#loc47, #loc46])
#loc110 = loc(fused[#loc49, #loc48])
#loc111 = loc(fused[#loc50, #loc51])
#loc112 = loc(fused[#loc52, #loc53])
#loc113 = loc(fused[#loc57, #loc58])
#loc114 = loc(fused[#loc60, #loc61])
#loc115 = loc(fused[#loc62, #loc63])
#loc116 = loc(fused[#loc64, #loc65])
#loc117 = loc(fused[#loc66, #loc67])
#loc118 = loc(fused[#loc68, #loc69])
#loc119 = loc(fused[#loc71, #loc70])
#loc120 = loc(fused[#loc73, #loc72])
#loc121 = loc(fused[#loc75, #loc74])
#loc122 = loc(fused[#loc76, #loc77])
#loc123 = loc(fused[#loc78, #loc79])
#loc124 = loc(fused[#loc80, #loc81])
#loc125 = loc(fused[#loc82, #loc83, #loc84, #loc79])
