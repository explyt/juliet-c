!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @CWE369_Divide_by_Zero__float_listenSocket_65b_badSink(!cir.float) loc(#loc291)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc292)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc293)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc294)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc295)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc296)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc297)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc298)
  cir.func private @close(!s32i) -> !s32i loc(#loc299)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc302)
    %2 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_65b_badSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc24)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc302)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc25)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc303)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc305)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc306)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc307)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc308)
      %10 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc309)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc34)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc307)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc36)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc308)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc43)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc44)
            %17 = cir.const #cir.int<6> : !s32i loc(#loc45)
            %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
            cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc312)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc51)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc52)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc314)
              cir.if %58 {
                cir.break loc(#loc54)
              } loc(#loc315)
            } loc(#loc313)
            %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc316)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc57)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc317)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc318)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc62)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc62)
            %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc319)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc65)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc65)
            %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc320)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc69)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc69)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc70)
            %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc321)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc76)
              %56 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc323)
              %57 = cir.const #cir.int<16> : !u64i loc(#loc324)
              %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc324)
              %59 = cir.call @bind(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc81)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc82)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc82)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc325)
              cir.if %62 {
                cir.break loc(#loc84)
              } loc(#loc326)
            } loc(#loc322)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %56 = cir.const #cir.int<5> : !s32i loc(#loc88)
              %57 = cir.call @listen(%55, %56) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc89)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc90)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc90)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc328)
              cir.if %60 {
                cir.break loc(#loc92)
              } loc(#loc329)
            } loc(#loc327)
            %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc94)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc95)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc96)
            cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc330)
            cir.scope {
              %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc102)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc102)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc332)
              cir.if %58 {
                cir.break loc(#loc104)
              } loc(#loc333)
            } loc(#loc331)
            %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc106)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
            %40 = cir.const #cir.int<20> : !s32i loc(#loc107)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc108)
            %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc107)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc107)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc109)
            %45 = cir.call @recv(%37, %39, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc110)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc110)
            cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc334)
            cir.scope {
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc116)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc116)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc336)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc117)
                cir.yield %60 : !cir.bool loc(#loc117)
              }, false {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                %61 = cir.const #cir.int<0> : !s32i loc(#loc119)
                %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc337)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc117)
                  cir.yield %64 : !cir.bool loc(#loc117)
                }, false {
                  %64 = cir.const #false loc(#loc117)
                  cir.yield %64 : !cir.bool loc(#loc117)
                }) : (!cir.bool) -> !cir.bool loc(#loc117)
                cir.yield %63 : !cir.bool loc(#loc117)
              }) : (!cir.bool) -> !cir.bool loc(#loc117)
              cir.if %59 {
                cir.break loc(#loc121)
              } loc(#loc338)
            } loc(#loc335)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc122)
            %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc122)
            %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %50 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc124)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc124)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc339)
            %52 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc125)
            %53 = cir.call @atof(%52) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc126)
            %54 = cir.cast(floating, %53 : !cir.double), !cir.float loc(#loc126)
            cir.store %54, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc340)
          } loc(#loc311)
          cir.yield loc(#loc40)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc129)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc129)
          cir.condition(%16) loc(#loc129)
        } loc(#loc310)
      } loc(#loc310)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc133)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc133)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc342)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc135)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc136)
        } loc(#loc343)
      } loc(#loc341)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc140)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc140)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc345)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc143)
        } loc(#loc346)
      } loc(#loc344)
    } loc(#loc304)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc144)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc145)
    cir.call %4(%5) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc144)
    cir.return loc(#loc20)
  } loc(#loc300)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc348)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc148)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc349)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc150)
    cir.return loc(#loc147)
  } loc(#loc347)
  cir.func private @CWE369_Divide_by_Zero__float_listenSocket_65b_goodG2BSink(!cir.float) loc(#loc350)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc352)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc353)
    %2 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_65b_goodG2BSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc159)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc353)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc160)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc354)
    %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc162)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc355)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc164)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc165)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc164)
    cir.return loc(#loc155)
  } loc(#loc351)
  cir.func private @CWE369_Divide_by_Zero__float_listenSocket_65b_goodB2GSink(!cir.float) loc(#loc356)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc358)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc359)
    %2 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_65b_goodB2GSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc173)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc359)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc174)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc360)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc362)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc363)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc364)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc365)
      %10 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc366)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc183)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc183)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc364)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc185)
      %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc185)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc365)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc192)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc193)
            %17 = cir.const #cir.int<6> : !s32i loc(#loc194)
            %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc195)
            cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc369)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc200)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc201)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc201)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc371)
              cir.if %58 {
                cir.break loc(#loc203)
              } loc(#loc372)
            } loc(#loc370)
            %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc373)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc206)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc374)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc375)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc211)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc211)
            %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc376)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc213)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc213)
            %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc377)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc215)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc215)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc216)
            %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc378)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc221)
              %56 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc380)
              %57 = cir.const #cir.int<16> : !u64i loc(#loc381)
              %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc381)
              %59 = cir.call @bind(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc226)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc227)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc227)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc382)
              cir.if %62 {
                cir.break loc(#loc229)
              } loc(#loc383)
            } loc(#loc379)
            cir.scope {
              %55 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc232)
              %56 = cir.const #cir.int<5> : !s32i loc(#loc233)
              %57 = cir.call @listen(%55, %56) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc234)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc235)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc235)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc385)
              cir.if %60 {
                cir.break loc(#loc237)
              } loc(#loc386)
            } loc(#loc384)
            %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc238)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc239)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc240)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc241)
            cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc387)
            cir.scope {
              %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc246)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc247)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc247)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc389)
              cir.if %58 {
                cir.break loc(#loc249)
              } loc(#loc390)
            } loc(#loc388)
            %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc250)
            %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc251)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc251)
            %40 = cir.const #cir.int<20> : !s32i loc(#loc252)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc253)
            %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc252)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc252)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc254)
            %45 = cir.call @recv(%37, %39, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc255)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc255)
            cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc391)
            cir.scope {
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc260)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc261)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc261)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc393)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc262)
                cir.yield %60 : !cir.bool loc(#loc262)
              }, false {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc263)
                %61 = cir.const #cir.int<0> : !s32i loc(#loc264)
                %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc394)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc262)
                  cir.yield %64 : !cir.bool loc(#loc262)
                }, false {
                  %64 = cir.const #false loc(#loc262)
                  cir.yield %64 : !cir.bool loc(#loc262)
                }) : (!cir.bool) -> !cir.bool loc(#loc262)
                cir.yield %63 : !cir.bool loc(#loc262)
              }) : (!cir.bool) -> !cir.bool loc(#loc262)
              cir.if %59 {
                cir.break loc(#loc266)
              } loc(#loc395)
            } loc(#loc392)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc267)
            %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc267)
            %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc268)
            %50 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc269)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc269)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc396)
            %52 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc270)
            %53 = cir.call @atof(%52) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc271)
            %54 = cir.cast(floating, %53 : !cir.double), !cir.float loc(#loc271)
            cir.store %54, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc397)
          } loc(#loc368)
          cir.yield loc(#loc189)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc274)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc274)
          cir.condition(%16) loc(#loc274)
        } loc(#loc367)
      } loc(#loc367)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc277)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc278)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc278)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc399)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc280)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc281)
        } loc(#loc400)
      } loc(#loc398)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc284)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc285)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc285)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc402)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc287)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc288)
        } loc(#loc403)
      } loc(#loc401)
    } loc(#loc361)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc289)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc290)
    cir.call %4(%5) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc289)
    cir.return loc(#loc169)
  } loc(#loc357)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_65a.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":47:1)
#loc2 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":47:70)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":102:1)
#loc16 = loc("/usr/include/stdlib.h":103:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":49:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":127:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":51:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":51:11)
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":53:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":53:31)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":55:12)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":55:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":56:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":124:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":61:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":61:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":62:9)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":62:28)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":63:9)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":63:31)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":64:9)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":64:31)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":65:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":65:41)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":66:9)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":109:17)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":67:9)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":108:9)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":75:35)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":75:44)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":75:57)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":75:28)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":75:13)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":75:68)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":76:13)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":79:13)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":76:17)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":76:33)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":77:13)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":78:17)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":80:20)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":80:21)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":80:30)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":80:33)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":80:47)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":80:13)
#loc61 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":80:48)
#loc62 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":81:34)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":81:13)
#loc65 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":82:39)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":82:13)
#loc69 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":83:38)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":83:32)
#loc71 = loc("/usr/include/netinet/in.h":250:15)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":83:13)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":83:46)
#loc74 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":84:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":87:13)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":84:22)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":84:54)
#loc78 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":84:55)
#loc79 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":84:64)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":84:78)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":84:17)
#loc82 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":84:84)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":85:13)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":86:17)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":88:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":91:13)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":88:24)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":88:38)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":88:17)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":88:57)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":89:13)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":90:17)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":92:35)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":92:49)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":92:55)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":92:28)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":92:13)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":92:59)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":93:13)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":96:13)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":93:17)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":93:33)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":94:13)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":95:17)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":99:31)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":99:45)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":99:58)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":99:76)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":99:79)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":99:26)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":99:13)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":99:80)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":100:13)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":103:13)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":100:17)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":100:31)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":100:44)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":100:47)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":100:61)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":101:13)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":102:17)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":105:39)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":105:25)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":105:13)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":107:32)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":107:27)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":107:13)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":107:43)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":109:16)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":110:9)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":113:9)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":110:13)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":110:29)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":111:9)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":112:26)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":112:13)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":114:9)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":117:9)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":114:13)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":114:29)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":115:9)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":116:26)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":116:13)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":126:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":126:13)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":228:1)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":232:1)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":230:5)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":230:13)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":231:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":231:13)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":134:1)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":134:74)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":136:1)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":145:1)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":138:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":138:11)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":139:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":139:31)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":141:12)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":141:5)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":143:12)
#loc163 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":143:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":144:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":144:13)
#loc166 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":148:1)
#loc167 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":148:74)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":150:1)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":226:1)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":152:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":152:11)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":153:5)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":153:31)
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":155:12)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":155:5)
#loc176 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":156:5)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":224:5)
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":161:9)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":161:13)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":162:9)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":162:28)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":163:9)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":163:31)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":164:9)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":164:31)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":165:9)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":165:41)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":166:9)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":209:17)
#loc190 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":167:9)
#loc191 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":208:9)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":175:35)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":175:44)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":175:57)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":175:28)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":175:13)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":175:68)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":176:13)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":179:13)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":176:17)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":176:33)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":177:13)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":178:17)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":180:20)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":180:21)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":180:30)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":180:33)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":180:47)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":180:13)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":180:48)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":181:34)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":181:13)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":182:39)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":182:13)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":183:38)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":183:32)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":183:13)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":183:46)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":184:13)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":187:13)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":184:22)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":184:54)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":184:55)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":184:64)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":184:78)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":184:17)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":184:84)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":185:13)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":186:17)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":188:13)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":191:13)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":188:24)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":188:38)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":188:17)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":188:57)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":189:13)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":190:17)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":192:35)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":192:49)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":192:55)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":192:28)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":192:13)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":192:59)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":193:13)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":196:13)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":193:17)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":193:33)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":194:13)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":195:17)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":199:31)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":199:45)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":199:58)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":199:76)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":199:79)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":199:26)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":199:13)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":199:80)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":200:13)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":203:13)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":200:17)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":200:31)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":200:44)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":200:47)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":200:61)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":201:13)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":202:17)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":205:39)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":205:25)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":205:13)
#loc270 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":207:32)
#loc271 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":207:27)
#loc272 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":207:13)
#loc273 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":207:43)
#loc274 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":209:16)
#loc275 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":210:9)
#loc276 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":213:9)
#loc277 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":210:13)
#loc278 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":210:29)
#loc279 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":211:9)
#loc280 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":212:26)
#loc281 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":212:13)
#loc282 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":214:9)
#loc283 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":217:9)
#loc284 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":214:13)
#loc285 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":214:29)
#loc286 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":215:9)
#loc287 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":216:26)
#loc288 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":216:13)
#loc289 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":225:5)
#loc290 = loc("CWE369_Divide_by_Zero__float_listenSocket_65a.c":225:13)
#loc291 = loc(fused[#loc1, #loc2])
#loc292 = loc(fused[#loc3, #loc4])
#loc293 = loc(fused[#loc5, #loc6])
#loc294 = loc(fused[#loc7, #loc8])
#loc295 = loc(fused[#loc9, #loc10])
#loc296 = loc(fused[#loc11, #loc12])
#loc297 = loc(fused[#loc13, #loc14])
#loc298 = loc(fused[#loc15, #loc16])
#loc299 = loc(fused[#loc17, #loc18])
#loc300 = loc(fused[#loc19, #loc20])
#loc301 = loc(fused[#loc21, #loc22])
#loc302 = loc(fused[#loc23, #loc24])
#loc303 = loc(fused[#loc26, #loc25])
#loc304 = loc(fused[#loc27, #loc28])
#loc305 = loc(fused[#loc29, #loc30])
#loc306 = loc(fused[#loc31, #loc32])
#loc307 = loc(fused[#loc33, #loc34])
#loc308 = loc(fused[#loc35, #loc36])
#loc309 = loc(fused[#loc37, #loc38])
#loc310 = loc(fused[#loc39, #loc40])
#loc311 = loc(fused[#loc41, #loc42])
#loc312 = loc(fused[#loc47, #loc48])
#loc313 = loc(fused[#loc49, #loc50])
#loc314 = loc(fused[#loc51, #loc52])
#loc315 = loc(fused[#loc53, #loc50])
#loc316 = loc(fused[#loc55, #loc56])
#loc317 = loc(fused[#loc58, #loc59])
#loc318 = loc(fused[#loc60, #loc61])
#loc319 = loc(fused[#loc64, #loc62])
#loc320 = loc(fused[#loc68, #loc65])
#loc321 = loc(fused[#loc72, #loc73])
#loc322 = loc(fused[#loc74, #loc75])
#loc323 = loc(fused[#loc77, #loc78])
#loc324 = loc(fused[#loc79, #loc80])
#loc325 = loc(fused[#loc81, #loc82])
#loc326 = loc(fused[#loc83, #loc75])
#loc327 = loc(fused[#loc85, #loc86])
#loc328 = loc(fused[#loc89, #loc90])
#loc329 = loc(fused[#loc91, #loc86])
#loc330 = loc(fused[#loc97, #loc98])
#loc331 = loc(fused[#loc99, #loc100])
#loc332 = loc(fused[#loc101, #loc102])
#loc333 = loc(fused[#loc103, #loc100])
#loc334 = loc(fused[#loc111, #loc112])
#loc335 = loc(fused[#loc113, #loc114])
#loc336 = loc(fused[#loc115, #loc116])
#loc337 = loc(fused[#loc118, #loc119])
#loc338 = loc(fused[#loc120, #loc114])
#loc339 = loc(fused[#loc124, #loc122])
#loc340 = loc(fused[#loc127, #loc128])
#loc341 = loc(fused[#loc130, #loc131])
#loc342 = loc(fused[#loc132, #loc133])
#loc343 = loc(fused[#loc134, #loc131])
#loc344 = loc(fused[#loc137, #loc138])
#loc345 = loc(fused[#loc139, #loc140])
#loc346 = loc(fused[#loc141, #loc138])
#loc347 = loc(fused[#loc146, #loc147])
#loc348 = loc(fused[#loc148, #loc149])
#loc349 = loc(fused[#loc150, #loc151])
#loc350 = loc(fused[#loc152, #loc153])
#loc351 = loc(fused[#loc154, #loc155])
#loc352 = loc(fused[#loc156, #loc157])
#loc353 = loc(fused[#loc158, #loc159])
#loc354 = loc(fused[#loc161, #loc160])
#loc355 = loc(fused[#loc163, #loc162])
#loc356 = loc(fused[#loc166, #loc167])
#loc357 = loc(fused[#loc168, #loc169])
#loc358 = loc(fused[#loc170, #loc171])
#loc359 = loc(fused[#loc172, #loc173])
#loc360 = loc(fused[#loc175, #loc174])
#loc361 = loc(fused[#loc176, #loc177])
#loc362 = loc(fused[#loc178, #loc179])
#loc363 = loc(fused[#loc180, #loc181])
#loc364 = loc(fused[#loc182, #loc183])
#loc365 = loc(fused[#loc184, #loc185])
#loc366 = loc(fused[#loc186, #loc187])
#loc367 = loc(fused[#loc188, #loc189])
#loc368 = loc(fused[#loc190, #loc191])
#loc369 = loc(fused[#loc196, #loc197])
#loc370 = loc(fused[#loc198, #loc199])
#loc371 = loc(fused[#loc200, #loc201])
#loc372 = loc(fused[#loc202, #loc199])
#loc373 = loc(fused[#loc204, #loc205])
#loc374 = loc(fused[#loc207, #loc208])
#loc375 = loc(fused[#loc209, #loc210])
#loc376 = loc(fused[#loc212, #loc211])
#loc377 = loc(fused[#loc214, #loc213])
#loc378 = loc(fused[#loc217, #loc218])
#loc379 = loc(fused[#loc219, #loc220])
#loc380 = loc(fused[#loc222, #loc223])
#loc381 = loc(fused[#loc224, #loc225])
#loc382 = loc(fused[#loc226, #loc227])
#loc383 = loc(fused[#loc228, #loc220])
#loc384 = loc(fused[#loc230, #loc231])
#loc385 = loc(fused[#loc234, #loc235])
#loc386 = loc(fused[#loc236, #loc231])
#loc387 = loc(fused[#loc242, #loc243])
#loc388 = loc(fused[#loc244, #loc245])
#loc389 = loc(fused[#loc246, #loc247])
#loc390 = loc(fused[#loc248, #loc245])
#loc391 = loc(fused[#loc256, #loc257])
#loc392 = loc(fused[#loc258, #loc259])
#loc393 = loc(fused[#loc260, #loc261])
#loc394 = loc(fused[#loc263, #loc264])
#loc395 = loc(fused[#loc265, #loc259])
#loc396 = loc(fused[#loc269, #loc267])
#loc397 = loc(fused[#loc272, #loc273])
#loc398 = loc(fused[#loc275, #loc276])
#loc399 = loc(fused[#loc277, #loc278])
#loc400 = loc(fused[#loc279, #loc276])
#loc401 = loc(fused[#loc282, #loc283])
#loc402 = loc(fused[#loc284, #loc285])
#loc403 = loc(fused[#loc286, #loc283])
