!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc96)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc97)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc100)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc101)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc100)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc12)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc12)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc12)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc12)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
    cir.scope {
      %19 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc15)
      cir.if %20 {
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc104)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc19)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc19)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc21)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc22)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc105)
      } loc(#loc103)
    } loc(#loc102)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc107)
      %20 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc107)
      cir.store %20, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc107)
      %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc27)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc29)
      %24 = cir.call @strcpy(%22, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc27)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    } loc(#loc106)
    cir.return loc(#loc6)
  } loc(#loc98)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc108)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc113)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc44)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc44)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc44)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc44)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc44)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc114)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc44)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc44)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc46)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc46)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc46)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc46)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc46)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc46)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc46)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc46)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc114)
    cir.scope {
      %19 = cir.const #cir.int<0> : !s32i loc(#loc49)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc49)
      cir.if %20 {
        %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
        %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc117)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc56)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc59)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc118)
      } loc(#loc116)
    } loc(#loc115)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc120)
      %20 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc120)
      cir.store %20, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc120)
      %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc64)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc66)
      %24 = cir.call @strcpy(%22, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc64)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    } loc(#loc119)
    cir.return loc(#loc40)
  } loc(#loc111)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc122)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc123)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc74)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc74)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc74)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc74)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc74)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc124)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc74)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc74)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc123)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc76)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc76)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc76)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc76)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc76)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc76)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc76)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc124)
    cir.scope {
      %19 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc79)
      cir.if %20 {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc83)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc83)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc85)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc86)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc128)
      } loc(#loc126)
    } loc(#loc125)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc130)
      %20 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc130)
      cir.store %20, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc130)
      %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc91)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc93)
      %24 = cir.call @strcpy(%22, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc91)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    } loc(#loc129)
    cir.return loc(#loc70)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":0:0)
#loc1 = loc("/usr/include/string.h":141:1)
#loc2 = loc("/usr/include/string.h":142:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":35:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":53:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":37:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":37:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":38:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":38:36)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":39:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":39:37)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":40:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":46:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":40:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":41:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":44:16)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":44:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":45:19)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":45:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":45:14)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":45:15)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":47:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":52:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":48:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":48:29)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":50:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":50:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":50:22)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":51:19)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":51:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":106:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":110:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":108:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":108:14)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":109:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":109:14)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":68:19)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":60:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":83:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":62:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":62:12)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":63:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":63:36)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":64:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":64:37)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":65:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":76:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":65:8)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":66:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":69:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":71:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":68:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":74:16)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":74:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":75:19)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":75:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":75:14)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":75:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":77:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":82:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":78:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":78:29)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":80:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":80:16)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":80:22)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":81:19)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":81:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":86:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":104:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":88:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":88:12)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":89:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":89:36)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":90:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":90:37)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":91:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":97:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":91:8)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":92:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":95:16)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":95:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":96:19)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":96:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":96:14)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":96:15)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":98:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":103:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":99:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":99:29)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":101:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":101:16)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":101:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":102:19)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c":102:9)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc13, #loc14])
#loc103 = loc(fused[#loc16, #loc14])
#loc104 = loc(fused[#loc18, #loc17])
#loc105 = loc(fused[#loc20, #loc19])
#loc106 = loc(fused[#loc23, #loc24])
#loc107 = loc(fused[#loc25, #loc26])
#loc108 = loc(fused[#loc32, #loc33])
#loc109 = loc(fused[#loc34, #loc35])
#loc110 = loc(fused[#loc36, #loc37])
#loc111 = loc(fused[#loc39, #loc40])
#loc112 = loc(fused[#loc41, #loc42])
#loc113 = loc(fused[#loc43, #loc44])
#loc114 = loc(fused[#loc45, #loc46])
#loc115 = loc(fused[#loc47, #loc48])
#loc116 = loc(fused[#loc50, #loc51, #loc52, #loc48])
#loc117 = loc(fused[#loc55, #loc54])
#loc118 = loc(fused[#loc57, #loc56])
#loc119 = loc(fused[#loc60, #loc61])
#loc120 = loc(fused[#loc62, #loc63])
#loc121 = loc(fused[#loc69, #loc70])
#loc122 = loc(fused[#loc71, #loc72])
#loc123 = loc(fused[#loc73, #loc74])
#loc124 = loc(fused[#loc75, #loc76])
#loc125 = loc(fused[#loc77, #loc78])
#loc126 = loc(fused[#loc80, #loc78])
#loc127 = loc(fused[#loc82, #loc81])
#loc128 = loc(fused[#loc84, #loc83])
#loc129 = loc(fused[#loc87, #loc88])
#loc130 = loc(fused[#loc89, #loc90])
