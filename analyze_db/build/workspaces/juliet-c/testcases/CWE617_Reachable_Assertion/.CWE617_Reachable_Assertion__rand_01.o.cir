!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc13 = loc("CWE617_Reachable_Assertion__rand_01.c":31:12)
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc30)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_01.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_01_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc33)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc34)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc13)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc13)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc13)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc13)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc13)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc13)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc13)
    cir.br ^bb3(%18 : !u32i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc13)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc13)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc13)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc13)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc13)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc13)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc13)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc13)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc13)
    cir.br ^bb3(%34 : !u32i) loc(#loc13)
  ^bb3(%35: !u32i loc("CWE617_Reachable_Assertion__rand_01.c":31:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc13)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc35)
    cir.br ^bb5 loc(#loc5)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc5)
  ^bb6:  // pred: ^bb5
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc5)
    %38 = cir.const #cir.int<5> : !s32i loc(#loc5)
    %39 = cir.cmp(gt, %37, %38) : !s32i, !cir.bool loc(#loc5)
    cir.brcond %39 ^bb7, ^bb8 loc(#loc5)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc5)
  ^bb8:  // pred: ^bb6
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
    %42 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
    %44 = cir.const #cir.int<33> : !s32i loc(#loc5)
    %45 = cir.cast(integral, %44 : !s32i), !u32i loc(#loc5)
    %46 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @__assert_fail(%41, %43, %45, %47) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
    cir.br ^bb9 loc(#loc5)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc5)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc5)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc7)
  } loc(#loc32)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc37)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc17)
    cir.return loc(#loc16)
  } loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc39)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc40)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc27)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc27)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc19)
    cir.br ^bb1 loc(#loc19)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc19)
    %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc19)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc19)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc19)
  ^bb4:  // pred: ^bb2
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc19)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc19)
    %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc19)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc19)
    %14 = cir.const #cir.int<49> : !s32i loc(#loc19)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc19)
    %16 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc19)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc19)
    cir.call @__assert_fail(%11, %13, %15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc19)
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc21)
  } loc(#loc38)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":69:1)
#loc4 = loc("/usr/include/assert.h":71:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_01.c":33:5)
#loc6 = loc("CWE617_Reachable_Assertion__rand_01.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_01.c":34:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_01.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_01.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__rand_01.c":29:13)
#loc11 = loc("CWE617_Reachable_Assertion__rand_01.c":29:12)
#loc12 = loc("CWE617_Reachable_Assertion__rand_01.c":29:5)
#loc14 = loc("CWE617_Reachable_Assertion__rand_01.c":31:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_01.c":52:1)
#loc16 = loc("CWE617_Reachable_Assertion__rand_01.c":55:1)
#loc17 = loc("CWE617_Reachable_Assertion__rand_01.c":54:5)
#loc18 = loc("CWE617_Reachable_Assertion__rand_01.c":54:13)
#loc19 = loc("CWE617_Reachable_Assertion__rand_01.c":49:5)
#loc20 = loc("CWE617_Reachable_Assertion__rand_01.c":41:1)
#loc21 = loc("CWE617_Reachable_Assertion__rand_01.c":50:1)
#loc22 = loc("CWE617_Reachable_Assertion__rand_01.c":43:5)
#loc23 = loc("CWE617_Reachable_Assertion__rand_01.c":43:9)
#loc24 = loc("CWE617_Reachable_Assertion__rand_01.c":45:13)
#loc25 = loc("CWE617_Reachable_Assertion__rand_01.c":45:12)
#loc26 = loc("CWE617_Reachable_Assertion__rand_01.c":45:5)
#loc27 = loc("CWE617_Reachable_Assertion__rand_01.c":47:12)
#loc28 = loc("CWE617_Reachable_Assertion__rand_01.c":47:25)
#loc29 = loc("CWE617_Reachable_Assertion__rand_01.c":47:5)
#loc30 = loc(fused[#loc1, #loc2])
#loc31 = loc(fused[#loc3, #loc4])
#loc32 = loc(fused[#loc6, #loc7])
#loc33 = loc(fused[#loc8, #loc9])
#loc34 = loc(fused[#loc12, #loc10])
#loc35 = loc(fused[#loc14, #loc13])
#loc36 = loc(fused[#loc15, #loc16])
#loc37 = loc(fused[#loc17, #loc18])
#loc38 = loc(fused[#loc20, #loc21])
#loc39 = loc(fused[#loc22, #loc23])
#loc40 = loc(fused[#loc26, #loc24])
#loc41 = loc(fused[#loc29, #loc28])
