!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":22:57)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":22:63)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":34:61)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":34:67)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":42:61)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":42:67)
#loc50 = loc(fused[#loc5, #loc6])
#loc54 = loc(fused[#loc16, #loc17])
#loc59 = loc(fused[#loc30, #loc31])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc48)
  cir.func  @CWE369_Divide_by_Zero__int_zero_modulo_63b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc50)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc11)
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc52)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc13)
    cir.return loc(#loc4)
  } loc(#loc49)
  cir.func  @CWE369_Divide_by_Zero__int_zero_modulo_63b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc16, #loc17])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc54)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc20)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc56)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc24)
    cir.return loc(#loc15)
  } loc(#loc53)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc57)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc27)
  cir.func  @CWE369_Divide_by_Zero__int_zero_modulo_63b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc30, #loc31])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc59)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc34)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc62)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc40)
      cir.if %7 {
        %8 = cir.const #cir.int<100> : !s32i loc(#loc44)
        %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc64)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc46)
      } else {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc27)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc27)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      } loc(#loc63)
    } loc(#loc61)
    cir.return loc(#loc29)
  } loc(#loc58)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_63b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":27:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":24:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":24:17)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":23:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":24:16)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":26:18)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":26:24)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":26:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":34:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":39:1)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":36:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":36:17)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":35:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":36:16)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":38:18)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":38:24)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":38:5)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":52:19)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":42:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":54:1)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":44:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":44:17)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":43:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":44:16)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":46:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":53:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":46:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":46:17)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":46:14)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":47:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":49:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":51:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":48:22)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":48:28)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":48:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_63b.c":52:9)
#loc48 = loc(fused[#loc1, #loc2])
#loc49 = loc(fused[#loc3, #loc4])
#loc51 = loc(fused[#loc7, #loc8])
#loc52 = loc(fused[#loc11, #loc12])
#loc53 = loc(fused[#loc14, #loc15])
#loc55 = loc(fused[#loc18, #loc19])
#loc56 = loc(fused[#loc22, #loc23])
#loc57 = loc(fused[#loc25, #loc26])
#loc58 = loc(fused[#loc28, #loc29])
#loc60 = loc(fused[#loc32, #loc33])
#loc61 = loc(fused[#loc36, #loc37])
#loc62 = loc(fused[#loc38, #loc39])
#loc63 = loc(fused[#loc41, #loc42, #loc43, #loc37])
#loc64 = loc(fused[#loc44, #loc45])
