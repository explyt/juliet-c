!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":21:77)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":21:97)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":39:81)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":39:101)
#loc60 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc33, #loc34])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc57)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc58)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b_badSink(%arg0: !cir.ptr<!cir.ptr<!s64i>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc60)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc61)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc11)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc12)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s64i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s64i>> loc(#loc10)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc12)
    cir.store %5, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc61)
    cir.scope {
      %6 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc63)
      %7 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc63)
      cir.store %7, %6 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc63)
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc18)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc18)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc19)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc19)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc20)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc20)
      %14 = cir.const #cir.int<8> : !u64i loc(#loc64)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc65)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc66)
      %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc25)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc26)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc27)
      %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc25)
      cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc28)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc29)
      %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc30)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc30)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc29)
    } loc(#loc62)
    cir.return loc(#loc6)
  } loc(#loc59)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!s64i>> loc(fused[#loc33, #loc34])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc68)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc69)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc37)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc38)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc39)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s64i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s64i>> loc(#loc36)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc38)
    cir.store %5, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc69)
    cir.scope {
      %6 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc71)
      %7 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc71)
      cir.store %7, %6 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc71)
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc44)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc44)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc45)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc45)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc46)
      %14 = cir.const #cir.int<8> : !u64i loc(#loc72)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc73)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc74)
      %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc51)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc52)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc53)
      %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc51)
      cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc54)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc55)
      %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc56)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc56)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc55)
    } loc(#loc70)
    cir.return loc(#loc32)
  } loc(#loc67)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":32:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":24:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":24:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":22:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":24:22)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":24:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":26:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":26:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":28:16)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":28:22)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":28:30)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":28:34)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":28:48)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":28:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":28:49)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":29:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":29:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":29:33)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":29:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":30:14)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":39:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":49:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":41:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":41:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":40:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":41:22)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":41:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":42:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":48:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":43:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":43:33)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":45:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":45:22)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":45:30)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":45:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":45:48)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":45:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":45:49)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":46:27)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":46:32)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":46:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":46:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":47:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c":47:14)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc3, #loc4])
#loc59 = loc(fused[#loc5, #loc6])
#loc61 = loc(fused[#loc9, #loc10])
#loc62 = loc(fused[#loc14, #loc15])
#loc63 = loc(fused[#loc16, #loc17])
#loc64 = loc(fused[#loc21, #loc22])
#loc65 = loc(fused[#loc20, #loc22])
#loc66 = loc(fused[#loc23, #loc24])
#loc67 = loc(fused[#loc31, #loc32])
#loc69 = loc(fused[#loc35, #loc36])
#loc70 = loc(fused[#loc40, #loc41])
#loc71 = loc(fused[#loc42, #loc43])
#loc72 = loc(fused[#loc47, #loc48])
#loc73 = loc(fused[#loc46, #loc48])
#loc74 = loc(fused[#loc49, #loc50])
