!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"intOne == 5\00" : !cir.array<!s8i x 12>> : !cir.array<!s8i x 12> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_16_bad() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc8)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc8)
        cir.condition(%1) loc(#loc8)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc59)
            %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
            cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc59)
            cir.scope {
              %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc16)
              %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc17)
              %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc17)
              %5 = cir.cmp(ne, %2, %4) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc61)
              %6 = cir.cast(bool_to_int, %5 : !cir.bool), !s32i loc(#loc61)
              %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
              %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc19)
              %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc20)
              %10 = cir.const #cir.int<5> : !s32i loc(#loc21)
              %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc62)
              %12 = cir.cast(bool_to_int, %11 : !cir.bool), !s32i loc(#loc62)
              %13 = cir.binop(and, %6, %12) : !s32i loc(#loc63)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc24)
              cir.if %14 {
                %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc3)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc3)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc26)
              } loc(#loc64)
            } loc(#loc60)
          } loc(#loc58)
          cir.break loc(#loc27)
        } loc(#loc57)
        cir.yield loc(#loc7)
      } loc(#loc56)
    } loc(#loc56)
    cir.return loc(#loc5)
  } loc(#loc55)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc66)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc29)
  } loc(#loc65)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc36)
        cir.condition(%1) loc(#loc36)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc71)
            %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc41)
            cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc71)
            cir.scope {
              %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc44)
              %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
              %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc45)
              %5 = cir.cmp(ne, %2, %4) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc73)
              %6 = cir.ternary(%5, true {
                %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc47)
                %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc19)
                %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc48)
                %10 = cir.const #cir.int<5> : !s32i loc(#loc49)
                %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc74)
                %12 = cir.ternary(%11, true {
                  %13 = cir.const #true loc(#loc46)
                  cir.yield %13 : !cir.bool loc(#loc46)
                }, false {
                  %13 = cir.const #false loc(#loc46)
                  cir.yield %13 : !cir.bool loc(#loc46)
                }) : (!cir.bool) -> !cir.bool loc(#loc46)
                cir.yield %12 : !cir.bool loc(#loc46)
              }, false {
                %7 = cir.const #false loc(#loc46)
                cir.yield %7 : !cir.bool loc(#loc46)
              }) : (!cir.bool) -> !cir.bool loc(#loc46)
              cir.if %6 {
                %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc51)
                %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc51)
                cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc52)
              } loc(#loc75)
            } loc(#loc72)
          } loc(#loc70)
          cir.break loc(#loc53)
        } loc(#loc69)
        cir.yield loc(#loc35)
      } loc(#loc68)
    } loc(#loc68)
    cir.return loc(#loc33)
  } loc(#loc67)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_16.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":30:27)
#loc4 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":20:1)
#loc5 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":35:1)
#loc6 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":22:5)
#loc7 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":34:5)
#loc8 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":22:11)
#loc9 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":23:5)
#loc10 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":24:9)
#loc11 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":32:9)
#loc12 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":25:13)
#loc13 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":25:51)
#loc14 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:13)
#loc15 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":31:13)
#loc16 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:18)
#loc17 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:42)
#loc18 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:51)
#loc19 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc20 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:73)
#loc21 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:83)
#loc22 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:17)
#loc23 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:84)
#loc24 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":28:48)
#loc25 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":29:13)
#loc26 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":30:17)
#loc27 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":33:9)
#loc28 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":59:1)
#loc29 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":62:1)
#loc30 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":61:5)
#loc31 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":61:11)
#loc32 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":42:1)
#loc33 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":57:1)
#loc34 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":44:5)
#loc35 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":56:5)
#loc36 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":44:11)
#loc37 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":45:5)
#loc38 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":46:9)
#loc39 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":54:9)
#loc40 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":47:13)
#loc41 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":47:51)
#loc42 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:13)
#loc43 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":53:13)
#loc44 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:18)
#loc45 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:42)
#loc46 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:48)
#loc47 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:52)
#loc48 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:74)
#loc49 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":50:84)
#loc50 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":51:13)
#loc51 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":52:27)
#loc52 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":52:17)
#loc53 = loc("CWE476_NULL_Pointer_Dereference__binary_if_16.c":55:9)
#loc54 = loc(fused[#loc1, #loc2])
#loc55 = loc(fused[#loc4, #loc5])
#loc56 = loc(fused[#loc6, #loc7])
#loc57 = loc(fused[#loc9, #loc7])
#loc58 = loc(fused[#loc10, #loc11])
#loc59 = loc(fused[#loc12, #loc13])
#loc60 = loc(fused[#loc14, #loc15])
#loc61 = loc(fused[#loc16, #loc17])
#loc62 = loc(fused[#loc18, #loc21])
#loc63 = loc(fused[#loc22, #loc23])
#loc64 = loc(fused[#loc25, #loc15])
#loc65 = loc(fused[#loc28, #loc29])
#loc66 = loc(fused[#loc30, #loc31])
#loc67 = loc(fused[#loc32, #loc33])
#loc68 = loc(fused[#loc34, #loc35])
#loc69 = loc(fused[#loc37, #loc35])
#loc70 = loc(fused[#loc38, #loc39])
#loc71 = loc(fused[#loc40, #loc41])
#loc72 = loc(fused[#loc42, #loc43])
#loc73 = loc(fused[#loc44, #loc45])
#loc74 = loc(fused[#loc47, #loc49])
#loc75 = loc(fused[#loc50, #loc43])
