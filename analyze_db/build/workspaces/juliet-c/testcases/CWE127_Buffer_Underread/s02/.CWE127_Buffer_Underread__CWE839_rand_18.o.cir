!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":30:12)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":61:12)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:23)
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc98)
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc103)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc15)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb1 loc(#loc105)
  ^bb1:  // pred: ^bb0
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc19)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc19)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc19)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc19)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc19)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc19)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc19)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc19)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc19)
    cir.br ^bb4(%19 : !u32i) loc(#loc19)
  ^bb3:  // pred: ^bb1
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc19)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc19)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc19)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc19)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc19)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc19)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc19)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc19)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc19)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc19)
    cir.br ^bb4(%35 : !u32i) loc(#loc19)
  ^bb4(%36: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_18.c":30:12)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // pred: ^bb4
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc19)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb6 loc(#loc107)
  ^bb6:  // pred: ^bb5
    %38 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc103)
    cir.store %38, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc103)
    cir.br ^bb7 loc(#loc108)
  ^bb7:  // pred: ^bb6
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %40 = cir.const #cir.int<10> : !s32i loc(#loc26)
    %41 = cir.cmp(lt, %39, %40) : !s32i, !cir.bool loc(#loc109)
    cir.brcond %41 ^bb8, ^bb9 loc(#loc110)
  ^bb8:  // pred: ^bb7
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %43 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
    %44 = cir.ptr_stride(%43 : !cir.ptr<!s32i>, %42 : !s32i), !cir.ptr<!s32i> loc(#loc31)
    %45 = cir.load %44 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @printIntLine(%45) : (!s32i) -> () loc(#loc32)
    cir.br ^bb10 loc(#loc28)
  ^bb9:  // pred: ^bb7
    %46 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc9)
  } loc(#loc101)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc116)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc48)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc52)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc52)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc52)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc52)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc52)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc52)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc52)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc52)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc52)
    cir.br ^bb4(%19 : !u32i) loc(#loc52)
  ^bb3:  // pred: ^bb1
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc52)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc52)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc52)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc52)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc52)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc52)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc52)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc52)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc52)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc52)
    cir.br ^bb4(%35 : !u32i) loc(#loc52)
  ^bb4(%36: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_18.c":61:12)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc52)
  ^bb5:  // pred: ^bb4
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc52)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.br ^bb6 loc(#loc120)
  ^bb6:  // pred: ^bb5
    %38 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc116)
    cir.store %38, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc116)
    cir.br ^bb7 loc(#loc121)
  ^bb7:  // pred: ^bb6
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %40 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %41 = cir.cmp(ge, %39, %40) : !s32i, !cir.bool loc(#loc122)
    cir.brcond %41 ^bb8, ^bb13 loc(#loc60)
  ^bb8:  // pred: ^bb7
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %43 = cir.const #cir.int<10> : !s32i loc(#loc62)
    %44 = cir.cmp(lt, %42, %43) : !s32i, !cir.bool loc(#loc123)
    cir.brcond %44 ^bb9, ^bb10 loc(#loc60)
  ^bb9:  // pred: ^bb8
    %45 = cir.const #true loc(#loc60)
    cir.br ^bb11(%45 : !cir.bool) loc(#loc60)
  ^bb10:  // pred: ^bb8
    %46 = cir.const #false loc(#loc60)
    cir.br ^bb11(%46 : !cir.bool) loc(#loc60)
  ^bb11(%47: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:23)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc60)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14(%47 : !cir.bool) loc(#loc60)
  ^bb13:  // pred: ^bb7
    %48 = cir.const #false loc(#loc60)
    cir.br ^bb14(%48 : !cir.bool) loc(#loc60)
  ^bb14(%49: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:23)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc60)
  ^bb15:  // pred: ^bb14
    cir.brcond %49 ^bb16, ^bb17 loc(#loc124)
  ^bb16:  // pred: ^bb15
    %50 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %51 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc68)
    %52 = cir.ptr_stride(%51 : !cir.ptr<!s32i>, %50 : !s32i), !cir.ptr<!s32i> loc(#loc68)
    %53 = cir.load %52 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    cir.call @printIntLine(%53) : (!s32i) -> () loc(#loc69)
    cir.br ^bb18 loc(#loc65)
  ^bb17:  // pred: ^bb15
    %54 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc40)
    %55 = cir.cast(array_to_ptrdecay, %54 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    cir.br ^bb18 loc(#loc57)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc57)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc42)
  } loc(#loc114)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc127)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc78)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<7> : !s32i loc(#loc82)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    cir.br ^bb2 loc(#loc131)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc127)
    cir.store %5, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc127)
    cir.br ^bb3 loc(#loc132)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc89)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc133)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc134)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %10 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc94)
    %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc94)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc95)
    cir.br ^bb6 loc(#loc91)
  ^bb5:  // pred: ^bb3
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc96)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc72)
  } loc(#loc125)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":43:23)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":22:1)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":46:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":24:5)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":24:9)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":34:9)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":34:30)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":26:13)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":26:12)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":26:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":27:5)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":27:10)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":30:5)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":31:5)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":31:10)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":37:9)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":44:9)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":37:13)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":37:20)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":38:9)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":40:9)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":42:9)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":39:33)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":39:26)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":39:13)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":43:13)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":106:1)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":110:1)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":108:5)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":108:13)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":109:5)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":109:13)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":73:23)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":53:1)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":76:1)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":55:5)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":55:9)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":65:9)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":65:30)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":57:13)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":57:12)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":57:5)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":58:5)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":58:10)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":61:5)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":62:5)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":62:10)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:9)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":74:9)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:13)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:21)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:26)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:34)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":67:36)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":68:9)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":70:9)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":72:9)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":69:33)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":69:26)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":69:13)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":73:13)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":79:1)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":104:1)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":81:5)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":81:9)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":92:9)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":92:30)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":83:13)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":83:12)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":83:5)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":84:5)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":84:10)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":88:12)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":88:5)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":89:5)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":89:10)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":95:9)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":102:9)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":95:13)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":95:20)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":96:9)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":98:9)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":100:9)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":97:33)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":97:26)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":97:13)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":101:23)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_18.c":101:13)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc5, #loc6])
#loc101 = loc(fused[#loc8, #loc9])
#loc102 = loc(fused[#loc10, #loc11])
#loc103 = loc(fused[#loc12, #loc13])
#loc104 = loc(fused[#loc16, #loc14])
#loc105 = loc(fused[#loc17, #loc18])
#loc106 = loc(fused[#loc20, #loc19])
#loc107 = loc(fused[#loc21, #loc22])
#loc108 = loc(fused[#loc23, #loc24])
#loc109 = loc(fused[#loc25, #loc26])
#loc110 = loc(fused[#loc27, #loc28, #loc29, #loc24])
#loc111 = loc(fused[#loc34, #loc35])
#loc112 = loc(fused[#loc36, #loc37])
#loc113 = loc(fused[#loc38, #loc39])
#loc114 = loc(fused[#loc41, #loc42])
#loc115 = loc(fused[#loc43, #loc44])
#loc116 = loc(fused[#loc45, #loc46])
#loc117 = loc(fused[#loc49, #loc47])
#loc118 = loc(fused[#loc50, #loc51])
#loc119 = loc(fused[#loc53, #loc52])
#loc120 = loc(fused[#loc54, #loc55])
#loc121 = loc(fused[#loc56, #loc57])
#loc122 = loc(fused[#loc58, #loc59])
#loc123 = loc(fused[#loc61, #loc63])
#loc124 = loc(fused[#loc64, #loc65, #loc66, #loc57])
#loc125 = loc(fused[#loc71, #loc72])
#loc126 = loc(fused[#loc73, #loc74])
#loc127 = loc(fused[#loc75, #loc76])
#loc128 = loc(fused[#loc79, #loc77])
#loc129 = loc(fused[#loc80, #loc81])
#loc130 = loc(fused[#loc83, #loc82])
#loc131 = loc(fused[#loc84, #loc85])
#loc132 = loc(fused[#loc86, #loc87])
#loc133 = loc(fused[#loc88, #loc89])
#loc134 = loc(fused[#loc90, #loc91, #loc92, #loc87])
