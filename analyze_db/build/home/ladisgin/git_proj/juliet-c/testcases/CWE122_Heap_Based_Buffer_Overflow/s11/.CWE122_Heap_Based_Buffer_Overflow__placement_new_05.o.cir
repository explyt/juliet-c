!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc74 = loc("../../../testcasesupport/std_testcase.h":68:7)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc305)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc306)
  cir.global "private" internal dsolocal @_ZL10staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc307)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc7)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc7)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc7)
    cir.return loc(#loc7)
  } loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc308)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc309)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_053badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc311)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc312)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc313)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc314)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc315)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc316)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc313)
    cir.br ^bb1 loc(#loc317)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc28)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc318)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc319)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc32)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb3 loc(#loc26)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc320)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc35)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc321)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc314)
    cir.br ^bb5 loc(#loc322)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc39)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc323)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc324)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc43)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
    cir.br ^bb7 loc(#loc37)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc37)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc325)
  ^bb9:  // pred: ^bb8
    %23 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc326)
  ^bb10:  // pred: ^bb9
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    cir.store %26, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc327)
    cir.br ^bb11 loc(#loc45)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc45)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc328)
  ^bb13:  // pred: ^bb12
    %27 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %29 ^bb14, ^bb17 loc(#loc329)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc330)
  ^bb15:  // pred: ^bb14
    %30 = cir.const #cir.int<8> : !u64i loc(#loc331)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc57)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc331)
    cir.call @_ZN12TwoIntsClassC2Ev(%33) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc15)
    cir.store %33, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc311)
    %34 = cir.const #cir.int<5> : !s32i loc(#loc58)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc59)
    %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
    cir.store %34, %36 : !s32i, !cir.ptr<!s32i> loc(#loc332)
    %37 = cir.const #cir.int<10> : !s32i loc(#loc61)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc62)
    %39 = cir.get_member %38[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc63)
    cir.store %37, %39 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc64)
    %41 = cir.get_member %40[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.call @printIntLine(%42) : (!s32i) -> () loc(#loc66)
    %43 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc67)
    %44 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
    cir.call @free(%45) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc67)
    cir.br ^bb16 loc(#loc55)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc51)
  ^bb17:  // 2 preds: ^bb13, ^bb16
    cir.br ^bb18 loc(#loc51)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc13)
  } loc(#loc310)
  cir.global "private" internal dsolocal @_ZL11staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc334)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc335)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc74)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc74)
    cir.return loc(#loc74)
  } loc(#loc74)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodB2G1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc337)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc338)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc339)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc340)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc85)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc341)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc342)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc339)
    cir.br ^bb1 loc(#loc343)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc91)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc344)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc345)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc93)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc95)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc93)
    cir.br ^bb3 loc(#loc89)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc346)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc347)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc340)
    cir.br ^bb5 loc(#loc348)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc102)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc349)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc350)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc104)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc106)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc104)
    cir.br ^bb7 loc(#loc100)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc100)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc351)
  ^bb9:  // pred: ^bb8
    %23 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc109)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc352)
  ^bb10:  // pred: ^bb9
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    cir.store %26, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc353)
    cir.br ^bb11 loc(#loc108)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc108)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc354)
  ^bb13:  // pred: ^bb12
    %27 = cir.get_global @_ZL11staticFalse : !cir.ptr<!s32i> loc(#loc334)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc115)
    cir.brcond %29 ^bb14, ^bb15 loc(#loc355)
  ^bb14:  // pred: ^bb13
    %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.br ^bb18 loc(#loc117)
  ^bb15:  // pred: ^bb13
    cir.br ^bb16 loc(#loc356)
  ^bb16:  // pred: ^bb15
    %32 = cir.const #cir.int<4> : !u64i loc(#loc357)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc123)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc357)
    cir.call @_ZN11OneIntClassC2Ev(%35) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc78)
    cir.store %35, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc337)
    %36 = cir.const #cir.int<5> : !s32i loc(#loc124)
    %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc125)
    %38 = cir.get_member %37[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc126)
    cir.store %36, %38 : !s32i, !cir.ptr<!s32i> loc(#loc358)
    %39 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc127)
    %40 = cir.get_member %39[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc126)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc129)
    %42 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc130)
    %43 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc131)
    cir.call @free(%44) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc130)
    cir.br ^bb17 loc(#loc121)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc114)
  ^bb18:  // 2 preds: ^bb14, ^bb17
    cir.br ^bb19 loc(#loc114)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc76)
  } loc(#loc336)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodB2G2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc360)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc361)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc362)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc363)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc142)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc364)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc142)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc365)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc362)
    cir.br ^bb1 loc(#loc366)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc148)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc367)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc368)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc150)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc152)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc150)
    cir.br ^bb3 loc(#loc146)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc146)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc369)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc370)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc363)
    cir.br ^bb5 loc(#loc371)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc159)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc372)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc373)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc161)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc163)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc161)
    cir.br ^bb7 loc(#loc157)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc157)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc374)
  ^bb9:  // pred: ^bb8
    %23 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc166)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc375)
  ^bb10:  // pred: ^bb9
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
    cir.store %26, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc376)
    cir.br ^bb11 loc(#loc165)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc165)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc377)
  ^bb13:  // pred: ^bb12
    %27 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc172)
    cir.brcond %29 ^bb14, ^bb17 loc(#loc378)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc379)
  ^bb15:  // pred: ^bb14
    %30 = cir.const #cir.int<4> : !u64i loc(#loc380)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc177)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc380)
    cir.call @_ZN11OneIntClassC2Ev(%33) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc135)
    cir.store %33, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc360)
    %34 = cir.const #cir.int<5> : !s32i loc(#loc178)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc179)
    %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc126)
    cir.store %34, %36 : !s32i, !cir.ptr<!s32i> loc(#loc381)
    %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc180)
    %38 = cir.get_member %37[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc126)
    %39 = cir.load %38 : !cir.ptr<!s32i>, !s32i loc(#loc181)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc182)
    %40 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc183)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc184)
    cir.call @free(%42) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc183)
    cir.br ^bb16 loc(#loc175)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc171)
  ^bb17:  // 2 preds: ^bb13, ^bb16
    cir.br ^bb18 loc(#loc171)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc133)
  } loc(#loc359)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodG2B1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc383)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc384)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc385)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc386)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc195)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc387)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc195)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc388)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc385)
    cir.br ^bb1 loc(#loc389)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc201)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc390)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc391)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc203)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc204)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc205)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc203)
    cir.br ^bb3 loc(#loc199)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc199)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc392)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc208)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc393)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc386)
    cir.br ^bb5 loc(#loc394)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc211)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc212)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc395)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc396)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc214)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc215)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc216)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc214)
    cir.br ^bb7 loc(#loc210)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc210)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc397)
  ^bb9:  // pred: ^bb8
    %23 = cir.get_global @_ZL11staticFalse : !cir.ptr<!s32i> loc(#loc334)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc219)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc398)
  ^bb10:  // pred: ^bb9
    %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc223)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc223)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc224)
    cir.br ^bb12 loc(#loc221)
  ^bb11:  // pred: ^bb9
    %28 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc225)
    cir.store %28, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc399)
    cir.br ^bb12 loc(#loc218)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc218)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc400)
  ^bb14:  // pred: ^bb13
    %29 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc229)
    %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc229)
    cir.brcond %31 ^bb15, ^bb18 loc(#loc401)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc402)
  ^bb16:  // pred: ^bb15
    %32 = cir.const #cir.int<8> : !u64i loc(#loc403)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc234)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc234)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc403)
    cir.call @_ZN12TwoIntsClassC2Ev(%35) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc188)
    cir.store %35, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc383)
    %36 = cir.const #cir.int<5> : !s32i loc(#loc235)
    %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc236)
    %38 = cir.get_member %37[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
    cir.store %36, %38 : !s32i, !cir.ptr<!s32i> loc(#loc404)
    %39 = cir.const #cir.int<10> : !s32i loc(#loc237)
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc238)
    %41 = cir.get_member %40[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc63)
    cir.store %39, %41 : !s32i, !cir.ptr<!s32i> loc(#loc405)
    %42 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc239)
    %43 = cir.get_member %42[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc240)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc241)
    %45 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc242)
    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc243)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc243)
    cir.call @free(%47) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc242)
    cir.br ^bb17 loc(#loc232)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc228)
  ^bb18:  // 2 preds: ^bb14, ^bb17
    cir.br ^bb19 loc(#loc228)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc186)
  } loc(#loc382)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodG2B2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc407)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc408)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc409)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc410)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc254)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc411)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc254)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc412)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc409)
    cir.br ^bb1 loc(#loc413)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc259)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc260)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc414)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc415)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc262)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc263)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc264)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc262)
    cir.br ^bb3 loc(#loc258)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc258)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc416)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc267)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc417)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc410)
    cir.br ^bb5 loc(#loc418)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc270)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc271)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc419)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc420)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc273)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc274)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc275)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc273)
    cir.br ^bb7 loc(#loc269)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc269)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc421)
  ^bb9:  // pred: ^bb8
    %23 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc278)
    %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc278)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc422)
  ^bb10:  // pred: ^bb9
    %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc280)
    cir.store %26, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc423)
    cir.br ^bb11 loc(#loc277)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc277)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc424)
  ^bb13:  // pred: ^bb12
    %27 = cir.get_global @_ZL10staticTrue : !cir.ptr<!s32i> loc(#loc307)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc284)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc284)
    cir.brcond %29 ^bb14, ^bb17 loc(#loc425)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc426)
  ^bb15:  // pred: ^bb14
    %30 = cir.const #cir.int<8> : !u64i loc(#loc427)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc289)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc289)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc427)
    cir.call @_ZN12TwoIntsClassC2Ev(%33) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc247)
    cir.store %33, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc407)
    %34 = cir.const #cir.int<5> : !s32i loc(#loc290)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc291)
    %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
    cir.store %34, %36 : !s32i, !cir.ptr<!s32i> loc(#loc428)
    %37 = cir.const #cir.int<10> : !s32i loc(#loc292)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc293)
    %39 = cir.get_member %38[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc63)
    cir.store %37, %39 : !s32i, !cir.ptr<!s32i> loc(#loc429)
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc294)
    %41 = cir.get_member %40[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc295)
    cir.call @printIntLine(%42) : (!s32i) -> () loc(#loc296)
    %43 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc297)
    %44 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc298)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc298)
    cir.call @free(%45) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc297)
    cir.br ^bb16 loc(#loc287)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc283)
  ^bb17:  // 2 preds: ^bb13, ^bb16
    cir.br ^bb18 loc(#loc283)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc245)
  } loc(#loc406)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_054goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodB2G1Ev() : () -> () loc(#loc301)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodB2G2Ev() : () -> () loc(#loc302)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodG2B1Ev() : () -> () loc(#loc303)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_05L8goodG2B2Ev() : () -> () loc(#loc304)
    cir.return loc(#loc300)
  } loc(#loc430)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":23:25)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":31:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":60:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":51:13)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":51:49)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":33:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":33:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:62)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:64)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:36)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:43)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":34:61)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:42)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:26)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:32)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:39)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":35:38)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:44)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:63)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":36:37)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:43)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:27)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:40)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":37:39)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":38:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":38:8)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":39:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":41:16)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":41:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":43:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":59:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":43:8)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":44:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":45:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":58:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":51:39)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":51:43)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":53:32)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":53:13)
#loc60 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":54:32)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":54:13)
#loc63 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":55:26)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":55:36)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":55:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":57:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":57:18)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":24:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":24:26)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":82:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":67:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":99:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":92:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":92:48)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":69:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":69:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:62)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:64)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:36)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:43)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":70:61)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:42)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:26)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:32)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:33)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:39)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":71:38)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:44)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:63)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":72:37)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:43)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:34)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:40)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":73:39)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":74:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":78:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":74:8)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":75:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":77:16)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":77:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":79:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":98:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":79:8)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":80:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":83:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":85:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":82:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":86:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":97:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":92:38)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":92:42)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":94:32)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":94:13)
#loc126 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":95:26)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":95:36)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":95:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":96:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":96:18)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":102:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":129:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":122:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":122:48)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":104:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":104:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:62)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:64)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:36)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:43)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":105:61)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:42)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:26)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:32)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:33)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:39)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":106:38)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:44)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:63)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":107:37)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:43)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:27)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:33)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:34)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:40)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":108:39)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":109:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":113:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":109:8)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":110:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":112:16)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":112:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":114:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":128:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":114:8)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":115:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":116:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":127:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":122:38)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":122:42)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":124:32)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":124:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":125:26)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":125:36)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":125:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":126:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":126:18)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":132:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":166:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":157:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":157:49)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":134:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":134:12)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:62)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:64)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:36)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:43)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":135:61)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:42)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:26)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:32)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:33)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:39)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":136:38)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:44)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:63)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":137:37)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:43)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:27)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:33)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:34)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:40)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":138:39)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":139:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":148:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":139:8)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":140:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":143:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":145:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":142:19)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":142:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":147:16)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":147:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":149:5)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":165:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":149:8)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":150:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":151:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":164:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":157:39)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":157:43)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":159:32)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":159:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":160:32)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":160:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":161:26)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":161:36)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":161:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":163:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":163:18)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":169:1)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":198:1)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":189:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":189:49)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":171:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":171:12)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:62)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:64)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:36)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:43)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":172:61)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:42)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:26)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:32)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:33)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:39)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":173:38)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:44)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:63)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":174:37)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:5)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:43)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:27)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:33)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:34)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:40)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":175:39)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":176:5)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":180:5)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":176:8)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":177:5)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":179:16)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":179:9)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":181:5)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":197:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":181:8)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":182:5)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":183:9)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":196:9)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":189:39)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":189:43)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":191:32)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":191:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":192:32)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":192:13)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":193:26)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":193:36)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":193:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":195:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":195:18)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":200:1)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":206:1)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":202:5)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":203:5)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":204:5)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_05.cpp":205:5)
#loc305 = loc(fused[#loc1, #loc2])
#loc306 = loc(fused[#loc3, #loc4])
#loc307 = loc(fused[#loc5, #loc6])
#loc308 = loc(fused[#loc8, #loc9])
#loc309 = loc(fused[#loc10, #loc11])
#loc310 = loc(fused[#loc12, #loc13])
#loc311 = loc(fused[#loc14, #loc15])
#loc312 = loc(fused[#loc16, #loc17])
#loc313 = loc(fused[#loc18, #loc19])
#loc314 = loc(fused[#loc20, #loc21])
#loc315 = loc(fused[#loc23, #loc24])
#loc316 = loc(fused[#loc22, #loc19])
#loc317 = loc(fused[#loc25, #loc26])
#loc318 = loc(fused[#loc27, #loc28])
#loc319 = loc(fused[#loc29, #loc26])
#loc320 = loc(fused[#loc33, #loc34])
#loc321 = loc(fused[#loc35, #loc21])
#loc322 = loc(fused[#loc36, #loc37])
#loc323 = loc(fused[#loc38, #loc39])
#loc324 = loc(fused[#loc40, #loc37])
#loc325 = loc(fused[#loc44, #loc45])
#loc326 = loc(fused[#loc47, #loc45])
#loc327 = loc(fused[#loc49, #loc48])
#loc328 = loc(fused[#loc50, #loc51])
#loc329 = loc(fused[#loc53, #loc51])
#loc330 = loc(fused[#loc54, #loc55])
#loc331 = loc(fused[#loc56, #loc15])
#loc332 = loc(fused[#loc59, #loc58])
#loc333 = loc(fused[#loc62, #loc61])
#loc334 = loc(fused[#loc69, #loc70])
#loc335 = loc(fused[#loc71, #loc72])
#loc336 = loc(fused[#loc75, #loc76])
#loc337 = loc(fused[#loc77, #loc78])
#loc338 = loc(fused[#loc79, #loc80])
#loc339 = loc(fused[#loc81, #loc82])
#loc340 = loc(fused[#loc83, #loc84])
#loc341 = loc(fused[#loc86, #loc87])
#loc342 = loc(fused[#loc85, #loc82])
#loc343 = loc(fused[#loc88, #loc89])
#loc344 = loc(fused[#loc90, #loc91])
#loc345 = loc(fused[#loc92, #loc89])
#loc346 = loc(fused[#loc96, #loc97])
#loc347 = loc(fused[#loc98, #loc84])
#loc348 = loc(fused[#loc99, #loc100])
#loc349 = loc(fused[#loc101, #loc102])
#loc350 = loc(fused[#loc103, #loc100])
#loc351 = loc(fused[#loc107, #loc108])
#loc352 = loc(fused[#loc110, #loc108])
#loc353 = loc(fused[#loc112, #loc111])
#loc354 = loc(fused[#loc113, #loc114])
#loc355 = loc(fused[#loc116, #loc117, #loc118, #loc114])
#loc356 = loc(fused[#loc120, #loc121])
#loc357 = loc(fused[#loc122, #loc78])
#loc358 = loc(fused[#loc125, #loc124])
#loc359 = loc(fused[#loc132, #loc133])
#loc360 = loc(fused[#loc134, #loc135])
#loc361 = loc(fused[#loc136, #loc137])
#loc362 = loc(fused[#loc138, #loc139])
#loc363 = loc(fused[#loc140, #loc141])
#loc364 = loc(fused[#loc143, #loc144])
#loc365 = loc(fused[#loc142, #loc139])
#loc366 = loc(fused[#loc145, #loc146])
#loc367 = loc(fused[#loc147, #loc148])
#loc368 = loc(fused[#loc149, #loc146])
#loc369 = loc(fused[#loc153, #loc154])
#loc370 = loc(fused[#loc155, #loc141])
#loc371 = loc(fused[#loc156, #loc157])
#loc372 = loc(fused[#loc158, #loc159])
#loc373 = loc(fused[#loc160, #loc157])
#loc374 = loc(fused[#loc164, #loc165])
#loc375 = loc(fused[#loc167, #loc165])
#loc376 = loc(fused[#loc169, #loc168])
#loc377 = loc(fused[#loc170, #loc171])
#loc378 = loc(fused[#loc173, #loc171])
#loc379 = loc(fused[#loc174, #loc175])
#loc380 = loc(fused[#loc176, #loc135])
#loc381 = loc(fused[#loc179, #loc178])
#loc382 = loc(fused[#loc185, #loc186])
#loc383 = loc(fused[#loc187, #loc188])
#loc384 = loc(fused[#loc189, #loc190])
#loc385 = loc(fused[#loc191, #loc192])
#loc386 = loc(fused[#loc193, #loc194])
#loc387 = loc(fused[#loc196, #loc197])
#loc388 = loc(fused[#loc195, #loc192])
#loc389 = loc(fused[#loc198, #loc199])
#loc390 = loc(fused[#loc200, #loc201])
#loc391 = loc(fused[#loc202, #loc199])
#loc392 = loc(fused[#loc206, #loc207])
#loc393 = loc(fused[#loc208, #loc194])
#loc394 = loc(fused[#loc209, #loc210])
#loc395 = loc(fused[#loc211, #loc212])
#loc396 = loc(fused[#loc213, #loc210])
#loc397 = loc(fused[#loc217, #loc218])
#loc398 = loc(fused[#loc220, #loc221, #loc222, #loc218])
#loc399 = loc(fused[#loc226, #loc225])
#loc400 = loc(fused[#loc227, #loc228])
#loc401 = loc(fused[#loc230, #loc228])
#loc402 = loc(fused[#loc231, #loc232])
#loc403 = loc(fused[#loc233, #loc188])
#loc404 = loc(fused[#loc236, #loc235])
#loc405 = loc(fused[#loc238, #loc237])
#loc406 = loc(fused[#loc244, #loc245])
#loc407 = loc(fused[#loc246, #loc247])
#loc408 = loc(fused[#loc248, #loc249])
#loc409 = loc(fused[#loc250, #loc251])
#loc410 = loc(fused[#loc252, #loc253])
#loc411 = loc(fused[#loc255, #loc256])
#loc412 = loc(fused[#loc254, #loc251])
#loc413 = loc(fused[#loc257, #loc258])
#loc414 = loc(fused[#loc259, #loc260])
#loc415 = loc(fused[#loc261, #loc258])
#loc416 = loc(fused[#loc265, #loc266])
#loc417 = loc(fused[#loc267, #loc253])
#loc418 = loc(fused[#loc268, #loc269])
#loc419 = loc(fused[#loc270, #loc271])
#loc420 = loc(fused[#loc272, #loc269])
#loc421 = loc(fused[#loc276, #loc277])
#loc422 = loc(fused[#loc279, #loc277])
#loc423 = loc(fused[#loc281, #loc280])
#loc424 = loc(fused[#loc282, #loc283])
#loc425 = loc(fused[#loc285, #loc283])
#loc426 = loc(fused[#loc286, #loc287])
#loc427 = loc(fused[#loc288, #loc247])
#loc428 = loc(fused[#loc291, #loc290])
#loc429 = loc(fused[#loc293, #loc292])
#loc430 = loc(fused[#loc299, #loc300])
