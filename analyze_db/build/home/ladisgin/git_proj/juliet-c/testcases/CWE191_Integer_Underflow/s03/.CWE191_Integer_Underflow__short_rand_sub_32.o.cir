!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc24 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":31:23)
#loc98 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":81:23)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_sub_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc117)
  cir.func private @printIntLine(!s32i) loc(#loc118)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_sub_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc120)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc121)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc122)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc123)
    %4 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc124)
    %5 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc125)
    cir.store %3, %4 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc124)
    cir.store %3, %5 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc125)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc19)
    cir.store %7, %3 : !s16i, !cir.ptr<!s16i> loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc8)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc120)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %12 = cir.binop(and, %10, %11) : !s32i loc(#loc24)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc24)
  ^bb2:  // pred: ^bb1
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc24)
    %16 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc24)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc24)
    %20 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc24)
    %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc24)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc24)
    %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc24)
    cir.br ^bb4(%25 : !u32i) loc(#loc24)
  ^bb3:  // pred: ^bb1
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc24)
    %28 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc24)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc24)
    %32 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %33 = cir.shift(left, %31 : !u32i, %32 : !s32i) -> !u32i loc(#loc24)
    %34 = cir.binop(xor, %29, %33) : !u32i loc(#loc24)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc24)
    %37 = cir.binop(xor, %34, %36) : !u32i loc(#loc24)
    %38 = cir.unary(minus, %37) : !u32i, !u32i loc(#loc24)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc24)
    %41 = cir.binop(sub, %38, %40) : !u32i loc(#loc24)
    cir.br ^bb4(%41 : !u32i) loc(#loc24)
  ^bb4(%42: !u32i loc("CWE191_Integer_Underflow__short_rand_sub_32.c":31:23)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc24)
  ^bb5:  // pred: ^bb4
    %43 = cir.cast(integral, %42 : !u32i), !s32i loc(#loc24)
    %44 = cir.cast(integral, %43 : !s32i), !s16i loc(#loc24)
    cir.store %44, %0 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    %45 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc26)
    %46 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc27)
    cir.store %45, %46 : !s16i, !cir.ptr<!s16i> loc(#loc129)
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc130)
  ^bb7:  // pred: ^bb6
    %47 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc10)
    %48 = cir.load %47 : !cir.ptr<!s16i>, !s16i loc(#loc31)
    cir.store %48, %1 : !s16i, !cir.ptr<!s16i> loc(#loc121)
    cir.br ^bb8 loc(#loc131)
  ^bb8:  // pred: ^bb7
    %49 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc34)
    %50 = cir.cast(integral, %49 : !s16i), !s32i loc(#loc34)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc34)
    %53 = cir.cast(integral, %52 : !s32i), !s16i loc(#loc34)
    cir.store %53, %2 : !s16i, !cir.ptr<!s16i> loc(#loc122)
    %54 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc35)
    %55 = cir.cast(integral, %54 : !s16i), !s32i loc(#loc35)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc36)
    cir.br ^bb9 loc(#loc33)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc30)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc119)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_sub_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc132)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc136)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc137)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc138)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc139)
    %4 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc140)
    %5 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc141)
    cir.store %3, %4 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc140)
    cir.store %3, %5 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc141)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc57)
    cir.store %7, %3 : !s16i, !cir.ptr<!s16i> loc(#loc142)
    cir.br ^bb1 loc(#loc143)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc46)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc61)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc136)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc62)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc63)
    %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc63)
    cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc144)
    %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc65)
    %14 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc66)
    cir.store %13, %14 : !s16i, !cir.ptr<!s16i> loc(#loc145)
    cir.br ^bb2 loc(#loc60)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc146)
  ^bb3:  // pred: ^bb2
    %15 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc48)
    %16 = cir.load %15 : !cir.ptr<!s16i>, !s16i loc(#loc70)
    cir.store %16, %1 : !s16i, !cir.ptr<!s16i> loc(#loc137)
    cir.br ^bb4 loc(#loc147)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc73)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc73)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc73)
    %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc73)
    cir.store %21, %2 : !s16i, !cir.ptr<!s16i> loc(#loc138)
    %22 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc74)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc74)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc75)
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc69)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc44)
  } loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc150)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc151)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc152)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc153)
    %4 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc154)
    %5 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc155)
    cir.store %3, %4 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc154)
    cir.store %3, %5 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc155)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc93)
    cir.store %7, %3 : !s16i, !cir.ptr<!s16i> loc(#loc156)
    cir.br ^bb1 loc(#loc157)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc82)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc97)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc150)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %12 = cir.binop(and, %10, %11) : !s32i loc(#loc98)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc98)
  ^bb2:  // pred: ^bb1
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc98)
    %16 = cir.const #cir.int<30> : !s32i loc(#loc98)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc98)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc98)
    %20 = cir.const #cir.int<15> : !s32i loc(#loc98)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc98)
    %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc98)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc98)
    %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc98)
    cir.br ^bb4(%25 : !u32i) loc(#loc98)
  ^bb3:  // pred: ^bb1
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc98)
    %28 = cir.const #cir.int<30> : !s32i loc(#loc98)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc98)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc98)
    %32 = cir.const #cir.int<15> : !s32i loc(#loc98)
    %33 = cir.shift(left, %31 : !u32i, %32 : !s32i) -> !u32i loc(#loc98)
    %34 = cir.binop(xor, %29, %33) : !u32i loc(#loc98)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc98)
    %37 = cir.binop(xor, %34, %36) : !u32i loc(#loc98)
    %38 = cir.unary(minus, %37) : !u32i, !u32i loc(#loc98)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc98)
    %41 = cir.binop(sub, %38, %40) : !u32i loc(#loc98)
    cir.br ^bb4(%41 : !u32i) loc(#loc98)
  ^bb4(%42: !u32i loc("CWE191_Integer_Underflow__short_rand_sub_32.c":81:23)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc98)
  ^bb5:  // pred: ^bb4
    %43 = cir.cast(integral, %42 : !u32i), !s32i loc(#loc98)
    %44 = cir.cast(integral, %43 : !s32i), !s16i loc(#loc98)
    cir.store %44, %0 : !s16i, !cir.ptr<!s16i> loc(#loc158)
    %45 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc100)
    %46 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc101)
    cir.store %45, %46 : !s16i, !cir.ptr<!s16i> loc(#loc159)
    cir.br ^bb6 loc(#loc96)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc160)
  ^bb7:  // pred: ^bb6
    %47 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc84)
    %48 = cir.load %47 : !cir.ptr<!s16i>, !s16i loc(#loc105)
    cir.store %48, %1 : !s16i, !cir.ptr<!s16i> loc(#loc151)
    cir.br ^bb8 loc(#loc161)
  ^bb8:  // pred: ^bb7
    %49 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc108)
    %50 = cir.cast(integral, %49 : !s16i), !s32i loc(#loc108)
    %51 = cir.const #cir.int<32767> : !s32i loc(#loc109)
    %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc109)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %54 = cir.binop(sub, %52, %53) nsw : !s32i loc(#loc109)
    %55 = cir.cmp(gt, %50, %54) : !s32i, !cir.bool loc(#loc162)
    cir.brcond %55 ^bb9, ^bb10 loc(#loc163)
  ^bb9:  // pred: ^bb8
    %56 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc113)
    %57 = cir.cast(integral, %56 : !s16i), !s32i loc(#loc113)
    %58 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %59 = cir.binop(sub, %57, %58) nsw : !s32i loc(#loc113)
    %60 = cir.cast(integral, %59 : !s32i), !s16i loc(#loc113)
    cir.store %60, %2 : !s16i, !cir.ptr<!s16i> loc(#loc152)
    %61 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc114)
    %62 = cir.cast(integral, %61 : !s16i), !s32i loc(#loc114)
    cir.call @printIntLine(%62) : (!s32i) -> () loc(#loc115)
    cir.br ^bb11 loc(#loc111)
  ^bb10:  // pred: ^bb8
    %63 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc78)
    %64 = cir.cast(array_to_ptrdecay, %63 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%64) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb11 loc(#loc107)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc107)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc104)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc80)
  } loc(#loc149)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_sub_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":42:1)
#loc7 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":29:9)
#loc8 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":29:23)
#loc9 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":35:9)
#loc10 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":35:23)
#loc11 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":38:13)
#loc12 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":38:35)
#loc13 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":24:5)
#loc14 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":24:11)
#loc15 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":25:5)
#loc16 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":25:24)
#loc17 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":26:5)
#loc18 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":26:24)
#loc19 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":27:12)
#loc20 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":27:5)
#loc21 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":28:5)
#loc22 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":33:5)
#loc23 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":29:22)
#loc25 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":31:9)
#loc26 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":32:21)
#loc27 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":32:10)
#loc28 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":32:9)
#loc29 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":34:5)
#loc30 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":41:5)
#loc31 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":35:22)
#loc32 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":36:9)
#loc33 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":40:9)
#loc34 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":38:28)
#loc35 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":39:26)
#loc36 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":39:13)
#loc37 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":99:1)
#loc38 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":103:1)
#loc39 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":101:5)
#loc40 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":101:13)
#loc41 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":102:5)
#loc42 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":102:13)
#loc43 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":49:1)
#loc44 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":69:1)
#loc45 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":56:9)
#loc46 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":56:23)
#loc47 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":62:9)
#loc48 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":62:23)
#loc49 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":65:13)
#loc50 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":65:35)
#loc51 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":51:5)
#loc52 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":51:11)
#loc53 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":52:5)
#loc54 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":52:24)
#loc55 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":53:5)
#loc56 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":53:24)
#loc57 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":54:12)
#loc58 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":54:5)
#loc59 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":55:5)
#loc60 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":60:5)
#loc61 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":56:22)
#loc62 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":58:17)
#loc63 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":58:16)
#loc64 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":58:9)
#loc65 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":59:21)
#loc66 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":59:10)
#loc67 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":59:9)
#loc68 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":61:5)
#loc69 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":68:5)
#loc70 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":62:22)
#loc71 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":63:9)
#loc72 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":67:9)
#loc73 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":65:28)
#loc74 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":66:26)
#loc75 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":66:13)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc77 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc78 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":94:23)
#loc79 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":72:1)
#loc80 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":97:1)
#loc81 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":79:9)
#loc82 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":79:23)
#loc83 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":85:9)
#loc84 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":85:23)
#loc85 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":89:13)
#loc86 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":89:35)
#loc87 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":74:5)
#loc88 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":74:11)
#loc89 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":75:5)
#loc90 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":75:24)
#loc91 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":76:5)
#loc92 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":76:24)
#loc93 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":77:12)
#loc94 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":77:5)
#loc95 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":78:5)
#loc96 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":83:5)
#loc97 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":79:22)
#loc99 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":81:9)
#loc100 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":82:21)
#loc101 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":82:10)
#loc102 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":82:9)
#loc103 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":84:5)
#loc104 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":96:5)
#loc105 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":85:22)
#loc106 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":87:9)
#loc107 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":95:9)
#loc108 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":87:13)
#loc109 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":87:20)
#loc110 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":88:9)
#loc111 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":91:9)
#loc112 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":93:9)
#loc113 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":89:28)
#loc114 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":90:26)
#loc115 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":90:13)
#loc116 = loc("CWE191_Integer_Underflow__short_rand_sub_32.c":94:13)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc9, #loc10])
#loc122 = loc(fused[#loc11, #loc12])
#loc123 = loc(fused[#loc13, #loc14])
#loc124 = loc(fused[#loc15, #loc16])
#loc125 = loc(fused[#loc17, #loc18])
#loc126 = loc(fused[#loc20, #loc19])
#loc127 = loc(fused[#loc21, #loc22])
#loc128 = loc(fused[#loc25, #loc24])
#loc129 = loc(fused[#loc28, #loc26])
#loc130 = loc(fused[#loc29, #loc30])
#loc131 = loc(fused[#loc32, #loc33])
#loc132 = loc(fused[#loc37, #loc38])
#loc133 = loc(fused[#loc39, #loc40])
#loc134 = loc(fused[#loc41, #loc42])
#loc135 = loc(fused[#loc43, #loc44])
#loc136 = loc(fused[#loc45, #loc46])
#loc137 = loc(fused[#loc47, #loc48])
#loc138 = loc(fused[#loc49, #loc50])
#loc139 = loc(fused[#loc51, #loc52])
#loc140 = loc(fused[#loc53, #loc54])
#loc141 = loc(fused[#loc55, #loc56])
#loc142 = loc(fused[#loc58, #loc57])
#loc143 = loc(fused[#loc59, #loc60])
#loc144 = loc(fused[#loc64, #loc62])
#loc145 = loc(fused[#loc67, #loc65])
#loc146 = loc(fused[#loc68, #loc69])
#loc147 = loc(fused[#loc71, #loc72])
#loc148 = loc(fused[#loc76, #loc77])
#loc149 = loc(fused[#loc79, #loc80])
#loc150 = loc(fused[#loc81, #loc82])
#loc151 = loc(fused[#loc83, #loc84])
#loc152 = loc(fused[#loc85, #loc86])
#loc153 = loc(fused[#loc87, #loc88])
#loc154 = loc(fused[#loc89, #loc90])
#loc155 = loc(fused[#loc91, #loc92])
#loc156 = loc(fused[#loc94, #loc93])
#loc157 = loc(fused[#loc95, #loc96])
#loc158 = loc(fused[#loc99, #loc98])
#loc159 = loc(fused[#loc102, #loc100])
#loc160 = loc(fused[#loc103, #loc104])
#loc161 = loc(fused[#loc106, #loc107])
#loc162 = loc(fused[#loc108, #loc109])
#loc163 = loc(fused[#loc110, #loc111, #loc112, #loc107])
