!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_15.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_15_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.const #cir.int<5> : !s32i loc(#loc18)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc18)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
          cir.break loc(#loc21)
        } loc(#loc17)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc23)
          cir.break loc(#loc24)
        } loc(#loc22)
        cir.yield loc(#loc14)
      } loc(#loc14)
    } loc(#loc76)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc6)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc6)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc6)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc6)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc6)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc6)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc6)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc6)
          %11 = cir.const #cir.int<42> : !s32i loc(#loc6)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc6)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc6)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc6)
        } loc(#loc6)
      } loc(#loc6)
    } loc(#loc6)
    cir.return loc(#loc8)
  } loc(#loc73)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc79)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc80)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc82)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc37)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc41)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc42)
        cir.case(default, []) {
          %5 = cir.const #cir.int<5> : !s32i loc(#loc47)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc47)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
          cir.break loc(#loc50)
        } loc(#loc46)
        cir.yield loc(#loc39)
      } loc(#loc39)
    } loc(#loc84)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc31)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc31)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc31)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc31)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc31)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc31)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc31)
          %11 = cir.const #cir.int<67> : !s32i loc(#loc31)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc31)
          %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc31)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc31)
        } loc(#loc31)
      } loc(#loc31)
    } loc(#loc31)
    cir.return loc(#loc33)
  } loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc57)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc61)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.const #cir.int<5> : !s32i loc(#loc63)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc64)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc63)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
          cir.break loc(#loc66)
        } loc(#loc62)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc69)
          cir.break loc(#loc70)
        } loc(#loc67)
        cir.yield loc(#loc59)
      } loc(#loc59)
    } loc(#loc89)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc51)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc51)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc51)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc51)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc51)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc51)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc51)
          %11 = cir.const #cir.int<88> : !s32i loc(#loc51)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc51)
          %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc51)
        } loc(#loc51)
      } loc(#loc51)
    } loc(#loc51)
    cir.return loc(#loc53)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_15.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_15.c":38:19)
#loc4 = loc("/usr/include/assert.h":69:1)
#loc5 = loc("/usr/include/assert.h":71:43)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_15.c":42:5)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_15.c":25:1)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_15.c":43:1)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_15.c":27:5)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_15.c":27:9)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_15.c":29:13)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_15.c":29:12)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_15.c":29:5)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_15.c":30:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_15.c":40:5)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_15.c":30:12)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_15.c":32:5)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_15.c":34:16)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_15.c":34:29)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_15.c":34:9)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_15.c":35:9)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_15.c":36:5)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_15.c":38:9)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_15.c":39:9)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_15.c":91:1)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_15.c":95:1)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_15.c":93:5)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_15.c":93:14)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_15.c":94:5)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_15.c":94:14)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_15.c":67:5)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_15.c":50:1)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_15.c":68:1)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_15.c":52:5)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_15.c":52:9)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_15.c":54:13)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_15.c":54:12)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_15.c":54:5)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_15.c":55:5)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_15.c":65:5)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_15.c":55:12)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_15.c":57:5)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_15.c":59:19)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_15.c":59:9)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_15.c":60:9)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_15.c":61:5)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_15.c":63:16)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_15.c":63:29)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_15.c":63:9)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_15.c":64:9)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_15.c":88:5)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_15.c":71:1)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_15.c":89:1)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_15.c":73:5)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_15.c":73:9)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_15.c":75:13)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_15.c":75:12)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_15.c":75:5)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_15.c":76:5)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_15.c":86:5)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_15.c":76:12)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_15.c":78:5)
#loc63 = loc("CWE617_Reachable_Assertion__fixed_15.c":80:16)
#loc64 = loc("CWE617_Reachable_Assertion__fixed_15.c":80:29)
#loc65 = loc("CWE617_Reachable_Assertion__fixed_15.c":80:9)
#loc66 = loc("CWE617_Reachable_Assertion__fixed_15.c":81:9)
#loc67 = loc("CWE617_Reachable_Assertion__fixed_15.c":82:5)
#loc68 = loc("CWE617_Reachable_Assertion__fixed_15.c":84:19)
#loc69 = loc("CWE617_Reachable_Assertion__fixed_15.c":84:9)
#loc70 = loc("CWE617_Reachable_Assertion__fixed_15.c":85:9)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc4, #loc5])
#loc73 = loc(fused[#loc7, #loc8])
#loc74 = loc(fused[#loc9, #loc10])
#loc75 = loc(fused[#loc13, #loc11])
#loc76 = loc(fused[#loc14, #loc15])
#loc77 = loc(fused[#loc20, #loc19])
#loc78 = loc(fused[#loc25, #loc26])
#loc79 = loc(fused[#loc27, #loc28])
#loc80 = loc(fused[#loc29, #loc30])
#loc81 = loc(fused[#loc32, #loc33])
#loc82 = loc(fused[#loc34, #loc35])
#loc83 = loc(fused[#loc38, #loc36])
#loc84 = loc(fused[#loc39, #loc40])
#loc85 = loc(fused[#loc49, #loc48])
#loc86 = loc(fused[#loc52, #loc53])
#loc87 = loc(fused[#loc54, #loc55])
#loc88 = loc(fused[#loc58, #loc56])
#loc89 = loc(fused[#loc59, #loc60])
#loc90 = loc(fused[#loc65, #loc64])
