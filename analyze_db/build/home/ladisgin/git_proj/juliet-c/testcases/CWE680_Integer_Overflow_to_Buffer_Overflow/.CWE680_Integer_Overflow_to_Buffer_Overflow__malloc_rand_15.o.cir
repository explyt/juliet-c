!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":30:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc192)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc193)
  cir.func private @printIntLine(!s32i) loc(#loc194)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc195)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc199)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc23)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<6> : !s32i loc(#loc27)
    cir.br ^bb2 loc(#loc25)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %5 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc25)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc29)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc29)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc29)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc29)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc29)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc29)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc29)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc29)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc29)
    cir.br ^bb7(%21 : !u32i) loc(#loc29)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc29)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc29)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc29)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc29)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc29)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc29)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc29)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc29)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc29)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc29)
    cir.br ^bb7(%37 : !u32i) loc(#loc29)
  ^bb7(%38: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":30:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc29)
    cir.store %39, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb10 loc(#loc31)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    cir.br ^bb10 loc(#loc33)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc26)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc203)
  ^bb12:  // pred: ^bb11
    %42 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc36)
    %43 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc37)
    %45 = cir.const #cir.int<4> : !u64i loc(#loc204)
    %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc205)
    %47 = cir.call @malloc(%46) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc36)
    %48 = cir.cast(bitcast, %47 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc206)
    cir.store %48, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc207)
    cir.br ^bb13 loc(#loc208)
  ^bb13:  // pred: ^bb12
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %50 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
    %52 = cir.cmp(eq, %49, %51) : !cir.ptr<!s32i>, !cir.bool loc(#loc209)
    cir.brcond %52 ^bb14, ^bb15 loc(#loc210)
  ^bb14:  // pred: ^bb13
    %53 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc47)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc49)
    cir.call @exit(%55) : (!s32i) -> () extra(#fn_attr) loc(#loc47)
    cir.br ^bb15 loc(#loc43)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc43)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc211)
  ^bb17:  // pred: ^bb16
    %56 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc52)
    cir.store %57, %0 : !u64i, !cir.ptr<!u64i> loc(#loc212)
    cir.br ^bb18 loc(#loc211)
  ^bb18:  // 2 preds: ^bb17, ^bb22
    %58 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc54)
    %59 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %60 = cir.cast(integral, %59 : !s32i), !u64i loc(#loc55)
    %61 = cir.cmp(lt, %58, %60) : !u64i, !cir.bool loc(#loc213)
    cir.brcond %61 ^bb19, ^bb23 loc(#loc56)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc214)
  ^bb20:  // pred: ^bb19
    %62 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %63 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    %64 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc60)
    %65 = cir.ptr_stride(%63 : !cir.ptr<!s32i>, %64 : !u64i), !cir.ptr<!s32i> loc(#loc61)
    cir.store %62, %65 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.br ^bb21 loc(#loc51)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc51)
  ^bb22:  // pred: ^bb21
    %66 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc62)
    %67 = cir.unary(inc, %66) : !u64i, !u64i loc(#loc63)
    cir.store %67, %0 : !u64i, !cir.ptr<!u64i> loc(#loc216)
    cir.br ^bb18 loc(#loc211)
  ^bb23:  // pred: ^bb18
    cir.br ^bb24 loc(#loc51)
  ^bb24:  // pred: ^bb23
    %68 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    %69 = cir.const #cir.int<0> : !s32i loc(#loc65)
    %70 = cir.ptr_stride(%68 : !cir.ptr<!s32i>, %69 : !s32i), !cir.ptr<!s32i> loc(#loc66)
    %71 = cir.load %70 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.call @printIntLine(%71) : (!s32i) -> () loc(#loc67)
    %72 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
    %73 = cir.cast(bitcast, %72 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc68)
    cir.call @free(%73) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
    cir.br ^bb25 loc(#loc35)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc15)
  } loc(#loc196)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc71)
  } loc(#loc217)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc223)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc85)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb1 loc(#loc225)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc89)
    cir.br ^bb2 loc(#loc87)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %5 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc87)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc91)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    cir.br ^bb6 loc(#loc93)
  ^bb5:  // pred: ^bb2
    %8 = cir.const #cir.int<20> : !s32i loc(#loc94)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.br ^bb6 loc(#loc96)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc88)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc227)
  ^bb8:  // pred: ^bb7
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc99)
    %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc100)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc228)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc229)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc230)
    cir.store %15, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc231)
    cir.br ^bb9 loc(#loc232)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc108)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc233)
    cir.brcond %19 ^bb10, ^bb11 loc(#loc234)
  ^bb10:  // pred: ^bb9
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc110)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc112)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
    cir.br ^bb11 loc(#loc106)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc106)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc235)
  ^bb13:  // pred: ^bb12
    %23 = cir.const #cir.int<0> : !s32i loc(#loc115)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc115)
    cir.store %24, %0 : !u64i, !cir.ptr<!u64i> loc(#loc236)
    cir.br ^bb14 loc(#loc235)
  ^bb14:  // 2 preds: ^bb13, ^bb18
    %25 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc117)
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc118)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc237)
    cir.brcond %28 ^bb15, ^bb19 loc(#loc119)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc238)
  ^bb16:  // pred: ^bb15
    %29 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
    %31 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc123)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc124)
    cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.br ^bb17 loc(#loc114)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc114)
  ^bb18:  // pred: ^bb17
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc125)
    %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc126)
    cir.store %34, %0 : !u64i, !cir.ptr<!u64i> loc(#loc240)
    cir.br ^bb14 loc(#loc235)
  ^bb19:  // pred: ^bb14
    cir.br ^bb20 loc(#loc114)
  ^bb20:  // pred: ^bb19
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc129)
    %38 = cir.load %37 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc130)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc131)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc132)
    cir.br ^bb21 loc(#loc98)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc77)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc243)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc244)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc142)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    cir.br ^bb1 loc(#loc246)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<6> : !s32i loc(#loc146)
    cir.br ^bb2 loc(#loc144)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %5 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc144)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc147)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %6 = cir.const #cir.int<20> : !s32i loc(#loc148)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb6 loc(#loc150)
  ^bb5:  // pred: ^bb2
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    cir.br ^bb6 loc(#loc153)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc145)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc248)
  ^bb8:  // pred: ^bb7
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc156)
    %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc157)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc249)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc250)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc156)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc251)
    cir.store %15, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc252)
    cir.br ^bb9 loc(#loc253)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc164)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc165)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc165)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc254)
    cir.brcond %19 ^bb10, ^bb11 loc(#loc255)
  ^bb10:  // pred: ^bb9
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc169)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
    cir.br ^bb11 loc(#loc163)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc163)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc256)
  ^bb13:  // pred: ^bb12
    %23 = cir.const #cir.int<0> : !s32i loc(#loc172)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc172)
    cir.store %24, %0 : !u64i, !cir.ptr<!u64i> loc(#loc257)
    cir.br ^bb14 loc(#loc256)
  ^bb14:  // 2 preds: ^bb13, ^bb18
    %25 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc174)
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc175)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc175)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc258)
    cir.brcond %28 ^bb15, ^bb19 loc(#loc176)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc259)
  ^bb16:  // pred: ^bb15
    %29 = cir.const #cir.int<0> : !s32i loc(#loc178)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
    %31 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc180)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc181)
    cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    cir.br ^bb17 loc(#loc171)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc171)
  ^bb18:  // pred: ^bb17
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc182)
    %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc183)
    cir.store %34, %0 : !u64i, !cir.ptr<!u64i> loc(#loc261)
    cir.br ^bb14 loc(#loc256)
  ^bb19:  // pred: ^bb14
    cir.br ^bb20 loc(#loc171)
  ^bb20:  // pred: ^bb19
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc184)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc185)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc186)
    %38 = cir.load %37 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc187)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc188)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc189)
    cir.br ^bb21 loc(#loc155)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc134)
  } loc(#loc241)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":34:19)
#loc6 = loc("/usr/include/stdlib.h":672:1)
#loc7 = loc("/usr/include/stdlib.h":672:45)
#loc8 = loc("/usr/include/stdlib.h":756:1)
#loc9 = loc("/usr/include/stdlib.h":756:70)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":21:1)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":51:1)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":38:9)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":38:16)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":39:9)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":39:14)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":23:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":23:9)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":25:13)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":25:12)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":25:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":26:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":36:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":26:12)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":28:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":30:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":31:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":34:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":35:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":37:5)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":50:5)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":42:28)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":42:35)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":42:42)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":42:52)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":42:53)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":42:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":43:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":43:43)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":43:13)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":43:27)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":43:33)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":43:34)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":43:40)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":43:39)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":44:9)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":47:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":44:18)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":44:14)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":44:21)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":44:33)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":44:23)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":45:9)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":46:29)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":46:13)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":46:24)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":46:25)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":44:40)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":44:39)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":48:22)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":48:33)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":48:34)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":48:9)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":49:14)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":49:9)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":123:1)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":127:1)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":125:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":125:14)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":126:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":126:14)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":58:1)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":88:1)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":75:9)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":75:16)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":76:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":76:14)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":60:5)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":60:9)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":62:13)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":62:12)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":62:5)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":63:5)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":73:5)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":63:12)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":65:5)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":67:19)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":67:9)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":68:9)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":71:16)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":71:9)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":72:9)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":74:5)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":87:5)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":79:28)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":79:35)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":79:42)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":79:52)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":79:53)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":79:9)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":80:9)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":80:43)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":80:13)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":80:27)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":80:33)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":80:34)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":80:40)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":80:39)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":81:9)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":84:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":81:18)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":81:14)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":81:21)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":81:33)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":81:23)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":82:9)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":83:29)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":83:13)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":83:24)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":83:25)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":81:40)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":81:39)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":85:22)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":85:33)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":85:34)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":85:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":86:14)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":86:9)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":91:1)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":121:1)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":108:9)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":108:16)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":109:9)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":109:14)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":93:5)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":93:9)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":95:13)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":95:12)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":95:5)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":96:5)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":106:5)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":96:12)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":98:5)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":100:16)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":100:9)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":101:9)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":104:19)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":104:9)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":105:9)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":107:5)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":120:5)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":112:28)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":112:35)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":112:42)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":112:52)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":112:53)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":112:9)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":113:9)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":113:43)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":113:13)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":113:27)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":113:33)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":113:34)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":113:40)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":113:39)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":114:9)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":117:9)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":114:18)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":114:14)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":114:21)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":114:33)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":114:23)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":115:9)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":116:29)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":116:13)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":116:24)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":116:25)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":114:40)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":114:39)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":118:22)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":118:33)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":118:34)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":118:9)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":119:14)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_15.c":119:9)
#loc190 = loc(fused[#loc1, #loc2])
#loc191 = loc(fused[#loc3, #loc4])
#loc192 = loc(fused[#loc6, #loc7])
#loc193 = loc(fused[#loc8, #loc9])
#loc194 = loc(fused[#loc10, #loc11])
#loc195 = loc(fused[#loc12, #loc13])
#loc196 = loc(fused[#loc14, #loc15])
#loc197 = loc(fused[#loc16, #loc17])
#loc198 = loc(fused[#loc18, #loc19])
#loc199 = loc(fused[#loc20, #loc21])
#loc200 = loc(fused[#loc24, #loc22])
#loc201 = loc(fused[#loc25, #loc26])
#loc202 = loc(fused[#loc30, #loc29])
#loc203 = loc(fused[#loc34, #loc35])
#loc204 = loc(fused[#loc38, #loc39])
#loc205 = loc(fused[#loc37, #loc39])
#loc206 = loc(fused[#loc36, #loc40])
#loc207 = loc(fused[#loc41, #loc40])
#loc208 = loc(fused[#loc42, #loc43])
#loc209 = loc(fused[#loc44, #loc45])
#loc210 = loc(fused[#loc46, #loc43])
#loc211 = loc(fused[#loc50, #loc51])
#loc212 = loc(fused[#loc53, #loc52])
#loc213 = loc(fused[#loc54, #loc55])
#loc214 = loc(fused[#loc57, #loc51])
#loc215 = loc(fused[#loc59, #loc58])
#loc216 = loc(fused[#loc63, #loc62])
#loc217 = loc(fused[#loc70, #loc71])
#loc218 = loc(fused[#loc72, #loc73])
#loc219 = loc(fused[#loc74, #loc75])
#loc220 = loc(fused[#loc76, #loc77])
#loc221 = loc(fused[#loc78, #loc79])
#loc222 = loc(fused[#loc80, #loc81])
#loc223 = loc(fused[#loc82, #loc83])
#loc224 = loc(fused[#loc86, #loc84])
#loc225 = loc(fused[#loc87, #loc88])
#loc226 = loc(fused[#loc95, #loc94])
#loc227 = loc(fused[#loc97, #loc98])
#loc228 = loc(fused[#loc101, #loc102])
#loc229 = loc(fused[#loc100, #loc102])
#loc230 = loc(fused[#loc99, #loc103])
#loc231 = loc(fused[#loc104, #loc103])
#loc232 = loc(fused[#loc105, #loc106])
#loc233 = loc(fused[#loc107, #loc108])
#loc234 = loc(fused[#loc109, #loc106])
#loc235 = loc(fused[#loc113, #loc114])
#loc236 = loc(fused[#loc116, #loc115])
#loc237 = loc(fused[#loc117, #loc118])
#loc238 = loc(fused[#loc120, #loc114])
#loc239 = loc(fused[#loc122, #loc121])
#loc240 = loc(fused[#loc126, #loc125])
#loc241 = loc(fused[#loc133, #loc134])
#loc242 = loc(fused[#loc135, #loc136])
#loc243 = loc(fused[#loc137, #loc138])
#loc244 = loc(fused[#loc139, #loc140])
#loc245 = loc(fused[#loc143, #loc141])
#loc246 = loc(fused[#loc144, #loc145])
#loc247 = loc(fused[#loc149, #loc148])
#loc248 = loc(fused[#loc154, #loc155])
#loc249 = loc(fused[#loc158, #loc159])
#loc250 = loc(fused[#loc157, #loc159])
#loc251 = loc(fused[#loc156, #loc160])
#loc252 = loc(fused[#loc161, #loc160])
#loc253 = loc(fused[#loc162, #loc163])
#loc254 = loc(fused[#loc164, #loc165])
#loc255 = loc(fused[#loc166, #loc163])
#loc256 = loc(fused[#loc170, #loc171])
#loc257 = loc(fused[#loc173, #loc172])
#loc258 = loc(fused[#loc174, #loc175])
#loc259 = loc(fused[#loc177, #loc171])
#loc260 = loc(fused[#loc179, #loc178])
#loc261 = loc(fused[#loc183, #loc182])
