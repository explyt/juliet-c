!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_sub_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc180)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printIntLine(!s32i) loc(#loc182)
  cir.func no_proto  @CWE191_Integer_Underflow__short_rand_sub_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc184)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc12)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc185)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc17)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
        %8 = cir.ternary(%7, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc17)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc17)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc17)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc17)
          cir.yield %22 : !u32i loc(#loc17)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc17)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc17)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc17)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc17)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc17)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc17)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc17)
          cir.yield %26 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc17)
        %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc17)
        cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc187)
        cir.break loc(#loc19)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc20)
        cir.break loc(#loc21)
      }
      ] loc(#loc14)
    } loc(#loc186)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc24)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc190)
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc29)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc29)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc28)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc29)
          %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc29)
          cir.store %9, %4 : !s16i, !cir.ptr<!s16i> loc(#loc190)
          %10 = cir.load %4 : !cir.ptr<!s16i>, !s16i loc(#loc30)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc30)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc31)
        } loc(#loc189)
        cir.break loc(#loc32)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc34)
        cir.break loc(#loc35)
      }
      ] loc(#loc22)
    } loc(#loc188)
    cir.return loc(#loc9)
  } loc(#loc183)
  cir.func no_proto  @CWE191_Integer_Underflow__short_rand_sub_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc191)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc197)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc51)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc198)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc55)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc56)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc56)
        %8 = cir.ternary(%7, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc56)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc56)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc56)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc56)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc56)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc56)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc56)
          cir.yield %22 : !u32i loc(#loc56)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc56)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc56)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc56)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc56)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc56)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc56)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc56)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc56)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc56)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc56)
          cir.yield %26 : !u32i loc(#loc56)
        }) : (!cir.bool) -> !u32i loc(#loc56)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc56)
        %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc56)
        cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc200)
        cir.break loc(#loc58)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc59)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc59)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc60)
        cir.break loc(#loc61)
      }
      ] loc(#loc53)
    } loc(#loc199)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc64)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc66)
        cir.break loc(#loc67)
      },
      case (default) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc70)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc70)
          %6 = cir.const #cir.int<32767> : !s32i loc(#loc71)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc71)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc71)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc71)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !s32i loc(#loc203)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc72)
          cir.if %11 {
            %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc205)
            %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc78)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc78)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc77)
            %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc78)
            %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc78)
            cir.store %17, %12 : !s16i, !cir.ptr<!s16i> loc(#loc205)
            %18 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc79)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc79)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc80)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc46)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc46)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc81)
          } loc(#loc204)
        } loc(#loc202)
        cir.break loc(#loc82)
      }
      ] loc(#loc62)
    } loc(#loc201)
    cir.return loc(#loc48)
  } loc(#loc196)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc207)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc87)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc208)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc91)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc92)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc92)
        %8 = cir.ternary(%7, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc92)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc92)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc92)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc92)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc92)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc92)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc92)
          cir.yield %22 : !u32i loc(#loc92)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc92)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc92)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc92)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc92)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc92)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc92)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc92)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc92)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc92)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc92)
          cir.yield %26 : !u32i loc(#loc92)
        }) : (!cir.bool) -> !u32i loc(#loc92)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc92)
        %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc92)
        cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc210)
        cir.break loc(#loc94)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc96)
        cir.break loc(#loc97)
      }
      ] loc(#loc89)
    } loc(#loc209)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc100)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc103)
          %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc103)
          %6 = cir.const #cir.int<32767> : !s32i loc(#loc104)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc104)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc104)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !s32i loc(#loc213)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc105)
          cir.if %11 {
            %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc215)
            %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc111)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc111)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc111)
            %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc111)
            cir.store %17, %12 : !s16i, !cir.ptr<!s16i> loc(#loc215)
            %18 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc112)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc112)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc113)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc114)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc114)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc115)
          } loc(#loc214)
        } loc(#loc212)
        cir.break loc(#loc116)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc117)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc117)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc118)
        cir.break loc(#loc119)
      }
      ] loc(#loc98)
    } loc(#loc211)
    cir.return loc(#loc84)
  } loc(#loc206)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc217)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc124)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc218)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc128)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc129)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc129)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc130)
        cir.break loc(#loc131)
      },
      case (default) {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc132)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc133)
        %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc133)
        cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc220)
        cir.break loc(#loc135)
      }
      ] loc(#loc126)
    } loc(#loc219)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc138)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc223)
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc143)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc143)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc142)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc143)
          %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc143)
          cir.store %9, %4 : !s16i, !cir.ptr<!s16i> loc(#loc223)
          %10 = cir.load %4 : !cir.ptr<!s16i>, !s16i loc(#loc144)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc144)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc145)
        } loc(#loc222)
        cir.break loc(#loc146)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc148)
        cir.break loc(#loc149)
      }
      ] loc(#loc136)
    } loc(#loc221)
    cir.return loc(#loc121)
  } loc(#loc216)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc225)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc154)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc226)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc158)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc159)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc160)
        %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc160)
        cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc228)
        cir.break loc(#loc162)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc163)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc163)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc164)
        cir.break loc(#loc165)
      }
      ] loc(#loc156)
    } loc(#loc227)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc168)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc231)
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc173)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc173)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc172)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc173)
          %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc173)
          cir.store %9, %4 : !s16i, !cir.ptr<!s16i> loc(#loc231)
          %10 = cir.load %4 : !cir.ptr<!s16i>, !s16i loc(#loc174)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc174)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc175)
        } loc(#loc230)
        cir.break loc(#loc176)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc177)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc177)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc178)
        cir.break loc(#loc179)
      }
      ] loc(#loc166)
    } loc(#loc229)
    cir.return loc(#loc151)
  } loc(#loc224)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_sub_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":34:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":51:1)
#loc10 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":24:11)
#loc12 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":25:12)
#loc13 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":25:5)
#loc14 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":26:5)
#loc15 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":36:5)
#loc16 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":26:12)
#loc17 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":30:23)
#loc18 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":30:9)
#loc19 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":31:9)
#loc20 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":34:9)
#loc21 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":35:9)
#loc22 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":37:5)
#loc23 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":50:5)
#loc24 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":37:12)
#loc25 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":40:5)
#loc26 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":44:5)
#loc27 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":42:9)
#loc28 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":42:31)
#loc29 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":42:24)
#loc30 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":43:22)
#loc31 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":43:9)
#loc32 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":45:5)
#loc33 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":48:19)
#loc34 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":48:9)
#loc35 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":49:9)
#loc36 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":195:1)
#loc37 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":201:1)
#loc38 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":197:5)
#loc39 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":197:14)
#loc40 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":198:5)
#loc41 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":198:14)
#loc42 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":199:5)
#loc43 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":199:14)
#loc44 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":200:5)
#loc45 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":200:14)
#loc46 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":88:23)
#loc47 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":58:1)
#loc48 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":92:1)
#loc49 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":60:5)
#loc50 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":60:11)
#loc51 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":61:12)
#loc52 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":61:5)
#loc53 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":62:5)
#loc54 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":72:5)
#loc55 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":62:12)
#loc56 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":66:23)
#loc57 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":66:9)
#loc58 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":67:9)
#loc59 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":70:19)
#loc60 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":70:9)
#loc61 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":71:9)
#loc62 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":73:5)
#loc63 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":91:5)
#loc64 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":73:12)
#loc65 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":77:19)
#loc66 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":77:9)
#loc67 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":78:9)
#loc68 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":81:9)
#loc69 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":89:9)
#loc70 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":81:13)
#loc71 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":81:20)
#loc72 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":81:18)
#loc73 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":82:9)
#loc74 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":85:9)
#loc75 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":87:9)
#loc76 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":83:13)
#loc77 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":83:35)
#loc78 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":83:28)
#loc79 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":84:26)
#loc80 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":84:13)
#loc81 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":88:13)
#loc82 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":90:9)
#loc83 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":95:1)
#loc84 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":129:1)
#loc85 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":97:5)
#loc86 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":97:11)
#loc87 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":98:12)
#loc88 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":98:5)
#loc89 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":99:5)
#loc90 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":109:5)
#loc91 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":99:12)
#loc92 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":103:23)
#loc93 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":103:9)
#loc94 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":104:9)
#loc95 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":107:19)
#loc96 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":107:9)
#loc97 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":108:9)
#loc98 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":110:5)
#loc99 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":128:5)
#loc100 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":110:12)
#loc101 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":114:9)
#loc102 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":122:9)
#loc103 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":114:13)
#loc104 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":114:20)
#loc105 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":114:18)
#loc106 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":115:9)
#loc107 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":118:9)
#loc108 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":120:9)
#loc109 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":116:13)
#loc110 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":116:35)
#loc111 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":116:28)
#loc112 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":117:26)
#loc113 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":117:13)
#loc114 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":121:23)
#loc115 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":121:13)
#loc116 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":123:9)
#loc117 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":126:19)
#loc118 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":126:9)
#loc119 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":127:9)
#loc120 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":132:1)
#loc121 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":161:1)
#loc122 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":134:5)
#loc123 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":134:11)
#loc124 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":135:12)
#loc125 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":135:5)
#loc126 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":136:5)
#loc127 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":146:5)
#loc128 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":136:12)
#loc129 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":140:19)
#loc130 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":140:9)
#loc131 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":141:9)
#loc132 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":144:17)
#loc133 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":144:16)
#loc134 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":144:9)
#loc135 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":145:9)
#loc136 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":147:5)
#loc137 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":160:5)
#loc138 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":147:12)
#loc139 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":150:5)
#loc140 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":154:5)
#loc141 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":152:9)
#loc142 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":152:31)
#loc143 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":152:24)
#loc144 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":153:22)
#loc145 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":153:9)
#loc146 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":155:5)
#loc147 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":158:19)
#loc148 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":158:9)
#loc149 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":159:9)
#loc150 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":164:1)
#loc151 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":193:1)
#loc152 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":166:5)
#loc153 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":166:11)
#loc154 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":167:12)
#loc155 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":167:5)
#loc156 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":168:5)
#loc157 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":178:5)
#loc158 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":168:12)
#loc159 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":172:17)
#loc160 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":172:16)
#loc161 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":172:9)
#loc162 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":173:9)
#loc163 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":176:19)
#loc164 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":176:9)
#loc165 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":177:9)
#loc166 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":179:5)
#loc167 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":192:5)
#loc168 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":179:12)
#loc169 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":182:5)
#loc170 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":186:5)
#loc171 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":184:9)
#loc172 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":184:31)
#loc173 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":184:24)
#loc174 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":185:22)
#loc175 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":185:9)
#loc176 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":187:5)
#loc177 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":190:19)
#loc178 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":190:9)
#loc179 = loc("CWE191_Integer_Underflow__short_rand_sub_15.c":191:9)
#loc180 = loc(fused[#loc1, #loc2])
#loc181 = loc(fused[#loc3, #loc4])
#loc182 = loc(fused[#loc6, #loc7])
#loc183 = loc(fused[#loc8, #loc9])
#loc184 = loc(fused[#loc10, #loc11])
#loc185 = loc(fused[#loc13, #loc12])
#loc186 = loc(fused[#loc14, #loc15])
#loc187 = loc(fused[#loc18, #loc17])
#loc188 = loc(fused[#loc22, #loc23])
#loc189 = loc(fused[#loc25, #loc26])
#loc190 = loc(fused[#loc27, #loc28])
#loc191 = loc(fused[#loc36, #loc37])
#loc192 = loc(fused[#loc38, #loc39])
#loc193 = loc(fused[#loc40, #loc41])
#loc194 = loc(fused[#loc42, #loc43])
#loc195 = loc(fused[#loc44, #loc45])
#loc196 = loc(fused[#loc47, #loc48])
#loc197 = loc(fused[#loc49, #loc50])
#loc198 = loc(fused[#loc52, #loc51])
#loc199 = loc(fused[#loc53, #loc54])
#loc200 = loc(fused[#loc57, #loc56])
#loc201 = loc(fused[#loc62, #loc63])
#loc202 = loc(fused[#loc68, #loc69])
#loc203 = loc(fused[#loc70, #loc71])
#loc204 = loc(fused[#loc73, #loc74, #loc75, #loc69])
#loc205 = loc(fused[#loc76, #loc77])
#loc206 = loc(fused[#loc83, #loc84])
#loc207 = loc(fused[#loc85, #loc86])
#loc208 = loc(fused[#loc88, #loc87])
#loc209 = loc(fused[#loc89, #loc90])
#loc210 = loc(fused[#loc93, #loc92])
#loc211 = loc(fused[#loc98, #loc99])
#loc212 = loc(fused[#loc101, #loc102])
#loc213 = loc(fused[#loc103, #loc104])
#loc214 = loc(fused[#loc106, #loc107, #loc108, #loc102])
#loc215 = loc(fused[#loc109, #loc110])
#loc216 = loc(fused[#loc120, #loc121])
#loc217 = loc(fused[#loc122, #loc123])
#loc218 = loc(fused[#loc125, #loc124])
#loc219 = loc(fused[#loc126, #loc127])
#loc220 = loc(fused[#loc134, #loc132])
#loc221 = loc(fused[#loc136, #loc137])
#loc222 = loc(fused[#loc139, #loc140])
#loc223 = loc(fused[#loc141, #loc142])
#loc224 = loc(fused[#loc150, #loc151])
#loc225 = loc(fused[#loc152, #loc153])
#loc226 = loc(fused[#loc155, #loc154])
#loc227 = loc(fused[#loc156, #loc157])
#loc228 = loc(fused[#loc161, #loc159])
#loc229 = loc(fused[#loc166, #loc167])
#loc230 = loc(fused[#loc169, #loc170])
#loc231 = loc(fused[#loc171, #loc172])
