!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":21:27)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":21:36)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":46:31)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":46:40)
#loc92 = loc(fused[#loc7, #loc8])
#loc110 = loc(fused[#loc53, #loc54])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc90)
  cir.func internal private @badSource(%arg0: !cir.ptr<!cir.double> loc(fused[#loc7, #loc8])) -> !cir.ptr<!cir.double> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc10)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc93)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc94)
    cir.store %5, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc95)
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc17)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc18)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc18)
    %9 = cir.cmp(eq, %6, %8) : !cir.ptr<!cir.double>, !cir.bool loc(#loc97)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc98)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc20)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc22)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc20)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc23)
    %14 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc24)
    cir.store %13, %14 : !cir.double, !cir.ptr<!cir.double> loc(#loc99)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc26)
    cir.store %15, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc100)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc100)
    cir.return %16 : !cir.ptr<!cir.double> loc(#loc100)
  } loc(#loc91)
  cir.func private @printDoubleLine(!cir.double) loc(#loc101)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc102)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc36)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc105)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc38)
    %3 = cir.call @badSource(%2) : (!cir.ptr<!cir.double>) -> !cir.ptr<!cir.double> loc(#loc39)
    cir.store %3, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc106)
    %4 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc42)
    %5 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc43)
    cir.call @printDoubleLine(%5) : (!cir.double) -> () loc(#loc44)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc45)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc46)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc46)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc45)
    cir.return loc(#loc33)
  } loc(#loc103)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc108)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc48)
  } loc(#loc107)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!cir.double> loc(fused[#loc53, #loc54])) -> !cir.ptr<!cir.double> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["__retval"] {alignment = 8 : i64} loc(#loc52)
    cir.store %arg0, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc55)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc56)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc111)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc56)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc112)
    cir.store %5, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc63)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc64)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc64)
    %9 = cir.cmp(eq, %6, %8) : !cir.ptr<!cir.double>, !cir.bool loc(#loc115)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc116)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc66)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc68)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc66)
    cir.br ^bb3 loc(#loc62)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc62)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc69)
    %14 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc70)
    cir.store %13, %14 : !cir.double, !cir.ptr<!cir.double> loc(#loc117)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc72)
    cir.store %15, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc118)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc118)
    cir.return %16 : !cir.ptr<!cir.double> loc(#loc118)
  } loc(#loc109)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc78)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc121)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc80)
    %3 = cir.call @goodG2BSource(%2) : (!cir.ptr<!cir.double>) -> !cir.ptr<!cir.double> loc(#loc81)
    cir.store %3, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc122)
    %4 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc84)
    %5 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc85)
    cir.call @printDoubleLine(%5) : (!cir.double) -> () loc(#loc86)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc87)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc88)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc88)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc87)
    cir.return loc(#loc75)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":29:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":25:22)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":25:29)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":25:40)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":25:41)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":26:33)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":26:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":26:17)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":26:23)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":26:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":26:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":26:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":27:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":27:6)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":27:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":28:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":28:5)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc30 = loc("/usr/include/stdlib.h":687:1)
#loc31 = loc("/usr/include/stdlib.h":687:32)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":31:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":40:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":33:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":33:14)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":35:12)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":35:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":36:22)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":36:12)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":36:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":36:26)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":38:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":38:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":38:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":39:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":39:10)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":67:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":70:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":69:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":69:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":46:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":53:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":47:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":49:22)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":49:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":49:41)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":49:42)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":49:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":50:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":50:33)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":50:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":50:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":50:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":50:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":50:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":50:29)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":51:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":51:6)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":51:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":52:12)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":52:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":56:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":65:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":58:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":58:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":60:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":60:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":61:26)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":61:12)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":61:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":61:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":63:22)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":63:21)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":63:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":64:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c":64:10)
#loc89 = loc(fused[#loc1, #loc2])
#loc90 = loc(fused[#loc3, #loc4])
#loc91 = loc(fused[#loc5, #loc6])
#loc93 = loc(fused[#loc11, #loc12])
#loc94 = loc(fused[#loc10, #loc13])
#loc95 = loc(fused[#loc14, #loc13])
#loc96 = loc(fused[#loc15, #loc16])
#loc97 = loc(fused[#loc17, #loc18])
#loc98 = loc(fused[#loc19, #loc16])
#loc99 = loc(fused[#loc25, #loc23])
#loc100 = loc(fused[#loc27, #loc26])
#loc101 = loc(fused[#loc28, #loc29])
#loc102 = loc(fused[#loc30, #loc31])
#loc103 = loc(fused[#loc32, #loc33])
#loc104 = loc(fused[#loc34, #loc35])
#loc105 = loc(fused[#loc37, #loc36])
#loc106 = loc(fused[#loc40, #loc41])
#loc107 = loc(fused[#loc47, #loc48])
#loc108 = loc(fused[#loc49, #loc50])
#loc109 = loc(fused[#loc51, #loc52])
#loc111 = loc(fused[#loc57, #loc58])
#loc112 = loc(fused[#loc56, #loc59])
#loc113 = loc(fused[#loc60, #loc59])
#loc114 = loc(fused[#loc61, #loc62])
#loc115 = loc(fused[#loc63, #loc64])
#loc116 = loc(fused[#loc65, #loc62])
#loc117 = loc(fused[#loc71, #loc69])
#loc118 = loc(fused[#loc73, #loc72])
#loc119 = loc(fused[#loc74, #loc75])
#loc120 = loc(fused[#loc76, #loc77])
#loc121 = loc(fused[#loc79, #loc78])
#loc122 = loc(fused[#loc82, #loc83])
