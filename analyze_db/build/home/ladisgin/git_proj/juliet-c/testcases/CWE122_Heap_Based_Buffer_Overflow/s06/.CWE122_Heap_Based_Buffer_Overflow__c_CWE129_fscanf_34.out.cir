!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":168:10)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":168:14)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":168:20)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":168:32)
#true = #cir.bool<true> : !cir.bool
!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType = !cir.struct<union "CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType" {!s32i, !s32i}>
#loc335 = loc(fused[#loc112, #loc113])
#loc336 = loc(fused[#loc114, #loc115])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc291)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc292)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc293)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc294)
  cir.func private @printIntLine(!s32i) loc(#loc295)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc296)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc14)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc297)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc299)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc300)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc24)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc26)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc292)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc26)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType> -> !cir.ptr<!s32i> loc(#loc29)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc304)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType> -> !cir.ptr<!s32i> loc(#loc35)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc304)
      cir.scope {
        %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc306)
        %16 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc307)
        %17 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc42)
        %18 = cir.const #cir.int<10> : !s32i loc(#loc43)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc43)
        %20 = cir.const #cir.int<4> : !u64i loc(#loc308)
        %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc309)
        %22 = cir.call @malloc(%21) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc42)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc310)
        cir.store %23, %16 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc307)
        cir.scope {
          %27 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
          %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc49)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
          %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s32i>, !cir.bool loc(#loc312)
          cir.if %30 {
            %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc51)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc53)
            cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc51)
          } loc(#loc313)
        } loc(#loc311)
        cir.scope {
          %27 = cir.const #cir.int<0> : !s32i loc(#loc56)
          cir.store %27, %15 : !s32i, !cir.ptr<!s32i> loc(#loc315)
          cir.for : cond {
            %28 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            %29 = cir.const #cir.int<10> : !s32i loc(#loc59)
            %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc316)
            cir.condition(%30) loc(#loc60)
          } body {
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc62)
              %29 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
              %30 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc64)
              %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc65)
              cir.store %28, %31 : !s32i, !cir.ptr<!s32i> loc(#loc318)
            } loc(#loc317)
            cir.yield loc(#loc55)
          } step {
            %28 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc66)
            %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc67)
            cir.store %29, %15 : !s32i, !cir.ptr<!s32i> loc(#loc319)
            cir.yield loc(#loc314)
          } loc(#loc314)
        } loc(#loc314)
        cir.scope {
          %27 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          %28 = cir.const #cir.int<0> : !s32i loc(#loc71)
          %29 = cir.cmp(ge, %27, %28) : !s32i, !cir.bool loc(#loc321)
          cir.if %29 {
            %30 = cir.const #cir.int<1> : !s32i loc(#loc75)
            %31 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
            %32 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc78)
            cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc323)
            cir.scope {
              %34 = cir.const #cir.int<0> : !s32i loc(#loc81)
              cir.store %34, %15 : !s32i, !cir.ptr<!s32i> loc(#loc325)
              cir.for : cond {
                %35 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                %36 = cir.const #cir.int<10> : !s32i loc(#loc84)
                %37 = cir.cmp(lt, %35, %36) : !s32i, !cir.bool loc(#loc326)
                cir.condition(%37) loc(#loc85)
              } body {
                cir.scope {
                  %35 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
                  %36 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                  %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc89)
                  %38 = cir.load %37 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                  cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc90)
                } loc(#loc327)
                cir.yield loc(#loc80)
              } step {
                %35 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                %36 = cir.unary(inc, %35) : !s32i, !s32i loc(#loc92)
                cir.store %36, %15 : !s32i, !cir.ptr<!s32i> loc(#loc328)
                cir.yield loc(#loc324)
              } loc(#loc324)
            } loc(#loc324)
          } else {
            %30 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc14)
            %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc14)
            cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc93)
          } loc(#loc322)
        } loc(#loc320)
        %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc94)
        %25 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
        %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc95)
        cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc94)
      } loc(#loc305)
    } loc(#loc303)
    cir.return loc(#loc18)
  } loc(#loc298)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc330)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc98)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc331)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc100)
    cir.return loc(#loc97)
  } loc(#loc329)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc332)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc333)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc109)
  cir.func @main(%arg0: !s32i loc(fused[#loc112, #loc113]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc114, #loc115])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc335)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc336)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc111)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc116)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc117)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc118)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc118)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc119)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc106)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc337)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_good() : () -> () loc(#loc121)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc107)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc108)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc338)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad() : () -> () loc(#loc125)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc109)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc128)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc339)
    cir.return %17 : !s32i loc(#loc339)
  } loc(#loc334)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc341)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc342)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc137)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc343)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc139)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %6 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType> -> !cir.ptr<!s32i> loc(#loc29)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc345)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc347)
      %8 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType> -> !cir.ptr<!s32i> loc(#loc35)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc146)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc347)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc349)
        %11 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc350)
        %12 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc153)
        %13 = cir.const #cir.int<10> : !s32i loc(#loc154)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc154)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc351)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc352)
        %17 = cir.call @malloc(%16) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc353)
        cir.store %18, %11 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc350)
        cir.scope {
          %22 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc160)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc160)
          %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s32i>, !cir.bool loc(#loc355)
          cir.if %25 {
            %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc162)
            %27 = cir.const #cir.int<1> : !s32i loc(#loc163)
            %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc164)
            cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc162)
          } loc(#loc356)
        } loc(#loc354)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc167)
          cir.store %22, %10 : !s32i, !cir.ptr<!s32i> loc(#loc358)
          cir.for : cond {
            %23 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc169)
            %24 = cir.const #cir.int<10> : !s32i loc(#loc170)
            %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc359)
            cir.condition(%25) loc(#loc171)
          } body {
            cir.scope {
              %23 = cir.const #cir.int<0> : !s32i loc(#loc173)
              %24 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
              %25 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc175)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc176)
              cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc361)
            } loc(#loc360)
            cir.yield loc(#loc166)
          } step {
            %23 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc178)
            cir.store %24, %10 : !s32i, !cir.ptr<!s32i> loc(#loc362)
            cir.yield loc(#loc357)
          } loc(#loc357)
        } loc(#loc357)
        cir.scope {
          %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc181)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc182)
          %24 = cir.cmp(ge, %22, %23) : !s32i, !cir.bool loc(#loc364)
          cir.if %24 {
            %25 = cir.const #cir.int<1> : !s32i loc(#loc186)
            %26 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
            %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc188)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc189)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc366)
            cir.scope {
              %29 = cir.const #cir.int<0> : !s32i loc(#loc192)
              cir.store %29, %10 : !s32i, !cir.ptr<!s32i> loc(#loc368)
              cir.for : cond {
                %30 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc194)
                %31 = cir.const #cir.int<10> : !s32i loc(#loc195)
                %32 = cir.cmp(lt, %30, %31) : !s32i, !cir.bool loc(#loc369)
                cir.condition(%32) loc(#loc196)
              } body {
                cir.scope {
                  %30 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc198)
                  %31 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc199)
                  %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc200)
                  %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc198)
                  cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc201)
                } loc(#loc370)
                cir.yield loc(#loc191)
              } step {
                %30 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc202)
                %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc203)
                cir.store %31, %10 : !s32i, !cir.ptr<!s32i> loc(#loc371)
                cir.yield loc(#loc367)
              } loc(#loc367)
            } loc(#loc367)
          } else {
            %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc204)
            %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc204)
            cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc205)
          } loc(#loc365)
        } loc(#loc363)
        %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc206)
        %20 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc207)
        cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc206)
      } loc(#loc348)
    } loc(#loc346)
    cir.return loc(#loc131)
  } loc(#loc340)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc208)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc373)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc374)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc215)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc216)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc218)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc292)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc219)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc220)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc220)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc218)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType> -> !cir.ptr<!s32i> loc(#loc29)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc376)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc378)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType> -> !cir.ptr<!s32i> loc(#loc35)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc226)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc378)
      cir.scope {
        %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc380)
        %16 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc381)
        %17 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc233)
        %18 = cir.const #cir.int<10> : !s32i loc(#loc234)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc234)
        %20 = cir.const #cir.int<4> : !u64i loc(#loc382)
        %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc383)
        %22 = cir.call @malloc(%21) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc233)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc384)
        cir.store %23, %16 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc381)
        cir.scope {
          %27 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc239)
          %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc240)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc240)
          %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s32i>, !cir.bool loc(#loc386)
          cir.if %30 {
            %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc242)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc243)
            %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc244)
            cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc242)
          } loc(#loc387)
        } loc(#loc385)
        cir.scope {
          %27 = cir.const #cir.int<0> : !s32i loc(#loc247)
          cir.store %27, %15 : !s32i, !cir.ptr<!s32i> loc(#loc389)
          cir.for : cond {
            %28 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc249)
            %29 = cir.const #cir.int<10> : !s32i loc(#loc250)
            %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc390)
            cir.condition(%30) loc(#loc251)
          } body {
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc253)
              %29 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
              %30 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc255)
              %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc256)
              cir.store %28, %31 : !s32i, !cir.ptr<!s32i> loc(#loc392)
            } loc(#loc391)
            cir.yield loc(#loc246)
          } step {
            %28 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc257)
            %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc258)
            cir.store %29, %15 : !s32i, !cir.ptr<!s32i> loc(#loc393)
            cir.yield loc(#loc388)
          } loc(#loc388)
        } loc(#loc388)
        cir.scope {
          %27 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc261)
          %28 = cir.const #cir.int<0> : !s32i loc(#loc262)
          %29 = cir.cmp(ge, %27, %28) : !s32i, !cir.bool loc(#loc395)
          %30 = cir.ternary(%29, true {
            %31 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc264)
            %32 = cir.const #cir.int<10> : !s32i loc(#loc265)
            %33 = cir.cmp(lt, %31, %32) : !s32i, !cir.bool loc(#loc396)
            %34 = cir.ternary(%33, true {
              %35 = cir.const #true loc(#loc263)
              cir.yield %35 : !cir.bool loc(#loc263)
            }, false {
              %35 = cir.const #false loc(#loc263)
              cir.yield %35 : !cir.bool loc(#loc263)
            }) : (!cir.bool) -> !cir.bool loc(#loc263)
            cir.yield %34 : !cir.bool loc(#loc263)
          }, false {
            %31 = cir.const #false loc(#loc263)
            cir.yield %31 : !cir.bool loc(#loc263)
          }) : (!cir.bool) -> !cir.bool loc(#loc263)
          cir.if %30 {
            %31 = cir.const #cir.int<1> : !s32i loc(#loc270)
            %32 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc271)
            %33 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc272)
            %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc273)
            cir.store %31, %34 : !s32i, !cir.ptr<!s32i> loc(#loc398)
            cir.scope {
              %35 = cir.const #cir.int<0> : !s32i loc(#loc276)
              cir.store %35, %15 : !s32i, !cir.ptr<!s32i> loc(#loc400)
              cir.for : cond {
                %36 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                %37 = cir.const #cir.int<10> : !s32i loc(#loc279)
                %38 = cir.cmp(lt, %36, %37) : !s32i, !cir.bool loc(#loc401)
                cir.condition(%38) loc(#loc280)
              } body {
                cir.scope {
                  %36 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc282)
                  %37 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc283)
                  %38 = cir.ptr_stride(%36 : !cir.ptr<!s32i>, %37 : !s32i), !cir.ptr<!s32i> loc(#loc284)
                  %39 = cir.load %38 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                  cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc285)
                } loc(#loc402)
                cir.yield loc(#loc275)
              } step {
                %36 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc286)
                %37 = cir.unary(inc, %36) : !s32i, !s32i loc(#loc287)
                cir.store %37, %15 : !s32i, !cir.ptr<!s32i> loc(#loc403)
                cir.yield loc(#loc399)
              } loc(#loc399)
            } loc(#loc399)
          } else {
            %31 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc208)
            %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc208)
            cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc288)
          } loc(#loc397)
        } loc(#loc394)
        %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc289)
        %25 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc290)
        %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc290)
        cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc289)
      } loc(#loc379)
    } loc(#loc377)
    cir.return loc(#loc210)
  } loc(#loc372)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":35:19)
#loc6 = loc("/usr/include/stdlib.h":672:1)
#loc7 = loc("/usr/include/stdlib.h":672:45)
#loc8 = loc("/usr/include/stdlib.h":756:1)
#loc9 = loc("/usr/include/stdlib.h":756:70)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":61:27)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":28:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":66:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":30:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":30:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":31:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":31:69)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":33:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":33:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":33:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":35:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":35:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":36:26)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":22:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":36:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":37:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":65:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":38:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":38:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":23:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":39:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":64:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":40:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":40:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":41:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":41:58)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":41:35)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":41:42)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":41:47)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":41:57)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":42:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":42:43)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":42:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":42:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":42:33)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":42:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":42:40)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":42:39)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":44:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":47:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":44:22)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":44:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":44:25)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":44:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":44:27)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":45:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":46:29)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":46:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":46:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":46:25)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":44:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":44:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":50:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":62:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":50:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":50:25)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":51:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":58:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":60:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":52:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":52:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":52:24)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":52:28)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":54:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":57:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":54:25)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":54:21)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":54:28)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":54:32)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":54:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":55:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":56:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":56:41)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":56:42)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":56:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":54:37)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":54:36)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":61:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":63:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":63:18)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":154:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":158:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":156:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":156:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":157:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":157:13)
#loc102 = loc("/usr/include/stdlib.h":575:1)
#loc103 = loc("/usr/include/stdlib.h":575:41)
#loc104 = loc("/usr/include/time.h":76:1)
#loc105 = loc("/usr/include/time.h":76:38)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":173:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":175:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":178:15)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":180:15)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":168:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":183:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":169:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":171:27)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":171:22)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":171:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":173:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":174:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":174:64)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":175:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":178:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":179:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":179:63)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":180:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":182:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":182:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":73:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":112:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":75:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":75:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":76:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":76:69)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":78:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":78:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":78:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":81:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":81:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":82:26)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":82:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":83:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":111:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":84:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":84:28)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":85:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":110:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":86:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":86:17)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":87:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":87:58)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":87:35)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":87:42)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":87:47)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":87:57)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":88:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":88:43)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":88:17)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":88:27)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":88:33)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":88:34)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":88:40)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":88:39)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":90:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":93:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":90:22)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":90:18)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":90:25)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":90:29)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":90:27)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":91:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":92:29)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":92:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":92:24)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":92:25)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":90:34)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":90:33)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":96:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":108:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":96:17)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":96:25)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":97:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":104:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":106:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":98:32)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":98:17)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":98:24)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":98:28)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":100:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":103:17)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":100:25)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":100:21)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":100:28)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":100:32)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":100:30)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":101:17)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":102:34)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":102:41)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":102:42)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":102:21)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":100:37)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":100:36)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":107:27)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":107:17)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":109:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":109:18)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":147:27)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":115:1)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":152:1)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":117:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":117:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":118:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":118:69)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":120:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":120:12)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":120:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":122:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":122:12)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":122:19)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":123:26)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":123:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":124:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":151:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":125:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":125:28)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":126:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":150:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":127:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":127:17)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":128:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":128:58)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":128:35)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":128:42)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":128:47)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":128:57)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":129:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":129:43)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":129:17)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":129:27)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":129:33)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":129:34)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":129:40)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":129:39)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":131:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":134:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":131:22)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":131:18)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":131:25)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":131:29)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":131:27)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":132:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":133:29)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":133:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":133:24)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":133:25)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":131:34)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":131:33)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":136:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":148:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":136:17)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":136:25)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":136:27)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":136:30)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":136:38)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":136:40)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":137:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":144:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":146:13)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":138:32)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":138:17)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":138:24)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":138:28)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":140:17)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":143:17)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":140:25)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":140:21)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":140:28)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":140:32)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":140:30)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":141:17)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":142:34)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":142:41)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":142:42)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":142:21)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":140:37)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":140:36)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":147:17)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":149:13)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c":149:18)
#loc291 = loc(fused[#loc1, #loc2])
#loc292 = loc(fused[#loc3, #loc4])
#loc293 = loc(fused[#loc6, #loc7])
#loc294 = loc(fused[#loc8, #loc9])
#loc295 = loc(fused[#loc10, #loc11])
#loc296 = loc(fused[#loc12, #loc13])
#loc297 = loc(fused[#loc15, #loc16])
#loc298 = loc(fused[#loc17, #loc18])
#loc299 = loc(fused[#loc19, #loc20])
#loc300 = loc(fused[#loc21, #loc22])
#loc301 = loc(fused[#loc25, #loc23])
#loc302 = loc(fused[#loc30, #loc28])
#loc303 = loc(fused[#loc31, #loc32])
#loc304 = loc(fused[#loc33, #loc34])
#loc305 = loc(fused[#loc36, #loc37])
#loc306 = loc(fused[#loc38, #loc39])
#loc307 = loc(fused[#loc40, #loc41])
#loc308 = loc(fused[#loc44, #loc45])
#loc309 = loc(fused[#loc43, #loc45])
#loc310 = loc(fused[#loc42, #loc41])
#loc311 = loc(fused[#loc46, #loc47])
#loc312 = loc(fused[#loc48, #loc49])
#loc313 = loc(fused[#loc50, #loc47])
#loc314 = loc(fused[#loc54, #loc55])
#loc315 = loc(fused[#loc57, #loc56])
#loc316 = loc(fused[#loc58, #loc59])
#loc317 = loc(fused[#loc61, #loc55])
#loc318 = loc(fused[#loc63, #loc62])
#loc319 = loc(fused[#loc67, #loc66])
#loc320 = loc(fused[#loc68, #loc69])
#loc321 = loc(fused[#loc70, #loc71])
#loc322 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc323 = loc(fused[#loc76, #loc75])
#loc324 = loc(fused[#loc79, #loc80])
#loc325 = loc(fused[#loc82, #loc81])
#loc326 = loc(fused[#loc83, #loc84])
#loc327 = loc(fused[#loc86, #loc80])
#loc328 = loc(fused[#loc92, #loc91])
#loc329 = loc(fused[#loc96, #loc97])
#loc330 = loc(fused[#loc98, #loc99])
#loc331 = loc(fused[#loc100, #loc101])
#loc332 = loc(fused[#loc102, #loc103])
#loc333 = loc(fused[#loc104, #loc105])
#loc334 = loc(fused[#loc110, #loc111])
#loc337 = loc(fused[#loc121, #loc122])
#loc338 = loc(fused[#loc125, #loc126])
#loc339 = loc(fused[#loc129, #loc128])
#loc340 = loc(fused[#loc130, #loc131])
#loc341 = loc(fused[#loc132, #loc133])
#loc342 = loc(fused[#loc134, #loc135])
#loc343 = loc(fused[#loc138, #loc136])
#loc344 = loc(fused[#loc140, #loc139])
#loc345 = loc(fused[#loc142, #loc141])
#loc346 = loc(fused[#loc143, #loc144])
#loc347 = loc(fused[#loc145, #loc146])
#loc348 = loc(fused[#loc147, #loc148])
#loc349 = loc(fused[#loc149, #loc150])
#loc350 = loc(fused[#loc151, #loc152])
#loc351 = loc(fused[#loc155, #loc156])
#loc352 = loc(fused[#loc154, #loc156])
#loc353 = loc(fused[#loc153, #loc152])
#loc354 = loc(fused[#loc157, #loc158])
#loc355 = loc(fused[#loc159, #loc160])
#loc356 = loc(fused[#loc161, #loc158])
#loc357 = loc(fused[#loc165, #loc166])
#loc358 = loc(fused[#loc168, #loc167])
#loc359 = loc(fused[#loc169, #loc170])
#loc360 = loc(fused[#loc172, #loc166])
#loc361 = loc(fused[#loc174, #loc173])
#loc362 = loc(fused[#loc178, #loc177])
#loc363 = loc(fused[#loc179, #loc180])
#loc364 = loc(fused[#loc181, #loc182])
#loc365 = loc(fused[#loc183, #loc184, #loc185, #loc180])
#loc366 = loc(fused[#loc187, #loc186])
#loc367 = loc(fused[#loc190, #loc191])
#loc368 = loc(fused[#loc193, #loc192])
#loc369 = loc(fused[#loc194, #loc195])
#loc370 = loc(fused[#loc197, #loc191])
#loc371 = loc(fused[#loc203, #loc202])
#loc372 = loc(fused[#loc209, #loc210])
#loc373 = loc(fused[#loc211, #loc212])
#loc374 = loc(fused[#loc213, #loc214])
#loc375 = loc(fused[#loc217, #loc215])
#loc376 = loc(fused[#loc222, #loc221])
#loc377 = loc(fused[#loc223, #loc224])
#loc378 = loc(fused[#loc225, #loc226])
#loc379 = loc(fused[#loc227, #loc228])
#loc380 = loc(fused[#loc229, #loc230])
#loc381 = loc(fused[#loc231, #loc232])
#loc382 = loc(fused[#loc235, #loc236])
#loc383 = loc(fused[#loc234, #loc236])
#loc384 = loc(fused[#loc233, #loc232])
#loc385 = loc(fused[#loc237, #loc238])
#loc386 = loc(fused[#loc239, #loc240])
#loc387 = loc(fused[#loc241, #loc238])
#loc388 = loc(fused[#loc245, #loc246])
#loc389 = loc(fused[#loc248, #loc247])
#loc390 = loc(fused[#loc249, #loc250])
#loc391 = loc(fused[#loc252, #loc246])
#loc392 = loc(fused[#loc254, #loc253])
#loc393 = loc(fused[#loc258, #loc257])
#loc394 = loc(fused[#loc259, #loc260])
#loc395 = loc(fused[#loc261, #loc262])
#loc396 = loc(fused[#loc264, #loc266])
#loc397 = loc(fused[#loc267, #loc268, #loc269, #loc260])
#loc398 = loc(fused[#loc271, #loc270])
#loc399 = loc(fused[#loc274, #loc275])
#loc400 = loc(fused[#loc277, #loc276])
#loc401 = loc(fused[#loc278, #loc279])
#loc402 = loc(fused[#loc281, #loc275])
#loc403 = loc(fused[#loc287, #loc286])
