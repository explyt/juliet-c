!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc425)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc426)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc427)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc428)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc429)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc430)
  cir.func private @close(!s32i) -> !s32i loc(#loc431)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc432)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc433)
  cir.func private @printIntLine(!s32i) loc(#loc434)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc435)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc436)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc438)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc439)
    %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc440)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc441)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc442)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc443)
    %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc444)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc44)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc445)
    cir.goto "source" loc(#loc446)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc48)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc36)
    cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc441)
    cir.scope {
      cir.do {
        cir.scope {
          %21 = cir.const #cir.int<2> : !s32i loc(#loc53)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %23 = cir.const #cir.int<6> : !s32i loc(#loc55)
          %24 = cir.call @socket(%21, %22, %23) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc56)
          cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc449)
          cir.scope {
            %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc62)
            %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc62)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc451)
            cir.if %66 {
              cir.break loc(#loc64)
            } loc(#loc452)
          } loc(#loc450)
          %25 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc453)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc67)
          %27 = cir.const #cir.int<16> : !u64i loc(#loc454)
          cir.libc.memset %27 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc455)
          %28 = cir.const #cir.int<2> : !s32i loc(#loc72)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc72)
          %30 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc456)
          %31 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %33 = cir.call @inet_addr(%32) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc75)
          %34 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
          %35 = cir.get_member %34[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
          cir.store %33, %35 : !u32i, !cir.ptr<!u32i> loc(#loc457)
          %36 = cir.const #cir.int<27015> : !s32i loc(#loc80)
          %37 = cir.cast(integral, %36 : !s32i), !u16i loc(#loc80)
          %38 = cir.call @htons(%37) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc81)
          %39 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
          cir.store %38, %39 : !u16i, !cir.ptr<!u16i> loc(#loc458)
          cir.scope {
            %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %64 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc460)
            %65 = cir.const #cir.int<16> : !u64i loc(#loc461)
            %66 = cir.cast(integral, %65 : !u64i), !u32i loc(#loc461)
            %67 = cir.call @connect(%63, %64, %66) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc92)
            %68 = cir.const #cir.int<1> : !s32i loc(#loc93)
            %69 = cir.unary(minus, %68) nsw : !s32i, !s32i loc(#loc93)
            %70 = cir.cmp(eq, %67, %69) : !s32i, !cir.bool loc(#loc462)
            cir.if %70 {
              cir.break loc(#loc95)
            } loc(#loc463)
          } loc(#loc459)
          %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
          %41 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
          %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc97)
          %43 = cir.const #cir.int<3> : !s32i loc(#loc98)
          %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc98)
          %45 = cir.const #cir.int<4> : !u64i loc(#loc98)
          %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc98)
          %47 = cir.const #cir.int<2> : !s32i loc(#loc98)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc98)
          %49 = cir.binop(add, %46, %48) : !u64i loc(#loc98)
          %50 = cir.const #cir.int<1> : !s32i loc(#loc99)
          %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc99)
          %52 = cir.binop(sub, %49, %51) : !u64i loc(#loc464)
          %53 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %54 = cir.call @recv(%40, %42, %52, %53) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc101)
          %55 = cir.cast(integral, %54 : !s64i), !s32i loc(#loc101)
          cir.store %55, %1 : !s32i, !cir.ptr<!s32i> loc(#loc465)
          cir.scope {
            %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc107)
            %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc107)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc467)
            %67 = cir.ternary(%66, true {
              %68 = cir.const #true loc(#loc108)
              cir.yield %68 : !cir.bool loc(#loc108)
            }, false {
              %68 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc109)
              %69 = cir.const #cir.int<0> : !s32i loc(#loc110)
              %70 = cir.cmp(eq, %68, %69) : !s32i, !cir.bool loc(#loc468)
              %71 = cir.ternary(%70, true {
                %72 = cir.const #true loc(#loc108)
                cir.yield %72 : !cir.bool loc(#loc108)
              }, false {
                %72 = cir.const #false loc(#loc108)
                cir.yield %72 : !cir.bool loc(#loc108)
              }) : (!cir.bool) -> !cir.bool loc(#loc108)
              cir.yield %71 : !cir.bool loc(#loc108)
            }) : (!cir.bool) -> !cir.bool loc(#loc108)
            cir.if %67 {
              cir.break loc(#loc112)
            } loc(#loc469)
          } loc(#loc466)
          %56 = cir.const #cir.int<0> : !s32i loc(#loc113)
          %57 = cir.cast(integral, %56 : !s32i), !s8i loc(#loc113)
          %58 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %59 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
          %60 = cir.ptr_stride(%59 : !cir.ptr<!s8i>, %58 : !s32i), !cir.ptr<!s8i> loc(#loc115)
          cir.store %57, %60 : !s8i, !cir.ptr<!s8i> loc(#loc470)
          %61 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
          %62 = cir.call @atoi(%61) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc117)
          cir.store %62, %0 : !s32i, !cir.ptr<!s32i> loc(#loc471)
        } loc(#loc448)
        cir.yield loc(#loc50)
      } while {
        %21 = cir.const #cir.int<0> : !s32i loc(#loc120)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc120)
        cir.condition(%22) loc(#loc120)
      } loc(#loc447)
    } loc(#loc447)
    cir.scope {
      %21 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc124)
      %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc124)
      %24 = cir.cmp(ne, %21, %23) : !s32i, !cir.bool loc(#loc473)
      cir.if %24 {
        %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %26 = cir.call @close(%25) : (!s32i) -> !s32i loc(#loc127)
      } loc(#loc474)
    } loc(#loc472)
    cir.goto "sink" loc(#loc475)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc130)
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc131)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc132)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc132)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc476)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc477)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc131)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc478)
    cir.store %17, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc444)
    cir.scope {
      %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
      %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc138)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc138)
      %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc480)
      cir.if %24 {
        %25 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc140)
        %26 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %27 = cir.unary(minus, %26) nsw : !s32i, !s32i loc(#loc142)
        cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc140)
      } loc(#loc481)
    } loc(#loc479)
    cir.scope {
      %21 = cir.const #cir.int<0> : !s32i loc(#loc145)
      cir.store %21, %5 : !s32i, !cir.ptr<!s32i> loc(#loc483)
      cir.for : cond {
        %22 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc147)
        %23 = cir.const #cir.int<10> : !s32i loc(#loc148)
        %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc484)
        cir.condition(%24) loc(#loc149)
      } body {
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc151)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc152)
          %24 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc154)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc486)
        } loc(#loc485)
        cir.yield loc(#loc144)
      } step {
        %22 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %23 = cir.unary(inc, %22) nsw : !s32i, !s32i loc(#loc156)
        cir.store %23, %5 : !s32i, !cir.ptr<!s32i> loc(#loc487)
        cir.yield loc(#loc482)
      } loc(#loc482)
    } loc(#loc482)
    cir.scope {
      %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc160)
      %23 = cir.cmp(ge, %21, %22) : !s32i, !cir.bool loc(#loc489)
      cir.if %23 {
        %24 = cir.const #cir.int<1> : !s32i loc(#loc164)
        %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
        %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc167)
        cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc491)
        cir.scope {
          %28 = cir.const #cir.int<0> : !s32i loc(#loc170)
          cir.store %28, %5 : !s32i, !cir.ptr<!s32i> loc(#loc493)
          cir.for : cond {
            %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc172)
            %30 = cir.const #cir.int<10> : !s32i loc(#loc173)
            %31 = cir.cmp(lt, %29, %30) : !s32i, !cir.bool loc(#loc494)
            cir.condition(%31) loc(#loc174)
          } body {
            cir.scope {
              %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
              %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc177)
              %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc178)
              %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc179)
            } loc(#loc495)
            cir.yield loc(#loc169)
          } step {
            %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc180)
            %30 = cir.unary(inc, %29) nsw : !s32i, !s32i loc(#loc181)
            cir.store %30, %5 : !s32i, !cir.ptr<!s32i> loc(#loc496)
            cir.yield loc(#loc492)
          } loc(#loc492)
        } loc(#loc492)
      } else {
        %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
        %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
        cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc182)
      } loc(#loc490)
    } loc(#loc488)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc183)
    %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc184)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc184)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc183)
    cir.return loc(#loc28)
  } loc(#loc437)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc498)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc187)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc499)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc189)
    cir.return loc(#loc186)
  } loc(#loc497)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc191)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc501)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc502)
    %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc503)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc504)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc505)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc506)
    %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc507)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc208)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc209)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc508)
    cir.goto "source" loc(#loc509)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc213)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc201)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc201)
    cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc504)
    cir.scope {
      cir.do {
        cir.scope {
          %21 = cir.const #cir.int<2> : !s32i loc(#loc218)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc219)
          %23 = cir.const #cir.int<6> : !s32i loc(#loc220)
          %24 = cir.call @socket(%21, %22, %23) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc221)
          cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc512)
          cir.scope {
            %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc226)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc227)
            %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc227)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc514)
            cir.if %66 {
              cir.break loc(#loc229)
            } loc(#loc515)
          } loc(#loc513)
          %25 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc516)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc232)
          %27 = cir.const #cir.int<16> : !u64i loc(#loc517)
          cir.libc.memset %27 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc518)
          %28 = cir.const #cir.int<2> : !s32i loc(#loc237)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc237)
          %30 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc519)
          %31 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc239)
          %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc239)
          %33 = cir.call @inet_addr(%32) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc240)
          %34 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
          %35 = cir.get_member %34[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
          cir.store %33, %35 : !u32i, !cir.ptr<!u32i> loc(#loc520)
          %36 = cir.const #cir.int<27015> : !s32i loc(#loc243)
          %37 = cir.cast(integral, %36 : !s32i), !u16i loc(#loc243)
          %38 = cir.call @htons(%37) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc244)
          %39 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
          cir.store %38, %39 : !u16i, !cir.ptr<!u16i> loc(#loc521)
          cir.scope {
            %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc249)
            %64 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc523)
            %65 = cir.const #cir.int<16> : !u64i loc(#loc524)
            %66 = cir.cast(integral, %65 : !u64i), !u32i loc(#loc524)
            %67 = cir.call @connect(%63, %64, %66) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc254)
            %68 = cir.const #cir.int<1> : !s32i loc(#loc255)
            %69 = cir.unary(minus, %68) nsw : !s32i, !s32i loc(#loc255)
            %70 = cir.cmp(eq, %67, %69) : !s32i, !cir.bool loc(#loc525)
            cir.if %70 {
              cir.break loc(#loc257)
            } loc(#loc526)
          } loc(#loc522)
          %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc258)
          %41 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc259)
          %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc259)
          %43 = cir.const #cir.int<3> : !s32i loc(#loc260)
          %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc260)
          %45 = cir.const #cir.int<4> : !u64i loc(#loc260)
          %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc260)
          %47 = cir.const #cir.int<2> : !s32i loc(#loc260)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc260)
          %49 = cir.binop(add, %46, %48) : !u64i loc(#loc260)
          %50 = cir.const #cir.int<1> : !s32i loc(#loc261)
          %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc261)
          %52 = cir.binop(sub, %49, %51) : !u64i loc(#loc527)
          %53 = cir.const #cir.int<0> : !s32i loc(#loc262)
          %54 = cir.call @recv(%40, %42, %52, %53) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc263)
          %55 = cir.cast(integral, %54 : !s64i), !s32i loc(#loc263)
          cir.store %55, %1 : !s32i, !cir.ptr<!s32i> loc(#loc528)
          cir.scope {
            %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc268)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc269)
            %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc269)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc530)
            %67 = cir.ternary(%66, true {
              %68 = cir.const #true loc(#loc270)
              cir.yield %68 : !cir.bool loc(#loc270)
            }, false {
              %68 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc271)
              %69 = cir.const #cir.int<0> : !s32i loc(#loc272)
              %70 = cir.cmp(eq, %68, %69) : !s32i, !cir.bool loc(#loc531)
              %71 = cir.ternary(%70, true {
                %72 = cir.const #true loc(#loc270)
                cir.yield %72 : !cir.bool loc(#loc270)
              }, false {
                %72 = cir.const #false loc(#loc270)
                cir.yield %72 : !cir.bool loc(#loc270)
              }) : (!cir.bool) -> !cir.bool loc(#loc270)
              cir.yield %71 : !cir.bool loc(#loc270)
            }) : (!cir.bool) -> !cir.bool loc(#loc270)
            cir.if %67 {
              cir.break loc(#loc274)
            } loc(#loc532)
          } loc(#loc529)
          %56 = cir.const #cir.int<0> : !s32i loc(#loc275)
          %57 = cir.cast(integral, %56 : !s32i), !s8i loc(#loc275)
          %58 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc276)
          %59 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc277)
          %60 = cir.ptr_stride(%59 : !cir.ptr<!s8i>, %58 : !s32i), !cir.ptr<!s8i> loc(#loc277)
          cir.store %57, %60 : !s8i, !cir.ptr<!s8i> loc(#loc533)
          %61 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc278)
          %62 = cir.call @atoi(%61) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc279)
          cir.store %62, %0 : !s32i, !cir.ptr<!s32i> loc(#loc534)
        } loc(#loc511)
        cir.yield loc(#loc215)
      } while {
        %21 = cir.const #cir.int<0> : !s32i loc(#loc282)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc282)
        cir.condition(%22) loc(#loc282)
      } loc(#loc510)
    } loc(#loc510)
    cir.scope {
      %21 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc285)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc286)
      %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc286)
      %24 = cir.cmp(ne, %21, %23) : !s32i, !cir.bool loc(#loc536)
      cir.if %24 {
        %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc288)
        %26 = cir.call @close(%25) : (!s32i) -> !s32i loc(#loc289)
      } loc(#loc537)
    } loc(#loc535)
    cir.goto "sink" loc(#loc538)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc292)
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc293)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc294)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc294)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc539)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc540)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc293)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc541)
    cir.store %17, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc507)
    cir.scope {
      %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc299)
      %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc300)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc300)
      %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc543)
      cir.if %24 {
        %25 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc302)
        %26 = cir.const #cir.int<1> : !s32i loc(#loc303)
        %27 = cir.unary(minus, %26) nsw : !s32i, !s32i loc(#loc304)
        cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc302)
      } loc(#loc544)
    } loc(#loc542)
    cir.scope {
      %21 = cir.const #cir.int<0> : !s32i loc(#loc307)
      cir.store %21, %5 : !s32i, !cir.ptr<!s32i> loc(#loc546)
      cir.for : cond {
        %22 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc309)
        %23 = cir.const #cir.int<10> : !s32i loc(#loc310)
        %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc547)
        cir.condition(%24) loc(#loc311)
      } body {
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc313)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc314)
          %24 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc315)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc316)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc549)
        } loc(#loc548)
        cir.yield loc(#loc306)
      } step {
        %22 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc317)
        %23 = cir.unary(inc, %22) nsw : !s32i, !s32i loc(#loc318)
        cir.store %23, %5 : !s32i, !cir.ptr<!s32i> loc(#loc550)
        cir.yield loc(#loc545)
      } loc(#loc545)
    } loc(#loc545)
    cir.scope {
      %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc321)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc322)
      %23 = cir.cmp(ge, %21, %22) : !s32i, !cir.bool loc(#loc552)
      %24 = cir.ternary(%23, true {
        %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc324)
        %26 = cir.const #cir.int<10> : !s32i loc(#loc325)
        %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc553)
        %28 = cir.ternary(%27, true {
          %29 = cir.const #true loc(#loc323)
          cir.yield %29 : !cir.bool loc(#loc323)
        }, false {
          %29 = cir.const #false loc(#loc323)
          cir.yield %29 : !cir.bool loc(#loc323)
        }) : (!cir.bool) -> !cir.bool loc(#loc323)
        cir.yield %28 : !cir.bool loc(#loc323)
      }, false {
        %25 = cir.const #false loc(#loc323)
        cir.yield %25 : !cir.bool loc(#loc323)
      }) : (!cir.bool) -> !cir.bool loc(#loc323)
      cir.if %24 {
        %25 = cir.const #cir.int<1> : !s32i loc(#loc330)
        %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc331)
        %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc332)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc333)
        cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc555)
        cir.scope {
          %29 = cir.const #cir.int<0> : !s32i loc(#loc336)
          cir.store %29, %5 : !s32i, !cir.ptr<!s32i> loc(#loc557)
          cir.for : cond {
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc338)
            %31 = cir.const #cir.int<10> : !s32i loc(#loc339)
            %32 = cir.cmp(lt, %30, %31) : !s32i, !cir.bool loc(#loc558)
            cir.condition(%32) loc(#loc340)
          } body {
            cir.scope {
              %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc342)
              %31 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc343)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc344)
              %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc342)
              cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc345)
            } loc(#loc559)
            cir.yield loc(#loc335)
          } step {
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc346)
            %31 = cir.unary(inc, %30) nsw : !s32i, !s32i loc(#loc347)
            cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc560)
            cir.yield loc(#loc556)
          } loc(#loc556)
        } loc(#loc556)
      } else {
        %25 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc191)
        %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc191)
        cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc348)
      } loc(#loc554)
    } loc(#loc551)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc349)
    %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc350)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc350)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc349)
    cir.return loc(#loc193)
  } loc(#loc500)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc562)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc563)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc564)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc359)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc360)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc565)
    cir.goto "source" loc(#loc566)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc364)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc365)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc567)
    cir.goto "sink" loc(#loc568)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc369)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc370)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc371)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc371)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc569)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc570)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc370)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc571)
    cir.store %12, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc564)
    cir.scope {
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc376)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc377)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc377)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc573)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc379)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc380)
        %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc381)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc379)
      } loc(#loc574)
    } loc(#loc572)
    cir.scope {
      %16 = cir.const #cir.int<0> : !s32i loc(#loc384)
      cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc576)
      cir.for : cond {
        %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc386)
        %18 = cir.const #cir.int<10> : !s32i loc(#loc387)
        %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc577)
        cir.condition(%19) loc(#loc388)
      } body {
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc390)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc391)
          %19 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc392)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc393)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc579)
        } loc(#loc578)
        cir.yield loc(#loc383)
      } step {
        %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc394)
        %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc395)
        cir.store %18, %1 : !s32i, !cir.ptr<!s32i> loc(#loc580)
        cir.yield loc(#loc575)
      } loc(#loc575)
    } loc(#loc575)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc398)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc399)
      %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc582)
      cir.if %18 {
        %19 = cir.const #cir.int<1> : !s32i loc(#loc403)
        %20 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc404)
        %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc405)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc406)
        cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc584)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc409)
          cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc586)
          cir.for : cond {
            %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc411)
            %25 = cir.const #cir.int<10> : !s32i loc(#loc412)
            %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc587)
            cir.condition(%26) loc(#loc413)
          } body {
            cir.scope {
              %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc415)
              %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc416)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc417)
              %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc415)
              cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc418)
            } loc(#loc588)
            cir.yield loc(#loc408)
          } step {
            %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc419)
            %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc420)
            cir.store %25, %1 : !s32i, !cir.ptr<!s32i> loc(#loc589)
            cir.yield loc(#loc585)
          } loc(#loc585)
        } loc(#loc585)
      } else {
        %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc421)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc421)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc422)
      } loc(#loc583)
    } loc(#loc581)
    %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc423)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc424)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc424)
    cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc423)
    cir.return loc(#loc352)
  } loc(#loc561)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":77:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":131:23)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":44:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":135:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":46:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":46:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":56:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":56:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":57:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":57:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":58:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":58:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":59:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":59:41)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":110:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":110:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:54)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":48:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":48:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":48:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":49:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":49:10)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":50:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":60:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":95:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":61:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":94:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:36)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:45)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:58)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:69)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":71:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":74:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":71:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":71:34)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":72:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":73:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:47)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:48)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":76:34)
#loc73 = loc("/usr/include/netinet/in.h":249:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":76:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":77:39)
#loc76 = loc("/usr/include/netinet/in.h":251:20)
#loc77 = loc("/usr/include/netinet/in.h":33:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":77:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":77:59)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":78:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":78:32)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":78:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":78:46)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":82:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:25)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:58)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:59)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:68)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:82)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:88)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":80:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":81:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:46)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:59)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:77)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:80)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:26)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:81)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":89:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:31)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:44)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:47)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:61)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":87:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":88:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":91:39)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":91:25)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":91:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":93:25)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":93:20)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":93:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":93:36)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":95:16)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":96:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":99:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":96:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":96:30)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":97:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":98:26)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":98:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":107:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":107:10)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":108:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:31)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:38)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:43)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:53)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:39)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:23)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:29)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:30)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:36)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:35)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":117:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:18)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:14)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:21)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:25)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":115:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":116:25)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":116:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":116:20)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":116:21)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:30)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:29)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":120:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":132:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":120:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":120:21)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":121:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":128:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":130:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":122:28)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":122:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":122:20)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":122:24)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":127:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:21)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:17)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:24)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:26)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":125:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":126:30)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":126:37)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":126:38)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":126:17)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:33)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:32)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":131:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":133:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":133:14)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":275:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":279:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":277:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":277:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":278:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":278:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":228:23)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":142:1)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":232:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":144:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":144:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":154:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":154:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":155:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":155:28)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":156:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":156:32)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":157:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":157:41)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":208:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":208:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:54)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":146:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":146:12)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":146:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":147:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":147:10)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":148:1)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":158:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":193:17)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":159:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":192:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:36)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:45)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:58)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:29)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:69)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":169:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":172:13)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":169:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":169:34)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":170:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":171:17)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:20)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:21)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:30)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:33)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:47)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:48)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":174:34)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":174:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":175:49)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":175:39)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":175:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":175:59)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":176:38)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":176:32)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":176:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":176:46)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":180:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:25)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:58)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:59)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:68)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:82)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:88)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":178:13)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":179:17)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:31)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:46)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:59)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:77)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:80)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:26)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:81)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:13)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":187:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:17)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:31)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:44)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:47)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:61)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":185:13)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":186:17)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":189:39)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":189:25)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":189:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":191:25)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":191:20)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":191:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":191:36)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":193:16)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":194:9)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":197:9)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":194:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":194:30)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":195:9)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":196:26)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":196:13)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":205:5)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":205:10)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":206:1)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:31)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:38)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:43)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:53)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:9)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:39)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:13)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:23)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:29)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:30)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:36)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:35)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:9)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":215:9)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:18)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:14)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:21)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:25)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:23)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":213:9)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":214:25)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":214:13)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":214:20)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":214:21)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:30)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:29)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:9)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":229:9)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:13)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:21)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:23)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:26)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:34)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:36)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":218:9)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":225:9)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":227:9)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":219:28)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":219:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":219:20)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":219:24)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:13)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":224:13)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:21)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:17)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:24)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:28)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:26)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":222:13)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":223:30)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":223:37)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":223:38)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":223:17)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:33)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:32)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":228:13)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":230:9)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":230:14)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":235:1)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":273:1)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":237:5)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":237:9)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":248:9)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":248:13)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:9)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:54)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":239:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":239:12)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":239:5)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":240:5)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":240:10)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":241:1)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":244:12)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":244:5)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":245:5)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":245:10)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":246:1)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:31)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:38)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:43)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:53)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:9)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:39)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:13)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:23)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:29)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:30)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:36)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:35)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:9)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":255:9)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:18)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:14)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:21)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:25)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:23)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":253:9)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":254:25)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":254:13)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":254:20)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":254:21)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:30)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:29)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":258:9)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":270:9)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":258:13)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":258:21)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":259:9)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":266:9)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":268:9)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":260:28)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":260:13)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":260:20)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":260:24)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:13)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":265:13)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:21)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:17)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:24)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:28)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:26)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":263:13)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":264:30)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":264:37)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":264:38)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":264:17)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:33)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:32)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":269:23)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":269:13)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":271:9)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":271:14)
#loc425 = loc(fused[#loc1, #loc2])
#loc426 = loc(fused[#loc3, #loc4])
#loc427 = loc(fused[#loc6, #loc7])
#loc428 = loc(fused[#loc8, #loc9])
#loc429 = loc(fused[#loc10, #loc11])
#loc430 = loc(fused[#loc12, #loc13])
#loc431 = loc(fused[#loc14, #loc15])
#loc432 = loc(fused[#loc16, #loc17])
#loc433 = loc(fused[#loc18, #loc19])
#loc434 = loc(fused[#loc20, #loc21])
#loc435 = loc(fused[#loc22, #loc23])
#loc436 = loc(fused[#loc25, #loc26])
#loc437 = loc(fused[#loc27, #loc28])
#loc438 = loc(fused[#loc29, #loc30])
#loc439 = loc(fused[#loc31, #loc32])
#loc440 = loc(fused[#loc33, #loc34])
#loc441 = loc(fused[#loc35, #loc36])
#loc442 = loc(fused[#loc37, #loc38])
#loc443 = loc(fused[#loc39, #loc40])
#loc444 = loc(fused[#loc41, #loc42])
#loc445 = loc(fused[#loc45, #loc43])
#loc446 = loc(fused[#loc46, #loc47])
#loc447 = loc(fused[#loc49, #loc50])
#loc448 = loc(fused[#loc51, #loc52])
#loc449 = loc(fused[#loc57, #loc58])
#loc450 = loc(fused[#loc59, #loc60])
#loc451 = loc(fused[#loc61, #loc62])
#loc452 = loc(fused[#loc63, #loc60])
#loc453 = loc(fused[#loc65, #loc66])
#loc454 = loc(fused[#loc68, #loc69])
#loc455 = loc(fused[#loc70, #loc71])
#loc456 = loc(fused[#loc74, #loc72])
#loc457 = loc(fused[#loc78, #loc79])
#loc458 = loc(fused[#loc83, #loc84])
#loc459 = loc(fused[#loc85, #loc86])
#loc460 = loc(fused[#loc88, #loc89])
#loc461 = loc(fused[#loc90, #loc91])
#loc462 = loc(fused[#loc92, #loc93])
#loc463 = loc(fused[#loc94, #loc86])
#loc464 = loc(fused[#loc98, #loc99])
#loc465 = loc(fused[#loc102, #loc103])
#loc466 = loc(fused[#loc104, #loc105])
#loc467 = loc(fused[#loc106, #loc107])
#loc468 = loc(fused[#loc109, #loc110])
#loc469 = loc(fused[#loc111, #loc105])
#loc470 = loc(fused[#loc115, #loc113])
#loc471 = loc(fused[#loc118, #loc119])
#loc472 = loc(fused[#loc121, #loc122])
#loc473 = loc(fused[#loc123, #loc124])
#loc474 = loc(fused[#loc125, #loc122])
#loc475 = loc(fused[#loc128, #loc129])
#loc476 = loc(fused[#loc133, #loc134])
#loc477 = loc(fused[#loc132, #loc134])
#loc478 = loc(fused[#loc131, #loc42])
#loc479 = loc(fused[#loc135, #loc136])
#loc480 = loc(fused[#loc137, #loc138])
#loc481 = loc(fused[#loc139, #loc136])
#loc482 = loc(fused[#loc143, #loc144])
#loc483 = loc(fused[#loc146, #loc145])
#loc484 = loc(fused[#loc147, #loc148])
#loc485 = loc(fused[#loc150, #loc144])
#loc486 = loc(fused[#loc152, #loc151])
#loc487 = loc(fused[#loc156, #loc155])
#loc488 = loc(fused[#loc157, #loc158])
#loc489 = loc(fused[#loc159, #loc160])
#loc490 = loc(fused[#loc161, #loc162, #loc163, #loc158])
#loc491 = loc(fused[#loc165, #loc164])
#loc492 = loc(fused[#loc168, #loc169])
#loc493 = loc(fused[#loc171, #loc170])
#loc494 = loc(fused[#loc172, #loc173])
#loc495 = loc(fused[#loc175, #loc169])
#loc496 = loc(fused[#loc181, #loc180])
#loc497 = loc(fused[#loc185, #loc186])
#loc498 = loc(fused[#loc187, #loc188])
#loc499 = loc(fused[#loc189, #loc190])
#loc500 = loc(fused[#loc192, #loc193])
#loc501 = loc(fused[#loc194, #loc195])
#loc502 = loc(fused[#loc196, #loc197])
#loc503 = loc(fused[#loc198, #loc199])
#loc504 = loc(fused[#loc200, #loc201])
#loc505 = loc(fused[#loc202, #loc203])
#loc506 = loc(fused[#loc204, #loc205])
#loc507 = loc(fused[#loc206, #loc207])
#loc508 = loc(fused[#loc210, #loc208])
#loc509 = loc(fused[#loc211, #loc212])
#loc510 = loc(fused[#loc214, #loc215])
#loc511 = loc(fused[#loc216, #loc217])
#loc512 = loc(fused[#loc222, #loc223])
#loc513 = loc(fused[#loc224, #loc225])
#loc514 = loc(fused[#loc226, #loc227])
#loc515 = loc(fused[#loc228, #loc225])
#loc516 = loc(fused[#loc230, #loc231])
#loc517 = loc(fused[#loc233, #loc234])
#loc518 = loc(fused[#loc235, #loc236])
#loc519 = loc(fused[#loc238, #loc237])
#loc520 = loc(fused[#loc241, #loc242])
#loc521 = loc(fused[#loc245, #loc246])
#loc522 = loc(fused[#loc247, #loc248])
#loc523 = loc(fused[#loc250, #loc251])
#loc524 = loc(fused[#loc252, #loc253])
#loc525 = loc(fused[#loc254, #loc255])
#loc526 = loc(fused[#loc256, #loc248])
#loc527 = loc(fused[#loc260, #loc261])
#loc528 = loc(fused[#loc264, #loc265])
#loc529 = loc(fused[#loc266, #loc267])
#loc530 = loc(fused[#loc268, #loc269])
#loc531 = loc(fused[#loc271, #loc272])
#loc532 = loc(fused[#loc273, #loc267])
#loc533 = loc(fused[#loc277, #loc275])
#loc534 = loc(fused[#loc280, #loc281])
#loc535 = loc(fused[#loc283, #loc284])
#loc536 = loc(fused[#loc285, #loc286])
#loc537 = loc(fused[#loc287, #loc284])
#loc538 = loc(fused[#loc290, #loc291])
#loc539 = loc(fused[#loc295, #loc296])
#loc540 = loc(fused[#loc294, #loc296])
#loc541 = loc(fused[#loc293, #loc207])
#loc542 = loc(fused[#loc297, #loc298])
#loc543 = loc(fused[#loc299, #loc300])
#loc544 = loc(fused[#loc301, #loc298])
#loc545 = loc(fused[#loc305, #loc306])
#loc546 = loc(fused[#loc308, #loc307])
#loc547 = loc(fused[#loc309, #loc310])
#loc548 = loc(fused[#loc312, #loc306])
#loc549 = loc(fused[#loc314, #loc313])
#loc550 = loc(fused[#loc318, #loc317])
#loc551 = loc(fused[#loc319, #loc320])
#loc552 = loc(fused[#loc321, #loc322])
#loc553 = loc(fused[#loc324, #loc326])
#loc554 = loc(fused[#loc327, #loc328, #loc329, #loc320])
#loc555 = loc(fused[#loc331, #loc330])
#loc556 = loc(fused[#loc334, #loc335])
#loc557 = loc(fused[#loc337, #loc336])
#loc558 = loc(fused[#loc338, #loc339])
#loc559 = loc(fused[#loc341, #loc335])
#loc560 = loc(fused[#loc347, #loc346])
#loc561 = loc(fused[#loc351, #loc352])
#loc562 = loc(fused[#loc353, #loc354])
#loc563 = loc(fused[#loc355, #loc356])
#loc564 = loc(fused[#loc357, #loc358])
#loc565 = loc(fused[#loc361, #loc359])
#loc566 = loc(fused[#loc362, #loc363])
#loc567 = loc(fused[#loc366, #loc365])
#loc568 = loc(fused[#loc367, #loc368])
#loc569 = loc(fused[#loc372, #loc373])
#loc570 = loc(fused[#loc371, #loc373])
#loc571 = loc(fused[#loc370, #loc358])
#loc572 = loc(fused[#loc374, #loc375])
#loc573 = loc(fused[#loc376, #loc377])
#loc574 = loc(fused[#loc378, #loc375])
#loc575 = loc(fused[#loc382, #loc383])
#loc576 = loc(fused[#loc385, #loc384])
#loc577 = loc(fused[#loc386, #loc387])
#loc578 = loc(fused[#loc389, #loc383])
#loc579 = loc(fused[#loc391, #loc390])
#loc580 = loc(fused[#loc395, #loc394])
#loc581 = loc(fused[#loc396, #loc397])
#loc582 = loc(fused[#loc398, #loc399])
#loc583 = loc(fused[#loc400, #loc401, #loc402, #loc397])
#loc584 = loc(fused[#loc404, #loc403])
#loc585 = loc(fused[#loc407, #loc408])
#loc586 = loc(fused[#loc410, #loc409])
#loc587 = loc(fused[#loc411, #loc412])
#loc588 = loc(fused[#loc414, #loc408])
#loc589 = loc(fused[#loc420, #loc419])
