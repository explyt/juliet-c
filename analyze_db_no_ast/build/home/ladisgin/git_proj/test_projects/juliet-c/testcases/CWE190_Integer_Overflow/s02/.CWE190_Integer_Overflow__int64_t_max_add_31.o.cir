!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc82)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_add_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc84)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc7)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc85)
    %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc9)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc86)
    cir.scope {
      %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc88)
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc89)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc14)
      cir.store %5, %3 : !s64i, !cir.ptr<!s64i> loc(#loc88)
      %6 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc89)
      cir.scope {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc91)
        %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc21)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc20)
        %11 = cir.binop(add, %8, %10) nsw : !s64i loc(#loc21)
        cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc91)
        %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc22)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc23)
      } loc(#loc90)
    } loc(#loc87)
    cir.return loc(#loc4)
  } loc(#loc83)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_add_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc92)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc34)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc97)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc36)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc100)
      %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc101)
      %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc41)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc100)
      %7 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc43)
      cir.store %7, %5 : !s64i, !cir.ptr<!s64i> loc(#loc101)
      cir.scope {
        %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc103)
        %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc48)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc47)
        %12 = cir.binop(add, %9, %11) nsw : !s64i loc(#loc48)
        cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc103)
        %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc49)
        cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc50)
      } loc(#loc102)
    } loc(#loc99)
    cir.return loc(#loc31)
  } loc(#loc95)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc58)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc107)
    %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc60)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc108)
    cir.scope {
      %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc110)
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc111)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc65)
      cir.store %5, %3 : !s64i, !cir.ptr<!s64i> loc(#loc110)
      %6 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc67)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc111)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc70)
        %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc71)
        %9 = cir.cmp(lt, %7, %8) : !s64i, !s32i loc(#loc113)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc72)
        cir.if %10 {
          %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc115)
          %12 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc78)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc77)
          %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc77)
          %15 = cir.binop(add, %12, %14) nsw : !s64i loc(#loc78)
          cir.store %15, %11 : !s64i, !cir.ptr<!s64i> loc(#loc115)
          %16 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc79)
          cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc80)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc53)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc53)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc81)
        } loc(#loc114)
      } loc(#loc112)
    } loc(#loc109)
    cir.return loc(#loc55)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_31.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":37:1)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":24:13)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":25:12)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":25:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":27:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":36:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":29:9)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":29:28)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":30:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":30:24)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":35:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":33:13)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":33:37)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":33:30)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":34:31)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":34:13)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":84:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":88:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":86:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":86:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":87:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":87:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":44:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":59:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":46:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":46:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":47:12)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":47:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":49:12)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":49:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":50:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":58:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":51:9)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":51:28)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":52:9)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":52:24)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":53:9)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":57:9)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":55:13)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":55:37)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":55:30)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":56:31)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":56:13)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":79:23)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":62:1)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":82:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":64:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":64:13)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":65:12)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":65:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":67:12)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":67:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":68:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":81:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":69:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":69:28)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":70:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":70:24)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":72:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":80:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":72:13)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":72:20)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":72:18)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":73:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":76:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":78:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":74:13)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":74:37)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":74:30)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":75:31)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":75:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_add_31.c":79:13)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc8, #loc7])
#loc86 = loc(fused[#loc10, #loc9])
#loc87 = loc(fused[#loc11, #loc12])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc17, #loc18])
#loc91 = loc(fused[#loc19, #loc20])
#loc92 = loc(fused[#loc24, #loc25])
#loc93 = loc(fused[#loc26, #loc27])
#loc94 = loc(fused[#loc28, #loc29])
#loc95 = loc(fused[#loc30, #loc31])
#loc96 = loc(fused[#loc32, #loc33])
#loc97 = loc(fused[#loc35, #loc34])
#loc98 = loc(fused[#loc37, #loc36])
#loc99 = loc(fused[#loc38, #loc39])
#loc100 = loc(fused[#loc40, #loc41])
#loc101 = loc(fused[#loc42, #loc43])
#loc102 = loc(fused[#loc44, #loc45])
#loc103 = loc(fused[#loc46, #loc47])
#loc104 = loc(fused[#loc51, #loc52])
#loc105 = loc(fused[#loc54, #loc55])
#loc106 = loc(fused[#loc56, #loc57])
#loc107 = loc(fused[#loc59, #loc58])
#loc108 = loc(fused[#loc61, #loc60])
#loc109 = loc(fused[#loc62, #loc63])
#loc110 = loc(fused[#loc64, #loc65])
#loc111 = loc(fused[#loc66, #loc67])
#loc112 = loc(fused[#loc68, #loc69])
#loc113 = loc(fused[#loc70, #loc71])
#loc114 = loc(fused[#loc73, #loc74, #loc75, #loc69])
#loc115 = loc(fused[#loc76, #loc77])
