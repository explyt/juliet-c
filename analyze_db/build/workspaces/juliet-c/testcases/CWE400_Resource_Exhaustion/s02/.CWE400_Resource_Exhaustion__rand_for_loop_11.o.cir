!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc218)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc219)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc225)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc225)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc20)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc20)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc20)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc20)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc20)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc20)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc20)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc20)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc20)
          cir.yield %24 : !u32i loc(#loc20)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc20)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc20)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc20)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc20)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc20)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc20)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc20)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc20)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc20)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc20)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc20)
          cir.yield %28 : !u32i loc(#loc20)
        }) : (!cir.bool) -> !u32i loc(#loc20)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc20)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
      } loc(#loc226)
    } loc(#loc224)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc229)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc229)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc24)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc232)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc30)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc30)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc232)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc33)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc234)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc35)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc36)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc235)
              cir.condition(%15) loc(#loc37)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc7)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc39)
              } loc(#loc236)
              cir.yield loc(#loc32)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc40)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc41)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc237)
              cir.yield loc(#loc233)
            } loc(#loc233)
          } loc(#loc233)
        } loc(#loc231)
      } loc(#loc230)
    } loc(#loc228)
    cir.return loc(#loc9)
  } loc(#loc221)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc239)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc240)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc241)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc242)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    cir.return loc(#loc43)
  } loc(#loc238)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc243)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc60)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc248)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc248)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc64)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc67)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc67)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc67)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc67)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc67)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc67)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc67)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc67)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc67)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc67)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc67)
          cir.yield %24 : !u32i loc(#loc67)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc67)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc67)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc67)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc67)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc67)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc67)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc67)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc67)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc67)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc67)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc67)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc67)
          cir.yield %28 : !u32i loc(#loc67)
        }) : (!cir.bool) -> !u32i loc(#loc67)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc67)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
      } loc(#loc249)
    } loc(#loc247)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc252)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc252)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc71)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc71)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      } else {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc255)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc80)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc80)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc255)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc84)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc257)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc87)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc258)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc85)
                cir.yield %18 : !cir.bool loc(#loc85)
              }, false {
                %18 = cir.const #false loc(#loc85)
                cir.yield %18 : !cir.bool loc(#loc85)
              }) : (!cir.bool) -> !cir.bool loc(#loc85)
              cir.yield %17 : !cir.bool loc(#loc85)
            }, false {
              %14 = cir.const #false loc(#loc85)
              cir.yield %14 : !cir.bool loc(#loc85)
            }) : (!cir.bool) -> !cir.bool loc(#loc85)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc91)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc91)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc261)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc93)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc94)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc262)
                  cir.condition(%19) loc(#loc95)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc97)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc97)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc98)
                  } loc(#loc263)
                  cir.yield loc(#loc90)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc99)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc100)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc264)
                  cir.yield loc(#loc260)
                } loc(#loc260)
              } loc(#loc260)
            } loc(#loc259)
          } loc(#loc256)
        } loc(#loc254)
      } loc(#loc253)
    } loc(#loc251)
    cir.return loc(#loc56)
  } loc(#loc244)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc106)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc269)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc269)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc110)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc110)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc113)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc113)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc113)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc113)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc113)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc113)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc113)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc113)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc113)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc113)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc113)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc113)
          cir.yield %24 : !u32i loc(#loc113)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc113)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc113)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc113)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc113)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc113)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc113)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc113)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc113)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc113)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc113)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc113)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc113)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc113)
          cir.yield %28 : !u32i loc(#loc113)
        }) : (!cir.bool) -> !u32i loc(#loc113)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc113)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
      } loc(#loc270)
    } loc(#loc268)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc273)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc273)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc117)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc117)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc276)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc123)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc123)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc276)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc127)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc278)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc130)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc279)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc128)
                cir.yield %18 : !cir.bool loc(#loc128)
              }, false {
                %18 = cir.const #false loc(#loc128)
                cir.yield %18 : !cir.bool loc(#loc128)
              }) : (!cir.bool) -> !cir.bool loc(#loc128)
              cir.yield %17 : !cir.bool loc(#loc128)
            }, false {
              %14 = cir.const #false loc(#loc128)
              cir.yield %14 : !cir.bool loc(#loc128)
            }) : (!cir.bool) -> !cir.bool loc(#loc128)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc134)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc134)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc282)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc136)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc137)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc283)
                  cir.condition(%19) loc(#loc138)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc140)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc140)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc141)
                  } loc(#loc284)
                  cir.yield loc(#loc133)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc142)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc143)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc285)
                  cir.yield loc(#loc281)
                } loc(#loc281)
              } loc(#loc281)
            } loc(#loc280)
          } loc(#loc277)
        } loc(#loc275)
      } loc(#loc274)
    } loc(#loc272)
    cir.return loc(#loc102)
  } loc(#loc265)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc149)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc290)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc290)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc153)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc153)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc158)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc158)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc159)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc160)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
      } loc(#loc291)
    } loc(#loc289)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc294)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc294)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc164)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc164)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc297)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc170)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc170)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc297)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc173)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc173)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc299)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc175)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc176)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc300)
              cir.condition(%15) loc(#loc177)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc179)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc179)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc180)
              } loc(#loc301)
              cir.yield loc(#loc172)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc181)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc182)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc302)
              cir.yield loc(#loc298)
            } loc(#loc298)
          } loc(#loc298)
        } loc(#loc296)
      } loc(#loc295)
    } loc(#loc293)
    cir.return loc(#loc145)
  } loc(#loc286)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc304)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc187)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc188)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc307)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc307)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc192)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc192)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc195)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc309)
      } loc(#loc308)
    } loc(#loc306)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc311)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc311)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc199)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc199)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc314)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc205)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc205)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc314)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc208)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc208)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc316)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc210)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc211)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc317)
              cir.condition(%15) loc(#loc212)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc214)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc214)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc215)
              } loc(#loc318)
              cir.yield loc(#loc207)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc216)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc217)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc319)
              cir.yield loc(#loc315)
            } loc(#loc315)
          } loc(#loc315)
        } loc(#loc313)
      } loc(#loc312)
    } loc(#loc310)
    cir.return loc(#loc184)
  } loc(#loc303)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":39:27)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":22:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":43:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":24:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":24:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":26:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":26:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":26:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":27:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":31:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":27:8)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":27:26)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":28:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":30:17)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":30:9)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":32:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":42:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":32:8)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":32:26)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":33:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":34:9)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":41:9)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":35:13)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":35:24)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":37:13)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":40:13)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":37:22)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":37:18)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":37:25)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":37:37)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":37:27)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":38:13)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":39:17)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":37:45)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":37:44)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":161:1)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":167:1)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":163:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":163:14)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":164:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":164:14)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":165:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":165:14)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":166:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":166:14)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":63:19)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":50:1)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":79:1)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":52:5)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":52:9)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":54:14)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":54:13)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":54:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":55:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":59:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":55:8)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":55:26)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":56:5)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":58:17)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":58:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":60:5)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":78:5)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":60:8)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":60:27)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":61:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":64:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":66:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":63:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":67:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":77:9)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":68:13)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":68:24)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":70:13)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":76:13)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":70:17)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":70:25)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":70:27)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":70:30)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":70:39)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":71:13)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":72:17)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":75:17)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":72:26)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":72:22)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":72:29)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":72:41)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":72:31)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":73:17)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":74:31)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":74:21)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":72:49)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":72:48)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":82:1)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":106:1)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":84:5)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":84:9)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":86:14)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":86:13)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":86:5)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":87:5)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":91:5)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":87:8)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":87:26)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":88:5)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":90:17)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":90:9)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":92:5)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":105:5)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":92:8)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":92:26)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":93:5)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":94:9)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":104:9)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":95:13)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":95:24)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":97:13)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":103:13)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":97:17)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":97:25)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":97:27)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":97:30)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":97:39)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":98:13)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":99:17)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":102:17)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":99:26)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":99:22)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":99:29)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":99:41)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":99:31)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":100:17)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":101:31)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":101:21)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":99:49)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":99:48)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":109:1)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":135:1)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":111:5)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":111:9)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":113:14)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":113:13)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":113:5)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":114:5)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":123:5)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":114:8)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":114:27)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":115:5)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":118:5)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":120:5)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":117:19)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":117:9)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":122:17)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":122:9)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":124:5)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":134:5)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":124:8)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":124:26)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":125:5)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":126:9)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":133:9)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":127:13)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":127:24)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":129:13)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":132:13)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":129:22)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":129:18)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":129:25)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":129:37)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":129:27)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":130:13)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":131:27)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":131:17)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":129:45)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":129:44)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":138:1)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":159:1)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":140:5)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":140:9)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":142:14)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":142:13)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":142:5)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":143:5)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":147:5)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":143:8)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":143:26)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":144:5)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":146:17)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":146:9)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":148:5)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":158:5)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":148:8)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":148:26)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":149:5)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":150:9)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":157:9)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":151:13)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":151:24)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":153:13)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":156:13)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":153:22)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":153:18)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":153:25)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":153:37)
#loc212 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":153:27)
#loc213 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":154:13)
#loc214 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":155:27)
#loc215 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":155:17)
#loc216 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":153:45)
#loc217 = loc("CWE400_Resource_Exhaustion__rand_for_loop_11.c":153:44)
#loc218 = loc(fused[#loc1, #loc2])
#loc219 = loc(fused[#loc3, #loc4])
#loc220 = loc(fused[#loc5, #loc6])
#loc221 = loc(fused[#loc8, #loc9])
#loc222 = loc(fused[#loc10, #loc11])
#loc223 = loc(fused[#loc14, #loc12])
#loc224 = loc(fused[#loc15, #loc16])
#loc225 = loc(fused[#loc17, #loc18])
#loc226 = loc(fused[#loc19, #loc16])
#loc227 = loc(fused[#loc21, #loc20])
#loc228 = loc(fused[#loc22, #loc23])
#loc229 = loc(fused[#loc24, #loc25])
#loc230 = loc(fused[#loc26, #loc23])
#loc231 = loc(fused[#loc27, #loc28])
#loc232 = loc(fused[#loc29, #loc30])
#loc233 = loc(fused[#loc31, #loc32])
#loc234 = loc(fused[#loc34, #loc33])
#loc235 = loc(fused[#loc35, #loc36])
#loc236 = loc(fused[#loc38, #loc32])
#loc237 = loc(fused[#loc41, #loc40])
#loc238 = loc(fused[#loc42, #loc43])
#loc239 = loc(fused[#loc44, #loc45])
#loc240 = loc(fused[#loc46, #loc47])
#loc241 = loc(fused[#loc48, #loc49])
#loc242 = loc(fused[#loc50, #loc51])
#loc243 = loc(fused[#loc52, #loc53])
#loc244 = loc(fused[#loc55, #loc56])
#loc245 = loc(fused[#loc57, #loc58])
#loc246 = loc(fused[#loc61, #loc59])
#loc247 = loc(fused[#loc62, #loc63])
#loc248 = loc(fused[#loc64, #loc65])
#loc249 = loc(fused[#loc66, #loc63])
#loc250 = loc(fused[#loc68, #loc67])
#loc251 = loc(fused[#loc69, #loc70])
#loc252 = loc(fused[#loc71, #loc72])
#loc253 = loc(fused[#loc73, #loc74, #loc75, #loc70])
#loc254 = loc(fused[#loc77, #loc78])
#loc255 = loc(fused[#loc79, #loc80])
#loc256 = loc(fused[#loc81, #loc82])
#loc257 = loc(fused[#loc83, #loc84])
#loc258 = loc(fused[#loc86, #loc87])
#loc259 = loc(fused[#loc88, #loc82])
#loc260 = loc(fused[#loc89, #loc90])
#loc261 = loc(fused[#loc92, #loc91])
#loc262 = loc(fused[#loc93, #loc94])
#loc263 = loc(fused[#loc96, #loc90])
#loc264 = loc(fused[#loc100, #loc99])
#loc265 = loc(fused[#loc101, #loc102])
#loc266 = loc(fused[#loc103, #loc104])
#loc267 = loc(fused[#loc107, #loc105])
#loc268 = loc(fused[#loc108, #loc109])
#loc269 = loc(fused[#loc110, #loc111])
#loc270 = loc(fused[#loc112, #loc109])
#loc271 = loc(fused[#loc114, #loc113])
#loc272 = loc(fused[#loc115, #loc116])
#loc273 = loc(fused[#loc117, #loc118])
#loc274 = loc(fused[#loc119, #loc116])
#loc275 = loc(fused[#loc120, #loc121])
#loc276 = loc(fused[#loc122, #loc123])
#loc277 = loc(fused[#loc124, #loc125])
#loc278 = loc(fused[#loc126, #loc127])
#loc279 = loc(fused[#loc129, #loc130])
#loc280 = loc(fused[#loc131, #loc125])
#loc281 = loc(fused[#loc132, #loc133])
#loc282 = loc(fused[#loc135, #loc134])
#loc283 = loc(fused[#loc136, #loc137])
#loc284 = loc(fused[#loc139, #loc133])
#loc285 = loc(fused[#loc143, #loc142])
#loc286 = loc(fused[#loc144, #loc145])
#loc287 = loc(fused[#loc146, #loc147])
#loc288 = loc(fused[#loc150, #loc148])
#loc289 = loc(fused[#loc151, #loc152])
#loc290 = loc(fused[#loc153, #loc154])
#loc291 = loc(fused[#loc155, #loc156, #loc157, #loc152])
#loc292 = loc(fused[#loc161, #loc160])
#loc293 = loc(fused[#loc162, #loc163])
#loc294 = loc(fused[#loc164, #loc165])
#loc295 = loc(fused[#loc166, #loc163])
#loc296 = loc(fused[#loc167, #loc168])
#loc297 = loc(fused[#loc169, #loc170])
#loc298 = loc(fused[#loc171, #loc172])
#loc299 = loc(fused[#loc174, #loc173])
#loc300 = loc(fused[#loc175, #loc176])
#loc301 = loc(fused[#loc178, #loc172])
#loc302 = loc(fused[#loc182, #loc181])
#loc303 = loc(fused[#loc183, #loc184])
#loc304 = loc(fused[#loc185, #loc186])
#loc305 = loc(fused[#loc189, #loc187])
#loc306 = loc(fused[#loc190, #loc191])
#loc307 = loc(fused[#loc192, #loc193])
#loc308 = loc(fused[#loc194, #loc191])
#loc309 = loc(fused[#loc196, #loc195])
#loc310 = loc(fused[#loc197, #loc198])
#loc311 = loc(fused[#loc199, #loc200])
#loc312 = loc(fused[#loc201, #loc198])
#loc313 = loc(fused[#loc202, #loc203])
#loc314 = loc(fused[#loc204, #loc205])
#loc315 = loc(fused[#loc206, #loc207])
#loc316 = loc(fused[#loc209, #loc208])
#loc317 = loc(fused[#loc210, #loc211])
#loc318 = loc(fused[#loc213, #loc207])
#loc319 = loc(fused[#loc217, #loc216])
