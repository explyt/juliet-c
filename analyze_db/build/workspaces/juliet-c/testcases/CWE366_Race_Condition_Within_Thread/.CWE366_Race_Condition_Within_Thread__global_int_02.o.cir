!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!ty__stdThread = !cir.record<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.record<struct "_stdThreadLock" incomplete>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":26:23)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":26:29)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":44:24)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":44:30)
#true = #cir.bool<true> : !cir.bool
#loc242 = loc(fused[#loc7, #loc8])
#loc279 = loc(fused[#loc100, #loc101])
module @"/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @gBadInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc239)
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc240)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc243)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      cir.for : cond {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %4 = cir.const #cir.int<1000000> : !s32i loc(#loc17)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc246)
        cir.condition(%5) loc(#loc18)
      } body {
        cir.scope {
          %3 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc239)
          %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc20)
          %7 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc239)
          cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc248)
        } loc(#loc247)
        cir.yield loc(#loc13)
      } step {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %4 = cir.unary(inc, %3) nsw : !s32i, !s32i loc(#loc24)
        cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc249)
        cir.yield loc(#loc244)
      } loc(#loc244)
    } loc(#loc244)
    cir.return loc(#loc6)
  } loc(#loc241)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc250)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc251)
  cir.func private @printIntLine(!s32i) loc(#loc252)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_02_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc35)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc257)
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc258)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc40)
          cir.store %4, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc257)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc42)
          cir.store %5, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc258)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc43)
          %7 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc239)
          cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc259)
          cir.scope {
            %10 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc47)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc48)
            %12 = cir.call @stdThreadCreate(%10, %11, %2) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc49)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc49)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc49)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc51)
              cir.store %15, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc262)
            } loc(#loc261)
          } loc(#loc260)
          cir.scope {
            %10 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc55)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc56)
            %12 = cir.call @stdThreadCreate(%10, %11, %3) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc57)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc57)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc57)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc59)
              cir.store %15, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc265)
            } loc(#loc264)
          } loc(#loc263)
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc63)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc63)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc65)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc66)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc66)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc64)
                cir.yield %17 : !cir.bool loc(#loc64)
              }, false {
                %17 = cir.const #false loc(#loc64)
                cir.yield %17 : !cir.bool loc(#loc64)
              }) : (!cir.bool) -> !cir.bool loc(#loc64)
              cir.yield %16 : !cir.bool loc(#loc64)
            }, false {
              %13 = cir.const #false loc(#loc64)
              cir.yield %13 : !cir.bool loc(#loc64)
            }) : (!cir.bool) -> !cir.bool loc(#loc64)
            cir.if %12 {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc68)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc69)
            } loc(#loc267)
          } loc(#loc266)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc72)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc72)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc74)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc75)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc75)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc73)
                cir.yield %17 : !cir.bool loc(#loc73)
              }, false {
                %17 = cir.const #false loc(#loc73)
                cir.yield %17 : !cir.bool loc(#loc73)
              }) : (!cir.bool) -> !cir.bool loc(#loc73)
              cir.yield %16 : !cir.bool loc(#loc73)
            }, false {
              %13 = cir.const #false loc(#loc73)
              cir.yield %13 : !cir.bool loc(#loc73)
            }) : (!cir.bool) -> !cir.bool loc(#loc73)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc77)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc78)
            } loc(#loc269)
          } loc(#loc268)
          %8 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc239)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc79)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc80)
        } loc(#loc256)
      } loc(#loc255)
    } loc(#loc254)
    cir.return loc(#loc32)
  } loc(#loc253)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_02_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc271)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc83)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc272)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc85)
    cir.return loc(#loc82)
  } loc(#loc270)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc273)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc89)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc274)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc275)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc276)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc277)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc100, #loc101])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc279)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc280)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc104)
    %2 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc275)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc105)
    cir.call @stdThreadLockAcquire(%3) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc106)
    cir.scope {
      %6 = cir.const #cir.int<0> : !s32i loc(#loc109)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc282)
      cir.for : cond {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        %8 = cir.const #cir.int<1000000> : !s32i loc(#loc112)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc283)
        cir.condition(%9) loc(#loc113)
      } body {
        cir.scope {
          %7 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc285)
          %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc118)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc117)
          %11 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc285)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc286)
        } loc(#loc284)
        cir.yield loc(#loc108)
      } step {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc121)
        cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc287)
        cir.yield loc(#loc281)
      } loc(#loc281)
    } loc(#loc281)
    %4 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc275)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc122)
    cir.call @stdThreadLockRelease(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc123)
    cir.return loc(#loc99)
  } loc(#loc278)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc288)
  cir.global "private" internal dsolocal @gGoodInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc285)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc130)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc130)
      cir.if %1 {
        %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc89)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc89)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc134)
      } else {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc293)
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc294)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc138)
          cir.store %4, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc293)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc140)
          cir.store %5, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc294)
          cir.scope {
            %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc275)
            %11 = cir.call @stdThreadLockCreate(%10) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc143)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc143)
            %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc143)
            cir.if %13 {
              cir.return loc(#loc145)
            } loc(#loc296)
          } loc(#loc295)
          cir.scope {
            %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc148)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc149)
            %12 = cir.call @stdThreadCreate(%10, %11, %2) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc150)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc150)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc150)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc152)
              cir.store %15, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc299)
            } loc(#loc298)
          } loc(#loc297)
          cir.scope {
            %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc156)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc157)
            %12 = cir.call @stdThreadCreate(%10, %11, %3) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc158)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc158)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc158)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc160)
              cir.store %15, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc302)
            } loc(#loc301)
          } loc(#loc300)
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc164)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc164)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc166)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc167)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc167)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc165)
                cir.yield %17 : !cir.bool loc(#loc165)
              }, false {
                %17 = cir.const #false loc(#loc165)
                cir.yield %17 : !cir.bool loc(#loc165)
              }) : (!cir.bool) -> !cir.bool loc(#loc165)
              cir.yield %16 : !cir.bool loc(#loc165)
            }, false {
              %13 = cir.const #false loc(#loc165)
              cir.yield %13 : !cir.bool loc(#loc165)
            }) : (!cir.bool) -> !cir.bool loc(#loc165)
            cir.if %12 {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc169)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc170)
            } loc(#loc304)
          } loc(#loc303)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc173)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc173)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc175)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc176)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc176)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc174)
                cir.yield %17 : !cir.bool loc(#loc174)
              }, false {
                %17 = cir.const #false loc(#loc174)
                cir.yield %17 : !cir.bool loc(#loc174)
              }) : (!cir.bool) -> !cir.bool loc(#loc174)
              cir.yield %16 : !cir.bool loc(#loc174)
            }, false {
              %13 = cir.const #false loc(#loc174)
              cir.yield %13 : !cir.bool loc(#loc174)
            }) : (!cir.bool) -> !cir.bool loc(#loc174)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc178)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc179)
            } loc(#loc306)
          } loc(#loc305)
          %6 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc275)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc180)
          cir.call @stdThreadLockDestroy(%7) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc181)
          %8 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc285)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc182)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc183)
        } loc(#loc292)
      } loc(#loc291)
    } loc(#loc290)
    cir.return loc(#loc127)
  } loc(#loc289)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc188)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc188)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc311)
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc312)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc193)
          cir.store %4, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc311)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc195)
          cir.store %5, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc312)
          cir.scope {
            %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc275)
            %11 = cir.call @stdThreadLockCreate(%10) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc198)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc198)
            %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc198)
            cir.if %13 {
              cir.return loc(#loc200)
            } loc(#loc314)
          } loc(#loc313)
          cir.scope {
            %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc203)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc204)
            %12 = cir.call @stdThreadCreate(%10, %11, %2) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc205)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc205)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc205)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc207)
              cir.store %15, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc317)
            } loc(#loc316)
          } loc(#loc315)
          cir.scope {
            %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc211)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc212)
            %12 = cir.call @stdThreadCreate(%10, %11, %3) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc213)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc213)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc213)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc215)
              cir.store %15, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc320)
            } loc(#loc319)
          } loc(#loc318)
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc219)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc219)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc221)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc222)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc222)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc220)
                cir.yield %17 : !cir.bool loc(#loc220)
              }, false {
                %17 = cir.const #false loc(#loc220)
                cir.yield %17 : !cir.bool loc(#loc220)
              }) : (!cir.bool) -> !cir.bool loc(#loc220)
              cir.yield %16 : !cir.bool loc(#loc220)
            }, false {
              %13 = cir.const #false loc(#loc220)
              cir.yield %13 : !cir.bool loc(#loc220)
            }) : (!cir.bool) -> !cir.bool loc(#loc220)
            cir.if %12 {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc224)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc225)
            } loc(#loc322)
          } loc(#loc321)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc228)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc228)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc230)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc231)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc231)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc229)
                cir.yield %17 : !cir.bool loc(#loc229)
              }, false {
                %17 = cir.const #false loc(#loc229)
                cir.yield %17 : !cir.bool loc(#loc229)
              }) : (!cir.bool) -> !cir.bool loc(#loc229)
              cir.yield %16 : !cir.bool loc(#loc229)
            }, false {
              %13 = cir.const #false loc(#loc229)
              cir.yield %13 : !cir.bool loc(#loc229)
            }) : (!cir.bool) -> !cir.bool loc(#loc229)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc233)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc234)
            } loc(#loc324)
          } loc(#loc323)
          %6 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc275)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc235)
          cir.call @stdThreadLockDestroy(%7) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc236)
          %8 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc285)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc237)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc238)
        } loc(#loc310)
      } loc(#loc309)
    } loc(#loc308)
    cir.return loc(#loc185)
  } loc(#loc307)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_02.c":0:0)
#loc1 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":22:1)
#loc2 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":22:22)
#loc3 = loc("../../testcasesupport/std_thread.h":14:1)
#loc4 = loc("../../testcasesupport/std_thread.h":14:74)
#loc5 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":26:1)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":42:1)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":28:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":28:9)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":27:1)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":38:5)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":41:5)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":38:14)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":38:10)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":38:17)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":38:21)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":38:19)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":39:5)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":40:19)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":40:29)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":40:9)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":38:31)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":38:30)
#loc25 = loc("../../testcasesupport/std_thread.h":15:1)
#loc26 = loc("../../testcasesupport/std_thread.h":15:35)
#loc27 = loc("../../testcasesupport/std_thread.h":16:1)
#loc28 = loc("../../testcasesupport/std_thread.h":16:38)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc31 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":59:1)
#loc32 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":86:1)
#loc33 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":61:5)
#loc34 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":85:5)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":61:8)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":62:5)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":63:9)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":84:9)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":64:13)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":64:33)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":65:13)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":65:33)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":66:23)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":66:13)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":67:13)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":70:13)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":67:34)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":67:45)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":67:18)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":68:13)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":69:27)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":69:17)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":71:13)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":74:13)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":71:34)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":71:45)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":71:18)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":72:13)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":73:27)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":73:17)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":75:13)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":78:13)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":75:17)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":75:25)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":75:42)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":75:28)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":76:13)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":77:34)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":77:17)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":79:13)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":82:13)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":79:17)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":79:25)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":79:42)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":79:28)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":80:13)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":81:34)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":81:17)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":83:26)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":83:13)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":165:1)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":169:1)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":167:5)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":167:11)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":168:5)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":168:11)
#loc87 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc88 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":98:19)
#loc90 = loc("../../testcasesupport/std_thread.h":18:1)
#loc91 = loc("../../testcasesupport/std_thread.h":18:44)
#loc92 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":24:1)
#loc93 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":24:34)
#loc94 = loc("../../testcasesupport/std_thread.h":19:1)
#loc95 = loc("../../testcasesupport/std_thread.h":19:45)
#loc96 = loc("../../testcasesupport/std_thread.h":20:1)
#loc97 = loc("../../testcasesupport/std_thread.h":20:45)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":44:1)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":55:1)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":46:5)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":46:9)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":45:1)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":49:26)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":49:5)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":50:5)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":53:5)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":50:14)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":50:10)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":50:17)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":50:21)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":50:19)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":51:5)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":23:1)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":23:23)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":52:20)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":52:31)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":52:9)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":50:31)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":50:30)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":54:26)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":54:5)
#loc124 = loc("../../testcasesupport/std_thread.h":21:1)
#loc125 = loc("../../testcasesupport/std_thread.h":21:45)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":93:1)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":129:1)
#loc128 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":95:5)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":128:5)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":95:8)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":96:5)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":99:5)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":101:5)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":98:9)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":102:9)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":127:9)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":103:13)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":103:33)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":104:13)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":104:33)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":105:13)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":108:13)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":105:18)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":106:13)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":107:17)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":109:13)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":112:13)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":109:34)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":109:46)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":109:18)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":110:13)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":111:27)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":111:17)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":113:13)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":116:13)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":113:34)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":113:46)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":113:18)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":114:13)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":115:27)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":115:17)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":117:13)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":120:13)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":117:17)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":117:25)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":117:42)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":117:28)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":118:13)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":119:34)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":119:17)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":121:13)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":124:13)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":121:17)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":121:25)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":121:42)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":121:28)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":122:13)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":123:34)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":123:17)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":125:34)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":125:13)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":126:26)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":126:13)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":132:1)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":163:1)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":134:5)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":162:5)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":134:8)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":135:5)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":136:9)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":161:9)
#loc192 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":137:13)
#loc193 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":137:33)
#loc194 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":138:13)
#loc195 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":138:33)
#loc196 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":139:13)
#loc197 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":142:13)
#loc198 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":139:18)
#loc199 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":140:13)
#loc200 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":141:17)
#loc201 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":143:13)
#loc202 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":146:13)
#loc203 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":143:34)
#loc204 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":143:46)
#loc205 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":143:18)
#loc206 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":144:13)
#loc207 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":145:27)
#loc208 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":145:17)
#loc209 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":147:13)
#loc210 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":150:13)
#loc211 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":147:34)
#loc212 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":147:46)
#loc213 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":147:18)
#loc214 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":148:13)
#loc215 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":149:27)
#loc216 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":149:17)
#loc217 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":151:13)
#loc218 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":154:13)
#loc219 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":151:17)
#loc220 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":151:25)
#loc221 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":151:42)
#loc222 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":151:28)
#loc223 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":152:13)
#loc224 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":153:34)
#loc225 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":153:17)
#loc226 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":155:13)
#loc227 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":158:13)
#loc228 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":155:17)
#loc229 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":155:25)
#loc230 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":155:42)
#loc231 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":155:28)
#loc232 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":156:13)
#loc233 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":157:34)
#loc234 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":157:17)
#loc235 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":159:34)
#loc236 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":159:13)
#loc237 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":160:26)
#loc238 = loc("CWE366_Race_Condition_Within_Thread__global_int_02.c":160:13)
#loc239 = loc(fused[#loc1, #loc2])
#loc240 = loc(fused[#loc3, #loc4])
#loc241 = loc(fused[#loc5, #loc6])
#loc243 = loc(fused[#loc9, #loc10])
#loc244 = loc(fused[#loc12, #loc13])
#loc245 = loc(fused[#loc15, #loc14])
#loc246 = loc(fused[#loc16, #loc17])
#loc247 = loc(fused[#loc19, #loc13])
#loc248 = loc(fused[#loc22, #loc21])
#loc249 = loc(fused[#loc24, #loc23])
#loc250 = loc(fused[#loc25, #loc26])
#loc251 = loc(fused[#loc27, #loc28])
#loc252 = loc(fused[#loc29, #loc30])
#loc253 = loc(fused[#loc31, #loc32])
#loc254 = loc(fused[#loc33, #loc34])
#loc255 = loc(fused[#loc36, #loc34])
#loc256 = loc(fused[#loc37, #loc38])
#loc257 = loc(fused[#loc39, #loc40])
#loc258 = loc(fused[#loc41, #loc42])
#loc259 = loc(fused[#loc44, #loc43])
#loc260 = loc(fused[#loc45, #loc46])
#loc261 = loc(fused[#loc50, #loc46])
#loc262 = loc(fused[#loc52, #loc51])
#loc263 = loc(fused[#loc53, #loc54])
#loc264 = loc(fused[#loc58, #loc54])
#loc265 = loc(fused[#loc60, #loc59])
#loc266 = loc(fused[#loc61, #loc62])
#loc267 = loc(fused[#loc67, #loc62])
#loc268 = loc(fused[#loc70, #loc71])
#loc269 = loc(fused[#loc76, #loc71])
#loc270 = loc(fused[#loc81, #loc82])
#loc271 = loc(fused[#loc83, #loc84])
#loc272 = loc(fused[#loc85, #loc86])
#loc273 = loc(fused[#loc87, #loc88])
#loc274 = loc(fused[#loc90, #loc91])
#loc275 = loc(fused[#loc92, #loc93])
#loc276 = loc(fused[#loc94, #loc95])
#loc277 = loc(fused[#loc96, #loc97])
#loc278 = loc(fused[#loc98, #loc99])
#loc280 = loc(fused[#loc102, #loc103])
#loc281 = loc(fused[#loc107, #loc108])
#loc282 = loc(fused[#loc110, #loc109])
#loc283 = loc(fused[#loc111, #loc112])
#loc284 = loc(fused[#loc114, #loc108])
#loc285 = loc(fused[#loc115, #loc116])
#loc286 = loc(fused[#loc119, #loc118])
#loc287 = loc(fused[#loc121, #loc120])
#loc288 = loc(fused[#loc124, #loc125])
#loc289 = loc(fused[#loc126, #loc127])
#loc290 = loc(fused[#loc128, #loc129])
#loc291 = loc(fused[#loc131, #loc132, #loc133, #loc129])
#loc292 = loc(fused[#loc135, #loc136])
#loc293 = loc(fused[#loc137, #loc138])
#loc294 = loc(fused[#loc139, #loc140])
#loc295 = loc(fused[#loc141, #loc142])
#loc296 = loc(fused[#loc144, #loc142])
#loc297 = loc(fused[#loc146, #loc147])
#loc298 = loc(fused[#loc151, #loc147])
#loc299 = loc(fused[#loc153, #loc152])
#loc300 = loc(fused[#loc154, #loc155])
#loc301 = loc(fused[#loc159, #loc155])
#loc302 = loc(fused[#loc161, #loc160])
#loc303 = loc(fused[#loc162, #loc163])
#loc304 = loc(fused[#loc168, #loc163])
#loc305 = loc(fused[#loc171, #loc172])
#loc306 = loc(fused[#loc177, #loc172])
#loc307 = loc(fused[#loc184, #loc185])
#loc308 = loc(fused[#loc186, #loc187])
#loc309 = loc(fused[#loc189, #loc187])
#loc310 = loc(fused[#loc190, #loc191])
#loc311 = loc(fused[#loc192, #loc193])
#loc312 = loc(fused[#loc194, #loc195])
#loc313 = loc(fused[#loc196, #loc197])
#loc314 = loc(fused[#loc199, #loc197])
#loc315 = loc(fused[#loc201, #loc202])
#loc316 = loc(fused[#loc206, #loc202])
#loc317 = loc(fused[#loc208, #loc207])
#loc318 = loc(fused[#loc209, #loc210])
#loc319 = loc(fused[#loc214, #loc210])
#loc320 = loc(fused[#loc216, #loc215])
#loc321 = loc(fused[#loc217, #loc218])
#loc322 = loc(fused[#loc223, #loc218])
#loc323 = loc(fused[#loc226, #loc227])
#loc324 = loc(fused[#loc232, #loc227])
