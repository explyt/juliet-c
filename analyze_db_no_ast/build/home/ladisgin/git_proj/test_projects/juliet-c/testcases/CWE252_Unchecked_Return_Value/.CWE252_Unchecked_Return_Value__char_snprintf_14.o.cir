!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalFive : !s32i {alignment = 4 : i64} loc(#loc97)
  cir.func private  @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc98)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_snprintf_14_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc97)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !s32i loc(#loc101)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc104)
          %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc104)
          cir.store %7, %5 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc104)
          %8 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc20)
          cir.store %8, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc105)
          %9 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc21)
          %10 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
          %11 = cir.const #cir.int<100> : !s32i loc(#loc23)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc23)
          %13 = cir.const #cir.int<6> : !u64i loc(#loc106)
          %14 = cir.binop(sub, %12, %13) : !u64i loc(#loc107)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc26)
          %17 = cir.binop(sub, %14, %16) : !u64i loc(#loc108)
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
          %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc6)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc6)
          %22 = cir.call @snprintf(%10, %17, %19, %21) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc21)
        } loc(#loc103)
      } loc(#loc102)
    } loc(#loc100)
    cir.return loc(#loc8)
  } loc(#loc99)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_snprintf_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc109)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc35)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc97)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc42)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !s32i loc(#loc115)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc43)
      cir.if %4 {
        %5 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      } else {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc118)
          %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc119)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc118)
          cir.store %7, %5 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc118)
          %8 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
          cir.store %8, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
          cir.scope {
            %9 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc56)
            %10 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc58)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc58)
            %13 = cir.const #cir.int<6> : !u64i loc(#loc121)
            %14 = cir.binop(sub, %12, %13) : !u64i loc(#loc122)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc61)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc61)
            %17 = cir.binop(sub, %14, %16) : !u64i loc(#loc123)
            %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc62)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc62)
            %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc63)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc63)
            %22 = cir.call @snprintf(%10, %17, %19, %21) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc56)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc64)
            %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc124)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc65)
            cir.if %25 {
              %26 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc36)
              %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc36)
              cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc67)
            } loc(#loc125)
          } loc(#loc120)
        } loc(#loc117)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc38)
  } loc(#loc113)
  cir.func no_proto internal private  @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc97)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc73)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !s32i loc(#loc128)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc74)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc131)
          %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc132)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc131)
          cir.store %7, %5 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc131)
          %8 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc81)
          cir.store %8, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
          cir.scope {
            %9 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc84)
            %10 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc86)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc86)
            %13 = cir.const #cir.int<6> : !u64i loc(#loc134)
            %14 = cir.binop(sub, %12, %13) : !u64i loc(#loc135)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc89)
            %17 = cir.binop(sub, %14, %16) : !u64i loc(#loc136)
            %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc90)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc90)
            %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc91)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc91)
            %22 = cir.call @snprintf(%10, %17, %19, %21) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc84)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc92)
            %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc137)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc93)
            cir.if %25 {
              %26 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc95)
              %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc95)
              cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } loc(#loc138)
          } loc(#loc133)
        } loc(#loc130)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc69)
  } loc(#loc126)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdio.h":385:1)
#loc4 = loc("/usr/include/stdio.h":387:62)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":42:46)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":42:54)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":32:1)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":45:1)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":34:5)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":44:5)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":34:8)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":34:20)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":34:18)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":35:5)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":36:9)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":43:9)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":39:13)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":39:36)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":40:13)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":40:27)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":42:13)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":42:22)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":42:27)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":42:31)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":42:41)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":42:43)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":94:1)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":98:1)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":96:5)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":96:11)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":97:5)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":97:11)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":57:19)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":69:27)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":52:1)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":73:1)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":54:5)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":72:5)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":54:8)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":54:20)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":54:18)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":55:5)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":58:5)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":60:5)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":57:9)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":61:9)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":71:9)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":64:13)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":64:36)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":65:13)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":65:27)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:13)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":70:13)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:17)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:26)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:31)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:35)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:45)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:47)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:50)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:58)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:65)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":67:63)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":68:13)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":69:17)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":76:1)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":92:1)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":78:5)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":91:5)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":78:8)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":78:20)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":78:18)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":79:5)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":80:9)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":90:9)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":83:13)
#loc79 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":83:36)
#loc80 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":84:13)
#loc81 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":84:27)
#loc82 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:13)
#loc83 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":89:13)
#loc84 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:17)
#loc85 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:26)
#loc86 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:31)
#loc87 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:35)
#loc88 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:45)
#loc89 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:47)
#loc90 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:50)
#loc91 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:58)
#loc92 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:65)
#loc93 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":86:63)
#loc94 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":87:13)
#loc95 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":88:27)
#loc96 = loc("CWE252_Unchecked_Return_Value__char_snprintf_14.c":88:17)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc14, #loc10])
#loc103 = loc(fused[#loc15, #loc16])
#loc104 = loc(fused[#loc17, #loc18])
#loc105 = loc(fused[#loc19, #loc20])
#loc106 = loc(fused[#loc24, #loc25])
#loc107 = loc(fused[#loc23, #loc25])
#loc108 = loc(fused[#loc23, #loc26])
#loc109 = loc(fused[#loc27, #loc28])
#loc110 = loc(fused[#loc29, #loc30])
#loc111 = loc(fused[#loc31, #loc32])
#loc112 = loc(fused[#loc33, #loc34])
#loc113 = loc(fused[#loc37, #loc38])
#loc114 = loc(fused[#loc39, #loc40])
#loc115 = loc(fused[#loc41, #loc42])
#loc116 = loc(fused[#loc44, #loc45, #loc46, #loc40])
#loc117 = loc(fused[#loc48, #loc49])
#loc118 = loc(fused[#loc50, #loc51])
#loc119 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc54, #loc55])
#loc121 = loc(fused[#loc59, #loc60])
#loc122 = loc(fused[#loc58, #loc60])
#loc123 = loc(fused[#loc58, #loc61])
#loc124 = loc(fused[#loc56, #loc64])
#loc125 = loc(fused[#loc66, #loc55])
#loc126 = loc(fused[#loc68, #loc69])
#loc127 = loc(fused[#loc70, #loc71])
#loc128 = loc(fused[#loc72, #loc73])
#loc129 = loc(fused[#loc75, #loc71])
#loc130 = loc(fused[#loc76, #loc77])
#loc131 = loc(fused[#loc78, #loc79])
#loc132 = loc(fused[#loc80, #loc81])
#loc133 = loc(fused[#loc82, #loc83])
#loc134 = loc(fused[#loc87, #loc88])
#loc135 = loc(fused[#loc86, #loc88])
#loc136 = loc(fused[#loc86, #loc89])
#loc137 = loc(fused[#loc84, #loc92])
#loc138 = loc(fused[#loc94, #loc83])
