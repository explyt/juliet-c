!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc58 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":169:10)
#loc59 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":169:14)
#loc60 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":169:20)
#loc61 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":169:32)
#loc233 = loc(fused[#loc58, #loc59])
#loc234 = loc(fused[#loc60, #loc61])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc208)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc209)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%f\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc211)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc14)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc214)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc216)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc216)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc21)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc210)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc21)
      } loc(#loc217)
    } loc(#loc215)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc219)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc219)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc25)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc25)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc32)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc33)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc33)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc223)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc223)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc222)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc35)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc218)
    cir.return loc(#loc11)
  } loc(#loc212)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc224)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc229)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc230)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc234)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_fscanf_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call @CWE369_Divide_by_Zero__float_fscanf_11_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_fscanf_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call @CWE369_Divide_by_Zero__float_fscanf_11_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc237)
    cir.return %17 : !s32i loc(#loc237)
  } loc(#loc232)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc79)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc84)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc241)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc243)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc243)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc88)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc88)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc91)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc210)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc92)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc93)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc93)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc91)
      } loc(#loc244)
    } loc(#loc242)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc246)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc96)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc96)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc101)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc104)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc104)
          %8 = cir.fabs %7 : !cir.double loc(#loc104)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc105)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc249)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc251)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc112)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc113)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc113)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc252)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc252)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc251)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc115)
          } else {
            %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc79)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc79)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc116)
          } loc(#loc250)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.return loc(#loc81)
  } loc(#loc239)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc254)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc121)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc255)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc257)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc257)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc125)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc125)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc128)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc210)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc129)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc130)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc130)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc128)
      } loc(#loc258)
    } loc(#loc256)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc133)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc133)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc138)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc138)
          %8 = cir.fabs %7 : !cir.double loc(#loc138)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc139)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc263)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc265)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc146)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc147)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc147)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc266)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc266)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc265)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc148)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc149)
          } else {
            %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc150)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc150)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc151)
          } loc(#loc264)
        } loc(#loc262)
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc118)
  } loc(#loc253)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc156)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc269)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc271)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc271)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc160)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc160)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc165)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc165)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc166)
      } else {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc167)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc273)
      } loc(#loc272)
    } loc(#loc270)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc275)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc275)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc171)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc171)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc178)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc179)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc179)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc279)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc279)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc278)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc180)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc181)
        } loc(#loc277)
      } loc(#loc276)
    } loc(#loc274)
    cir.return loc(#loc153)
  } loc(#loc267)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc186)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc282)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc284)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc284)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc190)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc190)
      cir.if %5 {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc193)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc286)
      } loc(#loc285)
    } loc(#loc283)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc288)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc288)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc197)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc197)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc291)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc204)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc205)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc205)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc292)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc292)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc291)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc207)
        } loc(#loc290)
      } loc(#loc289)
    } loc(#loc287)
    cir.return loc(#loc183)
  } loc(#loc280)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":32:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":24:1)
#loc11 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":42:1)
#loc12 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":26:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":26:11)
#loc14 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":28:12)
#loc15 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":29:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":33:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":29:8)
#loc19 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":29:26)
#loc20 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":30:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":32:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":32:17)
#loc23 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":34:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":41:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":34:8)
#loc26 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":34:26)
#loc27 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":35:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":36:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":40:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":38:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":38:44)
#loc32 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":38:32)
#loc33 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":38:40)
#loc34 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":39:26)
#loc35 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":39:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":152:1)
#loc37 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":158:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":154:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":154:14)
#loc40 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":155:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":155:14)
#loc42 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":156:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":156:14)
#loc44 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":157:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":157:14)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":174:15)
#loc53 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":176:15)
#loc54 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":179:15)
#loc55 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":181:15)
#loc56 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":169:1)
#loc57 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":184:1)
#loc62 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":170:1)
#loc63 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":172:27)
#loc64 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":172:22)
#loc65 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":172:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":174:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":175:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":175:49)
#loc69 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":176:5)
#loc70 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":179:5)
#loc71 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":180:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":180:48)
#loc73 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":181:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":183:12)
#loc75 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":183:5)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc77 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc78 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":62:19)
#loc79 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":74:23)
#loc80 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":49:1)
#loc81 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":77:1)
#loc82 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":51:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":51:11)
#loc84 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":53:12)
#loc85 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":53:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":54:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":58:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":54:8)
#loc89 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":54:26)
#loc90 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":55:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":57:9)
#loc92 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":57:17)
#loc93 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":57:24)
#loc94 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":59:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":76:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":59:8)
#loc97 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":59:27)
#loc98 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":60:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":63:5)
#loc100 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":65:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":62:9)
#loc102 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":67:9)
#loc103 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":75:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":67:17)
#loc105 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":67:25)
#loc106 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":67:12)
#loc107 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":68:9)
#loc108 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":71:9)
#loc109 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":73:9)
#loc110 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":69:13)
#loc111 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":69:44)
#loc112 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":69:32)
#loc113 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":69:40)
#loc114 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":70:26)
#loc115 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":70:13)
#loc116 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":74:13)
#loc117 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":80:1)
#loc118 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":103:1)
#loc119 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":82:5)
#loc120 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":82:11)
#loc121 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":84:12)
#loc122 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":84:5)
#loc123 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":85:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":89:5)
#loc125 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":85:8)
#loc126 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":85:26)
#loc127 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":86:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":88:9)
#loc129 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":88:17)
#loc130 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":88:24)
#loc131 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":90:5)
#loc132 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":102:5)
#loc133 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":90:8)
#loc134 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":90:26)
#loc135 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":91:5)
#loc136 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":93:9)
#loc137 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":101:9)
#loc138 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":93:17)
#loc139 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":93:25)
#loc140 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":93:12)
#loc141 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":94:9)
#loc142 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":97:9)
#loc143 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":99:9)
#loc144 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":95:13)
#loc145 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":95:44)
#loc146 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":95:32)
#loc147 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":95:40)
#loc148 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":96:26)
#loc149 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":96:13)
#loc150 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":100:23)
#loc151 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":100:13)
#loc152 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":106:1)
#loc153 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":129:1)
#loc154 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":108:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":108:11)
#loc156 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":110:12)
#loc157 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":110:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":111:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":120:5)
#loc160 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":111:8)
#loc161 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":111:27)
#loc162 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":112:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":115:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":117:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":114:19)
#loc166 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":114:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":119:16)
#loc168 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":119:9)
#loc169 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":121:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":128:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":121:8)
#loc172 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":121:26)
#loc173 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":122:5)
#loc174 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":123:9)
#loc175 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":127:9)
#loc176 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":125:13)
#loc177 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":125:44)
#loc178 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":125:32)
#loc179 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":125:40)
#loc180 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":126:26)
#loc181 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":126:13)
#loc182 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":132:1)
#loc183 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":150:1)
#loc184 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":134:5)
#loc185 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":134:11)
#loc186 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":136:12)
#loc187 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":136:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":137:5)
#loc189 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":141:5)
#loc190 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":137:8)
#loc191 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":137:26)
#loc192 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":138:5)
#loc193 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":140:16)
#loc194 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":140:9)
#loc195 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":142:5)
#loc196 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":149:5)
#loc197 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":142:8)
#loc198 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":142:26)
#loc199 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":143:5)
#loc200 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":144:9)
#loc201 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":148:9)
#loc202 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":146:13)
#loc203 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":146:44)
#loc204 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":146:32)
#loc205 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":146:40)
#loc206 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":147:26)
#loc207 = loc("CWE369_Divide_by_Zero__float_fscanf_11.c":147:13)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc3, #loc4])
#loc210 = loc(fused[#loc5, #loc6])
#loc211 = loc(fused[#loc8, #loc9])
#loc212 = loc(fused[#loc10, #loc11])
#loc213 = loc(fused[#loc12, #loc13])
#loc214 = loc(fused[#loc15, #loc14])
#loc215 = loc(fused[#loc16, #loc17])
#loc216 = loc(fused[#loc18, #loc19])
#loc217 = loc(fused[#loc20, #loc17])
#loc218 = loc(fused[#loc23, #loc24])
#loc219 = loc(fused[#loc25, #loc26])
#loc220 = loc(fused[#loc27, #loc24])
#loc221 = loc(fused[#loc28, #loc29])
#loc222 = loc(fused[#loc30, #loc31])
#loc223 = loc(fused[#loc32, #loc33])
#loc224 = loc(fused[#loc36, #loc37])
#loc225 = loc(fused[#loc38, #loc39])
#loc226 = loc(fused[#loc40, #loc41])
#loc227 = loc(fused[#loc42, #loc43])
#loc228 = loc(fused[#loc44, #loc45])
#loc229 = loc(fused[#loc46, #loc47])
#loc230 = loc(fused[#loc48, #loc49])
#loc231 = loc(fused[#loc50, #loc51])
#loc232 = loc(fused[#loc56, #loc57])
#loc235 = loc(fused[#loc67, #loc68])
#loc236 = loc(fused[#loc71, #loc72])
#loc237 = loc(fused[#loc75, #loc74])
#loc238 = loc(fused[#loc76, #loc77])
#loc239 = loc(fused[#loc80, #loc81])
#loc240 = loc(fused[#loc82, #loc83])
#loc241 = loc(fused[#loc85, #loc84])
#loc242 = loc(fused[#loc86, #loc87])
#loc243 = loc(fused[#loc88, #loc89])
#loc244 = loc(fused[#loc90, #loc87])
#loc245 = loc(fused[#loc94, #loc95])
#loc246 = loc(fused[#loc96, #loc97])
#loc247 = loc(fused[#loc98, #loc99, #loc100, #loc95])
#loc248 = loc(fused[#loc102, #loc103])
#loc249 = loc(fused[#loc106, #loc105])
#loc250 = loc(fused[#loc107, #loc108, #loc109, #loc103])
#loc251 = loc(fused[#loc110, #loc111])
#loc252 = loc(fused[#loc112, #loc113])
#loc253 = loc(fused[#loc117, #loc118])
#loc254 = loc(fused[#loc119, #loc120])
#loc255 = loc(fused[#loc122, #loc121])
#loc256 = loc(fused[#loc123, #loc124])
#loc257 = loc(fused[#loc125, #loc126])
#loc258 = loc(fused[#loc127, #loc124])
#loc259 = loc(fused[#loc131, #loc132])
#loc260 = loc(fused[#loc133, #loc134])
#loc261 = loc(fused[#loc135, #loc132])
#loc262 = loc(fused[#loc136, #loc137])
#loc263 = loc(fused[#loc140, #loc139])
#loc264 = loc(fused[#loc141, #loc142, #loc143, #loc137])
#loc265 = loc(fused[#loc144, #loc145])
#loc266 = loc(fused[#loc146, #loc147])
#loc267 = loc(fused[#loc152, #loc153])
#loc268 = loc(fused[#loc154, #loc155])
#loc269 = loc(fused[#loc157, #loc156])
#loc270 = loc(fused[#loc158, #loc159])
#loc271 = loc(fused[#loc160, #loc161])
#loc272 = loc(fused[#loc162, #loc163, #loc164, #loc159])
#loc273 = loc(fused[#loc168, #loc167])
#loc274 = loc(fused[#loc169, #loc170])
#loc275 = loc(fused[#loc171, #loc172])
#loc276 = loc(fused[#loc173, #loc170])
#loc277 = loc(fused[#loc174, #loc175])
#loc278 = loc(fused[#loc176, #loc177])
#loc279 = loc(fused[#loc178, #loc179])
#loc280 = loc(fused[#loc182, #loc183])
#loc281 = loc(fused[#loc184, #loc185])
#loc282 = loc(fused[#loc187, #loc186])
#loc283 = loc(fused[#loc188, #loc189])
#loc284 = loc(fused[#loc190, #loc191])
#loc285 = loc(fused[#loc192, #loc189])
#loc286 = loc(fused[#loc194, #loc193])
#loc287 = loc(fused[#loc195, #loc196])
#loc288 = loc(fused[#loc197, #loc198])
#loc289 = loc(fused[#loc199, #loc196])
#loc290 = loc(fused[#loc200, #loc201])
#loc291 = loc(fused[#loc202, #loc203])
#loc292 = loc(fused[#loc204, #loc205])
