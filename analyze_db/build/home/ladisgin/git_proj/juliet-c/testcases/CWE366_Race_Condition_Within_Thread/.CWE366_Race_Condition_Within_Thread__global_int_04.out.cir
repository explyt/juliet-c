!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThread = !cir.struct<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":26:23)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":26:29)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":186:10)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":186:14)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":186:20)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":186:32)
#loc128 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":44:24)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":44:30)
#true = #cir.bool<true> : !cir.bool
#loc270 = loc(fused[#loc7, #loc8])
#loc305 = loc(fused[#loc99, #loc100])
#loc306 = loc(fused[#loc101, #loc102])
#loc315 = loc(fused[#loc128, #loc129])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @gBadInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc267)
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc268)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc270)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc271)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc273)
      cir.for : cond {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %4 = cir.const #cir.int<1000000> : !s32i loc(#loc17)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc274)
        cir.condition(%5) loc(#loc18)
      } body {
        cir.scope {
          %3 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc267)
          %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc20)
          %7 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc267)
          cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc276)
        } loc(#loc275)
        cir.yield loc(#loc13)
      } step {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %4 = cir.unary(inc, %3) : !s32i, !s32i loc(#loc24)
        cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc277)
        cir.yield loc(#loc272)
      } loc(#loc272)
    } loc(#loc272)
    cir.return loc(#loc6)
  } loc(#loc269)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc278)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc279)
  cir.func private @printIntLine(!s32i) loc(#loc280)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_04_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc35)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc285)
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc286)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc40)
          cir.store %4, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc285)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc42)
          cir.store %5, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc286)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc43)
          %7 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc267)
          cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc287)
          cir.scope {
            %10 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc47)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc48)
            %12 = cir.call @stdThreadCreate(%10, %11, %2) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc49)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc49)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc49)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc51)
              cir.store %15, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc290)
            } loc(#loc289)
          } loc(#loc288)
          cir.scope {
            %10 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc55)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc56)
            %12 = cir.call @stdThreadCreate(%10, %11, %3) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc57)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc57)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc57)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc59)
              cir.store %15, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc293)
            } loc(#loc292)
          } loc(#loc291)
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc63)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc63)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc65)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc66)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc66)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc64)
                cir.yield %17 : !cir.bool loc(#loc64)
              }, false {
                %17 = cir.const #false loc(#loc64)
                cir.yield %17 : !cir.bool loc(#loc64)
              }) : (!cir.bool) -> !cir.bool loc(#loc64)
              cir.yield %16 : !cir.bool loc(#loc64)
            }, false {
              %13 = cir.const #false loc(#loc64)
              cir.yield %13 : !cir.bool loc(#loc64)
            }) : (!cir.bool) -> !cir.bool loc(#loc64)
            cir.if %12 {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc68)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc69)
            } loc(#loc295)
          } loc(#loc294)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc72)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc72)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc74)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc75)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc75)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc73)
                cir.yield %17 : !cir.bool loc(#loc73)
              }, false {
                %17 = cir.const #false loc(#loc73)
                cir.yield %17 : !cir.bool loc(#loc73)
              }) : (!cir.bool) -> !cir.bool loc(#loc73)
              cir.yield %16 : !cir.bool loc(#loc73)
            }, false {
              %13 = cir.const #false loc(#loc73)
              cir.yield %13 : !cir.bool loc(#loc73)
            }) : (!cir.bool) -> !cir.bool loc(#loc73)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc77)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc78)
            } loc(#loc297)
          } loc(#loc296)
          %8 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc267)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc79)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc80)
        } loc(#loc284)
      } loc(#loc283)
    } loc(#loc282)
    cir.return loc(#loc32)
  } loc(#loc281)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_04_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc299)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc300)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc85)
    cir.return loc(#loc82)
  } loc(#loc298)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc301)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc302)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc303)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc96)
  cir.func @main(%arg0: !s32i loc(fused[#loc99, #loc100]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc101, #loc102])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc305)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc306)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc98)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc103)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc104)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc105)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc105)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc106)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc93)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %8 = cir.get_global @CWE366_Race_Condition_Within_Thread__global_int_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc307)
    cir.call @CWE366_Race_Condition_Within_Thread__global_int_04_good() : () -> () loc(#loc108)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc94)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc95)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    %13 = cir.get_global @CWE366_Race_Condition_Within_Thread__global_int_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc308)
    cir.call @CWE366_Race_Condition_Within_Thread__global_int_04_bad() : () -> () loc(#loc112)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc96)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc115)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc309)
    cir.return %17 : !s32i loc(#loc309)
  } loc(#loc304)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc117)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc310)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc311)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc312)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc313)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc128, #loc129])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc315)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc316)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc132)
    %2 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc311)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc133)
    cir.call @stdThreadLockAcquire(%3) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc134)
    cir.scope {
      %6 = cir.const #cir.int<0> : !s32i loc(#loc137)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc318)
      cir.for : cond {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %8 = cir.const #cir.int<1000000> : !s32i loc(#loc140)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc319)
        cir.condition(%9) loc(#loc141)
      } body {
        cir.scope {
          %7 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc321)
          %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc145)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc146)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc145)
          %11 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc321)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc322)
        } loc(#loc320)
        cir.yield loc(#loc136)
      } step {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc149)
        cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc323)
        cir.yield loc(#loc317)
      } loc(#loc317)
    } loc(#loc317)
    %4 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc311)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc150)
    cir.call @stdThreadLockRelease(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc151)
    cir.return loc(#loc127)
  } loc(#loc314)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc324)
  cir.global "private" internal dsolocal @gGoodInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc321)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc158)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc158)
      cir.if %1 {
        %2 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc117)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc117)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc162)
      } else {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc329)
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc330)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc166)
          cir.store %4, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc329)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc168)
          cir.store %5, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc330)
          cir.scope {
            %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc311)
            %11 = cir.call @stdThreadLockCreate(%10) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc171)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc171)
            %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc171)
            cir.if %13 {
              cir.return loc(#loc173)
            } loc(#loc332)
          } loc(#loc331)
          cir.scope {
            %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc176)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc177)
            %12 = cir.call @stdThreadCreate(%10, %11, %2) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc178)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc178)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc178)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc180)
              cir.store %15, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc335)
            } loc(#loc334)
          } loc(#loc333)
          cir.scope {
            %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc184)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc185)
            %12 = cir.call @stdThreadCreate(%10, %11, %3) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc186)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc186)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc186)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc188)
              cir.store %15, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc338)
            } loc(#loc337)
          } loc(#loc336)
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc192)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc192)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc194)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc195)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc195)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc193)
                cir.yield %17 : !cir.bool loc(#loc193)
              }, false {
                %17 = cir.const #false loc(#loc193)
                cir.yield %17 : !cir.bool loc(#loc193)
              }) : (!cir.bool) -> !cir.bool loc(#loc193)
              cir.yield %16 : !cir.bool loc(#loc193)
            }, false {
              %13 = cir.const #false loc(#loc193)
              cir.yield %13 : !cir.bool loc(#loc193)
            }) : (!cir.bool) -> !cir.bool loc(#loc193)
            cir.if %12 {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc197)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc198)
            } loc(#loc340)
          } loc(#loc339)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc201)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc201)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc203)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc204)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc204)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc202)
                cir.yield %17 : !cir.bool loc(#loc202)
              }, false {
                %17 = cir.const #false loc(#loc202)
                cir.yield %17 : !cir.bool loc(#loc202)
              }) : (!cir.bool) -> !cir.bool loc(#loc202)
              cir.yield %16 : !cir.bool loc(#loc202)
            }, false {
              %13 = cir.const #false loc(#loc202)
              cir.yield %13 : !cir.bool loc(#loc202)
            }) : (!cir.bool) -> !cir.bool loc(#loc202)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc206)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc207)
            } loc(#loc342)
          } loc(#loc341)
          %6 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc311)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc208)
          cir.call @stdThreadLockDestroy(%7) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc209)
          %8 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc321)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc210)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc211)
        } loc(#loc328)
      } loc(#loc327)
    } loc(#loc326)
    cir.return loc(#loc155)
  } loc(#loc325)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc216)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc216)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc347)
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc348)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc221)
          cir.store %4, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc347)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc223)
          cir.store %5, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc348)
          cir.scope {
            %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc311)
            %11 = cir.call @stdThreadLockCreate(%10) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc226)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc226)
            %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc226)
            cir.if %13 {
              cir.return loc(#loc228)
            } loc(#loc350)
          } loc(#loc349)
          cir.scope {
            %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc231)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc232)
            %12 = cir.call @stdThreadCreate(%10, %11, %2) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc233)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc233)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc233)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc235)
              cir.store %15, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc353)
            } loc(#loc352)
          } loc(#loc351)
          cir.scope {
            %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc239)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc240)
            %12 = cir.call @stdThreadCreate(%10, %11, %3) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc241)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc241)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc241)
            cir.if %14 {
              %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc243)
              cir.store %15, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc356)
            } loc(#loc355)
          } loc(#loc354)
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc247)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc247)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc249)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc250)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc250)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc248)
                cir.yield %17 : !cir.bool loc(#loc248)
              }, false {
                %17 = cir.const #false loc(#loc248)
                cir.yield %17 : !cir.bool loc(#loc248)
              }) : (!cir.bool) -> !cir.bool loc(#loc248)
              cir.yield %16 : !cir.bool loc(#loc248)
            }, false {
              %13 = cir.const #false loc(#loc248)
              cir.yield %13 : !cir.bool loc(#loc248)
            }) : (!cir.bool) -> !cir.bool loc(#loc248)
            cir.if %12 {
              %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc252)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc253)
            } loc(#loc358)
          } loc(#loc357)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc256)
            %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc256)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc258)
              %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc259)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc259)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc257)
                cir.yield %17 : !cir.bool loc(#loc257)
              }, false {
                %17 = cir.const #false loc(#loc257)
                cir.yield %17 : !cir.bool loc(#loc257)
              }) : (!cir.bool) -> !cir.bool loc(#loc257)
              cir.yield %16 : !cir.bool loc(#loc257)
            }, false {
              %13 = cir.const #false loc(#loc257)
              cir.yield %13 : !cir.bool loc(#loc257)
            }) : (!cir.bool) -> !cir.bool loc(#loc257)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc261)
              %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc262)
            } loc(#loc360)
          } loc(#loc359)
          %6 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc311)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc263)
          cir.call @stdThreadLockDestroy(%7) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc264)
          %8 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc321)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc265)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc266)
        } loc(#loc346)
      } loc(#loc345)
    } loc(#loc344)
    cir.return loc(#loc213)
  } loc(#loc343)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_04.c":0:0)
#loc1 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":22:1)
#loc2 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":22:22)
#loc3 = loc("../../testcasesupport/std_thread.h":14:1)
#loc4 = loc("../../testcasesupport/std_thread.h":14:74)
#loc5 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":26:1)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":42:1)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":28:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":28:9)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":27:1)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":38:5)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":41:5)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":38:14)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":38:10)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":38:17)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":38:21)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":38:19)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":39:5)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":40:19)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":40:29)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":40:9)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":38:31)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":38:30)
#loc25 = loc("../../testcasesupport/std_thread.h":15:1)
#loc26 = loc("../../testcasesupport/std_thread.h":15:35)
#loc27 = loc("../../testcasesupport/std_thread.h":16:1)
#loc28 = loc("../../testcasesupport/std_thread.h":16:38)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc31 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":65:1)
#loc32 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":92:1)
#loc33 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":67:5)
#loc34 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":91:5)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":67:8)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":68:5)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":69:9)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":90:9)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":70:13)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":70:33)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":71:13)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":71:33)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":72:23)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":72:13)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":73:13)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":76:13)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":73:34)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":73:45)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":73:18)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":74:13)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":75:27)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":75:17)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":77:13)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":80:13)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":77:34)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":77:45)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":77:18)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":78:13)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":79:27)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":79:17)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":81:13)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":84:13)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":81:17)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":81:25)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":81:42)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":81:28)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":82:13)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":83:34)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":83:17)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":85:13)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":88:13)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":85:17)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":85:25)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":85:42)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":85:28)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":86:13)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":87:34)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":87:17)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":89:26)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":89:13)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":171:1)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":175:1)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":173:5)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":173:11)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":174:5)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":174:11)
#loc87 = loc("/usr/include/stdlib.h":575:1)
#loc88 = loc("/usr/include/stdlib.h":575:41)
#loc89 = loc("/usr/include/time.h":76:1)
#loc90 = loc("/usr/include/time.h":76:38)
#loc91 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc92 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc93 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":191:15)
#loc94 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":193:15)
#loc95 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":196:15)
#loc96 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":198:15)
#loc97 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":186:1)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":201:1)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":187:1)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":189:27)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":189:22)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":189:5)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":191:5)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":192:5)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":192:61)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":193:5)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":196:5)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":197:5)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":197:60)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":198:5)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":200:12)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":200:5)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":104:19)
#loc118 = loc("../../testcasesupport/std_thread.h":18:1)
#loc119 = loc("../../testcasesupport/std_thread.h":18:44)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":24:1)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":24:34)
#loc122 = loc("../../testcasesupport/std_thread.h":19:1)
#loc123 = loc("../../testcasesupport/std_thread.h":19:45)
#loc124 = loc("../../testcasesupport/std_thread.h":20:1)
#loc125 = loc("../../testcasesupport/std_thread.h":20:45)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":44:1)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":55:1)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":46:5)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":46:9)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":45:1)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":49:26)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":49:5)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":50:5)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":53:5)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":50:14)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":50:10)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":50:17)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":50:21)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":50:19)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":51:5)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":23:1)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":23:23)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":52:20)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":52:31)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":52:9)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":50:31)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":50:30)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":54:26)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":54:5)
#loc152 = loc("../../testcasesupport/std_thread.h":21:1)
#loc153 = loc("../../testcasesupport/std_thread.h":21:45)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":99:1)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":135:1)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":101:5)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":134:5)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":101:8)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":102:5)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":105:5)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":107:5)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":104:9)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":108:9)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":133:9)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":109:13)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":109:33)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":110:13)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":110:33)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":111:13)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":114:13)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":111:18)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":112:13)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":113:17)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":115:13)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":118:13)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":115:34)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":115:46)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":115:18)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":116:13)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":117:27)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":117:17)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":119:13)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":122:13)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":119:34)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":119:46)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":119:18)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":120:13)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":121:27)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":121:17)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":123:13)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":126:13)
#loc192 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":123:17)
#loc193 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":123:25)
#loc194 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":123:42)
#loc195 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":123:28)
#loc196 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":124:13)
#loc197 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":125:34)
#loc198 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":125:17)
#loc199 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":127:13)
#loc200 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":130:13)
#loc201 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":127:17)
#loc202 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":127:25)
#loc203 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":127:42)
#loc204 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":127:28)
#loc205 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":128:13)
#loc206 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":129:34)
#loc207 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":129:17)
#loc208 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":131:34)
#loc209 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":131:13)
#loc210 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":132:26)
#loc211 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":132:13)
#loc212 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":138:1)
#loc213 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":169:1)
#loc214 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":140:5)
#loc215 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":168:5)
#loc216 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":140:8)
#loc217 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":141:5)
#loc218 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":142:9)
#loc219 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":167:9)
#loc220 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":143:13)
#loc221 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":143:33)
#loc222 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":144:13)
#loc223 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":144:33)
#loc224 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":145:13)
#loc225 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":148:13)
#loc226 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":145:18)
#loc227 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":146:13)
#loc228 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":147:17)
#loc229 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":149:13)
#loc230 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":152:13)
#loc231 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":149:34)
#loc232 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":149:46)
#loc233 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":149:18)
#loc234 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":150:13)
#loc235 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":151:27)
#loc236 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":151:17)
#loc237 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":153:13)
#loc238 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":156:13)
#loc239 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":153:34)
#loc240 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":153:46)
#loc241 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":153:18)
#loc242 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":154:13)
#loc243 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":155:27)
#loc244 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":155:17)
#loc245 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":157:13)
#loc246 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":160:13)
#loc247 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":157:17)
#loc248 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":157:25)
#loc249 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":157:42)
#loc250 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":157:28)
#loc251 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":158:13)
#loc252 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":159:34)
#loc253 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":159:17)
#loc254 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":161:13)
#loc255 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":164:13)
#loc256 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":161:17)
#loc257 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":161:25)
#loc258 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":161:42)
#loc259 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":161:28)
#loc260 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":162:13)
#loc261 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":163:34)
#loc262 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":163:17)
#loc263 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":165:34)
#loc264 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":165:13)
#loc265 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":166:26)
#loc266 = loc("CWE366_Race_Condition_Within_Thread__global_int_04.c":166:13)
#loc267 = loc(fused[#loc1, #loc2])
#loc268 = loc(fused[#loc3, #loc4])
#loc269 = loc(fused[#loc5, #loc6])
#loc271 = loc(fused[#loc9, #loc10])
#loc272 = loc(fused[#loc12, #loc13])
#loc273 = loc(fused[#loc15, #loc14])
#loc274 = loc(fused[#loc16, #loc17])
#loc275 = loc(fused[#loc19, #loc13])
#loc276 = loc(fused[#loc22, #loc21])
#loc277 = loc(fused[#loc24, #loc23])
#loc278 = loc(fused[#loc25, #loc26])
#loc279 = loc(fused[#loc27, #loc28])
#loc280 = loc(fused[#loc29, #loc30])
#loc281 = loc(fused[#loc31, #loc32])
#loc282 = loc(fused[#loc33, #loc34])
#loc283 = loc(fused[#loc36, #loc34])
#loc284 = loc(fused[#loc37, #loc38])
#loc285 = loc(fused[#loc39, #loc40])
#loc286 = loc(fused[#loc41, #loc42])
#loc287 = loc(fused[#loc44, #loc43])
#loc288 = loc(fused[#loc45, #loc46])
#loc289 = loc(fused[#loc50, #loc46])
#loc290 = loc(fused[#loc52, #loc51])
#loc291 = loc(fused[#loc53, #loc54])
#loc292 = loc(fused[#loc58, #loc54])
#loc293 = loc(fused[#loc60, #loc59])
#loc294 = loc(fused[#loc61, #loc62])
#loc295 = loc(fused[#loc67, #loc62])
#loc296 = loc(fused[#loc70, #loc71])
#loc297 = loc(fused[#loc76, #loc71])
#loc298 = loc(fused[#loc81, #loc82])
#loc299 = loc(fused[#loc83, #loc84])
#loc300 = loc(fused[#loc85, #loc86])
#loc301 = loc(fused[#loc87, #loc88])
#loc302 = loc(fused[#loc89, #loc90])
#loc303 = loc(fused[#loc91, #loc92])
#loc304 = loc(fused[#loc97, #loc98])
#loc307 = loc(fused[#loc108, #loc109])
#loc308 = loc(fused[#loc112, #loc113])
#loc309 = loc(fused[#loc116, #loc115])
#loc310 = loc(fused[#loc118, #loc119])
#loc311 = loc(fused[#loc120, #loc121])
#loc312 = loc(fused[#loc122, #loc123])
#loc313 = loc(fused[#loc124, #loc125])
#loc314 = loc(fused[#loc126, #loc127])
#loc316 = loc(fused[#loc130, #loc131])
#loc317 = loc(fused[#loc135, #loc136])
#loc318 = loc(fused[#loc138, #loc137])
#loc319 = loc(fused[#loc139, #loc140])
#loc320 = loc(fused[#loc142, #loc136])
#loc321 = loc(fused[#loc143, #loc144])
#loc322 = loc(fused[#loc147, #loc146])
#loc323 = loc(fused[#loc149, #loc148])
#loc324 = loc(fused[#loc152, #loc153])
#loc325 = loc(fused[#loc154, #loc155])
#loc326 = loc(fused[#loc156, #loc157])
#loc327 = loc(fused[#loc159, #loc160, #loc161, #loc157])
#loc328 = loc(fused[#loc163, #loc164])
#loc329 = loc(fused[#loc165, #loc166])
#loc330 = loc(fused[#loc167, #loc168])
#loc331 = loc(fused[#loc169, #loc170])
#loc332 = loc(fused[#loc172, #loc170])
#loc333 = loc(fused[#loc174, #loc175])
#loc334 = loc(fused[#loc179, #loc175])
#loc335 = loc(fused[#loc181, #loc180])
#loc336 = loc(fused[#loc182, #loc183])
#loc337 = loc(fused[#loc187, #loc183])
#loc338 = loc(fused[#loc189, #loc188])
#loc339 = loc(fused[#loc190, #loc191])
#loc340 = loc(fused[#loc196, #loc191])
#loc341 = loc(fused[#loc199, #loc200])
#loc342 = loc(fused[#loc205, #loc200])
#loc343 = loc(fused[#loc212, #loc213])
#loc344 = loc(fused[#loc214, #loc215])
#loc345 = loc(fused[#loc217, #loc215])
#loc346 = loc(fused[#loc218, #loc219])
#loc347 = loc(fused[#loc220, #loc221])
#loc348 = loc(fused[#loc222, #loc223])
#loc349 = loc(fused[#loc224, #loc225])
#loc350 = loc(fused[#loc227, #loc225])
#loc351 = loc(fused[#loc229, #loc230])
#loc352 = loc(fused[#loc234, #loc230])
#loc353 = loc(fused[#loc236, #loc235])
#loc354 = loc(fused[#loc237, #loc238])
#loc355 = loc(fused[#loc242, #loc238])
#loc356 = loc(fused[#loc244, #loc243])
#loc357 = loc(fused[#loc245, #loc246])
#loc358 = loc(fused[#loc251, #loc246])
#loc359 = loc(fused[#loc254, #loc255])
#loc360 = loc(fused[#loc260, #loc255])
