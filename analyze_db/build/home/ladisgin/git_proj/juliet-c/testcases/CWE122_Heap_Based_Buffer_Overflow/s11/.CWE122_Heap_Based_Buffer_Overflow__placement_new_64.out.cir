!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc1 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":25:14)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":25:21)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":52:18)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":52:25)
#loc60 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":75:18)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":75:25)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc89 = loc(fused[#loc8, #loc9])
#loc98 = loc(fused[#loc36, #loc37])
#loc107 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc1)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    cir.return loc(#loc1)
  } loc(#loc1)
  cir.func private @printIntLine(!s32i) loc(#loc86)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc87)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_647badSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc8, #loc9])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc90)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc91)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc14)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc11)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc90)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc15)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc91)
    cir.scope {
      %7 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc93)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc94)
      %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc94)
      cir.call @_ZN12TwoIntsClassC2Ev(%11) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc20)
      cir.store %11, %7 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc93)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %13 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc24)
      %14 = cir.get_member %13[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
      cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc95)
      %15 = cir.const #cir.int<10> : !s32i loc(#loc26)
      %16 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc27)
      %17 = cir.get_member %16[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc28)
      cir.store %15, %17 : !s32i, !cir.ptr<!s32i> loc(#loc96)
      %18 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc29)
      %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc31)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc32)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc32)
    } loc(#loc92)
    cir.return loc(#loc7)
  } loc(#loc88)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6411goodG2BSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc36, #loc37])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc100)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc42)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc39)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc99)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc43)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc100)
    cir.scope {
      %7 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc102)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc103)
      %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc50)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc103)
      cir.call @_ZN12TwoIntsClassC2Ev(%11) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc48)
      cir.store %11, %7 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc102)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc51)
      %13 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc52)
      %14 = cir.get_member %13[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
      cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc104)
      %15 = cir.const #cir.int<10> : !s32i loc(#loc53)
      %16 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc54)
      %17 = cir.get_member %16[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc28)
      cir.store %15, %17 : !s32i, !cir.ptr<!s32i> loc(#loc105)
      %18 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc55)
      %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc57)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc58)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc59)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc58)
    } loc(#loc101)
    cir.return loc(#loc35)
  } loc(#loc97)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc60)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc60)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc60)
    cir.return loc(#loc60)
  } loc(#loc60)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6411goodB2GSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc63, #loc64])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc109)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc69)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc66)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc66)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc108)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc70)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc109)
    cir.scope {
      %7 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc111)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc112)
      %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc77)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc112)
      cir.call @_ZN11OneIntClassC2Ev(%11) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr1) loc(#loc75)
      cir.store %11, %7 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc111)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc78)
      %13 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc79)
      %14 = cir.get_member %13[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc80)
      cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc113)
      %15 = cir.load %7 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc81)
      %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc80)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc82)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc83)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc84)
      %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc84)
    } loc(#loc110)
    cir.return loc(#loc62)
  } loc(#loc106)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":0:0)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc4 = loc("/usr/include/stdlib.h":687:1)
#loc5 = loc("/usr/include/stdlib.h":687:32)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":25:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":45:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":28:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":28:34)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":30:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":30:28)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":26:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":30:21)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":30:20)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":31:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":44:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":37:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":37:45)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":37:35)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":37:39)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":39:28)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":39:9)
#loc25 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":40:28)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":40:9)
#loc28 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":41:22)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":41:32)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":41:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":43:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":43:14)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":52:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":72:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":55:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":55:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":57:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":57:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":53:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":57:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":57:20)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":58:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":71:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":64:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":64:45)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":64:35)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":64:39)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":66:28)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":66:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":67:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":67:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":68:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":68:32)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":68:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":70:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":70:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":75:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":93:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":78:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":78:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":80:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":80:28)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":76:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":80:21)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":80:20)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":81:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":92:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":87:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":87:44)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":87:34)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":87:38)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":89:28)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":89:9)
#loc80 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":90:22)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":90:32)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":90:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":91:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64b.cpp":91:14)
#loc86 = loc(fused[#loc2, #loc3])
#loc87 = loc(fused[#loc4, #loc5])
#loc88 = loc(fused[#loc6, #loc7])
#loc90 = loc(fused[#loc10, #loc11])
#loc91 = loc(fused[#loc12, #loc13])
#loc92 = loc(fused[#loc17, #loc18])
#loc93 = loc(fused[#loc19, #loc20])
#loc94 = loc(fused[#loc21, #loc20])
#loc95 = loc(fused[#loc24, #loc23])
#loc96 = loc(fused[#loc27, #loc26])
#loc97 = loc(fused[#loc34, #loc35])
#loc99 = loc(fused[#loc38, #loc39])
#loc100 = loc(fused[#loc40, #loc41])
#loc101 = loc(fused[#loc45, #loc46])
#loc102 = loc(fused[#loc47, #loc48])
#loc103 = loc(fused[#loc49, #loc48])
#loc104 = loc(fused[#loc52, #loc51])
#loc105 = loc(fused[#loc54, #loc53])
#loc106 = loc(fused[#loc61, #loc62])
#loc108 = loc(fused[#loc65, #loc66])
#loc109 = loc(fused[#loc67, #loc68])
#loc110 = loc(fused[#loc72, #loc73])
#loc111 = loc(fused[#loc74, #loc75])
#loc112 = loc(fused[#loc76, #loc75])
#loc113 = loc(fused[#loc79, #loc78])
