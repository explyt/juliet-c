!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":88:10)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":88:14)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":88:20)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":88:32)
#loc108 = loc(fused[#loc39, #loc40])
#loc109 = loc(fused[#loc41, #loc42])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc93)
  cir.func private @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_badSink(!cir.ptr<!s32i>) loc(#loc94)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.alloca !cir.array<!s32i x 5>, !cir.ptr<!cir.array<!s32i x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc97)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc12)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc14)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc14)
    %8 = cir.ternary(%7, true {
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc14)
      %17 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc14)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc14)
      %21 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc14)
      %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc14)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc14)
      %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc14)
      cir.yield %26 : !u32i loc(#loc14)
    }, false {
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc14)
      %17 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc14)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc14)
      %21 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc14)
      %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc14)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc14)
      %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc14)
      %27 = cir.unary(minus, %26) : !u32i, !u32i loc(#loc14)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc14)
      %30 = cir.binop(sub, %27, %29) : !u32i loc(#loc14)
      cir.yield %30 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc14)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc17)
    %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc18)
    %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc18)
    cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc19)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_badSink(%14) : (!cir.ptr<!s32i>) -> () loc(#loc20)
    cir.return loc(#loc6)
  } loc(#loc95)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc101)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc104)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc36)
  cir.func @main(%arg0: !s32i loc(fused[#loc39, #loc40]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc41, #loc42])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc109)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc43)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc43)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc44)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc45)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc45)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc46)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc33)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_good : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_good() : () -> () loc(#loc48)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc35)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_bad() : () -> () loc(#loc52)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc36)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.return %17 : !s32i loc(#loc112)
  } loc(#loc107)
  cir.func private @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodG2BSink(!cir.ptr<!s32i>) loc(#loc113)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.alloca !cir.array<!s32i x 5>, !cir.ptr<!cir.array<!s32i x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc116)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc66)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc68)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc72)
    %8 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc72)
    cir.store %5, %8 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc73)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodG2BSink(%9) : (!cir.ptr<!s32i>) -> () loc(#loc74)
    cir.return loc(#loc60)
  } loc(#loc114)
  cir.func private @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodB2GSink(!cir.ptr<!s32i>) loc(#loc120)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.alloca !cir.array<!s32i x 5>, !cir.ptr<!cir.array<!s32i x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc123)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc84)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc86)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc86)
    %8 = cir.ternary(%7, true {
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc86)
      %17 = cir.const #cir.int<30> : !s32i loc(#loc86)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc86)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc86)
      %21 = cir.const #cir.int<15> : !s32i loc(#loc86)
      %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc86)
      %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc86)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc86)
      %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc86)
      cir.yield %26 : !u32i loc(#loc86)
    }, false {
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc86)
      %17 = cir.const #cir.int<30> : !s32i loc(#loc86)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc86)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc86)
      %21 = cir.const #cir.int<15> : !s32i loc(#loc86)
      %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc86)
      %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc86)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc86)
      %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc86)
      %27 = cir.unary(minus, %26) : !u32i, !u32i loc(#loc86)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc86)
      %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc86)
      %30 = cir.binop(sub, %27, %29) : !u32i loc(#loc86)
      cir.yield %30 : !u32i loc(#loc86)
    }) : (!cir.bool) -> !u32i loc(#loc86)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc86)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc89)
    %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc90)
    %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc90)
    cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc91)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodB2GSink(%14) : (!cir.ptr<!s32i>) -> () loc(#loc92)
    cir.return loc(#loc78)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":23:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":23:81)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":25:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":36:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":27:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":27:9)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":28:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":28:20)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":30:13)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":30:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":30:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":32:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":32:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":34:20)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":34:15)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":34:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":35:65)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":35:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":73:1)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":77:1)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":75:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":75:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":76:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":76:13)
#loc27 = loc("/usr/include/stdlib.h":575:1)
#loc28 = loc("/usr/include/stdlib.h":575:41)
#loc29 = loc("/usr/include/time.h":76:1)
#loc30 = loc("/usr/include/time.h":76:38)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":93:15)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":95:15)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":98:15)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":100:15)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":88:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":103:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":89:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":91:27)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":91:22)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":91:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":93:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":94:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":94:61)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":95:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":98:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":99:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":99:60)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":100:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":102:12)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":102:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":43:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":43:85)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":45:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":56:1)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":47:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":47:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":48:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":48:20)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":50:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":50:12)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":50:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":53:12)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":53:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":54:20)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":54:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":54:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":55:69)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":55:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":59:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":59:85)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":61:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":71:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":63:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":63:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":64:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":64:20)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":66:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":66:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":66:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":68:12)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":68:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":69:20)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":69:15)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":69:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":70:69)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c":70:5)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc7, #loc8])
#loc97 = loc(fused[#loc9, #loc10])
#loc98 = loc(fused[#loc13, #loc11])
#loc99 = loc(fused[#loc15, #loc14])
#loc100 = loc(fused[#loc18, #loc16])
#loc101 = loc(fused[#loc21, #loc22])
#loc102 = loc(fused[#loc23, #loc24])
#loc103 = loc(fused[#loc25, #loc26])
#loc104 = loc(fused[#loc27, #loc28])
#loc105 = loc(fused[#loc29, #loc30])
#loc106 = loc(fused[#loc31, #loc32])
#loc107 = loc(fused[#loc37, #loc38])
#loc110 = loc(fused[#loc48, #loc49])
#loc111 = loc(fused[#loc52, #loc53])
#loc112 = loc(fused[#loc56, #loc55])
#loc113 = loc(fused[#loc57, #loc58])
#loc114 = loc(fused[#loc59, #loc60])
#loc115 = loc(fused[#loc61, #loc62])
#loc116 = loc(fused[#loc63, #loc64])
#loc117 = loc(fused[#loc67, #loc65])
#loc118 = loc(fused[#loc69, #loc68])
#loc119 = loc(fused[#loc72, #loc70])
#loc120 = loc(fused[#loc75, #loc76])
#loc121 = loc(fused[#loc77, #loc78])
#loc122 = loc(fused[#loc79, #loc80])
#loc123 = loc(fused[#loc81, #loc82])
#loc124 = loc(fused[#loc85, #loc83])
#loc125 = loc(fused[#loc87, #loc86])
#loc126 = loc(fused[#loc90, #loc88])
