!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":106:10)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":106:14)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":106:20)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":106:32)
#loc139 = loc(fused[#loc40, #loc41])
#loc140 = loc(fused[#loc42, #loc43])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc124)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_06_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc8)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc9)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc127)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc130)
          %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc15)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc17)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc17)
          %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc15)
          cir.store %8, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc131)
          %9 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc20)
          cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc21)
        } loc(#loc129)
      } loc(#loc128)
    } loc(#loc126)
    cir.return loc(#loc5)
  } loc(#loc125)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc132)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc135)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc136)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc37)
  cir.func @main(%arg0: !s32i loc(fused[#loc40, #loc41]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc42, #loc43])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc140)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc39)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc44)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc45)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc46)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc46)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc47)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc34)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %8 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_06_good() : () -> () loc(#loc49)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc35)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc36)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %13 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_06_bad() : () -> () loc(#loc53)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc37)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.return %17 : !s32i loc(#loc143)
  } loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc58)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc61)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc145)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc68)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc69)
      %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc148)
      cir.if %2 {
        %3 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc58)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc151)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc78)
          %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc79)
          cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc152)
          %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc80)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc82)
          %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc82)
          %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc80)
          cir.store %10, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc153)
          cir.scope {
            %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc87)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %14 = cir.const #cir.int<33> : !s32i loc(#loc88)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc155)
            cir.if %15 {
              %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc61)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc61)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc90)
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc91)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc92)
              cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc91)
            } loc(#loc156)
          } loc(#loc154)
          %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc93)
          cir.call @printDoubleLine(%11) : (!cir.double) -> () loc(#loc94)
        } loc(#loc150)
      } loc(#loc149)
    } loc(#loc147)
    cir.return loc(#loc65)
  } loc(#loc146)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc99)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc100)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc159)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc162)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc107)
          cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc163)
          %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc108)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc110)
          %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc110)
          %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc108)
          cir.store %10, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc164)
          cir.scope {
            %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc115)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            %14 = cir.const #cir.int<33> : !s32i loc(#loc116)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc166)
            cir.if %15 {
              %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc118)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc118)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc119)
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc120)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc121)
              cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc120)
            } loc(#loc167)
          } loc(#loc165)
          %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc122)
          cir.call @printDoubleLine(%11) : (!cir.double) -> () loc(#loc123)
        } loc(#loc161)
      } loc(#loc160)
    } loc(#loc158)
    cir.return loc(#loc96)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_06.c":0:0)
#loc1 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":29:1)
#loc5 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":40:1)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":31:5)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":39:5)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":31:8)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":31:27)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":32:5)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":33:9)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":38:9)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":34:13)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":34:20)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":35:36)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":35:50)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":35:49)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":35:13)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":35:51)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":37:29)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":37:13)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":91:1)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":95:1)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":93:5)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":93:11)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":94:5)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":94:11)
#loc28 = loc("/usr/include/stdlib.h":575:1)
#loc29 = loc("/usr/include/stdlib.h":575:41)
#loc30 = loc("/usr/include/time.h":76:1)
#loc31 = loc("/usr/include/time.h":76:38)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":111:15)
#loc35 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":113:15)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":116:15)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":118:15)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":106:1)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":121:1)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":107:1)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":109:27)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":109:22)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":109:5)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":111:5)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":112:5)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":112:52)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":113:5)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":116:5)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":117:5)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":117:51)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":118:5)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":120:12)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":120:5)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":52:19)
#loc59 = loc("/usr/include/errno.h":37:1)
#loc60 = loc("/usr/include/errno.h":37:45)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":63:27)
#loc62 = loc("/usr/include/stdlib.h":756:1)
#loc63 = loc("/usr/include/stdlib.h":756:70)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":47:1)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":69:1)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":49:5)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":68:5)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":49:8)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":49:27)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":50:5)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":53:5)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":55:5)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":52:9)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":56:9)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":67:9)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":57:13)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":57:20)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":58:21)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":58:13)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":59:36)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":59:50)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":59:49)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":59:13)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":59:51)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":61:13)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":65:13)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":61:17)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":61:26)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":62:13)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":63:17)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":64:17)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":64:22)
#loc93 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":66:29)
#loc94 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":66:13)
#loc95 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":72:1)
#loc96 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":89:1)
#loc97 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":74:5)
#loc98 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":88:5)
#loc99 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":74:8)
#loc100 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":74:27)
#loc101 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":75:5)
#loc102 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":76:9)
#loc103 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":87:9)
#loc104 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":77:13)
#loc105 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":77:20)
#loc106 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":78:21)
#loc107 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":78:13)
#loc108 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":79:36)
#loc109 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":79:50)
#loc110 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":79:49)
#loc111 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":79:13)
#loc112 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":79:51)
#loc113 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":81:13)
#loc114 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":85:13)
#loc115 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":81:17)
#loc116 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":81:26)
#loc117 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":82:13)
#loc118 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":83:27)
#loc119 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":83:17)
#loc120 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":84:17)
#loc121 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":84:22)
#loc122 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":86:29)
#loc123 = loc("CWE391_Unchecked_Error_Condition__sqrt_06.c":86:13)
#loc124 = loc(fused[#loc2, #loc3])
#loc125 = loc(fused[#loc4, #loc5])
#loc126 = loc(fused[#loc6, #loc7])
#loc127 = loc(fused[#loc8, #loc9])
#loc128 = loc(fused[#loc10, #loc7])
#loc129 = loc(fused[#loc11, #loc12])
#loc130 = loc(fused[#loc13, #loc14])
#loc131 = loc(fused[#loc18, #loc19])
#loc132 = loc(fused[#loc22, #loc23])
#loc133 = loc(fused[#loc24, #loc25])
#loc134 = loc(fused[#loc26, #loc27])
#loc135 = loc(fused[#loc28, #loc29])
#loc136 = loc(fused[#loc30, #loc31])
#loc137 = loc(fused[#loc32, #loc33])
#loc138 = loc(fused[#loc38, #loc39])
#loc141 = loc(fused[#loc49, #loc50])
#loc142 = loc(fused[#loc53, #loc54])
#loc143 = loc(fused[#loc57, #loc56])
#loc144 = loc(fused[#loc59, #loc60])
#loc145 = loc(fused[#loc62, #loc63])
#loc146 = loc(fused[#loc64, #loc65])
#loc147 = loc(fused[#loc66, #loc67])
#loc148 = loc(fused[#loc68, #loc69])
#loc149 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc150 = loc(fused[#loc74, #loc75])
#loc151 = loc(fused[#loc76, #loc77])
#loc152 = loc(fused[#loc79, #loc78])
#loc153 = loc(fused[#loc83, #loc84])
#loc154 = loc(fused[#loc85, #loc86])
#loc155 = loc(fused[#loc87, #loc88])
#loc156 = loc(fused[#loc89, #loc86])
#loc157 = loc(fused[#loc95, #loc96])
#loc158 = loc(fused[#loc97, #loc98])
#loc159 = loc(fused[#loc99, #loc100])
#loc160 = loc(fused[#loc101, #loc98])
#loc161 = loc(fused[#loc102, #loc103])
#loc162 = loc(fused[#loc104, #loc105])
#loc163 = loc(fused[#loc107, #loc106])
#loc164 = loc(fused[#loc111, #loc112])
#loc165 = loc(fused[#loc113, #loc114])
#loc166 = loc(fused[#loc115, #loc116])
#loc167 = loc(fused[#loc117, #loc114])
