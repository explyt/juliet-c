!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":34:19)
#loc51 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:8)
#loc52 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:14)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":76:19)
#loc116 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc93)
  cir.func private @printIntLine(!s32i) loc(#loc94)
  cir.func @_ZN36CWE369_Divide_by_Zero__float_rand_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc97)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %3 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc99)
    cir.store %2, %3 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc14)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc15)
    cir.store %4, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc100)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc17)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc17)
    cir.br ^bb3(%20 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc17)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc17)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc17)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc17)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc17)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc17)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc17)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc17)
    cir.br ^bb3(%36 : !u32i) loc(#loc17)
  ^bb3(%37: !u32i loc("CWE369_Divide_by_Zero__float_rand_33.cpp":34:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc17)
    %39 = cir.cast(int_to_float, %38 : !s32i), !cir.float loc(#loc17)
    cir.store %39, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc101)
    cir.br ^bb5 loc(#loc102)
  ^bb5:  // pred: ^bb4
    %40 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc8)
    %41 = cir.load %40 : !cir.ptr<!cir.float>, !cir.float loc(#loc8)
    cir.store %41, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc96)
    cir.br ^bb6 loc(#loc103)
  ^bb6:  // pred: ^bb5
    %42 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc23)
    %43 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc24)
    %44 = cir.cast(floating, %43 : !cir.float), !cir.double loc(#loc24)
    %45 = cir.binop(div, %42, %44) : !cir.double loc(#loc104)
    %46 = cir.cast(float_to_int, %45 : !cir.double), !s32i loc(#loc104)
    cir.store %46, %1 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %47 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc26)
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc95)
  cir.func internal private @_ZN36CWE369_Divide_by_Zero__float_rand_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc107)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc108)
    %3 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc109)
    cir.store %2, %3 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc36)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc37)
    cir.store %4, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc110)
    %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc39)
    cir.store %5, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc30)
    %7 = cir.load %6 : !cir.ptr<!cir.float>, !cir.float loc(#loc30)
    cir.store %7, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc106)
    cir.br ^bb2 loc(#loc113)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc45)
    %9 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc46)
    %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc46)
    %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc114)
    %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc114)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc48)
    cir.br ^bb3 loc(#loc44)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc42)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc28)
  } loc(#loc105)
  cir.func linkonce_odr @_ZSt4fabsf(%arg0: !cir.float loc(fused[#loc51, #loc52])) -> !cir.float extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__x", init] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc53)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc54)
    %3 = cir.fabs %2 : !cir.float loc(#loc54)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc117)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc117)
    cir.return %4 : !cir.float loc(#loc117)
  } loc(#loc115)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc59)
  cir.func internal private @_ZN36CWE369_Divide_by_Zero__float_rand_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %3 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc123)
    cir.store %2, %3 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc69)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc70)
    cir.store %4, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc124)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc72)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc72)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc72)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc72)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc72)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc72)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc72)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc72)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc72)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc72)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc72)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc72)
    cir.br ^bb3(%20 : !u32i) loc(#loc72)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc72)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc72)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc72)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc72)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc72)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc72)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc72)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc72)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc72)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc72)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc72)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc72)
    cir.br ^bb3(%36 : !u32i) loc(#loc72)
  ^bb3(%37: !u32i loc("CWE369_Divide_by_Zero__float_rand_33.cpp":76:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc72)
    %39 = cir.cast(int_to_float, %38 : !s32i), !cir.float loc(#loc72)
    cir.store %39, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc125)
    cir.br ^bb5 loc(#loc126)
  ^bb5:  // pred: ^bb4
    %40 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc63)
    %41 = cir.load %40 : !cir.ptr<!cir.float>, !cir.float loc(#loc63)
    cir.store %41, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc120)
    cir.br ^bb6 loc(#loc127)
  ^bb6:  // pred: ^bb5
    %42 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc78)
    %43 = cir.call @_ZSt4fabsf(%42) : (!cir.float) -> !cir.float loc(#loc79)
    %44 = cir.cast(floating, %43 : !cir.float), !cir.double loc(#loc79)
    %45 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc80)
    %46 = cir.cmp(gt, %44, %45) : !cir.double, !cir.bool loc(#loc128)
    cir.brcond %46 ^bb7, ^bb8 loc(#loc129)
  ^bb7:  // pred: ^bb6
    %47 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc84)
    %48 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc85)
    %49 = cir.cast(floating, %48 : !cir.float), !cir.double loc(#loc85)
    %50 = cir.binop(div, %47, %49) : !cir.double loc(#loc130)
    %51 = cir.cast(float_to_int, %50 : !cir.double), !s32i loc(#loc130)
    cir.store %51, %1 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %52 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc87)
    cir.br ^bb9 loc(#loc82)
  ^bb8:  // pred: ^bb6
    %53 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc59)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb9 loc(#loc77)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc77)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc75)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc61)
  } loc(#loc119)
  cir.func @_ZN36CWE369_Divide_by_Zero__float_rand_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN36CWE369_Divide_by_Zero__float_rand_33L7goodG2BEv() : () -> () loc(#loc91)
    cir.call @_ZN36CWE369_Divide_by_Zero__float_rand_33L7goodB2GEv() : () -> () loc(#loc92)
    cir.return loc(#loc90)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":27:1)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":43:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":36:9)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":36:22)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":39:13)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":39:44)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":29:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":29:11)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":30:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":30:22)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":32:12)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":32:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":34:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":35:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":42:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":37:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":41:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":39:32)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":39:40)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":40:26)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":40:13)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":50:1)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":66:1)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":59:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":59:22)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":62:13)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":62:44)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":52:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":52:11)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":53:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":53:22)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":55:12)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":55:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":57:12)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":57:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":58:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":65:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":60:9)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":64:9)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":62:32)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":62:40)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":63:26)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":63:13)
#loc49 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":237:3)
#loc50 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:34)
#loc53 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:3)
#loc54 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:28)
#loc55 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:5)
#loc56 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:31)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":87:23)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":69:1)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":90:1)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":78:9)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":78:22)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":82:13)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":82:44)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":71:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":71:11)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":72:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":72:22)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":74:12)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":74:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":76:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":77:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":89:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":80:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":88:9)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":80:17)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":80:12)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":80:25)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":81:9)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":84:9)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":86:9)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":82:32)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":82:40)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":83:26)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":83:13)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":87:13)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":92:1)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":96:1)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":94:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_33.cpp":95:5)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc7, #loc8])
#loc97 = loc(fused[#loc9, #loc10])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc13, #loc14])
#loc100 = loc(fused[#loc16, #loc15])
#loc101 = loc(fused[#loc18, #loc17])
#loc102 = loc(fused[#loc19, #loc20])
#loc103 = loc(fused[#loc21, #loc22])
#loc104 = loc(fused[#loc23, #loc24])
#loc105 = loc(fused[#loc27, #loc28])
#loc106 = loc(fused[#loc29, #loc30])
#loc107 = loc(fused[#loc31, #loc32])
#loc108 = loc(fused[#loc33, #loc34])
#loc109 = loc(fused[#loc35, #loc36])
#loc110 = loc(fused[#loc38, #loc37])
#loc111 = loc(fused[#loc40, #loc39])
#loc112 = loc(fused[#loc41, #loc42])
#loc113 = loc(fused[#loc43, #loc44])
#loc114 = loc(fused[#loc45, #loc46])
#loc115 = loc(fused[#loc49, #loc50])
#loc117 = loc(fused[#loc55, #loc56])
#loc118 = loc(fused[#loc57, #loc58])
#loc119 = loc(fused[#loc60, #loc61])
#loc120 = loc(fused[#loc62, #loc63])
#loc121 = loc(fused[#loc64, #loc65])
#loc122 = loc(fused[#loc66, #loc67])
#loc123 = loc(fused[#loc68, #loc69])
#loc124 = loc(fused[#loc71, #loc70])
#loc125 = loc(fused[#loc73, #loc72])
#loc126 = loc(fused[#loc74, #loc75])
#loc127 = loc(fused[#loc76, #loc77])
#loc128 = loc(fused[#loc79, #loc80])
#loc129 = loc(fused[#loc81, #loc82, #loc83, #loc77])
#loc130 = loc(fused[#loc84, #loc85])
#loc131 = loc(fused[#loc89, #loc90])
