!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc237)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc238)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc239)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc240)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc241)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc243)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc244)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc20)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc246)
    cir.br ^bb1 loc(#loc247)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc248)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc24)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc249)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc250)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc251)
  ^bb4:  // pred: ^bb3
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc31)
    %8 = cir.const #cir.int<20> : !s32i loc(#loc32)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc238)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
    %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc252)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc253)
  ^bb5:  // pred: ^bb4
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc39)
    %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc40)
    %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc40)
    cir.store %17, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc254)
    cir.br ^bb7 loc(#loc37)
  ^bb6:  // pred: ^bb4
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc255)
  ^bb12:  // pred: ^bb11
    %20 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc256)
    %21 = cir.call %20() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc46)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %22 ^bb13, ^bb16 loc(#loc257)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc258)
  ^bb14:  // pred: ^bb13
    %23 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc51)
    %24 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc52)
    %25 = cir.cast(floating, %24 : !cir.float), !cir.double loc(#loc52)
    %26 = cir.binop(div, %23, %25) : !cir.double loc(#loc259)
    %27 = cir.cast(float_to_int, %26 : !cir.double), !s32i loc(#loc259)
    cir.store %27, %1 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %28 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc54)
    cir.br ^bb15 loc(#loc50)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc45)
  ^bb16:  // 2 preds: ^bb12, ^bb15
    cir.br ^bb17 loc(#loc45)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc13)
  } loc(#loc242)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc261)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc262)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc263)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc264)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    cir.return loc(#loc56)
  } loc(#loc260)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc67)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc266)
    cir.return %2 : !s32i loc(#loc266)
  } loc(#loc265)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc268)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc269)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc270)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc79)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc271)
    cir.br ^bb1 loc(#loc272)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc273)
    %5 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc83)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc274)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc275)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc276)
  ^bb4:  // pred: ^bb3
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc90)
    %8 = cir.const #cir.int<20> : !s32i loc(#loc91)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc238)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc92)
    %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc93)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc94)
    %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc277)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc278)
  ^bb5:  // pred: ^bb4
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc98)
    %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc99)
    %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc99)
    cir.store %17, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc279)
    cir.br ^bb7 loc(#loc96)
  ^bb6:  // pred: ^bb4
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc102)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    cir.br ^bb7 loc(#loc89)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc89)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc87)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc82)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc82)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc280)
  ^bb12:  // pred: ^bb11
    %20 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc281)
    %21 = cir.call %20() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc106)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc106)
    cir.brcond %22 ^bb13, ^bb14 loc(#loc282)
  ^bb13:  // pred: ^bb12
    %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb20 loc(#loc109)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc283)
  ^bb15:  // pred: ^bb14
    %25 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc114)
    %26 = cir.cast(floating, %25 : !cir.float), !cir.double loc(#loc114)
    %27 = cir.fabs %26 : !cir.double loc(#loc114)
    %28 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc115)
    %29 = cir.cmp(gt, %27, %28) : !cir.double, !cir.bool loc(#loc284)
    cir.brcond %29 ^bb16, ^bb17 loc(#loc285)
  ^bb16:  // pred: ^bb15
    %30 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc120)
    %31 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc121)
    %32 = cir.cast(floating, %31 : !cir.float), !cir.double loc(#loc121)
    %33 = cir.binop(div, %30, %32) : !cir.double loc(#loc286)
    %34 = cir.cast(float_to_int, %33 : !cir.double), !s32i loc(#loc286)
    cir.store %34, %1 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %35 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc123)
    cir.br ^bb18 loc(#loc118)
  ^bb17:  // pred: ^bb15
    %36 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc70)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.br ^bb18 loc(#loc113)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc113)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc105)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc105)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc72)
  } loc(#loc267)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc127)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc288)
    cir.return %2 : !s32i loc(#loc288)
  } loc(#loc287)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc290)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc291)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc292)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc137)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc293)
    cir.br ^bb1 loc(#loc294)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc295)
    %5 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc141)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc141)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc296)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc297)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc298)
  ^bb4:  // pred: ^bb3
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc148)
    %8 = cir.const #cir.int<20> : !s32i loc(#loc149)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc238)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc150)
    %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc151)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc152)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc152)
    %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc299)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc300)
  ^bb5:  // pred: ^bb4
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc156)
    %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc157)
    %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc157)
    cir.store %17, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc301)
    cir.br ^bb7 loc(#loc154)
  ^bb6:  // pred: ^bb4
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc160)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    cir.br ^bb7 loc(#loc147)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc147)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc145)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc140)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc140)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc302)
  ^bb12:  // pred: ^bb11
    %20 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc303)
    %21 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc164)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc164)
    cir.brcond %22 ^bb13, ^bb19 loc(#loc304)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc305)
  ^bb14:  // pred: ^bb13
    %23 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc169)
    %24 = cir.cast(floating, %23 : !cir.float), !cir.double loc(#loc169)
    %25 = cir.fabs %24 : !cir.double loc(#loc169)
    %26 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc170)
    %27 = cir.cmp(gt, %25, %26) : !cir.double, !cir.bool loc(#loc306)
    cir.brcond %27 ^bb15, ^bb16 loc(#loc307)
  ^bb15:  // pred: ^bb14
    %28 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc175)
    %29 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc176)
    %30 = cir.cast(floating, %29 : !cir.float), !cir.double loc(#loc176)
    %31 = cir.binop(div, %28, %30) : !cir.double loc(#loc308)
    %32 = cir.cast(float_to_int, %31 : !cir.double), !s32i loc(#loc308)
    cir.store %32, %1 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    %33 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc178)
    cir.br ^bb17 loc(#loc173)
  ^bb16:  // pred: ^bb14
    %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc179)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc180)
    cir.br ^bb17 loc(#loc168)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc168)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc163)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc163)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc130)
  } loc(#loc289)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc310)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc311)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc187)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc312)
    cir.br ^bb1 loc(#loc313)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc314)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc191)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc191)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc315)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc196)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc197)
    cir.br ^bb4 loc(#loc194)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc198)
    cir.store %8, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc316)
    cir.br ^bb4 loc(#loc190)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc190)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc317)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc318)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc202)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc202)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc319)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc320)
  ^bb8:  // pred: ^bb7
    %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc207)
    %13 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc208)
    %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc208)
    %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc321)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc321)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc210)
    cir.br ^bb9 loc(#loc206)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc201)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc201)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc182)
  } loc(#loc309)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc323)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc324)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc217)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc325)
    cir.br ^bb1 loc(#loc326)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc327)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc221)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc221)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc328)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc224)
    cir.store %6, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc329)
    cir.br ^bb3 loc(#loc220)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc220)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc330)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc331)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc228)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc228)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc332)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc333)
  ^bb7:  // pred: ^bb6
    %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc233)
    %11 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc234)
    %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc234)
    %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc334)
    %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc334)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc323)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc236)
    cir.br ^bb8 loc(#loc232)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc227)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc227)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc212)
  } loc(#loc322)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":56:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":39:1)
#loc13 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":68:1)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":47:13)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":47:45)
#loc16 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":64:13)
#loc17 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":64:44)
#loc18 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":41:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":41:11)
#loc20 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":43:12)
#loc21 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":43:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":44:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":59:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":44:8)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":44:26)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":45:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":46:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":58:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":49:13)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":57:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":49:23)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":49:36)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":49:53)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":49:17)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":49:63)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":50:13)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":53:13)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":55:13)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":52:36)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":52:31)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":52:17)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":52:47)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":56:17)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":60:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":67:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":60:8)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":60:26)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":61:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":62:9)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":66:9)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":64:32)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":64:40)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":65:26)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":65:13)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":200:1)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":206:1)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":202:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":202:14)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":203:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":203:14)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":204:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":204:14)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":205:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":205:14)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":27:1)
#loc66 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":30:1)
#loc67 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":29:12)
#loc68 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":29:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":99:19)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":111:23)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":75:1)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":114:1)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":83:13)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":83:45)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":106:13)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":106:44)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":77:5)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":77:11)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":79:12)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":79:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":80:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":95:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":80:8)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":80:26)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":81:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":82:9)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":94:9)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":85:13)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":93:13)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":85:23)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":85:36)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":85:53)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":85:17)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":85:63)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":86:13)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":89:13)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":91:13)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":88:36)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":88:31)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":88:17)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":88:47)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":92:27)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":92:17)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":96:5)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":113:5)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":96:8)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":96:27)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":97:5)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":100:5)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":102:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":99:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":104:9)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":112:9)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":104:17)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":104:25)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":104:12)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":105:9)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":108:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":110:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":106:32)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":106:40)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":107:26)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":107:13)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":111:13)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":32:1)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":35:1)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":34:12)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":34:5)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":117:1)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":151:1)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":125:13)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":125:45)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":143:13)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":143:44)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":119:5)
#loc136 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":119:11)
#loc137 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":121:12)
#loc138 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":121:5)
#loc139 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":122:5)
#loc140 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":137:5)
#loc141 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":122:8)
#loc142 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":122:26)
#loc143 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":123:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":124:9)
#loc145 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":136:9)
#loc146 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":127:13)
#loc147 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":135:13)
#loc148 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":127:23)
#loc149 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":127:36)
#loc150 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":127:53)
#loc151 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":127:17)
#loc152 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":127:63)
#loc153 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":128:13)
#loc154 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":131:13)
#loc155 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":133:13)
#loc156 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":130:36)
#loc157 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":130:31)
#loc158 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":130:17)
#loc159 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":130:47)
#loc160 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":134:27)
#loc161 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":134:17)
#loc162 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":138:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":150:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":138:8)
#loc165 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":138:26)
#loc166 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":139:5)
#loc167 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":141:9)
#loc168 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":149:9)
#loc169 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":141:17)
#loc170 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":141:25)
#loc171 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":141:12)
#loc172 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":142:9)
#loc173 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":145:9)
#loc174 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":147:9)
#loc175 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":143:32)
#loc176 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":143:40)
#loc177 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":144:26)
#loc178 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":144:13)
#loc179 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":148:23)
#loc180 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":148:13)
#loc181 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":154:1)
#loc182 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":177:1)
#loc183 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":173:13)
#loc184 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":173:44)
#loc185 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":156:5)
#loc186 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":156:11)
#loc187 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":158:12)
#loc188 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":158:5)
#loc189 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":159:5)
#loc190 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":168:5)
#loc191 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":159:8)
#loc192 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":159:27)
#loc193 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":160:5)
#loc194 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":163:5)
#loc195 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":165:5)
#loc196 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":162:19)
#loc197 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":162:9)
#loc198 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":167:16)
#loc199 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":167:9)
#loc200 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":169:5)
#loc201 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":176:5)
#loc202 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":169:8)
#loc203 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":169:26)
#loc204 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":170:5)
#loc205 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":171:9)
#loc206 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":175:9)
#loc207 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":173:32)
#loc208 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":173:40)
#loc209 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":174:26)
#loc210 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":174:13)
#loc211 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":180:1)
#loc212 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":198:1)
#loc213 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":194:13)
#loc214 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":194:44)
#loc215 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":182:5)
#loc216 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":182:11)
#loc217 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":184:12)
#loc218 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":184:5)
#loc219 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":185:5)
#loc220 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":189:5)
#loc221 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":185:8)
#loc222 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":185:26)
#loc223 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":186:5)
#loc224 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":188:16)
#loc225 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":188:9)
#loc226 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":190:5)
#loc227 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":197:5)
#loc228 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":190:8)
#loc229 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":190:26)
#loc230 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":191:5)
#loc231 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":192:9)
#loc232 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":196:9)
#loc233 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":194:32)
#loc234 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":194:40)
#loc235 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":195:26)
#loc236 = loc("CWE369_Divide_by_Zero__float_fgets_08.c":195:13)
#loc237 = loc(fused[#loc1, #loc2])
#loc238 = loc(fused[#loc3, #loc4])
#loc239 = loc(fused[#loc5, #loc6])
#loc240 = loc(fused[#loc7, #loc8])
#loc241 = loc(fused[#loc10, #loc11])
#loc242 = loc(fused[#loc12, #loc13])
#loc243 = loc(fused[#loc14, #loc15])
#loc244 = loc(fused[#loc16, #loc17])
#loc245 = loc(fused[#loc18, #loc19])
#loc246 = loc(fused[#loc21, #loc20])
#loc247 = loc(fused[#loc22, #loc23])
#loc248 = loc(fused[#loc24, #loc25])
#loc249 = loc(fused[#loc26, #loc23])
#loc250 = loc(fused[#loc27, #loc28])
#loc251 = loc(fused[#loc29, #loc30])
#loc252 = loc(fused[#loc34, #loc35])
#loc253 = loc(fused[#loc36, #loc37, #loc38, #loc30])
#loc254 = loc(fused[#loc41, #loc42])
#loc255 = loc(fused[#loc44, #loc45])
#loc256 = loc(fused[#loc46, #loc47])
#loc257 = loc(fused[#loc48, #loc45])
#loc258 = loc(fused[#loc49, #loc50])
#loc259 = loc(fused[#loc51, #loc52])
#loc260 = loc(fused[#loc55, #loc56])
#loc261 = loc(fused[#loc57, #loc58])
#loc262 = loc(fused[#loc59, #loc60])
#loc263 = loc(fused[#loc61, #loc62])
#loc264 = loc(fused[#loc63, #loc64])
#loc265 = loc(fused[#loc65, #loc66])
#loc266 = loc(fused[#loc68, #loc67])
#loc267 = loc(fused[#loc71, #loc72])
#loc268 = loc(fused[#loc73, #loc74])
#loc269 = loc(fused[#loc75, #loc76])
#loc270 = loc(fused[#loc77, #loc78])
#loc271 = loc(fused[#loc80, #loc79])
#loc272 = loc(fused[#loc81, #loc82])
#loc273 = loc(fused[#loc83, #loc84])
#loc274 = loc(fused[#loc85, #loc82])
#loc275 = loc(fused[#loc86, #loc87])
#loc276 = loc(fused[#loc88, #loc89])
#loc277 = loc(fused[#loc93, #loc94])
#loc278 = loc(fused[#loc95, #loc96, #loc97, #loc89])
#loc279 = loc(fused[#loc100, #loc101])
#loc280 = loc(fused[#loc104, #loc105])
#loc281 = loc(fused[#loc106, #loc107])
#loc282 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc283 = loc(fused[#loc112, #loc113])
#loc284 = loc(fused[#loc116, #loc115])
#loc285 = loc(fused[#loc117, #loc118, #loc119, #loc113])
#loc286 = loc(fused[#loc120, #loc121])
#loc287 = loc(fused[#loc125, #loc126])
#loc288 = loc(fused[#loc128, #loc127])
#loc289 = loc(fused[#loc129, #loc130])
#loc290 = loc(fused[#loc131, #loc132])
#loc291 = loc(fused[#loc133, #loc134])
#loc292 = loc(fused[#loc135, #loc136])
#loc293 = loc(fused[#loc138, #loc137])
#loc294 = loc(fused[#loc139, #loc140])
#loc295 = loc(fused[#loc141, #loc142])
#loc296 = loc(fused[#loc143, #loc140])
#loc297 = loc(fused[#loc144, #loc145])
#loc298 = loc(fused[#loc146, #loc147])
#loc299 = loc(fused[#loc151, #loc152])
#loc300 = loc(fused[#loc153, #loc154, #loc155, #loc147])
#loc301 = loc(fused[#loc158, #loc159])
#loc302 = loc(fused[#loc162, #loc163])
#loc303 = loc(fused[#loc164, #loc165])
#loc304 = loc(fused[#loc166, #loc163])
#loc305 = loc(fused[#loc167, #loc168])
#loc306 = loc(fused[#loc171, #loc170])
#loc307 = loc(fused[#loc172, #loc173, #loc174, #loc168])
#loc308 = loc(fused[#loc175, #loc176])
#loc309 = loc(fused[#loc181, #loc182])
#loc310 = loc(fused[#loc183, #loc184])
#loc311 = loc(fused[#loc185, #loc186])
#loc312 = loc(fused[#loc188, #loc187])
#loc313 = loc(fused[#loc189, #loc190])
#loc314 = loc(fused[#loc191, #loc192])
#loc315 = loc(fused[#loc193, #loc194, #loc195, #loc190])
#loc316 = loc(fused[#loc199, #loc198])
#loc317 = loc(fused[#loc200, #loc201])
#loc318 = loc(fused[#loc202, #loc203])
#loc319 = loc(fused[#loc204, #loc201])
#loc320 = loc(fused[#loc205, #loc206])
#loc321 = loc(fused[#loc207, #loc208])
#loc322 = loc(fused[#loc211, #loc212])
#loc323 = loc(fused[#loc213, #loc214])
#loc324 = loc(fused[#loc215, #loc216])
#loc325 = loc(fused[#loc218, #loc217])
#loc326 = loc(fused[#loc219, #loc220])
#loc327 = loc(fused[#loc221, #loc222])
#loc328 = loc(fused[#loc223, #loc220])
#loc329 = loc(fused[#loc225, #loc224])
#loc330 = loc(fused[#loc226, #loc227])
#loc331 = loc(fused[#loc228, #loc229])
#loc332 = loc(fused[#loc230, #loc227])
#loc333 = loc(fused[#loc231, #loc232])
#loc334 = loc(fused[#loc233, #loc234])
