!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":25:21)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":25:34)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":164:10)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":164:14)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":164:20)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":164:32)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":58:26)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":58:39)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":94:26)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":94:39)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":125:25)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":125:38)
#loc202 = loc(fused[#loc7, #loc8])
#loc223 = loc(fused[#loc56, #loc57])
#loc224 = loc(fused[#loc58, #loc59])
#loc230 = loc(fused[#loc80, #loc81])
#loc249 = loc(fused[#loc126, #loc127])
#loc268 = loc(fused[#loc170, #loc171])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc199)
  cir.func private @printUnsignedLine(!u32i) loc(#loc200)
  cir.func internal private @badSink(%arg0: !u32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc202)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc199)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc16)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc17)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc17)
          %7 = cir.cmp(gt, %4, %6) : !u32i, !cir.bool loc(#loc206)
          cir.if %7 {
            %8 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
            %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc21)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc20)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc20)
            %12 = cir.binop(mul, %9, %11) : !u32i loc(#loc209)
            cir.store %12, %8 : !u32i, !cir.ptr<!u32i> loc(#loc208)
            %13 = cir.load %8 : !cir.ptr<!u32i>, !u32i loc(#loc22)
            cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc23)
          } loc(#loc207)
        } loc(#loc205)
      } loc(#loc204)
    } loc(#loc203)
    cir.return loc(#loc6)
  } loc(#loc201)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_multiply_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc28)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc212)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc30)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc30)
    %5 = cir.const #cir.int<2> : !u32i loc(#loc30)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc30)
    %7 = cir.const #cir.int<1> : !u32i loc(#loc30)
    %8 = cir.binop(add, %6, %7) : !u32i loc(#loc30)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc213)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc199)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc34)
    cir.call @badSink(%11) : (!u32i) -> () loc(#loc35)
    cir.return loc(#loc25)
  } loc(#loc210)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_multiply_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc37)
  } loc(#loc215)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc219)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc220)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc221)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func @main(%arg0: !s32i loc(fused[#loc56, #loc57]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc58, #loc59])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc224)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc61)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc62)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc62)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc63)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_multiply_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_multiply_21_good() : () -> () loc(#loc65)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc52)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_multiply_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_multiply_21_bad() : () -> () loc(#loc69)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc227)
    cir.return %17 : !s32i loc(#loc227)
  } loc(#loc222)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc228)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func internal private @goodB2G1Sink(%arg0: !u32i loc(fused[#loc80, #loc81])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc230)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc82)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc228)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc85)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc92)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc93)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc93)
          %7 = cir.cmp(gt, %4, %6) : !u32i, !cir.bool loc(#loc234)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc97)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
              %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc98)
              %11 = cir.const #cir.int<2> : !u32i loc(#loc98)
              %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc98)
              %13 = cir.const #cir.int<1> : !u32i loc(#loc98)
              %14 = cir.binop(add, %12, %13) : !u32i loc(#loc98)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc99)
              %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc99)
              %17 = cir.binop(div, %14, %16) : !u32i loc(#loc237)
              %18 = cir.cmp(lt, %8, %17) : !u32i, !cir.bool loc(#loc238)
              cir.if %18 {
                %19 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
                %20 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc106)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc105)
                %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc105)
                %23 = cir.binop(mul, %20, %22) : !u32i loc(#loc241)
                cir.store %23, %19 : !u32i, !cir.ptr<!u32i> loc(#loc240)
                %24 = cir.load %19 : !cir.ptr<!u32i>, !u32i loc(#loc107)
                cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc108)
              } else {
                %19 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc109)
              } loc(#loc239)
            } loc(#loc236)
          } loc(#loc235)
        } loc(#loc233)
      } loc(#loc232)
    } loc(#loc231)
    cir.return loc(#loc79)
  } loc(#loc229)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc114)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc244)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc116)
    %5 = cir.const #cir.int<2> : !u32i loc(#loc116)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc116)
    %7 = cir.const #cir.int<1> : !u32i loc(#loc116)
    %8 = cir.binop(add, %6, %7) : !u32i loc(#loc116)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc245)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc228)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc120)
    cir.call @goodB2G1Sink(%11) : (!u32i) -> () loc(#loc121)
    cir.return loc(#loc111)
  } loc(#loc242)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc247)
  cir.func internal private @goodB2G2Sink(%arg0: !u32i loc(fused[#loc126, #loc127])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc249)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc128)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc247)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc131)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc135)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc136)
          %7 = cir.cmp(gt, %4, %6) : !u32i, !cir.bool loc(#loc253)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc140)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc141)
              %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc141)
              %11 = cir.const #cir.int<2> : !u32i loc(#loc141)
              %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc141)
              %13 = cir.const #cir.int<1> : !u32i loc(#loc141)
              %14 = cir.binop(add, %12, %13) : !u32i loc(#loc141)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc142)
              %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc142)
              %17 = cir.binop(div, %14, %16) : !u32i loc(#loc256)
              %18 = cir.cmp(lt, %8, %17) : !u32i, !cir.bool loc(#loc257)
              cir.if %18 {
                %19 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc259)
                %20 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc149)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc148)
                %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc148)
                %23 = cir.binop(mul, %20, %22) : !u32i loc(#loc260)
                cir.store %23, %19 : !u32i, !cir.ptr<!u32i> loc(#loc259)
                %24 = cir.load %19 : !cir.ptr<!u32i>, !u32i loc(#loc150)
                cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc151)
              } else {
                %19 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc152)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc152)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc153)
              } loc(#loc258)
            } loc(#loc255)
          } loc(#loc254)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc250)
    cir.return loc(#loc125)
  } loc(#loc248)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc262)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc158)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc158)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc263)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc160)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc160)
    %5 = cir.const #cir.int<2> : !u32i loc(#loc160)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc160)
    %7 = cir.const #cir.int<1> : !u32i loc(#loc160)
    %8 = cir.binop(add, %6, %7) : !u32i loc(#loc160)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc264)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc247)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc265)
    %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc164)
    cir.call @goodB2G2Sink(%11) : (!u32i) -> () loc(#loc165)
    cir.return loc(#loc155)
  } loc(#loc261)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc266)
  cir.func internal private @goodG2BSink(%arg0: !u32i loc(fused[#loc170, #loc171])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc268)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc172)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc266)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc175)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc175)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc179)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc180)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc180)
          %7 = cir.cmp(gt, %4, %6) : !u32i, !cir.bool loc(#loc272)
          cir.if %7 {
            %8 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc274)
            %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc184)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc183)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc183)
            %12 = cir.binop(mul, %9, %11) : !u32i loc(#loc275)
            cir.store %12, %8 : !u32i, !cir.ptr<!u32i> loc(#loc274)
            %13 = cir.load %8 : !cir.ptr<!u32i>, !u32i loc(#loc185)
            cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc186)
          } loc(#loc273)
        } loc(#loc271)
      } loc(#loc270)
    } loc(#loc269)
    cir.return loc(#loc169)
  } loc(#loc267)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc191)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc191)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc278)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc193)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc193)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc279)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc195)
    %6 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc266)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc197)
    cir.call @goodG2BSink(%7) : (!u32i) -> () loc(#loc198)
    cir.return loc(#loc188)
  } loc(#loc276)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":23:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":36:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":26:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":35:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":27:8)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":34:9)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":29:12)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":29:19)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":30:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":32:13)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":32:42)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":32:35)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":33:31)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":33:13)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":38:1)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":46:1)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":40:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":40:18)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":41:12)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":41:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":43:12)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":43:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":44:17)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":44:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":45:13)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":45:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":148:1)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":153:1)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":150:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":150:14)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":151:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":151:14)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":152:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":152:13)
#loc44 = loc("/usr/include/stdlib.h":575:1)
#loc45 = loc("/usr/include/stdlib.h":575:41)
#loc46 = loc("/usr/include/time.h":76:1)
#loc47 = loc("/usr/include/time.h":76:38)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":169:15)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":171:15)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":174:15)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":176:15)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":164:1)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":179:1)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":165:1)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":167:27)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":167:22)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":167:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":169:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":170:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":170:64)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":171:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":174:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":175:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":175:63)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":176:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":178:12)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":178:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":53:1)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":53:29)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":63:19)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":77:27)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":58:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":81:1)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":59:1)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":60:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":80:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":60:8)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":61:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":64:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":66:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":63:9)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":67:9)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":79:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":67:12)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":67:19)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":68:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":70:13)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":78:13)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":70:17)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":70:25)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":70:34)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":70:35)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":71:13)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":74:13)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":76:13)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":72:17)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":72:46)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":72:39)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":73:35)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":73:17)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":77:17)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":83:1)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":91:1)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":85:5)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":85:18)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":86:12)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":86:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":88:12)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":88:5)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":89:22)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":89:5)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":90:18)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":90:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":54:1)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":54:29)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":94:1)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":112:1)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":95:1)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":96:5)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":111:5)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":96:8)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":97:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":98:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":110:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":98:12)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":98:19)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":99:9)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":101:13)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":109:13)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":101:17)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":101:25)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":101:34)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":101:35)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":102:13)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":105:13)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":107:13)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":103:17)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":103:46)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":103:39)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":104:35)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":104:17)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":108:27)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":108:17)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":114:1)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":122:1)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":116:5)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":116:18)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":117:12)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":117:5)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":119:12)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":119:5)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":120:22)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":120:5)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":121:18)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":121:5)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":55:1)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":55:28)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":125:1)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":136:1)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":126:1)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":127:5)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":135:5)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":127:8)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":128:5)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":129:9)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":134:9)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":129:12)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":129:19)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":130:9)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":132:13)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":132:42)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":132:35)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":133:31)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":133:13)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":138:1)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":146:1)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":140:5)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":140:18)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":141:12)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":141:5)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":143:12)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":143:5)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":144:21)
#loc196 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":144:5)
#loc197 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":145:17)
#loc198 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_21.c":145:5)
#loc199 = loc(fused[#loc1, #loc2])
#loc200 = loc(fused[#loc3, #loc4])
#loc201 = loc(fused[#loc5, #loc6])
#loc203 = loc(fused[#loc10, #loc11])
#loc204 = loc(fused[#loc13, #loc11])
#loc205 = loc(fused[#loc14, #loc15])
#loc206 = loc(fused[#loc16, #loc17])
#loc207 = loc(fused[#loc18, #loc15])
#loc208 = loc(fused[#loc19, #loc20])
#loc209 = loc(fused[#loc21, #loc20])
#loc210 = loc(fused[#loc24, #loc25])
#loc211 = loc(fused[#loc26, #loc27])
#loc212 = loc(fused[#loc29, #loc28])
#loc213 = loc(fused[#loc31, #loc30])
#loc214 = loc(fused[#loc33, #loc32])
#loc215 = loc(fused[#loc36, #loc37])
#loc216 = loc(fused[#loc38, #loc39])
#loc217 = loc(fused[#loc40, #loc41])
#loc218 = loc(fused[#loc42, #loc43])
#loc219 = loc(fused[#loc44, #loc45])
#loc220 = loc(fused[#loc46, #loc47])
#loc221 = loc(fused[#loc48, #loc49])
#loc222 = loc(fused[#loc54, #loc55])
#loc225 = loc(fused[#loc65, #loc66])
#loc226 = loc(fused[#loc69, #loc70])
#loc227 = loc(fused[#loc73, #loc72])
#loc228 = loc(fused[#loc74, #loc75])
#loc229 = loc(fused[#loc78, #loc79])
#loc231 = loc(fused[#loc83, #loc84])
#loc232 = loc(fused[#loc86, #loc87, #loc88, #loc84])
#loc233 = loc(fused[#loc90, #loc91])
#loc234 = loc(fused[#loc92, #loc93])
#loc235 = loc(fused[#loc94, #loc91])
#loc236 = loc(fused[#loc95, #loc96])
#loc237 = loc(fused[#loc98, #loc99])
#loc238 = loc(fused[#loc97, #loc100])
#loc239 = loc(fused[#loc101, #loc102, #loc103, #loc96])
#loc240 = loc(fused[#loc104, #loc105])
#loc241 = loc(fused[#loc106, #loc105])
#loc242 = loc(fused[#loc110, #loc111])
#loc243 = loc(fused[#loc112, #loc113])
#loc244 = loc(fused[#loc115, #loc114])
#loc245 = loc(fused[#loc117, #loc116])
#loc246 = loc(fused[#loc119, #loc118])
#loc247 = loc(fused[#loc122, #loc123])
#loc248 = loc(fused[#loc124, #loc125])
#loc250 = loc(fused[#loc129, #loc130])
#loc251 = loc(fused[#loc132, #loc130])
#loc252 = loc(fused[#loc133, #loc134])
#loc253 = loc(fused[#loc135, #loc136])
#loc254 = loc(fused[#loc137, #loc134])
#loc255 = loc(fused[#loc138, #loc139])
#loc256 = loc(fused[#loc141, #loc142])
#loc257 = loc(fused[#loc140, #loc143])
#loc258 = loc(fused[#loc144, #loc145, #loc146, #loc139])
#loc259 = loc(fused[#loc147, #loc148])
#loc260 = loc(fused[#loc149, #loc148])
#loc261 = loc(fused[#loc154, #loc155])
#loc262 = loc(fused[#loc156, #loc157])
#loc263 = loc(fused[#loc159, #loc158])
#loc264 = loc(fused[#loc161, #loc160])
#loc265 = loc(fused[#loc163, #loc162])
#loc266 = loc(fused[#loc166, #loc167])
#loc267 = loc(fused[#loc168, #loc169])
#loc269 = loc(fused[#loc173, #loc174])
#loc270 = loc(fused[#loc176, #loc174])
#loc271 = loc(fused[#loc177, #loc178])
#loc272 = loc(fused[#loc179, #loc180])
#loc273 = loc(fused[#loc181, #loc178])
#loc274 = loc(fused[#loc182, #loc183])
#loc275 = loc(fused[#loc184, #loc183])
#loc276 = loc(fused[#loc187, #loc188])
#loc277 = loc(fused[#loc189, #loc190])
#loc278 = loc(fused[#loc192, #loc191])
#loc279 = loc(fused[#loc194, #loc193])
#loc280 = loc(fused[#loc196, #loc195])
