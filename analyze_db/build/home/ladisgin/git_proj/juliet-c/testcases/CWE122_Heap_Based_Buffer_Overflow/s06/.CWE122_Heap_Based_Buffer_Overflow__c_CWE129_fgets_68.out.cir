!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData : !s32i {alignment = 4 : i64} loc(#loc216)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc217)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc218)
  cir.func private @printIntLine(!s32i) loc(#loc219)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc221)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData : !cir.ptr<!s32i> loc(#loc216)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc225)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc226)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc25)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc25)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc227)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc228)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc229)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc226)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc231)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc35)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
        } loc(#loc232)
      } loc(#loc230)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc38)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc234)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc40)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc41)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc235)
          cir.condition(%18) loc(#loc42)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc44)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc46)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc47)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc237)
          } loc(#loc236)
          cir.yield loc(#loc37)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc49)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc238)
          cir.yield loc(#loc233)
        } loc(#loc233)
      } loc(#loc233)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc240)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc60)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc242)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc63)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc244)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc65)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc66)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc245)
              cir.condition(%25) loc(#loc67)
            } body {
              cir.scope {
                %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
                %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc71)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc69)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc72)
              } loc(#loc246)
              cir.yield loc(#loc62)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc73)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc74)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc247)
              cir.yield loc(#loc243)
            } loc(#loc243)
          } loc(#loc243)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc75)
        } loc(#loc241)
      } loc(#loc239)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc76)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc77)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
    } loc(#loc224)
    cir.return loc(#loc15)
  } loc(#loc222)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodG2BData : !s32i {alignment = 4 : i64} loc(#loc248)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc250)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodG2BData : !cir.ptr<!s32i> loc(#loc248)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc252)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc253)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc90)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc91)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc91)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc254)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc255)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc256)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc253)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc258)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc99)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc100)
          %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc101)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc99)
        } loc(#loc259)
      } loc(#loc257)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc104)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc261)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc107)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc262)
          cir.condition(%18) loc(#loc108)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc113)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc264)
          } loc(#loc263)
          cir.yield loc(#loc103)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc115)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc265)
          cir.yield loc(#loc260)
        } loc(#loc260)
      } loc(#loc260)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc119)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc267)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc123)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc126)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc269)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc129)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc271)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc132)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc272)
              cir.condition(%25) loc(#loc133)
            } body {
              cir.scope {
                %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc135)
                %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc136)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc137)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc138)
              } loc(#loc273)
              cir.yield loc(#loc128)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc139)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc140)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc274)
              cir.yield loc(#loc270)
            } loc(#loc270)
          } loc(#loc270)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc141)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc141)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc142)
        } loc(#loc268)
      } loc(#loc266)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc143)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc144)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc143)
    } loc(#loc251)
    cir.return loc(#loc81)
  } loc(#loc249)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodB2GData : !s32i {alignment = 4 : i64} loc(#loc275)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc147)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodB2GData : !cir.ptr<!s32i> loc(#loc275)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc279)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc280)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc158)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc159)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc159)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc281)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc282)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc158)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc283)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc280)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc164)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc165)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc165)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc285)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc168)
          %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc169)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
        } loc(#loc286)
      } loc(#loc284)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc172)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc288)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc175)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc289)
          cir.condition(%18) loc(#loc176)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc178)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc180)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc181)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc291)
          } loc(#loc290)
          cir.yield loc(#loc171)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc182)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc183)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc292)
          cir.yield loc(#loc287)
        } loc(#loc287)
      } loc(#loc287)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc187)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc294)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc190)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc295)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc188)
            cir.yield %23 : !cir.bool loc(#loc188)
          }, false {
            %23 = cir.const #false loc(#loc188)
            cir.yield %23 : !cir.bool loc(#loc188)
          }) : (!cir.bool) -> !cir.bool loc(#loc188)
          cir.yield %22 : !cir.bool loc(#loc188)
        }, false {
          %19 = cir.const #false loc(#loc188)
          cir.yield %19 : !cir.bool loc(#loc188)
        }) : (!cir.bool) -> !cir.bool loc(#loc188)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc195)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc196)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc198)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc297)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc201)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc299)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc203)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc204)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc300)
              cir.condition(%26) loc(#loc205)
            } body {
              cir.scope {
                %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
                %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc208)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc209)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc207)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc210)
              } loc(#loc301)
              cir.yield loc(#loc200)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc211)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc212)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc302)
              cir.yield loc(#loc298)
            } loc(#loc298)
          } loc(#loc298)
        } else {
          %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc147)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc147)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc213)
        } loc(#loc296)
      } loc(#loc293)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc214)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc215)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc214)
    } loc(#loc278)
    cir.return loc(#loc149)
  } loc(#loc276)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":22:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":53:23)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":28:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":57:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":30:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":30:16)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":31:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":56:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":32:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":32:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":33:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":33:54)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":33:31)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":33:38)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":33:43)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":33:53)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":34:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":34:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":34:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":34:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":34:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":34:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":34:36)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":34:35)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":36:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":39:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":36:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":36:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":36:21)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":36:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":36:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":37:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":38:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":38:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":38:20)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":38:21)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":36:30)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":36:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":42:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":54:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":42:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":42:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":43:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":50:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":52:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":44:28)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":44:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":44:20)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":44:24)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":46:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":49:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":46:21)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":46:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":46:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":46:28)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":46:26)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":47:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":48:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":48:37)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":48:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":48:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":46:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":46:32)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":53:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":55:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":55:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":23:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":23:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":64:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":93:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":66:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":66:16)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":67:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":92:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":68:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":68:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":69:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":69:54)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":69:31)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":69:38)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":69:43)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":69:53)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":70:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":70:39)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":70:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":70:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":70:29)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":70:30)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":70:36)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":70:35)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":72:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":75:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":72:18)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":72:14)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":72:21)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":72:25)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":72:23)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":73:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":74:25)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":74:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":74:20)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":74:21)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":72:30)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":72:29)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":78:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":90:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":78:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":78:21)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":79:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":86:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":88:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":80:28)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":80:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":80:20)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":80:24)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":82:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":85:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":82:21)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":82:17)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":82:24)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":82:28)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":82:26)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":83:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":84:30)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":84:37)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":84:38)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":84:17)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":82:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":82:32)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":89:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":89:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":91:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":91:14)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":24:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":24:12)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":120:23)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":96:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":124:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":98:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":98:16)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":99:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":123:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":100:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":100:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":101:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":101:54)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":101:31)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":101:38)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":101:43)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":101:53)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":102:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":102:39)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":102:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":102:23)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":102:29)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":102:30)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":102:36)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":102:35)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":104:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":107:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":104:18)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":104:14)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":104:21)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":104:25)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":104:23)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":105:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":106:25)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":106:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":106:20)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":106:21)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":104:30)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":104:29)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":109:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":121:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":109:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":109:21)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":109:23)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":109:26)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":109:34)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":109:36)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":110:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":117:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":119:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":111:28)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":111:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":111:20)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":111:24)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":113:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":116:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":113:21)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":113:17)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":113:24)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":113:28)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":113:26)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":114:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":115:30)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":115:37)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":115:38)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":115:17)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":113:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":113:32)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":120:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":122:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c":122:14)
#loc216 = loc(fused[#loc1, #loc2])
#loc217 = loc(fused[#loc3, #loc4])
#loc218 = loc(fused[#loc5, #loc6])
#loc219 = loc(fused[#loc7, #loc8])
#loc220 = loc(fused[#loc9, #loc10])
#loc221 = loc(fused[#loc12, #loc13])
#loc222 = loc(fused[#loc14, #loc15])
#loc223 = loc(fused[#loc16, #loc17])
#loc224 = loc(fused[#loc18, #loc19])
#loc225 = loc(fused[#loc20, #loc21])
#loc226 = loc(fused[#loc22, #loc23])
#loc227 = loc(fused[#loc26, #loc27])
#loc228 = loc(fused[#loc25, #loc27])
#loc229 = loc(fused[#loc24, #loc23])
#loc230 = loc(fused[#loc28, #loc29])
#loc231 = loc(fused[#loc30, #loc31])
#loc232 = loc(fused[#loc32, #loc29])
#loc233 = loc(fused[#loc36, #loc37])
#loc234 = loc(fused[#loc39, #loc38])
#loc235 = loc(fused[#loc40, #loc41])
#loc236 = loc(fused[#loc43, #loc37])
#loc237 = loc(fused[#loc45, #loc44])
#loc238 = loc(fused[#loc49, #loc48])
#loc239 = loc(fused[#loc50, #loc51])
#loc240 = loc(fused[#loc52, #loc53])
#loc241 = loc(fused[#loc54, #loc55, #loc56, #loc51])
#loc242 = loc(fused[#loc58, #loc57])
#loc243 = loc(fused[#loc61, #loc62])
#loc244 = loc(fused[#loc64, #loc63])
#loc245 = loc(fused[#loc65, #loc66])
#loc246 = loc(fused[#loc68, #loc62])
#loc247 = loc(fused[#loc74, #loc73])
#loc248 = loc(fused[#loc78, #loc79])
#loc249 = loc(fused[#loc80, #loc81])
#loc250 = loc(fused[#loc82, #loc83])
#loc251 = loc(fused[#loc84, #loc85])
#loc252 = loc(fused[#loc86, #loc87])
#loc253 = loc(fused[#loc88, #loc89])
#loc254 = loc(fused[#loc92, #loc93])
#loc255 = loc(fused[#loc91, #loc93])
#loc256 = loc(fused[#loc90, #loc89])
#loc257 = loc(fused[#loc94, #loc95])
#loc258 = loc(fused[#loc96, #loc97])
#loc259 = loc(fused[#loc98, #loc95])
#loc260 = loc(fused[#loc102, #loc103])
#loc261 = loc(fused[#loc105, #loc104])
#loc262 = loc(fused[#loc106, #loc107])
#loc263 = loc(fused[#loc109, #loc103])
#loc264 = loc(fused[#loc111, #loc110])
#loc265 = loc(fused[#loc115, #loc114])
#loc266 = loc(fused[#loc116, #loc117])
#loc267 = loc(fused[#loc118, #loc119])
#loc268 = loc(fused[#loc120, #loc121, #loc122, #loc117])
#loc269 = loc(fused[#loc124, #loc123])
#loc270 = loc(fused[#loc127, #loc128])
#loc271 = loc(fused[#loc130, #loc129])
#loc272 = loc(fused[#loc131, #loc132])
#loc273 = loc(fused[#loc134, #loc128])
#loc274 = loc(fused[#loc140, #loc139])
#loc275 = loc(fused[#loc145, #loc146])
#loc276 = loc(fused[#loc148, #loc149])
#loc277 = loc(fused[#loc150, #loc151])
#loc278 = loc(fused[#loc152, #loc153])
#loc279 = loc(fused[#loc154, #loc155])
#loc280 = loc(fused[#loc156, #loc157])
#loc281 = loc(fused[#loc160, #loc161])
#loc282 = loc(fused[#loc159, #loc161])
#loc283 = loc(fused[#loc158, #loc157])
#loc284 = loc(fused[#loc162, #loc163])
#loc285 = loc(fused[#loc164, #loc165])
#loc286 = loc(fused[#loc166, #loc163])
#loc287 = loc(fused[#loc170, #loc171])
#loc288 = loc(fused[#loc173, #loc172])
#loc289 = loc(fused[#loc174, #loc175])
#loc290 = loc(fused[#loc177, #loc171])
#loc291 = loc(fused[#loc179, #loc178])
#loc292 = loc(fused[#loc183, #loc182])
#loc293 = loc(fused[#loc184, #loc185])
#loc294 = loc(fused[#loc186, #loc187])
#loc295 = loc(fused[#loc189, #loc191])
#loc296 = loc(fused[#loc192, #loc193, #loc194, #loc185])
#loc297 = loc(fused[#loc196, #loc195])
#loc298 = loc(fused[#loc199, #loc200])
#loc299 = loc(fused[#loc202, #loc201])
#loc300 = loc(fused[#loc203, #loc204])
#loc301 = loc(fused[#loc206, #loc200])
#loc302 = loc(fused[#loc212, #loc211])
