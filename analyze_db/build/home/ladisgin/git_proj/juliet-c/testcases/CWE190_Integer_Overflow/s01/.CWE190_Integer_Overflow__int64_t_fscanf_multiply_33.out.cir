!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":111:10)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":111:14)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":111:20)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":111:32)
#loc171 = loc(fused[#loc110, #loc111])
#loc172 = loc(fused[#loc112, #loc113])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc126)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc128)
  cir.func private @printLongLongLine(!s64i) loc(#loc129)
  cir.func @_ZN51CWE190_Integer_Overflow__int64_t_fscanf_multiply_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc131)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %3 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc134)
    cir.store %2, %3 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc18)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc19)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    %5 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc21)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc127)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc128)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc128)
    %10 = cir.call @__isoc23_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc21)
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc12)
    %12 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    cir.br ^bb2 loc(#loc137)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc28)
    %16 = cir.cmp(gt, %13, %15) : !s64i, !cir.bool loc(#loc138)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc139)
  ^bb3:  // pred: ^bb2
    %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc30)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc14)
    %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc14)
    %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc30)
    cir.store %20, %1 : !s64i, !cir.ptr<!s64i> loc(#loc132)
    %21 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc32)
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc26)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc24)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc10)
  } loc(#loc130)
  cir.func internal private @_ZN51CWE190_Integer_Overflow__int64_t_fscanf_multiply_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc143)
    %3 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc144)
    cir.store %2, %3 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc42)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc43)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc145)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc45)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc45)
    cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc146)
    cir.br ^bb1 loc(#loc147)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
    %8 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc36)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc141)
    cir.br ^bb2 loc(#loc148)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc51)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc52)
    %12 = cir.cmp(gt, %9, %11) : !s64i, !cir.bool loc(#loc149)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc150)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc54)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc38)
    %16 = cir.binop(mul, %13, %15) nsw : !s64i loc(#loc54)
    cir.store %16, %1 : !s64i, !cir.ptr<!s64i> loc(#loc142)
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc55)
    cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc56)
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc50)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc48)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc34)
  } loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc57)
  cir.func internal private @_ZN51CWE190_Integer_Overflow__int64_t_fscanf_multiply_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %3 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc155)
    cir.store %2, %3 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc67)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc68)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc156)
    %5 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc70)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc127)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc71)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc157)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc157)
    %10 = cir.call @__isoc23_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc70)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc61)
    %12 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc61)
    cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc152)
    cir.br ^bb2 loc(#loc159)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc78)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc79)
    %16 = cir.cmp(gt, %13, %15) : !s64i, !cir.bool loc(#loc160)
    cir.brcond %16 ^bb3, ^bb9 loc(#loc161)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc162)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc83)
    %18 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc84)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc85)
    %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc85)
    %21 = cir.binop(div, %18, %20) : !s64i loc(#loc163)
    %22 = cir.cmp(lt, %17, %21) : !s64i, !cir.bool loc(#loc164)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc165)
  ^bb5:  // pred: ^bb4
    %23 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc90)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc63)
    %25 = cir.cast(integral, %24 : !s32i), !s64i loc(#loc63)
    %26 = cir.binop(mul, %23, %25) nsw : !s64i loc(#loc90)
    cir.store %26, %1 : !s64i, !cir.ptr<!s64i> loc(#loc153)
    %27 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc91)
    cir.call @printLongLongLine(%27) : (!s64i) -> () loc(#loc92)
    cir.br ^bb7 loc(#loc88)
  ^bb6:  // pred: ^bb4
    %28 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc57)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb7 loc(#loc82)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc77)
  ^bb9:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb10 loc(#loc77)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc75)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc59)
  } loc(#loc151)
  cir.func @_ZN51CWE190_Integer_Overflow__int64_t_fscanf_multiply_334goodEv() extra(#fn_attr) {
    cir.call @_ZN51CWE190_Integer_Overflow__int64_t_fscanf_multiply_33L7goodG2BEv() : () -> () loc(#loc96)
    cir.call @_ZN51CWE190_Integer_Overflow__int64_t_fscanf_multiply_33L7goodB2GEv() : () -> () loc(#loc97)
    cir.return loc(#loc95)
  } loc(#loc166)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc167)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc168)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc107)
  cir.func @main(%arg0: !s32i loc(fused[#loc110, #loc111]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc112, #loc113])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc172)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc109)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc114)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc115)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc116)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc116)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc117)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc104)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    cir.call @_ZN51CWE190_Integer_Overflow__int64_t_fscanf_multiply_334goodEv() : () -> () loc(#loc119)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc105)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc106)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    cir.call @_ZN51CWE190_Integer_Overflow__int64_t_fscanf_multiply_333badEv() : () -> () loc(#loc122)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc107)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc124)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    cir.return %15 : !s32i loc(#loc173)
  } loc(#loc170)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":32:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":32:24)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":26:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":42:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":34:9)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":34:24)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":38:13)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":38:37)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":28:13)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":29:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":29:24)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":30:12)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":30:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":32:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":32:13)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":33:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":41:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":35:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":40:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":35:12)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":35:19)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":36:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":38:30)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":39:31)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":39:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":49:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":65:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":57:9)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":57:24)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":61:13)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":61:37)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":51:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":51:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":52:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":52:24)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":53:12)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":53:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":55:12)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":55:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":56:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":64:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":58:9)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":63:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":58:12)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":58:19)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":59:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":61:30)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":62:31)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":62:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":87:27)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":68:1)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":91:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":76:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":76:24)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":82:17)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":82:41)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":70:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":70:13)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":71:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":71:24)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":72:12)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":72:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":74:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":74:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":74:20)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":74:24)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":75:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":90:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":77:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":89:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":77:12)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":77:19)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":78:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":80:13)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":88:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":80:17)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":80:25)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":80:35)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":80:36)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":81:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":84:13)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":86:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":82:34)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":83:35)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":83:17)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":87:17)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":93:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":97:1)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":95:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":96:5)
#loc98 = loc("/usr/include/stdlib.h":575:1)
#loc99 = loc("/usr/include/stdlib.h":575:41)
#loc100 = loc("/usr/include/time.h":76:1)
#loc101 = loc("/usr/include/time.h":76:38)
#loc102 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc103 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":116:15)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":118:15)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":121:15)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":123:15)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":111:1)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":126:1)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":112:1)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":114:27)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":114:22)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":114:5)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":116:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":117:5)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":118:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":121:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":122:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":123:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":125:12)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_33.cpp":125:5)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc7, #loc8])
#loc130 = loc(fused[#loc9, #loc10])
#loc131 = loc(fused[#loc11, #loc12])
#loc132 = loc(fused[#loc13, #loc14])
#loc133 = loc(fused[#loc15, #loc16])
#loc134 = loc(fused[#loc17, #loc18])
#loc135 = loc(fused[#loc20, #loc19])
#loc136 = loc(fused[#loc23, #loc24])
#loc137 = loc(fused[#loc25, #loc26])
#loc138 = loc(fused[#loc27, #loc28])
#loc139 = loc(fused[#loc29, #loc26])
#loc140 = loc(fused[#loc33, #loc34])
#loc141 = loc(fused[#loc35, #loc36])
#loc142 = loc(fused[#loc37, #loc38])
#loc143 = loc(fused[#loc39, #loc40])
#loc144 = loc(fused[#loc41, #loc42])
#loc145 = loc(fused[#loc44, #loc43])
#loc146 = loc(fused[#loc46, #loc45])
#loc147 = loc(fused[#loc47, #loc48])
#loc148 = loc(fused[#loc49, #loc50])
#loc149 = loc(fused[#loc51, #loc52])
#loc150 = loc(fused[#loc53, #loc50])
#loc151 = loc(fused[#loc58, #loc59])
#loc152 = loc(fused[#loc60, #loc61])
#loc153 = loc(fused[#loc62, #loc63])
#loc154 = loc(fused[#loc64, #loc65])
#loc155 = loc(fused[#loc66, #loc67])
#loc156 = loc(fused[#loc69, #loc68])
#loc157 = loc(fused[#loc72, #loc73])
#loc158 = loc(fused[#loc74, #loc75])
#loc159 = loc(fused[#loc76, #loc77])
#loc160 = loc(fused[#loc78, #loc79])
#loc161 = loc(fused[#loc80, #loc77])
#loc162 = loc(fused[#loc81, #loc82])
#loc163 = loc(fused[#loc84, #loc85])
#loc164 = loc(fused[#loc83, #loc86])
#loc165 = loc(fused[#loc87, #loc88, #loc89, #loc82])
#loc166 = loc(fused[#loc94, #loc95])
#loc167 = loc(fused[#loc98, #loc99])
#loc168 = loc(fused[#loc100, #loc101])
#loc169 = loc(fused[#loc102, #loc103])
#loc170 = loc(fused[#loc108, #loc109])
#loc173 = loc(fused[#loc125, #loc124])
