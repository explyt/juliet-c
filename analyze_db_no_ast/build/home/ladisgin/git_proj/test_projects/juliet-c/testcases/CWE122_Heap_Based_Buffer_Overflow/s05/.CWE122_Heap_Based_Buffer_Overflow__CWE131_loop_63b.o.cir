!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":21:65)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":21:73)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":42:69)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":42:77)
#loc80 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc43, #loc44])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc77)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc78)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b_badSink(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc80)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc81)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc11)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    cir.store %3, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc81)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc83)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc84)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc83)
      cir.store %6, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc83)
      cir.scope {
        %14 = cir.const #cir.int<0> : !s32i loc(#loc21)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc21)
        cir.store %15, %5 : !u64i, !cir.ptr<!u64i> loc(#loc86)
        cir.for : cond {
          %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc23)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc24)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc24)
          %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc87)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc25)
          cir.condition(%20) loc(#loc25)
        } body {
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc27)
            %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc28)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc28)
            %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc28)
            %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
            %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc31)
            cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc89)
          } loc(#loc88)
          cir.yield loc(#loc20)
        } step {
          %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc33)
          %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc34)
          cir.store %17, %5 : !u64i, !cir.ptr<!u64i> loc(#loc90)
          cir.yield loc(#loc85)
        } loc(#loc85)
      } loc(#loc85)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc36)
      %9 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc37)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc35)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc38)
      %11 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc39)
      %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc40)
      cir.call @free(%13) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc39)
    } loc(#loc82)
    cir.return loc(#loc6)
  } loc(#loc79)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc43, #loc44])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc93)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc47)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc46)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    cir.store %3, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc93)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc95)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc96)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc95)
      cir.store %6, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc95)
      cir.scope {
        %14 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc57)
        cir.store %15, %5 : !u64i, !cir.ptr<!u64i> loc(#loc98)
        cir.for : cond {
          %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc60)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc60)
          %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc99)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc61)
          cir.condition(%20) loc(#loc61)
        } body {
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc63)
            %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc64)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc64)
            %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc64)
            %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
            %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc66)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc67)
            cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc101)
          } loc(#loc100)
          cir.yield loc(#loc56)
        } step {
          %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc69)
          %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc70)
          cir.store %17, %5 : !u64i, !cir.ptr<!u64i> loc(#loc102)
          cir.yield loc(#loc97)
        } loc(#loc97)
      } loc(#loc97)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %9 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc73)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc74)
      %11 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc75)
      %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc76)
      cir.call @free(%13) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
    } loc(#loc94)
    cir.return loc(#loc42)
  } loc(#loc91)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":35:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":23:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":23:19)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":22:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":23:18)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":34:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":25:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":25:28)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":26:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":26:16)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":28:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":31:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":28:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":28:14)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":28:21)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":28:25)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":28:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":29:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":30:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":30:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":30:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":30:18)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":30:19)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":30:31)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":28:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":28:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":32:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":32:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":32:28)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":32:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":33:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":33:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":42:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":56:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":44:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":44:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":43:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":44:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":45:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":55:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":46:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":46:28)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":47:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":47:16)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":49:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":52:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":49:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":49:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":49:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":49:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":49:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":50:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":51:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":51:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":51:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":51:18)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":51:19)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":51:31)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":49:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":49:29)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":53:22)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":53:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":53:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":53:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":54:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c":54:14)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc13, #loc14])
#loc83 = loc(fused[#loc15, #loc16])
#loc84 = loc(fused[#loc17, #loc18])
#loc85 = loc(fused[#loc19, #loc20])
#loc86 = loc(fused[#loc22, #loc21])
#loc87 = loc(fused[#loc23, #loc24])
#loc88 = loc(fused[#loc26, #loc20])
#loc89 = loc(fused[#loc29, #loc32])
#loc90 = loc(fused[#loc34, #loc33])
#loc91 = loc(fused[#loc41, #loc42])
#loc93 = loc(fused[#loc45, #loc46])
#loc94 = loc(fused[#loc49, #loc50])
#loc95 = loc(fused[#loc51, #loc52])
#loc96 = loc(fused[#loc53, #loc54])
#loc97 = loc(fused[#loc55, #loc56])
#loc98 = loc(fused[#loc58, #loc57])
#loc99 = loc(fused[#loc59, #loc60])
#loc100 = loc(fused[#loc62, #loc56])
#loc101 = loc(fused[#loc65, #loc68])
#loc102 = loc(fused[#loc70, #loc69])
