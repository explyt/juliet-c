!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc229)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc231)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printLongLongLine(!s64i) loc(#loc233)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc16)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc236)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc22)
          %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc230)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc231)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc231)
          %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc22)
          cir.break loc(#loc24)
        } loc(#loc21)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc9)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc26)
          cir.break loc(#loc27)
        } loc(#loc25)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc237)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc30)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc34)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc35)
            %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc35)
            %6 = cir.cmp(lt, %3, %5) : !s64i, !cir.bool loc(#loc240)
            cir.if %6 {
              %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc242)
              %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc39)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc38)
              %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc38)
              %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc39)
              cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc242)
              %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc40)
              cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc41)
            } loc(#loc241)
          } loc(#loc239)
          cir.break loc(#loc42)
        } loc(#loc31)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc45)
          cir.break loc(#loc46)
        } loc(#loc43)
        cir.yield loc(#loc28)
      } loc(#loc28)
    } loc(#loc238)
    cir.return loc(#loc13)
  } loc(#loc234)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc244)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc245)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc246)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc247)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    cir.return loc(#loc48)
  } loc(#loc243)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc62)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc250)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc66)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc68)
          %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc230)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc69)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc252)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc252)
          %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc68)
          cir.break loc(#loc72)
        } loc(#loc67)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc75)
          cir.break loc(#loc76)
        } loc(#loc73)
        cir.yield loc(#loc64)
      } loc(#loc64)
    } loc(#loc251)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc79)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc81)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc81)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          cir.break loc(#loc83)
        } loc(#loc80)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc88)
            %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc88)
            %6 = cir.cmp(lt, %3, %5) : !s64i, !cir.bool loc(#loc255)
            cir.if %6 {
              cir.scope {
                %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc92)
                %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc93)
                %9 = cir.unary(minus, %8) nsw : !s64i, !s64i loc(#loc93)
                %10 = cir.const #cir.int<1> : !s64i loc(#loc93)
                %11 = cir.binop(sub, %9, %10) nsw : !s64i loc(#loc93)
                %12 = cir.const #cir.int<2> : !s32i loc(#loc94)
                %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc94)
                %14 = cir.binop(div, %11, %13) : !s64i loc(#loc258)
                %15 = cir.cmp(gt, %7, %14) : !s64i, !cir.bool loc(#loc259)
                cir.if %15 {
                  %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc261)
                  %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc101)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc100)
                  %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc100)
                  %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc101)
                  cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc261)
                  %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc102)
                  cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc103)
                } else {
                  %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc57)
                  %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc57)
                  cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc104)
                } loc(#loc260)
              } loc(#loc257)
            } loc(#loc256)
          } loc(#loc254)
          cir.break loc(#loc105)
        } loc(#loc84)
        cir.yield loc(#loc77)
      } loc(#loc77)
    } loc(#loc253)
    cir.return loc(#loc59)
  } loc(#loc248)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc263)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc110)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc264)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc114)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc116)
          %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc230)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc117)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc266)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc266)
          %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc116)
          cir.break loc(#loc120)
        } loc(#loc115)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc122)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc122)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc123)
          cir.break loc(#loc124)
        } loc(#loc121)
        cir.yield loc(#loc112)
      } loc(#loc112)
    } loc(#loc265)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc127)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc131)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc132)
            %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc132)
            %6 = cir.cmp(lt, %3, %5) : !s64i, !cir.bool loc(#loc269)
            cir.if %6 {
              cir.scope {
                %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc136)
                %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc137)
                %9 = cir.unary(minus, %8) nsw : !s64i, !s64i loc(#loc137)
                %10 = cir.const #cir.int<1> : !s64i loc(#loc137)
                %11 = cir.binop(sub, %9, %10) nsw : !s64i loc(#loc137)
                %12 = cir.const #cir.int<2> : !s32i loc(#loc138)
                %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc138)
                %14 = cir.binop(div, %11, %13) : !s64i loc(#loc272)
                %15 = cir.cmp(gt, %7, %14) : !s64i, !cir.bool loc(#loc273)
                cir.if %15 {
                  %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc275)
                  %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc145)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc144)
                  %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc144)
                  %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc145)
                  cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc275)
                  %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc146)
                  cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc147)
                } else {
                  %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc148)
                  %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc148)
                  cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc149)
                } loc(#loc274)
              } loc(#loc271)
            } loc(#loc270)
          } loc(#loc268)
          cir.break loc(#loc150)
        } loc(#loc128)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc152)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc152)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc153)
          cir.break loc(#loc154)
        } loc(#loc151)
        cir.yield loc(#loc125)
      } loc(#loc125)
    } loc(#loc267)
    cir.return loc(#loc107)
  } loc(#loc262)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc277)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc159)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc278)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc163)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc165)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc165)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc166)
          cir.break loc(#loc167)
        } loc(#loc164)
        cir.case(default, []) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc169)
          %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc170)
          %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc170)
          cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc280)
          cir.break loc(#loc172)
        } loc(#loc168)
        cir.yield loc(#loc161)
      } loc(#loc161)
    } loc(#loc279)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc175)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc179)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc180)
            %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc180)
            %6 = cir.cmp(lt, %3, %5) : !s64i, !cir.bool loc(#loc283)
            cir.if %6 {
              %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc285)
              %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc184)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc183)
              %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc183)
              %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc184)
              cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc285)
              %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc185)
              cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc186)
            } loc(#loc284)
          } loc(#loc282)
          cir.break loc(#loc187)
        } loc(#loc176)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc189)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc189)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc190)
          cir.break loc(#loc191)
        } loc(#loc188)
        cir.yield loc(#loc173)
      } loc(#loc173)
    } loc(#loc281)
    cir.return loc(#loc156)
  } loc(#loc276)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc287)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc196)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc288)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc200)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc202)
          %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc203)
          %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc203)
          cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc290)
          cir.break loc(#loc205)
        } loc(#loc201)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc207)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc207)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc208)
          cir.break loc(#loc209)
        } loc(#loc206)
        cir.yield loc(#loc198)
      } loc(#loc198)
    } loc(#loc289)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc212)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc216)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc217)
            %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc217)
            %6 = cir.cmp(lt, %3, %5) : !s64i, !cir.bool loc(#loc293)
            cir.if %6 {
              %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc295)
              %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc221)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc220)
              %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc220)
              %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc221)
              cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc295)
              %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc222)
              cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc223)
            } loc(#loc294)
          } loc(#loc292)
          cir.break loc(#loc224)
        } loc(#loc213)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc226)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc226)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc227)
          cir.break loc(#loc228)
        } loc(#loc225)
        cir.yield loc(#loc210)
      } loc(#loc210)
    } loc(#loc291)
    cir.return loc(#loc193)
  } loc(#loc286)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":31:24)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":31:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":35:19)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":23:1)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":53:1)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":25:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":25:13)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":26:12)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":26:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":27:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":37:5)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":27:12)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":29:5)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":31:9)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":31:17)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":32:9)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":33:5)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":35:9)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":36:9)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":38:5)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":52:5)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":38:12)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":40:5)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":41:9)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":46:9)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":41:12)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":41:19)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":42:9)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":44:13)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":44:37)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":44:30)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":45:31)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":45:13)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":47:9)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":48:5)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":50:19)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":50:9)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":51:9)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":205:1)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":211:1)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":207:5)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":207:14)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":208:5)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":208:14)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":209:5)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":209:14)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":210:5)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":210:14)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":92:27)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":60:1)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":97:1)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":62:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":62:13)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":63:12)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":63:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":64:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":74:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":64:12)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":66:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":68:9)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":68:17)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":68:24)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":68:28)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":69:9)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":70:5)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":72:19)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":72:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":73:9)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":75:5)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":96:5)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":75:12)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":77:5)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":79:19)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":79:9)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":80:9)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":81:5)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":82:9)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":94:9)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":82:12)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":82:19)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":83:9)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":85:13)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":93:13)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":85:17)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":85:25)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":85:35)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":85:36)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":86:13)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":89:13)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":91:13)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":87:17)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":87:41)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":87:34)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":88:35)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":88:17)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":92:17)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":95:9)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":100:1)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":137:1)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":102:5)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":102:13)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":103:12)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":103:5)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":104:5)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":114:5)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":104:12)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":106:5)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":108:9)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":108:17)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":108:24)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":108:28)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":109:9)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":110:5)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":112:19)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":112:9)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":113:9)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":115:5)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":136:5)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":115:12)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":117:5)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":118:9)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":130:9)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":118:12)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":118:19)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":119:9)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":121:13)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":129:13)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":121:17)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":121:25)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":121:35)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":121:36)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":122:13)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":125:13)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":127:13)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":123:17)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":123:41)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":123:34)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":124:35)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":124:17)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":128:27)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":128:17)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":131:9)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":132:5)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":134:19)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":134:9)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":135:9)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":140:1)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":170:1)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":142:5)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":142:13)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":143:12)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":143:5)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":144:5)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":154:5)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":144:12)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":146:5)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":148:19)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":148:9)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":149:9)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":150:5)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":152:17)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":152:16)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":152:9)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":153:9)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":155:5)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":169:5)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":155:12)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":157:5)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":158:9)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":163:9)
#loc179 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":158:12)
#loc180 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":158:19)
#loc181 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":159:9)
#loc182 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":161:13)
#loc183 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":161:37)
#loc184 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":161:30)
#loc185 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":162:31)
#loc186 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":162:13)
#loc187 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":164:9)
#loc188 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":165:5)
#loc189 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":167:19)
#loc190 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":167:9)
#loc191 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":168:9)
#loc192 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":173:1)
#loc193 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":203:1)
#loc194 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":175:5)
#loc195 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":175:13)
#loc196 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":176:12)
#loc197 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":176:5)
#loc198 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":177:5)
#loc199 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":187:5)
#loc200 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":177:12)
#loc201 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":179:5)
#loc202 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":181:17)
#loc203 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":181:16)
#loc204 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":181:9)
#loc205 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":182:9)
#loc206 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":183:5)
#loc207 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":185:19)
#loc208 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":185:9)
#loc209 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":186:9)
#loc210 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":188:5)
#loc211 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":202:5)
#loc212 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":188:12)
#loc213 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":190:5)
#loc214 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":191:9)
#loc215 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":196:9)
#loc216 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":191:12)
#loc217 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":191:19)
#loc218 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":192:9)
#loc219 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":194:13)
#loc220 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":194:37)
#loc221 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":194:30)
#loc222 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":195:31)
#loc223 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":195:13)
#loc224 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":197:9)
#loc225 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":198:5)
#loc226 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":200:19)
#loc227 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":200:9)
#loc228 = loc("CWE191_Integer_Underflow__int64_t_fscanf_multiply_15.c":201:9)
#loc229 = loc(fused[#loc1, #loc2])
#loc230 = loc(fused[#loc3, #loc4])
#loc231 = loc(fused[#loc5, #loc6])
#loc232 = loc(fused[#loc7, #loc8])
#loc233 = loc(fused[#loc10, #loc11])
#loc234 = loc(fused[#loc12, #loc13])
#loc235 = loc(fused[#loc14, #loc15])
#loc236 = loc(fused[#loc17, #loc16])
#loc237 = loc(fused[#loc18, #loc19])
#loc238 = loc(fused[#loc28, #loc29])
#loc239 = loc(fused[#loc32, #loc33])
#loc240 = loc(fused[#loc34, #loc35])
#loc241 = loc(fused[#loc36, #loc33])
#loc242 = loc(fused[#loc37, #loc38])
#loc243 = loc(fused[#loc47, #loc48])
#loc244 = loc(fused[#loc49, #loc50])
#loc245 = loc(fused[#loc51, #loc52])
#loc246 = loc(fused[#loc53, #loc54])
#loc247 = loc(fused[#loc55, #loc56])
#loc248 = loc(fused[#loc58, #loc59])
#loc249 = loc(fused[#loc60, #loc61])
#loc250 = loc(fused[#loc63, #loc62])
#loc251 = loc(fused[#loc64, #loc65])
#loc252 = loc(fused[#loc70, #loc71])
#loc253 = loc(fused[#loc77, #loc78])
#loc254 = loc(fused[#loc85, #loc86])
#loc255 = loc(fused[#loc87, #loc88])
#loc256 = loc(fused[#loc89, #loc86])
#loc257 = loc(fused[#loc90, #loc91])
#loc258 = loc(fused[#loc93, #loc94])
#loc259 = loc(fused[#loc92, #loc95])
#loc260 = loc(fused[#loc96, #loc97, #loc98, #loc91])
#loc261 = loc(fused[#loc99, #loc100])
#loc262 = loc(fused[#loc106, #loc107])
#loc263 = loc(fused[#loc108, #loc109])
#loc264 = loc(fused[#loc111, #loc110])
#loc265 = loc(fused[#loc112, #loc113])
#loc266 = loc(fused[#loc118, #loc119])
#loc267 = loc(fused[#loc125, #loc126])
#loc268 = loc(fused[#loc129, #loc130])
#loc269 = loc(fused[#loc131, #loc132])
#loc270 = loc(fused[#loc133, #loc130])
#loc271 = loc(fused[#loc134, #loc135])
#loc272 = loc(fused[#loc137, #loc138])
#loc273 = loc(fused[#loc136, #loc139])
#loc274 = loc(fused[#loc140, #loc141, #loc142, #loc135])
#loc275 = loc(fused[#loc143, #loc144])
#loc276 = loc(fused[#loc155, #loc156])
#loc277 = loc(fused[#loc157, #loc158])
#loc278 = loc(fused[#loc160, #loc159])
#loc279 = loc(fused[#loc161, #loc162])
#loc280 = loc(fused[#loc171, #loc169])
#loc281 = loc(fused[#loc173, #loc174])
#loc282 = loc(fused[#loc177, #loc178])
#loc283 = loc(fused[#loc179, #loc180])
#loc284 = loc(fused[#loc181, #loc178])
#loc285 = loc(fused[#loc182, #loc183])
#loc286 = loc(fused[#loc192, #loc193])
#loc287 = loc(fused[#loc194, #loc195])
#loc288 = loc(fused[#loc197, #loc196])
#loc289 = loc(fused[#loc198, #loc199])
#loc290 = loc(fused[#loc204, #loc202])
#loc291 = loc(fused[#loc210, #loc211])
#loc292 = loc(fused[#loc214, #loc215])
#loc293 = loc(fused[#loc216, #loc217])
#loc294 = loc(fused[#loc218, #loc215])
#loc295 = loc(fused[#loc219, #loc220])
