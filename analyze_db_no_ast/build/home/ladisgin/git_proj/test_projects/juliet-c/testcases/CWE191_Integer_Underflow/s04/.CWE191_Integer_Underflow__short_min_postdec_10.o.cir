!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__short_min_postdec_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc165)
  cir.func private  @printIntLine(!s32i) loc(#loc166)
  cir.func no_proto  @CWE191_Integer_Underflow__short_min_postdec_10_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc168)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc9)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc169)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<32767> : !s32i loc(#loc15)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc15)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc15)
        %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc15)
        cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc172)
      } loc(#loc171)
    } loc(#loc170)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc176)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc25)
          %8 = cir.unary(dec, %7) : !s16i, !s16i loc(#loc26)
          cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc177)
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
          cir.store %9, %6 : !s16i, !cir.ptr<!s16i> loc(#loc176)
          %10 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc27)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc27)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc28)
        } loc(#loc175)
      } loc(#loc174)
    } loc(#loc173)
    cir.return loc(#loc6)
  } loc(#loc167)
  cir.func no_proto  @CWE191_Integer_Underflow__short_min_postdec_10_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc178)
  cir.global "private"  external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc183)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc186)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc49)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc187)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc53)
      cir.if %5 {
        %6 = cir.const #cir.int<32767> : !s32i loc(#loc55)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc55)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc55)
        %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc55)
        cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc190)
      } loc(#loc189)
    } loc(#loc188)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc59)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc66)
          %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc66)
          %8 = cir.const #cir.int<32767> : !s32i loc(#loc67)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc67)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc67)
          %12 = cir.cmp(gt, %7, %11) : !s32i, !s32i loc(#loc194)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc68)
          cir.if %13 {
            %14 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc196)
            %15 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc74)
            %16 = cir.unary(dec, %15) : !s16i, !s16i loc(#loc75)
            cir.store %16, %0 : !s16i, !cir.ptr<!s16i> loc(#loc197)
            %17 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc73)
            cir.store %17, %14 : !s16i, !cir.ptr<!s16i> loc(#loc196)
            %18 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc76)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc76)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc77)
          } else {
            %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc195)
        } loc(#loc193)
      } loc(#loc192)
    } loc(#loc191)
    cir.return loc(#loc46)
  } loc(#loc185)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc199)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc83)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc200)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc87)
      cir.if %5 {
        %6 = cir.const #cir.int<32767> : !s32i loc(#loc89)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc89)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc89)
        %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc89)
        cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc203)
      } loc(#loc202)
    } loc(#loc201)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc93)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc97)
          %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc97)
          %8 = cir.const #cir.int<32767> : !s32i loc(#loc98)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc98)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc98)
          %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc98)
          %12 = cir.cmp(gt, %7, %11) : !s32i, !s32i loc(#loc207)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc99)
          cir.if %13 {
            %14 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc209)
            %15 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc105)
            %16 = cir.unary(dec, %15) : !s16i, !s16i loc(#loc106)
            cir.store %16, %0 : !s16i, !cir.ptr<!s16i> loc(#loc210)
            %17 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc104)
            cir.store %17, %14 : !s16i, !cir.ptr<!s16i> loc(#loc209)
            %18 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc107)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc107)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc108)
          } else {
            %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc109)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc109)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          } loc(#loc208)
        } loc(#loc206)
      } loc(#loc205)
    } loc(#loc204)
    cir.return loc(#loc80)
  } loc(#loc198)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc212)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc115)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc115)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc213)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc119)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc119)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc124)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc125)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc126)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc126)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc216)
      } loc(#loc215)
    } loc(#loc214)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc130)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc130)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc220)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc136)
          %8 = cir.unary(dec, %7) : !s16i, !s16i loc(#loc137)
          cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc221)
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc135)
          cir.store %9, %6 : !s16i, !cir.ptr<!s16i> loc(#loc220)
          %10 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc138)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc138)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc139)
        } loc(#loc219)
      } loc(#loc218)
    } loc(#loc217)
    cir.return loc(#loc112)
  } loc(#loc211)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc223)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc144)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc144)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc224)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc148)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc150)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc151)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc151)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc227)
      } loc(#loc226)
    } loc(#loc225)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc155)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc231)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc161)
          %8 = cir.unary(dec, %7) : !s16i, !s16i loc(#loc162)
          cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc232)
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc160)
          cir.store %9, %6 : !s16i, !cir.ptr<!s16i> loc(#loc231)
          %10 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc163)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc163)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc164)
        } loc(#loc230)
      } loc(#loc229)
    } loc(#loc228)
    cir.return loc(#loc141)
  } loc(#loc222)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__short_min_postdec_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":40:1)
#loc7 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":24:11)
#loc9 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":30:5)
#loc13 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":26:8)
#loc14 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":29:16)
#loc16 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":29:9)
#loc17 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":31:5)
#loc18 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":39:5)
#loc19 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":31:8)
#loc20 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":32:5)
#loc21 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":33:9)
#loc22 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":38:9)
#loc23 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":36:13)
#loc24 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":36:28)
#loc25 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":35:17)
#loc26 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":35:13)
#loc27 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":37:26)
#loc28 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":37:13)
#loc29 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":150:1)
#loc30 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":156:1)
#loc31 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":152:5)
#loc32 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":152:14)
#loc33 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":153:5)
#loc34 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":153:14)
#loc35 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":154:5)
#loc36 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":154:14)
#loc37 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":155:5)
#loc38 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":155:14)
#loc39 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc40 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":59:19)
#loc44 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":72:23)
#loc45 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":47:1)
#loc46 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":75:1)
#loc47 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":49:5)
#loc48 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":49:11)
#loc49 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":50:12)
#loc50 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":50:5)
#loc51 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":51:5)
#loc52 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":55:5)
#loc53 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":51:8)
#loc54 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":52:5)
#loc55 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":54:16)
#loc56 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":54:9)
#loc57 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":56:5)
#loc58 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":74:5)
#loc59 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":56:8)
#loc60 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":57:5)
#loc61 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":60:5)
#loc62 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":62:5)
#loc63 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":59:9)
#loc64 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":64:9)
#loc65 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":73:9)
#loc66 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":64:13)
#loc67 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":64:20)
#loc68 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":64:18)
#loc69 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":65:9)
#loc70 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":69:9)
#loc71 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":71:9)
#loc72 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":67:13)
#loc73 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":67:28)
#loc74 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":66:17)
#loc75 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":66:13)
#loc76 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":68:26)
#loc77 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":68:13)
#loc78 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":72:13)
#loc79 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":78:1)
#loc80 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":101:1)
#loc81 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":80:5)
#loc82 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":80:11)
#loc83 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":81:12)
#loc84 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":81:5)
#loc85 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":82:5)
#loc86 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":86:5)
#loc87 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":82:8)
#loc88 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":83:5)
#loc89 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":85:16)
#loc90 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":85:9)
#loc91 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":87:5)
#loc92 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":100:5)
#loc93 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":87:8)
#loc94 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":88:5)
#loc95 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":90:9)
#loc96 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":99:9)
#loc97 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":90:13)
#loc98 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":90:20)
#loc99 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":90:18)
#loc100 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":91:9)
#loc101 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":95:9)
#loc102 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":97:9)
#loc103 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":93:13)
#loc104 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":93:28)
#loc105 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":92:17)
#loc106 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":92:13)
#loc107 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":94:26)
#loc108 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":94:13)
#loc109 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":98:23)
#loc110 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":98:13)
#loc111 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":104:1)
#loc112 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":127:1)
#loc113 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":106:5)
#loc114 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":106:11)
#loc115 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":107:12)
#loc116 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":107:5)
#loc117 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":108:5)
#loc118 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":117:5)
#loc119 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":108:8)
#loc120 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":109:5)
#loc121 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":112:5)
#loc122 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":114:5)
#loc123 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":111:19)
#loc124 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":111:9)
#loc125 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":116:17)
#loc126 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":116:16)
#loc127 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":116:9)
#loc128 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":118:5)
#loc129 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":126:5)
#loc130 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":118:8)
#loc131 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":119:5)
#loc132 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":120:9)
#loc133 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":125:9)
#loc134 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":123:13)
#loc135 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":123:28)
#loc136 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":122:17)
#loc137 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":122:13)
#loc138 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":124:26)
#loc139 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":124:13)
#loc140 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":130:1)
#loc141 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":148:1)
#loc142 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":132:5)
#loc143 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":132:11)
#loc144 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":133:12)
#loc145 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":133:5)
#loc146 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":134:5)
#loc147 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":138:5)
#loc148 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":134:8)
#loc149 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":135:5)
#loc150 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":137:17)
#loc151 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":137:16)
#loc152 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":137:9)
#loc153 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":139:5)
#loc154 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":147:5)
#loc155 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":139:8)
#loc156 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":140:5)
#loc157 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":141:9)
#loc158 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":146:9)
#loc159 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":144:13)
#loc160 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":144:28)
#loc161 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":143:17)
#loc162 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":143:13)
#loc163 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":145:26)
#loc164 = loc("CWE191_Integer_Underflow__short_min_postdec_10.c":145:13)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc7, #loc8])
#loc169 = loc(fused[#loc10, #loc9])
#loc170 = loc(fused[#loc11, #loc12])
#loc171 = loc(fused[#loc14, #loc12])
#loc172 = loc(fused[#loc16, #loc15])
#loc173 = loc(fused[#loc17, #loc18])
#loc174 = loc(fused[#loc20, #loc18])
#loc175 = loc(fused[#loc21, #loc22])
#loc176 = loc(fused[#loc23, #loc24])
#loc177 = loc(fused[#loc26, #loc25])
#loc178 = loc(fused[#loc29, #loc30])
#loc179 = loc(fused[#loc31, #loc32])
#loc180 = loc(fused[#loc33, #loc34])
#loc181 = loc(fused[#loc35, #loc36])
#loc182 = loc(fused[#loc37, #loc38])
#loc183 = loc(fused[#loc39, #loc40])
#loc184 = loc(fused[#loc41, #loc42])
#loc185 = loc(fused[#loc45, #loc46])
#loc186 = loc(fused[#loc47, #loc48])
#loc187 = loc(fused[#loc50, #loc49])
#loc188 = loc(fused[#loc51, #loc52])
#loc189 = loc(fused[#loc54, #loc52])
#loc190 = loc(fused[#loc56, #loc55])
#loc191 = loc(fused[#loc57, #loc58])
#loc192 = loc(fused[#loc60, #loc61, #loc62, #loc58])
#loc193 = loc(fused[#loc64, #loc65])
#loc194 = loc(fused[#loc66, #loc67])
#loc195 = loc(fused[#loc69, #loc70, #loc71, #loc65])
#loc196 = loc(fused[#loc72, #loc73])
#loc197 = loc(fused[#loc75, #loc74])
#loc198 = loc(fused[#loc79, #loc80])
#loc199 = loc(fused[#loc81, #loc82])
#loc200 = loc(fused[#loc84, #loc83])
#loc201 = loc(fused[#loc85, #loc86])
#loc202 = loc(fused[#loc88, #loc86])
#loc203 = loc(fused[#loc90, #loc89])
#loc204 = loc(fused[#loc91, #loc92])
#loc205 = loc(fused[#loc94, #loc92])
#loc206 = loc(fused[#loc95, #loc96])
#loc207 = loc(fused[#loc97, #loc98])
#loc208 = loc(fused[#loc100, #loc101, #loc102, #loc96])
#loc209 = loc(fused[#loc103, #loc104])
#loc210 = loc(fused[#loc106, #loc105])
#loc211 = loc(fused[#loc111, #loc112])
#loc212 = loc(fused[#loc113, #loc114])
#loc213 = loc(fused[#loc116, #loc115])
#loc214 = loc(fused[#loc117, #loc118])
#loc215 = loc(fused[#loc120, #loc121, #loc122, #loc118])
#loc216 = loc(fused[#loc127, #loc125])
#loc217 = loc(fused[#loc128, #loc129])
#loc218 = loc(fused[#loc131, #loc129])
#loc219 = loc(fused[#loc132, #loc133])
#loc220 = loc(fused[#loc134, #loc135])
#loc221 = loc(fused[#loc137, #loc136])
#loc222 = loc(fused[#loc140, #loc141])
#loc223 = loc(fused[#loc142, #loc143])
#loc224 = loc(fused[#loc145, #loc144])
#loc225 = loc(fused[#loc146, #loc147])
#loc226 = loc(fused[#loc149, #loc147])
#loc227 = loc(fused[#loc152, #loc150])
#loc228 = loc(fused[#loc153, #loc154])
#loc229 = loc(fused[#loc156, #loc154])
#loc230 = loc(fused[#loc157, #loc158])
#loc231 = loc(fused[#loc159, #loc160])
#loc232 = loc(fused[#loc162, #loc161])
