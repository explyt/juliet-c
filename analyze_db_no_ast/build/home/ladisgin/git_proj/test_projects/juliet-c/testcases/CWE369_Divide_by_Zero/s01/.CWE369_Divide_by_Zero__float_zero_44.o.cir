!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_44.c":24:21)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_44.c":24:27)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_44.c":51:25)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_44.c":51:31)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_44.c":72:25)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_44.c":72:31)
#loc97 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc36, #loc37])
#loc121 = loc(fused[#loc64, #loc65])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc95)
  cir.func internal private  @badSink(%arg0: !cir.float loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc97)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc99)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc13)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc13)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc100)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc100)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc99)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc15)
    } loc(#loc98)
    cir.return loc(#loc4)
  } loc(#loc96)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc103)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc21)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>> loc(#loc103)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc22)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc104)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc24)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc105)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc26)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc27)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!cir.float)>>, !cir.float) -> () loc(#loc26)
    cir.return loc(#loc17)
  } loc(#loc101)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc106)
  cir.func internal private  @goodG2BSink(%arg0: !cir.float loc(fused[#loc36, #loc37])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc110)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc38)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc112)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc43)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc44)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc44)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc113)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc113)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc112)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc46)
    } loc(#loc111)
    cir.return loc(#loc35)
  } loc(#loc109)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc116)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc52)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>> loc(#loc116)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc53)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc117)
    %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc55)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc118)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc57)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc58)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!cir.float)>>, !cir.float) -> () loc(#loc57)
    cir.return loc(#loc48)
  } loc(#loc114)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc61)
  cir.func internal private  @goodB2GSink(%arg0: !cir.float loc(fused[#loc64, #loc65])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc121)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc66)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc69)
      %2 = cir.cast(floating, %1 : !cir.float), !cir.double loc(#loc69)
      %3 = cir.fabs %2 : !cir.double loc(#loc69)
      %4 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc70)
      %5 = cir.cmp(gt, %3, %4) : !cir.double, !s32i loc(#loc123)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc72)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc125)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc78)
        %9 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc79)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc79)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc126)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc126)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc125)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc80)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc81)
      } else {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc61)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc82)
      } loc(#loc124)
    } loc(#loc122)
    cir.return loc(#loc63)
  } loc(#loc120)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc129)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc88)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>> loc(#loc129)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc89)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc130)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc91)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc131)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.float)>>>, !cir.ptr<!cir.func<!void (!cir.float)>> loc(#loc93)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc94)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!cir.float)>>, !cir.float) -> () loc(#loc93)
    cir.return loc(#loc84)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_44.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_44.c":31:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_44.c":25:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_44.c":26:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_44.c":30:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_44.c":28:9)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_44.c":28:40)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_44.c":28:28)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_44.c":28:36)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_44.c":29:22)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_44.c":29:9)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_44.c":33:1)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_44.c":44:1)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_44.c":35:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_44.c":35:11)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_44.c":37:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_44.c":37:31)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_44.c":39:12)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_44.c":39:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_44.c":41:12)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_44.c":41:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_44.c":43:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_44.c":43:13)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_44.c":97:1)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_44.c":101:1)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_44.c":99:5)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_44.c":99:13)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_44.c":100:5)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_44.c":100:13)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_44.c":51:1)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_44.c":58:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_44.c":52:1)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_44.c":53:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_44.c":57:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_44.c":55:9)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_44.c":55:40)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_44.c":55:28)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_44.c":55:36)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_44.c":56:22)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_44.c":56:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_44.c":60:1)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_44.c":69:1)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_44.c":62:5)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_44.c":62:11)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_44.c":63:5)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_44.c":63:31)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_44.c":65:12)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_44.c":65:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_44.c":67:12)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_44.c":67:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_44.c":68:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_44.c":68:13)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_44.c":82:19)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_44.c":72:1)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_44.c":84:1)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_44.c":73:1)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_44.c":75:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_44.c":83:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_44.c":75:13)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_44.c":75:21)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_44.c":75:8)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_44.c":75:19)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_44.c":76:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_44.c":79:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_44.c":81:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_44.c":77:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_44.c":77:40)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_44.c":77:28)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_44.c":77:36)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_44.c":78:22)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_44.c":78:9)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_44.c":82:9)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_44.c":86:1)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_44.c":95:1)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_44.c":88:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_44.c":88:11)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_44.c":89:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_44.c":89:31)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_44.c":91:12)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_44.c":91:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_44.c":93:12)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_44.c":93:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_44.c":94:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_44.c":94:13)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc8, #loc9])
#loc99 = loc(fused[#loc10, #loc11])
#loc100 = loc(fused[#loc12, #loc13])
#loc101 = loc(fused[#loc16, #loc17])
#loc102 = loc(fused[#loc18, #loc19])
#loc103 = loc(fused[#loc20, #loc21])
#loc104 = loc(fused[#loc23, #loc22])
#loc105 = loc(fused[#loc25, #loc24])
#loc106 = loc(fused[#loc28, #loc29])
#loc107 = loc(fused[#loc30, #loc31])
#loc108 = loc(fused[#loc32, #loc33])
#loc109 = loc(fused[#loc34, #loc35])
#loc111 = loc(fused[#loc39, #loc40])
#loc112 = loc(fused[#loc41, #loc42])
#loc113 = loc(fused[#loc43, #loc44])
#loc114 = loc(fused[#loc47, #loc48])
#loc115 = loc(fused[#loc49, #loc50])
#loc116 = loc(fused[#loc51, #loc52])
#loc117 = loc(fused[#loc54, #loc53])
#loc118 = loc(fused[#loc56, #loc55])
#loc119 = loc(fused[#loc59, #loc60])
#loc120 = loc(fused[#loc62, #loc63])
#loc122 = loc(fused[#loc67, #loc68])
#loc123 = loc(fused[#loc71, #loc70])
#loc124 = loc(fused[#loc73, #loc74, #loc75, #loc68])
#loc125 = loc(fused[#loc76, #loc77])
#loc126 = loc(fused[#loc78, #loc79])
#loc127 = loc(fused[#loc83, #loc84])
#loc128 = loc(fused[#loc85, #loc86])
#loc129 = loc(fused[#loc87, #loc88])
#loc130 = loc(fused[#loc90, #loc89])
#loc131 = loc(fused[#loc92, #loc91])
