!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_10L8goodG2B2Ev.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc263)
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_10L8goodG2B1Ev.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc264)
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_103badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc265)
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc266)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc267)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc268)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc269)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc15)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc270)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc271)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc272)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc273)
  cir.func private @close(!s32i) -> !s32i loc(#loc274)
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc275)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_103badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc277)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc265)
    %2 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_103badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc265)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc265)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc32)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc278)
    cir.scope {
      %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc266)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc36)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc36)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc282)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc283)
          %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc284)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc285)
          %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc286)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc47)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc285)
          %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc50)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
          %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc50)
          cir.store %16, %11 : !u64i, !cir.ptr<!u64i> loc(#loc286)
          cir.scope {
            cir.do {
              cir.scope {
                %17 = cir.const #cir.int<2> : !s32i loc(#loc56)
                %18 = cir.const #cir.int<1> : !u32i loc(#loc57)
                %19 = cir.cast(integral, %18 : !u32i), !s32i loc(#loc57)
                %20 = cir.const #cir.int<6> : !u32i loc(#loc58)
                %21 = cir.cast(integral, %20 : !u32i), !s32i loc(#loc58)
                %22 = cir.call @socket(%17, %19, %21) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc59)
                cir.store %22, %10 : !s32i, !cir.ptr<!s32i> loc(#loc289)
                cir.scope {
                  %72 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc64)
                  %73 = cir.const #cir.int<1> : !s32i loc(#loc65)
                  %74 = cir.unary(minus, %73) nsw : !s32i, !s32i loc(#loc65)
                  %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc291)
                  cir.if %75 {
                    cir.break loc(#loc67)
                  } loc(#loc292)
                } loc(#loc290)
                %23 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc293)
                %24 = cir.const #cir.int<0> : !s32i loc(#loc70)
                %25 = cir.const #cir.int<16> : !u64i loc(#loc294)
                cir.libc.memset %25 bytes from %23 set to %24 : !cir.ptr<!void>, !s32i, !u64i loc(#loc295)
                %26 = cir.const #cir.int<2> : !s32i loc(#loc75)
                %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc75)
                %28 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
                cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc296)
                %29 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc15)
                %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc15)
                %31 = cir.call @inet_addr(%30) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc78)
                %32 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
                %33 = cir.get_member %32[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
                cir.store %31, %33 : !u32i, !cir.ptr<!u32i> loc(#loc297)
                %34 = cir.const #cir.int<27015> : !s32i loc(#loc83)
                %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc83)
                %36 = cir.call @htons(%35) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc84)
                %37 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc85)
                cir.store %36, %37 : !u16i, !cir.ptr<!u16i> loc(#loc298)
                cir.scope {
                  %72 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                  %73 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc300)
                  %74 = cir.const #cir.int<16> : !u64i loc(#loc301)
                  %75 = cir.cast(integral, %74 : !u64i), !u32i loc(#loc301)
                  %76 = cir.call @connect(%72, %73, %75) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc95)
                  %77 = cir.const #cir.int<1> : !s32i loc(#loc96)
                  %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc96)
                  %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc302)
                  cir.if %79 {
                    cir.break loc(#loc98)
                  } loc(#loc303)
                } loc(#loc299)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
                %40 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc101)
                %41 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %40 : !u64i), !cir.ptr<!s8i> loc(#loc102)
                %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc304)
                %43 = cir.const #cir.int<1> : !u64i loc(#loc305)
                %44 = cir.const #cir.int<4096> : !s32i loc(#loc107)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc107)
                %46 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc108)
                %47 = cir.binop(sub, %45, %46) : !u64i loc(#loc306)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc109)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc109)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc307)
                %51 = cir.binop(mul, %43, %50) : !u64i loc(#loc308)
                %52 = cir.const #cir.int<0> : !s32i loc(#loc111)
                %53 = cir.call @recv(%38, %42, %51, %52) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc112)
                %54 = cir.cast(integral, %53 : !s64i), !s32i loc(#loc112)
                cir.store %54, %7 : !s32i, !cir.ptr<!s32i> loc(#loc309)
                cir.scope {
                  %72 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                  %73 = cir.const #cir.int<1> : !s32i loc(#loc118)
                  %74 = cir.unary(minus, %73) nsw : !s32i, !s32i loc(#loc118)
                  %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc311)
                  %76 = cir.ternary(%75, true {
                    %77 = cir.const #true loc(#loc119)
                    cir.yield %77 : !cir.bool loc(#loc119)
                  }, false {
                    %77 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                    %78 = cir.const #cir.int<0> : !s32i loc(#loc121)
                    %79 = cir.cmp(eq, %77, %78) : !s32i, !cir.bool loc(#loc312)
                    %80 = cir.ternary(%79, true {
                      %81 = cir.const #true loc(#loc119)
                      cir.yield %81 : !cir.bool loc(#loc119)
                    }, false {
                      %81 = cir.const #false loc(#loc119)
                      cir.yield %81 : !cir.bool loc(#loc119)
                    }) : (!cir.bool) -> !cir.bool loc(#loc119)
                    cir.yield %80 : !cir.bool loc(#loc119)
                  }) : (!cir.bool) -> !cir.bool loc(#loc119)
                  cir.if %76 {
                    cir.break loc(#loc123)
                  } loc(#loc313)
                } loc(#loc310)
                %55 = cir.const #cir.int<0> : !s8i loc(#loc124)
                %56 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
                %57 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc126)
                %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                %59 = cir.cast(integral, %58 : !s32i), !u64i loc(#loc127)
                %60 = cir.const #cir.int<1> : !u64i loc(#loc314)
                %61 = cir.binop(div, %59, %60) : !u64i loc(#loc315)
                %62 = cir.binop(add, %57, %61) : !u64i loc(#loc316)
                %63 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %62 : !u64i), !cir.ptr<!s8i> loc(#loc130)
                cir.store %55, %63 : !s8i, !cir.ptr<!s8i> loc(#loc317)
                %64 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
                %65 = cir.const #cir.int<13> : !s8i loc(#loc132)
                %66 = cir.cast(integral, %65 : !s8i), !s32i loc(#loc132)
                %67 = cir.call @strchr(%64, %66) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc133)
                cir.store %67, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc318)
                cir.scope {
                  %72 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
                  %73 = cir.cast(ptr_to_bool, %72 : !cir.ptr<!s8i>), !cir.bool loc(#loc138)
                  cir.if %73 {
                    %74 = cir.const #cir.int<0> : !s8i loc(#loc140)
                    %75 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
                    cir.store %74, %75 : !s8i, !cir.ptr<!s8i> loc(#loc321)
                  } loc(#loc320)
                } loc(#loc319)
                %68 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
                %69 = cir.const #cir.int<10> : !s8i loc(#loc144)
                %70 = cir.cast(integral, %69 : !s8i), !s32i loc(#loc144)
                %71 = cir.call @strchr(%68, %70) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc145)
                cir.store %71, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc322)
                cir.scope {
                  %72 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
                  %73 = cir.cast(ptr_to_bool, %72 : !cir.ptr<!s8i>), !cir.bool loc(#loc150)
                  cir.if %73 {
                    %74 = cir.const #cir.int<0> : !s8i loc(#loc152)
                    %75 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
                    cir.store %74, %75 : !s8i, !cir.ptr<!s8i> loc(#loc325)
                  } loc(#loc324)
                } loc(#loc323)
              } loc(#loc288)
              cir.yield loc(#loc53)
            } while {
              %17 = cir.const #cir.int<0> : !s32i loc(#loc155)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc155)
              cir.condition(%18) loc(#loc155)
            } loc(#loc287)
          } loc(#loc287)
          cir.scope {
            %17 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc158)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc159)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc159)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc327)
            cir.if %20 {
              %21 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc162)
            } loc(#loc328)
          } loc(#loc326)
        } loc(#loc281)
      } loc(#loc280)
    } loc(#loc279)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc330)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc168)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc169)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc331)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc170)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc171)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc332)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc172)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc333)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc177)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc178)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc179)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc335)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc181)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc182)
        } loc(#loc336)
      } loc(#loc334)
    } loc(#loc329)
    cir.return loc(#loc29)
  } loc(#loc276)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc337)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc338)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc187)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc339)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc190)
  cir.func internal private @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_10L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc341)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc264)
    %2 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_10L8goodG2B1Ev.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc264)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc264)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc195)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc342)
    cir.scope {
      %4 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc337)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc199)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc199)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc187)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc187)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc203)
      } else {
        %7 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc204)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc205)
        %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc190)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc190)
        %11 = cir.call @strcat(%8, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc204)
      } loc(#loc344)
    } loc(#loc343)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc346)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc210)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc211)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc212)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc347)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc213)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc214)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc348)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc215)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc349)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc220)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc221)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc222)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc351)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc224)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc225)
        } loc(#loc352)
      } loc(#loc350)
    } loc(#loc345)
    cir.return loc(#loc192)
  } loc(#loc340)
  cir.func internal private @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_10L8goodG2B2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc354)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc263)
    %2 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_10L8goodG2B2Ev.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc263)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc263)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc230)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc355)
    cir.scope {
      %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc266)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc234)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc234)
      cir.if %6 {
        %7 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc236)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc237)
        %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc238)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc238)
        %11 = cir.call @strcat(%8, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc236)
      } loc(#loc357)
    } loc(#loc356)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc359)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc243)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc244)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc245)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc360)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc246)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc247)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc361)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc248)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc362)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc253)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc254)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc255)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc364)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc257)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc258)
        } loc(#loc365)
      } loc(#loc363)
    } loc(#loc358)
    cir.return loc(#loc227)
  } loc(#loc353)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_104goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_10L8goodG2B1Ev() : () -> () loc(#loc261)
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_10L8goodG2B2Ev() : () -> () loc(#loc262)
    cir.return loc(#loc260)
  } loc(#loc366)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":181:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":181:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":154:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":154:37)
#loc5 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":63:5)
#loc6 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":63:37)
#loc7 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc8 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc13 = loc("/usr/include/arpa/inet.h":34:1)
#loc14 = loc("/usr/include/arpa/inet.h":34:47)
#loc15 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":94:53)
#loc16 = loc("/usr/include/netinet/in.h":402:1)
#loc17 = loc("/usr/include/netinet/in.h":403:40)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc21 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc22 = loc("/usr/include/string.h":226:1)
#loc23 = loc("/usr/include/string.h":227:50)
#loc24 = loc("/usr/include/unistd.h":358:1)
#loc25 = loc("/usr/include/unistd.h":358:27)
#loc26 = loc("/usr/include/fcntl.h":209:1)
#loc27 = loc("/usr/include/fcntl.h":209:56)
#loc28 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":60:1)
#loc29 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":144:1)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":62:5)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":62:12)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":64:12)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":64:5)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":65:5)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":134:5)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":65:8)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":66:5)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":67:9)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":133:9)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":72:13)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":72:17)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":73:13)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":73:32)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":74:13)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":74:19)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":75:13)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":75:36)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":76:13)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":76:41)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":76:30)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":76:37)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":77:13)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":122:21)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":78:13)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":121:13)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":87:40)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":87:49)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":87:62)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":87:33)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":87:17)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":87:73)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":88:17)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":91:17)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":88:21)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":88:38)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":89:17)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":90:21)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":92:24)
#loc69 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":92:25)
#loc70 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":92:34)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":92:37)
#loc72 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":92:51)
#loc73 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":92:17)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":92:52)
#loc75 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":93:38)
#loc76 = loc("/usr/include/netinet/in.h":249:5)
#loc77 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":93:17)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":94:43)
#loc79 = loc("/usr/include/netinet/in.h":251:20)
#loc80 = loc("/usr/include/netinet/in.h":33:15)
#loc81 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":94:17)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":94:63)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":95:42)
#loc84 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":95:36)
#loc85 = loc("/usr/include/netinet/in.h":250:15)
#loc86 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":95:17)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":95:50)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":96:17)
#loc89 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":99:17)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":96:29)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":96:62)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":96:63)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":96:72)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":96:86)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":96:21)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":96:92)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":97:17)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":98:21)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:35)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:59)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:66)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:64)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:50)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:73)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:76)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:87)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:92)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:107)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:117)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:118)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:121)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:30)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:17)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":103:122)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":104:17)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":107:17)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":104:21)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":104:35)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":104:48)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":104:51)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":104:65)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":105:17)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":106:21)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":109:61)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":109:17)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":109:22)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":109:32)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":109:45)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":109:56)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":109:57)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":111:34)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":111:40)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":111:27)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":111:17)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":111:44)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":112:17)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":115:17)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":112:21)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":113:17)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":114:32)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":114:22)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":114:21)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":116:34)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":116:40)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":116:27)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":116:17)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":116:44)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":117:17)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":120:17)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":117:21)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":118:17)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":119:32)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":119:22)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":119:21)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":122:20)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":123:13)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":126:13)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":123:17)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":123:34)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":124:13)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":125:30)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":125:17)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":135:5)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":143:5)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":136:9)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":136:13)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":138:25)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":138:31)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":138:38)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":138:47)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":138:55)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":138:20)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":138:9)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":138:63)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":139:9)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":142:9)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":139:13)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":139:26)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":139:25)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":140:9)
#loc181 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":141:19)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":141:13)
#loc183 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc184 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc185 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc186 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":159:19)
#loc188 = loc("/usr/include/string.h":149:1)
#loc189 = loc("/usr/include/string.h":150:14)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":164:22)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":151:1)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":175:1)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":153:5)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":153:12)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":155:12)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":155:5)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":156:5)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":165:5)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":156:8)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":157:5)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":160:5)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":162:5)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":159:9)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":164:9)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":164:16)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":166:5)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":174:5)
#loc208 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":167:9)
#loc209 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":167:13)
#loc210 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":169:25)
#loc211 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":169:31)
#loc212 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":169:38)
#loc213 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":169:47)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":169:55)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":169:20)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":169:9)
#loc217 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":169:63)
#loc218 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":170:9)
#loc219 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":173:9)
#loc220 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":170:13)
#loc221 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":170:26)
#loc222 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":170:25)
#loc223 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":171:9)
#loc224 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":172:19)
#loc225 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":172:13)
#loc226 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":178:1)
#loc227 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":197:1)
#loc228 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":180:5)
#loc229 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":180:12)
#loc230 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":182:12)
#loc231 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":182:5)
#loc232 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":183:5)
#loc233 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":187:5)
#loc234 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":183:8)
#loc235 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":184:5)
#loc236 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":186:9)
#loc237 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":186:16)
#loc238 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":186:22)
#loc239 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":188:5)
#loc240 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":196:5)
#loc241 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":189:9)
#loc242 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":189:13)
#loc243 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":191:25)
#loc244 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":191:31)
#loc245 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":191:38)
#loc246 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":191:47)
#loc247 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":191:55)
#loc248 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":191:20)
#loc249 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":191:9)
#loc250 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":191:63)
#loc251 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":192:9)
#loc252 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":195:9)
#loc253 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":192:13)
#loc254 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":192:26)
#loc255 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":192:25)
#loc256 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":193:9)
#loc257 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":194:19)
#loc258 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":194:13)
#loc259 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":199:1)
#loc260 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":203:1)
#loc261 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":201:5)
#loc262 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_10.cpp":202:5)
#loc263 = loc(fused[#loc1, #loc2])
#loc264 = loc(fused[#loc3, #loc4])
#loc265 = loc(fused[#loc5, #loc6])
#loc266 = loc(fused[#loc7, #loc8])
#loc267 = loc(fused[#loc9, #loc10])
#loc268 = loc(fused[#loc11, #loc12])
#loc269 = loc(fused[#loc13, #loc14])
#loc270 = loc(fused[#loc16, #loc17])
#loc271 = loc(fused[#loc18, #loc19])
#loc272 = loc(fused[#loc20, #loc21])
#loc273 = loc(fused[#loc22, #loc23])
#loc274 = loc(fused[#loc24, #loc25])
#loc275 = loc(fused[#loc26, #loc27])
#loc276 = loc(fused[#loc28, #loc29])
#loc277 = loc(fused[#loc30, #loc31])
#loc278 = loc(fused[#loc33, #loc32])
#loc279 = loc(fused[#loc34, #loc35])
#loc280 = loc(fused[#loc37, #loc35])
#loc281 = loc(fused[#loc38, #loc39])
#loc282 = loc(fused[#loc40, #loc41])
#loc283 = loc(fused[#loc42, #loc43])
#loc284 = loc(fused[#loc44, #loc45])
#loc285 = loc(fused[#loc46, #loc47])
#loc286 = loc(fused[#loc48, #loc49])
#loc287 = loc(fused[#loc52, #loc53])
#loc288 = loc(fused[#loc54, #loc55])
#loc289 = loc(fused[#loc60, #loc61])
#loc290 = loc(fused[#loc62, #loc63])
#loc291 = loc(fused[#loc64, #loc65])
#loc292 = loc(fused[#loc66, #loc63])
#loc293 = loc(fused[#loc68, #loc69])
#loc294 = loc(fused[#loc71, #loc72])
#loc295 = loc(fused[#loc73, #loc74])
#loc296 = loc(fused[#loc77, #loc75])
#loc297 = loc(fused[#loc81, #loc82])
#loc298 = loc(fused[#loc86, #loc87])
#loc299 = loc(fused[#loc88, #loc89])
#loc300 = loc(fused[#loc91, #loc92])
#loc301 = loc(fused[#loc93, #loc94])
#loc302 = loc(fused[#loc95, #loc96])
#loc303 = loc(fused[#loc97, #loc89])
#loc304 = loc(fused[#loc103, #loc104])
#loc305 = loc(fused[#loc105, #loc106])
#loc306 = loc(fused[#loc107, #loc108])
#loc307 = loc(fused[#loc107, #loc109])
#loc308 = loc(fused[#loc105, #loc110])
#loc309 = loc(fused[#loc113, #loc114])
#loc310 = loc(fused[#loc115, #loc116])
#loc311 = loc(fused[#loc117, #loc118])
#loc312 = loc(fused[#loc120, #loc121])
#loc313 = loc(fused[#loc122, #loc116])
#loc314 = loc(fused[#loc128, #loc129])
#loc315 = loc(fused[#loc127, #loc129])
#loc316 = loc(fused[#loc126, #loc129])
#loc317 = loc(fused[#loc125, #loc124])
#loc318 = loc(fused[#loc134, #loc135])
#loc319 = loc(fused[#loc136, #loc137])
#loc320 = loc(fused[#loc139, #loc137])
#loc321 = loc(fused[#loc142, #loc140])
#loc322 = loc(fused[#loc146, #loc147])
#loc323 = loc(fused[#loc148, #loc149])
#loc324 = loc(fused[#loc151, #loc149])
#loc325 = loc(fused[#loc154, #loc152])
#loc326 = loc(fused[#loc156, #loc157])
#loc327 = loc(fused[#loc158, #loc159])
#loc328 = loc(fused[#loc160, #loc157])
#loc329 = loc(fused[#loc163, #loc164])
#loc330 = loc(fused[#loc165, #loc166])
#loc331 = loc(fused[#loc168, #loc169])
#loc332 = loc(fused[#loc170, #loc171])
#loc333 = loc(fused[#loc173, #loc174])
#loc334 = loc(fused[#loc175, #loc176])
#loc335 = loc(fused[#loc177, #loc178])
#loc336 = loc(fused[#loc180, #loc176])
#loc337 = loc(fused[#loc183, #loc184])
#loc338 = loc(fused[#loc185, #loc186])
#loc339 = loc(fused[#loc188, #loc189])
#loc340 = loc(fused[#loc191, #loc192])
#loc341 = loc(fused[#loc193, #loc194])
#loc342 = loc(fused[#loc196, #loc195])
#loc343 = loc(fused[#loc197, #loc198])
#loc344 = loc(fused[#loc200, #loc201, #loc202, #loc198])
#loc345 = loc(fused[#loc206, #loc207])
#loc346 = loc(fused[#loc208, #loc209])
#loc347 = loc(fused[#loc211, #loc212])
#loc348 = loc(fused[#loc213, #loc214])
#loc349 = loc(fused[#loc216, #loc217])
#loc350 = loc(fused[#loc218, #loc219])
#loc351 = loc(fused[#loc220, #loc221])
#loc352 = loc(fused[#loc223, #loc219])
#loc353 = loc(fused[#loc226, #loc227])
#loc354 = loc(fused[#loc228, #loc229])
#loc355 = loc(fused[#loc231, #loc230])
#loc356 = loc(fused[#loc232, #loc233])
#loc357 = loc(fused[#loc235, #loc233])
#loc358 = loc(fused[#loc239, #loc240])
#loc359 = loc(fused[#loc241, #loc242])
#loc360 = loc(fused[#loc244, #loc245])
#loc361 = loc(fused[#loc246, #loc247])
#loc362 = loc(fused[#loc249, #loc250])
#loc363 = loc(fused[#loc251, #loc252])
#loc364 = loc(fused[#loc253, #loc254])
#loc365 = loc(fused[#loc256, #loc252])
#loc366 = loc(fused[#loc259, #loc260])
