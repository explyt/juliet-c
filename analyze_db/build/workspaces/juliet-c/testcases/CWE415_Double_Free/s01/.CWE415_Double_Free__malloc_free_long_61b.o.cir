!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE415_Double_Free__malloc_free_long_61b.c":24:59)
#loc10 = loc("CWE415_Double_Free__malloc_free_long_61b.c":24:66)
#loc32 = loc("CWE415_Double_Free__malloc_free_long_61b.c":38:63)
#loc33 = loc("CWE415_Double_Free__malloc_free_long_61b.c":38:70)
#loc53 = loc("CWE415_Double_Free__malloc_free_long_61b.c":47:63)
#loc54 = loc("CWE415_Double_Free__malloc_free_long_61b.c":47:70)
#loc78 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc32, #loc33])
#loc98 = loc(fused[#loc53, #loc54])
module @"/workspaces/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc74)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc75)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc76)
  cir.func @CWE415_Double_Free__malloc_free_long_61b_badSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc78)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc11)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc12)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc13)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc13)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc79)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc80)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc12)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc81)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc20)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc21)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc84)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc85)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc23)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc25)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc26)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc26)
    cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc27)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
    cir.store %18, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc86)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc86)
    cir.return %19 : !cir.ptr<!s64i> loc(#loc86)
  } loc(#loc77)
  cir.func @CWE415_Double_Free__malloc_free_long_61b_goodG2BSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc32, #loc33])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc88)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc31)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc34)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc35)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc36)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc36)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc89)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc90)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc35)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc91)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc44)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc44)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc94)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc95)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc46)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc48)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc46)
    cir.br ^bb3 loc(#loc42)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc42)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc49)
    cir.store %16, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc96)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc96)
    cir.return %17 : !cir.ptr<!s64i> loc(#loc96)
  } loc(#loc87)
  cir.func @CWE415_Double_Free__malloc_free_long_61b_goodB2GSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc53, #loc54])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc52)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc55)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc56)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc57)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc57)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc99)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc100)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc56)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc101)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc102)
    cir.br ^bb1 loc(#loc103)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc64)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc65)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s64i>, !cir.bool loc(#loc104)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc105)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc67)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc69)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc67)
    cir.br ^bb3 loc(#loc63)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc70)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc70)
    cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc71)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc72)
    cir.store %18, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc106)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc106)
    cir.return %19 : !cir.ptr<!s64i> loc(#loc106)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE415_Double_Free__malloc_free_long_61b.c":24:1)
#loc8 = loc("CWE415_Double_Free__malloc_free_long_61b.c":31:1)
#loc11 = loc("CWE415_Double_Free__malloc_free_long_61b.c":25:1)
#loc12 = loc("CWE415_Double_Free__malloc_free_long_61b.c":26:20)
#loc13 = loc("CWE415_Double_Free__malloc_free_long_61b.c":26:27)
#loc14 = loc("CWE415_Double_Free__malloc_free_long_61b.c":26:31)
#loc15 = loc("CWE415_Double_Free__malloc_free_long_61b.c":26:42)
#loc16 = loc("CWE415_Double_Free__malloc_free_long_61b.c":26:43)
#loc17 = loc("CWE415_Double_Free__malloc_free_long_61b.c":26:5)
#loc18 = loc("CWE415_Double_Free__malloc_free_long_61b.c":27:5)
#loc19 = loc("CWE415_Double_Free__malloc_free_long_61b.c":27:33)
#loc20 = loc("CWE415_Double_Free__malloc_free_long_61b.c":27:9)
#loc21 = loc("CWE415_Double_Free__malloc_free_long_61b.c":27:17)
#loc22 = loc("CWE415_Double_Free__malloc_free_long_61b.c":27:23)
#loc23 = loc("CWE415_Double_Free__malloc_free_long_61b.c":27:24)
#loc24 = loc("CWE415_Double_Free__malloc_free_long_61b.c":27:30)
#loc25 = loc("CWE415_Double_Free__malloc_free_long_61b.c":27:29)
#loc26 = loc("CWE415_Double_Free__malloc_free_long_61b.c":29:10)
#loc27 = loc("CWE415_Double_Free__malloc_free_long_61b.c":29:5)
#loc28 = loc("CWE415_Double_Free__malloc_free_long_61b.c":30:12)
#loc29 = loc("CWE415_Double_Free__malloc_free_long_61b.c":30:5)
#loc30 = loc("CWE415_Double_Free__malloc_free_long_61b.c":38:1)
#loc31 = loc("CWE415_Double_Free__malloc_free_long_61b.c":44:1)
#loc34 = loc("CWE415_Double_Free__malloc_free_long_61b.c":39:1)
#loc35 = loc("CWE415_Double_Free__malloc_free_long_61b.c":40:20)
#loc36 = loc("CWE415_Double_Free__malloc_free_long_61b.c":40:27)
#loc37 = loc("CWE415_Double_Free__malloc_free_long_61b.c":40:31)
#loc38 = loc("CWE415_Double_Free__malloc_free_long_61b.c":40:42)
#loc39 = loc("CWE415_Double_Free__malloc_free_long_61b.c":40:43)
#loc40 = loc("CWE415_Double_Free__malloc_free_long_61b.c":40:5)
#loc41 = loc("CWE415_Double_Free__malloc_free_long_61b.c":41:5)
#loc42 = loc("CWE415_Double_Free__malloc_free_long_61b.c":41:33)
#loc43 = loc("CWE415_Double_Free__malloc_free_long_61b.c":41:9)
#loc44 = loc("CWE415_Double_Free__malloc_free_long_61b.c":41:17)
#loc45 = loc("CWE415_Double_Free__malloc_free_long_61b.c":41:23)
#loc46 = loc("CWE415_Double_Free__malloc_free_long_61b.c":41:24)
#loc47 = loc("CWE415_Double_Free__malloc_free_long_61b.c":41:30)
#loc48 = loc("CWE415_Double_Free__malloc_free_long_61b.c":41:29)
#loc49 = loc("CWE415_Double_Free__malloc_free_long_61b.c":43:12)
#loc50 = loc("CWE415_Double_Free__malloc_free_long_61b.c":43:5)
#loc51 = loc("CWE415_Double_Free__malloc_free_long_61b.c":47:1)
#loc52 = loc("CWE415_Double_Free__malloc_free_long_61b.c":54:1)
#loc55 = loc("CWE415_Double_Free__malloc_free_long_61b.c":48:1)
#loc56 = loc("CWE415_Double_Free__malloc_free_long_61b.c":49:20)
#loc57 = loc("CWE415_Double_Free__malloc_free_long_61b.c":49:27)
#loc58 = loc("CWE415_Double_Free__malloc_free_long_61b.c":49:31)
#loc59 = loc("CWE415_Double_Free__malloc_free_long_61b.c":49:42)
#loc60 = loc("CWE415_Double_Free__malloc_free_long_61b.c":49:43)
#loc61 = loc("CWE415_Double_Free__malloc_free_long_61b.c":49:5)
#loc62 = loc("CWE415_Double_Free__malloc_free_long_61b.c":50:5)
#loc63 = loc("CWE415_Double_Free__malloc_free_long_61b.c":50:33)
#loc64 = loc("CWE415_Double_Free__malloc_free_long_61b.c":50:9)
#loc65 = loc("CWE415_Double_Free__malloc_free_long_61b.c":50:17)
#loc66 = loc("CWE415_Double_Free__malloc_free_long_61b.c":50:23)
#loc67 = loc("CWE415_Double_Free__malloc_free_long_61b.c":50:24)
#loc68 = loc("CWE415_Double_Free__malloc_free_long_61b.c":50:30)
#loc69 = loc("CWE415_Double_Free__malloc_free_long_61b.c":50:29)
#loc70 = loc("CWE415_Double_Free__malloc_free_long_61b.c":52:10)
#loc71 = loc("CWE415_Double_Free__malloc_free_long_61b.c":52:5)
#loc72 = loc("CWE415_Double_Free__malloc_free_long_61b.c":53:12)
#loc73 = loc("CWE415_Double_Free__malloc_free_long_61b.c":53:5)
#loc74 = loc(fused[#loc1, #loc2])
#loc75 = loc(fused[#loc3, #loc4])
#loc76 = loc(fused[#loc5, #loc6])
#loc77 = loc(fused[#loc7, #loc8])
#loc79 = loc(fused[#loc14, #loc15])
#loc80 = loc(fused[#loc13, #loc15])
#loc81 = loc(fused[#loc12, #loc16])
#loc82 = loc(fused[#loc17, #loc16])
#loc83 = loc(fused[#loc18, #loc19])
#loc84 = loc(fused[#loc20, #loc21])
#loc85 = loc(fused[#loc22, #loc19])
#loc86 = loc(fused[#loc29, #loc28])
#loc87 = loc(fused[#loc30, #loc31])
#loc89 = loc(fused[#loc37, #loc38])
#loc90 = loc(fused[#loc36, #loc38])
#loc91 = loc(fused[#loc35, #loc39])
#loc92 = loc(fused[#loc40, #loc39])
#loc93 = loc(fused[#loc41, #loc42])
#loc94 = loc(fused[#loc43, #loc44])
#loc95 = loc(fused[#loc45, #loc42])
#loc96 = loc(fused[#loc50, #loc49])
#loc97 = loc(fused[#loc51, #loc52])
#loc99 = loc(fused[#loc58, #loc59])
#loc100 = loc(fused[#loc57, #loc59])
#loc101 = loc(fused[#loc56, #loc60])
#loc102 = loc(fused[#loc61, #loc60])
#loc103 = loc(fused[#loc62, #loc63])
#loc104 = loc(fused[#loc64, #loc65])
#loc105 = loc(fused[#loc66, #loc63])
#loc106 = loc(fused[#loc73, #loc72])
