!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":24:60)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":24:77)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":44:64)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":44:81)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":59:64)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":59:81)
#loc136 = loc(fused[#loc15, #loc16])
#loc148 = loc(fused[#loc54, #loc55])
#loc160 = loc(fused[#loc94, #loc95])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc129)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc130)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc131)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc134)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_badSink(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc136)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc137)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc19)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc20)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc21)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!void>>, %3 : !s32i), !cir.ptr<!cir.ptr<!void>> loc(#loc18)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
    cir.store %5, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc137)
    cir.scope {
      %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc139)
      %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc140)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc28)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
      %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc28)
      cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc139)
      %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc30)
      %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc31)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc32)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc32)
      %16 = cir.binop(add, %13, %15) : !u64i loc(#loc141)
      %17 = cir.const #cir.int<4> : !u64i loc(#loc142)
      %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc30)
      cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc140)
      cir.scope {
        %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc37)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
        %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc144)
        cir.if %30 {
          %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc40)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc42)
          cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
        } loc(#loc145)
      } loc(#loc143)
      %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc43)
      %21 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc44)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc44)
      %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc45)
      %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc46)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc46)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc48)
      %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc49)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc48)
    } loc(#loc138)
    cir.return loc(#loc14)
  } loc(#loc135)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc146)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc54, #loc55])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc149)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc58)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc59)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc60)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!void>>, %3 : !s32i), !cir.ptr<!cir.ptr<!void>> loc(#loc57)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
    cir.store %5, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc149)
    cir.scope {
      %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc151)
      %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc152)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc67)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc68)
      %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc67)
      cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc151)
      %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc69)
      %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc70)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc71)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc71)
      %16 = cir.binop(add, %13, %15) : !u64i loc(#loc153)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc72)
      %19 = cir.call @calloc(%16, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
      cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc152)
      cir.scope {
        %30 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc75)
        %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
        %32 = cir.cmp(eq, %30, %31) : !cir.ptr<!void>, !cir.bool loc(#loc155)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc78)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc80)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
        } loc(#loc156)
      } loc(#loc154)
      %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc81)
      %21 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
      %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc83)
      %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc81)
      %26 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc84)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc84)
      cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      %28 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc86)
      %29 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc86)
    } loc(#loc150)
    cir.return loc(#loc53)
  } loc(#loc147)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc157)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc158)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc94, #loc95])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc161)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc98)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc99)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc100)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!void>>, %3 : !s32i), !cir.ptr<!cir.ptr<!void>> loc(#loc97)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc99)
    cir.store %5, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc161)
    cir.scope {
      %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc163)
      %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc164)
      %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc107)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc108)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
      %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc107)
      cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc163)
      %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc109)
      %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc110)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc111)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc111)
      %16 = cir.binop(add, %13, %15) : !u64i loc(#loc165)
      %17 = cir.const #cir.int<4> : !u64i loc(#loc166)
      %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
      cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc164)
      cir.scope {
        %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc116)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc117)
        %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc168)
        cir.if %30 {
          %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc119)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc120)
          %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc121)
          cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc119)
        } loc(#loc169)
      } loc(#loc167)
      %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc122)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
      %21 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc123)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc123)
      %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc124)
      %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc125)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc125)
      cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc126)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc127)
      %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc128)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc127)
    } loc(#loc162)
    cir.return loc(#loc93)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdlib.h":675:1)
#loc4 = loc("/usr/include/stdlib.h":676:14)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":37:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":27:30)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":25:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":27:19)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":27:29)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":28:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":36:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":30:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":30:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":31:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":31:64)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":30:26)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":30:41)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":31:31)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":31:38)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":31:46)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":31:49)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":31:63)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":32:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":32:37)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":32:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":32:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":32:27)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":32:28)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":32:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":32:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":33:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":33:28)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":33:15)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":34:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":34:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":35:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":35:14)
#loc50 = loc("/usr/include/string.h":141:1)
#loc51 = loc("/usr/include/string.h":142:14)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":44:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":56:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":46:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":46:30)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":45:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":46:19)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":46:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":47:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":55:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":49:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":49:45)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":50:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":50:50)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":49:26)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":49:41)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":50:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":50:38)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":50:46)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":50:49)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":51:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":51:37)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":51:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":51:21)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":51:27)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":51:28)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":51:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":51:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":52:15)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":52:22)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":52:28)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":53:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":53:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":54:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":54:14)
#loc88 = loc("/usr/include/wchar.h":247:1)
#loc89 = loc("/usr/include/wchar.h":247:51)
#loc90 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc91 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":59:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":71:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":61:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":61:30)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":60:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":61:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":61:29)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":62:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":70:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":64:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":64:48)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":65:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":65:64)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":64:26)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":64:44)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":65:31)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":65:38)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":65:46)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":65:49)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":65:63)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":66:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":66:37)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":66:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":66:21)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":66:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":66:28)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":66:34)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":66:33)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":67:22)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":67:28)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":67:15)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":68:31)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":68:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":69:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c":69:14)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc5, #loc6])
#loc132 = loc(fused[#loc7, #loc8])
#loc133 = loc(fused[#loc9, #loc10])
#loc134 = loc(fused[#loc11, #loc12])
#loc135 = loc(fused[#loc13, #loc14])
#loc137 = loc(fused[#loc17, #loc18])
#loc138 = loc(fused[#loc22, #loc23])
#loc139 = loc(fused[#loc24, #loc25])
#loc140 = loc(fused[#loc26, #loc27])
#loc141 = loc(fused[#loc31, #loc32])
#loc142 = loc(fused[#loc33, #loc34])
#loc143 = loc(fused[#loc35, #loc36])
#loc144 = loc(fused[#loc37, #loc38])
#loc145 = loc(fused[#loc39, #loc36])
#loc146 = loc(fused[#loc50, #loc51])
#loc147 = loc(fused[#loc52, #loc53])
#loc149 = loc(fused[#loc56, #loc57])
#loc150 = loc(fused[#loc61, #loc62])
#loc151 = loc(fused[#loc63, #loc64])
#loc152 = loc(fused[#loc65, #loc66])
#loc153 = loc(fused[#loc70, #loc71])
#loc154 = loc(fused[#loc73, #loc74])
#loc155 = loc(fused[#loc75, #loc76])
#loc156 = loc(fused[#loc77, #loc74])
#loc157 = loc(fused[#loc88, #loc89])
#loc158 = loc(fused[#loc90, #loc91])
#loc159 = loc(fused[#loc92, #loc93])
#loc161 = loc(fused[#loc96, #loc97])
#loc162 = loc(fused[#loc101, #loc102])
#loc163 = loc(fused[#loc103, #loc104])
#loc164 = loc(fused[#loc105, #loc106])
#loc165 = loc(fused[#loc110, #loc111])
#loc166 = loc(fused[#loc112, #loc113])
#loc167 = loc(fused[#loc114, #loc115])
#loc168 = loc(fused[#loc116, #loc117])
#loc169 = loc(fused[#loc118, #loc115])
