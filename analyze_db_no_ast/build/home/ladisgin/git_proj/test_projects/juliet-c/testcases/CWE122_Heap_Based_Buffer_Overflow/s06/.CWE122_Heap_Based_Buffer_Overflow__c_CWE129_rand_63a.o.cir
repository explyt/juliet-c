!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc45)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_badSink(!cir.ptr<!s32i>) loc(#loc46)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc48)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc12)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc12)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc12)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc12)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc12)
      cir.yield %20 : !u32i loc(#loc12)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc12)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc12)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc12)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc12)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc12)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc12)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc12)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc12)
      cir.yield %24 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_badSink(%0) : (!cir.ptr<!s32i>) -> () loc(#loc14)
    cir.return loc(#loc6)
  } loc(#loc47)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc52)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc17)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc53)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    cir.return loc(#loc16)
  } loc(#loc51)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodG2BSink(!cir.ptr<!s32i>) loc(#loc54)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc56)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc28)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc30)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodG2BSink(%0) : (!cir.ptr<!s32i>) -> () loc(#loc32)
    cir.return loc(#loc24)
  } loc(#loc55)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodB2GSink(!cir.ptr<!s32i>) loc(#loc59)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc61)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc40)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc42)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc42)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc42)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc42)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc42)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc42)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc42)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc42)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc42)
      cir.yield %20 : !u32i loc(#loc42)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc42)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc42)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc42)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc42)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc42)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc42)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc42)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc42)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc42)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc42)
      cir.yield %24 : !u32i loc(#loc42)
    }) : (!cir.bool) -> !u32i loc(#loc42)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc42)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodB2GSink(%0) : (!cir.ptr<!s32i>) -> () loc(#loc44)
    cir.return loc(#loc36)
  } loc(#loc60)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":23:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":23:80)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":25:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":33:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":27:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":27:9)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":29:13)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":29:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":31:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":32:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":66:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":70:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":68:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":68:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":69:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":69:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":40:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":40:81)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":42:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":51:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":44:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":44:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":46:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":46:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":46:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":49:12)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":49:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":50:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":54:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":54:81)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":56:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":64:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":58:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":58:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":60:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":60:12)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":60:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":62:12)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":62:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c":63:5)
#loc45 = loc(fused[#loc1, #loc2])
#loc46 = loc(fused[#loc3, #loc4])
#loc47 = loc(fused[#loc5, #loc6])
#loc48 = loc(fused[#loc7, #loc8])
#loc49 = loc(fused[#loc11, #loc9])
#loc50 = loc(fused[#loc13, #loc12])
#loc51 = loc(fused[#loc15, #loc16])
#loc52 = loc(fused[#loc17, #loc18])
#loc53 = loc(fused[#loc19, #loc20])
#loc54 = loc(fused[#loc21, #loc22])
#loc55 = loc(fused[#loc23, #loc24])
#loc56 = loc(fused[#loc25, #loc26])
#loc57 = loc(fused[#loc29, #loc27])
#loc58 = loc(fused[#loc31, #loc30])
#loc59 = loc(fused[#loc33, #loc34])
#loc60 = loc(fused[#loc35, #loc36])
#loc61 = loc(fused[#loc37, #loc38])
#loc62 = loc(fused[#loc41, #loc39])
#loc63 = loc(fused[#loc43, #loc42])
