!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc13 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":33:12)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":56:12)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":70:12)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_22a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global external dsolocal @CWE190_Integer_Overflow__int_rand_preinc_22_badGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc75)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc76)
  cir.func private @CWE190_Integer_Overflow__int_rand_preinc_22_badSink(!s32i) loc(#loc77)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_22_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc13)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc13)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc13)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc13)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc13)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc13)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc13)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc13)
    cir.br ^bb3(%17 : !u32i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc13)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc13)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc13)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc13)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc13)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc13)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc13)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc13)
    cir.br ^bb3(%33 : !u32i) loc(#loc13)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":33:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc13)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %37 = cir.get_global @CWE190_Integer_Overflow__int_rand_preinc_22_badGlobal : !cir.ptr<!s32i> loc(#loc75)
    cir.store %36, %37 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_22_badSink(%38) : (!s32i) -> () loc(#loc18)
    cir.return loc(#loc8)
  } loc(#loc78)
  cir.global external dsolocal @CWE190_Integer_Overflow__int_rand_preinc_22_goodB2G1Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc83)
  cir.global external dsolocal @CWE190_Integer_Overflow__int_rand_preinc_22_goodB2G2Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc84)
  cir.global external dsolocal @CWE190_Integer_Overflow__int_rand_preinc_22_goodG2BGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc85)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_22_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc88)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc89)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc26)
  } loc(#loc86)
  cir.func private @CWE190_Integer_Overflow__int_rand_preinc_22_goodB2G1Sink(!s32i) loc(#loc90)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc39)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc41)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc41)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc41)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc41)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc41)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc41)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc41)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc41)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc41)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc41)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc41)
    cir.br ^bb3(%17 : !u32i) loc(#loc41)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc41)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc41)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc41)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc41)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc41)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc41)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc41)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc41)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc41)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc41)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc41)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc41)
    cir.br ^bb3(%33 : !u32i) loc(#loc41)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":56:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc41)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc41)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %37 = cir.get_global @CWE190_Integer_Overflow__int_rand_preinc_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc83)
    cir.store %36, %37 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_22_goodB2G1Sink(%38) : (!s32i) -> () loc(#loc46)
    cir.return loc(#loc36)
  } loc(#loc91)
  cir.func private @CWE190_Integer_Overflow__int_rand_preinc_22_goodB2G2Sink(!s32i) loc(#loc96)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc55)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc55)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc55)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc55)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc55)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc55)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc55)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc55)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc55)
    cir.br ^bb3(%17 : !u32i) loc(#loc55)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc55)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc55)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc55)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc55)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc55)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc55)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc55)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc55)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc55)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc55)
    cir.br ^bb3(%33 : !u32i) loc(#loc55)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":70:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc55)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %37 = cir.get_global @CWE190_Integer_Overflow__int_rand_preinc_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc84)
    cir.store %36, %37 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_22_goodB2G2Sink(%38) : (!s32i) -> () loc(#loc60)
    cir.return loc(#loc50)
  } loc(#loc97)
  cir.func private @CWE190_Integer_Overflow__int_rand_preinc_22_goodG2BSink(!s32i) loc(#loc102)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc69)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %4 = cir.get_global @CWE190_Integer_Overflow__int_rand_preinc_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc85)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_22_goodG2BSink(%5) : (!s32i) -> () loc(#loc74)
    cir.return loc(#loc64)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_22a.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":23:61)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":25:66)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":27:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":36:1)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":29:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":31:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":34:61)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":34:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":35:57)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":35:5)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":43:1)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":43:66)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":44:1)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":44:66)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":45:1)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":45:65)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":89:1)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":94:1)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":91:5)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":91:14)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":92:5)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":92:14)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":93:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":93:13)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":48:1)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":48:71)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":50:1)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":59:1)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":52:5)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":52:9)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":54:12)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":54:5)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":56:5)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":57:66)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":57:5)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":58:62)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":58:5)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":62:1)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":62:71)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":64:1)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":73:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":66:5)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":66:9)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":68:12)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":68:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":70:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":71:66)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":71:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":72:62)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":72:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":76:1)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":76:70)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":78:1)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":87:1)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":80:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":80:9)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":82:12)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":82:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":84:12)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":84:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":85:65)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":85:5)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":86:61)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_preinc_22a.c":86:5)
#loc75 = loc(fused[#loc1, #loc2])
#loc76 = loc(fused[#loc3, #loc4])
#loc77 = loc(fused[#loc5, #loc6])
#loc78 = loc(fused[#loc7, #loc8])
#loc79 = loc(fused[#loc9, #loc10])
#loc80 = loc(fused[#loc12, #loc11])
#loc81 = loc(fused[#loc14, #loc13])
#loc82 = loc(fused[#loc16, #loc15])
#loc83 = loc(fused[#loc19, #loc20])
#loc84 = loc(fused[#loc21, #loc22])
#loc85 = loc(fused[#loc23, #loc24])
#loc86 = loc(fused[#loc25, #loc26])
#loc87 = loc(fused[#loc27, #loc28])
#loc88 = loc(fused[#loc29, #loc30])
#loc89 = loc(fused[#loc31, #loc32])
#loc90 = loc(fused[#loc33, #loc34])
#loc91 = loc(fused[#loc35, #loc36])
#loc92 = loc(fused[#loc37, #loc38])
#loc93 = loc(fused[#loc40, #loc39])
#loc94 = loc(fused[#loc42, #loc41])
#loc95 = loc(fused[#loc44, #loc43])
#loc96 = loc(fused[#loc47, #loc48])
#loc97 = loc(fused[#loc49, #loc50])
#loc98 = loc(fused[#loc51, #loc52])
#loc99 = loc(fused[#loc54, #loc53])
#loc100 = loc(fused[#loc56, #loc55])
#loc101 = loc(fused[#loc58, #loc57])
#loc102 = loc(fused[#loc61, #loc62])
#loc103 = loc(fused[#loc63, #loc64])
#loc104 = loc(fused[#loc65, #loc66])
#loc105 = loc(fused[#loc68, #loc67])
#loc106 = loc(fused[#loc70, #loc69])
#loc107 = loc(fused[#loc72, #loc71])
