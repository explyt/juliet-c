!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc81)
  cir.func private  @__isoc99_scanf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc82)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_scanf_11_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc85)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc85)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc10)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc10)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc88)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc89)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc88)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc88)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc18)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc89)
          %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc19)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
          %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
          %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc19)
        } loc(#loc87)
      } loc(#loc86)
    } loc(#loc84)
    cir.return loc(#loc7)
  } loc(#loc83)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_scanf_11_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc92)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc90)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc93)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc94)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc31)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"scanf failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private  @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc97)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc97)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc37)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc37)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc31)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc31)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc42)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc100)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc101)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc100)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc100)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc48)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
          cir.scope {
            %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc51)
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc52)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc52)
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
            %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc51)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc54)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc54)
            %15 = cir.cmp(eq, %12, %14) : !s32i, !s32i loc(#loc103)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc55)
            cir.if %16 {
              %17 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc32)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc57)
            } loc(#loc104)
          } loc(#loc102)
        } loc(#loc99)
      } loc(#loc98)
    } loc(#loc96)
    cir.return loc(#loc34)
  } loc(#loc95)
  cir.func no_proto internal private  @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc107)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc107)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc62)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc62)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc110)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc111)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc110)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc110)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc70)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc111)
          cir.scope {
            %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc73)
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc74)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc74)
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
            %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc73)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc76)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc76)
            %15 = cir.cmp(eq, %12, %14) : !s32i, !s32i loc(#loc113)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc77)
            cir.if %16 {
              %17 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc79)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc79)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc80)
            } loc(#loc114)
          } loc(#loc112)
        } loc(#loc109)
      } loc(#loc108)
    } loc(#loc106)
    cir.return loc(#loc59)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":466:1)
#loc4 = loc("/usr/include/stdio.h":466:12)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":34:19)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":24:1)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":37:1)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":26:5)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":36:5)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":26:8)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":26:26)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":27:5)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":28:9)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":35:9)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":31:13)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":31:36)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":32:13)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":32:27)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":34:13)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":34:29)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":86:1)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":90:1)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":88:5)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":88:11)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":89:5)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":89:11)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":49:19)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":61:27)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":44:1)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":65:1)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":46:5)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":64:5)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":46:8)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":46:27)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":47:5)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":50:5)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":52:5)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":49:9)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":53:9)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":63:9)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":56:13)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":56:36)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":57:13)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":57:27)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":59:13)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":62:13)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":59:17)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":59:23)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":59:33)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":59:42)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":59:39)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":60:13)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":61:17)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":68:1)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":84:1)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":70:5)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":83:5)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":70:8)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":70:26)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":71:5)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":72:9)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":82:9)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":75:13)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":75:36)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":76:13)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":76:27)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":78:13)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":81:13)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":78:17)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":78:23)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":78:33)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":78:42)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":78:39)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":79:13)
#loc79 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":80:27)
#loc80 = loc("CWE252_Unchecked_Return_Value__char_scanf_11.c":80:17)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc6, #loc7])
#loc84 = loc(fused[#loc8, #loc9])
#loc85 = loc(fused[#loc10, #loc11])
#loc86 = loc(fused[#loc12, #loc9])
#loc87 = loc(fused[#loc13, #loc14])
#loc88 = loc(fused[#loc15, #loc16])
#loc89 = loc(fused[#loc17, #loc18])
#loc90 = loc(fused[#loc21, #loc22])
#loc91 = loc(fused[#loc23, #loc24])
#loc92 = loc(fused[#loc25, #loc26])
#loc93 = loc(fused[#loc27, #loc28])
#loc94 = loc(fused[#loc29, #loc30])
#loc95 = loc(fused[#loc33, #loc34])
#loc96 = loc(fused[#loc35, #loc36])
#loc97 = loc(fused[#loc37, #loc38])
#loc98 = loc(fused[#loc39, #loc40, #loc41, #loc36])
#loc99 = loc(fused[#loc43, #loc44])
#loc100 = loc(fused[#loc45, #loc46])
#loc101 = loc(fused[#loc47, #loc48])
#loc102 = loc(fused[#loc49, #loc50])
#loc103 = loc(fused[#loc51, #loc54])
#loc104 = loc(fused[#loc56, #loc50])
#loc105 = loc(fused[#loc58, #loc59])
#loc106 = loc(fused[#loc60, #loc61])
#loc107 = loc(fused[#loc62, #loc63])
#loc108 = loc(fused[#loc64, #loc61])
#loc109 = loc(fused[#loc65, #loc66])
#loc110 = loc(fused[#loc67, #loc68])
#loc111 = loc(fused[#loc69, #loc70])
#loc112 = loc(fused[#loc71, #loc72])
#loc113 = loc(fused[#loc73, #loc76])
#loc114 = loc(fused[#loc78, #loc72])
