!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":234:10)
#loc139 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":234:14)
#loc140 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":234:20)
#loc141 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":234:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc342 = loc(fused[#loc138, #loc139])
#loc343 = loc(fused[#loc140, #loc141])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc290)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc291)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc292)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc293)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc294)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc295)
  cir.func private @close(!s32i) -> !s32i loc(#loc296)
  cir.func private @printIntLine(!s32i) loc(#loc297)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc299)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc300)
    %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc301)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc302)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc303)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc304)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc32)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    cir.goto "source" loc(#loc306)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc36)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc27)
    cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    cir.scope {
      cir.do {
        %13 = cir.const #cir.int<2> : !s32i loc(#loc39)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %15 = cir.const #cir.int<6> : !s32i loc(#loc41)
        %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc42)
        cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc308)
        cir.scope {
          %55 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          %56 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc48)
          %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc310)
          cir.if %58 {
            cir.break loc(#loc50)
          } loc(#loc311)
        } loc(#loc309)
        %17 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc312)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %19 = cir.const #cir.int<16> : !u64i loc(#loc313)
        cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc314)
        %20 = cir.const #cir.int<2> : !s32i loc(#loc58)
        %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc58)
        %22 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
        cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc315)
        %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
        %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
        %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc61)
        %26 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
        %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
        cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc316)
        %28 = cir.const #cir.int<27015> : !s32i loc(#loc66)
        %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc66)
        %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc67)
        %31 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
        cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc317)
        cir.scope {
          %55 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc73)
          %56 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc319)
          %57 = cir.const #cir.int<16> : !u64i loc(#loc320)
          %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc320)
          %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc78)
          %60 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc79)
          %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc321)
          cir.if %62 {
            cir.break loc(#loc81)
          } loc(#loc322)
        } loc(#loc318)
        %32 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc82)
        %33 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc83)
        %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
        %35 = cir.const #cir.int<3> : !s32i loc(#loc84)
        %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc84)
        %37 = cir.const #cir.int<4> : !u64i loc(#loc84)
        %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc84)
        %39 = cir.const #cir.int<2> : !s32i loc(#loc84)
        %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc84)
        %41 = cir.binop(add, %38, %40) : !u64i loc(#loc84)
        %42 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc85)
        %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc323)
        %45 = cir.const #cir.int<0> : !s32i loc(#loc86)
        %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc87)
        %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc87)
        cir.store %47, %1 : !s32i, !cir.ptr<!s32i> loc(#loc324)
        cir.scope {
          %55 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
          %56 = cir.const #cir.int<1> : !s32i loc(#loc93)
          %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc93)
          %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc326)
          %59 = cir.ternary(%58, true {
            %60 = cir.const #true loc(#loc94)
            cir.yield %60 : !cir.bool loc(#loc94)
          }, false {
            %60 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %61 = cir.const #cir.int<0> : !s32i loc(#loc96)
            %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc327)
            %63 = cir.ternary(%62, true {
              %64 = cir.const #true loc(#loc94)
              cir.yield %64 : !cir.bool loc(#loc94)
            }, false {
              %64 = cir.const #false loc(#loc94)
              cir.yield %64 : !cir.bool loc(#loc94)
            }) : (!cir.bool) -> !cir.bool loc(#loc94)
            cir.yield %63 : !cir.bool loc(#loc94)
          }) : (!cir.bool) -> !cir.bool loc(#loc94)
          cir.if %59 {
            cir.break loc(#loc98)
          } loc(#loc328)
        } loc(#loc325)
        %48 = cir.const #cir.int<0> : !s32i loc(#loc99)
        %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc99)
        %50 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        %51 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
        %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc101)
        cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc329)
        %53 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
        %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc103)
        cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc330)
        cir.yield loc(#loc38)
      } while {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc106)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
        cir.condition(%14) loc(#loc106)
      } loc(#loc307)
    } loc(#loc307)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc110)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc110)
      %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc332)
      cir.if %16 {
        %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc112)
        %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc113)
      } loc(#loc333)
    } loc(#loc331)
    cir.goto "sink" loc(#loc334)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc116)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc117)
    cir.store %11, %5 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc119)
    cir.return loc(#loc19)
  } loc(#loc298)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc336)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc122)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc337)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc124)
    cir.return loc(#loc121)
  } loc(#loc335)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc338)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc339)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc340)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc135)
  cir.func @main(%arg0: !s32i loc(fused[#loc138, #loc139]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc140, #loc141])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc342)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc343)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc137)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc142)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc143)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc144)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc144)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc145)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc132)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_square_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc344)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_square_18_good() : () -> () loc(#loc147)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc133)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc149)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc134)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc134)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_square_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc345)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_square_18_bad() : () -> () loc(#loc151)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc135)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc154)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc346)
    cir.return %17 : !s32i loc(#loc346)
  } loc(#loc341)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc157)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc349)
    %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc350)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc351)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc352)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc170)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc353)
    cir.goto "source" loc(#loc354)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc174)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc167)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc167)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    cir.scope {
      cir.do {
        %8 = cir.const #cir.int<2> : !s32i loc(#loc177)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc178)
        %10 = cir.const #cir.int<6> : !s32i loc(#loc179)
        %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc180)
        cir.store %11, %3 : !s32i, !cir.ptr<!s32i> loc(#loc356)
        cir.scope {
          %50 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc185)
          %51 = cir.const #cir.int<1> : !s32i loc(#loc186)
          %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc186)
          %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc358)
          cir.if %53 {
            cir.break loc(#loc188)
          } loc(#loc359)
        } loc(#loc357)
        %12 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc360)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc191)
        %14 = cir.const #cir.int<16> : !u64i loc(#loc361)
        cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc362)
        %15 = cir.const #cir.int<2> : !s32i loc(#loc196)
        %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc196)
        %17 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
        cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc363)
        %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc198)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc198)
        %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc199)
        %21 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
        %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
        cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc364)
        %23 = cir.const #cir.int<27015> : !s32i loc(#loc202)
        %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc202)
        %25 = cir.call @htons(%24) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc203)
        %26 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
        cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc365)
        cir.scope {
          %50 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc208)
          %51 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc367)
          %52 = cir.const #cir.int<16> : !u64i loc(#loc368)
          %53 = cir.cast(integral, %52 : !u64i), !u32i loc(#loc368)
          %54 = cir.call @connect(%50, %51, %53) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc213)
          %55 = cir.const #cir.int<1> : !s32i loc(#loc214)
          %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc214)
          %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc369)
          cir.if %57 {
            cir.break loc(#loc216)
          } loc(#loc370)
        } loc(#loc366)
        %27 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc217)
        %28 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc218)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc218)
        %30 = cir.const #cir.int<3> : !s32i loc(#loc219)
        %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc219)
        %32 = cir.const #cir.int<4> : !u64i loc(#loc219)
        %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc219)
        %34 = cir.const #cir.int<2> : !s32i loc(#loc219)
        %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc219)
        %36 = cir.binop(add, %33, %35) : !u64i loc(#loc219)
        %37 = cir.const #cir.int<1> : !s32i loc(#loc220)
        %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc220)
        %39 = cir.binop(sub, %36, %38) : !u64i loc(#loc371)
        %40 = cir.const #cir.int<0> : !s32i loc(#loc221)
        %41 = cir.call @recv(%27, %29, %39, %40) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc222)
        %42 = cir.cast(integral, %41 : !s64i), !s32i loc(#loc222)
        cir.store %42, %1 : !s32i, !cir.ptr<!s32i> loc(#loc372)
        cir.scope {
          %50 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc227)
          %51 = cir.const #cir.int<1> : !s32i loc(#loc228)
          %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc228)
          %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc374)
          %54 = cir.ternary(%53, true {
            %55 = cir.const #true loc(#loc229)
            cir.yield %55 : !cir.bool loc(#loc229)
          }, false {
            %55 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc230)
            %56 = cir.const #cir.int<0> : !s32i loc(#loc231)
            %57 = cir.cmp(eq, %55, %56) : !s32i, !cir.bool loc(#loc375)
            %58 = cir.ternary(%57, true {
              %59 = cir.const #true loc(#loc229)
              cir.yield %59 : !cir.bool loc(#loc229)
            }, false {
              %59 = cir.const #false loc(#loc229)
              cir.yield %59 : !cir.bool loc(#loc229)
            }) : (!cir.bool) -> !cir.bool loc(#loc229)
            cir.yield %58 : !cir.bool loc(#loc229)
          }) : (!cir.bool) -> !cir.bool loc(#loc229)
          cir.if %54 {
            cir.break loc(#loc233)
          } loc(#loc376)
        } loc(#loc373)
        %43 = cir.const #cir.int<0> : !s32i loc(#loc234)
        %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc234)
        %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc235)
        %46 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc236)
        %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc236)
        cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc377)
        %48 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc237)
        %49 = cir.call @atoi(%48) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc238)
        cir.store %49, %0 : !s32i, !cir.ptr<!s32i> loc(#loc378)
        cir.yield loc(#loc176)
      } while {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc241)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc241)
        cir.condition(%9) loc(#loc241)
      } loc(#loc355)
    } loc(#loc355)
    cir.scope {
      %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc244)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc245)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc245)
      %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc380)
      cir.if %11 {
        %12 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc247)
        %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc248)
      } loc(#loc381)
    } loc(#loc379)
    cir.goto "sink" loc(#loc382)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc251)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc254)
      %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc255)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc255)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc255)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc255)
      %13 = cir.cmp(gt, %8, %12) : !s32i, !cir.bool loc(#loc384)
      %14 = cir.ternary(%13, true {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc257)
        %16 = cir.abs %15 poison : !s32i loc(#loc258)
        %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc258)
        %18 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc259)
        %19 = cir.const #cir.int<2147483647> : !s32i loc(#loc260)
        %20 = cir.cast(int_to_float, %19 : !s32i), !cir.double loc(#loc260)
        %21 = cir.call @sqrt(%20) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc259)
        %22 = cir.cast(float_to_int, %21 : !cir.double), !s64i loc(#loc259)
        %23 = cir.cmp(lt, %17, %22) : !s64i, !cir.bool loc(#loc385)
        %24 = cir.ternary(%23, true {
          %25 = cir.const #true loc(#loc256)
          cir.yield %25 : !cir.bool loc(#loc256)
        }, false {
          %25 = cir.const #false loc(#loc256)
          cir.yield %25 : !cir.bool loc(#loc256)
        }) : (!cir.bool) -> !cir.bool loc(#loc256)
        cir.yield %24 : !cir.bool loc(#loc256)
      }, false {
        %15 = cir.const #false loc(#loc256)
        cir.yield %15 : !cir.bool loc(#loc256)
      }) : (!cir.bool) -> !cir.bool loc(#loc256)
      cir.if %14 {
        %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc387)
        %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc267)
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc266)
        %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc267)
        cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc387)
        %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc268)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc269)
      } else {
        %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc157)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc157)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc270)
      } loc(#loc386)
    } loc(#loc383)
    cir.return loc(#loc159)
  } loc(#loc347)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc389)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc390)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc277)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc391)
    cir.goto "source" loc(#loc392)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc281)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc282)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc393)
    cir.goto "sink" loc(#loc394)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc286)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc287)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc276)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc287)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc390)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc288)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc289)
    cir.return loc(#loc272)
  } loc(#loc388)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_18.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":79:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":46:1)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":116:1)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":48:5)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":48:9)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":58:9)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":58:13)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":59:9)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":59:28)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":60:9)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":60:32)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":61:9)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":61:41)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":113:9)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":113:29)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":50:12)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":50:5)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":51:5)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":51:10)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":52:1)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":62:9)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":97:17)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":72:36)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":72:45)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":72:58)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":72:29)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":72:13)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":72:69)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":73:13)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":76:13)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":73:17)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":73:34)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":74:13)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":75:17)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":77:20)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":77:21)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":77:30)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":77:33)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":77:47)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":77:13)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":77:48)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":78:34)
#loc59 = loc("/usr/include/netinet/in.h":249:5)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":78:13)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":79:39)
#loc62 = loc("/usr/include/netinet/in.h":251:20)
#loc63 = loc("/usr/include/netinet/in.h":33:15)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":79:13)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":79:59)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":80:38)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":80:32)
#loc68 = loc("/usr/include/netinet/in.h":250:15)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":80:13)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":80:46)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":81:13)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":84:13)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":81:25)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":81:58)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":81:59)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":81:68)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":81:82)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":81:17)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":81:88)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":82:13)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":83:17)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":87:31)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":87:46)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":87:59)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":87:77)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":87:80)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":87:26)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":87:13)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":87:81)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":88:13)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":91:13)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":88:17)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":88:31)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":88:44)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":88:47)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":88:61)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":89:13)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":90:17)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":93:39)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":93:25)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":93:13)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":95:25)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":95:20)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":95:13)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":95:36)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":97:16)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":98:9)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":101:9)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":98:13)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":98:30)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":99:9)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":100:26)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":100:13)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":109:5)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":109:10)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":110:1)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":113:22)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":114:22)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":114:9)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":219:1)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":223:1)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":221:5)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":221:13)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":222:5)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":222:13)
#loc126 = loc("/usr/include/stdlib.h":575:1)
#loc127 = loc("/usr/include/stdlib.h":575:41)
#loc128 = loc("/usr/include/time.h":76:1)
#loc129 = loc("/usr/include/time.h":76:38)
#loc130 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc131 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":239:15)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":241:15)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":244:15)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":246:15)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":234:1)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":249:1)
#loc142 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":235:1)
#loc143 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":237:27)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":237:22)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":237:5)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":239:5)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":240:5)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":240:64)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":241:5)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":244:5)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":245:5)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":245:63)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":246:5)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":248:12)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":248:5)
#loc156 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":196:19)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":123:1)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":198:1)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":125:5)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":125:9)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":135:9)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":135:13)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":136:9)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":136:28)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":137:9)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":137:32)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":138:9)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":138:41)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":127:12)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":127:5)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":128:5)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":128:10)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":129:1)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":139:9)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":174:17)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":149:36)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":149:45)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":149:58)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":149:29)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":149:13)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":149:69)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":150:13)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":153:13)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":150:17)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":150:34)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":151:13)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":152:17)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":154:20)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":154:21)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":154:30)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":154:33)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":154:47)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":154:13)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":154:48)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":155:34)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":155:13)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":156:49)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":156:39)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":156:13)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":156:59)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":157:38)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":157:32)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":157:13)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":157:46)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":158:13)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":161:13)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":158:25)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":158:58)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":158:59)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":158:68)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":158:82)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":158:17)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":158:88)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":159:13)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":160:17)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":164:31)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":164:46)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":164:59)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":164:77)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":164:80)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":164:26)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":164:13)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":164:81)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":165:13)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":168:13)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":165:17)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":165:31)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":165:44)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":165:47)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":165:61)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":166:13)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":167:17)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":170:39)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":170:25)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":170:13)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":172:25)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":172:20)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":172:13)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":172:36)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":174:16)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":175:9)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":178:9)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":175:13)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":175:30)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":176:9)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":177:26)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":177:13)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":186:5)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":186:10)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":187:1)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":189:5)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":197:5)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":189:9)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":189:16)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":189:24)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":189:31)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":189:27)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":189:45)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":189:58)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":189:65)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":190:5)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":193:5)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":195:5)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":191:9)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":191:29)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":191:22)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":192:22)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":192:9)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":196:9)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":201:1)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":217:1)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":203:5)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":203:9)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":214:9)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":214:29)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":205:12)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":205:5)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":206:5)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":206:10)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":207:1)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":209:12)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":209:5)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":210:5)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":210:10)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":211:1)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":214:22)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":215:22)
#loc289 = loc("CWE190_Integer_Overflow__int_connect_socket_square_18.c":215:9)
#loc290 = loc(fused[#loc1, #loc2])
#loc291 = loc(fused[#loc3, #loc4])
#loc292 = loc(fused[#loc6, #loc7])
#loc293 = loc(fused[#loc8, #loc9])
#loc294 = loc(fused[#loc10, #loc11])
#loc295 = loc(fused[#loc12, #loc13])
#loc296 = loc(fused[#loc14, #loc15])
#loc297 = loc(fused[#loc16, #loc17])
#loc298 = loc(fused[#loc18, #loc19])
#loc299 = loc(fused[#loc20, #loc21])
#loc300 = loc(fused[#loc22, #loc23])
#loc301 = loc(fused[#loc24, #loc25])
#loc302 = loc(fused[#loc26, #loc27])
#loc303 = loc(fused[#loc28, #loc29])
#loc304 = loc(fused[#loc30, #loc31])
#loc305 = loc(fused[#loc33, #loc32])
#loc306 = loc(fused[#loc34, #loc35])
#loc307 = loc(fused[#loc37, #loc38])
#loc308 = loc(fused[#loc43, #loc44])
#loc309 = loc(fused[#loc45, #loc46])
#loc310 = loc(fused[#loc47, #loc48])
#loc311 = loc(fused[#loc49, #loc46])
#loc312 = loc(fused[#loc51, #loc52])
#loc313 = loc(fused[#loc54, #loc55])
#loc314 = loc(fused[#loc56, #loc57])
#loc315 = loc(fused[#loc60, #loc58])
#loc316 = loc(fused[#loc64, #loc65])
#loc317 = loc(fused[#loc69, #loc70])
#loc318 = loc(fused[#loc71, #loc72])
#loc319 = loc(fused[#loc74, #loc75])
#loc320 = loc(fused[#loc76, #loc77])
#loc321 = loc(fused[#loc78, #loc79])
#loc322 = loc(fused[#loc80, #loc72])
#loc323 = loc(fused[#loc84, #loc85])
#loc324 = loc(fused[#loc88, #loc89])
#loc325 = loc(fused[#loc90, #loc91])
#loc326 = loc(fused[#loc92, #loc93])
#loc327 = loc(fused[#loc95, #loc96])
#loc328 = loc(fused[#loc97, #loc91])
#loc329 = loc(fused[#loc101, #loc99])
#loc330 = loc(fused[#loc104, #loc105])
#loc331 = loc(fused[#loc107, #loc108])
#loc332 = loc(fused[#loc109, #loc110])
#loc333 = loc(fused[#loc111, #loc108])
#loc334 = loc(fused[#loc114, #loc115])
#loc335 = loc(fused[#loc120, #loc121])
#loc336 = loc(fused[#loc122, #loc123])
#loc337 = loc(fused[#loc124, #loc125])
#loc338 = loc(fused[#loc126, #loc127])
#loc339 = loc(fused[#loc128, #loc129])
#loc340 = loc(fused[#loc130, #loc131])
#loc341 = loc(fused[#loc136, #loc137])
#loc344 = loc(fused[#loc147, #loc148])
#loc345 = loc(fused[#loc151, #loc152])
#loc346 = loc(fused[#loc155, #loc154])
#loc347 = loc(fused[#loc158, #loc159])
#loc348 = loc(fused[#loc160, #loc161])
#loc349 = loc(fused[#loc162, #loc163])
#loc350 = loc(fused[#loc164, #loc165])
#loc351 = loc(fused[#loc166, #loc167])
#loc352 = loc(fused[#loc168, #loc169])
#loc353 = loc(fused[#loc171, #loc170])
#loc354 = loc(fused[#loc172, #loc173])
#loc355 = loc(fused[#loc175, #loc176])
#loc356 = loc(fused[#loc181, #loc182])
#loc357 = loc(fused[#loc183, #loc184])
#loc358 = loc(fused[#loc185, #loc186])
#loc359 = loc(fused[#loc187, #loc184])
#loc360 = loc(fused[#loc189, #loc190])
#loc361 = loc(fused[#loc192, #loc193])
#loc362 = loc(fused[#loc194, #loc195])
#loc363 = loc(fused[#loc197, #loc196])
#loc364 = loc(fused[#loc200, #loc201])
#loc365 = loc(fused[#loc204, #loc205])
#loc366 = loc(fused[#loc206, #loc207])
#loc367 = loc(fused[#loc209, #loc210])
#loc368 = loc(fused[#loc211, #loc212])
#loc369 = loc(fused[#loc213, #loc214])
#loc370 = loc(fused[#loc215, #loc207])
#loc371 = loc(fused[#loc219, #loc220])
#loc372 = loc(fused[#loc223, #loc224])
#loc373 = loc(fused[#loc225, #loc226])
#loc374 = loc(fused[#loc227, #loc228])
#loc375 = loc(fused[#loc230, #loc231])
#loc376 = loc(fused[#loc232, #loc226])
#loc377 = loc(fused[#loc236, #loc234])
#loc378 = loc(fused[#loc239, #loc240])
#loc379 = loc(fused[#loc242, #loc243])
#loc380 = loc(fused[#loc244, #loc245])
#loc381 = loc(fused[#loc246, #loc243])
#loc382 = loc(fused[#loc249, #loc250])
#loc383 = loc(fused[#loc252, #loc253])
#loc384 = loc(fused[#loc254, #loc255])
#loc385 = loc(fused[#loc258, #loc261])
#loc386 = loc(fused[#loc262, #loc263, #loc264, #loc253])
#loc387 = loc(fused[#loc265, #loc266])
#loc388 = loc(fused[#loc271, #loc272])
#loc389 = loc(fused[#loc273, #loc274])
#loc390 = loc(fused[#loc275, #loc276])
#loc391 = loc(fused[#loc278, #loc277])
#loc392 = loc(fused[#loc279, #loc280])
#loc393 = loc(fused[#loc283, #loc282])
#loc394 = loc(fused[#loc284, #loc285])
