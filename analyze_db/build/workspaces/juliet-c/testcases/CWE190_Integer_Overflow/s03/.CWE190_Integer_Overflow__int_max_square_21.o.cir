!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_21.c":27:21)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_21.c":27:25)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_21.c":60:26)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_21.c":60:30)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_21.c":94:26)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_21.c":94:30)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_21.c":123:25)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_21.c":123:29)
#true = #cir.bool<true> : !cir.bool
#loc167 = loc(fused[#loc7, #loc8])
#loc184 = loc(fused[#loc50, #loc51])
#loc199 = loc(fused[#loc95, #loc96])
#loc214 = loc(fused[#loc138, #loc139])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc164)
  cir.func private @printIntLine(!s32i) loc(#loc165)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc164)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc171)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc18)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc171)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc19)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc20)
        } loc(#loc170)
      } loc(#loc169)
    } loc(#loc168)
    cir.return loc(#loc6)
  } loc(#loc166)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc25)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc164)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @badSink(%5) : (!s32i) -> () loc(#loc32)
    cir.return loc(#loc22)
  } loc(#loc172)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc179)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc180)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc34)
  } loc(#loc177)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc181)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc50, #loc51])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc184)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc181)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc55)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc63)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc63)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc63)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc63)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc188)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
            %12 = cir.abs %11 poison : !s32i loc(#loc66)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc66)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc67)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc68)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc67)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc67)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc189)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc64)
              cir.yield %21 : !cir.bool loc(#loc64)
            }, false {
              %21 = cir.const #false loc(#loc64)
              cir.yield %21 : !cir.bool loc(#loc64)
            }) : (!cir.bool) -> !cir.bool loc(#loc64)
            cir.yield %20 : !cir.bool loc(#loc64)
          }, false {
            %11 = cir.const #false loc(#loc64)
            cir.yield %11 : !cir.bool loc(#loc64)
          }) : (!cir.bool) -> !cir.bool loc(#loc64)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc191)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc75)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc191)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc77)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc190)
        } loc(#loc187)
      } loc(#loc186)
    } loc(#loc185)
    cir.return loc(#loc49)
  } loc(#loc183)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc85)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %4 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc181)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.call @goodB2G1Sink(%5) : (!s32i) -> () loc(#loc90)
    cir.return loc(#loc80)
  } loc(#loc192)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc197)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc95, #loc96])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc199)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc197)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc100)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc105)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc105)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc203)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %12 = cir.abs %11 poison : !s32i loc(#loc108)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc108)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc109)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc110)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc110)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc109)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc109)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc204)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc106)
              cir.yield %21 : !cir.bool loc(#loc106)
            }, false {
              %21 = cir.const #false loc(#loc106)
              cir.yield %21 : !cir.bool loc(#loc106)
            }) : (!cir.bool) -> !cir.bool loc(#loc106)
            cir.yield %20 : !cir.bool loc(#loc106)
          }, false {
            %11 = cir.const #false loc(#loc106)
            cir.yield %11 : !cir.bool loc(#loc106)
          }) : (!cir.bool) -> !cir.bool loc(#loc106)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc206)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc117)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc206)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc119)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc120)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc120)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          } loc(#loc205)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc200)
    cir.return loc(#loc94)
  } loc(#loc198)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc126)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %4 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc197)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    cir.call @goodB2G2Sink(%5) : (!s32i) -> () loc(#loc133)
    cir.return loc(#loc123)
  } loc(#loc207)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc212)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc138, #loc139])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc214)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc212)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc143)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc218)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc149)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc218)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc151)
        } loc(#loc217)
      } loc(#loc216)
    } loc(#loc215)
    cir.return loc(#loc137)
  } loc(#loc213)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc156)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc158)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc212)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    cir.call @goodG2BSink(%5) : (!s32i) -> () loc(#loc163)
    cir.return loc(#loc153)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_21.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_square_21.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_square_21.c":25:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_21.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_21.c":37:1)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_21.c":28:1)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_21.c":29:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_21.c":36:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_21.c":29:8)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_21.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_21.c":31:9)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_21.c":35:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_21.c":33:13)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_21.c":33:33)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_21.c":33:26)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_21.c":34:26)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_21.c":34:13)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_21.c":39:1)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_21.c":48:1)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_21.c":41:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_21.c":41:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_21.c":43:12)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_21.c":43:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_21.c":45:12)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_21.c":45:5)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_21.c":46:17)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_21.c":46:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_21.c":47:13)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_21.c":47:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_21.c":146:1)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_21.c":151:1)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_21.c":148:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_21.c":148:14)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_21.c":149:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_21.c":149:14)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_21.c":150:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_21.c":150:13)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_21.c":55:1)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_21.c":55:29)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_21.c":65:19)
#loc46 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_21.c":77:23)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_21.c":60:1)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_21.c":80:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_21.c":61:1)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_21.c":62:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_21.c":79:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_21.c":62:8)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_21.c":63:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_21.c":66:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_21.c":68:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_21.c":65:9)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:9)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_21.c":78:9)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:13)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:20)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:28)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:35)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:31)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:49)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:62)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:69)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_21.c":71:9)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_21.c":74:9)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_21.c":76:9)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_21.c":72:13)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_21.c":72:33)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_21.c":72:26)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_21.c":73:26)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_21.c":73:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_21.c":77:13)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_21.c":82:1)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_21.c":91:1)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_21.c":84:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_21.c":84:9)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_21.c":86:12)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_21.c":86:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_21.c":88:12)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_21.c":88:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_21.c":89:22)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_21.c":89:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_21.c":90:18)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_21.c":90:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_21.c":56:1)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_21.c":56:29)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_21.c":94:1)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_21.c":109:1)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_21.c":95:1)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_21.c":96:5)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_21.c":108:5)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_21.c":96:8)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_21.c":97:5)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:9)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_21.c":107:9)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:13)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:20)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:28)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:35)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:31)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:49)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:62)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:69)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_21.c":100:9)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_21.c":103:9)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_21.c":105:9)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_21.c":101:13)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_21.c":101:33)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_21.c":101:26)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_21.c":102:26)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_21.c":102:13)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_21.c":106:23)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_21.c":106:13)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_21.c":111:1)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_21.c":120:1)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_21.c":113:5)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_21.c":113:9)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_21.c":115:12)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_21.c":115:5)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_21.c":117:12)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_21.c":117:5)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_21.c":118:22)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_21.c":118:5)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_21.c":119:18)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_21.c":119:5)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_21.c":57:1)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_21.c":57:28)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_21.c":123:1)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_21.c":133:1)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_21.c":124:1)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_21.c":125:5)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_21.c":132:5)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_21.c":125:8)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_21.c":126:5)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_21.c":127:9)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_21.c":131:9)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_21.c":129:13)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_21.c":129:33)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_21.c":129:26)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_21.c":130:26)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_21.c":130:13)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_21.c":135:1)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_21.c":144:1)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_21.c":137:5)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_21.c":137:9)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_21.c":139:12)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_21.c":139:5)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_21.c":141:12)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_21.c":141:5)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_21.c":142:21)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_21.c":142:5)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_21.c":143:17)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_21.c":143:5)
#loc164 = loc(fused[#loc1, #loc2])
#loc165 = loc(fused[#loc3, #loc4])
#loc166 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc10, #loc11])
#loc169 = loc(fused[#loc13, #loc11])
#loc170 = loc(fused[#loc14, #loc15])
#loc171 = loc(fused[#loc16, #loc17])
#loc172 = loc(fused[#loc21, #loc22])
#loc173 = loc(fused[#loc23, #loc24])
#loc174 = loc(fused[#loc26, #loc25])
#loc175 = loc(fused[#loc28, #loc27])
#loc176 = loc(fused[#loc30, #loc29])
#loc177 = loc(fused[#loc33, #loc34])
#loc178 = loc(fused[#loc35, #loc36])
#loc179 = loc(fused[#loc37, #loc38])
#loc180 = loc(fused[#loc39, #loc40])
#loc181 = loc(fused[#loc41, #loc42])
#loc182 = loc(fused[#loc43, #loc44])
#loc183 = loc(fused[#loc48, #loc49])
#loc185 = loc(fused[#loc53, #loc54])
#loc186 = loc(fused[#loc56, #loc57, #loc58, #loc54])
#loc187 = loc(fused[#loc60, #loc61])
#loc188 = loc(fused[#loc62, #loc63])
#loc189 = loc(fused[#loc66, #loc69])
#loc190 = loc(fused[#loc70, #loc71, #loc72, #loc61])
#loc191 = loc(fused[#loc73, #loc74])
#loc192 = loc(fused[#loc79, #loc80])
#loc193 = loc(fused[#loc81, #loc82])
#loc194 = loc(fused[#loc84, #loc83])
#loc195 = loc(fused[#loc86, #loc85])
#loc196 = loc(fused[#loc88, #loc87])
#loc197 = loc(fused[#loc91, #loc92])
#loc198 = loc(fused[#loc93, #loc94])
#loc200 = loc(fused[#loc98, #loc99])
#loc201 = loc(fused[#loc101, #loc99])
#loc202 = loc(fused[#loc102, #loc103])
#loc203 = loc(fused[#loc104, #loc105])
#loc204 = loc(fused[#loc108, #loc111])
#loc205 = loc(fused[#loc112, #loc113, #loc114, #loc103])
#loc206 = loc(fused[#loc115, #loc116])
#loc207 = loc(fused[#loc122, #loc123])
#loc208 = loc(fused[#loc124, #loc125])
#loc209 = loc(fused[#loc127, #loc126])
#loc210 = loc(fused[#loc129, #loc128])
#loc211 = loc(fused[#loc131, #loc130])
#loc212 = loc(fused[#loc134, #loc135])
#loc213 = loc(fused[#loc136, #loc137])
#loc215 = loc(fused[#loc141, #loc142])
#loc216 = loc(fused[#loc144, #loc142])
#loc217 = loc(fused[#loc145, #loc146])
#loc218 = loc(fused[#loc147, #loc148])
#loc219 = loc(fused[#loc152, #loc153])
#loc220 = loc(fused[#loc154, #loc155])
#loc221 = loc(fused[#loc157, #loc156])
#loc222 = loc(fused[#loc159, #loc158])
#loc223 = loc(fused[#loc161, #loc160])
