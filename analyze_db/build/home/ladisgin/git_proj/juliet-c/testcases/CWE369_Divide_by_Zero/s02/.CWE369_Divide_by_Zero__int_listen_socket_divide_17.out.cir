!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":260:10)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":260:14)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":260:20)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":260:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc466 = loc(fused[#loc185, #loc186])
#loc467 = loc(fused[#loc187, #loc188])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc391)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc392)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc393)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc394)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc395)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc396)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc397)
  cir.func private @close(!s32i) -> !s32i loc(#loc398)
  cir.func private @printIntLine(!s32i) loc(#loc399)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc401)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc402)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc403)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc27)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc404)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc31)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc406)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc407)
        cir.condition(%8) loc(#loc35)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc410)
            %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc411)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc412)
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc413)
            %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc414)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc44)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc44)
            cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc412)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc46)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc46)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc413)
            cir.scope {
              cir.do {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc51)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc52)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc53)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc416)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc60)
                  %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc60)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc418)
                  cir.if %63 {
                    cir.break loc(#loc62)
                  } loc(#loc419)
                } loc(#loc417)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc420)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc65)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc421)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc422)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc70)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc70)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc423)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc73)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc73)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc424)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc77)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc77)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc78)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc425)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc427)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc428)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc428)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc89)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc90)
                  %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc90)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc429)
                  cir.if %67 {
                    cir.break loc(#loc92)
                  } loc(#loc430)
                } loc(#loc426)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc96)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc97)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc98)
                  %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc98)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc432)
                  cir.if %65 {
                    cir.break loc(#loc100)
                  } loc(#loc433)
                } loc(#loc431)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc102)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc103)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc104)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc434)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc110)
                  %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc110)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc436)
                  cir.if %63 {
                    cir.break loc(#loc112)
                  } loc(#loc437)
                } loc(#loc435)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc115)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc115)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc115)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc115)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc115)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc115)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc115)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc116)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc116)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc438)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc117)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc118)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc118)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc439)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc124)
                  %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc124)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc441)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc125)
                    cir.yield %65 : !cir.bool loc(#loc125)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc127)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc442)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc125)
                      cir.yield %69 : !cir.bool loc(#loc125)
                    }, false {
                      %69 = cir.const #false loc(#loc125)
                      cir.yield %69 : !cir.bool loc(#loc125)
                    }) : (!cir.bool) -> !cir.bool loc(#loc125)
                    cir.yield %68 : !cir.bool loc(#loc125)
                  }) : (!cir.bool) -> !cir.bool loc(#loc125)
                  cir.if %64 {
                    cir.break loc(#loc129)
                  } loc(#loc443)
                } loc(#loc440)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc130)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc130)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc131)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc132)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc444)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc134)
                cir.store %59, %2 : !s32i, !cir.ptr<!s32i> loc(#loc445)
                cir.yield loc(#loc50)
              } while {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc137)
                %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc137)
                cir.condition(%16) loc(#loc137)
              } loc(#loc415)
            } loc(#loc415)
            cir.scope {
              %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc141)
              %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc141)
              %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc447)
              cir.if %18 {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc144)
              } loc(#loc448)
            } loc(#loc446)
            cir.scope {
              %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc148)
              %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc148)
              %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc450)
              cir.if %18 {
                %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc150)
                %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc151)
              } loc(#loc451)
            } loc(#loc449)
          } loc(#loc409)
        } loc(#loc408)
        cir.yield loc(#loc30)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc153)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc452)
        cir.yield loc(#loc405)
      } loc(#loc405)
    } loc(#loc405)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc156)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc454)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc158)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc159)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc455)
        cir.condition(%8) loc(#loc160)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc162)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc457)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc164)
        } loc(#loc456)
        cir.yield loc(#loc155)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc165)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc166)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc458)
        cir.yield loc(#loc453)
      } loc(#loc453)
    } loc(#loc453)
    cir.return loc(#loc20)
  } loc(#loc400)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc460)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc169)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc461)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc171)
    cir.return loc(#loc168)
  } loc(#loc459)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc462)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc463)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc464)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc182)
  cir.func @main(%arg0: !s32i loc(fused[#loc185, #loc186]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc187, #loc188])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc466)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc467)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc184)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc189)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc190)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc191)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc191)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc192)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc179)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc468)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_17_good() : () -> () loc(#loc194)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc180)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc196)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc181)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc197)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc469)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_17_bad() : () -> () loc(#loc198)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc182)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc182)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc200)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc201)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc470)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc470)
    cir.return %17 : !s32i loc(#loc470)
  } loc(#loc465)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc203)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc472)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc473)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc474)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc211)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc212)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc475)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc216)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc477)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc219)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc478)
        cir.condition(%8) loc(#loc220)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc481)
            %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc482)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc483)
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc484)
            %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc485)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc229)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc229)
            cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc483)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc231)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc231)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc484)
            cir.scope {
              cir.do {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc236)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc237)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc238)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc239)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc487)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc245)
                  %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc245)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc489)
                  cir.if %63 {
                    cir.break loc(#loc247)
                  } loc(#loc490)
                } loc(#loc488)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc491)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc250)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc492)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc493)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc255)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc255)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc494)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc257)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc257)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc495)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc259)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc259)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc260)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc496)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc265)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc498)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc499)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc499)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc270)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc271)
                  %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc271)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc500)
                  cir.if %67 {
                    cir.break loc(#loc273)
                  } loc(#loc501)
                } loc(#loc497)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc276)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc277)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc278)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc279)
                  %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc279)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc503)
                  cir.if %65 {
                    cir.break loc(#loc281)
                  } loc(#loc504)
                } loc(#loc502)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc283)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc284)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc285)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc505)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc290)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc291)
                  %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc291)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc507)
                  cir.if %63 {
                    cir.break loc(#loc293)
                  } loc(#loc508)
                } loc(#loc506)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc294)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc295)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc295)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc296)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc296)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc296)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc296)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc296)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc296)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc296)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc297)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc297)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc509)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc298)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc299)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc299)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc510)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc304)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc305)
                  %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc305)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc512)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc306)
                    cir.yield %65 : !cir.bool loc(#loc306)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc307)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc308)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc513)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc306)
                      cir.yield %69 : !cir.bool loc(#loc306)
                    }, false {
                      %69 = cir.const #false loc(#loc306)
                      cir.yield %69 : !cir.bool loc(#loc306)
                    }) : (!cir.bool) -> !cir.bool loc(#loc306)
                    cir.yield %68 : !cir.bool loc(#loc306)
                  }) : (!cir.bool) -> !cir.bool loc(#loc306)
                  cir.if %64 {
                    cir.break loc(#loc310)
                  } loc(#loc514)
                } loc(#loc511)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc311)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc311)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc312)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc313)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc313)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc515)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc314)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc315)
                cir.store %59, %2 : !s32i, !cir.ptr<!s32i> loc(#loc516)
                cir.yield loc(#loc235)
              } while {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc318)
                %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc318)
                cir.condition(%16) loc(#loc318)
              } loc(#loc486)
            } loc(#loc486)
            cir.scope {
              %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc321)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc322)
              %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc322)
              %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc518)
              cir.if %18 {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc324)
                %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc325)
              } loc(#loc519)
            } loc(#loc517)
            cir.scope {
              %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc328)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc329)
              %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc329)
              %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc521)
              cir.if %18 {
                %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc331)
                %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc332)
              } loc(#loc522)
            } loc(#loc520)
          } loc(#loc480)
        } loc(#loc479)
        cir.yield loc(#loc215)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc333)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc334)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc523)
        cir.yield loc(#loc476)
      } loc(#loc476)
    } loc(#loc476)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc337)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc525)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc339)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc340)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc526)
        cir.condition(%8) loc(#loc341)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc345)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc346)
            %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc529)
            cir.if %8 {
              %9 = cir.const #cir.int<100> : !s32i loc(#loc350)
              %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc351)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc531)
              cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc352)
            } else {
              %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc203)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc203)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc353)
            } loc(#loc530)
          } loc(#loc528)
        } loc(#loc527)
        cir.yield loc(#loc336)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc354)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc355)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc532)
        cir.yield loc(#loc524)
      } loc(#loc524)
    } loc(#loc524)
    cir.return loc(#loc205)
  } loc(#loc471)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc534)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc535)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc536)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc363)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc364)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc537)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc368)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc539)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc370)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc371)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc540)
        cir.condition(%8) loc(#loc372)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc374)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc542)
        } loc(#loc541)
        cir.yield loc(#loc367)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc376)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc377)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc543)
        cir.yield loc(#loc538)
      } loc(#loc538)
    } loc(#loc538)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc380)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc545)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc382)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc383)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc546)
        cir.condition(%8) loc(#loc384)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc386)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc387)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc548)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc388)
        } loc(#loc547)
        cir.yield loc(#loc379)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc389)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc390)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc549)
        cir.yield loc(#loc544)
      } loc(#loc544)
    } loc(#loc544)
    cir.return loc(#loc357)
  } loc(#loc533)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":44:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":127:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":46:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":46:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":46:11)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":47:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":47:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":49:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":49:12)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":49:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":50:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":121:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":50:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":50:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":50:16)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":50:20)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":50:18)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":51:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":52:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":120:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":57:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":57:17)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":58:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":58:32)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":59:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":59:35)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":60:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":60:35)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":61:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":61:45)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":62:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":105:21)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":72:39)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":72:48)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":72:61)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":72:32)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":72:17)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":72:72)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":73:17)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":76:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":73:21)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":73:37)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":74:17)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":75:21)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":77:24)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":77:25)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":77:34)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":77:37)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":77:51)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":77:17)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":77:52)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":78:38)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":78:17)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":79:43)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":79:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":80:42)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":80:36)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":80:17)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":80:50)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":81:17)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":84:17)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":81:26)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":81:58)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":81:59)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":81:68)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":81:82)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":81:21)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":81:88)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":82:17)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":83:21)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":85:17)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":88:17)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":85:28)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":85:42)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":85:21)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":85:61)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":86:17)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":87:21)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":89:39)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":89:53)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":89:59)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":89:32)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":89:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":89:63)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":90:17)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":93:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":90:21)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":90:37)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":91:17)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":92:21)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":95:35)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":95:49)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":95:62)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":95:80)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":95:83)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":95:30)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":95:17)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":95:84)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":96:17)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":99:17)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":96:21)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":96:35)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":96:48)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":96:51)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":96:65)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":97:17)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":98:21)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":101:43)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":101:29)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":101:17)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":103:29)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":103:24)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":103:17)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":103:40)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":105:20)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":106:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":109:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":106:17)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":106:33)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":107:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":108:30)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":108:17)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":110:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":113:13)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":110:17)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":110:33)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":111:13)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":112:30)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":112:17)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":50:24)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":50:23)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":122:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":126:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":122:13)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":122:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":122:16)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":122:20)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":122:18)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":123:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":125:22)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":125:28)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":125:9)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":122:24)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":122:23)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":245:1)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":249:1)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":247:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":247:13)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":248:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":248:13)
#loc173 = loc("/usr/include/stdlib.h":575:1)
#loc174 = loc("/usr/include/stdlib.h":575:41)
#loc175 = loc("/usr/include/time.h":76:1)
#loc176 = loc("/usr/include/time.h":76:38)
#loc177 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc178 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":265:15)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":267:15)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":270:15)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":272:15)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":260:1)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":275:1)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":261:1)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":263:27)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":263:22)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":263:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":265:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":266:5)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":266:61)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":267:5)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":270:5)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":271:5)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":271:60)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":272:5)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":274:12)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":274:5)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":221:23)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":134:1)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":224:1)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":136:5)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":136:9)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":136:11)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":137:5)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":137:9)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":139:13)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":139:12)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":139:5)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":140:5)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":211:5)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":140:13)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":140:9)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":140:16)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":140:20)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":140:18)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":141:5)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":142:9)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":210:9)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":147:13)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":147:17)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":148:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":148:32)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":149:13)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":149:35)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":150:13)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":150:35)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":151:13)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":151:45)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":152:13)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":195:21)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":162:39)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":162:48)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":162:61)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":162:32)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":162:17)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":162:72)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":163:17)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":166:17)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":163:21)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":163:37)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":164:17)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":165:21)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":167:24)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":167:25)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":167:34)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":167:37)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":167:51)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":167:17)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":167:52)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":168:38)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":168:17)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":169:43)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":169:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":170:42)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":170:36)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":170:17)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":170:50)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":171:17)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":174:17)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":171:26)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":171:58)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":171:59)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":171:68)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":171:82)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":171:21)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":171:88)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":172:17)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":173:21)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":175:17)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":178:17)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":175:28)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":175:42)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":175:21)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":175:61)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":176:17)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":177:21)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":179:39)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":179:53)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":179:59)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":179:32)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":179:17)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":179:63)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":180:17)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":183:17)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":180:21)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":180:37)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":181:17)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":182:21)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":185:35)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":185:49)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":185:62)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":185:80)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":185:83)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":185:30)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":185:17)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":185:84)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":186:17)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":189:17)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":186:21)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":186:35)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":186:48)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":186:51)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":186:65)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":187:17)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":188:21)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":191:43)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":191:29)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":191:17)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":193:29)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":193:24)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":193:17)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":193:40)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":195:20)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":196:13)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":199:13)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":196:17)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":196:33)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":197:13)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":198:30)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":198:17)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":200:13)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":203:13)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":200:17)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":200:33)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":201:13)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":202:30)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":202:17)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":140:24)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":140:23)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":212:5)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":223:5)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":212:13)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":212:9)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":212:16)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":212:20)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":212:18)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":213:5)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":215:9)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":222:9)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":215:13)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":215:21)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":216:9)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":218:9)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":220:9)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":217:26)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":217:32)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":217:13)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":221:13)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":212:24)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":212:23)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":227:1)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":243:1)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":229:5)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":229:9)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":229:11)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":230:5)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":230:9)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":232:13)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":232:12)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":232:5)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":233:5)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":237:5)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":233:13)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":233:9)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":233:16)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":233:20)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":233:18)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":234:5)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":236:16)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":236:9)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":233:24)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":233:23)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":238:5)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":242:5)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":238:13)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":238:9)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":238:16)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":238:20)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":238:18)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":239:5)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":241:22)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":241:28)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":241:9)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":238:24)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_17.c":238:23)
#loc391 = loc(fused[#loc1, #loc2])
#loc392 = loc(fused[#loc3, #loc4])
#loc393 = loc(fused[#loc5, #loc6])
#loc394 = loc(fused[#loc7, #loc8])
#loc395 = loc(fused[#loc9, #loc10])
#loc396 = loc(fused[#loc11, #loc12])
#loc397 = loc(fused[#loc13, #loc14])
#loc398 = loc(fused[#loc15, #loc16])
#loc399 = loc(fused[#loc17, #loc18])
#loc400 = loc(fused[#loc19, #loc20])
#loc401 = loc(fused[#loc21, #loc22])
#loc402 = loc(fused[#loc21, #loc23])
#loc403 = loc(fused[#loc24, #loc25])
#loc404 = loc(fused[#loc28, #loc26])
#loc405 = loc(fused[#loc29, #loc30])
#loc406 = loc(fused[#loc32, #loc31])
#loc407 = loc(fused[#loc33, #loc34])
#loc408 = loc(fused[#loc36, #loc30])
#loc409 = loc(fused[#loc37, #loc38])
#loc410 = loc(fused[#loc39, #loc40])
#loc411 = loc(fused[#loc41, #loc42])
#loc412 = loc(fused[#loc43, #loc44])
#loc413 = loc(fused[#loc45, #loc46])
#loc414 = loc(fused[#loc47, #loc48])
#loc415 = loc(fused[#loc49, #loc50])
#loc416 = loc(fused[#loc55, #loc56])
#loc417 = loc(fused[#loc57, #loc58])
#loc418 = loc(fused[#loc59, #loc60])
#loc419 = loc(fused[#loc61, #loc58])
#loc420 = loc(fused[#loc63, #loc64])
#loc421 = loc(fused[#loc66, #loc67])
#loc422 = loc(fused[#loc68, #loc69])
#loc423 = loc(fused[#loc72, #loc70])
#loc424 = loc(fused[#loc76, #loc73])
#loc425 = loc(fused[#loc80, #loc81])
#loc426 = loc(fused[#loc82, #loc83])
#loc427 = loc(fused[#loc85, #loc86])
#loc428 = loc(fused[#loc87, #loc88])
#loc429 = loc(fused[#loc89, #loc90])
#loc430 = loc(fused[#loc91, #loc83])
#loc431 = loc(fused[#loc93, #loc94])
#loc432 = loc(fused[#loc97, #loc98])
#loc433 = loc(fused[#loc99, #loc94])
#loc434 = loc(fused[#loc105, #loc106])
#loc435 = loc(fused[#loc107, #loc108])
#loc436 = loc(fused[#loc109, #loc110])
#loc437 = loc(fused[#loc111, #loc108])
#loc438 = loc(fused[#loc115, #loc116])
#loc439 = loc(fused[#loc119, #loc120])
#loc440 = loc(fused[#loc121, #loc122])
#loc441 = loc(fused[#loc123, #loc124])
#loc442 = loc(fused[#loc126, #loc127])
#loc443 = loc(fused[#loc128, #loc122])
#loc444 = loc(fused[#loc132, #loc130])
#loc445 = loc(fused[#loc135, #loc136])
#loc446 = loc(fused[#loc138, #loc139])
#loc447 = loc(fused[#loc140, #loc141])
#loc448 = loc(fused[#loc142, #loc139])
#loc449 = loc(fused[#loc145, #loc146])
#loc450 = loc(fused[#loc147, #loc148])
#loc451 = loc(fused[#loc149, #loc146])
#loc452 = loc(fused[#loc153, #loc152])
#loc453 = loc(fused[#loc154, #loc155])
#loc454 = loc(fused[#loc157, #loc156])
#loc455 = loc(fused[#loc158, #loc159])
#loc456 = loc(fused[#loc161, #loc155])
#loc457 = loc(fused[#loc162, #loc163])
#loc458 = loc(fused[#loc166, #loc165])
#loc459 = loc(fused[#loc167, #loc168])
#loc460 = loc(fused[#loc169, #loc170])
#loc461 = loc(fused[#loc171, #loc172])
#loc462 = loc(fused[#loc173, #loc174])
#loc463 = loc(fused[#loc175, #loc176])
#loc464 = loc(fused[#loc177, #loc178])
#loc465 = loc(fused[#loc183, #loc184])
#loc468 = loc(fused[#loc194, #loc195])
#loc469 = loc(fused[#loc198, #loc199])
#loc470 = loc(fused[#loc202, #loc201])
#loc471 = loc(fused[#loc204, #loc205])
#loc472 = loc(fused[#loc206, #loc207])
#loc473 = loc(fused[#loc206, #loc208])
#loc474 = loc(fused[#loc209, #loc210])
#loc475 = loc(fused[#loc213, #loc211])
#loc476 = loc(fused[#loc214, #loc215])
#loc477 = loc(fused[#loc217, #loc216])
#loc478 = loc(fused[#loc218, #loc219])
#loc479 = loc(fused[#loc221, #loc215])
#loc480 = loc(fused[#loc222, #loc223])
#loc481 = loc(fused[#loc224, #loc225])
#loc482 = loc(fused[#loc226, #loc227])
#loc483 = loc(fused[#loc228, #loc229])
#loc484 = loc(fused[#loc230, #loc231])
#loc485 = loc(fused[#loc232, #loc233])
#loc486 = loc(fused[#loc234, #loc235])
#loc487 = loc(fused[#loc240, #loc241])
#loc488 = loc(fused[#loc242, #loc243])
#loc489 = loc(fused[#loc244, #loc245])
#loc490 = loc(fused[#loc246, #loc243])
#loc491 = loc(fused[#loc248, #loc249])
#loc492 = loc(fused[#loc251, #loc252])
#loc493 = loc(fused[#loc253, #loc254])
#loc494 = loc(fused[#loc256, #loc255])
#loc495 = loc(fused[#loc258, #loc257])
#loc496 = loc(fused[#loc261, #loc262])
#loc497 = loc(fused[#loc263, #loc264])
#loc498 = loc(fused[#loc266, #loc267])
#loc499 = loc(fused[#loc268, #loc269])
#loc500 = loc(fused[#loc270, #loc271])
#loc501 = loc(fused[#loc272, #loc264])
#loc502 = loc(fused[#loc274, #loc275])
#loc503 = loc(fused[#loc278, #loc279])
#loc504 = loc(fused[#loc280, #loc275])
#loc505 = loc(fused[#loc286, #loc287])
#loc506 = loc(fused[#loc288, #loc289])
#loc507 = loc(fused[#loc290, #loc291])
#loc508 = loc(fused[#loc292, #loc289])
#loc509 = loc(fused[#loc296, #loc297])
#loc510 = loc(fused[#loc300, #loc301])
#loc511 = loc(fused[#loc302, #loc303])
#loc512 = loc(fused[#loc304, #loc305])
#loc513 = loc(fused[#loc307, #loc308])
#loc514 = loc(fused[#loc309, #loc303])
#loc515 = loc(fused[#loc313, #loc311])
#loc516 = loc(fused[#loc316, #loc317])
#loc517 = loc(fused[#loc319, #loc320])
#loc518 = loc(fused[#loc321, #loc322])
#loc519 = loc(fused[#loc323, #loc320])
#loc520 = loc(fused[#loc326, #loc327])
#loc521 = loc(fused[#loc328, #loc329])
#loc522 = loc(fused[#loc330, #loc327])
#loc523 = loc(fused[#loc334, #loc333])
#loc524 = loc(fused[#loc335, #loc336])
#loc525 = loc(fused[#loc338, #loc337])
#loc526 = loc(fused[#loc339, #loc340])
#loc527 = loc(fused[#loc342, #loc336])
#loc528 = loc(fused[#loc343, #loc344])
#loc529 = loc(fused[#loc345, #loc346])
#loc530 = loc(fused[#loc347, #loc348, #loc349, #loc344])
#loc531 = loc(fused[#loc350, #loc351])
#loc532 = loc(fused[#loc355, #loc354])
#loc533 = loc(fused[#loc356, #loc357])
#loc534 = loc(fused[#loc358, #loc359])
#loc535 = loc(fused[#loc358, #loc360])
#loc536 = loc(fused[#loc361, #loc362])
#loc537 = loc(fused[#loc365, #loc363])
#loc538 = loc(fused[#loc366, #loc367])
#loc539 = loc(fused[#loc369, #loc368])
#loc540 = loc(fused[#loc370, #loc371])
#loc541 = loc(fused[#loc373, #loc367])
#loc542 = loc(fused[#loc375, #loc374])
#loc543 = loc(fused[#loc377, #loc376])
#loc544 = loc(fused[#loc378, #loc379])
#loc545 = loc(fused[#loc381, #loc380])
#loc546 = loc(fused[#loc382, #loc383])
#loc547 = loc(fused[#loc385, #loc379])
#loc548 = loc(fused[#loc386, #loc387])
#loc549 = loc(fused[#loc390, #loc389])
