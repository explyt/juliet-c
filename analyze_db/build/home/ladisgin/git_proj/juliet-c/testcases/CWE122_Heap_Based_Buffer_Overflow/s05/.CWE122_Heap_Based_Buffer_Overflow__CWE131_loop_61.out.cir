!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":82:10)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":82:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":82:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":82:32)
#loc141 = loc(fused[#loc61, #loc62])
#loc142 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61b_badSource(!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc119)
  cir.func private @printIntLine(!s32i) loc(#loc120)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc121)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc123)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc124)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
    %5 = cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61b_badSource(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc18)
    cir.store %5, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    cir.br ^bb1 loc(#loc128)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc123)
    cir.store %6, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc123)
    cir.br ^bb2 loc(#loc129)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<0> : !s32i loc(#loc25)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
    cir.store %8, %1 : !u64i, !cir.ptr<!u64i> loc(#loc130)
    cir.br ^bb3 loc(#loc129)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %9 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc27)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc28)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc28)
    %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc131)
    cir.brcond %12 ^bb4, ^bb8 loc(#loc29)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc132)
  ^bb5:  // pred: ^bb4
    %13 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc31)
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc32)
    %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !u64i), !cir.ptr<!s32i> loc(#loc32)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
    %18 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc34)
    %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc35)
    cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    cir.br ^bb6 loc(#loc24)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc37)
    %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc38)
    cir.store %21, %1 : !u64i, !cir.ptr<!u64i> loc(#loc134)
    cir.br ^bb3 loc(#loc129)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // pred: ^bb8
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc41)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc42)
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc44)
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc8)
  } loc(#loc122)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc46)
  } loc(#loc135)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc137)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc138)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc68)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61_good : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.return %17 : !s32i loc(#loc145)
  } loc(#loc140)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61b_goodG2BSource(!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc146)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc148)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc149)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc89)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    %5 = cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61b_goodG2BSource(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc92)
    cir.store %5, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.br ^bb1 loc(#loc153)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc148)
    cir.store %6, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc148)
    cir.br ^bb2 loc(#loc154)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc99)
    cir.store %8, %1 : !u64i, !cir.ptr<!u64i> loc(#loc155)
    cir.br ^bb3 loc(#loc154)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %9 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc101)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc102)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc102)
    %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc156)
    cir.brcond %12 ^bb4, ^bb8 loc(#loc103)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc157)
  ^bb5:  // pred: ^bb4
    %13 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc105)
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc106)
    %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !u64i), !cir.ptr<!s32i> loc(#loc106)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
    %18 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc108)
    %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc109)
    cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.br ^bb6 loc(#loc98)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc98)
  ^bb7:  // pred: ^bb6
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc111)
    %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc112)
    cir.store %21, %1 : !u64i, !cir.ptr<!u64i> loc(#loc159)
    cir.br ^bb3 loc(#loc154)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc98)
  ^bb9:  // pred: ^bb8
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc115)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc116)
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc117)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc118)
    cir.br ^bb10 loc(#loc96)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc82)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":22:78)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":40:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":30:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":30:28)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":31:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":31:16)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":26:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":26:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":27:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":28:73)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":28:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":28:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":28:77)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":29:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":39:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":33:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":36:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":33:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":33:14)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":33:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":33:25)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":33:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":34:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":35:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":35:23)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":35:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":35:18)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":35:19)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":35:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":33:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":33:29)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":37:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":37:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":37:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":37:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":38:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":38:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":67:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":70:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":69:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":69:13)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":87:15)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":89:15)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":92:15)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":94:15)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":82:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":97:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":83:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":85:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":85:22)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":85:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":87:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":88:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":88:60)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":89:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":92:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":93:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":93:59)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":94:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":96:12)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":96:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":47:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":47:82)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":49:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":65:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":55:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":55:28)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":56:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":56:16)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":51:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":51:11)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":52:12)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":52:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":53:77)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":53:12)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":53:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":53:81)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":54:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":64:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":58:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":61:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":58:18)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":58:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":58:21)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":58:25)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":58:23)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":59:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":60:30)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":60:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":60:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":60:18)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":60:19)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":60:31)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":58:30)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":58:29)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":62:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":62:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":62:28)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":62:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":63:14)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c":63:9)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc7, #loc8])
#loc123 = loc(fused[#loc9, #loc10])
#loc124 = loc(fused[#loc11, #loc12])
#loc125 = loc(fused[#loc13, #loc14])
#loc126 = loc(fused[#loc16, #loc15])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc21, #loc22])
#loc129 = loc(fused[#loc23, #loc24])
#loc130 = loc(fused[#loc26, #loc25])
#loc131 = loc(fused[#loc27, #loc28])
#loc132 = loc(fused[#loc30, #loc24])
#loc133 = loc(fused[#loc33, #loc36])
#loc134 = loc(fused[#loc38, #loc37])
#loc135 = loc(fused[#loc45, #loc46])
#loc136 = loc(fused[#loc47, #loc48])
#loc137 = loc(fused[#loc49, #loc50])
#loc138 = loc(fused[#loc51, #loc52])
#loc139 = loc(fused[#loc53, #loc54])
#loc140 = loc(fused[#loc59, #loc60])
#loc143 = loc(fused[#loc70, #loc71])
#loc144 = loc(fused[#loc74, #loc75])
#loc145 = loc(fused[#loc78, #loc77])
#loc146 = loc(fused[#loc79, #loc80])
#loc147 = loc(fused[#loc81, #loc82])
#loc148 = loc(fused[#loc83, #loc84])
#loc149 = loc(fused[#loc85, #loc86])
#loc150 = loc(fused[#loc87, #loc88])
#loc151 = loc(fused[#loc90, #loc89])
#loc152 = loc(fused[#loc93, #loc94])
#loc153 = loc(fused[#loc95, #loc96])
#loc154 = loc(fused[#loc97, #loc98])
#loc155 = loc(fused[#loc100, #loc99])
#loc156 = loc(fused[#loc101, #loc102])
#loc157 = loc(fused[#loc104, #loc98])
#loc158 = loc(fused[#loc107, #loc110])
#loc159 = loc(fused[#loc112, #loc111])
