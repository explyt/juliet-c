!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc141)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc7)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc8)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc12)
      cir.if %4 {
        %5 = cir.const #cir.int<0> : !s32i loc(#loc14)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
      } loc(#loc146)
    } loc(#loc145)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc20)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc150)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc22)
      } loc(#loc149)
    } loc(#loc148)
    cir.return loc(#loc4)
  } loc(#loc142)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc152)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc153)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc154)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc155)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc24)
  } loc(#loc151)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc42)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
      cir.if %4 {
        %5 = cir.const #cir.int<0> : !s32i loc(#loc48)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
      } loc(#loc161)
    } loc(#loc160)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc52)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc56)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc60)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc166)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc64)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc168)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc66)
          } else {
            %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc36)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc36)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc67)
          } loc(#loc167)
        } loc(#loc165)
      } loc(#loc164)
    } loc(#loc163)
    cir.return loc(#loc38)
  } loc(#loc157)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc73)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc77)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc77)
      cir.if %4 {
        %5 = cir.const #cir.int<0> : !s32i loc(#loc79)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      } loc(#loc173)
    } loc(#loc172)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc83)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc88)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc178)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc92)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc180)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc94)
          } else {
            %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc95)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc95)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc96)
          } loc(#loc179)
        } loc(#loc177)
      } loc(#loc176)
    } loc(#loc175)
    cir.return loc(#loc69)
  } loc(#loc169)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc102)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc106)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc106)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc110)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc110)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc111)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc112)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
      } loc(#loc185)
    } loc(#loc184)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc116)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc116)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc118)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc189)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc120)
      } loc(#loc188)
    } loc(#loc187)
    cir.return loc(#loc98)
  } loc(#loc181)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc126)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc130)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc130)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc132)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
      } loc(#loc194)
    } loc(#loc193)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc136)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc136)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc138)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc198)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc140)
      } loc(#loc197)
    } loc(#loc196)
    cir.return loc(#loc122)
  } loc(#loc190)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_02.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":37:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":24:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":24:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":26:13)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":26:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":26:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":27:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":31:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":27:8)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":28:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":30:16)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":30:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":32:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":36:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":32:8)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":33:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":35:22)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":35:28)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":35:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":139:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":145:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":141:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":141:14)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":142:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":142:14)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":143:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":143:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":144:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":144:14)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":57:19)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":68:23)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":44:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":71:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":46:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":46:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":48:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":48:12)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":48:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":49:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":53:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":49:8)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":50:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":52:16)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":52:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":54:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":70:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":54:8)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":55:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":58:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":60:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":57:9)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":62:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":69:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":62:13)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":62:21)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":63:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":65:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":67:9)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":64:26)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":64:32)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":64:13)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":68:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":74:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":96:1)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":76:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":76:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":78:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":78:12)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":78:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":79:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":83:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":79:8)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":80:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":82:16)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":82:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":84:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":95:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":84:8)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":85:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":87:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":94:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":87:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":87:21)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":88:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":90:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":92:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":89:26)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":89:32)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":89:13)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":93:23)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":93:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":99:1)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":119:1)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":101:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":101:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":103:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":103:12)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":103:5)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":104:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":113:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":104:8)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":105:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":108:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":110:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":107:19)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":107:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":112:16)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":112:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":114:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":118:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":114:8)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":115:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":117:22)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":117:28)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":117:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":122:1)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":137:1)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":124:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":124:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":126:13)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":126:12)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":126:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":127:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":131:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":127:8)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":128:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":130:16)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":130:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":132:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":136:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":132:8)
#loc137 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":133:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":135:22)
#loc139 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":135:28)
#loc140 = loc("CWE369_Divide_by_Zero__int_zero_divide_02.c":135:9)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc3, #loc4])
#loc143 = loc(fused[#loc5, #loc6])
#loc144 = loc(fused[#loc9, #loc7])
#loc145 = loc(fused[#loc10, #loc11])
#loc146 = loc(fused[#loc13, #loc11])
#loc147 = loc(fused[#loc15, #loc14])
#loc148 = loc(fused[#loc16, #loc17])
#loc149 = loc(fused[#loc19, #loc17])
#loc150 = loc(fused[#loc20, #loc21])
#loc151 = loc(fused[#loc23, #loc24])
#loc152 = loc(fused[#loc25, #loc26])
#loc153 = loc(fused[#loc27, #loc28])
#loc154 = loc(fused[#loc29, #loc30])
#loc155 = loc(fused[#loc31, #loc32])
#loc156 = loc(fused[#loc33, #loc34])
#loc157 = loc(fused[#loc37, #loc38])
#loc158 = loc(fused[#loc39, #loc40])
#loc159 = loc(fused[#loc43, #loc41])
#loc160 = loc(fused[#loc44, #loc45])
#loc161 = loc(fused[#loc47, #loc45])
#loc162 = loc(fused[#loc49, #loc48])
#loc163 = loc(fused[#loc50, #loc51])
#loc164 = loc(fused[#loc53, #loc54, #loc55, #loc51])
#loc165 = loc(fused[#loc57, #loc58])
#loc166 = loc(fused[#loc59, #loc60])
#loc167 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc168 = loc(fused[#loc64, #loc65])
#loc169 = loc(fused[#loc68, #loc69])
#loc170 = loc(fused[#loc70, #loc71])
#loc171 = loc(fused[#loc74, #loc72])
#loc172 = loc(fused[#loc75, #loc76])
#loc173 = loc(fused[#loc78, #loc76])
#loc174 = loc(fused[#loc80, #loc79])
#loc175 = loc(fused[#loc81, #loc82])
#loc176 = loc(fused[#loc84, #loc82])
#loc177 = loc(fused[#loc85, #loc86])
#loc178 = loc(fused[#loc87, #loc88])
#loc179 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc180 = loc(fused[#loc92, #loc93])
#loc181 = loc(fused[#loc97, #loc98])
#loc182 = loc(fused[#loc99, #loc100])
#loc183 = loc(fused[#loc103, #loc101])
#loc184 = loc(fused[#loc104, #loc105])
#loc185 = loc(fused[#loc107, #loc108, #loc109, #loc105])
#loc186 = loc(fused[#loc113, #loc112])
#loc187 = loc(fused[#loc114, #loc115])
#loc188 = loc(fused[#loc117, #loc115])
#loc189 = loc(fused[#loc118, #loc119])
#loc190 = loc(fused[#loc121, #loc122])
#loc191 = loc(fused[#loc123, #loc124])
#loc192 = loc(fused[#loc127, #loc125])
#loc193 = loc(fused[#loc128, #loc129])
#loc194 = loc(fused[#loc131, #loc129])
#loc195 = loc(fused[#loc133, #loc132])
#loc196 = loc(fused[#loc134, #loc135])
#loc197 = loc(fused[#loc137, #loc135])
#loc198 = loc(fused[#loc138, #loc139])
