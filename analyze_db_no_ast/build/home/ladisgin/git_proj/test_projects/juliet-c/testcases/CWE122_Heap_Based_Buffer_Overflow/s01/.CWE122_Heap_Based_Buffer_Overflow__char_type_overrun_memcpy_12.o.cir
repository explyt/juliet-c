!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc215)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc216)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc217)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc219)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc222)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc222)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc16)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc225)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc25)
          %6 = cir.const #cir.int<32> : !u64i loc(#loc226)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc227)
          cir.store %8, %4 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc225)
          cir.scope {
            %48 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc30)
            %49 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %50 = cir.cast(bitcast, %49 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc31)
            %51 = cir.cmp(eq, %48, %50) : !cir.ptr<!ty__charVoid>, !s32i loc(#loc229)
            %52 = cir.cast(int_to_bool, %51 : !s32i), !cir.bool loc(#loc32)
            cir.if %52 {
              %53 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc35)
              %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc36)
              cir.call @exit(%55) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
            } loc(#loc230)
          } loc(#loc228)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc7)
          %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc37)
          %13 = cir.get_member %12[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          cir.store %11, %13 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc231)
          %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc39)
          %15 = cir.get_member %14[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          %16 = cir.load %15 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc232)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          %18 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc42)
          %19 = cir.get_member %18[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc233)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc233)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc45)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc45)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
          %25 = cir.const #cir.int<32> : !u64i loc(#loc234)
          cir.libc.memcpy %25 bytes from %24 to %21 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc235)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc50)
          %28 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc51)
          %29 = cir.get_member %28[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %30 = cir.const #cir.int<16> : !u64i loc(#loc236)
          %31 = cir.const #cir.int<1> : !u64i loc(#loc237)
          %32 = cir.binop(div, %30, %31) : !u64i loc(#loc238)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc56)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc239)
          %36 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
          %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc58)
          cir.store %27, %37 : !s8i, !cir.ptr<!s8i> loc(#loc240)
          %38 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc59)
          %39 = cir.get_member %38[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc241)
          cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc61)
          %41 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc62)
          %42 = cir.get_member %41[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          %43 = cir.load %42 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc63)
          %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc242)
          cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc64)
          %45 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc65)
          %46 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc66)
          %47 = cir.cast(bitcast, %46 : !cir.ptr<!ty__charVoid>), !cir.ptr<!void> loc(#loc66)
          cir.call @free(%47) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
        } loc(#loc224)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc244)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc71)
          %6 = cir.const #cir.int<32> : !u64i loc(#loc245)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc246)
          cir.store %8, %4 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc244)
          cir.scope {
            %48 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc76)
            %49 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
            %50 = cir.cast(bitcast, %49 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc77)
            %51 = cir.cmp(eq, %48, %50) : !cir.ptr<!ty__charVoid>, !s32i loc(#loc248)
            %52 = cir.cast(int_to_bool, %51 : !s32i), !cir.bool loc(#loc78)
            cir.if %52 {
              %53 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc80)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc81)
              %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc82)
              cir.call @exit(%55) : (!s32i) -> () extra(#fn_attr) loc(#loc80)
            } loc(#loc249)
          } loc(#loc247)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc83)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc83)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
          %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc84)
          %13 = cir.get_member %12[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          cir.store %11, %13 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc250)
          %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc85)
          %15 = cir.get_member %14[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          %16 = cir.load %15 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc251)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc87)
          %18 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc88)
          %19 = cir.get_member %18[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc252)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc252)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc90)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc90)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc90)
          %25 = cir.const #cir.int<16> : !u64i loc(#loc253)
          cir.libc.memcpy %25 bytes from %24 to %21 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc254)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc95)
          %28 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc96)
          %29 = cir.get_member %28[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %30 = cir.const #cir.int<16> : !u64i loc(#loc255)
          %31 = cir.const #cir.int<1> : !u64i loc(#loc256)
          %32 = cir.binop(div, %30, %31) : !u64i loc(#loc257)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc101)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc101)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc258)
          %36 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc96)
          %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc103)
          cir.store %27, %37 : !s8i, !cir.ptr<!s8i> loc(#loc259)
          %38 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc104)
          %39 = cir.get_member %38[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc260)
          cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc106)
          %41 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc107)
          %42 = cir.get_member %41[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          %43 = cir.load %42 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc108)
          %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc261)
          cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          %45 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc110)
          %46 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc111)
          %47 = cir.cast(bitcast, %46 : !cir.ptr<!ty__charVoid>), !cir.ptr<!void> loc(#loc111)
          cir.call @free(%47) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc110)
        } loc(#loc243)
      } loc(#loc223)
    } loc(#loc221)
    cir.return loc(#loc13)
  } loc(#loc220)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc263)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc114)
    cir.return loc(#loc113)
  } loc(#loc262)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc266)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc266)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc120)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc120)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc269)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc129)
          %6 = cir.const #cir.int<32> : !u64i loc(#loc270)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc271)
          cir.store %8, %4 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc269)
          cir.scope {
            %48 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc134)
            %49 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
            %50 = cir.cast(bitcast, %49 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc135)
            %51 = cir.cmp(eq, %48, %50) : !cir.ptr<!ty__charVoid>, !s32i loc(#loc273)
            %52 = cir.cast(int_to_bool, %51 : !s32i), !cir.bool loc(#loc136)
            cir.if %52 {
              %53 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc138)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc139)
              %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc140)
              cir.call @exit(%55) : (!s32i) -> () extra(#fn_attr) loc(#loc138)
            } loc(#loc274)
          } loc(#loc272)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc141)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc141)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
          %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc142)
          %13 = cir.get_member %12[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          cir.store %11, %13 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc275)
          %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc143)
          %15 = cir.get_member %14[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          %16 = cir.load %15 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc144)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc276)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc145)
          %18 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc146)
          %19 = cir.get_member %18[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc277)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc277)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc148)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc148)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc148)
          %25 = cir.const #cir.int<16> : !u64i loc(#loc278)
          cir.libc.memcpy %25 bytes from %24 to %21 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc279)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc153)
          %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc153)
          %28 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc154)
          %29 = cir.get_member %28[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %30 = cir.const #cir.int<16> : !u64i loc(#loc280)
          %31 = cir.const #cir.int<1> : !u64i loc(#loc281)
          %32 = cir.binop(div, %30, %31) : !u64i loc(#loc282)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc159)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc159)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc283)
          %36 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc154)
          %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc161)
          cir.store %27, %37 : !s8i, !cir.ptr<!s8i> loc(#loc284)
          %38 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc162)
          %39 = cir.get_member %38[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc285)
          cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc164)
          %41 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc165)
          %42 = cir.get_member %41[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          %43 = cir.load %42 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc166)
          %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc286)
          cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc167)
          %45 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc168)
          %46 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc169)
          %47 = cir.cast(bitcast, %46 : !cir.ptr<!ty__charVoid>), !cir.ptr<!void> loc(#loc169)
          cir.call @free(%47) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc168)
        } loc(#loc268)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc288)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc174)
          %6 = cir.const #cir.int<32> : !u64i loc(#loc289)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc174)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc290)
          cir.store %8, %4 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc288)
          cir.scope {
            %48 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc179)
            %49 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc180)
            %50 = cir.cast(bitcast, %49 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc180)
            %51 = cir.cmp(eq, %48, %50) : !cir.ptr<!ty__charVoid>, !s32i loc(#loc292)
            %52 = cir.cast(int_to_bool, %51 : !s32i), !cir.bool loc(#loc181)
            cir.if %52 {
              %53 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc183)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc184)
              %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc185)
              cir.call @exit(%55) : (!s32i) -> () extra(#fn_attr) loc(#loc183)
            } loc(#loc293)
          } loc(#loc291)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc186)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc186)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc186)
          %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc187)
          %13 = cir.get_member %12[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          cir.store %11, %13 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc294)
          %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc188)
          %15 = cir.get_member %14[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          %16 = cir.load %15 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc189)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc295)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc190)
          %18 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc191)
          %19 = cir.get_member %18[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc296)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc296)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc193)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc193)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc193)
          %25 = cir.const #cir.int<16> : !u64i loc(#loc297)
          cir.libc.memcpy %25 bytes from %24 to %21 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc298)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc198)
          %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc198)
          %28 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc199)
          %29 = cir.get_member %28[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %30 = cir.const #cir.int<16> : !u64i loc(#loc299)
          %31 = cir.const #cir.int<1> : !u64i loc(#loc300)
          %32 = cir.binop(div, %30, %31) : !u64i loc(#loc301)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc204)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc204)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc302)
          %36 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc199)
          %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc206)
          cir.store %27, %37 : !s8i, !cir.ptr<!s8i> loc(#loc303)
          %38 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc207)
          %39 = cir.get_member %38[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
          %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc304)
          cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc209)
          %41 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc210)
          %42 = cir.get_member %41[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc38)
          %43 = cir.load %42 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc211)
          %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc305)
          cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc212)
          %45 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc213)
          %46 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc214)
          %47 = cir.cast(bitcast, %46 : !cir.ptr<!ty__charVoid>), !cir.ptr<!void> loc(#loc214)
          cir.call @free(%47) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc213)
        } loc(#loc287)
      } loc(#loc267)
    } loc(#loc265)
    cir.return loc(#loc117)
  } loc(#loc264)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":40:50)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":33:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":67:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":35:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":66:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":35:8)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":35:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":36:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":50:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":52:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":37:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":49:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":38:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":38:76)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":38:53)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":38:60)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":38:75)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":39:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":39:51)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":39:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":39:35)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":39:32)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":39:41)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":39:42)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":39:48)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":39:47)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":40:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":27:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":42:31)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":42:47)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":42:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":44:20)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":26:10)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":44:36)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":44:47)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":44:56)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":44:78)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":44:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":44:79)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":45:93)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":45:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":45:40)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":45:72)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":45:74)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":45:85)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":45:88)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":45:39)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":45:29)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":46:31)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":46:47)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":46:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":47:31)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":47:47)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":47:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":48:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":48:18)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":53:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":65:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":54:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":54:76)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":54:53)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":54:60)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":54:75)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":55:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":55:51)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":55:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":55:35)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":55:32)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":55:41)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":55:42)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":55:48)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":55:47)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":56:50)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":56:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":58:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":58:47)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":58:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":60:20)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":60:36)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":60:47)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":60:56)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":60:88)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":60:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":60:89)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":61:93)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":61:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":61:40)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":61:72)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":61:74)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":61:85)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":61:88)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":61:39)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":61:29)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":62:31)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":62:47)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":62:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":63:31)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":63:47)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":63:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":64:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":64:18)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":110:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":113:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":112:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":112:11)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":74:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":108:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":76:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":107:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":76:8)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":76:33)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":77:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":91:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":93:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":78:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":90:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":79:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":79:76)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":79:53)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":79:60)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":79:75)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":80:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":80:51)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":80:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":80:35)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":80:32)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":80:41)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":80:42)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":80:48)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":80:47)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":81:50)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":81:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":83:31)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":83:47)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":83:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":85:20)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":85:36)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":85:47)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":85:56)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":85:88)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":85:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":85:89)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":86:93)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":86:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":86:40)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":86:72)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":86:74)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":86:85)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":86:88)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":86:39)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":86:29)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":87:31)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":87:47)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":87:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":88:31)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":88:47)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":88:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":89:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":89:18)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":94:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":106:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":95:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":95:76)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":95:53)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":95:60)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":95:75)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":96:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":96:51)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":96:17)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":96:35)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":96:32)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":96:41)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":96:42)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":96:48)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":96:47)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":97:50)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":97:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":99:31)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":99:47)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":99:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":101:20)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":101:36)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":101:47)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":101:56)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":101:88)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":101:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":101:89)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":102:93)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":102:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":102:40)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":102:72)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":102:74)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":102:85)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":102:88)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":102:39)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":102:29)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":103:31)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":103:47)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":103:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":104:31)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":104:47)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":104:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":105:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c":105:18)
#loc215 = loc(fused[#loc1, #loc2])
#loc216 = loc(fused[#loc3, #loc4])
#loc217 = loc(fused[#loc5, #loc6])
#loc218 = loc(fused[#loc8, #loc9])
#loc219 = loc(fused[#loc10, #loc11])
#loc220 = loc(fused[#loc12, #loc13])
#loc221 = loc(fused[#loc14, #loc15])
#loc222 = loc(fused[#loc16, #loc17])
#loc223 = loc(fused[#loc18, #loc19, #loc20, #loc15])
#loc224 = loc(fused[#loc21, #loc22])
#loc225 = loc(fused[#loc23, #loc24])
#loc226 = loc(fused[#loc26, #loc27])
#loc227 = loc(fused[#loc25, #loc24])
#loc228 = loc(fused[#loc28, #loc29])
#loc229 = loc(fused[#loc30, #loc31])
#loc230 = loc(fused[#loc33, #loc29])
#loc231 = loc(fused[#loc37, #loc7])
#loc232 = loc(fused[#loc39, #loc40])
#loc233 = loc(fused[#loc42, #loc44])
#loc234 = loc(fused[#loc46, #loc47])
#loc235 = loc(fused[#loc48, #loc49])
#loc236 = loc(fused[#loc52, #loc53])
#loc237 = loc(fused[#loc54, #loc55])
#loc238 = loc(fused[#loc52, #loc55])
#loc239 = loc(fused[#loc57, #loc56])
#loc240 = loc(fused[#loc51, #loc50])
#loc241 = loc(fused[#loc59, #loc60])
#loc242 = loc(fused[#loc62, #loc63])
#loc243 = loc(fused[#loc67, #loc68])
#loc244 = loc(fused[#loc69, #loc70])
#loc245 = loc(fused[#loc72, #loc73])
#loc246 = loc(fused[#loc71, #loc70])
#loc247 = loc(fused[#loc74, #loc75])
#loc248 = loc(fused[#loc76, #loc77])
#loc249 = loc(fused[#loc79, #loc75])
#loc250 = loc(fused[#loc84, #loc83])
#loc251 = loc(fused[#loc85, #loc86])
#loc252 = loc(fused[#loc88, #loc89])
#loc253 = loc(fused[#loc91, #loc92])
#loc254 = loc(fused[#loc93, #loc94])
#loc255 = loc(fused[#loc97, #loc98])
#loc256 = loc(fused[#loc99, #loc100])
#loc257 = loc(fused[#loc97, #loc100])
#loc258 = loc(fused[#loc102, #loc101])
#loc259 = loc(fused[#loc96, #loc95])
#loc260 = loc(fused[#loc104, #loc105])
#loc261 = loc(fused[#loc107, #loc108])
#loc262 = loc(fused[#loc112, #loc113])
#loc263 = loc(fused[#loc114, #loc115])
#loc264 = loc(fused[#loc116, #loc117])
#loc265 = loc(fused[#loc118, #loc119])
#loc266 = loc(fused[#loc120, #loc121])
#loc267 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc268 = loc(fused[#loc125, #loc126])
#loc269 = loc(fused[#loc127, #loc128])
#loc270 = loc(fused[#loc130, #loc131])
#loc271 = loc(fused[#loc129, #loc128])
#loc272 = loc(fused[#loc132, #loc133])
#loc273 = loc(fused[#loc134, #loc135])
#loc274 = loc(fused[#loc137, #loc133])
#loc275 = loc(fused[#loc142, #loc141])
#loc276 = loc(fused[#loc143, #loc144])
#loc277 = loc(fused[#loc146, #loc147])
#loc278 = loc(fused[#loc149, #loc150])
#loc279 = loc(fused[#loc151, #loc152])
#loc280 = loc(fused[#loc155, #loc156])
#loc281 = loc(fused[#loc157, #loc158])
#loc282 = loc(fused[#loc155, #loc158])
#loc283 = loc(fused[#loc160, #loc159])
#loc284 = loc(fused[#loc154, #loc153])
#loc285 = loc(fused[#loc162, #loc163])
#loc286 = loc(fused[#loc165, #loc166])
#loc287 = loc(fused[#loc170, #loc171])
#loc288 = loc(fused[#loc172, #loc173])
#loc289 = loc(fused[#loc175, #loc176])
#loc290 = loc(fused[#loc174, #loc173])
#loc291 = loc(fused[#loc177, #loc178])
#loc292 = loc(fused[#loc179, #loc180])
#loc293 = loc(fused[#loc182, #loc178])
#loc294 = loc(fused[#loc187, #loc186])
#loc295 = loc(fused[#loc188, #loc189])
#loc296 = loc(fused[#loc191, #loc192])
#loc297 = loc(fused[#loc194, #loc195])
#loc298 = loc(fused[#loc196, #loc197])
#loc299 = loc(fused[#loc200, #loc201])
#loc300 = loc(fused[#loc202, #loc203])
#loc301 = loc(fused[#loc200, #loc203])
#loc302 = loc(fused[#loc205, #loc204])
#loc303 = loc(fused[#loc199, #loc198])
#loc304 = loc(fused[#loc207, #loc208])
#loc305 = loc(fused[#loc210, #loc211])
