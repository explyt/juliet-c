!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc67)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc69)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc70)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc71)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc11)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc15)
    %5 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc16)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc16)
    %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc74)
    %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc74)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc68)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc75)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc31)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc81)
    %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc33)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc37)
    %5 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc38)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc38)
    %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc84)
    %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc84)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc40)
    cir.br ^bb2 loc(#loc36)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc26)
  } loc(#loc78)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc50)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc89)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc52)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc90)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc56)
    %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc56)
    %6 = cir.fabs %5 : !cir.double loc(#loc56)
    %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc57)
    %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc92)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc93)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc62)
    %10 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc63)
    %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc63)
    %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc94)
    %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc94)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc65)
    cir.br ^bb4 loc(#loc60)
  ^bb3:  // pred: ^bb1
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc43)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc55)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc45)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_01.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_01.c":36:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_01.c":33:9)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_01.c":33:40)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_01.c":26:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_01.c":26:11)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_01.c":28:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_01.c":28:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_01.c":30:12)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_01.c":30:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_01.c":31:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_01.c":35:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_01.c":33:28)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_01.c":33:36)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_01.c":34:22)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_01.c":34:9)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_01.c":77:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_01.c":81:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_01.c":79:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_01.c":79:13)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_01.c":80:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_01.c":80:13)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_01.c":43:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_01.c":55:1)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_01.c":52:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_01.c":52:40)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_01.c":45:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_01.c":45:11)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_01.c":47:12)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_01.c":47:5)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_01.c":49:12)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_01.c":49:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_01.c":50:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_01.c":54:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_01.c":52:28)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_01.c":52:36)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_01.c":53:22)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_01.c":53:9)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_01.c":73:19)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_01.c":58:1)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_01.c":75:1)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_01.c":68:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_01.c":68:40)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_01.c":60:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_01.c":60:11)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_01.c":62:12)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_01.c":62:5)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_01.c":64:12)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_01.c":64:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_01.c":66:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_01.c":74:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_01.c":66:13)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_01.c":66:21)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_01.c":66:8)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_01.c":67:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_01.c":70:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_01.c":72:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_01.c":68:28)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_01.c":68:36)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_01.c":69:22)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_01.c":69:9)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_01.c":73:9)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc10, #loc9])
#loc72 = loc(fused[#loc12, #loc11])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc15, #loc16])
#loc75 = loc(fused[#loc19, #loc20])
#loc76 = loc(fused[#loc21, #loc22])
#loc77 = loc(fused[#loc23, #loc24])
#loc78 = loc(fused[#loc25, #loc26])
#loc79 = loc(fused[#loc27, #loc28])
#loc80 = loc(fused[#loc29, #loc30])
#loc81 = loc(fused[#loc32, #loc31])
#loc82 = loc(fused[#loc34, #loc33])
#loc83 = loc(fused[#loc35, #loc36])
#loc84 = loc(fused[#loc37, #loc38])
#loc85 = loc(fused[#loc41, #loc42])
#loc86 = loc(fused[#loc44, #loc45])
#loc87 = loc(fused[#loc46, #loc47])
#loc88 = loc(fused[#loc48, #loc49])
#loc89 = loc(fused[#loc51, #loc50])
#loc90 = loc(fused[#loc53, #loc52])
#loc91 = loc(fused[#loc54, #loc55])
#loc92 = loc(fused[#loc58, #loc57])
#loc93 = loc(fused[#loc59, #loc60, #loc61, #loc55])
#loc94 = loc(fused[#loc62, #loc63])
