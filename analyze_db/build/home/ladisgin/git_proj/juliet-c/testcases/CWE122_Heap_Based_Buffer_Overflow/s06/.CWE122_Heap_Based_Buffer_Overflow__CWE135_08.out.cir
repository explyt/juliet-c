!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":217:10)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":217:14)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":217:20)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":217:32)
#loc480 = loc(fused[#loc109, #loc110])
#loc481 = loc(fused[#loc111, #loc112])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc437)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc438)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc439)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc440)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc441)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc442)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc443)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc444)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc446)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc447)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc449)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc25)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc25)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc452)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc32)
          %7 = cir.const #cir.int<50> : !s32i loc(#loc33)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc33)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc453)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc454)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc455)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc452)
          cir.scope {
            %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc39)
            %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc457)
            cir.if %31 {
              %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
              %33 = cir.const #cir.int<1> : !s32i loc(#loc42)
              %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc43)
              cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
            } loc(#loc458)
          } loc(#loc456)
          %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
          %14 = cir.const #cir.int<65> : !s32i loc(#loc45)
          %15 = cir.const #cir.int<50> : !s32i loc(#loc46)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc46)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc46)
          %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc48)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc49)
          %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
          %22 = cir.const #cir.int<50> : !s32i loc(#loc51)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc52)
          %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc51)
          %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc53)
          cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc459)
          %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc54)
          cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc460)
        } loc(#loc451)
      } loc(#loc450)
    } loc(#loc448)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc462)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc58)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc58)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc465)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc466)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc67)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc68)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc67)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc465)
          %11 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc69)
          %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc70)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc71)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc71)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc467)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc468)
          %17 = cir.call @calloc(%15, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
          cir.store %17, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc466)
          cir.scope {
            %27 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc76)
            %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
            %29 = cir.cmp(eq, %27, %28) : !cir.ptr<!void>, !cir.bool loc(#loc470)
            cir.if %29 {
              %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc79)
              %31 = cir.const #cir.int<1> : !s32i loc(#loc80)
              %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc81)
              cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc79)
            } loc(#loc471)
          } loc(#loc469)
          %18 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
          %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc84)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc85)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc86)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc87)
          %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc87)
        } loc(#loc464)
      } loc(#loc463)
    } loc(#loc461)
    cir.return loc(#loc18)
  } loc(#loc445)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc473)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc91)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc474)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc93)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc475)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc95)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc476)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc97)
    cir.return loc(#loc90)
  } loc(#loc472)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc477)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc478)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc106)
  cir.func @main(%arg0: !s32i loc(fused[#loc109, #loc110]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc111, #loc112])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc480)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc481)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc113)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc114)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc115)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc115)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc116)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc103)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc482)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_08_good() : () -> () loc(#loc118)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc104)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc105)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc483)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_08_bad() : () -> () loc(#loc122)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc106)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc484)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc484)
    cir.return %17 : !s32i loc(#loc484)
  } loc(#loc479)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc129)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc486)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc486)
    cir.return %2 : !s32i loc(#loc486)
  } loc(#loc485)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc131)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc487)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc488)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc490)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc491)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc493)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc144)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc144)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc496)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc151)
          %7 = cir.const #cir.int<50> : !s32i loc(#loc152)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc152)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc497)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc498)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc499)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc496)
          cir.scope {
            %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc158)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc158)
            %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc501)
            cir.if %31 {
              %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc160)
              %33 = cir.const #cir.int<1> : !s32i loc(#loc161)
              %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc162)
              cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc160)
            } loc(#loc502)
          } loc(#loc500)
          %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
          %14 = cir.const #cir.int<65> : !s32i loc(#loc164)
          %15 = cir.const #cir.int<50> : !s32i loc(#loc165)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc166)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc165)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc165)
          %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc167)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc168)
          %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
          %22 = cir.const #cir.int<50> : !s32i loc(#loc170)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc171)
          %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc170)
          %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc172)
          cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc503)
          %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc173)
          cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc504)
        } loc(#loc495)
      } loc(#loc494)
    } loc(#loc492)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc506)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc177)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc177)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc182)
      } else {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc509)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc510)
          %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc189)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc190)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc190)
          %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc189)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc509)
          %11 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc191)
          %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc192)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc193)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc511)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc512)
          %17 = cir.call @calloc(%15, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc191)
          cir.store %17, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc510)
          cir.scope {
            %27 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc198)
            %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc199)
            %29 = cir.cmp(eq, %27, %28) : !cir.ptr<!void>, !cir.bool loc(#loc514)
            cir.if %29 {
              %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc201)
              %31 = cir.const #cir.int<1> : !s32i loc(#loc202)
              %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc203)
              cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc201)
            } loc(#loc515)
          } loc(#loc513)
          %18 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc204)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc204)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc205)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc205)
          %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc206)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc207)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc207)
          cir.call @printWLine(%24) : (!cir.ptr<!s32i>) -> () loc(#loc208)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc209)
          %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc210)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc209)
        } loc(#loc508)
      } loc(#loc507)
    } loc(#loc505)
    cir.return loc(#loc137)
  } loc(#loc489)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc213)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc517)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc517)
    cir.return %2 : !s32i loc(#loc517)
  } loc(#loc516)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc519)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc219)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc520)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc522)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc223)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc223)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc525)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc230)
          %7 = cir.const #cir.int<50> : !s32i loc(#loc231)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc231)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc526)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc527)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc230)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc528)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc525)
          cir.scope {
            %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc236)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc237)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc237)
            %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc530)
            cir.if %31 {
              %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc239)
              %33 = cir.const #cir.int<1> : !s32i loc(#loc240)
              %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc241)
              cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc239)
            } loc(#loc531)
          } loc(#loc529)
          %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc242)
          %14 = cir.const #cir.int<65> : !s32i loc(#loc243)
          %15 = cir.const #cir.int<50> : !s32i loc(#loc244)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc245)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc244)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc244)
          %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc246)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc247)
          %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc248)
          %22 = cir.const #cir.int<50> : !s32i loc(#loc249)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc250)
          %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc249)
          %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc251)
          cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc532)
          %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc252)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc252)
          cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc533)
        } loc(#loc524)
      } loc(#loc523)
    } loc(#loc521)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc535)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc256)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc256)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc538)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc539)
          %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc265)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc266)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc266)
          %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc265)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc538)
          %11 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc267)
          %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc268)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc269)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc269)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc540)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc541)
          %17 = cir.call @calloc(%15, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc267)
          cir.store %17, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc539)
          cir.scope {
            %27 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc274)
            %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc275)
            %29 = cir.cmp(eq, %27, %28) : !cir.ptr<!void>, !cir.bool loc(#loc543)
            cir.if %29 {
              %30 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc277)
              %31 = cir.const #cir.int<1> : !s32i loc(#loc278)
              %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc279)
              cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc277)
            } loc(#loc544)
          } loc(#loc542)
          %18 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc280)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc280)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc281)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc281)
          %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc282)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc283)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc283)
          cir.call @printWLine(%24) : (!cir.ptr<!s32i>) -> () loc(#loc284)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc285)
          %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc286)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc285)
        } loc(#loc537)
      } loc(#loc536)
    } loc(#loc534)
    cir.return loc(#loc216)
  } loc(#loc518)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc545)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc547)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc293)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc548)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc550)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc297)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc297)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc302)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc302)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc303)
      } else {
        cir.scope {
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc553)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc308)
          %7 = cir.const #cir.int<50> : !s32i loc(#loc309)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc309)
          %9 = cir.const #cir.int<1> : !u64i loc(#loc554)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc555)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc308)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc556)
          cir.store %12, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc553)
          cir.scope {
            %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc314)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc315)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc315)
            %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s8i>, !cir.bool loc(#loc558)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc317)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc318)
              %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc319)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc317)
            } loc(#loc559)
          } loc(#loc557)
          %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc320)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc320)
          %15 = cir.const #cir.int<65> : !s32i loc(#loc321)
          %16 = cir.const #cir.int<50> : !s32i loc(#loc322)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc323)
          %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc322)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc322)
          cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc560)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc326)
          %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc326)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc327)
          %23 = cir.const #cir.int<50> : !s32i loc(#loc328)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc329)
          %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc328)
          %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc330)
          cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc561)
          %27 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc331)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc331)
          cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc562)
        } loc(#loc552)
      } loc(#loc551)
    } loc(#loc549)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc564)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc335)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc335)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc567)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc568)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc344)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc345)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc345)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc344)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc567)
          %11 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc346)
          %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc347)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc348)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc348)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc569)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc349)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc349)
          %18 = cir.call @calloc(%15, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc346)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc568)
          cir.scope {
            %29 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc352)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc353)
            %31 = cir.cmp(eq, %29, %30) : !cir.ptr<!void>, !cir.bool loc(#loc571)
            cir.if %31 {
              %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc355)
              %33 = cir.const #cir.int<1> : !s32i loc(#loc356)
              %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc357)
              cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc355)
            } loc(#loc572)
          } loc(#loc570)
          %19 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc358)
          %20 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc359)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc359)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc360)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc360)
          %24 = cir.call @strcpy(%21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc358)
          %25 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc361)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc361)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc362)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc363)
          %28 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc364)
          cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc363)
        } loc(#loc566)
      } loc(#loc565)
    } loc(#loc563)
    cir.return loc(#loc290)
  } loc(#loc546)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc574)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc369)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc575)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc577)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc373)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc373)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc580)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc380)
          %7 = cir.const #cir.int<50> : !s32i loc(#loc381)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc381)
          %9 = cir.const #cir.int<1> : !u64i loc(#loc581)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc582)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc380)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc583)
          cir.store %12, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc580)
          cir.scope {
            %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc386)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc387)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc387)
            %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s8i>, !cir.bool loc(#loc585)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc389)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc390)
              %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc391)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc389)
            } loc(#loc586)
          } loc(#loc584)
          %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc392)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc392)
          %15 = cir.const #cir.int<65> : !s32i loc(#loc393)
          %16 = cir.const #cir.int<50> : !s32i loc(#loc394)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc395)
          %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc394)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc394)
          cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc587)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc398)
          %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc398)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc399)
          %23 = cir.const #cir.int<50> : !s32i loc(#loc400)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc401)
          %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc400)
          %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc402)
          cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc588)
          %27 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc403)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc403)
          cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc589)
        } loc(#loc579)
      } loc(#loc578)
    } loc(#loc576)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc591)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc407)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc407)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc594)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc595)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc416)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc417)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc417)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc416)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc594)
          %11 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc418)
          %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc419)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc420)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc420)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc596)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc421)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc421)
          %18 = cir.call @calloc(%15, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc418)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc595)
          cir.scope {
            %29 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc424)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc425)
            %31 = cir.cmp(eq, %29, %30) : !cir.ptr<!void>, !cir.bool loc(#loc598)
            cir.if %31 {
              %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc427)
              %33 = cir.const #cir.int<1> : !s32i loc(#loc428)
              %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc429)
              cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc427)
            } loc(#loc599)
          } loc(#loc597)
          %19 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc430)
          %20 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc431)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc431)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc432)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc432)
          %24 = cir.call @strcpy(%21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc430)
          %25 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc433)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc433)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc434)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc435)
          %28 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc436)
          cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc435)
        } loc(#loc593)
      } loc(#loc592)
    } loc(#loc590)
    cir.return loc(#loc366)
  } loc(#loc573)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":37:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":64:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":39:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":39:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":40:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":40:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":41:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":51:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":41:8)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":41:26)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":42:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":43:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":50:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":44:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":44:75)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":44:50)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":44:57)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":44:60)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":44:74)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":45:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":45:50)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":45:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":45:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":45:40)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":45:41)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":45:47)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":45:46)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":46:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":46:36)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":46:42)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":46:45)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":46:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":47:35)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":47:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":47:27)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":47:30)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":47:31)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":49:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":49:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":52:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":63:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":52:8)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":52:26)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":53:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":54:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":62:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":56:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":56:49)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":57:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":57:68)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":56:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":56:45)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":57:35)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":57:42)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":57:50)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":57:53)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":57:67)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":58:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":58:41)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":58:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":58:25)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":58:31)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":58:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":58:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":58:37)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":59:26)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":59:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":59:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":60:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":60:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":61:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":61:18)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":200:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":206:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":202:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":202:14)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":203:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":203:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":204:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":204:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":205:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":205:14)
#loc99 = loc("/usr/include/stdlib.h":575:1)
#loc100 = loc("/usr/include/stdlib.h":575:41)
#loc101 = loc("/usr/include/time.h":76:1)
#loc102 = loc("/usr/include/time.h":76:38)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":222:15)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":224:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":227:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":229:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":217:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":232:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":218:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":220:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":220:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":220:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":222:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":223:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":223:55)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":224:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":227:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":228:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":228:54)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":229:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":231:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":231:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":25:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":28:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":27:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":27:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":89:19)
#loc132 = loc("/usr/include/wchar.h":247:1)
#loc133 = loc("/usr/include/wchar.h":247:51)
#loc134 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc135 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":71:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":103:1)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":73:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":73:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":74:12)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":74:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":75:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":85:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":75:8)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":75:26)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":76:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":77:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":84:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":78:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":78:75)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":78:50)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":78:57)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":78:60)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":78:74)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":79:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":79:50)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":79:17)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":79:34)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":79:40)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":79:41)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":79:47)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":79:46)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":80:21)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":80:36)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":80:42)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":80:45)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":80:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":81:35)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":81:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":81:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":81:30)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":81:31)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":83:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":83:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":86:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":102:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":86:8)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":86:27)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":87:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":90:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":92:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":89:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":93:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":101:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":95:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":95:52)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":96:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":96:68)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":95:30)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":95:48)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":96:35)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":96:42)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":96:50)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":96:53)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":96:67)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":97:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":97:41)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":97:17)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":97:25)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":97:31)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":97:32)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":97:38)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":97:37)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":98:26)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":98:32)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":98:19)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":99:35)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":99:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":100:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":100:18)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":30:1)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":33:1)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":32:12)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":32:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":106:1)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":133:1)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":108:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":108:12)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":109:12)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":109:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":110:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":120:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":110:8)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":110:26)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":111:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":112:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":119:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":113:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":113:75)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":113:50)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":113:57)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":113:60)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":113:74)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":114:13)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":114:50)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":114:17)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":114:34)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":114:40)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":114:41)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":114:47)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":114:46)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":115:21)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":115:36)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":115:42)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":115:45)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":115:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":116:35)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":116:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":116:27)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":116:30)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":116:31)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":118:28)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":118:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":121:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":132:5)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":121:8)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":121:26)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":122:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":123:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":131:9)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":125:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":125:52)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":126:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":126:68)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":125:30)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":125:48)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":126:35)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":126:42)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":126:50)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":126:53)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":126:67)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":127:13)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":127:41)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":127:17)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":127:25)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":127:31)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":127:32)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":127:38)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":127:37)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":128:26)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":128:32)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":128:19)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":129:35)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":129:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":130:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":130:18)
#loc287 = loc("/usr/include/string.h":141:1)
#loc288 = loc("/usr/include/string.h":142:14)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":136:1)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":168:1)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":138:5)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":138:12)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":139:12)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":139:5)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":140:5)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":155:5)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":140:8)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":140:27)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":141:5)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":144:5)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":146:5)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":143:19)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":143:9)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":147:9)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":154:9)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":148:13)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":148:67)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":148:45)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":148:52)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":148:55)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":148:66)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":149:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":149:51)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":149:17)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":149:35)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":149:41)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":149:42)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":149:48)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":149:47)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":150:20)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":150:36)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":150:41)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":150:44)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":150:13)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":150:45)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":151:36)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":151:13)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":151:28)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":151:31)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":151:32)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":153:28)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":153:13)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":156:5)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":167:5)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":156:8)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":156:26)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":157:5)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":158:9)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":166:9)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":160:13)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":160:49)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":161:13)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":161:54)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":160:30)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":160:45)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":161:35)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":161:42)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":161:50)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":161:53)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":162:13)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":162:41)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":162:17)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":162:25)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":162:31)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":162:32)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":162:38)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":162:37)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":163:19)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":163:26)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":163:32)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":164:31)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":164:13)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":165:13)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":165:18)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":171:1)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":198:1)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":173:5)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":173:12)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":174:12)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":174:5)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":175:5)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":185:5)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":175:8)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":175:26)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":176:5)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":177:9)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":184:9)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":178:13)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":178:67)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":178:45)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":178:52)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":178:55)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":178:66)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":179:13)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":179:51)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":179:17)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":179:35)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":179:41)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":179:42)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":179:48)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":179:47)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":180:20)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":180:36)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":180:41)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":180:44)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":180:13)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":180:45)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":181:36)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":181:13)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":181:28)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":181:31)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":181:32)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":183:28)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":183:13)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":186:5)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":197:5)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":186:8)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":186:26)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":187:5)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":188:9)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":196:9)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":190:13)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":190:49)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":191:13)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":191:54)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":190:30)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":190:45)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":191:35)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":191:42)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":191:50)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":191:53)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":192:13)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":192:41)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":192:17)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":192:25)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":192:31)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":192:32)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":192:38)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":192:37)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":193:19)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":193:26)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":193:32)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":194:31)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":194:13)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":195:13)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c":195:18)
#loc437 = loc(fused[#loc1, #loc2])
#loc438 = loc(fused[#loc3, #loc4])
#loc439 = loc(fused[#loc5, #loc6])
#loc440 = loc(fused[#loc7, #loc8])
#loc441 = loc(fused[#loc9, #loc10])
#loc442 = loc(fused[#loc11, #loc12])
#loc443 = loc(fused[#loc13, #loc14])
#loc444 = loc(fused[#loc15, #loc16])
#loc445 = loc(fused[#loc17, #loc18])
#loc446 = loc(fused[#loc19, #loc20])
#loc447 = loc(fused[#loc22, #loc21])
#loc448 = loc(fused[#loc23, #loc24])
#loc449 = loc(fused[#loc25, #loc26])
#loc450 = loc(fused[#loc27, #loc24])
#loc451 = loc(fused[#loc28, #loc29])
#loc452 = loc(fused[#loc30, #loc31])
#loc453 = loc(fused[#loc34, #loc35])
#loc454 = loc(fused[#loc33, #loc35])
#loc455 = loc(fused[#loc32, #loc31])
#loc456 = loc(fused[#loc36, #loc37])
#loc457 = loc(fused[#loc38, #loc39])
#loc458 = loc(fused[#loc40, #loc37])
#loc459 = loc(fused[#loc50, #loc49])
#loc460 = loc(fused[#loc55, #loc54])
#loc461 = loc(fused[#loc56, #loc57])
#loc462 = loc(fused[#loc58, #loc59])
#loc463 = loc(fused[#loc60, #loc57])
#loc464 = loc(fused[#loc61, #loc62])
#loc465 = loc(fused[#loc63, #loc64])
#loc466 = loc(fused[#loc65, #loc66])
#loc467 = loc(fused[#loc70, #loc71])
#loc468 = loc(fused[#loc72, #loc73])
#loc469 = loc(fused[#loc74, #loc75])
#loc470 = loc(fused[#loc76, #loc77])
#loc471 = loc(fused[#loc78, #loc75])
#loc472 = loc(fused[#loc89, #loc90])
#loc473 = loc(fused[#loc91, #loc92])
#loc474 = loc(fused[#loc93, #loc94])
#loc475 = loc(fused[#loc95, #loc96])
#loc476 = loc(fused[#loc97, #loc98])
#loc477 = loc(fused[#loc99, #loc100])
#loc478 = loc(fused[#loc101, #loc102])
#loc479 = loc(fused[#loc107, #loc108])
#loc482 = loc(fused[#loc118, #loc119])
#loc483 = loc(fused[#loc122, #loc123])
#loc484 = loc(fused[#loc126, #loc125])
#loc485 = loc(fused[#loc127, #loc128])
#loc486 = loc(fused[#loc130, #loc129])
#loc487 = loc(fused[#loc132, #loc133])
#loc488 = loc(fused[#loc134, #loc135])
#loc489 = loc(fused[#loc136, #loc137])
#loc490 = loc(fused[#loc138, #loc139])
#loc491 = loc(fused[#loc141, #loc140])
#loc492 = loc(fused[#loc142, #loc143])
#loc493 = loc(fused[#loc144, #loc145])
#loc494 = loc(fused[#loc146, #loc143])
#loc495 = loc(fused[#loc147, #loc148])
#loc496 = loc(fused[#loc149, #loc150])
#loc497 = loc(fused[#loc153, #loc154])
#loc498 = loc(fused[#loc152, #loc154])
#loc499 = loc(fused[#loc151, #loc150])
#loc500 = loc(fused[#loc155, #loc156])
#loc501 = loc(fused[#loc157, #loc158])
#loc502 = loc(fused[#loc159, #loc156])
#loc503 = loc(fused[#loc169, #loc168])
#loc504 = loc(fused[#loc174, #loc173])
#loc505 = loc(fused[#loc175, #loc176])
#loc506 = loc(fused[#loc177, #loc178])
#loc507 = loc(fused[#loc179, #loc180, #loc181, #loc176])
#loc508 = loc(fused[#loc183, #loc184])
#loc509 = loc(fused[#loc185, #loc186])
#loc510 = loc(fused[#loc187, #loc188])
#loc511 = loc(fused[#loc192, #loc193])
#loc512 = loc(fused[#loc194, #loc195])
#loc513 = loc(fused[#loc196, #loc197])
#loc514 = loc(fused[#loc198, #loc199])
#loc515 = loc(fused[#loc200, #loc197])
#loc516 = loc(fused[#loc211, #loc212])
#loc517 = loc(fused[#loc214, #loc213])
#loc518 = loc(fused[#loc215, #loc216])
#loc519 = loc(fused[#loc217, #loc218])
#loc520 = loc(fused[#loc220, #loc219])
#loc521 = loc(fused[#loc221, #loc222])
#loc522 = loc(fused[#loc223, #loc224])
#loc523 = loc(fused[#loc225, #loc222])
#loc524 = loc(fused[#loc226, #loc227])
#loc525 = loc(fused[#loc228, #loc229])
#loc526 = loc(fused[#loc232, #loc233])
#loc527 = loc(fused[#loc231, #loc233])
#loc528 = loc(fused[#loc230, #loc229])
#loc529 = loc(fused[#loc234, #loc235])
#loc530 = loc(fused[#loc236, #loc237])
#loc531 = loc(fused[#loc238, #loc235])
#loc532 = loc(fused[#loc248, #loc247])
#loc533 = loc(fused[#loc253, #loc252])
#loc534 = loc(fused[#loc254, #loc255])
#loc535 = loc(fused[#loc256, #loc257])
#loc536 = loc(fused[#loc258, #loc255])
#loc537 = loc(fused[#loc259, #loc260])
#loc538 = loc(fused[#loc261, #loc262])
#loc539 = loc(fused[#loc263, #loc264])
#loc540 = loc(fused[#loc268, #loc269])
#loc541 = loc(fused[#loc270, #loc271])
#loc542 = loc(fused[#loc272, #loc273])
#loc543 = loc(fused[#loc274, #loc275])
#loc544 = loc(fused[#loc276, #loc273])
#loc545 = loc(fused[#loc287, #loc288])
#loc546 = loc(fused[#loc289, #loc290])
#loc547 = loc(fused[#loc291, #loc292])
#loc548 = loc(fused[#loc294, #loc293])
#loc549 = loc(fused[#loc295, #loc296])
#loc550 = loc(fused[#loc297, #loc298])
#loc551 = loc(fused[#loc299, #loc300, #loc301, #loc296])
#loc552 = loc(fused[#loc304, #loc305])
#loc553 = loc(fused[#loc306, #loc307])
#loc554 = loc(fused[#loc310, #loc311])
#loc555 = loc(fused[#loc309, #loc311])
#loc556 = loc(fused[#loc308, #loc307])
#loc557 = loc(fused[#loc312, #loc313])
#loc558 = loc(fused[#loc314, #loc315])
#loc559 = loc(fused[#loc316, #loc313])
#loc560 = loc(fused[#loc324, #loc325])
#loc561 = loc(fused[#loc327, #loc326])
#loc562 = loc(fused[#loc332, #loc331])
#loc563 = loc(fused[#loc333, #loc334])
#loc564 = loc(fused[#loc335, #loc336])
#loc565 = loc(fused[#loc337, #loc334])
#loc566 = loc(fused[#loc338, #loc339])
#loc567 = loc(fused[#loc340, #loc341])
#loc568 = loc(fused[#loc342, #loc343])
#loc569 = loc(fused[#loc347, #loc348])
#loc570 = loc(fused[#loc350, #loc351])
#loc571 = loc(fused[#loc352, #loc353])
#loc572 = loc(fused[#loc354, #loc351])
#loc573 = loc(fused[#loc365, #loc366])
#loc574 = loc(fused[#loc367, #loc368])
#loc575 = loc(fused[#loc370, #loc369])
#loc576 = loc(fused[#loc371, #loc372])
#loc577 = loc(fused[#loc373, #loc374])
#loc578 = loc(fused[#loc375, #loc372])
#loc579 = loc(fused[#loc376, #loc377])
#loc580 = loc(fused[#loc378, #loc379])
#loc581 = loc(fused[#loc382, #loc383])
#loc582 = loc(fused[#loc381, #loc383])
#loc583 = loc(fused[#loc380, #loc379])
#loc584 = loc(fused[#loc384, #loc385])
#loc585 = loc(fused[#loc386, #loc387])
#loc586 = loc(fused[#loc388, #loc385])
#loc587 = loc(fused[#loc396, #loc397])
#loc588 = loc(fused[#loc399, #loc398])
#loc589 = loc(fused[#loc404, #loc403])
#loc590 = loc(fused[#loc405, #loc406])
#loc591 = loc(fused[#loc407, #loc408])
#loc592 = loc(fused[#loc409, #loc406])
#loc593 = loc(fused[#loc410, #loc411])
#loc594 = loc(fused[#loc412, #loc413])
#loc595 = loc(fused[#loc414, #loc415])
#loc596 = loc(fused[#loc419, #loc420])
#loc597 = loc(fused[#loc422, #loc423])
#loc598 = loc(fused[#loc424, #loc425])
#loc599 = loc(fused[#loc426, #loc423])
