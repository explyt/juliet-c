!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc233)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc234)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc235)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc236)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc237)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc242)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc242)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc23)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc244)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc245)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc246)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc249)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc35)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc250)
        } loc(#loc248)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc36)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc38)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc39)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc251)
      } loc(#loc243)
    } loc(#loc241)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc253)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc254)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc46)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc46)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc47)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc48)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc48)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc48)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc255)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc52)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc52)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc53)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc54)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc53)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc55)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc55)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc256)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc58)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc258)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc61)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc61)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc259)
          cir.condition(%34) loc(#loc62)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc65)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc65)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc65)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc67)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc68)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc261)
          } loc(#loc260)
          cir.yield loc(#loc57)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc70)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc71)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc262)
          cir.yield loc(#loc257)
        } loc(#loc257)
      } loc(#loc257)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc72)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc74)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc75)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc74)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc76)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc263)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc79)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc79)
    } loc(#loc252)
    cir.return loc(#loc12)
  } loc(#loc238)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc265)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc83)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc266)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc85)
    cir.return loc(#loc82)
  } loc(#loc264)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc267)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc89)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc269)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc94)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc270)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc272)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc272)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc98)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc98)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc89)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc89)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc103)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc104)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc105)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc105)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc274)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc275)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc104)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc276)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc277)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc113)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc113)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc279)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc115)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc116)
            %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc117)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc115)
          } loc(#loc280)
        } loc(#loc278)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc118)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc118)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc120)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc121)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc281)
      } loc(#loc273)
    } loc(#loc271)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc283)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc284)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc128)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc129)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc130)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc131)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc130)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc130)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc285)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc134)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc134)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc135)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc136)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc135)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc137)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc137)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc286)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc140)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc140)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc288)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc142)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc143)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc143)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc289)
          cir.condition(%34) loc(#loc144)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc146)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc147)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc147)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc147)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc149)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc150)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc291)
          } loc(#loc290)
          cir.yield loc(#loc139)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc152)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc153)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc292)
          cir.yield loc(#loc287)
        } loc(#loc287)
      } loc(#loc287)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc154)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc154)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc156)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc156)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc158)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc293)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc160)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc161)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc161)
    } loc(#loc282)
    cir.return loc(#loc91)
  } loc(#loc268)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc295)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc167)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc296)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc298)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc298)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc171)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc171)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc174)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc175)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc175)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc300)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc301)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc174)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc302)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc303)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc183)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc305)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc185)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc186)
            %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc187)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc185)
          } loc(#loc306)
        } loc(#loc304)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc188)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc188)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc190)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc191)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc307)
      } loc(#loc299)
    } loc(#loc297)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc309)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc310)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc198)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc198)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc199)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc200)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc201)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc200)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc200)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc311)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc204)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc204)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc205)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc206)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc205)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc207)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc207)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc312)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc210)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc210)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc314)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc212)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc213)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc213)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc315)
          cir.condition(%34) loc(#loc214)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc216)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc217)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc217)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc217)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc218)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc219)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc220)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc317)
          } loc(#loc316)
          cir.yield loc(#loc209)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc222)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc223)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc318)
          cir.yield loc(#loc313)
        } loc(#loc313)
      } loc(#loc313)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc224)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc224)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc225)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc226)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc227)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc226)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc228)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc319)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc229)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc230)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc231)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc232)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc232)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc231)
    } loc(#loc308)
    cir.return loc(#loc164)
  } loc(#loc294)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":48:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":26:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":26:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":33:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":27:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":27:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":30:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":30:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":30:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":30:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":30:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":30:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":31:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":31:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":31:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":31:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":31:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":31:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":31:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":31:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":32:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":32:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":32:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":34:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":47:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":35:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":35:16)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":36:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":36:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":37:16)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":37:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":37:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":37:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":37:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":37:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":38:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":38:16)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":38:20)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":38:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":40:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":43:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":40:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":40:14)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":40:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":40:25)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":40:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":41:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":42:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":42:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":42:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":42:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":42:19)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":42:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":40:31)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":40:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":44:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":44:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":44:14)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":44:18)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":44:19)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":45:19)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":45:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":46:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":46:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":115:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":119:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":117:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":117:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":118:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":118:14)
#loc87 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc88 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":62:19)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":55:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":85:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":57:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":57:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":58:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":58:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":59:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":70:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":59:8)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":59:27)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":60:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":63:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":65:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":62:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":67:24)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":67:31)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":67:35)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":67:46)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":67:47)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":67:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":68:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":68:37)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":68:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":68:21)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":68:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":68:28)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":68:34)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":68:33)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":69:19)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":69:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":69:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":69:15)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":71:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":84:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":72:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":72:16)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":73:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":73:24)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":74:16)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":74:24)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":74:29)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":74:33)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":74:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":74:34)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":75:25)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":75:16)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":75:20)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":75:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":77:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":80:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":77:18)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":77:14)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":77:21)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":77:25)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":77:23)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":78:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":79:30)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":79:23)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":79:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":79:18)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":79:19)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":79:31)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":77:31)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":77:30)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":81:23)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":81:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":81:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":81:18)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":81:19)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":82:19)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":82:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":83:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":83:14)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":88:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":113:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":90:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":90:12)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":91:12)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":91:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":92:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":98:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":92:8)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":92:26)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":93:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":95:24)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":95:31)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":95:35)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":95:46)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":95:47)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":95:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":96:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":96:37)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":96:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":96:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":96:27)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":96:28)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":96:34)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":96:33)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":97:19)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":97:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":97:14)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":97:15)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":99:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":112:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":100:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":100:16)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":101:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":101:24)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":102:16)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":102:24)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":102:29)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":102:33)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":102:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":102:34)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":103:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":103:16)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":103:20)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":103:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":105:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":108:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":105:18)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":105:14)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":105:21)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":105:25)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":105:23)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":106:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":107:30)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":107:23)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":107:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":107:18)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":107:19)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":107:31)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":105:31)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":105:30)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":109:23)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":109:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":109:14)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":109:18)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":109:19)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":110:19)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":110:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":111:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c":111:14)
#loc233 = loc(fused[#loc1, #loc2])
#loc234 = loc(fused[#loc3, #loc4])
#loc235 = loc(fused[#loc5, #loc6])
#loc236 = loc(fused[#loc7, #loc8])
#loc237 = loc(fused[#loc9, #loc10])
#loc238 = loc(fused[#loc11, #loc12])
#loc239 = loc(fused[#loc13, #loc14])
#loc240 = loc(fused[#loc16, #loc15])
#loc241 = loc(fused[#loc17, #loc18])
#loc242 = loc(fused[#loc19, #loc20])
#loc243 = loc(fused[#loc21, #loc18])
#loc244 = loc(fused[#loc24, #loc25])
#loc245 = loc(fused[#loc23, #loc25])
#loc246 = loc(fused[#loc22, #loc26])
#loc247 = loc(fused[#loc27, #loc26])
#loc248 = loc(fused[#loc28, #loc29])
#loc249 = loc(fused[#loc30, #loc31])
#loc250 = loc(fused[#loc32, #loc29])
#loc251 = loc(fused[#loc37, #loc36])
#loc252 = loc(fused[#loc40, #loc41])
#loc253 = loc(fused[#loc42, #loc43])
#loc254 = loc(fused[#loc44, #loc45])
#loc255 = loc(fused[#loc50, #loc51])
#loc256 = loc(fused[#loc55, #loc52])
#loc257 = loc(fused[#loc56, #loc57])
#loc258 = loc(fused[#loc59, #loc58])
#loc259 = loc(fused[#loc60, #loc61])
#loc260 = loc(fused[#loc63, #loc57])
#loc261 = loc(fused[#loc66, #loc69])
#loc262 = loc(fused[#loc71, #loc70])
#loc263 = loc(fused[#loc73, #loc72])
#loc264 = loc(fused[#loc81, #loc82])
#loc265 = loc(fused[#loc83, #loc84])
#loc266 = loc(fused[#loc85, #loc86])
#loc267 = loc(fused[#loc87, #loc88])
#loc268 = loc(fused[#loc90, #loc91])
#loc269 = loc(fused[#loc92, #loc93])
#loc270 = loc(fused[#loc95, #loc94])
#loc271 = loc(fused[#loc96, #loc97])
#loc272 = loc(fused[#loc98, #loc99])
#loc273 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc274 = loc(fused[#loc106, #loc107])
#loc275 = loc(fused[#loc105, #loc107])
#loc276 = loc(fused[#loc104, #loc108])
#loc277 = loc(fused[#loc109, #loc108])
#loc278 = loc(fused[#loc110, #loc111])
#loc279 = loc(fused[#loc112, #loc113])
#loc280 = loc(fused[#loc114, #loc111])
#loc281 = loc(fused[#loc119, #loc118])
#loc282 = loc(fused[#loc122, #loc123])
#loc283 = loc(fused[#loc124, #loc125])
#loc284 = loc(fused[#loc126, #loc127])
#loc285 = loc(fused[#loc132, #loc133])
#loc286 = loc(fused[#loc137, #loc134])
#loc287 = loc(fused[#loc138, #loc139])
#loc288 = loc(fused[#loc141, #loc140])
#loc289 = loc(fused[#loc142, #loc143])
#loc290 = loc(fused[#loc145, #loc139])
#loc291 = loc(fused[#loc148, #loc151])
#loc292 = loc(fused[#loc153, #loc152])
#loc293 = loc(fused[#loc155, #loc154])
#loc294 = loc(fused[#loc163, #loc164])
#loc295 = loc(fused[#loc165, #loc166])
#loc296 = loc(fused[#loc168, #loc167])
#loc297 = loc(fused[#loc169, #loc170])
#loc298 = loc(fused[#loc171, #loc172])
#loc299 = loc(fused[#loc173, #loc170])
#loc300 = loc(fused[#loc176, #loc177])
#loc301 = loc(fused[#loc175, #loc177])
#loc302 = loc(fused[#loc174, #loc178])
#loc303 = loc(fused[#loc179, #loc178])
#loc304 = loc(fused[#loc180, #loc181])
#loc305 = loc(fused[#loc182, #loc183])
#loc306 = loc(fused[#loc184, #loc181])
#loc307 = loc(fused[#loc189, #loc188])
#loc308 = loc(fused[#loc192, #loc193])
#loc309 = loc(fused[#loc194, #loc195])
#loc310 = loc(fused[#loc196, #loc197])
#loc311 = loc(fused[#loc202, #loc203])
#loc312 = loc(fused[#loc207, #loc204])
#loc313 = loc(fused[#loc208, #loc209])
#loc314 = loc(fused[#loc211, #loc210])
#loc315 = loc(fused[#loc212, #loc213])
#loc316 = loc(fused[#loc215, #loc209])
#loc317 = loc(fused[#loc218, #loc221])
#loc318 = loc(fused[#loc223, #loc222])
#loc319 = loc(fused[#loc225, #loc224])
