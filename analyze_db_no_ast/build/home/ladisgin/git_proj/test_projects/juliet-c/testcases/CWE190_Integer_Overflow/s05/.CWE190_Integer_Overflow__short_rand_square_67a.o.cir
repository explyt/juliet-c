!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__CWE190_Integer_Overflow__short_rand_square_67_structType = !cir.struct<struct "_CWE190_Integer_Overflow__short_rand_square_67_structType" {!s16i}>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_67a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc55)
  cir.func private  @CWE190_Integer_Overflow__short_rand_square_67b_badSink(!ty__CWE190_Integer_Overflow__short_rand_square_67_structType) loc(#loc56)
  cir.func no_proto  @CWE190_Integer_Overflow__short_rand_square_67_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc58)
    %1 = cir.alloca !ty__CWE190_Integer_Overflow__short_rand_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType>, ["myStruct"] {alignment = 2 : i64} loc(#loc59)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc60)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc13)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
    %8 = cir.ternary(%7, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc13)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc13)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc13)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc13)
      cir.yield %25 : !u32i loc(#loc13)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc13)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc13)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc13)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc13)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc13)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc13)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc13)
      cir.yield %29 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc13)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc13)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc61)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc15)
    %12 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType> -> !cir.ptr<!s16i> loc(#loc16)
    cir.store %11, %12 : !s16i, !cir.ptr<!s16i> loc(#loc62)
    %13 = cir.load %1 : !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType>, !ty__CWE190_Integer_Overflow__short_rand_square_67_structType loc(#loc18)
    cir.call @CWE190_Integer_Overflow__short_rand_square_67b_badSink(%13) : (!ty__CWE190_Integer_Overflow__short_rand_square_67_structType) -> () loc(#loc18)
    cir.return loc(#loc6)
  } loc(#loc57)
  cir.func no_proto  @CWE190_Integer_Overflow__short_rand_square_67_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc64)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc65)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc63)
  cir.func private  @CWE190_Integer_Overflow__short_rand_square_67b_goodG2BSink(!ty__CWE190_Integer_Overflow__short_rand_square_67_structType) loc(#loc66)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc68)
    %1 = cir.alloca !ty__CWE190_Integer_Overflow__short_rand_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType>, ["myStruct"] {alignment = 2 : i64} loc(#loc69)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc33)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc70)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc35)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc35)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc71)
    %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc37)
    %7 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType> -> !cir.ptr<!s16i> loc(#loc16)
    cir.store %6, %7 : !s16i, !cir.ptr<!s16i> loc(#loc72)
    %8 = cir.load %1 : !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType>, !ty__CWE190_Integer_Overflow__short_rand_square_67_structType loc(#loc39)
    cir.call @CWE190_Integer_Overflow__short_rand_square_67b_goodG2BSink(%8) : (!ty__CWE190_Integer_Overflow__short_rand_square_67_structType) -> () loc(#loc39)
    cir.return loc(#loc28)
  } loc(#loc67)
  cir.func private  @CWE190_Integer_Overflow__short_rand_square_67b_goodB2GSink(!ty__CWE190_Integer_Overflow__short_rand_square_67_structType) loc(#loc73)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc75)
    %1 = cir.alloca !ty__CWE190_Integer_Overflow__short_rand_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType>, ["myStruct"] {alignment = 2 : i64} loc(#loc76)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc48)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc77)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc50)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc50)
    %8 = cir.ternary(%7, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc50)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc50)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc50)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc50)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc50)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc50)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc50)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc50)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc50)
      cir.yield %25 : !u32i loc(#loc50)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc50)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc50)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc50)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc50)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc50)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc50)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc50)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc50)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc50)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc50)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc50)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc50)
      cir.yield %29 : !u32i loc(#loc50)
    }) : (!cir.bool) -> !u32i loc(#loc50)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc50)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc50)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc78)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc52)
    %12 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType> -> !cir.ptr<!s16i> loc(#loc16)
    cir.store %11, %12 : !s16i, !cir.ptr<!s16i> loc(#loc79)
    %13 = cir.load %1 : !cir.ptr<!ty__CWE190_Integer_Overflow__short_rand_square_67_structType>, !ty__CWE190_Integer_Overflow__short_rand_square_67_structType loc(#loc54)
    cir.call @CWE190_Integer_Overflow__short_rand_square_67b_goodB2GSink(%13) : (!ty__CWE190_Integer_Overflow__short_rand_square_67_structType) -> () loc(#loc54)
    cir.return loc(#loc43)
  } loc(#loc74)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_67a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":30:1)
#loc4 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":30:126)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":32:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":41:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":34:5)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":34:11)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":35:5)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":35:62)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":36:12)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":36:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":38:19)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":38:5)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":39:28)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":24:11)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":39:5)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":40:5)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":75:1)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":79:1)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":77:5)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":77:13)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":78:5)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":78:13)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":48:1)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":48:130)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":50:1)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":59:1)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":52:5)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":52:11)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":53:5)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":53:62)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":54:12)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":54:5)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":56:12)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":56:5)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":57:28)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":57:5)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":58:5)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":62:1)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":62:130)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":64:1)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":73:1)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":66:5)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":66:11)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":67:5)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":67:62)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":68:12)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":68:5)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":70:19)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":70:5)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":71:28)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":71:5)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_square_67a.c":72:5)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc57 = loc(fused[#loc5, #loc6])
#loc58 = loc(fused[#loc7, #loc8])
#loc59 = loc(fused[#loc9, #loc10])
#loc60 = loc(fused[#loc12, #loc11])
#loc61 = loc(fused[#loc14, #loc13])
#loc62 = loc(fused[#loc17, #loc15])
#loc63 = loc(fused[#loc19, #loc20])
#loc64 = loc(fused[#loc21, #loc22])
#loc65 = loc(fused[#loc23, #loc24])
#loc66 = loc(fused[#loc25, #loc26])
#loc67 = loc(fused[#loc27, #loc28])
#loc68 = loc(fused[#loc29, #loc30])
#loc69 = loc(fused[#loc31, #loc32])
#loc70 = loc(fused[#loc34, #loc33])
#loc71 = loc(fused[#loc36, #loc35])
#loc72 = loc(fused[#loc38, #loc37])
#loc73 = loc(fused[#loc40, #loc41])
#loc74 = loc(fused[#loc42, #loc43])
#loc75 = loc(fused[#loc44, #loc45])
#loc76 = loc(fused[#loc46, #loc47])
#loc77 = loc(fused[#loc49, #loc48])
#loc78 = loc(fused[#loc51, #loc50])
#loc79 = loc(fused[#loc53, #loc52])
