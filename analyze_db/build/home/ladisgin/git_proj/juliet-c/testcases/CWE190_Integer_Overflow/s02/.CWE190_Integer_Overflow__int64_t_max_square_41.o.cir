!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":25:21)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":25:29)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":67:25)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":67:33)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":48:25)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":48:33)
#loc92 = loc(fused[#loc5, #loc6])
#loc105 = loc(fused[#loc39, #loc40])
#loc115 = loc(fused[#loc70, #loc71])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc90)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc93)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc92)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc9)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    %4 = cir.binop(mul, %2, %3) nsw : !s64i loc(#loc12)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc93)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc13)
    cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc14)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc91)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc19)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc97)
    %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc21)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc23)
    cir.call @badSink(%3) : (!s64i) -> () loc(#loc24)
    cir.return loc(#loc16)
  } loc(#loc95)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc99)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc102)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc33)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc39, #loc40])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc105)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc43)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc46)
    %3 = cir.call @imaxabs(%2) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc47)
    %4 = cir.cast(int_to_float, %3 : !s64i), !cir.long_double<!cir.f80> loc(#loc47)
    %5 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc48)
    %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc49)
    %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc49)
    %8 = cir.call @sqrtl(%7) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc48)
    %9 = cir.cmp(le, %4, %8) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc108)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc54)
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc42)
    %12 = cir.binop(mul, %10, %11) nsw : !s64i loc(#loc54)
    cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc106)
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc55)
    cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc56)
    cir.br ^bb4 loc(#loc52)
  ^bb3:  // pred: ^bb1
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb4 loc(#loc45)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc45)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc38)
  } loc(#loc104)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc62)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc64)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc66)
    cir.call @goodB2GSink(%3) : (!s64i) -> () loc(#loc67)
    cir.return loc(#loc59)
  } loc(#loc110)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc70, #loc71])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc116)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc115)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc74)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc77)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc73)
    %4 = cir.binop(mul, %2, %3) nsw : !s64i loc(#loc77)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc116)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc78)
    cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc79)
    cir.br ^bb2 loc(#loc76)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc69)
  } loc(#loc114)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc84)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc86)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc86)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc121)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc88)
    cir.call @goodG2BSink(%4) : (!s64i) -> () loc(#loc89)
    cir.return loc(#loc81)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":32:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":29:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":29:33)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":26:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":31:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":29:26)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":30:27)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":30:9)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":34:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":41:1)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":36:13)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":37:12)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":39:12)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":39:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":40:13)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":40:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":90:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":94:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":92:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":92:13)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":93:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":93:13)
#loc31 = loc("/usr/include/inttypes.h":351:1)
#loc32 = loc("/usr/include/inttypes.h":351:74)
#loc33 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":77:19)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":67:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":79:1)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":72:9)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":72:33)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":68:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":70:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":78:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":70:27)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":70:9)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":70:36)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":70:42)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":70:51)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":71:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":74:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":76:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":72:26)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":73:27)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":73:9)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":77:9)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":81:1)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":88:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":83:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":83:13)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":84:12)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":84:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":86:12)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":86:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":87:17)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":87:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":48:1)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":55:1)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":52:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":52:33)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":49:1)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":50:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":54:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":52:26)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":53:27)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":53:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":57:1)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":64:1)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":59:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":59:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":60:12)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":60:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":62:12)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":62:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":63:17)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_41.c":63:5)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc7, #loc8])
#loc94 = loc(fused[#loc10, #loc11])
#loc95 = loc(fused[#loc15, #loc16])
#loc96 = loc(fused[#loc17, #loc18])
#loc97 = loc(fused[#loc20, #loc19])
#loc98 = loc(fused[#loc22, #loc21])
#loc99 = loc(fused[#loc25, #loc26])
#loc100 = loc(fused[#loc27, #loc28])
#loc101 = loc(fused[#loc29, #loc30])
#loc102 = loc(fused[#loc31, #loc32])
#loc103 = loc(fused[#loc34, #loc35])
#loc104 = loc(fused[#loc37, #loc38])
#loc106 = loc(fused[#loc41, #loc42])
#loc107 = loc(fused[#loc44, #loc45])
#loc108 = loc(fused[#loc47, #loc50])
#loc109 = loc(fused[#loc51, #loc52, #loc53, #loc45])
#loc110 = loc(fused[#loc58, #loc59])
#loc111 = loc(fused[#loc60, #loc61])
#loc112 = loc(fused[#loc63, #loc62])
#loc113 = loc(fused[#loc65, #loc64])
#loc114 = loc(fused[#loc68, #loc69])
#loc116 = loc(fused[#loc72, #loc73])
#loc117 = loc(fused[#loc75, #loc76])
#loc118 = loc(fused[#loc80, #loc81])
#loc119 = loc(fused[#loc82, #loc83])
#loc120 = loc(fused[#loc85, #loc84])
#loc121 = loc(fused[#loc87, #loc86])
