!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_21.c":27:21)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_21.c":27:27)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_21.c":60:26)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_21.c":60:32)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_21.c":94:26)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_21.c":94:32)
#loc134 = loc("CWE369_Divide_by_Zero__float_rand_21.c":123:25)
#loc135 = loc("CWE369_Divide_by_Zero__float_rand_21.c":123:31)
#loc165 = loc(fused[#loc9, #loc10])
#loc183 = loc(fused[#loc52, #loc53])
#loc198 = loc(fused[#loc94, #loc95])
#loc213 = loc(fused[#loc134, #loc135])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc161)
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc162)
  cir.func private  @printIntLine(!s32i) loc(#loc163)
  cir.func internal private  @badSink(%arg0: !cir.float loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc165)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc11)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc162)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc169)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc20)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc21)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc21)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc170)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc170)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc169)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc23)
        } loc(#loc168)
      } loc(#loc167)
    } loc(#loc166)
    cir.return loc(#loc8)
  } loc(#loc164)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_rand_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc28)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc173)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc30)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc30)
    %6 = cir.ternary(%5, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc30)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc30)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc30)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc30)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc30)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc30)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc30)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc30)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc30)
      cir.yield %23 : !u32i loc(#loc30)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc30)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc30)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc30)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc30)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc30)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc30)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc30)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc30)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc30)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc30)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc30)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc30)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc30)
      cir.yield %27 : !u32i loc(#loc30)
    }) : (!cir.bool) -> !u32i loc(#loc30)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc30)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.float loc(#loc30)
    cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc174)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc162)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc34)
    cir.call @badSink(%11) : (!cir.float) -> () loc(#loc35)
    cir.return loc(#loc25)
  } loc(#loc171)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_rand_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc37)
  } loc(#loc176)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc180)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc48)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc49)
  cir.func internal private  @goodB2G1Sink(%arg0: !cir.float loc(fused[#loc52, #loc53])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc183)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc54)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc180)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc57)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc64)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc64)
          %6 = cir.fabs %5 : !cir.double loc(#loc64)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc65)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !s32i loc(#loc187)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc67)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc189)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc73)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc74)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc74)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc190)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc190)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc189)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc76)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc49)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc49)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          } loc(#loc188)
        } loc(#loc186)
      } loc(#loc185)
    } loc(#loc184)
    cir.return loc(#loc51)
  } loc(#loc182)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc82)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc193)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc84)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc84)
    %6 = cir.ternary(%5, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc84)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc84)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc84)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc84)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc84)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc84)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc84)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc84)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc84)
      cir.yield %23 : !u32i loc(#loc84)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc84)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc84)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc84)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc84)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc84)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc84)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc84)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc84)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc84)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc84)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc84)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc84)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc84)
      cir.yield %27 : !u32i loc(#loc84)
    }) : (!cir.bool) -> !u32i loc(#loc84)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc84)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.float loc(#loc84)
    cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc194)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc180)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc88)
    cir.call @goodB2G1Sink(%11) : (!cir.float) -> () loc(#loc89)
    cir.return loc(#loc79)
  } loc(#loc191)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc196)
  cir.func internal private  @goodB2G2Sink(%arg0: !cir.float loc(fused[#loc94, #loc95])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc198)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc96)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc196)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc99)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc103)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc103)
          %6 = cir.fabs %5 : !cir.double loc(#loc103)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc104)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !s32i loc(#loc202)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc106)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc204)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc112)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc113)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc113)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc205)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc205)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc204)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc115)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc116)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc116)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc117)
          } loc(#loc203)
        } loc(#loc201)
      } loc(#loc200)
    } loc(#loc199)
    cir.return loc(#loc93)
  } loc(#loc197)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc122)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc208)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc124)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc124)
    %6 = cir.ternary(%5, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc124)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc124)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc124)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc124)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc124)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc124)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc124)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc124)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc124)
      cir.yield %23 : !u32i loc(#loc124)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc124)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc124)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc124)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc124)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc124)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc124)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc124)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc124)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc124)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc124)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc124)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc124)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc124)
      cir.yield %27 : !u32i loc(#loc124)
    }) : (!cir.bool) -> !u32i loc(#loc124)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc124)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.float loc(#loc124)
    cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc209)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc196)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc128)
    cir.call @goodB2G2Sink(%11) : (!cir.float) -> () loc(#loc129)
    cir.return loc(#loc119)
  } loc(#loc206)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc211)
  cir.func internal private  @goodG2BSink(%arg0: !cir.float loc(fused[#loc134, #loc135])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc213)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc136)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc211)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc139)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc145)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc146)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc146)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc218)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc218)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc217)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc147)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc148)
        } loc(#loc216)
      } loc(#loc215)
    } loc(#loc214)
    cir.return loc(#loc133)
  } loc(#loc212)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc153)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc221)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc155)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc222)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc211)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc159)
    cir.call @goodG2BSink(%5) : (!cir.float) -> () loc(#loc160)
    cir.return loc(#loc150)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__float_rand_21.c":25:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_rand_21.c":25:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_21.c":27:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_21.c":37:1)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_21.c":28:1)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_21.c":29:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_21.c":36:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_21.c":29:8)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_21.c":30:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_21.c":31:9)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_21.c":35:9)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_21.c":33:13)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_21.c":33:44)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_21.c":33:32)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_21.c":33:40)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_21.c":34:26)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_21.c":34:13)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_21.c":39:1)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_21.c":48:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_21.c":41:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_21.c":41:11)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_21.c":43:12)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_21.c":43:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_21.c":45:19)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_21.c":45:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_21.c":46:17)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_21.c":46:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_21.c":47:13)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_21.c":47:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_21.c":146:1)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_21.c":151:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_21.c":148:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_21.c":148:14)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_21.c":149:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_21.c":149:14)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_21.c":150:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_21.c":150:13)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_21.c":55:1)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_21.c":55:29)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_21.c":65:19)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_21.c":77:23)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_21.c":60:1)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_21.c":80:1)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_21.c":61:1)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_21.c":62:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_21.c":79:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_21.c":62:8)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_21.c":63:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_21.c":66:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_21.c":68:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_21.c":65:9)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_21.c":70:9)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_21.c":78:9)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_21.c":70:17)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_21.c":70:25)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_21.c":70:12)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_21.c":70:23)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_21.c":71:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_21.c":74:9)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_21.c":76:9)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_21.c":72:13)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_21.c":72:44)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_21.c":72:32)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_21.c":72:40)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_21.c":73:26)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_21.c":73:13)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_21.c":77:13)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_21.c":82:1)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_21.c":91:1)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_21.c":84:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_21.c":84:11)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_21.c":86:12)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_21.c":86:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_21.c":88:19)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_21.c":88:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_21.c":89:22)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_21.c":89:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_21.c":90:18)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_21.c":90:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_21.c":56:1)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_21.c":56:29)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_21.c":94:1)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_21.c":109:1)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_21.c":95:1)
#loc97 = loc("CWE369_Divide_by_Zero__float_rand_21.c":96:5)
#loc98 = loc("CWE369_Divide_by_Zero__float_rand_21.c":108:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_rand_21.c":96:8)
#loc100 = loc("CWE369_Divide_by_Zero__float_rand_21.c":97:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_rand_21.c":99:9)
#loc102 = loc("CWE369_Divide_by_Zero__float_rand_21.c":107:9)
#loc103 = loc("CWE369_Divide_by_Zero__float_rand_21.c":99:17)
#loc104 = loc("CWE369_Divide_by_Zero__float_rand_21.c":99:25)
#loc105 = loc("CWE369_Divide_by_Zero__float_rand_21.c":99:12)
#loc106 = loc("CWE369_Divide_by_Zero__float_rand_21.c":99:23)
#loc107 = loc("CWE369_Divide_by_Zero__float_rand_21.c":100:9)
#loc108 = loc("CWE369_Divide_by_Zero__float_rand_21.c":103:9)
#loc109 = loc("CWE369_Divide_by_Zero__float_rand_21.c":105:9)
#loc110 = loc("CWE369_Divide_by_Zero__float_rand_21.c":101:13)
#loc111 = loc("CWE369_Divide_by_Zero__float_rand_21.c":101:44)
#loc112 = loc("CWE369_Divide_by_Zero__float_rand_21.c":101:32)
#loc113 = loc("CWE369_Divide_by_Zero__float_rand_21.c":101:40)
#loc114 = loc("CWE369_Divide_by_Zero__float_rand_21.c":102:26)
#loc115 = loc("CWE369_Divide_by_Zero__float_rand_21.c":102:13)
#loc116 = loc("CWE369_Divide_by_Zero__float_rand_21.c":106:23)
#loc117 = loc("CWE369_Divide_by_Zero__float_rand_21.c":106:13)
#loc118 = loc("CWE369_Divide_by_Zero__float_rand_21.c":111:1)
#loc119 = loc("CWE369_Divide_by_Zero__float_rand_21.c":120:1)
#loc120 = loc("CWE369_Divide_by_Zero__float_rand_21.c":113:5)
#loc121 = loc("CWE369_Divide_by_Zero__float_rand_21.c":113:11)
#loc122 = loc("CWE369_Divide_by_Zero__float_rand_21.c":115:12)
#loc123 = loc("CWE369_Divide_by_Zero__float_rand_21.c":115:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_rand_21.c":117:19)
#loc125 = loc("CWE369_Divide_by_Zero__float_rand_21.c":117:5)
#loc126 = loc("CWE369_Divide_by_Zero__float_rand_21.c":118:22)
#loc127 = loc("CWE369_Divide_by_Zero__float_rand_21.c":118:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_rand_21.c":119:18)
#loc129 = loc("CWE369_Divide_by_Zero__float_rand_21.c":119:5)
#loc130 = loc("CWE369_Divide_by_Zero__float_rand_21.c":57:1)
#loc131 = loc("CWE369_Divide_by_Zero__float_rand_21.c":57:28)
#loc132 = loc("CWE369_Divide_by_Zero__float_rand_21.c":123:1)
#loc133 = loc("CWE369_Divide_by_Zero__float_rand_21.c":133:1)
#loc136 = loc("CWE369_Divide_by_Zero__float_rand_21.c":124:1)
#loc137 = loc("CWE369_Divide_by_Zero__float_rand_21.c":125:5)
#loc138 = loc("CWE369_Divide_by_Zero__float_rand_21.c":132:5)
#loc139 = loc("CWE369_Divide_by_Zero__float_rand_21.c":125:8)
#loc140 = loc("CWE369_Divide_by_Zero__float_rand_21.c":126:5)
#loc141 = loc("CWE369_Divide_by_Zero__float_rand_21.c":127:9)
#loc142 = loc("CWE369_Divide_by_Zero__float_rand_21.c":131:9)
#loc143 = loc("CWE369_Divide_by_Zero__float_rand_21.c":129:13)
#loc144 = loc("CWE369_Divide_by_Zero__float_rand_21.c":129:44)
#loc145 = loc("CWE369_Divide_by_Zero__float_rand_21.c":129:32)
#loc146 = loc("CWE369_Divide_by_Zero__float_rand_21.c":129:40)
#loc147 = loc("CWE369_Divide_by_Zero__float_rand_21.c":130:26)
#loc148 = loc("CWE369_Divide_by_Zero__float_rand_21.c":130:13)
#loc149 = loc("CWE369_Divide_by_Zero__float_rand_21.c":135:1)
#loc150 = loc("CWE369_Divide_by_Zero__float_rand_21.c":144:1)
#loc151 = loc("CWE369_Divide_by_Zero__float_rand_21.c":137:5)
#loc152 = loc("CWE369_Divide_by_Zero__float_rand_21.c":137:11)
#loc153 = loc("CWE369_Divide_by_Zero__float_rand_21.c":139:12)
#loc154 = loc("CWE369_Divide_by_Zero__float_rand_21.c":139:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_rand_21.c":141:12)
#loc156 = loc("CWE369_Divide_by_Zero__float_rand_21.c":141:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_rand_21.c":142:21)
#loc158 = loc("CWE369_Divide_by_Zero__float_rand_21.c":142:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_rand_21.c":143:17)
#loc160 = loc("CWE369_Divide_by_Zero__float_rand_21.c":143:5)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc7, #loc8])
#loc166 = loc(fused[#loc12, #loc13])
#loc167 = loc(fused[#loc15, #loc13])
#loc168 = loc(fused[#loc16, #loc17])
#loc169 = loc(fused[#loc18, #loc19])
#loc170 = loc(fused[#loc20, #loc21])
#loc171 = loc(fused[#loc24, #loc25])
#loc172 = loc(fused[#loc26, #loc27])
#loc173 = loc(fused[#loc29, #loc28])
#loc174 = loc(fused[#loc31, #loc30])
#loc175 = loc(fused[#loc33, #loc32])
#loc176 = loc(fused[#loc36, #loc37])
#loc177 = loc(fused[#loc38, #loc39])
#loc178 = loc(fused[#loc40, #loc41])
#loc179 = loc(fused[#loc42, #loc43])
#loc180 = loc(fused[#loc44, #loc45])
#loc181 = loc(fused[#loc46, #loc47])
#loc182 = loc(fused[#loc50, #loc51])
#loc184 = loc(fused[#loc55, #loc56])
#loc185 = loc(fused[#loc58, #loc59, #loc60, #loc56])
#loc186 = loc(fused[#loc62, #loc63])
#loc187 = loc(fused[#loc66, #loc65])
#loc188 = loc(fused[#loc68, #loc69, #loc70, #loc63])
#loc189 = loc(fused[#loc71, #loc72])
#loc190 = loc(fused[#loc73, #loc74])
#loc191 = loc(fused[#loc78, #loc79])
#loc192 = loc(fused[#loc80, #loc81])
#loc193 = loc(fused[#loc83, #loc82])
#loc194 = loc(fused[#loc85, #loc84])
#loc195 = loc(fused[#loc87, #loc86])
#loc196 = loc(fused[#loc90, #loc91])
#loc197 = loc(fused[#loc92, #loc93])
#loc199 = loc(fused[#loc97, #loc98])
#loc200 = loc(fused[#loc100, #loc98])
#loc201 = loc(fused[#loc101, #loc102])
#loc202 = loc(fused[#loc105, #loc104])
#loc203 = loc(fused[#loc107, #loc108, #loc109, #loc102])
#loc204 = loc(fused[#loc110, #loc111])
#loc205 = loc(fused[#loc112, #loc113])
#loc206 = loc(fused[#loc118, #loc119])
#loc207 = loc(fused[#loc120, #loc121])
#loc208 = loc(fused[#loc123, #loc122])
#loc209 = loc(fused[#loc125, #loc124])
#loc210 = loc(fused[#loc127, #loc126])
#loc211 = loc(fused[#loc130, #loc131])
#loc212 = loc(fused[#loc132, #loc133])
#loc214 = loc(fused[#loc137, #loc138])
#loc215 = loc(fused[#loc140, #loc138])
#loc216 = loc(fused[#loc141, #loc142])
#loc217 = loc(fused[#loc143, #loc144])
#loc218 = loc(fused[#loc145, #loc146])
#loc219 = loc(fused[#loc149, #loc150])
#loc220 = loc(fused[#loc151, #loc152])
#loc221 = loc(fused[#loc154, #loc153])
#loc222 = loc(fused[#loc156, #loc155])
#loc223 = loc(fused[#loc158, #loc157])
