!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc45 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":104:10)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":104:14)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":104:20)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":104:32)
#loc133 = loc(fused[#loc45, #loc46])
#loc134 = loc(fused[#loc47, #loc48])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc114)
  cir.func private @printIntLine(!s32i) loc(#loc115)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      cir.yield %19 : !u32i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc11)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc11)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc11)
      cir.yield %23 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc11)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc121)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc122)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc121)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc122)
      cir.scope {
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc124)
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc23)
        cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc125)
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc124)
        %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc26)
      } loc(#loc123)
    } loc(#loc120)
    cir.return loc(#loc6)
  } loc(#loc116)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc126)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc129)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc130)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc42)
  cir.func @main(%arg0: !s32i loc(fused[#loc45, #loc46]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc134)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc49)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc51)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc51)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc52)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_rand_preinc_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_31_good() : () -> () loc(#loc54)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc41)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_rand_preinc_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_31_bad() : () -> () loc(#loc58)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.return %17 : !s32i loc(#loc137)
  } loc(#loc132)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc69)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc143)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc144)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc143)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc76)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc144)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc146)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc81)
        %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc81)
        cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc147)
        %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc80)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc146)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc83)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc84)
      } loc(#loc145)
    } loc(#loc142)
    cir.return loc(#loc64)
  } loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc85)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc92)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc92)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc92)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc92)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc92)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc92)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc92)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc92)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc92)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc92)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc92)
      cir.yield %19 : !u32i loc(#loc92)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc92)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc92)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc92)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc92)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc92)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc92)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc92)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc92)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc92)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc92)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc92)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc92)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc92)
      cir.yield %23 : !u32i loc(#loc92)
    }) : (!cir.bool) -> !u32i loc(#loc92)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc92)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc153)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc154)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc153)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc154)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc102)
        %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc103)
        %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc156)
        cir.if %14 {
          %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc158)
          %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc109)
          cir.store %17, %9 : !s32i, !cir.ptr<!s32i> loc(#loc159)
          %18 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc108)
          cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc158)
          %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc111)
          cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc112)
        } else {
          %15 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc85)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc85)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc113)
        } loc(#loc157)
      } loc(#loc155)
    } loc(#loc152)
    cir.return loc(#loc87)
  } loc(#loc148)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":39:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":26:12)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":38:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":30:9)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":30:24)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":31:20)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":35:13)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":35:26)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":34:13)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":34:15)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":36:26)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":36:13)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":90:1)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":94:1)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":92:5)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":92:13)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":93:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":93:13)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":109:15)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":111:15)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":114:15)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":116:15)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":104:1)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":119:1)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":105:1)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":107:27)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":107:22)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":107:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":109:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":110:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":110:54)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":111:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":114:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":115:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":115:53)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":116:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":118:12)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":118:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":46:1)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":63:1)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":48:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":48:9)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":50:12)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":50:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":52:12)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":52:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":53:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":62:5)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":54:9)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":54:24)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":55:9)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":55:20)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":56:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":61:9)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":59:13)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":59:26)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":58:13)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":58:15)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":60:26)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":60:13)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":85:23)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":66:1)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":88:1)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":68:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":68:9)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":70:12)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":70:5)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":72:12)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":72:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":73:5)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":87:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":74:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":74:24)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":75:9)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":75:20)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":77:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":86:9)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":77:13)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":77:20)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":78:9)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":82:9)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":84:9)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":80:13)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":80:26)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":79:13)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":79:15)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":81:26)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":81:13)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_preinc_31.c":85:13)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc5, #loc6])
#loc117 = loc(fused[#loc7, #loc8])
#loc118 = loc(fused[#loc10, #loc9])
#loc119 = loc(fused[#loc12, #loc11])
#loc120 = loc(fused[#loc13, #loc14])
#loc121 = loc(fused[#loc15, #loc16])
#loc122 = loc(fused[#loc17, #loc18])
#loc123 = loc(fused[#loc19, #loc20])
#loc124 = loc(fused[#loc21, #loc22])
#loc125 = loc(fused[#loc23, #loc24])
#loc126 = loc(fused[#loc27, #loc28])
#loc127 = loc(fused[#loc29, #loc30])
#loc128 = loc(fused[#loc31, #loc32])
#loc129 = loc(fused[#loc33, #loc34])
#loc130 = loc(fused[#loc35, #loc36])
#loc131 = loc(fused[#loc37, #loc38])
#loc132 = loc(fused[#loc43, #loc44])
#loc135 = loc(fused[#loc54, #loc55])
#loc136 = loc(fused[#loc58, #loc59])
#loc137 = loc(fused[#loc62, #loc61])
#loc138 = loc(fused[#loc63, #loc64])
#loc139 = loc(fused[#loc65, #loc66])
#loc140 = loc(fused[#loc68, #loc67])
#loc141 = loc(fused[#loc70, #loc69])
#loc142 = loc(fused[#loc71, #loc72])
#loc143 = loc(fused[#loc73, #loc74])
#loc144 = loc(fused[#loc75, #loc76])
#loc145 = loc(fused[#loc77, #loc78])
#loc146 = loc(fused[#loc79, #loc80])
#loc147 = loc(fused[#loc81, #loc82])
#loc148 = loc(fused[#loc86, #loc87])
#loc149 = loc(fused[#loc88, #loc89])
#loc150 = loc(fused[#loc91, #loc90])
#loc151 = loc(fused[#loc93, #loc92])
#loc152 = loc(fused[#loc94, #loc95])
#loc153 = loc(fused[#loc96, #loc97])
#loc154 = loc(fused[#loc98, #loc99])
#loc155 = loc(fused[#loc100, #loc101])
#loc156 = loc(fused[#loc102, #loc103])
#loc157 = loc(fused[#loc104, #loc105, #loc106, #loc101])
#loc158 = loc(fused[#loc107, #loc108])
#loc159 = loc(fused[#loc109, #loc110])
