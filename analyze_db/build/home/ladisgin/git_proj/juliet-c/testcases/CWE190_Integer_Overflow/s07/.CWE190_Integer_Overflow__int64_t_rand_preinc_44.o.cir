!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":22:29)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":39:21)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":49:25)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":49:33)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":70:25)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":70:33)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":91:21)
#loc97 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc38, #loc39])
#loc122 = loc(fused[#loc66, #loc67])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int64_t_rand_preinc_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc95)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc97)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc9)
    cir.br ^bb1 loc(#loc99)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    %3 = cir.unary(inc, %2) : !s64i, !s64i loc(#loc12)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc14)
    cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc15)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc96)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc101)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_preinc_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc103)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc104)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc23)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc104)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc24)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc105)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc26)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc26)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc26)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc26)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc26)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc26)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc26)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc26)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc26)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc26)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc26)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc26)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc26)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc26)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc26)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc26)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc26)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc26)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc26)
    cir.br ^bb3(%29 : !u64i) loc(#loc26)
  ^bb2:  // pred: ^bb0
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc26)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc26)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc26)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc26)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc26)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc26)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc26)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc26)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc26)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc26)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc26)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc26)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc26)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc26)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc26)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc26)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc26)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc26)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc26)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc26)
    cir.br ^bb3(%55 : !u64i) loc(#loc26)
  ^bb3(%56: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":39:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // pred: ^bb3
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc26)
    cir.store %57, %0 : !s64i, !cir.ptr<!s64i> loc(#loc106)
    %58 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc28)
    %59 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    cir.call %58(%59) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc28)
    cir.return loc(#loc19)
  } loc(#loc102)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_preinc_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc107)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc111)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc42)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc45)
    %3 = cir.unary(inc, %2) : !s64i, !s64i loc(#loc45)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc114)
    %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc41)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc47)
    cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc48)
    cir.br ^bb2 loc(#loc44)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc37)
  } loc(#loc110)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc116)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc117)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc54)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc117)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc55)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc118)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc57)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc57)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc119)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc59)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc60)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc59)
    cir.return loc(#loc50)
  } loc(#loc115)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc120)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc63)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc66, #loc67])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc123)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc122)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc70)
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc73)
    %3 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc74)
    %4 = cir.cmp(lt, %2, %3) : !s64i, !cir.bool loc(#loc125)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc126)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc78)
    %6 = cir.unary(inc, %5) : !s64i, !s64i loc(#loc78)
    cir.store %6, %1 : !s64i, !cir.ptr<!s64i> loc(#loc127)
    %7 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc69)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc80)
    cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc81)
    cir.br ^bb4 loc(#loc76)
  ^bb3:  // pred: ^bb1
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc63)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc65)
  } loc(#loc121)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc88)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc130)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc89)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc91)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc91)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc91)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc91)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc91)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc91)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc91)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc91)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc91)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc91)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc91)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc91)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc91)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc91)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc91)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc91)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc91)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc91)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc91)
    cir.br ^bb3(%29 : !u64i) loc(#loc91)
  ^bb2:  // pred: ^bb0
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc91)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc91)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc91)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc91)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc91)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc91)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc91)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc91)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc91)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc91)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc91)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc91)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc91)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc91)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc91)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc91)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc91)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc91)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc91)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc91)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc91)
    cir.br ^bb3(%55 : !u64i) loc(#loc91)
  ^bb3(%56: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":91:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc91)
  ^bb4:  // pred: ^bb3
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc91)
    cir.store %57, %0 : !s64i, !cir.ptr<!s64i> loc(#loc132)
    %58 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc93)
    %59 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc94)
    cir.call %58(%59) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc93)
    cir.return loc(#loc84)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":27:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":27:26)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":26:9)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":26:11)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":28:27)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":28:9)
#loc16 = loc("/usr/include/stdlib.h":573:1)
#loc17 = loc("/usr/include/stdlib.h":573:24)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":32:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":42:1)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":34:13)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":36:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":36:33)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":37:12)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":37:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":41:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":41:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":95:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":99:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":97:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":97:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":98:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":98:13)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":49:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":57:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":54:9)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":54:26)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":50:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":51:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":56:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":53:9)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":53:11)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":55:27)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":55:9)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":59:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":67:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":61:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":61:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":62:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":62:33)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":63:12)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":63:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":65:12)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":65:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":66:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":66:13)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":81:19)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":70:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":83:1)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":76:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":76:26)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":71:1)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":73:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":82:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":73:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":73:16)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":74:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":78:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":80:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":75:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":75:11)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":77:27)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":77:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":81:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":85:1)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":93:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":87:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":87:13)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":88:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":88:33)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":89:12)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":89:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":91:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":92:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_preinc_44.c":92:13)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc7, #loc8])
#loc99 = loc(fused[#loc10, #loc11])
#loc100 = loc(fused[#loc12, #loc13])
#loc101 = loc(fused[#loc16, #loc17])
#loc102 = loc(fused[#loc18, #loc19])
#loc103 = loc(fused[#loc20, #loc21])
#loc104 = loc(fused[#loc22, #loc23])
#loc105 = loc(fused[#loc25, #loc24])
#loc106 = loc(fused[#loc27, #loc26])
#loc107 = loc(fused[#loc30, #loc31])
#loc108 = loc(fused[#loc32, #loc33])
#loc109 = loc(fused[#loc34, #loc35])
#loc110 = loc(fused[#loc36, #loc37])
#loc112 = loc(fused[#loc40, #loc41])
#loc113 = loc(fused[#loc43, #loc44])
#loc114 = loc(fused[#loc45, #loc46])
#loc115 = loc(fused[#loc49, #loc50])
#loc116 = loc(fused[#loc51, #loc52])
#loc117 = loc(fused[#loc53, #loc54])
#loc118 = loc(fused[#loc56, #loc55])
#loc119 = loc(fused[#loc58, #loc57])
#loc120 = loc(fused[#loc61, #loc62])
#loc121 = loc(fused[#loc64, #loc65])
#loc123 = loc(fused[#loc68, #loc69])
#loc124 = loc(fused[#loc71, #loc72])
#loc125 = loc(fused[#loc73, #loc74])
#loc126 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc127 = loc(fused[#loc78, #loc79])
#loc128 = loc(fused[#loc83, #loc84])
#loc129 = loc(fused[#loc85, #loc86])
#loc130 = loc(fused[#loc87, #loc88])
#loc131 = loc(fused[#loc90, #loc89])
#loc132 = loc(fused[#loc92, #loc91])
