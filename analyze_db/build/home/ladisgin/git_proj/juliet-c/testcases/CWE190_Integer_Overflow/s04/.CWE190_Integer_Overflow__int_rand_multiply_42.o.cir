!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":22:22)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":22:26)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":25:12)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":70:26)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":70:30)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":73:12)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":48:26)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":48:30)
#loc113 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc42, #loc43])
#loc146 = loc(fused[#loc84, #loc85])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc111)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc8)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc8)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc8)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc8)
    cir.br ^bb3(%17 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc8)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc8)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc8)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc8)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc8)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc8)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc8)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc8)
    cir.br ^bb3(%33 : !u32i) loc(#loc8)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":25:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc8)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.return %37 : !s32i loc(#loc115)
  } loc(#loc112)
  cir.func private @printIntLine(!s32i) loc(#loc116)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc23)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc123)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc124)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc17)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc31)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc33)
    cir.br ^bb3 loc(#loc27)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc27)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc15)
  } loc(#loc117)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc125)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc42, #loc43])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc45)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc45)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc45)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc45)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc45)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc45)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc45)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc45)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc45)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc45)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc45)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc45)
    cir.br ^bb3(%17 : !u32i) loc(#loc45)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc45)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc45)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc45)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc45)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc45)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc45)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc45)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc45)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc45)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc45)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc45)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc45)
    cir.br ^bb3(%33 : !u32i) loc(#loc45)
  ^bb3(%34: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":73:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc45)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc45)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    cir.return %37 : !s32i loc(#loc131)
  } loc(#loc128)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc61)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.br ^bb1 loc(#loc138)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc139)
    cir.brcond %7 ^bb2, ^bb8 loc(#loc140)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc141)
  ^bb3:  // pred: ^bb2
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc73)
    %11 = cir.binop(div, %9, %10) : !s32i loc(#loc142)
    %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc143)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc144)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc55)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc78)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc80)
    cir.br ^bb6 loc(#loc76)
  ^bb5:  // pred: ^bb3
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb6 loc(#loc70)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc70)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc65)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc65)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc53)
  } loc(#loc133)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc84, #loc85])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc83)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc87)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    cir.return %4 : !s32i loc(#loc148)
  } loc(#loc145)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc100)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.br ^bb1 loc(#loc154)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc155)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc156)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc94)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc108)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc110)
    cir.br ^bb3 loc(#loc104)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc92)
  } loc(#loc149)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":27:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":23:1)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":25:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":26:12)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":29:1)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":41:1)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":38:9)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":38:29)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":31:5)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":33:12)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":33:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:22)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:12)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:26)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:5)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":40:5)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:8)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:15)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":36:5)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":38:22)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":39:22)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":39:9)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":98:1)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":102:1)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":100:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":100:13)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":101:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":101:13)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":70:1)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":75:1)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":71:1)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":73:5)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":74:12)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":74:5)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":93:23)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":77:1)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":96:1)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":88:13)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":88:33)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":79:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":79:9)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":81:12)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":81:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:26)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:12)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:30)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":95:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:8)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:15)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":84:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:9)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":94:9)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:13)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:21)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:29)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:30)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":87:9)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":90:9)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":92:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":88:26)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":89:26)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":89:13)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":93:13)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":48:1)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":53:1)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":49:1)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":51:12)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":51:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":52:12)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":52:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":55:1)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":67:1)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":64:9)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":64:29)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":57:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":57:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":59:12)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":59:5)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:26)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:12)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:5)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:30)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:5)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":66:5)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:8)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:15)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":62:5)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":64:22)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":65:22)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":65:9)
#loc111 = loc(fused[#loc1, #loc2])
#loc112 = loc(fused[#loc3, #loc4])
#loc114 = loc(fused[#loc9, #loc8])
#loc115 = loc(fused[#loc11, #loc10])
#loc116 = loc(fused[#loc12, #loc13])
#loc117 = loc(fused[#loc14, #loc15])
#loc118 = loc(fused[#loc16, #loc17])
#loc119 = loc(fused[#loc18, #loc19])
#loc120 = loc(fused[#loc21, #loc20])
#loc121 = loc(fused[#loc24, #loc25])
#loc122 = loc(fused[#loc26, #loc27])
#loc123 = loc(fused[#loc28, #loc29])
#loc124 = loc(fused[#loc30, #loc27])
#loc125 = loc(fused[#loc34, #loc35])
#loc126 = loc(fused[#loc36, #loc37])
#loc127 = loc(fused[#loc38, #loc39])
#loc128 = loc(fused[#loc40, #loc41])
#loc130 = loc(fused[#loc46, #loc45])
#loc131 = loc(fused[#loc48, #loc47])
#loc132 = loc(fused[#loc49, #loc50])
#loc133 = loc(fused[#loc52, #loc53])
#loc134 = loc(fused[#loc54, #loc55])
#loc135 = loc(fused[#loc56, #loc57])
#loc136 = loc(fused[#loc59, #loc58])
#loc137 = loc(fused[#loc62, #loc63])
#loc138 = loc(fused[#loc64, #loc65])
#loc139 = loc(fused[#loc66, #loc67])
#loc140 = loc(fused[#loc68, #loc65])
#loc141 = loc(fused[#loc69, #loc70])
#loc142 = loc(fused[#loc72, #loc73])
#loc143 = loc(fused[#loc71, #loc74])
#loc144 = loc(fused[#loc75, #loc76, #loc77, #loc70])
#loc145 = loc(fused[#loc82, #loc83])
#loc147 = loc(fused[#loc88, #loc87])
#loc148 = loc(fused[#loc90, #loc89])
#loc149 = loc(fused[#loc91, #loc92])
#loc150 = loc(fused[#loc93, #loc94])
#loc151 = loc(fused[#loc95, #loc96])
#loc152 = loc(fused[#loc98, #loc97])
#loc153 = loc(fused[#loc101, #loc102])
#loc154 = loc(fused[#loc103, #loc104])
#loc155 = loc(fused[#loc105, #loc106])
#loc156 = loc(fused[#loc107, #loc104])
