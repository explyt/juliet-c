!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc91)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc94)
    cir.br ^bb1 loc(#loc95)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc91)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %3 ^bb2, ^bb14 loc(#loc96)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc97)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb4 loc(#loc98)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc98)
  ^bb5:  // pred: ^bb10
    %5 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc99)
    cir.brcond %7 ^bb6, ^bb11 loc(#loc20)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc100)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %9 = cir.const #cir.int<20000> : !s32i loc(#loc24)
    %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc101)
    cir.brcond %10 ^bb8, ^bb9 loc(#loc102)
  ^bb8:  // pred: ^bb7
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
    %13 = cir.call @unlink(%12) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc26)
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // pred: ^bb9
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc28)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.br ^bb5 loc(#loc17)
  ^bb11:  // pred: ^bb5
    cir.br ^bb12 loc(#loc17)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc15)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc11)
  ^bb14:  // 2 preds: ^bb1, ^bb13
    cir.br ^bb15 loc(#loc11)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc7)
  } loc(#loc93)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc104)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc107)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc107)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc112)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    cir.br ^bb15 loc(#loc49)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc113)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<0> : !s32i loc(#loc44)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.br ^bb5 loc(#loc114)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc114)
  ^bb6:  // pred: ^bb11
    %7 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc115)
    cir.brcond %9 ^bb7, ^bb12 loc(#loc58)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc116)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %11 = cir.const #cir.int<20000> : !s32i loc(#loc62)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc117)
    cir.brcond %12 ^bb9, ^bb10 loc(#loc118)
  ^bb9:  // pred: ^bb8
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb10 loc(#loc60)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc60)
  ^bb11:  // pred: ^bb10
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc66)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.br ^bb6 loc(#loc55)
  ^bb12:  // pred: ^bb6
    cir.br ^bb13 loc(#loc55)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc53)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc46)
  ^bb15:  // 2 preds: ^bb2, ^bb14
    cir.br ^bb16 loc(#loc46)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc42)
  } loc(#loc109)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc121)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc91)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %3 ^bb2, ^bb14 loc(#loc123)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc124)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.br ^bb4 loc(#loc125)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc125)
  ^bb5:  // pred: ^bb10
    %5 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc126)
    cir.brcond %7 ^bb6, ^bb11 loc(#loc81)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %9 = cir.const #cir.int<20000> : !s32i loc(#loc85)
    %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc128)
    cir.brcond %10 ^bb8, ^bb9 loc(#loc129)
  ^bb8:  // pred: ^bb7
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc87)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb9 loc(#loc83)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // pred: ^bb9
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc90)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    cir.br ^bb5 loc(#loc78)
  ^bb11:  // pred: ^bb5
    cir.br ^bb12 loc(#loc78)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc76)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc72)
  ^bb14:  // 2 preds: ^bb1, ^bb13
    cir.br ^bb15 loc(#loc72)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc68)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_05.c":0:0)
#loc1 = loc("CWE511_Logic_Time_Bomb__counter_05.c":30:1)
#loc2 = loc("CWE511_Logic_Time_Bomb__counter_05.c":30:25)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_05.c":46:28)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_05.c":35:1)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_05.c":53:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_05.c":40:13)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_05.c":40:25)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_05.c":37:5)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_05.c":52:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_05.c":37:8)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_05.c":38:5)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_05.c":39:9)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_05.c":51:9)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_05.c":41:13)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_05.c":50:25)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_05.c":50:19)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_05.c":50:24)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_05.c":50:21)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_05.c":44:17)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_05.c":47:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_05.c":44:21)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_05.c":44:30)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_05.c":45:17)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_05.c":46:21)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_05.c":48:22)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_05.c":48:17)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_05.c":106:1)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_05.c":110:1)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_05.c":108:5)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_05.c":108:11)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_05.c":109:5)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_05.c":109:11)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_05.c":31:1)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_05.c":31:26)
#loc37 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_05.c":65:19)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_05.c":76:31)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_05.c":60:1)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_05.c":83:1)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_05.c":70:13)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_05.c":70:25)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_05.c":62:5)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_05.c":82:5)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_05.c":62:8)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_05.c":63:5)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_05.c":66:5)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_05.c":68:5)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_05.c":65:9)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_05.c":69:9)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_05.c":81:9)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_05.c":71:13)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_05.c":80:25)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_05.c":80:19)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_05.c":80:24)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_05.c":80:21)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_05.c":74:17)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_05.c":77:17)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_05.c":74:21)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_05.c":74:30)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_05.c":75:17)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_05.c":76:21)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_05.c":78:22)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_05.c":78:17)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_05.c":86:1)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_05.c":104:1)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_05.c":91:13)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_05.c":91:25)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_05.c":88:5)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_05.c":103:5)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_05.c":88:8)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_05.c":89:5)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_05.c":90:9)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_05.c":102:9)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_05.c":92:13)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_05.c":101:25)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_05.c":101:19)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_05.c":101:24)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_05.c":101:21)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_05.c":95:17)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_05.c":98:17)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_05.c":95:21)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_05.c":95:30)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_05.c":96:17)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_05.c":97:31)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_05.c":97:21)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_05.c":99:22)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_05.c":99:17)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc6, #loc7])
#loc94 = loc(fused[#loc8, #loc9])
#loc95 = loc(fused[#loc10, #loc11])
#loc96 = loc(fused[#loc13, #loc11])
#loc97 = loc(fused[#loc14, #loc15])
#loc98 = loc(fused[#loc16, #loc17])
#loc99 = loc(fused[#loc18, #loc19])
#loc100 = loc(fused[#loc21, #loc22])
#loc101 = loc(fused[#loc23, #loc24])
#loc102 = loc(fused[#loc25, #loc22])
#loc103 = loc(fused[#loc28, #loc27])
#loc104 = loc(fused[#loc29, #loc30])
#loc105 = loc(fused[#loc31, #loc32])
#loc106 = loc(fused[#loc33, #loc34])
#loc107 = loc(fused[#loc35, #loc36])
#loc108 = loc(fused[#loc37, #loc38])
#loc109 = loc(fused[#loc41, #loc42])
#loc110 = loc(fused[#loc43, #loc44])
#loc111 = loc(fused[#loc45, #loc46])
#loc112 = loc(fused[#loc48, #loc49, #loc50, #loc46])
#loc113 = loc(fused[#loc52, #loc53])
#loc114 = loc(fused[#loc54, #loc55])
#loc115 = loc(fused[#loc56, #loc57])
#loc116 = loc(fused[#loc59, #loc60])
#loc117 = loc(fused[#loc61, #loc62])
#loc118 = loc(fused[#loc63, #loc60])
#loc119 = loc(fused[#loc66, #loc65])
#loc120 = loc(fused[#loc67, #loc68])
#loc121 = loc(fused[#loc69, #loc70])
#loc122 = loc(fused[#loc71, #loc72])
#loc123 = loc(fused[#loc74, #loc72])
#loc124 = loc(fused[#loc75, #loc76])
#loc125 = loc(fused[#loc77, #loc78])
#loc126 = loc(fused[#loc79, #loc80])
#loc127 = loc(fused[#loc82, #loc83])
#loc128 = loc(fused[#loc84, #loc85])
#loc129 = loc(fused[#loc86, #loc83])
#loc130 = loc(fused[#loc90, #loc89])
