!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":26:75)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":26:82)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":47:80)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":47:87)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":65:80)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":65:87)
#loc108 = loc(fused[#loc9, #loc10])
#loc123 = loc(fused[#loc43, #loc44])
#loc137 = loc(fused[#loc77, #loc78])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc104)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc105)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc106)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.scope {
      %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_badGlobal : !cir.ptr<!s32i> loc(#loc104)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc16)
        %8 = cir.const #cir.int<50> : !s32i loc(#loc17)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc17)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc111)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc112)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc113)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc114)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc116)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc27)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc28)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc29)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
          } loc(#loc117)
        } loc(#loc115)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc30)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc30)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc32)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc33)
        cir.store %15, %18 : !s8i, !cir.ptr<!s8i> loc(#loc118)
      } loc(#loc110)
    } loc(#loc109)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc119)
  } loc(#loc107)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_goodG2B1Global : !s32i {alignment = 4 : i64} loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc43, #loc44])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc42)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc45)
    cir.scope {
      %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc120)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc48)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc52)
      } else {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc53)
        %8 = cir.const #cir.int<100> : !s32i loc(#loc54)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc54)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc126)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc127)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc53)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc128)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc129)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc62)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc62)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc131)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc64)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc65)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc66)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc64)
          } loc(#loc132)
        } loc(#loc130)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc67)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc67)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc69)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc70)
        cir.store %15, %18 : !s8i, !cir.ptr<!s8i> loc(#loc133)
      } loc(#loc125)
    } loc(#loc124)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc134)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc134)
  } loc(#loc122)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_goodG2B2Global : !s32i {alignment = 4 : i64} loc(#loc135)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc77, #loc78])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc76)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc79)
    cir.scope {
      %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc135)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc82)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc82)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc84)
        %8 = cir.const #cir.int<100> : !s32i loc(#loc85)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc85)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc140)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc141)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc84)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc142)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc93)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc145)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc95)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc96)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc97)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
          } loc(#loc146)
        } loc(#loc144)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc98)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc98)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc100)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc101)
        cir.store %15, %18 : !s8i, !cir.ptr<!s8i> loc(#loc147)
      } loc(#loc139)
    } loc(#loc138)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc148)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":24:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":24:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":36:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":28:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":34:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":28:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":31:24)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":31:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":31:34)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":31:45)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":31:46)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":32:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":32:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":32:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":32:21)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":32:27)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":32:28)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":32:34)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":32:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":33:19)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":33:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":33:14)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":33:15)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":35:12)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":35:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":43:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":43:12)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":52:19)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":47:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":62:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":48:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":49:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":60:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":49:8)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":50:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":53:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":55:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":52:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":57:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":57:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":57:35)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":57:46)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":57:47)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":57:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":58:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":58:37)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":58:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":58:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":58:27)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":58:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":58:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":58:33)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":59:19)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":59:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":59:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":59:15)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":61:12)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":61:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":44:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":44:12)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":65:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":75:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":66:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":67:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":73:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":67:8)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":68:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":70:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":70:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":70:35)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":70:46)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":70:47)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":70:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":71:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":71:37)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":71:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":71:21)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":71:27)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":71:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":71:34)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":71:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":72:19)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":72:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":72:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":72:15)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":74:12)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c":74:5)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc7, #loc8])
#loc109 = loc(fused[#loc12, #loc13])
#loc110 = loc(fused[#loc15, #loc13])
#loc111 = loc(fused[#loc18, #loc19])
#loc112 = loc(fused[#loc17, #loc19])
#loc113 = loc(fused[#loc16, #loc20])
#loc114 = loc(fused[#loc21, #loc20])
#loc115 = loc(fused[#loc22, #loc23])
#loc116 = loc(fused[#loc24, #loc25])
#loc117 = loc(fused[#loc26, #loc23])
#loc118 = loc(fused[#loc31, #loc30])
#loc119 = loc(fused[#loc35, #loc34])
#loc120 = loc(fused[#loc36, #loc37])
#loc121 = loc(fused[#loc38, #loc39])
#loc122 = loc(fused[#loc41, #loc42])
#loc124 = loc(fused[#loc46, #loc47])
#loc125 = loc(fused[#loc49, #loc50, #loc51, #loc47])
#loc126 = loc(fused[#loc55, #loc56])
#loc127 = loc(fused[#loc54, #loc56])
#loc128 = loc(fused[#loc53, #loc57])
#loc129 = loc(fused[#loc58, #loc57])
#loc130 = loc(fused[#loc59, #loc60])
#loc131 = loc(fused[#loc61, #loc62])
#loc132 = loc(fused[#loc63, #loc60])
#loc133 = loc(fused[#loc68, #loc67])
#loc134 = loc(fused[#loc72, #loc71])
#loc135 = loc(fused[#loc73, #loc74])
#loc136 = loc(fused[#loc75, #loc76])
#loc138 = loc(fused[#loc80, #loc81])
#loc139 = loc(fused[#loc83, #loc81])
#loc140 = loc(fused[#loc86, #loc87])
#loc141 = loc(fused[#loc85, #loc87])
#loc142 = loc(fused[#loc84, #loc88])
#loc143 = loc(fused[#loc89, #loc88])
#loc144 = loc(fused[#loc90, #loc91])
#loc145 = loc(fused[#loc92, #loc93])
#loc146 = loc(fused[#loc94, #loc91])
#loc147 = loc(fused[#loc99, #loc98])
#loc148 = loc(fused[#loc103, #loc102])
