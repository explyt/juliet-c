!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global  external dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_badGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc206)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc207)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc208)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_badSource(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc209)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc210)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc212)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc20)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc215)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc216)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc217)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !s32i loc(#loc220)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc29)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc32)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc33)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
      } loc(#loc221)
    } loc(#loc219)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %9 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_badGlobal : !cir.ptr<!s32i> loc(#loc206)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %11 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_badSource(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc37)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc223)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc225)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc226)
      %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc227)
      %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc225)
      cir.store %15, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc225)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc47)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc47)
      cir.store %18, %14 : !u64i, !cir.ptr<!u64i> loc(#loc228)
      cir.scope {
        %30 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc53)
        cir.store %31, %13 : !u64i, !cir.ptr<!u64i> loc(#loc230)
        cir.for : cond {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %33 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc56)
          %34 = cir.cmp(lt, %32, %33) : !u64i, !s32i loc(#loc231)
          %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc57)
          cir.condition(%35) loc(#loc57)
        } body {
          cir.scope {
            %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
            %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc60)
            %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc61)
            %35 = cir.load %34 : !cir.ptr<!s8i>, !s8i loc(#loc59)
            %36 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc62)
            %37 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc63)
            %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc63)
            cir.store %35, %38 : !s8i, !cir.ptr<!s8i> loc(#loc233)
          } loc(#loc232)
          cir.yield loc(#loc52)
        } step {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc64)
          %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc65)
          cir.store %33, %13 : !u64i, !cir.ptr<!u64i> loc(#loc234)
          cir.yield loc(#loc229)
        } loc(#loc229)
      } loc(#loc229)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc66)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc67)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc68)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc67)
      %24 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc69)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc69)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc235)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc72)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc73)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc72)
    } loc(#loc224)
    cir.return loc(#loc16)
  } loc(#loc213)
  cir.global  external dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B1Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc236)
  cir.global  external dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B2Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc237)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc80)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc82)
    cir.return loc(#loc79)
  } loc(#loc238)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B1Source(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc241)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc90)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc91)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc91)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc244)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc245)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc246)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !s32i loc(#loc249)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc100)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc102)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc104)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
      } loc(#loc250)
    } loc(#loc248)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %9 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc236)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
    %11 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B1Source(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc108)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc252)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc254)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc255)
      %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc256)
      %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc254)
      cir.store %15, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc254)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc118)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc118)
      cir.store %18, %14 : !u64i, !cir.ptr<!u64i> loc(#loc257)
      cir.scope {
        %30 = cir.const #cir.int<0> : !s32i loc(#loc124)
        %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc124)
        cir.store %31, %13 : !u64i, !cir.ptr<!u64i> loc(#loc259)
        cir.for : cond {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc126)
          %33 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc127)
          %34 = cir.cmp(lt, %32, %33) : !u64i, !s32i loc(#loc260)
          %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc128)
          cir.condition(%35) loc(#loc128)
        } body {
          cir.scope {
            %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
            %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc131)
            %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc132)
            %35 = cir.load %34 : !cir.ptr<!s8i>, !s8i loc(#loc130)
            %36 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc133)
            %37 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc134)
            %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc134)
            cir.store %35, %38 : !s8i, !cir.ptr<!s8i> loc(#loc262)
          } loc(#loc261)
          cir.yield loc(#loc123)
        } step {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc135)
          %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc136)
          cir.store %33, %13 : !u64i, !cir.ptr<!u64i> loc(#loc263)
          cir.yield loc(#loc258)
        } loc(#loc258)
      } loc(#loc258)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc137)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc137)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc138)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc139)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc138)
      %24 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc140)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc140)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc264)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc142)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc143)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc144)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc143)
    } loc(#loc253)
    cir.return loc(#loc87)
  } loc(#loc242)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B2Source(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc265)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc267)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc151)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc152)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc152)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc268)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc269)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc270)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc160)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc160)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !s32i loc(#loc273)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc161)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc163)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc164)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc165)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc163)
      } loc(#loc274)
    } loc(#loc272)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %9 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc237)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
    %11 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B2Source(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc169)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc276)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc278)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc279)
      %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc280)
      %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc278)
      cir.store %15, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc278)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc179)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc179)
      cir.store %18, %14 : !u64i, !cir.ptr<!u64i> loc(#loc281)
      cir.scope {
        %30 = cir.const #cir.int<0> : !s32i loc(#loc185)
        %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc185)
        cir.store %31, %13 : !u64i, !cir.ptr<!u64i> loc(#loc283)
        cir.for : cond {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc187)
          %33 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc188)
          %34 = cir.cmp(lt, %32, %33) : !u64i, !s32i loc(#loc284)
          %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc189)
          cir.condition(%35) loc(#loc189)
        } body {
          cir.scope {
            %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
            %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc192)
            %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc193)
            %35 = cir.load %34 : !cir.ptr<!s8i>, !s8i loc(#loc191)
            %36 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc194)
            %37 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc195)
            %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc195)
            cir.store %35, %38 : !s8i, !cir.ptr<!s8i> loc(#loc286)
          } loc(#loc285)
          cir.yield loc(#loc184)
        } step {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc196)
          %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc197)
          cir.store %33, %13 : !u64i, !cir.ptr<!u64i> loc(#loc287)
          cir.yield loc(#loc282)
        } loc(#loc282)
      } loc(#loc282)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc198)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc198)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc199)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc200)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc199)
      %24 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc201)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc201)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc288)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc202)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc203)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc204)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc205)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc205)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc204)
    } loc(#loc277)
    cir.return loc(#loc148)
  } loc(#loc266)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":24:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":24:74)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":26:86)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":28:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":48:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":30:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":30:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:20)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:27)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:42)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:43)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:14)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:29)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":33:74)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":33:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":34:79)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":34:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":34:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":34:83)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":35:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":47:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":36:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":36:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":37:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":37:16)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":37:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":38:19)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":38:26)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":38:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":38:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":43:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:25)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:23)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":41:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:28)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:29)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:35)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":44:22)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":44:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":44:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":44:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":45:19)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":45:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":46:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":46:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":55:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":55:79)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":56:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":56:79)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":108:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":112:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":110:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":110:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":111:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":111:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":59:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":59:91)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":61:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":81:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":63:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":63:12)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:20)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:42)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:43)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:23)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:24)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:29)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":66:79)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":66:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":67:84)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":67:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":67:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":67:88)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":68:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":80:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":69:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":69:25)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":70:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":70:16)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":70:19)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":71:19)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":71:26)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":71:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":71:30)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":76:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:18)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:14)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:25)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:23)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":74:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:28)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:29)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:18)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:35)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:34)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":77:22)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":77:14)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":77:17)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":77:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":78:19)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":78:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":79:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":79:14)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":84:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":84:91)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":86:1)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":106:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":88:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":88:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:20)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:31)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:42)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:43)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:33)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:14)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:23)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:24)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:30)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:29)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":91:79)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":91:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":92:84)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":92:12)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":92:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":92:88)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":93:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":105:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":94:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":94:25)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":95:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":95:16)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":95:19)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":96:19)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":96:26)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":96:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":96:30)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":101:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:18)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:14)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:21)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:25)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:23)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":99:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:23)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:28)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:29)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:18)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:35)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:34)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":102:22)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":102:14)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":102:17)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":102:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":103:19)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":103:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":104:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":104:14)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc5, #loc6])
#loc209 = loc(fused[#loc7, #loc8])
#loc210 = loc(fused[#loc9, #loc10])
#loc211 = loc(fused[#loc11, #loc12])
#loc212 = loc(fused[#loc13, #loc14])
#loc213 = loc(fused[#loc15, #loc16])
#loc214 = loc(fused[#loc17, #loc18])
#loc215 = loc(fused[#loc21, #loc22])
#loc216 = loc(fused[#loc20, #loc22])
#loc217 = loc(fused[#loc19, #loc23])
#loc218 = loc(fused[#loc24, #loc23])
#loc219 = loc(fused[#loc25, #loc26])
#loc220 = loc(fused[#loc27, #loc28])
#loc221 = loc(fused[#loc30, #loc26])
#loc222 = loc(fused[#loc35, #loc34])
#loc223 = loc(fused[#loc38, #loc39])
#loc224 = loc(fused[#loc40, #loc41])
#loc225 = loc(fused[#loc42, #loc43])
#loc226 = loc(fused[#loc44, #loc45])
#loc227 = loc(fused[#loc44, #loc46])
#loc228 = loc(fused[#loc49, #loc50])
#loc229 = loc(fused[#loc51, #loc52])
#loc230 = loc(fused[#loc54, #loc53])
#loc231 = loc(fused[#loc55, #loc56])
#loc232 = loc(fused[#loc58, #loc52])
#loc233 = loc(fused[#loc63, #loc61])
#loc234 = loc(fused[#loc65, #loc64])
#loc235 = loc(fused[#loc69, #loc66])
#loc236 = loc(fused[#loc74, #loc75])
#loc237 = loc(fused[#loc76, #loc77])
#loc238 = loc(fused[#loc78, #loc79])
#loc239 = loc(fused[#loc80, #loc81])
#loc240 = loc(fused[#loc82, #loc83])
#loc241 = loc(fused[#loc84, #loc85])
#loc242 = loc(fused[#loc86, #loc87])
#loc243 = loc(fused[#loc88, #loc89])
#loc244 = loc(fused[#loc92, #loc93])
#loc245 = loc(fused[#loc91, #loc93])
#loc246 = loc(fused[#loc90, #loc94])
#loc247 = loc(fused[#loc95, #loc94])
#loc248 = loc(fused[#loc96, #loc97])
#loc249 = loc(fused[#loc98, #loc99])
#loc250 = loc(fused[#loc101, #loc97])
#loc251 = loc(fused[#loc106, #loc105])
#loc252 = loc(fused[#loc109, #loc110])
#loc253 = loc(fused[#loc111, #loc112])
#loc254 = loc(fused[#loc113, #loc114])
#loc255 = loc(fused[#loc115, #loc116])
#loc256 = loc(fused[#loc115, #loc117])
#loc257 = loc(fused[#loc120, #loc121])
#loc258 = loc(fused[#loc122, #loc123])
#loc259 = loc(fused[#loc125, #loc124])
#loc260 = loc(fused[#loc126, #loc127])
#loc261 = loc(fused[#loc129, #loc123])
#loc262 = loc(fused[#loc134, #loc132])
#loc263 = loc(fused[#loc136, #loc135])
#loc264 = loc(fused[#loc140, #loc137])
#loc265 = loc(fused[#loc145, #loc146])
#loc266 = loc(fused[#loc147, #loc148])
#loc267 = loc(fused[#loc149, #loc150])
#loc268 = loc(fused[#loc153, #loc154])
#loc269 = loc(fused[#loc152, #loc154])
#loc270 = loc(fused[#loc151, #loc155])
#loc271 = loc(fused[#loc156, #loc155])
#loc272 = loc(fused[#loc157, #loc158])
#loc273 = loc(fused[#loc159, #loc160])
#loc274 = loc(fused[#loc162, #loc158])
#loc275 = loc(fused[#loc167, #loc166])
#loc276 = loc(fused[#loc170, #loc171])
#loc277 = loc(fused[#loc172, #loc173])
#loc278 = loc(fused[#loc174, #loc175])
#loc279 = loc(fused[#loc176, #loc177])
#loc280 = loc(fused[#loc176, #loc178])
#loc281 = loc(fused[#loc181, #loc182])
#loc282 = loc(fused[#loc183, #loc184])
#loc283 = loc(fused[#loc186, #loc185])
#loc284 = loc(fused[#loc187, #loc188])
#loc285 = loc(fused[#loc190, #loc184])
#loc286 = loc(fused[#loc195, #loc193])
#loc287 = loc(fused[#loc197, #loc196])
#loc288 = loc(fused[#loc201, #loc198])
