!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private  @printIntLine(!s32i) loc(#loc108)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc111)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc11)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc11)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc11)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc11)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc112)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc11)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc11)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc13)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc13)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc13)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc13)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc13)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc112)
    cir.scope {
      %17 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%17 : !s32i) [
      case (equal, 6) {
        %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
        cir.store %18, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc114)
        cir.break loc(#loc19)
      },
      case (default) {
        %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc20)
        cir.break loc(#loc21)
      }
      ] loc(#loc14)
    } loc(#loc113)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc116)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc116)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc116)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc26)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc27)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc27)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc28)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc28)
      %25 = cir.const #cir.int<4> : !u64i loc(#loc117)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc118)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc119)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc35)
      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc36)
    } loc(#loc115)
    cir.return loc(#loc7)
  } loc(#loc109)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc120)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc48)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc48)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc48)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc48)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc48)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc126)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc48)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc48)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc50)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc50)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc50)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc50)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc50)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc50)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc50)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc53)
      cir.switch (%17 : !s32i) [
      case (equal, 6) {
        %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc55)
        cir.break loc(#loc56)
      },
      case (default) {
        %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
        cir.store %18, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
        cir.break loc(#loc59)
      }
      ] loc(#loc51)
    } loc(#loc127)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc130)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc130)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc130)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc65)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc65)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc66)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc66)
      %25 = cir.const #cir.int<4> : !u64i loc(#loc131)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc132)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc133)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc73)
      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc74)
    } loc(#loc129)
    cir.return loc(#loc44)
  } loc(#loc123)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc80)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc80)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc80)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc80)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc80)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc137)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc80)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc80)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc136)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc82)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc82)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc82)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc82)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc82)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc82)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc137)
    cir.scope {
      %17 = cir.const #cir.int<6> : !s32i loc(#loc85)
      cir.switch (%17 : !s32i) [
      case (equal, 6) {
        %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
        cir.store %18, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
        cir.break loc(#loc88)
      },
      case (default) {
        %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc89)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc89)
        cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc90)
        cir.break loc(#loc91)
      }
      ] loc(#loc83)
    } loc(#loc138)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc141)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc141)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc141)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc97)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc98)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc98)
      %25 = cir.const #cir.int<4> : !u64i loc(#loc142)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc143)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc144)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc104)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc105)
      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc106)
    } loc(#loc140)
    cir.return loc(#loc76)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":35:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":21:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":44:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":23:11)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":24:34)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":25:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":25:35)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":26:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":37:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":26:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":31:16)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":31:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":32:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":35:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":36:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":38:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":43:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":39:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":39:29)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":41:16)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":41:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":41:30)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":41:34)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":41:44)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":41:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":41:45)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":42:22)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":42:27)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":42:28)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":42:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":100:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":104:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":102:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":102:14)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":103:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":103:14)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":51:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":73:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":53:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":53:11)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":54:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":54:34)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":55:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":55:35)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":56:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":66:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":56:12)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":60:19)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":60:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":61:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":64:16)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":64:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":65:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":67:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":72:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":68:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":68:29)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":70:16)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":70:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":70:30)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":70:34)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":70:44)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":70:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":70:45)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":71:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":71:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":71:28)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":71:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":76:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":98:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":78:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":78:11)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":79:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":79:34)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":80:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":80:35)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":81:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":91:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":81:12)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":85:16)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":85:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":86:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":89:19)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":89:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":90:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":92:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":97:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":93:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":93:29)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":95:16)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":95:22)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":95:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":95:34)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":95:44)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":95:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":95:45)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":96:22)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":96:27)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":96:28)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c":96:9)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc4, #loc5])
#loc109 = loc(fused[#loc6, #loc7])
#loc110 = loc(fused[#loc8, #loc9])
#loc111 = loc(fused[#loc10, #loc11])
#loc112 = loc(fused[#loc12, #loc13])
#loc113 = loc(fused[#loc14, #loc15])
#loc114 = loc(fused[#loc18, #loc17])
#loc115 = loc(fused[#loc22, #loc23])
#loc116 = loc(fused[#loc24, #loc25])
#loc117 = loc(fused[#loc29, #loc30])
#loc118 = loc(fused[#loc28, #loc30])
#loc119 = loc(fused[#loc31, #loc32])
#loc120 = loc(fused[#loc37, #loc38])
#loc121 = loc(fused[#loc39, #loc40])
#loc122 = loc(fused[#loc41, #loc42])
#loc123 = loc(fused[#loc43, #loc44])
#loc124 = loc(fused[#loc45, #loc46])
#loc125 = loc(fused[#loc47, #loc48])
#loc126 = loc(fused[#loc49, #loc50])
#loc127 = loc(fused[#loc51, #loc52])
#loc128 = loc(fused[#loc58, #loc57])
#loc129 = loc(fused[#loc60, #loc61])
#loc130 = loc(fused[#loc62, #loc63])
#loc131 = loc(fused[#loc67, #loc68])
#loc132 = loc(fused[#loc66, #loc68])
#loc133 = loc(fused[#loc69, #loc70])
#loc134 = loc(fused[#loc75, #loc76])
#loc135 = loc(fused[#loc77, #loc78])
#loc136 = loc(fused[#loc79, #loc80])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc83, #loc84])
#loc139 = loc(fused[#loc87, #loc86])
#loc140 = loc(fused[#loc92, #loc93])
#loc141 = loc(fused[#loc94, #loc95])
#loc142 = loc(fused[#loc99, #loc100])
#loc143 = loc(fused[#loc98, #loc100])
#loc144 = loc(fused[#loc101, #loc102])
