!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":22:21)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":22:25)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":63:25)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":63:29)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":99:25)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":99:29)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":105:23)
#true = #cir.bool<true> : !cir.bool
#loc165 = loc(fused[#loc8, #loc9])
#loc187 = loc(fused[#loc62, #loc63])
#loc206 = loc(fused[#loc112, #loc113])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc162)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc167)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc165)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc167)
    cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc167)
    cir.br ^bb2 loc(#loc169)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc20)
    %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc170)
    cir.brcond %6 ^bb3, ^bb12 loc(#loc171)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc26)
    %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc26)
    cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb4 loc(#loc173)
  ^bb4:  // pred: ^bb3
    %11 = cir.const #cir.int<0> : !s32i loc(#loc29)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb5 loc(#loc173)
  ^bb5:  // 2 preds: ^bb4, ^bb9
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %13 = cir.const #cir.int<10> : !s32i loc(#loc32)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc175)
    cir.brcond %14 ^bb6, ^bb10 loc(#loc33)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc176)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %16 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc36)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc36)
    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc37)
    cir.br ^bb8 loc(#loc28)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc39)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.br ^bb5 loc(#loc173)
  ^bb10:  // pred: ^bb5
    cir.br ^bb11 loc(#loc28)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc22)
  ^bb12:  // pred: ^bb2
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    cir.br ^bb13 loc(#loc18)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc18)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc16)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc7)
  } loc(#loc164)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc180)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc46)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc180)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc48)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc50)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc52)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc52)
    cir.return loc(#loc42)
  } loc(#loc178)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc183)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc62, #loc63])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc189)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc187)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.br ^bb1 loc(#loc190)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc189)
    cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc189)
    cir.br ^bb2 loc(#loc191)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc192)
    cir.brcond %6 ^bb3, ^bb12 loc(#loc193)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc80)
    %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc80)
    cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb4 loc(#loc195)
  ^bb4:  // pred: ^bb3
    %11 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb5 loc(#loc195)
  ^bb5:  // 2 preds: ^bb4, ^bb9
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %13 = cir.const #cir.int<10> : !s32i loc(#loc86)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc197)
    cir.brcond %14 ^bb6, ^bb10 loc(#loc87)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc198)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %16 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc90)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc90)
    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc91)
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc82)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc93)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.br ^bb5 loc(#loc195)
  ^bb10:  // pred: ^bb5
    cir.br ^bb11 loc(#loc82)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc76)
  ^bb12:  // pred: ^bb2
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc94)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb13 loc(#loc72)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc72)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc70)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc61)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc202)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc101)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc202)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc103)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc105)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc107)
    cir.return loc(#loc97)
  } loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc109)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc112, #loc113])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc208)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc206)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc208)
    cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc208)
    cir.br ^bb2 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc211)
    cir.brcond %6 ^bb3, ^bb8 loc(#loc125)
  ^bb3:  // pred: ^bb2
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc127)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc212)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc125)
  ^bb4:  // pred: ^bb3
    %10 = cir.const #true loc(#loc125)
    cir.br ^bb6(%10 : !cir.bool) loc(#loc125)
  ^bb5:  // pred: ^bb3
    %11 = cir.const #false loc(#loc125)
    cir.br ^bb6(%11 : !cir.bool) loc(#loc125)
  ^bb6(%12: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":105:23)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc125)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9(%12 : !cir.bool) loc(#loc125)
  ^bb8:  // pred: ^bb2
    %13 = cir.const #false loc(#loc125)
    cir.br ^bb9(%13 : !cir.bool) loc(#loc125)
  ^bb9(%14: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":105:23)):  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc125)
  ^bb10:  // pred: ^bb9
    cir.brcond %14 ^bb11, ^bb20 loc(#loc213)
  ^bb11:  // pred: ^bb10
    %15 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %17 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc134)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc134)
    cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb12 loc(#loc215)
  ^bb12:  // pred: ^bb11
    %19 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.br ^bb13 loc(#loc215)
  ^bb13:  // 2 preds: ^bb12, ^bb17
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    %21 = cir.const #cir.int<10> : !s32i loc(#loc140)
    %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc217)
    cir.brcond %22 ^bb14, ^bb18 loc(#loc141)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc218)
  ^bb15:  // pred: ^bb14
    %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %24 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc144)
    %25 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc144)
    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc145)
    cir.br ^bb16 loc(#loc136)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc136)
  ^bb17:  // pred: ^bb16
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc147)
    cir.store %28, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb13 loc(#loc215)
  ^bb18:  // pred: ^bb13
    cir.br ^bb19 loc(#loc136)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21 loc(#loc130)
  ^bb20:  // pred: ^bb10
    %29 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc109)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    cir.br ^bb21 loc(#loc122)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc122)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc120)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc111)
  } loc(#loc205)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc154)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc222)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc156)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc158)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc160)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc160)
    cir.return loc(#loc150)
  } loc(#loc220)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":40:23)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":22:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":43:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":25:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":25:13)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":26:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":26:30)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":23:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":24:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":42:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":29:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":41:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":29:13)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":29:21)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":30:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":37:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":39:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":31:28)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":31:20)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":31:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":33:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":36:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":33:21)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":33:17)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":33:24)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":33:28)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":33:26)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":34:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":35:37)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":35:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":35:17)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":33:33)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":33:32)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":40:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":45:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":56:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":47:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":47:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":49:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":49:29)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":51:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":51:12)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":51:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":53:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":53:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":55:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":55:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":132:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":136:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":134:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":134:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":135:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":135:13)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":63:1)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":84:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":66:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":66:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":67:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":67:30)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":64:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":65:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":83:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":70:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":82:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":70:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":70:21)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":71:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":78:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":80:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":72:28)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":72:20)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":72:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":74:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":77:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":74:21)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":74:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":74:24)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":74:28)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":74:26)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":75:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":76:37)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":76:30)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":76:17)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":74:33)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":74:32)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":81:23)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":81:13)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":86:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":96:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":88:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":88:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":89:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":89:29)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":91:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":91:12)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":91:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":94:12)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":94:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":95:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":95:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":116:23)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":99:1)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":119:1)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":102:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":102:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":103:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":103:30)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":100:1)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":101:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":118:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":105:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":117:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":105:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":105:21)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":105:26)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":105:34)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":105:36)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":106:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":113:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":115:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":107:28)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":107:20)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":107:13)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":109:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":112:13)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":109:21)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":109:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":109:24)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":109:28)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":109:26)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":110:13)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":111:37)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":111:30)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":111:17)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":109:33)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":109:32)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":116:13)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":121:1)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":130:1)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":123:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":123:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":124:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":124:29)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":126:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":126:12)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":126:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":128:12)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":128:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":129:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c":129:13)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc6, #loc7])
#loc166 = loc(fused[#loc10, #loc11])
#loc167 = loc(fused[#loc12, #loc13])
#loc168 = loc(fused[#loc15, #loc16])
#loc169 = loc(fused[#loc17, #loc18])
#loc170 = loc(fused[#loc19, #loc20])
#loc171 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc172 = loc(fused[#loc26, #loc24])
#loc173 = loc(fused[#loc27, #loc28])
#loc174 = loc(fused[#loc30, #loc29])
#loc175 = loc(fused[#loc31, #loc32])
#loc176 = loc(fused[#loc34, #loc28])
#loc177 = loc(fused[#loc39, #loc38])
#loc178 = loc(fused[#loc41, #loc42])
#loc179 = loc(fused[#loc43, #loc44])
#loc180 = loc(fused[#loc45, #loc46])
#loc181 = loc(fused[#loc49, #loc47])
#loc182 = loc(fused[#loc51, #loc50])
#loc183 = loc(fused[#loc54, #loc55])
#loc184 = loc(fused[#loc56, #loc57])
#loc185 = loc(fused[#loc58, #loc59])
#loc186 = loc(fused[#loc60, #loc61])
#loc188 = loc(fused[#loc64, #loc65])
#loc189 = loc(fused[#loc66, #loc67])
#loc190 = loc(fused[#loc69, #loc70])
#loc191 = loc(fused[#loc71, #loc72])
#loc192 = loc(fused[#loc73, #loc74])
#loc193 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc194 = loc(fused[#loc80, #loc78])
#loc195 = loc(fused[#loc81, #loc82])
#loc196 = loc(fused[#loc84, #loc83])
#loc197 = loc(fused[#loc85, #loc86])
#loc198 = loc(fused[#loc88, #loc82])
#loc199 = loc(fused[#loc93, #loc92])
#loc200 = loc(fused[#loc96, #loc97])
#loc201 = loc(fused[#loc98, #loc99])
#loc202 = loc(fused[#loc100, #loc101])
#loc203 = loc(fused[#loc104, #loc102])
#loc204 = loc(fused[#loc106, #loc105])
#loc205 = loc(fused[#loc110, #loc111])
#loc207 = loc(fused[#loc114, #loc115])
#loc208 = loc(fused[#loc116, #loc117])
#loc209 = loc(fused[#loc119, #loc120])
#loc210 = loc(fused[#loc121, #loc122])
#loc211 = loc(fused[#loc123, #loc124])
#loc212 = loc(fused[#loc126, #loc128])
#loc213 = loc(fused[#loc129, #loc130, #loc131, #loc122])
#loc214 = loc(fused[#loc134, #loc132])
#loc215 = loc(fused[#loc135, #loc136])
#loc216 = loc(fused[#loc138, #loc137])
#loc217 = loc(fused[#loc139, #loc140])
#loc218 = loc(fused[#loc142, #loc136])
#loc219 = loc(fused[#loc147, #loc146])
#loc220 = loc(fused[#loc149, #loc150])
#loc221 = loc(fused[#loc151, #loc152])
#loc222 = loc(fused[#loc153, #loc154])
#loc223 = loc(fused[#loc157, #loc155])
#loc224 = loc(fused[#loc159, #loc158])
