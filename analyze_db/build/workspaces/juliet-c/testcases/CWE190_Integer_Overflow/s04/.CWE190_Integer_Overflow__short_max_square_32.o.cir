!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc118)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc120)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc121)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc122)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc123)
    %4 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc124)
    %5 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc125)
    cir.store %3, %4 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc124)
    cir.store %3, %5 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc125)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc17)
    cir.store %7, %3 : !s16i, !cir.ptr<!s16i> loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc6)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc21)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc120)
    %10 = cir.const #cir.int<32767> : !s32i loc(#loc22)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc22)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
    %13 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc25)
    cir.store %12, %13 : !s16i, !cir.ptr<!s16i> loc(#loc129)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc130)
  ^bb3:  // pred: ^bb2
    %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc8)
    %15 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc29)
    cir.store %15, %1 : !s16i, !cir.ptr<!s16i> loc(#loc121)
    cir.br ^bb4 loc(#loc131)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc32)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc32)
    %18 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc10)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc10)
    %20 = cir.binop(mul, %17, %19) nsw : !s32i loc(#loc32)
    %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc32)
    cir.store %21, %2 : !s16i, !cir.ptr<!s16i> loc(#loc122)
    %22 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc33)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc33)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc34)
    cir.br ^bb5 loc(#loc31)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc119)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc134)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc132)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc136)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc137)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc138)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc139)
    %4 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc140)
    %5 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc141)
    cir.store %3, %4 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc140)
    cir.store %3, %5 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc141)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc55)
    cir.store %7, %3 : !s16i, !cir.ptr<!s16i> loc(#loc142)
    cir.br ^bb1 loc(#loc143)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc44)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc59)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc136)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc60)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc60)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc144)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc62)
    %13 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc63)
    cir.store %12, %13 : !s16i, !cir.ptr<!s16i> loc(#loc145)
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc146)
  ^bb3:  // pred: ^bb2
    %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc46)
    %15 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc67)
    cir.store %15, %1 : !s16i, !cir.ptr<!s16i> loc(#loc137)
    cir.br ^bb4 loc(#loc147)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc70)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc70)
    %18 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc48)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc48)
    %20 = cir.binop(mul, %17, %19) nsw : !s32i loc(#loc70)
    %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc70)
    cir.store %21, %2 : !s16i, !cir.ptr<!s16i> loc(#loc138)
    %22 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc71)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc71)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc72)
    cir.br ^bb5 loc(#loc69)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc66)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc42)
  } loc(#loc135)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc73)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc150)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc151)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc152)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc153)
    %4 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc154)
    %5 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc155)
    cir.store %3, %4 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc154)
    cir.store %3, %5 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc155)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc91)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc91)
    cir.store %7, %3 : !s16i, !cir.ptr<!s16i> loc(#loc156)
    cir.br ^bb1 loc(#loc157)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc80)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc95)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc150)
    %10 = cir.const #cir.int<32767> : !s32i loc(#loc96)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc96)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc158)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc98)
    %13 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc99)
    cir.store %12, %13 : !s16i, !cir.ptr<!s16i> loc(#loc159)
    cir.br ^bb2 loc(#loc94)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc160)
  ^bb3:  // pred: ^bb2
    %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc82)
    %15 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc103)
    cir.store %15, %1 : !s16i, !cir.ptr<!s16i> loc(#loc151)
    cir.br ^bb4 loc(#loc161)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc106)
    %17 = cir.cast(integral, %16 : !s16i), !s64i loc(#loc106)
    %18 = cir.cast(integral, %17 : !s64i), !s32i loc(#loc106)
    %19 = cir.abs %18 poison : !s32i loc(#loc107)
    %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc107)
    %21 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc108)
    %22 = cir.const #cir.int<32767> : !s32i loc(#loc109)
    %23 = cir.cast(int_to_float, %22 : !s32i), !cir.double loc(#loc109)
    %24 = cir.call @sqrt(%23) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc108)
    %25 = cir.cast(float_to_int, %24 : !cir.double), !s64i loc(#loc108)
    %26 = cir.cmp(le, %20, %25) : !s64i, !cir.bool loc(#loc162)
    cir.brcond %26 ^bb5, ^bb6 loc(#loc163)
  ^bb5:  // pred: ^bb4
    %27 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc114)
    %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc114)
    %29 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc84)
    %30 = cir.cast(integral, %29 : !s16i), !s32i loc(#loc84)
    %31 = cir.binop(mul, %28, %30) nsw : !s32i loc(#loc114)
    %32 = cir.cast(integral, %31 : !s32i), !s16i loc(#loc114)
    cir.store %32, %2 : !s16i, !cir.ptr<!s16i> loc(#loc152)
    %33 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc115)
    %34 = cir.cast(integral, %33 : !s16i), !s32i loc(#loc115)
    cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc116)
    cir.br ^bb7 loc(#loc112)
  ^bb6:  // pred: ^bb4
    %35 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc76)
    %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    cir.br ^bb7 loc(#loc105)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc105)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc102)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc78)
  } loc(#loc149)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_square_32.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_square_32.c":44:1)
#loc5 = loc("CWE190_Integer_Overflow__short_max_square_32.c":31:9)
#loc6 = loc("CWE190_Integer_Overflow__short_max_square_32.c":31:23)
#loc7 = loc("CWE190_Integer_Overflow__short_max_square_32.c":37:9)
#loc8 = loc("CWE190_Integer_Overflow__short_max_square_32.c":37:23)
#loc9 = loc("CWE190_Integer_Overflow__short_max_square_32.c":40:13)
#loc10 = loc("CWE190_Integer_Overflow__short_max_square_32.c":40:35)
#loc11 = loc("CWE190_Integer_Overflow__short_max_square_32.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__short_max_square_32.c":26:11)
#loc13 = loc("CWE190_Integer_Overflow__short_max_square_32.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__short_max_square_32.c":27:24)
#loc15 = loc("CWE190_Integer_Overflow__short_max_square_32.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__short_max_square_32.c":28:24)
#loc17 = loc("CWE190_Integer_Overflow__short_max_square_32.c":29:12)
#loc18 = loc("CWE190_Integer_Overflow__short_max_square_32.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__short_max_square_32.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__short_max_square_32.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_square_32.c":31:22)
#loc22 = loc("CWE190_Integer_Overflow__short_max_square_32.c":33:16)
#loc23 = loc("CWE190_Integer_Overflow__short_max_square_32.c":33:9)
#loc24 = loc("CWE190_Integer_Overflow__short_max_square_32.c":34:21)
#loc25 = loc("CWE190_Integer_Overflow__short_max_square_32.c":34:10)
#loc26 = loc("CWE190_Integer_Overflow__short_max_square_32.c":34:9)
#loc27 = loc("CWE190_Integer_Overflow__short_max_square_32.c":36:5)
#loc28 = loc("CWE190_Integer_Overflow__short_max_square_32.c":43:5)
#loc29 = loc("CWE190_Integer_Overflow__short_max_square_32.c":37:22)
#loc30 = loc("CWE190_Integer_Overflow__short_max_square_32.c":38:9)
#loc31 = loc("CWE190_Integer_Overflow__short_max_square_32.c":42:9)
#loc32 = loc("CWE190_Integer_Overflow__short_max_square_32.c":40:28)
#loc33 = loc("CWE190_Integer_Overflow__short_max_square_32.c":41:26)
#loc34 = loc("CWE190_Integer_Overflow__short_max_square_32.c":41:13)
#loc35 = loc("CWE190_Integer_Overflow__short_max_square_32.c":101:1)
#loc36 = loc("CWE190_Integer_Overflow__short_max_square_32.c":105:1)
#loc37 = loc("CWE190_Integer_Overflow__short_max_square_32.c":103:5)
#loc38 = loc("CWE190_Integer_Overflow__short_max_square_32.c":103:13)
#loc39 = loc("CWE190_Integer_Overflow__short_max_square_32.c":104:5)
#loc40 = loc("CWE190_Integer_Overflow__short_max_square_32.c":104:13)
#loc41 = loc("CWE190_Integer_Overflow__short_max_square_32.c":51:1)
#loc42 = loc("CWE190_Integer_Overflow__short_max_square_32.c":71:1)
#loc43 = loc("CWE190_Integer_Overflow__short_max_square_32.c":58:9)
#loc44 = loc("CWE190_Integer_Overflow__short_max_square_32.c":58:23)
#loc45 = loc("CWE190_Integer_Overflow__short_max_square_32.c":64:9)
#loc46 = loc("CWE190_Integer_Overflow__short_max_square_32.c":64:23)
#loc47 = loc("CWE190_Integer_Overflow__short_max_square_32.c":67:13)
#loc48 = loc("CWE190_Integer_Overflow__short_max_square_32.c":67:35)
#loc49 = loc("CWE190_Integer_Overflow__short_max_square_32.c":53:5)
#loc50 = loc("CWE190_Integer_Overflow__short_max_square_32.c":53:11)
#loc51 = loc("CWE190_Integer_Overflow__short_max_square_32.c":54:5)
#loc52 = loc("CWE190_Integer_Overflow__short_max_square_32.c":54:24)
#loc53 = loc("CWE190_Integer_Overflow__short_max_square_32.c":55:5)
#loc54 = loc("CWE190_Integer_Overflow__short_max_square_32.c":55:24)
#loc55 = loc("CWE190_Integer_Overflow__short_max_square_32.c":56:12)
#loc56 = loc("CWE190_Integer_Overflow__short_max_square_32.c":56:5)
#loc57 = loc("CWE190_Integer_Overflow__short_max_square_32.c":57:5)
#loc58 = loc("CWE190_Integer_Overflow__short_max_square_32.c":62:5)
#loc59 = loc("CWE190_Integer_Overflow__short_max_square_32.c":58:22)
#loc60 = loc("CWE190_Integer_Overflow__short_max_square_32.c":60:16)
#loc61 = loc("CWE190_Integer_Overflow__short_max_square_32.c":60:9)
#loc62 = loc("CWE190_Integer_Overflow__short_max_square_32.c":61:21)
#loc63 = loc("CWE190_Integer_Overflow__short_max_square_32.c":61:10)
#loc64 = loc("CWE190_Integer_Overflow__short_max_square_32.c":61:9)
#loc65 = loc("CWE190_Integer_Overflow__short_max_square_32.c":63:5)
#loc66 = loc("CWE190_Integer_Overflow__short_max_square_32.c":70:5)
#loc67 = loc("CWE190_Integer_Overflow__short_max_square_32.c":64:22)
#loc68 = loc("CWE190_Integer_Overflow__short_max_square_32.c":65:9)
#loc69 = loc("CWE190_Integer_Overflow__short_max_square_32.c":69:9)
#loc70 = loc("CWE190_Integer_Overflow__short_max_square_32.c":67:28)
#loc71 = loc("CWE190_Integer_Overflow__short_max_square_32.c":68:26)
#loc72 = loc("CWE190_Integer_Overflow__short_max_square_32.c":68:13)
#loc73 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc76 = loc("CWE190_Integer_Overflow__short_max_square_32.c":96:23)
#loc77 = loc("CWE190_Integer_Overflow__short_max_square_32.c":74:1)
#loc78 = loc("CWE190_Integer_Overflow__short_max_square_32.c":99:1)
#loc79 = loc("CWE190_Integer_Overflow__short_max_square_32.c":81:9)
#loc80 = loc("CWE190_Integer_Overflow__short_max_square_32.c":81:23)
#loc81 = loc("CWE190_Integer_Overflow__short_max_square_32.c":87:9)
#loc82 = loc("CWE190_Integer_Overflow__short_max_square_32.c":87:23)
#loc83 = loc("CWE190_Integer_Overflow__short_max_square_32.c":91:13)
#loc84 = loc("CWE190_Integer_Overflow__short_max_square_32.c":91:35)
#loc85 = loc("CWE190_Integer_Overflow__short_max_square_32.c":76:5)
#loc86 = loc("CWE190_Integer_Overflow__short_max_square_32.c":76:11)
#loc87 = loc("CWE190_Integer_Overflow__short_max_square_32.c":77:5)
#loc88 = loc("CWE190_Integer_Overflow__short_max_square_32.c":77:24)
#loc89 = loc("CWE190_Integer_Overflow__short_max_square_32.c":78:5)
#loc90 = loc("CWE190_Integer_Overflow__short_max_square_32.c":78:24)
#loc91 = loc("CWE190_Integer_Overflow__short_max_square_32.c":79:12)
#loc92 = loc("CWE190_Integer_Overflow__short_max_square_32.c":79:5)
#loc93 = loc("CWE190_Integer_Overflow__short_max_square_32.c":80:5)
#loc94 = loc("CWE190_Integer_Overflow__short_max_square_32.c":85:5)
#loc95 = loc("CWE190_Integer_Overflow__short_max_square_32.c":81:22)
#loc96 = loc("CWE190_Integer_Overflow__short_max_square_32.c":83:16)
#loc97 = loc("CWE190_Integer_Overflow__short_max_square_32.c":83:9)
#loc98 = loc("CWE190_Integer_Overflow__short_max_square_32.c":84:21)
#loc99 = loc("CWE190_Integer_Overflow__short_max_square_32.c":84:10)
#loc100 = loc("CWE190_Integer_Overflow__short_max_square_32.c":84:9)
#loc101 = loc("CWE190_Integer_Overflow__short_max_square_32.c":86:5)
#loc102 = loc("CWE190_Integer_Overflow__short_max_square_32.c":98:5)
#loc103 = loc("CWE190_Integer_Overflow__short_max_square_32.c":87:22)
#loc104 = loc("CWE190_Integer_Overflow__short_max_square_32.c":89:9)
#loc105 = loc("CWE190_Integer_Overflow__short_max_square_32.c":97:9)
#loc106 = loc("CWE190_Integer_Overflow__short_max_square_32.c":89:23)
#loc107 = loc("CWE190_Integer_Overflow__short_max_square_32.c":89:13)
#loc108 = loc("CWE190_Integer_Overflow__short_max_square_32.c":89:38)
#loc109 = loc("CWE190_Integer_Overflow__short_max_square_32.c":89:51)
#loc110 = loc("CWE190_Integer_Overflow__short_max_square_32.c":89:59)
#loc111 = loc("CWE190_Integer_Overflow__short_max_square_32.c":90:9)
#loc112 = loc("CWE190_Integer_Overflow__short_max_square_32.c":93:9)
#loc113 = loc("CWE190_Integer_Overflow__short_max_square_32.c":95:9)
#loc114 = loc("CWE190_Integer_Overflow__short_max_square_32.c":91:28)
#loc115 = loc("CWE190_Integer_Overflow__short_max_square_32.c":92:26)
#loc116 = loc("CWE190_Integer_Overflow__short_max_square_32.c":92:13)
#loc117 = loc("CWE190_Integer_Overflow__short_max_square_32.c":96:13)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc9, #loc10])
#loc123 = loc(fused[#loc11, #loc12])
#loc124 = loc(fused[#loc13, #loc14])
#loc125 = loc(fused[#loc15, #loc16])
#loc126 = loc(fused[#loc18, #loc17])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc23, #loc22])
#loc129 = loc(fused[#loc26, #loc24])
#loc130 = loc(fused[#loc27, #loc28])
#loc131 = loc(fused[#loc30, #loc31])
#loc132 = loc(fused[#loc35, #loc36])
#loc133 = loc(fused[#loc37, #loc38])
#loc134 = loc(fused[#loc39, #loc40])
#loc135 = loc(fused[#loc41, #loc42])
#loc136 = loc(fused[#loc43, #loc44])
#loc137 = loc(fused[#loc45, #loc46])
#loc138 = loc(fused[#loc47, #loc48])
#loc139 = loc(fused[#loc49, #loc50])
#loc140 = loc(fused[#loc51, #loc52])
#loc141 = loc(fused[#loc53, #loc54])
#loc142 = loc(fused[#loc56, #loc55])
#loc143 = loc(fused[#loc57, #loc58])
#loc144 = loc(fused[#loc61, #loc60])
#loc145 = loc(fused[#loc64, #loc62])
#loc146 = loc(fused[#loc65, #loc66])
#loc147 = loc(fused[#loc68, #loc69])
#loc148 = loc(fused[#loc74, #loc75])
#loc149 = loc(fused[#loc77, #loc78])
#loc150 = loc(fused[#loc79, #loc80])
#loc151 = loc(fused[#loc81, #loc82])
#loc152 = loc(fused[#loc83, #loc84])
#loc153 = loc(fused[#loc85, #loc86])
#loc154 = loc(fused[#loc87, #loc88])
#loc155 = loc(fused[#loc89, #loc90])
#loc156 = loc(fused[#loc92, #loc91])
#loc157 = loc(fused[#loc93, #loc94])
#loc158 = loc(fused[#loc97, #loc96])
#loc159 = loc(fused[#loc100, #loc98])
#loc160 = loc(fused[#loc101, #loc102])
#loc161 = loc(fused[#loc104, #loc105])
#loc162 = loc(fused[#loc107, #loc110])
#loc163 = loc(fused[#loc111, #loc112, #loc113, #loc105])
