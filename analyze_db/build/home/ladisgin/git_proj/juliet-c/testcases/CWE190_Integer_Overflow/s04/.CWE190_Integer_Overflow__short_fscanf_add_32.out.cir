!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":113:10)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":113:14)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":113:20)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":113:32)
#loc170 = loc(fused[#loc58, #loc59])
#loc171 = loc(fused[#loc60, #loc61])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_add_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc148)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc150)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_add_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc152)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc153)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc154)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc155)
    %4 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc156)
    %5 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc157)
    cir.store %3, %4 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc156)
    cir.store %3, %5 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc157)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc22)
    cir.store %7, %3 : !s16i, !cir.ptr<!s16i> loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc11)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc26)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc152)
    %10 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc27)
    %11 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc149)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %15 = cir.call @__isoc99_fscanf(%12, %14, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc27)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc29)
    %17 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc30)
    cir.store %16, %17 : !s16i, !cir.ptr<!s16i> loc(#loc160)
    cir.br ^bb2 loc(#loc25)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc161)
  ^bb3:  // pred: ^bb2
    %18 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc13)
    %19 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc34)
    cir.store %19, %1 : !s16i, !cir.ptr<!s16i> loc(#loc153)
    cir.br ^bb4 loc(#loc162)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc37)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc37)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %23 = cir.binop(add, %21, %22) nsw : !s32i loc(#loc37)
    %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc37)
    cir.store %24, %2 : !s16i, !cir.ptr<!s16i> loc(#loc154)
    %25 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc38)
    %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc38)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc39)
    cir.br ^bb5 loc(#loc36)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc33)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc9)
  } loc(#loc151)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_add_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc165)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc163)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc166)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc167)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE190_Integer_Overflow__short_fscanf_add_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call @CWE190_Integer_Overflow__short_fscanf_add_32_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE190_Integer_Overflow__short_fscanf_add_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call @CWE190_Integer_Overflow__short_fscanf_add_32_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc174)
    cir.return %17 : !s32i loc(#loc174)
  } loc(#loc169)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc176)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc177)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc178)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc179)
    %4 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc180)
    %5 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc181)
    cir.store %3, %4 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc180)
    cir.store %3, %5 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc181)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc90)
    cir.store %7, %3 : !s16i, !cir.ptr<!s16i> loc(#loc182)
    cir.br ^bb1 loc(#loc183)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc79)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc94)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc176)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc95)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc95)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc184)
    %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc97)
    %13 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc98)
    cir.store %12, %13 : !s16i, !cir.ptr<!s16i> loc(#loc185)
    cir.br ^bb2 loc(#loc93)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc186)
  ^bb3:  // pred: ^bb2
    %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc81)
    %15 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc102)
    cir.store %15, %1 : !s16i, !cir.ptr<!s16i> loc(#loc177)
    cir.br ^bb4 loc(#loc187)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc105)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc105)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %19 = cir.binop(add, %17, %18) nsw : !s32i loc(#loc105)
    %20 = cir.cast(integral, %19 : !s32i), !s16i loc(#loc105)
    cir.store %20, %2 : !s16i, !cir.ptr<!s16i> loc(#loc178)
    %21 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc106)
    %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc106)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc107)
    cir.br ^bb5 loc(#loc104)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc101)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc77)
  } loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc108)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc189)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc190)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc191)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc192)
    %4 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc193)
    %5 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc194)
    cir.store %3, %4 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc193)
    cir.store %3, %5 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc194)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc123)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc123)
    cir.store %7, %3 : !s16i, !cir.ptr<!s16i> loc(#loc195)
    cir.br ^bb1 loc(#loc196)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc112)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc127)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc189)
    %10 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc128)
    %11 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc149)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc129)
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc130)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc130)
    %15 = cir.call @__isoc99_fscanf(%12, %14, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc128)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc131)
    %17 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc132)
    cir.store %16, %17 : !s16i, !cir.ptr<!s16i> loc(#loc197)
    cir.br ^bb2 loc(#loc126)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc198)
  ^bb3:  // pred: ^bb2
    %18 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc114)
    %19 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc136)
    cir.store %19, %1 : !s16i, !cir.ptr<!s16i> loc(#loc190)
    cir.br ^bb4 loc(#loc199)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc139)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc139)
    %22 = cir.const #cir.int<32767> : !s32i loc(#loc140)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc200)
    cir.brcond %23 ^bb5, ^bb6 loc(#loc201)
  ^bb5:  // pred: ^bb4
    %24 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc144)
    %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc144)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %27 = cir.binop(add, %25, %26) nsw : !s32i loc(#loc144)
    %28 = cir.cast(integral, %27 : !s32i), !s16i loc(#loc144)
    cir.store %28, %2 : !s16i, !cir.ptr<!s16i> loc(#loc191)
    %29 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc145)
    %30 = cir.cast(integral, %29 : !s16i), !s32i loc(#loc145)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc146)
    cir.br ^bb7 loc(#loc142)
  ^bb6:  // pred: ^bb4
    %31 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc108)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc147)
    cir.br ^bb7 loc(#loc138)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc138)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc135)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc110)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_add_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":31:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":42:1)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":29:9)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":29:23)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":35:9)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":35:23)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":38:13)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":38:35)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":24:5)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":24:11)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":25:5)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":25:24)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":26:5)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":26:24)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":27:12)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":27:5)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":28:5)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":33:5)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":29:22)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":31:9)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":31:17)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":32:21)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":32:10)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":32:9)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":34:5)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":41:5)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":35:22)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":36:9)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":40:9)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":38:28)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":39:26)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":39:13)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":99:1)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":103:1)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":101:5)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":101:13)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":102:5)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":102:13)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":118:15)
#loc53 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":120:15)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":123:15)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":125:15)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":113:1)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":128:1)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":114:1)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":116:27)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":116:22)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":116:5)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":118:5)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":119:5)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":119:55)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":120:5)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":123:5)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":124:5)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":124:54)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":125:5)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":127:12)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":127:5)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":49:1)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":69:1)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":56:9)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":56:23)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":62:9)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":62:23)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":65:13)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":65:35)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":51:5)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":51:11)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":52:5)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":52:24)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":53:5)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":53:24)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":54:12)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":54:5)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":55:5)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":60:5)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":56:22)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":58:16)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":58:9)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":59:21)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":59:10)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":59:9)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":61:5)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":68:5)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":62:22)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":63:9)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":67:9)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":65:28)
#loc106 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":66:26)
#loc107 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":66:13)
#loc108 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":94:23)
#loc109 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":72:1)
#loc110 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":97:1)
#loc111 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":79:9)
#loc112 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":79:23)
#loc113 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":85:9)
#loc114 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":85:23)
#loc115 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":89:13)
#loc116 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":89:35)
#loc117 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":74:5)
#loc118 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":74:11)
#loc119 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":75:5)
#loc120 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":75:24)
#loc121 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":76:5)
#loc122 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":76:24)
#loc123 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":77:12)
#loc124 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":77:5)
#loc125 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":78:5)
#loc126 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":83:5)
#loc127 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":79:22)
#loc128 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":81:9)
#loc129 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":81:17)
#loc130 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":81:24)
#loc131 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":82:21)
#loc132 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":82:10)
#loc133 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":82:9)
#loc134 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":84:5)
#loc135 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":96:5)
#loc136 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":85:22)
#loc137 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":87:9)
#loc138 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":95:9)
#loc139 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":87:13)
#loc140 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":87:20)
#loc141 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":88:9)
#loc142 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":91:9)
#loc143 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":93:9)
#loc144 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":89:28)
#loc145 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":90:26)
#loc146 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":90:13)
#loc147 = loc("CWE190_Integer_Overflow__short_fscanf_add_32.c":94:13)
#loc148 = loc(fused[#loc1, #loc2])
#loc149 = loc(fused[#loc3, #loc4])
#loc150 = loc(fused[#loc6, #loc7])
#loc151 = loc(fused[#loc8, #loc9])
#loc152 = loc(fused[#loc10, #loc11])
#loc153 = loc(fused[#loc12, #loc13])
#loc154 = loc(fused[#loc14, #loc15])
#loc155 = loc(fused[#loc16, #loc17])
#loc156 = loc(fused[#loc18, #loc19])
#loc157 = loc(fused[#loc20, #loc21])
#loc158 = loc(fused[#loc23, #loc22])
#loc159 = loc(fused[#loc24, #loc25])
#loc160 = loc(fused[#loc31, #loc29])
#loc161 = loc(fused[#loc32, #loc33])
#loc162 = loc(fused[#loc35, #loc36])
#loc163 = loc(fused[#loc40, #loc41])
#loc164 = loc(fused[#loc42, #loc43])
#loc165 = loc(fused[#loc44, #loc45])
#loc166 = loc(fused[#loc46, #loc47])
#loc167 = loc(fused[#loc48, #loc49])
#loc168 = loc(fused[#loc50, #loc51])
#loc169 = loc(fused[#loc56, #loc57])
#loc172 = loc(fused[#loc67, #loc68])
#loc173 = loc(fused[#loc71, #loc72])
#loc174 = loc(fused[#loc75, #loc74])
#loc175 = loc(fused[#loc76, #loc77])
#loc176 = loc(fused[#loc78, #loc79])
#loc177 = loc(fused[#loc80, #loc81])
#loc178 = loc(fused[#loc82, #loc83])
#loc179 = loc(fused[#loc84, #loc85])
#loc180 = loc(fused[#loc86, #loc87])
#loc181 = loc(fused[#loc88, #loc89])
#loc182 = loc(fused[#loc91, #loc90])
#loc183 = loc(fused[#loc92, #loc93])
#loc184 = loc(fused[#loc96, #loc95])
#loc185 = loc(fused[#loc99, #loc97])
#loc186 = loc(fused[#loc100, #loc101])
#loc187 = loc(fused[#loc103, #loc104])
#loc188 = loc(fused[#loc109, #loc110])
#loc189 = loc(fused[#loc111, #loc112])
#loc190 = loc(fused[#loc113, #loc114])
#loc191 = loc(fused[#loc115, #loc116])
#loc192 = loc(fused[#loc117, #loc118])
#loc193 = loc(fused[#loc119, #loc120])
#loc194 = loc(fused[#loc121, #loc122])
#loc195 = loc(fused[#loc124, #loc123])
#loc196 = loc(fused[#loc125, #loc126])
#loc197 = loc(fused[#loc133, #loc131])
#loc198 = loc(fused[#loc134, #loc135])
#loc199 = loc(fused[#loc137, #loc138])
#loc200 = loc(fused[#loc139, #loc140])
#loc201 = loc(fused[#loc141, #loc142, #loc143, #loc138])
