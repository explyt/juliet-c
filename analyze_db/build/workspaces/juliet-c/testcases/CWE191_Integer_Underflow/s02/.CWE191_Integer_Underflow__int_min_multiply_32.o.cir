!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc128)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_multiply_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc131)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc132)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc133)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc134)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc135)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc135)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc17)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc6)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc22)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc22)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc22)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %14 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
    cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc140)
  ^bb3:  // pred: ^bb2
    %15 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb4 loc(#loc141)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc142)
    cir.brcond %19 ^bb5, ^bb6 loc(#loc143)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %21 = cir.const #cir.int<2> : !s32i loc(#loc10)
    %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc35)
    cir.store %22, %2 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc37)
    cir.br ^bb6 loc(#loc31)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc31)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc28)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc4)
  } loc(#loc129)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_multiply_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc145)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc146)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc144)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc149)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc150)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc152)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc153)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.br ^bb1 loc(#loc155)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc63)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc64)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %12 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
    cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.br ^bb2 loc(#loc61)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc158)
  ^bb3:  // pred: ^bb2
    %13 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.br ^bb4 loc(#loc159)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc160)
    cir.brcond %17 ^bb5, ^bb6 loc(#loc161)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc51)
    %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc77)
    cir.store %20, %2 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %21 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc79)
    cir.br ^bb6 loc(#loc73)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc73)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc70)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc45)
  } loc(#loc147)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc82)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc166)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc167)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc168)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc169)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc168)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc102)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc102)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc102)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %14 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
    cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.br ^bb2 loc(#loc100)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc174)
  ^bb3:  // pred: ^bb2
    %15 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.br ^bb4 loc(#loc175)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc113)
    %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc176)
    cir.brcond %19 ^bb5, ^bb11 loc(#loc177)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc178)
  ^bb6:  // pred: ^bb5
    %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %21 = cir.const #cir.int<2147483647> : !s32i loc(#loc118)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc118)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc118)
    %25 = cir.const #cir.int<2> : !s32i loc(#loc119)
    %26 = cir.binop(div, %24, %25) : !s32i loc(#loc179)
    %27 = cir.cmp(gt, %20, %26) : !s32i, !cir.bool loc(#loc180)
    cir.brcond %27 ^bb7, ^bb8 loc(#loc181)
  ^bb7:  // pred: ^bb6
    %28 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %29 = cir.const #cir.int<2> : !s32i loc(#loc90)
    %30 = cir.binop(mul, %28, %29) nsw : !s32i loc(#loc124)
    cir.store %30, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %31 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc126)
    cir.br ^bb9 loc(#loc122)
  ^bb8:  // pred: ^bb6
    %32 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc82)
    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb9 loc(#loc116)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc116)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc111)
  ^bb11:  // 2 preds: ^bb4, ^bb10
    cir.br ^bb12 loc(#loc111)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc108)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc84)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":44:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":30:9)
#loc6 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":30:21)
#loc7 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":36:9)
#loc8 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":36:21)
#loc9 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":40:13)
#loc10 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":40:33)
#loc11 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":24:5)
#loc12 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":24:9)
#loc13 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":25:5)
#loc14 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":25:22)
#loc15 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":26:5)
#loc16 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":26:22)
#loc17 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":28:12)
#loc18 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":28:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":29:5)
#loc20 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":34:5)
#loc21 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":30:20)
#loc22 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":32:16)
#loc23 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":32:9)
#loc24 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":33:21)
#loc25 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":33:10)
#loc26 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":33:9)
#loc27 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":35:5)
#loc28 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":43:5)
#loc29 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":36:20)
#loc30 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":37:9)
#loc31 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":42:9)
#loc32 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":37:12)
#loc33 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":37:19)
#loc34 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":38:9)
#loc35 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":40:26)
#loc36 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":41:26)
#loc37 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":41:13)
#loc38 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":107:1)
#loc39 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":111:1)
#loc40 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":109:5)
#loc41 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":109:13)
#loc42 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":110:5)
#loc43 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":110:13)
#loc44 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":51:1)
#loc45 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":73:1)
#loc46 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":59:9)
#loc47 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":59:21)
#loc48 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":65:9)
#loc49 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":65:21)
#loc50 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":69:13)
#loc51 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":69:33)
#loc52 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":53:5)
#loc53 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":53:9)
#loc54 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":54:5)
#loc55 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":54:22)
#loc56 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":55:5)
#loc57 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":55:22)
#loc58 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":57:12)
#loc59 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":57:5)
#loc60 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":58:5)
#loc61 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":63:5)
#loc62 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":59:20)
#loc63 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":61:17)
#loc64 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":61:16)
#loc65 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":61:9)
#loc66 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":62:21)
#loc67 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":62:10)
#loc68 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":62:9)
#loc69 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":64:5)
#loc70 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":72:5)
#loc71 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":65:20)
#loc72 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":66:9)
#loc73 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":71:9)
#loc74 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":66:12)
#loc75 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":66:19)
#loc76 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":67:9)
#loc77 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":69:26)
#loc78 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":70:26)
#loc79 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":70:13)
#loc80 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc82 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":101:27)
#loc83 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":76:1)
#loc84 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":105:1)
#loc85 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":84:9)
#loc86 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":84:21)
#loc87 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":90:9)
#loc88 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":90:21)
#loc89 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":96:17)
#loc90 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":96:37)
#loc91 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":78:5)
#loc92 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":78:9)
#loc93 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":79:5)
#loc94 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":79:22)
#loc95 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":80:5)
#loc96 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":80:22)
#loc97 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":82:12)
#loc98 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":82:5)
#loc99 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":83:5)
#loc100 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":88:5)
#loc101 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":84:20)
#loc102 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":86:16)
#loc103 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":86:9)
#loc104 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":87:21)
#loc105 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":87:10)
#loc106 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":87:9)
#loc107 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":89:5)
#loc108 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":104:5)
#loc109 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":90:20)
#loc110 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":91:9)
#loc111 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":103:9)
#loc112 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":91:12)
#loc113 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":91:19)
#loc114 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":92:9)
#loc115 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":94:13)
#loc116 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":102:13)
#loc117 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":94:17)
#loc118 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":94:25)
#loc119 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":94:33)
#loc120 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":94:34)
#loc121 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":95:13)
#loc122 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":98:13)
#loc123 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":100:13)
#loc124 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":96:30)
#loc125 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":97:30)
#loc126 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":97:17)
#loc127 = loc("CWE191_Integer_Underflow__int_min_multiply_32.c":101:17)
#loc128 = loc(fused[#loc1, #loc2])
#loc129 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc7, #loc8])
#loc132 = loc(fused[#loc9, #loc10])
#loc133 = loc(fused[#loc11, #loc12])
#loc134 = loc(fused[#loc13, #loc14])
#loc135 = loc(fused[#loc15, #loc16])
#loc136 = loc(fused[#loc18, #loc17])
#loc137 = loc(fused[#loc19, #loc20])
#loc138 = loc(fused[#loc23, #loc22])
#loc139 = loc(fused[#loc26, #loc24])
#loc140 = loc(fused[#loc27, #loc28])
#loc141 = loc(fused[#loc30, #loc31])
#loc142 = loc(fused[#loc32, #loc33])
#loc143 = loc(fused[#loc34, #loc31])
#loc144 = loc(fused[#loc38, #loc39])
#loc145 = loc(fused[#loc40, #loc41])
#loc146 = loc(fused[#loc42, #loc43])
#loc147 = loc(fused[#loc44, #loc45])
#loc148 = loc(fused[#loc46, #loc47])
#loc149 = loc(fused[#loc48, #loc49])
#loc150 = loc(fused[#loc50, #loc51])
#loc151 = loc(fused[#loc52, #loc53])
#loc152 = loc(fused[#loc54, #loc55])
#loc153 = loc(fused[#loc56, #loc57])
#loc154 = loc(fused[#loc59, #loc58])
#loc155 = loc(fused[#loc60, #loc61])
#loc156 = loc(fused[#loc65, #loc63])
#loc157 = loc(fused[#loc68, #loc66])
#loc158 = loc(fused[#loc69, #loc70])
#loc159 = loc(fused[#loc72, #loc73])
#loc160 = loc(fused[#loc74, #loc75])
#loc161 = loc(fused[#loc76, #loc73])
#loc162 = loc(fused[#loc80, #loc81])
#loc163 = loc(fused[#loc83, #loc84])
#loc164 = loc(fused[#loc85, #loc86])
#loc165 = loc(fused[#loc87, #loc88])
#loc166 = loc(fused[#loc89, #loc90])
#loc167 = loc(fused[#loc91, #loc92])
#loc168 = loc(fused[#loc93, #loc94])
#loc169 = loc(fused[#loc95, #loc96])
#loc170 = loc(fused[#loc98, #loc97])
#loc171 = loc(fused[#loc99, #loc100])
#loc172 = loc(fused[#loc103, #loc102])
#loc173 = loc(fused[#loc106, #loc104])
#loc174 = loc(fused[#loc107, #loc108])
#loc175 = loc(fused[#loc110, #loc111])
#loc176 = loc(fused[#loc112, #loc113])
#loc177 = loc(fused[#loc114, #loc111])
#loc178 = loc(fused[#loc115, #loc116])
#loc179 = loc(fused[#loc118, #loc119])
#loc180 = loc(fused[#loc117, #loc120])
#loc181 = loc(fused[#loc121, #loc122, #loc123, #loc116])
