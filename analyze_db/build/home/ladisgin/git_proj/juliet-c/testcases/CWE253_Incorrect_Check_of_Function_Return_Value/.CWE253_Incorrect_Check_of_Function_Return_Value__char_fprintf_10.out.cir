!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":87:10)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":87:14)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":87:20)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":87:32)
#loc113 = loc(fused[#loc41, #loc42])
#loc114 = loc(fused[#loc43, #loc44])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc97)
  cir.func private @fprintf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc98)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc8)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"fprintf failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc97)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %2 ^bb2, ^bb7 loc(#loc103)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc104)
  ^bb3:  // pred: ^bb2
    %3 = cir.get_global @fprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
    %4 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc99)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc7)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc7)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc8)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc8)
    %10 = cir.call @fprintf(%5, %7, %9) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc20)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc105)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc106)
  ^bb4:  // pred: ^bb3
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc24)
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc13)
  } loc(#loc101)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc107)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc110)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc38)
  cir.func @main(%arg0: !s32i loc(fused[#loc41, #loc42]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc43, #loc44])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc114)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc40)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc45)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc46)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc47)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc47)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc48)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc35)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %8 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10_good : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10_good() : () -> () loc(#loc50)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc37)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %13 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10_bad() : () -> () loc(#loc54)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc38)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.return %17 : !s32i loc(#loc117)
  } loc(#loc112)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc118)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc66)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc121)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc61)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    cir.br ^bb8 loc(#loc68)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc122)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @fprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc73)
    %6 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc99)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc75)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc75)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc76)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc76)
    %12 = cir.call @fprintf(%7, %9, %11) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc73)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc123)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc124)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc79)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb6 loc(#loc72)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc72)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc65)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc65)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc63)
  } loc(#loc119)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc126)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc97)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %2 ^bb2, ^bb7 loc(#loc127)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc128)
  ^bb3:  // pred: ^bb2
    %3 = cir.get_global @fprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc89)
    %4 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc99)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc90)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc91)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc91)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc92)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc92)
    %10 = cir.call @fprintf(%5, %7, %9) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc89)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc129)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc130)
  ^bb4:  // pred: ^bb3
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc95)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb5 loc(#loc88)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc88)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc84)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc82)
  } loc(#loc125)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdio.h":357:1)
#loc4 = loc("/usr/include/stdio.h":358:45)
#loc5 = loc("/usr/include/stdio.h":150:1)
#loc6 = loc("/usr/include/stdio.h":150:14)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":30:29)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":30:37)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":32:23)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":24:1)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":35:1)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":26:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":34:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":26:8)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":27:5)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":30:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":33:9)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":30:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":30:21)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":30:50)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":31:9)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":32:13)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":72:1)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":76:1)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":74:5)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":74:11)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":75:5)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":75:11)
#loc31 = loc("/usr/include/stdlib.h":575:1)
#loc32 = loc("/usr/include/stdlib.h":575:41)
#loc33 = loc("/usr/include/time.h":76:1)
#loc34 = loc("/usr/include/time.h":76:38)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":92:15)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":94:15)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":97:15)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":99:15)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":87:1)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":102:1)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":88:1)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":90:27)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":90:22)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":90:5)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":92:5)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":93:5)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":93:75)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":94:5)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":97:5)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":98:5)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":98:74)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":99:5)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":101:12)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":101:5)
#loc59 = loc("../../testcasesupport/std_testcase.h":117:1)
#loc60 = loc("../../testcasesupport/std_testcase.h":117:12)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":47:19)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":42:1)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":57:1)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":44:5)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":56:5)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":44:8)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":45:5)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":48:5)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":50:5)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":47:9)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":52:9)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":55:9)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":52:13)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":52:21)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":52:29)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":52:37)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":52:49)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":53:9)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":54:23)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":54:13)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":60:1)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":70:1)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":62:5)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":69:5)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":62:8)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":63:5)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":65:9)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":68:9)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":65:13)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":65:21)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":65:29)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":65:37)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":65:49)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":66:9)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":67:23)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_10.c":67:13)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc12, #loc13])
#loc102 = loc(fused[#loc14, #loc15])
#loc103 = loc(fused[#loc17, #loc15])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc20, #loc22])
#loc106 = loc(fused[#loc23, #loc19])
#loc107 = loc(fused[#loc25, #loc26])
#loc108 = loc(fused[#loc27, #loc28])
#loc109 = loc(fused[#loc29, #loc30])
#loc110 = loc(fused[#loc31, #loc32])
#loc111 = loc(fused[#loc33, #loc34])
#loc112 = loc(fused[#loc39, #loc40])
#loc115 = loc(fused[#loc50, #loc51])
#loc116 = loc(fused[#loc54, #loc55])
#loc117 = loc(fused[#loc58, #loc57])
#loc118 = loc(fused[#loc59, #loc60])
#loc119 = loc(fused[#loc62, #loc63])
#loc120 = loc(fused[#loc64, #loc65])
#loc121 = loc(fused[#loc67, #loc68, #loc69, #loc65])
#loc122 = loc(fused[#loc71, #loc72])
#loc123 = loc(fused[#loc73, #loc77])
#loc124 = loc(fused[#loc78, #loc72])
#loc125 = loc(fused[#loc81, #loc82])
#loc126 = loc(fused[#loc83, #loc84])
#loc127 = loc(fused[#loc86, #loc84])
#loc128 = loc(fused[#loc87, #loc88])
#loc129 = loc(fused[#loc89, #loc93])
#loc130 = loc(fused[#loc94, #loc88])
