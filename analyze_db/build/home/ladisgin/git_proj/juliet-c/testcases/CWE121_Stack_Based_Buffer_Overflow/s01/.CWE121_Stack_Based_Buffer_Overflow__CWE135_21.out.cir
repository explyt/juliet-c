!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":30:21)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":30:28)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":159:10)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":159:14)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":159:20)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":159:32)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":64:26)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":64:33)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":94:26)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":94:33)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":119:25)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":119:32)
#loc201 = loc(fused[#loc10, #loc11])
#loc220 = loc(fused[#loc61, #loc62])
#loc221 = loc(fused[#loc63, #loc64])
#loc229 = loc(fused[#loc88, #loc89])
#loc242 = loc(fused[#loc127, #loc128])
#loc256 = loc(fused[#loc166, #loc167])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc197)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc198)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc199)
  cir.func internal private @badSink(%arg0: !cir.ptr<!void> loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc201)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc12)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc197)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc15)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc205)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc206)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc23)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc24)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc23)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc205)
          %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc22)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc22)
          %13 = cir.binop(add, %10, %12) : !u64i loc(#loc22)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc22)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc22)
          %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc22)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc22)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc206)
          %18 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc25)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc25)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc26)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc26)
          %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc27)
          %23 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc29)
        } loc(#loc204)
      } loc(#loc203)
    } loc(#loc202)
    cir.return loc(#loc9)
  } loc(#loc200)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc209)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc210)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %6 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc197)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    cir.call @badSink(%7) : (!cir.ptr<!void>) -> () loc(#loc40)
    cir.return loc(#loc31)
  } loc(#loc207)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc42)
  } loc(#loc212)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc216)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc217)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc68)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_21_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_21_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    cir.return %17 : !s32i loc(#loc224)
  } loc(#loc219)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc81)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc226)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc227)
  cir.func internal private @goodB2G1Sink(%arg0: !cir.ptr<!void> loc(fused[#loc88, #loc89])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc229)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc90)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc225)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc81)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc81)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } else {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc233)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc234)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc104)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc105)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc105)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc104)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc233)
          %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc103)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc103)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc103)
          %13 = cir.binop(add, %10, %12) : !u64i loc(#loc103)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc103)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc103)
          %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc103)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc103)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc234)
          %18 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc106)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc107)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
          %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc108)
          %23 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc109)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc109)
          cir.call @printWLine(%24) : (!cir.ptr<!s32i>) -> () loc(#loc110)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc230)
    cir.return loc(#loc87)
  } loc(#loc228)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc236)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc115)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc237)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc117)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc117)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc117)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc238)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %6 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc225)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc121)
    cir.call @goodB2G1Sink(%7) : (!cir.ptr<!void>) -> () loc(#loc122)
    cir.return loc(#loc112)
  } loc(#loc235)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc240)
  cir.func internal private @goodB2G2Sink(%arg0: !cir.ptr<!void> loc(fused[#loc127, #loc128])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc242)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc129)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc240)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc132)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc246)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc247)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc140)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc141)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc141)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc140)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc246)
          %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc139)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc139)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc139)
          %13 = cir.binop(add, %10, %12) : !u64i loc(#loc139)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc139)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc139)
          %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc139)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc139)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc247)
          %18 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc143)
          %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc144)
          %23 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc145)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
          cir.call @printWLine(%24) : (!cir.ptr<!s32i>) -> () loc(#loc146)
        } loc(#loc245)
      } loc(#loc244)
    } loc(#loc243)
    cir.return loc(#loc126)
  } loc(#loc241)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc151)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc250)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc153)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc153)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc153)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc251)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %6 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc240)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
    cir.call @goodB2G2Sink(%7) : (!cir.ptr<!void>) -> () loc(#loc158)
    cir.return loc(#loc148)
  } loc(#loc248)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc159)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc253)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc254)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc166, #loc167])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc256)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc168)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc253)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc171)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc171)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc260)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc261)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc179)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc180)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc180)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc179)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc260)
          %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc178)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc178)
          %13 = cir.binop(add, %10, %12) : !u64i loc(#loc178)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc178)
          %16 = cir.binop(mul, %13, %15) : !u64i loc(#loc178)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc178)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc178)
          cir.store %18, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc261)
          %19 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc181)
          %20 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc182)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc183)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
          %24 = cir.call @strcpy(%21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc181)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc184)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc185)
        } loc(#loc259)
      } loc(#loc258)
    } loc(#loc257)
    cir.return loc(#loc165)
  } loc(#loc255)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc263)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc190)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc264)
    %2 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc159)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc159)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc159)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc265)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc193)
    %6 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc253)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc195)
    cir.call @goodG2BSink(%7) : (!cir.ptr<!void>) -> () loc(#loc196)
    cir.return loc(#loc187)
  } loc(#loc262)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":49:20)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":28:1)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":28:24)
#loc4 = loc("/usr/include/string.h":407:1)
#loc5 = loc("/usr/include/string.h":408:33)
#loc6 = loc("/usr/include/wchar.h":98:1)
#loc7 = loc("/usr/include/wchar.h":100:14)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":30:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":42:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":31:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":32:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":41:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":32:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":33:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":34:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":40:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":36:13)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":36:49)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":37:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":37:35)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":36:30)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":36:45)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":38:26)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":38:32)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":38:19)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":39:31)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":39:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":44:1)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":52:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":46:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":46:12)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":47:12)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":47:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":49:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":50:17)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":50:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":51:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":51:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":143:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":148:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":145:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":145:14)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":146:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":146:14)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":147:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":147:13)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":164:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":166:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":169:15)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":171:15)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":159:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":174:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":160:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":162:27)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":162:22)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":162:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":164:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":165:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":165:56)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":166:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":169:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":170:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":170:55)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":171:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":173:12)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":173:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":59:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":59:29)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":69:19)
#loc82 = loc("/usr/include/wchar.h":247:1)
#loc83 = loc("/usr/include/wchar.h":247:51)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc85 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":64:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":81:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":65:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":66:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":80:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":66:8)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":67:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":70:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":72:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":69:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":73:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":79:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":75:13)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":75:52)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":76:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":76:35)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":75:30)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":75:48)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":77:26)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":77:32)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":77:19)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":78:35)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":78:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":83:1)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":91:1)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":85:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":85:12)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":86:12)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":86:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":88:20)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":88:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":89:22)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":89:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":90:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":90:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":60:1)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":60:29)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":94:1)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":106:1)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":95:1)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":96:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":105:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":96:8)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":97:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":98:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":104:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":100:13)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":100:52)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":101:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":101:35)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":100:30)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":100:48)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":102:26)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":102:32)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":102:19)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":103:35)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":103:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":108:1)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":116:1)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":110:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":110:12)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":111:12)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":111:5)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":113:20)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":113:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":114:22)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":114:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":115:18)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":115:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":138:20)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":61:1)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":61:28)
#loc162 = loc("/usr/include/string.h":141:1)
#loc163 = loc("/usr/include/string.h":142:14)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":119:1)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":131:1)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":120:1)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":121:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":130:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":121:8)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":122:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":123:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":129:9)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":125:13)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":125:49)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":126:13)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":126:35)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":125:30)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":125:45)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":127:19)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":127:26)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":127:32)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":128:31)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":128:13)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":133:1)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":141:1)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":135:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":135:12)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":136:12)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":136:5)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":138:5)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":139:21)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":139:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":140:17)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c":140:5)
#loc197 = loc(fused[#loc2, #loc3])
#loc198 = loc(fused[#loc4, #loc5])
#loc199 = loc(fused[#loc6, #loc7])
#loc200 = loc(fused[#loc8, #loc9])
#loc202 = loc(fused[#loc13, #loc14])
#loc203 = loc(fused[#loc16, #loc14])
#loc204 = loc(fused[#loc17, #loc18])
#loc205 = loc(fused[#loc19, #loc20])
#loc206 = loc(fused[#loc21, #loc22])
#loc207 = loc(fused[#loc30, #loc31])
#loc208 = loc(fused[#loc32, #loc33])
#loc209 = loc(fused[#loc35, #loc34])
#loc210 = loc(fused[#loc36, #loc1])
#loc211 = loc(fused[#loc38, #loc37])
#loc212 = loc(fused[#loc41, #loc42])
#loc213 = loc(fused[#loc43, #loc44])
#loc214 = loc(fused[#loc45, #loc46])
#loc215 = loc(fused[#loc47, #loc48])
#loc216 = loc(fused[#loc49, #loc50])
#loc217 = loc(fused[#loc51, #loc52])
#loc218 = loc(fused[#loc53, #loc54])
#loc219 = loc(fused[#loc59, #loc60])
#loc222 = loc(fused[#loc70, #loc71])
#loc223 = loc(fused[#loc74, #loc75])
#loc224 = loc(fused[#loc78, #loc77])
#loc225 = loc(fused[#loc79, #loc80])
#loc226 = loc(fused[#loc82, #loc83])
#loc227 = loc(fused[#loc84, #loc85])
#loc228 = loc(fused[#loc86, #loc87])
#loc230 = loc(fused[#loc91, #loc92])
#loc231 = loc(fused[#loc94, #loc95, #loc96, #loc92])
#loc232 = loc(fused[#loc98, #loc99])
#loc233 = loc(fused[#loc100, #loc101])
#loc234 = loc(fused[#loc102, #loc103])
#loc235 = loc(fused[#loc111, #loc112])
#loc236 = loc(fused[#loc113, #loc114])
#loc237 = loc(fused[#loc116, #loc115])
#loc238 = loc(fused[#loc118, #loc117])
#loc239 = loc(fused[#loc120, #loc119])
#loc240 = loc(fused[#loc123, #loc124])
#loc241 = loc(fused[#loc125, #loc126])
#loc243 = loc(fused[#loc130, #loc131])
#loc244 = loc(fused[#loc133, #loc131])
#loc245 = loc(fused[#loc134, #loc135])
#loc246 = loc(fused[#loc136, #loc137])
#loc247 = loc(fused[#loc138, #loc139])
#loc248 = loc(fused[#loc147, #loc148])
#loc249 = loc(fused[#loc149, #loc150])
#loc250 = loc(fused[#loc152, #loc151])
#loc251 = loc(fused[#loc154, #loc153])
#loc252 = loc(fused[#loc156, #loc155])
#loc253 = loc(fused[#loc160, #loc161])
#loc254 = loc(fused[#loc162, #loc163])
#loc255 = loc(fused[#loc164, #loc165])
#loc257 = loc(fused[#loc169, #loc170])
#loc258 = loc(fused[#loc172, #loc170])
#loc259 = loc(fused[#loc173, #loc174])
#loc260 = loc(fused[#loc175, #loc176])
#loc261 = loc(fused[#loc177, #loc178])
#loc262 = loc(fused[#loc186, #loc187])
#loc263 = loc(fused[#loc188, #loc189])
#loc264 = loc(fused[#loc191, #loc190])
#loc265 = loc(fused[#loc192, #loc159])
#loc266 = loc(fused[#loc194, #loc193])
