!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc128)
  cir.func private @printIntLine(!s32i) loc(#loc129)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_08_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc132)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc9)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc9)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc135)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc136)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc18)
          cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc137)
          cir.scope {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc24)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc139)
            %13 = cir.const #cir.int<0> : !s32i loc(#loc25)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc140)
            cir.if %14 {
              %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc27)
              %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc27)
              %17 = cir.const #cir.int<2> : !u32i loc(#loc27)
              %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc27)
              %19 = cir.const #cir.int<1> : !u32i loc(#loc27)
              %20 = cir.binop(add, %18, %19) : !u32i loc(#loc27)
              %21 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc28)
              %22 = cir.binop(sub, %20, %21) : !u32i loc(#loc142)
              cir.store %22, %3 : !u32i, !cir.ptr<!u32i> loc(#loc143)
            } loc(#loc141)
          } loc(#loc138)
          %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc30)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc30)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc144)
          %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc32)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc33)
        } loc(#loc134)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc6)
  } loc(#loc130)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc146)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc147)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc145)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.return %2 : !s32i loc(#loc149)
  } loc(#loc148)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc151)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc154)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc53)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc53)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc58)
      } else {
        cir.scope {
          %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc157)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc158)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc65)
          cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc159)
          cir.scope {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc71)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc161)
            %13 = cir.const #cir.int<0> : !s32i loc(#loc72)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc162)
            cir.if %14 {
              %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc74)
              %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc74)
              %17 = cir.const #cir.int<2> : !u32i loc(#loc74)
              %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc74)
              %19 = cir.const #cir.int<1> : !u32i loc(#loc74)
              %20 = cir.binop(add, %18, %19) : !u32i loc(#loc74)
              %21 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc75)
              %22 = cir.binop(sub, %20, %21) : !u32i loc(#loc164)
              cir.store %22, %3 : !u32i, !cir.ptr<!u32i> loc(#loc165)
            } loc(#loc163)
          } loc(#loc160)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc79)
            %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc80)
            %13 = cir.cmp(gt, %10, %12) : !u32i, !cir.bool loc(#loc167)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc82)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc83)
              cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
            } loc(#loc168)
          } loc(#loc166)
          %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc84)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc84)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc169)
          %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc87)
        } loc(#loc156)
      } loc(#loc155)
    } loc(#loc153)
    cir.return loc(#loc50)
  } loc(#loc152)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.return %2 : !s32i loc(#loc171)
  } loc(#loc170)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc174)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc96)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc96)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc177)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc178)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc105)
          cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc179)
          cir.scope {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc111)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc181)
            %13 = cir.const #cir.int<0> : !s32i loc(#loc112)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc182)
            cir.if %14 {
              %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
              %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc114)
              %17 = cir.const #cir.int<2> : !u32i loc(#loc114)
              %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc114)
              %19 = cir.const #cir.int<1> : !u32i loc(#loc114)
              %20 = cir.binop(add, %18, %19) : !u32i loc(#loc114)
              %21 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc115)
              %22 = cir.binop(sub, %20, %21) : !u32i loc(#loc184)
              cir.store %22, %3 : !u32i, !cir.ptr<!u32i> loc(#loc185)
            } loc(#loc183)
          } loc(#loc180)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc119)
            %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc120)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc120)
            %13 = cir.cmp(gt, %10, %12) : !u32i, !cir.bool loc(#loc187)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc122)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc123)
              cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc122)
            } loc(#loc188)
          } loc(#loc186)
          %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc124)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc124)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc189)
          %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc127)
        } loc(#loc176)
      } loc(#loc175)
    } loc(#loc173)
    cir.return loc(#loc93)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":33:1)
#loc6 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":50:1)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":35:5)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":49:5)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":35:8)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":35:26)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":36:5)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":37:9)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":48:9)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":38:13)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":38:22)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":39:13)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":39:17)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":40:27)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":40:13)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":40:32)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":41:13)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":44:13)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":41:17)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":41:26)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":41:31)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":42:13)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":43:31)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":43:42)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":43:17)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":46:25)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":46:13)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":47:26)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":47:13)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":109:1)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":113:1)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":111:5)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":111:11)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":112:5)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":112:11)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":21:1)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":24:1)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":23:12)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":23:5)
#loc44 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":62:19)
#loc47 = loc("/usr/include/stdlib.h":756:1)
#loc48 = loc("/usr/include/stdlib.h":756:70)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":57:1)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":83:1)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":59:5)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":82:5)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":59:8)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":59:27)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":60:5)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":63:5)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":65:5)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":62:9)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":66:9)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":81:9)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":67:13)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":67:22)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":68:13)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":68:17)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":69:27)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":69:13)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":69:32)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":70:13)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":73:13)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":70:17)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":70:26)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":70:31)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":71:13)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":72:31)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":72:42)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":72:17)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":75:13)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":78:13)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":75:17)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":75:31)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":76:13)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":77:17)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":77:22)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":79:25)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":79:13)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":80:26)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":80:13)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":26:1)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":29:1)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":28:12)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":28:5)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":86:1)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":107:1)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":88:5)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":106:5)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":88:8)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":88:26)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":89:5)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":90:9)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":105:9)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":91:13)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":91:22)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":92:13)
#loc104 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":92:17)
#loc105 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":93:27)
#loc106 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":93:13)
#loc107 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":93:32)
#loc108 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":94:13)
#loc109 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":97:13)
#loc110 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":94:17)
#loc111 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":94:26)
#loc112 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":94:31)
#loc113 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":95:13)
#loc114 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":96:31)
#loc115 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":96:42)
#loc116 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":96:17)
#loc117 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":99:13)
#loc118 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":102:13)
#loc119 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":99:17)
#loc120 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":99:31)
#loc121 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":100:13)
#loc122 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":101:17)
#loc123 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":101:22)
#loc124 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":103:25)
#loc125 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":103:13)
#loc126 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":104:26)
#loc127 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_08.c":104:13)
#loc128 = loc(fused[#loc1, #loc2])
#loc129 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc7, #loc8])
#loc132 = loc(fused[#loc9, #loc10])
#loc133 = loc(fused[#loc11, #loc8])
#loc134 = loc(fused[#loc12, #loc13])
#loc135 = loc(fused[#loc14, #loc15])
#loc136 = loc(fused[#loc16, #loc17])
#loc137 = loc(fused[#loc19, #loc20])
#loc138 = loc(fused[#loc21, #loc22])
#loc139 = loc(fused[#loc23, #loc24])
#loc140 = loc(fused[#loc23, #loc25])
#loc141 = loc(fused[#loc26, #loc22])
#loc142 = loc(fused[#loc27, #loc28])
#loc143 = loc(fused[#loc29, #loc28])
#loc144 = loc(fused[#loc31, #loc30])
#loc145 = loc(fused[#loc34, #loc35])
#loc146 = loc(fused[#loc36, #loc37])
#loc147 = loc(fused[#loc38, #loc39])
#loc148 = loc(fused[#loc40, #loc41])
#loc149 = loc(fused[#loc43, #loc42])
#loc150 = loc(fused[#loc44, #loc45])
#loc151 = loc(fused[#loc47, #loc48])
#loc152 = loc(fused[#loc49, #loc50])
#loc153 = loc(fused[#loc51, #loc52])
#loc154 = loc(fused[#loc53, #loc54])
#loc155 = loc(fused[#loc55, #loc56, #loc57, #loc52])
#loc156 = loc(fused[#loc59, #loc60])
#loc157 = loc(fused[#loc61, #loc62])
#loc158 = loc(fused[#loc63, #loc64])
#loc159 = loc(fused[#loc66, #loc67])
#loc160 = loc(fused[#loc68, #loc69])
#loc161 = loc(fused[#loc70, #loc71])
#loc162 = loc(fused[#loc70, #loc72])
#loc163 = loc(fused[#loc73, #loc69])
#loc164 = loc(fused[#loc74, #loc75])
#loc165 = loc(fused[#loc76, #loc75])
#loc166 = loc(fused[#loc77, #loc78])
#loc167 = loc(fused[#loc79, #loc80])
#loc168 = loc(fused[#loc81, #loc78])
#loc169 = loc(fused[#loc85, #loc84])
#loc170 = loc(fused[#loc88, #loc89])
#loc171 = loc(fused[#loc91, #loc90])
#loc172 = loc(fused[#loc92, #loc93])
#loc173 = loc(fused[#loc94, #loc95])
#loc174 = loc(fused[#loc96, #loc97])
#loc175 = loc(fused[#loc98, #loc95])
#loc176 = loc(fused[#loc99, #loc100])
#loc177 = loc(fused[#loc101, #loc102])
#loc178 = loc(fused[#loc103, #loc104])
#loc179 = loc(fused[#loc106, #loc107])
#loc180 = loc(fused[#loc108, #loc109])
#loc181 = loc(fused[#loc110, #loc111])
#loc182 = loc(fused[#loc110, #loc112])
#loc183 = loc(fused[#loc113, #loc109])
#loc184 = loc(fused[#loc114, #loc115])
#loc185 = loc(fused[#loc116, #loc115])
#loc186 = loc(fused[#loc117, #loc118])
#loc187 = loc(fused[#loc119, #loc120])
#loc188 = loc(fused[#loc121, #loc118])
#loc189 = loc(fused[#loc125, #loc124])
