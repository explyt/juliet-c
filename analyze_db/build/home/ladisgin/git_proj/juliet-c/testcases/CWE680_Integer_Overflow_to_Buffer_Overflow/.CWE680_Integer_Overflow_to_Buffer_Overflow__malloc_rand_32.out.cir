!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":104:10)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":104:14)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":104:20)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":104:32)
#loc215 = loc(fused[#loc93, #loc94])
#loc216 = loc(fused[#loc95, #loc96])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc177)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc178)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc179)
  cir.func private @printIntLine(!s32i) loc(#loc180)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc181)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc185)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc185)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc20)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc188)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc188)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc27)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc27)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc27)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc27)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc27)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc27)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc27)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc27)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc27)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc27)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc27)
        cir.yield %27 : !u32i loc(#loc27)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc27)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc27)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc27)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc27)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc27)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc27)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc27)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc27)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc27)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc27)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc27)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc27)
        cir.yield %31 : !u32i loc(#loc27)
      }) : (!cir.bool) -> !u32i loc(#loc27)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc27)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    } loc(#loc187)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc192)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc36)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc194)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc195)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc43)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc44)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc196)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc197)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc43)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc198)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc199)
        cir.scope {
          %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
          %25 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc52)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc52)
          %27 = cir.cmp(eq, %24, %26) : !cir.ptr<!s32i>, !cir.bool loc(#loc201)
          cir.if %27 {
            %28 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc54)
            %29 = cir.const #cir.int<1> : !s32i loc(#loc55)
            %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc56)
            cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc54)
          } loc(#loc202)
        } loc(#loc200)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc59)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc59)
          cir.store %25, %8 : !u64i, !cir.ptr<!u64i> loc(#loc204)
          cir.for : cond {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc62)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc205)
            cir.condition(%29) loc(#loc63)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc65)
              %27 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
              %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc67)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc68)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc207)
            } loc(#loc206)
            cir.yield loc(#loc58)
          } step {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc70)
            cir.store %27, %8 : !u64i, !cir.ptr<!u64i> loc(#loc208)
            cir.yield loc(#loc203)
          } loc(#loc203)
        } loc(#loc203)
        %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc72)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc73)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc74)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc75)
        %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc76)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
      } loc(#loc193)
    } loc(#loc191)
    cir.return loc(#loc12)
  } loc(#loc182)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc79)
    cir.return loc(#loc78)
  } loc(#loc209)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc211)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc212)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc213)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc87)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc90)
  cir.func @main(%arg0: !s32i loc(fused[#loc93, #loc94]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc95, #loc96])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc216)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc92)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc97)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc98)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc99)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc99)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc100)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc87)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %8 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32_good() : () -> () loc(#loc102)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc88)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc89)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %13 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32_bad() : () -> () loc(#loc106)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc90)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc109)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    cir.return %17 : !s32i loc(#loc219)
  } loc(#loc214)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc223)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc222)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc223)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc120)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc226)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc226)
      %8 = cir.const #cir.int<20> : !s32i loc(#loc127)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc227)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    } loc(#loc225)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc230)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc135)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc136)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc230)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc232)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc233)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc143)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc144)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc144)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc234)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc235)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc236)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc237)
        cir.scope {
          %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
          %25 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc152)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
          %27 = cir.cmp(eq, %24, %26) : !cir.ptr<!s32i>, !cir.bool loc(#loc239)
          cir.if %27 {
            %28 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc154)
            %29 = cir.const #cir.int<1> : !s32i loc(#loc155)
            %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc156)
            cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc154)
          } loc(#loc240)
        } loc(#loc238)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc159)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc159)
          cir.store %25, %8 : !u64i, !cir.ptr<!u64i> loc(#loc242)
          cir.for : cond {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc161)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc162)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc243)
            cir.condition(%29) loc(#loc163)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc165)
              %27 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc166)
              %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc167)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc168)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc245)
            } loc(#loc244)
            cir.yield loc(#loc158)
          } step {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc169)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc170)
            cir.store %27, %8 : !u64i, !cir.ptr<!u64i> loc(#loc246)
            cir.yield loc(#loc241)
          } loc(#loc241)
        } loc(#loc241)
        %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc172)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc173)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc171)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc174)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc175)
        %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc176)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc175)
      } loc(#loc231)
    } loc(#loc229)
    cir.return loc(#loc112)
  } loc(#loc220)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":21:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":51:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":23:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":23:9)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":24:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":24:22)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":25:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":25:22)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":27:13)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":27:12)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":27:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":28:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":33:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":29:9)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":29:21)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":29:20)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":31:16)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":31:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":32:21)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":32:10)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":32:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":34:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":50:5)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":35:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":35:21)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":35:20)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":36:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":49:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":37:13)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":37:20)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":38:13)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":38:18)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":41:32)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":41:39)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":41:46)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":41:56)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":41:57)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":41:13)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":42:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":42:47)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":42:17)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":42:31)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":42:37)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":42:38)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":42:44)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":42:43)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":43:13)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":46:13)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":43:22)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":43:18)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":43:25)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":43:37)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":43:27)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":44:13)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":45:33)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":45:17)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":45:28)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":45:29)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":43:44)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":43:43)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":47:26)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":47:37)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":47:38)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":47:13)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":48:13)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":48:18)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":90:1)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":93:1)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":92:5)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":92:13)
#loc81 = loc("/usr/include/stdlib.h":575:1)
#loc82 = loc("/usr/include/stdlib.h":575:41)
#loc83 = loc("/usr/include/time.h":76:1)
#loc84 = loc("/usr/include/time.h":76:38)
#loc85 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc86 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":109:15)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":111:15)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":114:15)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":116:15)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":104:1)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":119:1)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":105:1)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":107:27)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":107:22)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":107:5)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":109:5)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":110:5)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":110:69)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":111:5)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":114:5)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":115:5)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":115:68)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":116:5)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":118:12)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":118:5)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":58:1)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":88:1)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":60:5)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":60:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":61:5)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":61:22)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":62:5)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":62:22)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":64:13)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":64:12)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":64:5)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":65:5)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":70:5)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":66:9)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":66:21)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":66:20)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":68:16)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":68:9)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":69:21)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":69:10)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":69:9)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":71:5)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":87:5)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":72:9)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":72:21)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":72:20)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":73:9)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":86:9)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":74:13)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":74:20)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":75:13)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":75:18)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":78:32)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":78:39)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":78:46)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":78:56)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":78:57)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":78:13)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":79:13)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":79:47)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":79:17)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":79:31)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":79:37)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":79:38)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":79:44)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":79:43)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":80:13)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":83:13)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":80:22)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":80:18)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":80:25)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":80:37)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":80:27)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":81:13)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":82:33)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":82:17)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":82:28)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":82:29)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":80:44)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":80:43)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":84:26)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":84:37)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":84:38)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":84:13)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":85:13)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_32.c":85:18)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc3, #loc4])
#loc179 = loc(fused[#loc5, #loc6])
#loc180 = loc(fused[#loc7, #loc8])
#loc181 = loc(fused[#loc9, #loc10])
#loc182 = loc(fused[#loc11, #loc12])
#loc183 = loc(fused[#loc13, #loc14])
#loc184 = loc(fused[#loc15, #loc16])
#loc185 = loc(fused[#loc17, #loc18])
#loc186 = loc(fused[#loc21, #loc19])
#loc187 = loc(fused[#loc22, #loc23])
#loc188 = loc(fused[#loc24, #loc25])
#loc189 = loc(fused[#loc28, #loc27])
#loc190 = loc(fused[#loc31, #loc29])
#loc191 = loc(fused[#loc32, #loc33])
#loc192 = loc(fused[#loc34, #loc35])
#loc193 = loc(fused[#loc37, #loc38])
#loc194 = loc(fused[#loc39, #loc40])
#loc195 = loc(fused[#loc41, #loc42])
#loc196 = loc(fused[#loc45, #loc46])
#loc197 = loc(fused[#loc44, #loc46])
#loc198 = loc(fused[#loc43, #loc47])
#loc199 = loc(fused[#loc48, #loc47])
#loc200 = loc(fused[#loc49, #loc50])
#loc201 = loc(fused[#loc51, #loc52])
#loc202 = loc(fused[#loc53, #loc50])
#loc203 = loc(fused[#loc57, #loc58])
#loc204 = loc(fused[#loc60, #loc59])
#loc205 = loc(fused[#loc61, #loc62])
#loc206 = loc(fused[#loc64, #loc58])
#loc207 = loc(fused[#loc66, #loc65])
#loc208 = loc(fused[#loc70, #loc69])
#loc209 = loc(fused[#loc77, #loc78])
#loc210 = loc(fused[#loc79, #loc80])
#loc211 = loc(fused[#loc81, #loc82])
#loc212 = loc(fused[#loc83, #loc84])
#loc213 = loc(fused[#loc85, #loc86])
#loc214 = loc(fused[#loc91, #loc92])
#loc217 = loc(fused[#loc102, #loc103])
#loc218 = loc(fused[#loc106, #loc107])
#loc219 = loc(fused[#loc110, #loc109])
#loc220 = loc(fused[#loc111, #loc112])
#loc221 = loc(fused[#loc113, #loc114])
#loc222 = loc(fused[#loc115, #loc116])
#loc223 = loc(fused[#loc117, #loc118])
#loc224 = loc(fused[#loc121, #loc119])
#loc225 = loc(fused[#loc122, #loc123])
#loc226 = loc(fused[#loc124, #loc125])
#loc227 = loc(fused[#loc128, #loc127])
#loc228 = loc(fused[#loc131, #loc129])
#loc229 = loc(fused[#loc132, #loc133])
#loc230 = loc(fused[#loc134, #loc135])
#loc231 = loc(fused[#loc137, #loc138])
#loc232 = loc(fused[#loc139, #loc140])
#loc233 = loc(fused[#loc141, #loc142])
#loc234 = loc(fused[#loc145, #loc146])
#loc235 = loc(fused[#loc144, #loc146])
#loc236 = loc(fused[#loc143, #loc147])
#loc237 = loc(fused[#loc148, #loc147])
#loc238 = loc(fused[#loc149, #loc150])
#loc239 = loc(fused[#loc151, #loc152])
#loc240 = loc(fused[#loc153, #loc150])
#loc241 = loc(fused[#loc157, #loc158])
#loc242 = loc(fused[#loc160, #loc159])
#loc243 = loc(fused[#loc161, #loc162])
#loc244 = loc(fused[#loc164, #loc158])
#loc245 = loc(fused[#loc166, #loc165])
#loc246 = loc(fused[#loc170, #loc169])
