!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":297:10)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":297:14)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":297:20)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":297:32)
#true = #cir.bool<true> : !cir.bool
#loc568 = loc(fused[#loc133, #loc134])
#loc569 = loc(fused[#loc135, #loc136])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc515)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc516)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc517)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc518)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc519)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc520)
  cir.func private @printIntLine(!s32i) loc(#loc521)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc522)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc524)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc525)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc28)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc529)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc529)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc529)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc37)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc37)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc37)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc37)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc37)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc37)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc37)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc37)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc516)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc38)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc39)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc40)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc531)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc45)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc533)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc48)
            } loc(#loc532)
          } loc(#loc530)
        } loc(#loc528)
      } loc(#loc527)
    } loc(#loc526)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc537)
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc538)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc59)
          %8 = cir.const #cir.int<10> : !s32i loc(#loc60)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc60)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc539)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc540)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc59)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc541)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc538)
          cir.scope {
            %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc66)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc66)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc543)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc68)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc69)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc70)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc68)
            } loc(#loc544)
          } loc(#loc542)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc73)
            cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc546)
            cir.for : cond {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc76)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc547)
              cir.condition(%20) loc(#loc77)
            } body {
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc79)
                %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
                %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc82)
                cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc549)
              } loc(#loc548)
              cir.yield loc(#loc72)
            } step {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc84)
              cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc550)
              cir.yield loc(#loc545)
            } loc(#loc545)
          } loc(#loc545)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc88)
            %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc552)
            cir.if %19 {
              %20 = cir.const #cir.int<1> : !s32i loc(#loc92)
              %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc95)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc554)
              cir.scope {
                %24 = cir.const #cir.int<0> : !s32i loc(#loc98)
                cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc556)
                cir.for : cond {
                  %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                  %26 = cir.const #cir.int<10> : !s32i loc(#loc101)
                  %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc557)
                  cir.condition(%27) loc(#loc102)
                } body {
                  cir.scope {
                    %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
                    %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc106)
                    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc107)
                  } loc(#loc558)
                  cir.yield loc(#loc97)
                } step {
                  %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                  %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc109)
                  cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc559)
                  cir.yield loc(#loc555)
                } loc(#loc555)
              } loc(#loc555)
            } else {
              %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc110)
            } loc(#loc553)
          } loc(#loc551)
          %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc111)
          %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc112)
          cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc111)
        } loc(#loc536)
      } loc(#loc535)
    } loc(#loc534)
    cir.return loc(#loc20)
  } loc(#loc523)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc561)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc115)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc562)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc117)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc563)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc119)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc564)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc121)
    cir.return loc(#loc114)
  } loc(#loc560)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc565)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc566)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc128)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc130)
  cir.func @main(%arg0: !s32i loc(fused[#loc133, #loc134]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc135, #loc136])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc568)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc569)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc132)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc137)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc138)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc139)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc139)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc140)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc127)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc570)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_good() : () -> () loc(#loc142)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc128)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc128)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc129)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc571)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_bad() : () -> () loc(#loc146)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc130)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc149)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc572)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc572)
    cir.return %17 : !s32i loc(#loc572)
  } loc(#loc567)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc152)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc574)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc158)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc575)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc162)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc162)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc579)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc579)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc579)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc170)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc171)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc171)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc171)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc171)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc171)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc171)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc171)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc171)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc516)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc172)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc173)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc174)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc174)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc581)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc178)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc179)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc583)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc182)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc182)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc183)
            } loc(#loc582)
          } loc(#loc580)
        } loc(#loc578)
      } loc(#loc577)
    } loc(#loc576)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc186)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc186)
      cir.if %4 {
        %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc190)
      } else {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc587)
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc588)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc197)
          %8 = cir.const #cir.int<10> : !s32i loc(#loc198)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc198)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc589)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc590)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc197)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc591)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc588)
          cir.scope {
            %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc203)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc204)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc204)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc593)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc206)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc207)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc208)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc206)
            } loc(#loc594)
          } loc(#loc592)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc211)
            cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc596)
            cir.for : cond {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc213)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc214)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc597)
              cir.condition(%20) loc(#loc215)
            } body {
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc217)
                %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc218)
                %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc219)
                %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc220)
                cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc599)
              } loc(#loc598)
              cir.yield loc(#loc210)
            } step {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc221)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc222)
              cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc600)
              cir.yield loc(#loc595)
            } loc(#loc595)
          } loc(#loc595)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc225)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc226)
            %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc602)
            %20 = cir.ternary(%19, true {
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc228)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc229)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc603)
              %24 = cir.ternary(%23, true {
                %25 = cir.const #true loc(#loc227)
                cir.yield %25 : !cir.bool loc(#loc227)
              }, false {
                %25 = cir.const #false loc(#loc227)
                cir.yield %25 : !cir.bool loc(#loc227)
              }) : (!cir.bool) -> !cir.bool loc(#loc227)
              cir.yield %24 : !cir.bool loc(#loc227)
            }, false {
              %21 = cir.const #false loc(#loc227)
              cir.yield %21 : !cir.bool loc(#loc227)
            }) : (!cir.bool) -> !cir.bool loc(#loc227)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc234)
              %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc235)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc237)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc605)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc240)
                cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc607)
                cir.for : cond {
                  %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc243)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc608)
                  cir.condition(%28) loc(#loc244)
                } body {
                  cir.scope {
                    %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc246)
                    %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc247)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc248)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc249)
                  } loc(#loc609)
                  cir.yield loc(#loc239)
                } step {
                  %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc251)
                  cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc610)
                  cir.yield loc(#loc606)
                } loc(#loc606)
              } loc(#loc606)
            } else {
              %21 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc152)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc152)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc252)
            } loc(#loc604)
          } loc(#loc601)
          %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc253)
          %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc254)
          cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc253)
        } loc(#loc586)
      } loc(#loc585)
    } loc(#loc584)
    cir.return loc(#loc154)
  } loc(#loc573)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc612)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc259)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc260)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc613)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc264)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc264)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc617)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc617)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc617)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc272)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc273)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc273)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc273)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc273)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc273)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc273)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc273)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc273)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc516)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc274)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc275)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc276)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc276)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc619)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc280)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc281)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc621)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc284)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc284)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc285)
            } loc(#loc620)
          } loc(#loc618)
        } loc(#loc616)
      } loc(#loc615)
    } loc(#loc614)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc288)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc288)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc625)
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc626)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc296)
          %8 = cir.const #cir.int<10> : !s32i loc(#loc297)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc297)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc627)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc628)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc296)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc629)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc626)
          cir.scope {
            %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc302)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc303)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc303)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc631)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc305)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc306)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc307)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc305)
            } loc(#loc632)
          } loc(#loc630)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc310)
            cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc634)
            cir.for : cond {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc312)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc313)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc635)
              cir.condition(%20) loc(#loc314)
            } body {
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc316)
                %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc317)
                %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc318)
                %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc319)
                cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc637)
              } loc(#loc636)
              cir.yield loc(#loc309)
            } step {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc320)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc321)
              cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc638)
              cir.yield loc(#loc633)
            } loc(#loc633)
          } loc(#loc633)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc324)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc325)
            %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc640)
            %20 = cir.ternary(%19, true {
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc327)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc328)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc641)
              %24 = cir.ternary(%23, true {
                %25 = cir.const #true loc(#loc326)
                cir.yield %25 : !cir.bool loc(#loc326)
              }, false {
                %25 = cir.const #false loc(#loc326)
                cir.yield %25 : !cir.bool loc(#loc326)
              }) : (!cir.bool) -> !cir.bool loc(#loc326)
              cir.yield %24 : !cir.bool loc(#loc326)
            }, false {
              %21 = cir.const #false loc(#loc326)
              cir.yield %21 : !cir.bool loc(#loc326)
            }) : (!cir.bool) -> !cir.bool loc(#loc326)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc333)
              %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc334)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc335)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc336)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc643)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc339)
                cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc645)
                cir.for : cond {
                  %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc341)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc342)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc646)
                  cir.condition(%28) loc(#loc343)
                } body {
                  cir.scope {
                    %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc345)
                    %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc346)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc347)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc345)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc348)
                  } loc(#loc647)
                  cir.yield loc(#loc338)
                } step {
                  %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc349)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc350)
                  cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc648)
                  cir.yield loc(#loc644)
                } loc(#loc644)
              } loc(#loc644)
            } else {
              %21 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc351)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc351)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc352)
            } loc(#loc642)
          } loc(#loc639)
          %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc353)
          %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc354)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc354)
          cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc353)
        } loc(#loc624)
      } loc(#loc623)
    } loc(#loc622)
    cir.return loc(#loc256)
  } loc(#loc611)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc650)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc359)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc360)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc651)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc364)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc364)
      cir.if %4 {
        %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc368)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc368)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc369)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc370)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc654)
      } loc(#loc653)
    } loc(#loc652)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc374)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc374)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc658)
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc659)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc382)
          %8 = cir.const #cir.int<10> : !s32i loc(#loc383)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc383)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc660)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc661)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc382)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc662)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc659)
          cir.scope {
            %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc388)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc389)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc389)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc664)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc391)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc392)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc393)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc391)
            } loc(#loc665)
          } loc(#loc663)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc396)
            cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc667)
            cir.for : cond {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc398)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc399)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc668)
              cir.condition(%20) loc(#loc400)
            } body {
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc402)
                %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc403)
                %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc404)
                %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc405)
                cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc670)
              } loc(#loc669)
              cir.yield loc(#loc395)
            } step {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc406)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc407)
              cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc671)
              cir.yield loc(#loc666)
            } loc(#loc666)
          } loc(#loc666)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc410)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc411)
            %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc673)
            cir.if %19 {
              %20 = cir.const #cir.int<1> : !s32i loc(#loc415)
              %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc416)
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc417)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc418)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc675)
              cir.scope {
                %24 = cir.const #cir.int<0> : !s32i loc(#loc421)
                cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc677)
                cir.for : cond {
                  %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc423)
                  %26 = cir.const #cir.int<10> : !s32i loc(#loc424)
                  %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc678)
                  cir.condition(%27) loc(#loc425)
                } body {
                  cir.scope {
                    %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc427)
                    %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc428)
                    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc429)
                    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc427)
                    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc430)
                  } loc(#loc679)
                  cir.yield loc(#loc420)
                } step {
                  %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc431)
                  %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc432)
                  cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc680)
                  cir.yield loc(#loc676)
                } loc(#loc676)
              } loc(#loc676)
            } else {
              %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc433)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc433)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc434)
            } loc(#loc674)
          } loc(#loc672)
          %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc435)
          %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc436)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc436)
          cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc435)
        } loc(#loc657)
      } loc(#loc656)
    } loc(#loc655)
    cir.return loc(#loc356)
  } loc(#loc649)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc682)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc441)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc442)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc683)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc446)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc446)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc448)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc686)
      } loc(#loc685)
    } loc(#loc684)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc452)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc452)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc690)
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc691)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc460)
          %8 = cir.const #cir.int<10> : !s32i loc(#loc461)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc461)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc692)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc693)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc460)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc694)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc691)
          cir.scope {
            %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc466)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc467)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc467)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc696)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc469)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc470)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc471)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc469)
            } loc(#loc697)
          } loc(#loc695)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc474)
            cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc699)
            cir.for : cond {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc476)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc477)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc700)
              cir.condition(%20) loc(#loc478)
            } body {
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc480)
                %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc481)
                %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc482)
                %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc483)
                cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc702)
              } loc(#loc701)
              cir.yield loc(#loc473)
            } step {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc484)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc485)
              cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc703)
              cir.yield loc(#loc698)
            } loc(#loc698)
          } loc(#loc698)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc488)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc489)
            %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc705)
            cir.if %19 {
              %20 = cir.const #cir.int<1> : !s32i loc(#loc493)
              %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc494)
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc495)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc496)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc707)
              cir.scope {
                %24 = cir.const #cir.int<0> : !s32i loc(#loc499)
                cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc709)
                cir.for : cond {
                  %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc501)
                  %26 = cir.const #cir.int<10> : !s32i loc(#loc502)
                  %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc710)
                  cir.condition(%27) loc(#loc503)
                } body {
                  cir.scope {
                    %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc505)
                    %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc506)
                    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc507)
                    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc505)
                    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc508)
                  } loc(#loc711)
                  cir.yield loc(#loc498)
                } step {
                  %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc509)
                  %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc510)
                  cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc712)
                  cir.yield loc(#loc708)
                } loc(#loc708)
              } loc(#loc708)
            } else {
              %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc511)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc511)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc512)
            } loc(#loc706)
          } loc(#loc704)
          %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc513)
          %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc514)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc514)
          cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc513)
        } loc(#loc689)
      } loc(#loc688)
    } loc(#loc687)
    cir.return loc(#loc438)
  } loc(#loc681)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":41:27)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":69:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":74:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":28:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":28:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":29:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":44:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":29:8)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":30:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":43:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":32:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":32:49)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":34:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":42:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":34:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":34:36)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":34:53)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":34:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":34:63)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":35:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":38:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":40:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":37:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":37:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":37:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":37:40)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":41:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":45:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":73:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":45:8)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":46:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":47:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":72:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":48:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":48:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":49:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":49:58)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":49:35)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":49:42)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":49:47)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":49:57)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":50:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":50:43)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":50:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":50:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":50:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":50:34)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":50:40)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":50:39)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":52:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":55:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":52:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":52:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":52:25)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":52:29)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":52:27)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":53:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":54:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":54:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":54:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":54:25)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":52:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":52:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":58:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":70:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":58:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":58:25)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":59:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":66:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":68:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":60:32)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":60:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":60:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":60:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":62:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":65:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":62:25)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":62:21)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":62:28)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":62:32)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":62:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":63:17)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":64:34)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":64:41)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":64:42)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":64:21)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":62:37)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":62:36)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":69:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":71:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":71:18)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":280:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":286:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":282:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":282:14)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":283:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":283:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":284:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":284:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":285:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":285:14)
#loc123 = loc("/usr/include/stdlib.h":575:1)
#loc124 = loc("/usr/include/stdlib.h":575:41)
#loc125 = loc("/usr/include/time.h":76:1)
#loc126 = loc("/usr/include/time.h":76:38)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":302:15)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":304:15)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":307:15)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":309:15)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":297:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":312:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":298:1)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":300:27)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":300:22)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":300:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":302:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":303:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":303:63)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":304:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":307:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":308:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":308:62)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":309:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":311:12)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":311:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":105:19)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":130:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":81:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":135:1)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":83:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":83:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":85:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":85:12)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":85:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":86:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":101:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":86:8)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":87:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":88:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":100:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":89:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":89:49)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":91:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":99:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":91:23)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":91:36)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":91:53)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":91:17)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":91:63)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":92:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":95:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":97:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":94:29)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":94:24)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":94:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":94:40)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":98:27)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":98:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":102:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":134:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":102:8)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":103:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":106:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":108:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":105:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":109:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":133:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":110:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":110:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":111:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":111:58)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":111:35)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":111:42)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":111:47)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":111:57)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":112:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":112:43)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":112:17)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":112:27)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":112:33)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":112:34)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":112:40)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":112:39)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":114:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":117:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":114:22)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":114:18)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":114:25)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":114:29)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":114:27)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":115:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":116:29)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":116:17)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":116:24)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":116:25)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":114:34)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":114:33)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":119:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":131:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":119:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":119:25)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":119:27)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":119:30)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":119:38)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":119:40)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":120:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":127:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":129:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":121:32)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":121:17)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":121:24)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":121:28)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":123:17)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":126:17)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":123:25)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":123:21)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":123:28)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":123:32)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":123:30)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":124:17)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":125:34)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":125:41)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":125:42)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":125:21)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":123:37)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":123:36)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":130:17)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":132:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":132:18)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":138:1)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":187:1)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":140:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":140:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":142:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":142:12)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":142:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":143:5)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":158:5)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":143:8)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":144:5)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":145:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":157:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":146:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":146:49)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":148:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":156:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":148:23)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":148:36)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":148:53)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":148:17)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":148:63)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":149:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":152:13)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":154:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":151:29)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":151:24)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":151:17)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":151:40)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":155:27)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":155:17)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":159:5)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":186:5)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":159:8)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":160:5)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":161:9)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":185:9)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":162:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":162:17)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":163:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":163:58)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":163:35)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":163:42)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":163:47)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":163:57)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":164:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":164:43)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":164:17)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":164:27)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":164:33)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":164:34)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":164:40)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":164:39)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":166:13)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":169:13)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":166:22)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":166:18)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":166:25)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":166:29)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":166:27)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":167:13)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":168:29)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":168:17)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":168:24)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":168:25)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":166:34)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":166:33)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":171:13)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":183:13)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":171:17)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":171:25)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":171:27)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":171:30)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":171:38)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":171:40)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":172:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":179:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":181:13)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":173:32)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":173:17)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":173:24)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":173:28)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":175:17)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":178:17)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":175:25)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":175:21)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":175:28)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":175:32)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":175:30)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":176:17)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":177:34)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":177:41)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":177:42)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":177:21)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":175:37)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":175:36)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":182:27)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":182:17)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":184:13)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":184:18)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":190:1)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":235:1)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":192:5)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":192:9)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":194:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":194:12)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":194:5)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":195:5)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":205:5)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":195:8)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":196:5)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":199:5)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":201:5)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":198:19)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":198:9)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":204:16)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":204:9)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":206:5)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":234:5)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":206:8)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":207:5)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":208:9)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":233:9)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":209:13)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":209:17)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":210:13)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":210:58)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":210:35)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":210:42)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":210:47)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":210:57)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":211:13)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":211:43)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":211:17)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":211:27)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":211:33)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":211:34)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":211:40)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":211:39)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":213:13)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":216:13)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":213:22)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":213:18)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":213:25)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":213:29)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":213:27)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":214:13)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":215:29)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":215:17)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":215:24)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":215:25)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":213:34)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":213:33)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":219:13)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":231:13)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":219:17)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":219:25)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":220:13)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":227:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":229:13)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":221:32)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":221:17)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":221:24)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":221:28)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":223:17)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":226:17)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":223:25)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":223:21)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":223:28)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":223:32)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":223:30)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":224:17)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":225:34)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":225:41)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":225:42)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":225:21)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":223:37)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":223:36)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":230:27)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":230:17)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":232:13)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":232:18)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":238:1)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":278:1)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":240:5)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":240:9)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":242:13)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":242:12)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":242:5)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":243:5)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":248:5)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":243:8)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":244:5)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":247:16)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":247:9)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":249:5)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":277:5)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":249:8)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":250:5)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":251:9)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":276:9)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":252:13)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":252:17)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":253:13)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":253:58)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":253:35)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":253:42)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":253:47)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":253:57)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":254:13)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":254:43)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":254:17)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":254:27)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":254:33)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":254:34)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":254:40)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":254:39)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":256:13)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":259:13)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":256:22)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":256:18)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":256:25)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":256:29)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":256:27)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":257:13)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":258:29)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":258:17)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":258:24)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":258:25)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":256:34)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":256:33)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":262:13)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":274:13)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":262:17)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":262:25)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":263:13)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":270:13)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":272:13)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":264:32)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":264:17)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":264:24)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":264:28)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":266:17)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":269:17)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":266:25)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":266:21)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":266:28)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":266:32)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":266:30)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":267:17)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":268:34)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":268:41)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":268:42)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":268:21)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":266:37)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":266:36)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":273:27)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":273:17)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":275:13)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c":275:18)
#loc515 = loc(fused[#loc1, #loc2])
#loc516 = loc(fused[#loc3, #loc4])
#loc517 = loc(fused[#loc5, #loc6])
#loc518 = loc(fused[#loc7, #loc8])
#loc519 = loc(fused[#loc10, #loc11])
#loc520 = loc(fused[#loc12, #loc13])
#loc521 = loc(fused[#loc14, #loc15])
#loc522 = loc(fused[#loc17, #loc18])
#loc523 = loc(fused[#loc19, #loc20])
#loc524 = loc(fused[#loc21, #loc22])
#loc525 = loc(fused[#loc25, #loc23])
#loc526 = loc(fused[#loc26, #loc27])
#loc527 = loc(fused[#loc29, #loc27])
#loc528 = loc(fused[#loc30, #loc31])
#loc529 = loc(fused[#loc32, #loc33])
#loc530 = loc(fused[#loc34, #loc35])
#loc531 = loc(fused[#loc39, #loc40])
#loc532 = loc(fused[#loc41, #loc42, #loc43, #loc35])
#loc533 = loc(fused[#loc46, #loc47])
#loc534 = loc(fused[#loc49, #loc50])
#loc535 = loc(fused[#loc52, #loc50])
#loc536 = loc(fused[#loc53, #loc54])
#loc537 = loc(fused[#loc55, #loc56])
#loc538 = loc(fused[#loc57, #loc58])
#loc539 = loc(fused[#loc61, #loc62])
#loc540 = loc(fused[#loc60, #loc62])
#loc541 = loc(fused[#loc59, #loc58])
#loc542 = loc(fused[#loc63, #loc64])
#loc543 = loc(fused[#loc65, #loc66])
#loc544 = loc(fused[#loc67, #loc64])
#loc545 = loc(fused[#loc71, #loc72])
#loc546 = loc(fused[#loc74, #loc73])
#loc547 = loc(fused[#loc75, #loc76])
#loc548 = loc(fused[#loc78, #loc72])
#loc549 = loc(fused[#loc80, #loc79])
#loc550 = loc(fused[#loc84, #loc83])
#loc551 = loc(fused[#loc85, #loc86])
#loc552 = loc(fused[#loc87, #loc88])
#loc553 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc554 = loc(fused[#loc93, #loc92])
#loc555 = loc(fused[#loc96, #loc97])
#loc556 = loc(fused[#loc99, #loc98])
#loc557 = loc(fused[#loc100, #loc101])
#loc558 = loc(fused[#loc103, #loc97])
#loc559 = loc(fused[#loc109, #loc108])
#loc560 = loc(fused[#loc113, #loc114])
#loc561 = loc(fused[#loc115, #loc116])
#loc562 = loc(fused[#loc117, #loc118])
#loc563 = loc(fused[#loc119, #loc120])
#loc564 = loc(fused[#loc121, #loc122])
#loc565 = loc(fused[#loc123, #loc124])
#loc566 = loc(fused[#loc125, #loc126])
#loc567 = loc(fused[#loc131, #loc132])
#loc570 = loc(fused[#loc142, #loc143])
#loc571 = loc(fused[#loc146, #loc147])
#loc572 = loc(fused[#loc150, #loc149])
#loc573 = loc(fused[#loc153, #loc154])
#loc574 = loc(fused[#loc155, #loc156])
#loc575 = loc(fused[#loc159, #loc157])
#loc576 = loc(fused[#loc160, #loc161])
#loc577 = loc(fused[#loc163, #loc161])
#loc578 = loc(fused[#loc164, #loc165])
#loc579 = loc(fused[#loc166, #loc167])
#loc580 = loc(fused[#loc168, #loc169])
#loc581 = loc(fused[#loc173, #loc174])
#loc582 = loc(fused[#loc175, #loc176, #loc177, #loc169])
#loc583 = loc(fused[#loc180, #loc181])
#loc584 = loc(fused[#loc184, #loc185])
#loc585 = loc(fused[#loc187, #loc188, #loc189, #loc185])
#loc586 = loc(fused[#loc191, #loc192])
#loc587 = loc(fused[#loc193, #loc194])
#loc588 = loc(fused[#loc195, #loc196])
#loc589 = loc(fused[#loc199, #loc200])
#loc590 = loc(fused[#loc198, #loc200])
#loc591 = loc(fused[#loc197, #loc196])
#loc592 = loc(fused[#loc201, #loc202])
#loc593 = loc(fused[#loc203, #loc204])
#loc594 = loc(fused[#loc205, #loc202])
#loc595 = loc(fused[#loc209, #loc210])
#loc596 = loc(fused[#loc212, #loc211])
#loc597 = loc(fused[#loc213, #loc214])
#loc598 = loc(fused[#loc216, #loc210])
#loc599 = loc(fused[#loc218, #loc217])
#loc600 = loc(fused[#loc222, #loc221])
#loc601 = loc(fused[#loc223, #loc224])
#loc602 = loc(fused[#loc225, #loc226])
#loc603 = loc(fused[#loc228, #loc230])
#loc604 = loc(fused[#loc231, #loc232, #loc233, #loc224])
#loc605 = loc(fused[#loc235, #loc234])
#loc606 = loc(fused[#loc238, #loc239])
#loc607 = loc(fused[#loc241, #loc240])
#loc608 = loc(fused[#loc242, #loc243])
#loc609 = loc(fused[#loc245, #loc239])
#loc610 = loc(fused[#loc251, #loc250])
#loc611 = loc(fused[#loc255, #loc256])
#loc612 = loc(fused[#loc257, #loc258])
#loc613 = loc(fused[#loc261, #loc259])
#loc614 = loc(fused[#loc262, #loc263])
#loc615 = loc(fused[#loc265, #loc263])
#loc616 = loc(fused[#loc266, #loc267])
#loc617 = loc(fused[#loc268, #loc269])
#loc618 = loc(fused[#loc270, #loc271])
#loc619 = loc(fused[#loc275, #loc276])
#loc620 = loc(fused[#loc277, #loc278, #loc279, #loc271])
#loc621 = loc(fused[#loc282, #loc283])
#loc622 = loc(fused[#loc286, #loc287])
#loc623 = loc(fused[#loc289, #loc287])
#loc624 = loc(fused[#loc290, #loc291])
#loc625 = loc(fused[#loc292, #loc293])
#loc626 = loc(fused[#loc294, #loc295])
#loc627 = loc(fused[#loc298, #loc299])
#loc628 = loc(fused[#loc297, #loc299])
#loc629 = loc(fused[#loc296, #loc295])
#loc630 = loc(fused[#loc300, #loc301])
#loc631 = loc(fused[#loc302, #loc303])
#loc632 = loc(fused[#loc304, #loc301])
#loc633 = loc(fused[#loc308, #loc309])
#loc634 = loc(fused[#loc311, #loc310])
#loc635 = loc(fused[#loc312, #loc313])
#loc636 = loc(fused[#loc315, #loc309])
#loc637 = loc(fused[#loc317, #loc316])
#loc638 = loc(fused[#loc321, #loc320])
#loc639 = loc(fused[#loc322, #loc323])
#loc640 = loc(fused[#loc324, #loc325])
#loc641 = loc(fused[#loc327, #loc329])
#loc642 = loc(fused[#loc330, #loc331, #loc332, #loc323])
#loc643 = loc(fused[#loc334, #loc333])
#loc644 = loc(fused[#loc337, #loc338])
#loc645 = loc(fused[#loc340, #loc339])
#loc646 = loc(fused[#loc341, #loc342])
#loc647 = loc(fused[#loc344, #loc338])
#loc648 = loc(fused[#loc350, #loc349])
#loc649 = loc(fused[#loc355, #loc356])
#loc650 = loc(fused[#loc357, #loc358])
#loc651 = loc(fused[#loc361, #loc359])
#loc652 = loc(fused[#loc362, #loc363])
#loc653 = loc(fused[#loc365, #loc366, #loc367, #loc363])
#loc654 = loc(fused[#loc371, #loc370])
#loc655 = loc(fused[#loc372, #loc373])
#loc656 = loc(fused[#loc375, #loc373])
#loc657 = loc(fused[#loc376, #loc377])
#loc658 = loc(fused[#loc378, #loc379])
#loc659 = loc(fused[#loc380, #loc381])
#loc660 = loc(fused[#loc384, #loc385])
#loc661 = loc(fused[#loc383, #loc385])
#loc662 = loc(fused[#loc382, #loc381])
#loc663 = loc(fused[#loc386, #loc387])
#loc664 = loc(fused[#loc388, #loc389])
#loc665 = loc(fused[#loc390, #loc387])
#loc666 = loc(fused[#loc394, #loc395])
#loc667 = loc(fused[#loc397, #loc396])
#loc668 = loc(fused[#loc398, #loc399])
#loc669 = loc(fused[#loc401, #loc395])
#loc670 = loc(fused[#loc403, #loc402])
#loc671 = loc(fused[#loc407, #loc406])
#loc672 = loc(fused[#loc408, #loc409])
#loc673 = loc(fused[#loc410, #loc411])
#loc674 = loc(fused[#loc412, #loc413, #loc414, #loc409])
#loc675 = loc(fused[#loc416, #loc415])
#loc676 = loc(fused[#loc419, #loc420])
#loc677 = loc(fused[#loc422, #loc421])
#loc678 = loc(fused[#loc423, #loc424])
#loc679 = loc(fused[#loc426, #loc420])
#loc680 = loc(fused[#loc432, #loc431])
#loc681 = loc(fused[#loc437, #loc438])
#loc682 = loc(fused[#loc439, #loc440])
#loc683 = loc(fused[#loc443, #loc441])
#loc684 = loc(fused[#loc444, #loc445])
#loc685 = loc(fused[#loc447, #loc445])
#loc686 = loc(fused[#loc449, #loc448])
#loc687 = loc(fused[#loc450, #loc451])
#loc688 = loc(fused[#loc453, #loc451])
#loc689 = loc(fused[#loc454, #loc455])
#loc690 = loc(fused[#loc456, #loc457])
#loc691 = loc(fused[#loc458, #loc459])
#loc692 = loc(fused[#loc462, #loc463])
#loc693 = loc(fused[#loc461, #loc463])
#loc694 = loc(fused[#loc460, #loc459])
#loc695 = loc(fused[#loc464, #loc465])
#loc696 = loc(fused[#loc466, #loc467])
#loc697 = loc(fused[#loc468, #loc465])
#loc698 = loc(fused[#loc472, #loc473])
#loc699 = loc(fused[#loc475, #loc474])
#loc700 = loc(fused[#loc476, #loc477])
#loc701 = loc(fused[#loc479, #loc473])
#loc702 = loc(fused[#loc481, #loc480])
#loc703 = loc(fused[#loc485, #loc484])
#loc704 = loc(fused[#loc486, #loc487])
#loc705 = loc(fused[#loc488, #loc489])
#loc706 = loc(fused[#loc490, #loc491, #loc492, #loc487])
#loc707 = loc(fused[#loc494, #loc493])
#loc708 = loc(fused[#loc497, #loc498])
#loc709 = loc(fused[#loc500, #loc499])
#loc710 = loc(fused[#loc501, #loc502])
#loc711 = loc(fused[#loc504, #loc498])
#loc712 = loc(fused[#loc510, #loc509])
