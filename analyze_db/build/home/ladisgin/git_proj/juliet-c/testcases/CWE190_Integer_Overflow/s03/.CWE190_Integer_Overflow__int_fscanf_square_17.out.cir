!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":113:10)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":113:14)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":113:20)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":113:32)
#true = #cir.bool<true> : !cir.bool
#loc200 = loc(fused[#loc64, #loc65])
#loc201 = loc(fused[#loc66, #loc67])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc173)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc175)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc177)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc178)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc19)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc183)
        cir.condition(%7) loc(#loc23)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc25)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc174)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc25)
        } loc(#loc184)
        cir.yield loc(#loc18)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc28)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
        cir.yield loc(#loc181)
      } loc(#loc181)
    } loc(#loc181)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc31)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc187)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc188)
        cir.condition(%7) loc(#loc35)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc191)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc41)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc40)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc41)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc191)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc42)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc43)
          } loc(#loc190)
        } loc(#loc189)
        cir.yield loc(#loc30)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc45)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        cir.yield loc(#loc186)
      } loc(#loc186)
    } loc(#loc186)
    cir.return loc(#loc9)
  } loc(#loc176)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc193)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc196)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc197)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc201)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc71)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call @CWE190_Integer_Overflow__int_fscanf_square_17_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call @CWE190_Integer_Overflow__int_fscanf_square_17_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    cir.return %17 : !s32i loc(#loc204)
  } loc(#loc199)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc207)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc95)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc98)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc212)
        cir.condition(%7) loc(#loc99)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc101)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc174)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc102)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc103)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc103)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc101)
        } loc(#loc213)
        cir.yield loc(#loc94)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc105)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
        cir.yield loc(#loc210)
      } loc(#loc210)
    } loc(#loc210)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc108)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc216)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc217)
        cir.condition(%7) loc(#loc112)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc117)
            %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc117)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc117)
            %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc117)
            %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc220)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc119)
              %13 = cir.abs %12 poison : !s32i loc(#loc120)
              %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc120)
              %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc121)
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc122)
              %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc122)
              %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc121)
              %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc121)
              %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc221)
              %21 = cir.ternary(%20, true {
                %22 = cir.const #true loc(#loc118)
                cir.yield %22 : !cir.bool loc(#loc118)
              }, false {
                %22 = cir.const #false loc(#loc118)
                cir.yield %22 : !cir.bool loc(#loc118)
              }) : (!cir.bool) -> !cir.bool loc(#loc118)
              cir.yield %21 : !cir.bool loc(#loc118)
            }, false {
              %12 = cir.const #false loc(#loc118)
              cir.yield %12 : !cir.bool loc(#loc118)
            }) : (!cir.bool) -> !cir.bool loc(#loc118)
            cir.if %11 {
              %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
              %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
              %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc129)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc223)
              %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc131)
            } else {
              %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc83)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc83)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc132)
            } loc(#loc222)
          } loc(#loc219)
        } loc(#loc218)
        cir.yield loc(#loc107)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc134)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc224)
        cir.yield loc(#loc215)
      } loc(#loc215)
    } loc(#loc215)
    cir.return loc(#loc85)
  } loc(#loc205)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc227)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc228)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc142)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc146)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc232)
        cir.condition(%7) loc(#loc150)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc152)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc234)
        } loc(#loc233)
        cir.yield loc(#loc145)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc155)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
        cir.yield loc(#loc230)
      } loc(#loc230)
    } loc(#loc230)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc158)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc237)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc160)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc161)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc238)
        cir.condition(%7) loc(#loc162)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc167)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc168)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc241)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc169)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc170)
          } loc(#loc240)
        } loc(#loc239)
        cir.yield loc(#loc157)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc171)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc172)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc242)
        cir.yield loc(#loc236)
      } loc(#loc236)
    } loc(#loc236)
    cir.return loc(#loc136)
  } loc(#loc225)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":33:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":43:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":26:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":26:11)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":27:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":29:12)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":29:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:13)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:16)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:20)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:18)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":31:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":33:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":33:16)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:24)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:23)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:5)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":42:5)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:16)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:20)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:18)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":36:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":37:9)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":41:9)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":39:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":39:33)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":39:26)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":40:26)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":40:13)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:24)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:23)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":98:1)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":102:1)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":100:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":100:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":101:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":101:13)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":118:15)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":120:15)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":123:15)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":125:15)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":113:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":128:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":114:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":116:27)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":116:22)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":116:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":118:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":119:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":119:56)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":120:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":123:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":124:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":124:55)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":125:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":127:12)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":127:5)
#loc82 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":71:23)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":50:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":74:1)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":52:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":52:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":52:11)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":53:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":53:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":55:12)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":55:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":60:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:13)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:9)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:16)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:20)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:18)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":57:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":59:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":59:16)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":59:23)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:24)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:23)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":73:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:13)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:16)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:20)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:18)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":62:5)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":72:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:20)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:28)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:35)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:31)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:49)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:62)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:69)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":65:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":68:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":70:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":66:13)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":66:33)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":66:26)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":67:26)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":67:13)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":71:13)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:24)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:23)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":77:1)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":96:1)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":79:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":79:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":79:11)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":80:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":80:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":82:12)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":82:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":87:5)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:13)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:9)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:16)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:20)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:18)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":84:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":86:16)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":86:9)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:24)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:23)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:5)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":95:5)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:13)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:9)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:16)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:20)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:18)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":89:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":90:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":94:9)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":92:13)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":92:33)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":92:26)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":93:26)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":93:13)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:24)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:23)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc6, #loc7])
#loc176 = loc(fused[#loc8, #loc9])
#loc177 = loc(fused[#loc10, #loc11])
#loc178 = loc(fused[#loc10, #loc12])
#loc179 = loc(fused[#loc13, #loc14])
#loc180 = loc(fused[#loc16, #loc15])
#loc181 = loc(fused[#loc17, #loc18])
#loc182 = loc(fused[#loc20, #loc19])
#loc183 = loc(fused[#loc21, #loc22])
#loc184 = loc(fused[#loc24, #loc18])
#loc185 = loc(fused[#loc28, #loc27])
#loc186 = loc(fused[#loc29, #loc30])
#loc187 = loc(fused[#loc32, #loc31])
#loc188 = loc(fused[#loc33, #loc34])
#loc189 = loc(fused[#loc36, #loc30])
#loc190 = loc(fused[#loc37, #loc38])
#loc191 = loc(fused[#loc39, #loc40])
#loc192 = loc(fused[#loc45, #loc44])
#loc193 = loc(fused[#loc46, #loc47])
#loc194 = loc(fused[#loc48, #loc49])
#loc195 = loc(fused[#loc50, #loc51])
#loc196 = loc(fused[#loc52, #loc53])
#loc197 = loc(fused[#loc54, #loc55])
#loc198 = loc(fused[#loc56, #loc57])
#loc199 = loc(fused[#loc62, #loc63])
#loc202 = loc(fused[#loc73, #loc74])
#loc203 = loc(fused[#loc77, #loc78])
#loc204 = loc(fused[#loc81, #loc80])
#loc205 = loc(fused[#loc84, #loc85])
#loc206 = loc(fused[#loc86, #loc87])
#loc207 = loc(fused[#loc86, #loc88])
#loc208 = loc(fused[#loc89, #loc90])
#loc209 = loc(fused[#loc92, #loc91])
#loc210 = loc(fused[#loc93, #loc94])
#loc211 = loc(fused[#loc96, #loc95])
#loc212 = loc(fused[#loc97, #loc98])
#loc213 = loc(fused[#loc100, #loc94])
#loc214 = loc(fused[#loc105, #loc104])
#loc215 = loc(fused[#loc106, #loc107])
#loc216 = loc(fused[#loc109, #loc108])
#loc217 = loc(fused[#loc110, #loc111])
#loc218 = loc(fused[#loc113, #loc107])
#loc219 = loc(fused[#loc114, #loc115])
#loc220 = loc(fused[#loc116, #loc117])
#loc221 = loc(fused[#loc120, #loc123])
#loc222 = loc(fused[#loc124, #loc125, #loc126, #loc115])
#loc223 = loc(fused[#loc127, #loc128])
#loc224 = loc(fused[#loc134, #loc133])
#loc225 = loc(fused[#loc135, #loc136])
#loc226 = loc(fused[#loc137, #loc138])
#loc227 = loc(fused[#loc137, #loc139])
#loc228 = loc(fused[#loc140, #loc141])
#loc229 = loc(fused[#loc143, #loc142])
#loc230 = loc(fused[#loc144, #loc145])
#loc231 = loc(fused[#loc147, #loc146])
#loc232 = loc(fused[#loc148, #loc149])
#loc233 = loc(fused[#loc151, #loc145])
#loc234 = loc(fused[#loc153, #loc152])
#loc235 = loc(fused[#loc155, #loc154])
#loc236 = loc(fused[#loc156, #loc157])
#loc237 = loc(fused[#loc159, #loc158])
#loc238 = loc(fused[#loc160, #loc161])
#loc239 = loc(fused[#loc163, #loc157])
#loc240 = loc(fused[#loc164, #loc165])
#loc241 = loc(fused[#loc166, #loc167])
#loc242 = loc(fused[#loc172, #loc171])
