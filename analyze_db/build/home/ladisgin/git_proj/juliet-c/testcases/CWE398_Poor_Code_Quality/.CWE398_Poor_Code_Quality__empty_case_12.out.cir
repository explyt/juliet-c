!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc58 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":102:10)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":102:14)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":102:20)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":102:32)
#loc135 = loc(fused[#loc58, #loc59])
#loc136 = loc(fused[#loc60, #loc61])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc115)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc8)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc120)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc122)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc122)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %5 ^bb2, ^bb11 loc(#loc123)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc124)
  ^bb3:  // pred: ^bb2
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc26)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc125)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.br ^bb5 loc(#loc27)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %9 : !s32i, ^bb8 [
      0: ^bb7
    ] loc(#loc27)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc31)
  ^bb8:  // 2 preds: ^bb5, ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // pred: ^bb9
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc7)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    cir.br ^bb20 loc(#loc21)
  ^bb11:  // pred: ^bb1
    cir.br ^bb12 loc(#loc127)
  ^bb12:  // pred: ^bb11
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %13 = cir.const #cir.int<3> : !s32i loc(#loc36)
    %14 = cir.binop(rem, %12, %13) : !s32i loc(#loc128)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb13 loc(#loc129)
  ^bb13:  // pred: ^bb12
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.br ^bb14 loc(#loc37)
  ^bb14:  // pred: ^bb13
    cir.switch.flat %15 : !s32i, ^bb17 [
      0: ^bb16
    ] loc(#loc37)
  ^bb15:  // no predecessors
    cir.br ^bb16 loc(#loc40)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc8)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb17 loc(#loc42)
  ^bb17:  // 2 preds: ^bb14, ^bb16
    cir.br ^bb18 loc(#loc38)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc34)
  ^bb19:  // pred: ^bb18
    %18 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc9)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb20 loc(#loc17)
  ^bb20:  // 2 preds: ^bb10, ^bb19
    cir.br ^bb21 loc(#loc17)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc11)
  } loc(#loc118)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc45)
  } loc(#loc130)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc132)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE398_Poor_Code_Quality__empty_case_12_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call @CWE398_Poor_Code_Quality__empty_case_12_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.return %17 : !s32i loc(#loc139)
  } loc(#loc134)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc142)
    cir.br ^bb1 loc(#loc143)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc144)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc144)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc84)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %5 ^bb2, ^bb11 loc(#loc145)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc146)
  ^bb3:  // pred: ^bb2
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc92)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc147)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.br ^bb4 loc(#loc148)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.br ^bb5 loc(#loc93)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %9 : !s32i, ^bb8 [
      0: ^bb7
    ] loc(#loc93)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc96)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc97)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb8 loc(#loc99)
  ^bb8:  // 2 preds: ^bb5, ^bb7
    cir.br ^bb9 loc(#loc94)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc90)
  ^bb10:  // pred: ^bb9
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc100)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb20 loc(#loc87)
  ^bb11:  // pred: ^bb1
    cir.br ^bb12 loc(#loc149)
  ^bb12:  // pred: ^bb11
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc104)
    %15 = cir.const #cir.int<3> : !s32i loc(#loc105)
    %16 = cir.binop(rem, %14, %15) : !s32i loc(#loc150)
    cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.br ^bb13 loc(#loc151)
  ^bb13:  // pred: ^bb12
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.br ^bb14 loc(#loc106)
  ^bb14:  // pred: ^bb13
    cir.switch.flat %17 : !s32i, ^bb17 [
      0: ^bb16
    ] loc(#loc106)
  ^bb15:  // no predecessors
    cir.br ^bb16 loc(#loc109)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc110)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb17 loc(#loc112)
  ^bb17:  // 2 preds: ^bb14, ^bb16
    cir.br ^bb18 loc(#loc107)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc103)
  ^bb19:  // pred: ^bb18
    %20 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc113)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc113)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb20 loc(#loc83)
  ^bb20:  // 2 preds: ^bb10, ^bb19
    cir.br ^bb21 loc(#loc83)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc77)
  } loc(#loc140)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":33:19)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":43:27)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":47:19)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":20:1)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":49:1)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":26:13)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":26:32)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":39:13)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":39:32)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":22:5)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":48:5)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":22:8)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":22:33)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":23:5)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":34:5)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":36:5)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":25:9)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":32:9)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":26:22)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":26:31)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":27:13)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":31:13)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":27:21)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":29:13)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":30:17)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":33:9)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":38:9)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":46:9)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":39:22)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":39:31)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":40:13)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":45:13)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":40:21)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":42:13)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":43:17)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":44:17)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":47:9)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":88:1)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":91:1)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":90:5)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":90:11)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":107:15)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":109:15)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":112:15)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":114:15)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":102:1)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":117:1)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":103:1)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":105:27)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":105:22)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":105:5)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":107:5)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":108:5)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":108:50)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":109:5)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":112:5)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":113:5)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":113:49)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":114:5)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":116:12)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":116:5)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":56:1)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":86:1)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":62:13)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":62:32)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":76:13)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":76:32)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":58:5)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":85:5)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":58:8)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":58:33)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":59:5)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":71:5)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":73:5)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":61:9)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":69:9)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":62:22)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":62:31)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":63:13)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":68:13)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":63:21)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":65:13)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":66:27)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":66:17)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":67:17)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":70:19)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":70:9)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":75:9)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":83:9)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":76:22)
#loc105 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":76:31)
#loc106 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":77:13)
#loc107 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":82:13)
#loc108 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":77:21)
#loc109 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":79:13)
#loc110 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":80:27)
#loc111 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":80:17)
#loc112 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":81:17)
#loc113 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":84:19)
#loc114 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":84:9)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc10, #loc11])
#loc119 = loc(fused[#loc12, #loc13])
#loc120 = loc(fused[#loc14, #loc15])
#loc121 = loc(fused[#loc16, #loc17])
#loc122 = loc(fused[#loc18, #loc19])
#loc123 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc124 = loc(fused[#loc23, #loc24])
#loc125 = loc(fused[#loc25, #loc26])
#loc126 = loc(fused[#loc27, #loc28])
#loc127 = loc(fused[#loc33, #loc34])
#loc128 = loc(fused[#loc35, #loc36])
#loc129 = loc(fused[#loc37, #loc38])
#loc130 = loc(fused[#loc44, #loc45])
#loc131 = loc(fused[#loc46, #loc47])
#loc132 = loc(fused[#loc48, #loc49])
#loc133 = loc(fused[#loc50, #loc51])
#loc134 = loc(fused[#loc56, #loc57])
#loc137 = loc(fused[#loc67, #loc68])
#loc138 = loc(fused[#loc71, #loc72])
#loc139 = loc(fused[#loc75, #loc74])
#loc140 = loc(fused[#loc76, #loc77])
#loc141 = loc(fused[#loc78, #loc79])
#loc142 = loc(fused[#loc80, #loc81])
#loc143 = loc(fused[#loc82, #loc83])
#loc144 = loc(fused[#loc84, #loc85])
#loc145 = loc(fused[#loc86, #loc87, #loc88, #loc83])
#loc146 = loc(fused[#loc89, #loc90])
#loc147 = loc(fused[#loc91, #loc92])
#loc148 = loc(fused[#loc93, #loc94])
#loc149 = loc(fused[#loc102, #loc103])
#loc150 = loc(fused[#loc104, #loc105])
#loc151 = loc(fused[#loc106, #loc107])
