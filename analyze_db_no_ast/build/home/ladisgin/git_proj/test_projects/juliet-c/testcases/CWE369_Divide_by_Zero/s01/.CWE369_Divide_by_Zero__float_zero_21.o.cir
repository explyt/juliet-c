!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_21.c":27:21)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_21.c":27:27)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_21.c":60:26)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_21.c":60:32)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_21.c":94:26)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_21.c":94:32)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_21.c":123:25)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_21.c":123:31)
#loc162 = loc(fused[#loc7, #loc8])
#loc180 = loc(fused[#loc50, #loc51])
#loc195 = loc(fused[#loc92, #loc93])
#loc210 = loc(fused[#loc132, #loc133])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc159)
  cir.func private  @printIntLine(!s32i) loc(#loc160)
  cir.func internal private  @badSink(%arg0: !cir.float loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc162)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc159)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc166)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc18)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc19)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc19)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc167)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc167)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc166)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc21)
        } loc(#loc165)
      } loc(#loc164)
    } loc(#loc163)
    cir.return loc(#loc6)
  } loc(#loc161)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc26)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc170)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc28)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc171)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc159)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc32)
    cir.call @badSink(%5) : (!cir.float) -> () loc(#loc33)
    cir.return loc(#loc23)
  } loc(#loc168)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc35)
  } loc(#loc173)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc177)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc47)
  cir.func internal private  @goodB2G1Sink(%arg0: !cir.float loc(fused[#loc50, #loc51])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc180)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc52)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc177)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc55)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc62)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc62)
          %6 = cir.fabs %5 : !cir.double loc(#loc62)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc63)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !s32i loc(#loc184)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc65)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc186)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc71)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc72)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc72)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc187)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc187)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc186)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc74)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc47)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc75)
          } loc(#loc185)
        } loc(#loc183)
      } loc(#loc182)
    } loc(#loc181)
    cir.return loc(#loc49)
  } loc(#loc179)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc80)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc190)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc82)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc191)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %4 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc177)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc86)
    cir.call @goodB2G1Sink(%5) : (!cir.float) -> () loc(#loc87)
    cir.return loc(#loc77)
  } loc(#loc188)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc193)
  cir.func internal private  @goodB2G2Sink(%arg0: !cir.float loc(fused[#loc92, #loc93])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc195)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc94)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc193)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc97)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc97)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc101)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc101)
          %6 = cir.fabs %5 : !cir.double loc(#loc101)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc102)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !s32i loc(#loc199)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc104)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc201)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc110)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc111)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc111)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc202)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc202)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc201)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc113)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc114)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc114)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc115)
          } loc(#loc200)
        } loc(#loc198)
      } loc(#loc197)
    } loc(#loc196)
    cir.return loc(#loc91)
  } loc(#loc194)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc120)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc205)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc122)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc206)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %4 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc193)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc126)
    cir.call @goodB2G2Sink(%5) : (!cir.float) -> () loc(#loc127)
    cir.return loc(#loc117)
  } loc(#loc203)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc208)
  cir.func internal private  @goodG2BSink(%arg0: !cir.float loc(fused[#loc132, #loc133])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc210)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc134)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc208)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc137)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc214)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc143)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc144)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc144)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc215)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc215)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc214)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc145)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc146)
        } loc(#loc213)
      } loc(#loc212)
    } loc(#loc211)
    cir.return loc(#loc131)
  } loc(#loc209)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc217)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc151)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc218)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc153)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc219)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc208)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc157)
    cir.call @goodG2BSink(%5) : (!cir.float) -> () loc(#loc158)
    cir.return loc(#loc148)
  } loc(#loc216)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_21.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__float_zero_21.c":25:1)
#loc2 = loc("CWE369_Divide_by_Zero__float_zero_21.c":25:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_21.c":27:1)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_21.c":37:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_21.c":28:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_21.c":29:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_21.c":36:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_21.c":29:8)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_21.c":30:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_21.c":31:9)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_21.c":35:9)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_21.c":33:13)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_21.c":33:44)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_21.c":33:32)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_21.c":33:40)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_21.c":34:26)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_21.c":34:13)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_21.c":39:1)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_21.c":48:1)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_21.c":41:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_21.c":41:11)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_21.c":43:12)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_21.c":43:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_21.c":45:12)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_21.c":45:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_21.c":46:17)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_21.c":46:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_21.c":47:13)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_21.c":47:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_21.c":146:1)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_21.c":151:1)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_21.c":148:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_21.c":148:14)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_21.c":149:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_21.c":149:14)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_21.c":150:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_21.c":150:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_21.c":55:1)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_21.c":55:29)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_21.c":65:19)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_21.c":77:23)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_21.c":60:1)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_21.c":80:1)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_21.c":61:1)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_21.c":62:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_21.c":79:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_21.c":62:8)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_21.c":63:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_21.c":66:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_21.c":68:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_21.c":65:9)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_21.c":70:9)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_21.c":78:9)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_21.c":70:17)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_21.c":70:25)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_21.c":70:12)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_21.c":70:23)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_21.c":71:9)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_21.c":74:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_21.c":76:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_21.c":72:13)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_21.c":72:44)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_21.c":72:32)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_21.c":72:40)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_21.c":73:26)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_21.c":73:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_21.c":77:13)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_21.c":82:1)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_21.c":91:1)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_21.c":84:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_21.c":84:11)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_21.c":86:12)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_21.c":86:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_21.c":88:12)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_21.c":88:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_21.c":89:22)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_21.c":89:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_21.c":90:18)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_21.c":90:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_21.c":56:1)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_21.c":56:29)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_21.c":94:1)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_21.c":109:1)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_21.c":95:1)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_21.c":96:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_21.c":108:5)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_21.c":96:8)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_21.c":97:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_21.c":99:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_21.c":107:9)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_21.c":99:17)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_21.c":99:25)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_21.c":99:12)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_21.c":99:23)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_21.c":100:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_21.c":103:9)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_21.c":105:9)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_21.c":101:13)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_21.c":101:44)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_21.c":101:32)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_21.c":101:40)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_21.c":102:26)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_21.c":102:13)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_21.c":106:23)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_21.c":106:13)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_21.c":111:1)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_21.c":120:1)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_21.c":113:5)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_21.c":113:11)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_21.c":115:12)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_21.c":115:5)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_21.c":117:12)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_21.c":117:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_21.c":118:22)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_21.c":118:5)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_21.c":119:18)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_21.c":119:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_21.c":57:1)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_21.c":57:28)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_21.c":123:1)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_21.c":133:1)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_21.c":124:1)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_21.c":125:5)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_21.c":132:5)
#loc137 = loc("CWE369_Divide_by_Zero__float_zero_21.c":125:8)
#loc138 = loc("CWE369_Divide_by_Zero__float_zero_21.c":126:5)
#loc139 = loc("CWE369_Divide_by_Zero__float_zero_21.c":127:9)
#loc140 = loc("CWE369_Divide_by_Zero__float_zero_21.c":131:9)
#loc141 = loc("CWE369_Divide_by_Zero__float_zero_21.c":129:13)
#loc142 = loc("CWE369_Divide_by_Zero__float_zero_21.c":129:44)
#loc143 = loc("CWE369_Divide_by_Zero__float_zero_21.c":129:32)
#loc144 = loc("CWE369_Divide_by_Zero__float_zero_21.c":129:40)
#loc145 = loc("CWE369_Divide_by_Zero__float_zero_21.c":130:26)
#loc146 = loc("CWE369_Divide_by_Zero__float_zero_21.c":130:13)
#loc147 = loc("CWE369_Divide_by_Zero__float_zero_21.c":135:1)
#loc148 = loc("CWE369_Divide_by_Zero__float_zero_21.c":144:1)
#loc149 = loc("CWE369_Divide_by_Zero__float_zero_21.c":137:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_zero_21.c":137:11)
#loc151 = loc("CWE369_Divide_by_Zero__float_zero_21.c":139:12)
#loc152 = loc("CWE369_Divide_by_Zero__float_zero_21.c":139:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_zero_21.c":141:12)
#loc154 = loc("CWE369_Divide_by_Zero__float_zero_21.c":141:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_zero_21.c":142:21)
#loc156 = loc("CWE369_Divide_by_Zero__float_zero_21.c":142:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_zero_21.c":143:17)
#loc158 = loc("CWE369_Divide_by_Zero__float_zero_21.c":143:5)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc10, #loc11])
#loc164 = loc(fused[#loc13, #loc11])
#loc165 = loc(fused[#loc14, #loc15])
#loc166 = loc(fused[#loc16, #loc17])
#loc167 = loc(fused[#loc18, #loc19])
#loc168 = loc(fused[#loc22, #loc23])
#loc169 = loc(fused[#loc24, #loc25])
#loc170 = loc(fused[#loc27, #loc26])
#loc171 = loc(fused[#loc29, #loc28])
#loc172 = loc(fused[#loc31, #loc30])
#loc173 = loc(fused[#loc34, #loc35])
#loc174 = loc(fused[#loc36, #loc37])
#loc175 = loc(fused[#loc38, #loc39])
#loc176 = loc(fused[#loc40, #loc41])
#loc177 = loc(fused[#loc42, #loc43])
#loc178 = loc(fused[#loc44, #loc45])
#loc179 = loc(fused[#loc48, #loc49])
#loc181 = loc(fused[#loc53, #loc54])
#loc182 = loc(fused[#loc56, #loc57, #loc58, #loc54])
#loc183 = loc(fused[#loc60, #loc61])
#loc184 = loc(fused[#loc64, #loc63])
#loc185 = loc(fused[#loc66, #loc67, #loc68, #loc61])
#loc186 = loc(fused[#loc69, #loc70])
#loc187 = loc(fused[#loc71, #loc72])
#loc188 = loc(fused[#loc76, #loc77])
#loc189 = loc(fused[#loc78, #loc79])
#loc190 = loc(fused[#loc81, #loc80])
#loc191 = loc(fused[#loc83, #loc82])
#loc192 = loc(fused[#loc85, #loc84])
#loc193 = loc(fused[#loc88, #loc89])
#loc194 = loc(fused[#loc90, #loc91])
#loc196 = loc(fused[#loc95, #loc96])
#loc197 = loc(fused[#loc98, #loc96])
#loc198 = loc(fused[#loc99, #loc100])
#loc199 = loc(fused[#loc103, #loc102])
#loc200 = loc(fused[#loc105, #loc106, #loc107, #loc100])
#loc201 = loc(fused[#loc108, #loc109])
#loc202 = loc(fused[#loc110, #loc111])
#loc203 = loc(fused[#loc116, #loc117])
#loc204 = loc(fused[#loc118, #loc119])
#loc205 = loc(fused[#loc121, #loc120])
#loc206 = loc(fused[#loc123, #loc122])
#loc207 = loc(fused[#loc125, #loc124])
#loc208 = loc(fused[#loc128, #loc129])
#loc209 = loc(fused[#loc130, #loc131])
#loc211 = loc(fused[#loc135, #loc136])
#loc212 = loc(fused[#loc138, #loc136])
#loc213 = loc(fused[#loc139, #loc140])
#loc214 = loc(fused[#loc141, #loc142])
#loc215 = loc(fused[#loc143, #loc144])
#loc216 = loc(fused[#loc147, #loc148])
#loc217 = loc(fused[#loc149, #loc150])
#loc218 = loc(fused[#loc152, #loc151])
#loc219 = loc(fused[#loc154, #loc153])
#loc220 = loc(fused[#loc156, #loc155])
