!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":133:10)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":133:14)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":133:20)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":133:32)
#loc226 = loc(fused[#loc76, #loc77])
#loc227 = loc(fused[#loc78, #loc79])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc194)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc195)
  cir.global "private" constant cir_private @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc196)
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc197)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc198)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc199)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc201)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc202)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc18)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc18)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc203)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc18)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc202)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc20)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc20)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc20)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc20)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
    cir.scope {
      %19 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc205)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc205)
      %21 = cir.call %20() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc23)
      %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc23)
      cir.if %22 {
        %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
        cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc28)
        %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc28)
        %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
        %27 = cir.const #cir.int<0> : !s32i loc(#loc30)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc31)
        cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc208)
      } loc(#loc206)
    } loc(#loc204)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc196)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc210)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc211)
      %22 = cir.get_global @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc196)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc196)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc37)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc38)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc37)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc212)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc43)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc214)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc45)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc46)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc47)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc215)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc216)
          cir.condition(%34) loc(#loc48)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc51)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc51)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc51)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc54)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc218)
          } loc(#loc217)
          cir.yield loc(#loc42)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc56)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc57)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc219)
          cir.yield loc(#loc213)
        } loc(#loc213)
      } loc(#loc213)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    } loc(#loc209)
    cir.return loc(#loc14)
  } loc(#loc200)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    cir.return loc(#loc61)
  } loc(#loc220)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc223)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc73)
  cir.func @main(%arg0: !s32i loc(fused[#loc76, #loc77]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc78, #loc79])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc227)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc75)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc80)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc81)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc82)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc82)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc83)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc70)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11_good() : () -> () loc(#loc85)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc71)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc72)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11_bad() : () -> () loc(#loc89)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc73)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    cir.return %17 : !s32i loc(#loc230)
  } loc(#loc225)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc96)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc234)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc102)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc102)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc102)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc102)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc102)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc235)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc102)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc234)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc104)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc104)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc104)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc104)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc104)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc104)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc104)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.scope {
      %19 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc237)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc237)
      %21 = cir.call %20() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc107)
      %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc107)
      cir.if %22 {
        %23 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc96)
        %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc96)
        cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc112)
      } else {
        %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
        cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc239)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc115)
        %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc115)
        %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
        %27 = cir.const #cir.int<0> : !s32i loc(#loc117)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc118)
        cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc240)
      } loc(#loc238)
    } loc(#loc236)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc195)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc242)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc243)
      %22 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc195)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc195)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc124)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc125)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc124)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc244)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc130)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc130)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc246)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc132)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc133)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc134)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc134)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc247)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc248)
          cir.condition(%34) loc(#loc135)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc137)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc138)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc138)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc138)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc140)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc141)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc250)
          } loc(#loc249)
          cir.yield loc(#loc129)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc143)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc144)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc251)
          cir.yield loc(#loc245)
        } loc(#loc245)
      } loc(#loc245)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    } loc(#loc241)
    cir.return loc(#loc98)
  } loc(#loc232)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc254)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc152)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc152)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc152)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc152)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc152)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc255)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc152)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc152)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc254)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc154)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc154)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc154)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc154)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc154)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc154)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc154)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc154)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc255)
    cir.scope {
      %19 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc257)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc257)
      %21 = cir.call %20() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
      %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc157)
      cir.if %22 {
        %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
        cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc259)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc162)
        %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc162)
        %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
        %27 = cir.const #cir.int<0> : !s32i loc(#loc164)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc165)
        cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc260)
      } loc(#loc258)
    } loc(#loc256)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc194)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc262)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc263)
      %22 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc194)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc194)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc171)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc172)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc171)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc264)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc177)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc177)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc266)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc179)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc180)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc181)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc181)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc267)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc268)
          cir.condition(%34) loc(#loc182)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc184)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc185)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc185)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc185)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc186)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc187)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc188)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc270)
          } loc(#loc269)
          cir.yield loc(#loc176)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc190)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc191)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc271)
          cir.yield loc(#loc265)
        } loc(#loc265)
      } loc(#loc265)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc192)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    } loc(#loc261)
    cir.return loc(#loc148)
  } loc(#loc252)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":104:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":104:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":77:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":77:29)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":41:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":41:29)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":28:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":52:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":30:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":31:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":31:36)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":32:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":32:37)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":33:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":39:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":33:8)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":33:26)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":34:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":37:16)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":37:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":38:19)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":38:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":38:14)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":38:15)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":40:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":51:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":42:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":42:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":42:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":43:21)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":43:28)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":43:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":43:34)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":46:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":49:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":46:18)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":46:14)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":46:21)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":46:25)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":46:37)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":46:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":47:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":48:30)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":48:23)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":48:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":48:18)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":48:19)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":48:31)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":46:41)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":46:40)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":50:19)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":50:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":117:1)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":121:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":119:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":119:14)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":120:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":120:14)
#loc66 = loc("/usr/include/stdlib.h":575:1)
#loc67 = loc("/usr/include/stdlib.h":575:41)
#loc68 = loc("/usr/include/time.h":76:1)
#loc69 = loc("/usr/include/time.h":76:38)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":138:15)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":140:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":143:15)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":145:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":133:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":148:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":134:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":136:27)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":136:22)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":136:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":138:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":139:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":139:73)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":140:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":143:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":144:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":144:72)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":145:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":147:12)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":147:5)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc95 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":67:19)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":59:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":88:1)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":61:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":61:12)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":62:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":62:36)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":63:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":63:37)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":64:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":75:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":64:8)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":64:27)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":65:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":68:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":70:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":67:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":73:16)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":73:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":74:19)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":74:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":74:14)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":74:15)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":76:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":87:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":78:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":78:16)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":78:19)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":79:21)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":79:28)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":79:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":79:34)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":82:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":85:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":82:18)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":82:14)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":82:21)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":82:25)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":82:37)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":82:23)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":83:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":84:30)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":84:23)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":84:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":84:18)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":84:19)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":84:31)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":82:41)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":82:40)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":86:19)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":86:9)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":91:1)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":115:1)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":93:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":93:12)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":94:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":94:36)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":95:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":95:37)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":96:5)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":102:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":96:8)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":96:26)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":97:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":100:16)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":100:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":101:19)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":101:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":101:14)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":101:15)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":103:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":114:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":105:9)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":105:16)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":105:19)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":106:21)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":106:28)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":106:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":106:34)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":109:9)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":112:9)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":109:18)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":109:14)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":109:21)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":109:25)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":109:37)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":109:23)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":110:9)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":111:30)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":111:23)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":111:13)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":111:18)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":111:19)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":111:31)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":109:41)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":109:40)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":113:19)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c":113:9)
#loc194 = loc(fused[#loc1, #loc2])
#loc195 = loc(fused[#loc3, #loc4])
#loc196 = loc(fused[#loc5, #loc6])
#loc197 = loc(fused[#loc7, #loc8])
#loc198 = loc(fused[#loc9, #loc10])
#loc199 = loc(fused[#loc11, #loc12])
#loc200 = loc(fused[#loc13, #loc14])
#loc201 = loc(fused[#loc15, #loc16])
#loc202 = loc(fused[#loc17, #loc18])
#loc203 = loc(fused[#loc19, #loc20])
#loc204 = loc(fused[#loc21, #loc22])
#loc205 = loc(fused[#loc23, #loc24])
#loc206 = loc(fused[#loc25, #loc22])
#loc207 = loc(fused[#loc27, #loc26])
#loc208 = loc(fused[#loc29, #loc28])
#loc209 = loc(fused[#loc32, #loc33])
#loc210 = loc(fused[#loc34, #loc35])
#loc211 = loc(fused[#loc34, #loc36])
#loc212 = loc(fused[#loc39, #loc40])
#loc213 = loc(fused[#loc41, #loc42])
#loc214 = loc(fused[#loc44, #loc43])
#loc215 = loc(fused[#loc46, #loc47])
#loc216 = loc(fused[#loc45, #loc47])
#loc217 = loc(fused[#loc49, #loc42])
#loc218 = loc(fused[#loc52, #loc55])
#loc219 = loc(fused[#loc57, #loc56])
#loc220 = loc(fused[#loc60, #loc61])
#loc221 = loc(fused[#loc62, #loc63])
#loc222 = loc(fused[#loc64, #loc65])
#loc223 = loc(fused[#loc66, #loc67])
#loc224 = loc(fused[#loc68, #loc69])
#loc225 = loc(fused[#loc74, #loc75])
#loc228 = loc(fused[#loc85, #loc86])
#loc229 = loc(fused[#loc89, #loc90])
#loc230 = loc(fused[#loc93, #loc92])
#loc231 = loc(fused[#loc94, #loc95])
#loc232 = loc(fused[#loc97, #loc98])
#loc233 = loc(fused[#loc99, #loc100])
#loc234 = loc(fused[#loc101, #loc102])
#loc235 = loc(fused[#loc103, #loc104])
#loc236 = loc(fused[#loc105, #loc106])
#loc237 = loc(fused[#loc107, #loc108])
#loc238 = loc(fused[#loc109, #loc110, #loc111, #loc106])
#loc239 = loc(fused[#loc114, #loc113])
#loc240 = loc(fused[#loc116, #loc115])
#loc241 = loc(fused[#loc119, #loc120])
#loc242 = loc(fused[#loc121, #loc122])
#loc243 = loc(fused[#loc121, #loc123])
#loc244 = loc(fused[#loc126, #loc127])
#loc245 = loc(fused[#loc128, #loc129])
#loc246 = loc(fused[#loc131, #loc130])
#loc247 = loc(fused[#loc133, #loc134])
#loc248 = loc(fused[#loc132, #loc134])
#loc249 = loc(fused[#loc136, #loc129])
#loc250 = loc(fused[#loc139, #loc142])
#loc251 = loc(fused[#loc144, #loc143])
#loc252 = loc(fused[#loc147, #loc148])
#loc253 = loc(fused[#loc149, #loc150])
#loc254 = loc(fused[#loc151, #loc152])
#loc255 = loc(fused[#loc153, #loc154])
#loc256 = loc(fused[#loc155, #loc156])
#loc257 = loc(fused[#loc157, #loc158])
#loc258 = loc(fused[#loc159, #loc156])
#loc259 = loc(fused[#loc161, #loc160])
#loc260 = loc(fused[#loc163, #loc162])
#loc261 = loc(fused[#loc166, #loc167])
#loc262 = loc(fused[#loc168, #loc169])
#loc263 = loc(fused[#loc168, #loc170])
#loc264 = loc(fused[#loc173, #loc174])
#loc265 = loc(fused[#loc175, #loc176])
#loc266 = loc(fused[#loc178, #loc177])
#loc267 = loc(fused[#loc180, #loc181])
#loc268 = loc(fused[#loc179, #loc181])
#loc269 = loc(fused[#loc183, #loc176])
#loc270 = loc(fused[#loc186, #loc189])
#loc271 = loc(fused[#loc191, #loc190])
