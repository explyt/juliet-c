!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fgets_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc253)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc254)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc255)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc256)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc257)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @printIntLine(!s32i) loc(#loc258)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto  @CWE191_Integer_Underflow__int_fgets_multiply_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc19)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc263)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc263)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc266)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc266)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc266)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc35)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc35)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc35)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc35)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc35)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc35)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc35)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc35)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc255)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc36)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc37)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc268)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc39)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc44)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc47)
            } loc(#loc269)
          } loc(#loc267)
        } loc(#loc265)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc48)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc49)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
      } loc(#loc264)
    } loc(#loc262)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc273)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc273)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc53)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc53)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc61)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc276)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc62)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc65)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc66)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc278)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc67)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc68)
          } loc(#loc277)
        } loc(#loc275)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc280)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc73)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
              %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc78)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc78)
              %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc78)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc79)
              %16 = cir.binop(div, %14, %15) : !s32i loc(#loc283)
              %17 = cir.cmp(gt, %10, %16) : !s32i, !s32i loc(#loc284)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc81)
              cir.if %18 {
                %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc286)
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc86)
                %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc87)
                cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc286)
                %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc89)
              } else {
                %19 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc14)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc14)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc90)
              } loc(#loc285)
            } loc(#loc282)
          } loc(#loc281)
        } loc(#loc279)
      } loc(#loc274)
    } loc(#loc272)
    cir.return loc(#loc16)
  } loc(#loc259)
  cir.func no_proto  @CWE191_Integer_Underflow__int_fgets_multiply_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc288)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc93)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc289)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc95)
    cir.return loc(#loc92)
  } loc(#loc287)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc291)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc101)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc294)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc294)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc105)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc105)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc297)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc297)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc297)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc117)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc117)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc117)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc117)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc117)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc117)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc117)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc117)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc255)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc118)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc119)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc120)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc120)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc299)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc121)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc126)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc129)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc129)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc130)
            } loc(#loc300)
          } loc(#loc298)
        } loc(#loc296)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc303)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc303)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc303)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc137)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc138)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc138)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc138)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc138)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc138)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc138)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc138)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc138)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc255)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc139)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc140)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc305)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc142)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc146)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc147)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc150)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc150)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc151)
            } loc(#loc306)
          } loc(#loc304)
        } loc(#loc302)
      } loc(#loc295)
    } loc(#loc293)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc309)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc309)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc154)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc154)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc162)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc312)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc163)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc168)
              %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc168)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc168)
              %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc168)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc169)
              %16 = cir.binop(div, %14, %15) : !s32i loc(#loc315)
              %17 = cir.cmp(gt, %10, %16) : !s32i, !s32i loc(#loc316)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc171)
              cir.if %18 {
                %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc318)
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc176)
                %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc177)
                cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc318)
                %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc178)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc179)
              } else {
                %19 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc180)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc180)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc181)
              } loc(#loc317)
            } loc(#loc314)
          } loc(#loc313)
        } loc(#loc311)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc185)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc320)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc186)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc190)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc191)
              %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc191)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc191)
              %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc191)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc192)
              %16 = cir.binop(div, %14, %15) : !s32i loc(#loc323)
              %17 = cir.cmp(gt, %10, %16) : !s32i, !s32i loc(#loc324)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc194)
              cir.if %18 {
                %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc326)
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc199)
                %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc200)
                cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc326)
                %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc201)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc202)
              } else {
                %19 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc203)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc203)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc204)
              } loc(#loc325)
            } loc(#loc322)
          } loc(#loc321)
        } loc(#loc319)
      } loc(#loc310)
    } loc(#loc308)
    cir.return loc(#loc98)
  } loc(#loc290)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc328)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc209)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc331)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc331)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc213)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc213)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc218)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc219)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc333)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc221)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc222)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc334)
      } loc(#loc332)
    } loc(#loc330)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc336)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc336)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc226)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc226)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc233)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc234)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc339)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc235)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc341)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc239)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc238)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc239)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc341)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc240)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc241)
          } loc(#loc340)
        } loc(#loc338)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc244)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc245)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc343)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc246)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc345)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc250)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc249)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc250)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc345)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc251)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc252)
          } loc(#loc344)
        } loc(#loc342)
      } loc(#loc337)
    } loc(#loc335)
    cir.return loc(#loc206)
  } loc(#loc327)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fgets_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":71:27)
#loc15 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":24:1)
#loc16 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":75:1)
#loc17 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":26:5)
#loc18 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":26:9)
#loc19 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":28:12)
#loc20 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":28:5)
#loc21 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":29:5)
#loc22 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":49:5)
#loc23 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":29:8)
#loc24 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":29:33)
#loc25 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":30:5)
#loc26 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":44:5)
#loc27 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":46:5)
#loc28 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":31:9)
#loc29 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":43:9)
#loc30 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":32:13)
#loc31 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":32:49)
#loc32 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":34:13)
#loc33 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":42:13)
#loc34 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":34:23)
#loc35 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":34:36)
#loc36 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":34:53)
#loc37 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":34:17)
#loc38 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":34:63)
#loc39 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":34:60)
#loc40 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":35:13)
#loc41 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":38:13)
#loc42 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":40:13)
#loc43 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":37:29)
#loc44 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":37:24)
#loc45 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":37:17)
#loc46 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":37:40)
#loc47 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":41:17)
#loc48 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":48:17)
#loc49 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":48:16)
#loc50 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":48:9)
#loc51 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":50:5)
#loc52 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":74:5)
#loc53 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":50:8)
#loc54 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":50:33)
#loc55 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":51:5)
#loc56 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":58:5)
#loc57 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":60:5)
#loc58 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":52:9)
#loc59 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":57:9)
#loc60 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":52:12)
#loc61 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":52:19)
#loc62 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":52:17)
#loc63 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":53:9)
#loc64 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":55:13)
#loc65 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":55:33)
#loc66 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":55:26)
#loc67 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":56:26)
#loc68 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":56:13)
#loc69 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":61:9)
#loc70 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":73:9)
#loc71 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":61:12)
#loc72 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":61:19)
#loc73 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":61:17)
#loc74 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":62:9)
#loc75 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":64:13)
#loc76 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":72:13)
#loc77 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":64:17)
#loc78 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":64:25)
#loc79 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":64:33)
#loc80 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":64:34)
#loc81 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":64:22)
#loc82 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":65:13)
#loc83 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":68:13)
#loc84 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":70:13)
#loc85 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":66:17)
#loc86 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":66:37)
#loc87 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":66:30)
#loc88 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":67:30)
#loc89 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":67:17)
#loc90 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":71:17)
#loc91 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":193:1)
#loc92 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":197:1)
#loc93 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":195:5)
#loc94 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":195:13)
#loc95 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":196:5)
#loc96 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":196:13)
#loc97 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":84:1)
#loc98 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":153:1)
#loc99 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":86:5)
#loc100 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":86:9)
#loc101 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":88:12)
#loc102 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":88:5)
#loc103 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":89:5)
#loc104 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":120:5)
#loc105 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":89:8)
#loc106 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":89:33)
#loc107 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":90:5)
#loc108 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":104:5)
#loc109 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":106:5)
#loc110 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":91:9)
#loc111 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":103:9)
#loc112 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":92:13)
#loc113 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":92:49)
#loc114 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":94:13)
#loc115 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":102:13)
#loc116 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":94:23)
#loc117 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":94:36)
#loc118 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":94:53)
#loc119 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":94:17)
#loc120 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":94:63)
#loc121 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":94:60)
#loc122 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":95:13)
#loc123 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":98:13)
#loc124 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":100:13)
#loc125 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":97:29)
#loc126 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":97:24)
#loc127 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":97:17)
#loc128 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":97:40)
#loc129 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":101:27)
#loc130 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":101:17)
#loc131 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":107:9)
#loc132 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":119:9)
#loc133 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":108:13)
#loc134 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":108:49)
#loc135 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":110:13)
#loc136 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":118:13)
#loc137 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":110:23)
#loc138 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":110:36)
#loc139 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":110:53)
#loc140 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":110:17)
#loc141 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":110:63)
#loc142 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":110:60)
#loc143 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":111:13)
#loc144 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":114:13)
#loc145 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":116:13)
#loc146 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":113:29)
#loc147 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":113:24)
#loc148 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":113:17)
#loc149 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":113:40)
#loc150 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":117:27)
#loc151 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":117:17)
#loc152 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":121:5)
#loc153 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":152:5)
#loc154 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":121:8)
#loc155 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":121:33)
#loc156 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":122:5)
#loc157 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":136:5)
#loc158 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":138:5)
#loc159 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":123:9)
#loc160 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":135:9)
#loc161 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":123:12)
#loc162 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":123:19)
#loc163 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":123:17)
#loc164 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":124:9)
#loc165 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":126:13)
#loc166 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":134:13)
#loc167 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":126:17)
#loc168 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":126:25)
#loc169 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":126:33)
#loc170 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":126:34)
#loc171 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":126:22)
#loc172 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":127:13)
#loc173 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":130:13)
#loc174 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":132:13)
#loc175 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":128:17)
#loc176 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":128:37)
#loc177 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":128:30)
#loc178 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":129:30)
#loc179 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":129:17)
#loc180 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":133:27)
#loc181 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":133:17)
#loc182 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":139:9)
#loc183 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":151:9)
#loc184 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":139:12)
#loc185 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":139:19)
#loc186 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":139:17)
#loc187 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":140:9)
#loc188 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":142:13)
#loc189 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":150:13)
#loc190 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":142:17)
#loc191 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":142:25)
#loc192 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":142:33)
#loc193 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":142:34)
#loc194 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":142:22)
#loc195 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":143:13)
#loc196 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":146:13)
#loc197 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":148:13)
#loc198 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":144:17)
#loc199 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":144:37)
#loc200 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":144:30)
#loc201 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":145:30)
#loc202 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":145:17)
#loc203 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":149:27)
#loc204 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":149:17)
#loc205 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":158:1)
#loc206 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":191:1)
#loc207 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":160:5)
#loc208 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":160:9)
#loc209 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":162:12)
#loc210 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":162:5)
#loc211 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":163:5)
#loc212 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":172:5)
#loc213 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":163:8)
#loc214 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":163:33)
#loc215 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":164:5)
#loc216 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":167:5)
#loc217 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":169:5)
#loc218 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":166:17)
#loc219 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":166:16)
#loc220 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":166:9)
#loc221 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":171:17)
#loc222 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":171:16)
#loc223 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":171:9)
#loc224 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":173:5)
#loc225 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":190:5)
#loc226 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":173:8)
#loc227 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":173:33)
#loc228 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":174:5)
#loc229 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":181:5)
#loc230 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":183:5)
#loc231 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":175:9)
#loc232 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":180:9)
#loc233 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":175:12)
#loc234 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":175:19)
#loc235 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":175:17)
#loc236 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":176:9)
#loc237 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":178:13)
#loc238 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":178:33)
#loc239 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":178:26)
#loc240 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":179:26)
#loc241 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":179:13)
#loc242 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":184:9)
#loc243 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":189:9)
#loc244 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":184:12)
#loc245 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":184:19)
#loc246 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":184:17)
#loc247 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":185:9)
#loc248 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":187:13)
#loc249 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":187:33)
#loc250 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":187:26)
#loc251 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":188:26)
#loc252 = loc("CWE191_Integer_Underflow__int_fgets_multiply_12.c":188:13)
#loc253 = loc(fused[#loc1, #loc2])
#loc254 = loc(fused[#loc3, #loc4])
#loc255 = loc(fused[#loc5, #loc6])
#loc256 = loc(fused[#loc7, #loc8])
#loc257 = loc(fused[#loc9, #loc10])
#loc258 = loc(fused[#loc12, #loc13])
#loc259 = loc(fused[#loc15, #loc16])
#loc260 = loc(fused[#loc17, #loc18])
#loc261 = loc(fused[#loc20, #loc19])
#loc262 = loc(fused[#loc21, #loc22])
#loc263 = loc(fused[#loc23, #loc24])
#loc264 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc265 = loc(fused[#loc28, #loc29])
#loc266 = loc(fused[#loc30, #loc31])
#loc267 = loc(fused[#loc32, #loc33])
#loc268 = loc(fused[#loc37, #loc38])
#loc269 = loc(fused[#loc40, #loc41, #loc42, #loc33])
#loc270 = loc(fused[#loc45, #loc46])
#loc271 = loc(fused[#loc50, #loc48])
#loc272 = loc(fused[#loc51, #loc52])
#loc273 = loc(fused[#loc53, #loc54])
#loc274 = loc(fused[#loc55, #loc56, #loc57, #loc52])
#loc275 = loc(fused[#loc58, #loc59])
#loc276 = loc(fused[#loc60, #loc61])
#loc277 = loc(fused[#loc63, #loc59])
#loc278 = loc(fused[#loc64, #loc65])
#loc279 = loc(fused[#loc69, #loc70])
#loc280 = loc(fused[#loc71, #loc72])
#loc281 = loc(fused[#loc74, #loc70])
#loc282 = loc(fused[#loc75, #loc76])
#loc283 = loc(fused[#loc78, #loc79])
#loc284 = loc(fused[#loc77, #loc80])
#loc285 = loc(fused[#loc82, #loc83, #loc84, #loc76])
#loc286 = loc(fused[#loc85, #loc86])
#loc287 = loc(fused[#loc91, #loc92])
#loc288 = loc(fused[#loc93, #loc94])
#loc289 = loc(fused[#loc95, #loc96])
#loc290 = loc(fused[#loc97, #loc98])
#loc291 = loc(fused[#loc99, #loc100])
#loc292 = loc(fused[#loc102, #loc101])
#loc293 = loc(fused[#loc103, #loc104])
#loc294 = loc(fused[#loc105, #loc106])
#loc295 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc296 = loc(fused[#loc110, #loc111])
#loc297 = loc(fused[#loc112, #loc113])
#loc298 = loc(fused[#loc114, #loc115])
#loc299 = loc(fused[#loc119, #loc120])
#loc300 = loc(fused[#loc122, #loc123, #loc124, #loc115])
#loc301 = loc(fused[#loc127, #loc128])
#loc302 = loc(fused[#loc131, #loc132])
#loc303 = loc(fused[#loc133, #loc134])
#loc304 = loc(fused[#loc135, #loc136])
#loc305 = loc(fused[#loc140, #loc141])
#loc306 = loc(fused[#loc143, #loc144, #loc145, #loc136])
#loc307 = loc(fused[#loc148, #loc149])
#loc308 = loc(fused[#loc152, #loc153])
#loc309 = loc(fused[#loc154, #loc155])
#loc310 = loc(fused[#loc156, #loc157, #loc158, #loc153])
#loc311 = loc(fused[#loc159, #loc160])
#loc312 = loc(fused[#loc161, #loc162])
#loc313 = loc(fused[#loc164, #loc160])
#loc314 = loc(fused[#loc165, #loc166])
#loc315 = loc(fused[#loc168, #loc169])
#loc316 = loc(fused[#loc167, #loc170])
#loc317 = loc(fused[#loc172, #loc173, #loc174, #loc166])
#loc318 = loc(fused[#loc175, #loc176])
#loc319 = loc(fused[#loc182, #loc183])
#loc320 = loc(fused[#loc184, #loc185])
#loc321 = loc(fused[#loc187, #loc183])
#loc322 = loc(fused[#loc188, #loc189])
#loc323 = loc(fused[#loc191, #loc192])
#loc324 = loc(fused[#loc190, #loc193])
#loc325 = loc(fused[#loc195, #loc196, #loc197, #loc189])
#loc326 = loc(fused[#loc198, #loc199])
#loc327 = loc(fused[#loc205, #loc206])
#loc328 = loc(fused[#loc207, #loc208])
#loc329 = loc(fused[#loc210, #loc209])
#loc330 = loc(fused[#loc211, #loc212])
#loc331 = loc(fused[#loc213, #loc214])
#loc332 = loc(fused[#loc215, #loc216, #loc217, #loc212])
#loc333 = loc(fused[#loc220, #loc218])
#loc334 = loc(fused[#loc223, #loc221])
#loc335 = loc(fused[#loc224, #loc225])
#loc336 = loc(fused[#loc226, #loc227])
#loc337 = loc(fused[#loc228, #loc229, #loc230, #loc225])
#loc338 = loc(fused[#loc231, #loc232])
#loc339 = loc(fused[#loc233, #loc234])
#loc340 = loc(fused[#loc236, #loc232])
#loc341 = loc(fused[#loc237, #loc238])
#loc342 = loc(fused[#loc242, #loc243])
#loc343 = loc(fused[#loc244, #loc245])
#loc344 = loc(fused[#loc247, #loc243])
#loc345 = loc(fused[#loc248, #loc249])
