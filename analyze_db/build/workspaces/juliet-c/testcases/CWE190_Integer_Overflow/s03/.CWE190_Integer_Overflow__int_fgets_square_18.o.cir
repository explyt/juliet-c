!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc122)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc123)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc124)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc126)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc129)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc130)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.goto "source" loc(#loc132)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc24)
    %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc129)
    cir.store %4, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc129)
    cir.scope {
      %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc27)
      %10 = cir.const #cir.int<3> : !s32i loc(#loc28)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc28)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc28)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc28)
      %14 = cir.const #cir.int<2> : !s32i loc(#loc28)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc28)
      %16 = cir.binop(add, %13, %15) : !u64i loc(#loc28)
      %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc28)
      %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc123)
      %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
      %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc30)
      %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
      %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc134)
      cir.if %23 {
        %24 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
        %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc36)
        cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
      } else {
        %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
        %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc39)
      } loc(#loc135)
    } loc(#loc133)
    cir.goto "sink" loc(#loc137)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc42)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc43)
    cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc45)
    cir.return loc(#loc13)
  } loc(#loc127)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc139)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc140)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc138)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc143)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.goto "source" loc(#loc145)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc64)
    %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc143)
    cir.store %3, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc143)
    cir.scope {
      %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc67)
      %5 = cir.const #cir.int<3> : !s32i loc(#loc68)
      %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc68)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc68)
      %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc68)
      %9 = cir.const #cir.int<2> : !s32i loc(#loc68)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc68)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc68)
      %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc68)
      %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc123)
      %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc69)
      %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc70)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc71)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc71)
      %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc147)
      cir.if %18 {
        %19 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc75)
        %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc76)
        cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
      } else {
        %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc79)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc79)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      } loc(#loc148)
    } loc(#loc146)
    cir.goto "sink" loc(#loc150)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc83)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc87)
      %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc87)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc87)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc87)
      %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc152)
      %10 = cir.ternary(%9, true {
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
        %12 = cir.abs %11 poison : !s32i loc(#loc90)
        %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc90)
        %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc91)
        %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc92)
        %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc92)
        %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc91)
        %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc91)
        %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc153)
        %20 = cir.ternary(%19, true {
          %21 = cir.const #true loc(#loc88)
          cir.yield %21 : !cir.bool loc(#loc88)
        }, false {
          %21 = cir.const #false loc(#loc88)
          cir.yield %21 : !cir.bool loc(#loc88)
        }) : (!cir.bool) -> !cir.bool loc(#loc88)
        cir.yield %20 : !cir.bool loc(#loc88)
      }, false {
        %11 = cir.const #false loc(#loc88)
        cir.yield %11 : !cir.bool loc(#loc88)
      }) : (!cir.bool) -> !cir.bool loc(#loc88)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc155)
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc99)
        cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc155)
        %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc101)
      } else {
        %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc53)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc102)
      } loc(#loc154)
    } loc(#loc151)
    cir.return loc(#loc55)
  } loc(#loc141)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc158)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc109)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.goto "source" loc(#loc160)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc113)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc114)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.goto "sink" loc(#loc162)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc118)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc119)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc121)
    cir.return loc(#loc104)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":43:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":26:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":53:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":28:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":34:9)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":34:45)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":50:9)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":50:29)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":30:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":31:10)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":32:1)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":44:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:19)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:32)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:49)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:59)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":37:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":40:9)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":42:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":39:25)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":39:20)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":39:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":39:36)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":43:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":46:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":46:10)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":47:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":50:22)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":51:22)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":51:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":113:1)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":117:1)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":115:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":115:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":116:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":116:13)
#loc52 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":90:19)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":60:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":92:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":62:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":62:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":68:9)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":68:45)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":64:12)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":64:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":65:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":65:10)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":66:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":78:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:19)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:32)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:49)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:13)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:59)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":71:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":74:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":76:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":73:25)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":73:20)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":73:13)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":73:36)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":77:23)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":77:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":80:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":80:10)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":81:1)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":91:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:16)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:24)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:31)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:27)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:45)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:58)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:65)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":84:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":87:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":89:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":85:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":85:29)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":85:22)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":86:22)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":86:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":90:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":95:1)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":111:1)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":97:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":97:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":108:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":108:29)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":99:12)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":99:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":100:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":100:10)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":101:1)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":103:12)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":103:5)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":104:5)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":104:10)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":105:1)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":108:22)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":109:22)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":109:9)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc7, #loc8])
#loc126 = loc(fused[#loc10, #loc11])
#loc127 = loc(fused[#loc12, #loc13])
#loc128 = loc(fused[#loc14, #loc15])
#loc129 = loc(fused[#loc16, #loc17])
#loc130 = loc(fused[#loc18, #loc19])
#loc131 = loc(fused[#loc21, #loc20])
#loc132 = loc(fused[#loc22, #loc23])
#loc133 = loc(fused[#loc25, #loc26])
#loc134 = loc(fused[#loc30, #loc31])
#loc135 = loc(fused[#loc32, #loc33, #loc34, #loc26])
#loc136 = loc(fused[#loc37, #loc38])
#loc137 = loc(fused[#loc40, #loc41])
#loc138 = loc(fused[#loc46, #loc47])
#loc139 = loc(fused[#loc48, #loc49])
#loc140 = loc(fused[#loc50, #loc51])
#loc141 = loc(fused[#loc54, #loc55])
#loc142 = loc(fused[#loc56, #loc57])
#loc143 = loc(fused[#loc58, #loc59])
#loc144 = loc(fused[#loc61, #loc60])
#loc145 = loc(fused[#loc62, #loc63])
#loc146 = loc(fused[#loc65, #loc66])
#loc147 = loc(fused[#loc70, #loc71])
#loc148 = loc(fused[#loc72, #loc73, #loc74, #loc66])
#loc149 = loc(fused[#loc77, #loc78])
#loc150 = loc(fused[#loc81, #loc82])
#loc151 = loc(fused[#loc84, #loc85])
#loc152 = loc(fused[#loc86, #loc87])
#loc153 = loc(fused[#loc90, #loc93])
#loc154 = loc(fused[#loc94, #loc95, #loc96, #loc85])
#loc155 = loc(fused[#loc97, #loc98])
#loc156 = loc(fused[#loc103, #loc104])
#loc157 = loc(fused[#loc105, #loc106])
#loc158 = loc(fused[#loc107, #loc108])
#loc159 = loc(fused[#loc110, #loc109])
#loc160 = loc(fused[#loc111, #loc112])
#loc161 = loc(fused[#loc115, #loc114])
#loc162 = loc(fused[#loc116, #loc117])
