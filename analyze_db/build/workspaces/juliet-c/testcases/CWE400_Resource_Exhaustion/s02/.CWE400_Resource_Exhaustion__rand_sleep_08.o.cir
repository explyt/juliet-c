!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc172)
  cir.func private @usleep(!u32i) -> !s32i loc(#loc173)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc179)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc20)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc20)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc20)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc20)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc20)
          cir.yield %23 : !u32i loc(#loc20)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc20)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc20)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc20)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc20)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc20)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc20)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc20)
          cir.yield %27 : !u32i loc(#loc20)
        }) : (!cir.bool) -> !u32i loc(#loc20)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc20)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
      } loc(#loc180)
    } loc(#loc178)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc183)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc24)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc27)
        %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc28)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc7)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc29)
      } loc(#loc184)
    } loc(#loc182)
    cir.return loc(#loc9)
  } loc(#loc175)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc189)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc185)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.return %2 : !s32i loc(#loc191)
  } loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc52)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc196)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc56)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc56)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc59)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc59)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc59)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc59)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc59)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc59)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc59)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc59)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc59)
          cir.yield %23 : !u32i loc(#loc59)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc59)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc59)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc59)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc59)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc59)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc59)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc59)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc59)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc59)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc59)
          cir.yield %27 : !u32i loc(#loc59)
        }) : (!cir.bool) -> !u32i loc(#loc59)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc59)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      } loc(#loc197)
    } loc(#loc195)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc200)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc63)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc63)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc203)
          %9 = cir.ternary(%8, true {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %11 = cir.const #cir.int<2000> : !s32i loc(#loc75)
            %12 = cir.cmp(le, %10, %11) : !s32i, !cir.bool loc(#loc204)
            %13 = cir.ternary(%12, true {
              %14 = cir.const #true loc(#loc73)
              cir.yield %14 : !cir.bool loc(#loc73)
            }, false {
              %14 = cir.const #false loc(#loc73)
              cir.yield %14 : !cir.bool loc(#loc73)
            }) : (!cir.bool) -> !cir.bool loc(#loc73)
            cir.yield %13 : !cir.bool loc(#loc73)
          }, false {
            %10 = cir.const #false loc(#loc73)
            cir.yield %10 : !cir.bool loc(#loc73)
          }) : (!cir.bool) -> !cir.bool loc(#loc73)
          cir.if %9 {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc79)
            %12 = cir.call @usleep(%11) : (!u32i) -> !s32i loc(#loc80)
            %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc45)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc81)
          } else {
            %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc46)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc46)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc205)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc199)
    cir.return loc(#loc48)
  } loc(#loc192)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    cir.return %2 : !s32i loc(#loc207)
  } loc(#loc206)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc92)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc212)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc96)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc96)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc99)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc99)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc99)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc99)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc99)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc99)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc99)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc99)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc99)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc99)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc99)
          cir.yield %23 : !u32i loc(#loc99)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc99)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc99)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc99)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc99)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc99)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc99)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc99)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc99)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc99)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc99)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc99)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc99)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc99)
          cir.yield %27 : !u32i loc(#loc99)
        }) : (!cir.bool) -> !u32i loc(#loc99)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc99)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
      } loc(#loc213)
    } loc(#loc211)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc216)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc103)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc103)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc109)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc219)
          %9 = cir.ternary(%8, true {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %11 = cir.const #cir.int<2000> : !s32i loc(#loc112)
            %12 = cir.cmp(le, %10, %11) : !s32i, !cir.bool loc(#loc220)
            %13 = cir.ternary(%12, true {
              %14 = cir.const #true loc(#loc110)
              cir.yield %14 : !cir.bool loc(#loc110)
            }, false {
              %14 = cir.const #false loc(#loc110)
              cir.yield %14 : !cir.bool loc(#loc110)
            }) : (!cir.bool) -> !cir.bool loc(#loc110)
            cir.yield %13 : !cir.bool loc(#loc110)
          }, false {
            %10 = cir.const #false loc(#loc110)
            cir.yield %10 : !cir.bool loc(#loc110)
          }) : (!cir.bool) -> !cir.bool loc(#loc110)
          cir.if %9 {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc116)
            %12 = cir.call @usleep(%11) : (!u32i) -> !s32i loc(#loc117)
            %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc118)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc118)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc119)
          } else {
            %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc120)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc120)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          } loc(#loc221)
        } loc(#loc218)
      } loc(#loc217)
    } loc(#loc215)
    cir.return loc(#loc88)
  } loc(#loc208)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc127)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc226)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc131)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc131)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc137)
      } else {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc138)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc230)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc142)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc142)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc145)
        %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc146)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc147)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } loc(#loc231)
    } loc(#loc229)
    cir.return loc(#loc123)
  } loc(#loc222)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc153)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc154)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc236)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc158)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc158)
      cir.if %5 {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc161)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
      } loc(#loc237)
    } loc(#loc235)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc240)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc165)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc165)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc168)
        %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc169)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc170)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc170)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc171)
      } loc(#loc241)
    } loc(#loc239)
    cir.return loc(#loc150)
  } loc(#loc232)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/unistd.h":480:1)
#loc4 = loc("/usr/include/unistd.h":480:43)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":57:19)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":43:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":59:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":45:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":45:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":47:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":47:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":47:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":48:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":52:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":48:8)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":48:26)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":49:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":51:17)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":51:9)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":53:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":58:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":53:8)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":53:26)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":54:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":56:15)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":56:9)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":57:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":165:1)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":171:1)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":167:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":167:14)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":168:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":168:14)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":169:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":169:14)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":170:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":170:14)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":31:1)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":34:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":33:12)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":33:5)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":79:19)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":87:23)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":91:23)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":66:1)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":94:1)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":68:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":68:9)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":70:14)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":70:13)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":70:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":71:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":75:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":71:8)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":71:26)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":72:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":74:17)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":74:9)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":76:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":93:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":76:8)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":76:27)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":77:5)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":80:5)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":82:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":79:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":84:9)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":92:9)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":84:13)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":84:21)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":84:23)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":84:26)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":84:35)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":85:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":88:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":90:9)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":86:19)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":86:13)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":87:13)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":91:13)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":36:1)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":39:1)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":38:12)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":38:5)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":97:1)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":120:1)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":99:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":99:9)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":101:14)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":101:13)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":101:5)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":102:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":106:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":102:8)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":102:26)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":103:5)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":105:17)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":105:9)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":107:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":119:5)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":107:8)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":107:26)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":108:5)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":110:9)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":118:9)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":110:13)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":110:21)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":110:23)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":110:26)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":110:35)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":111:9)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":114:9)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":116:9)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":112:19)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":112:13)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":113:23)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":113:13)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":117:23)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":117:13)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":123:1)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":144:1)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":125:5)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":125:9)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":127:14)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":127:13)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":127:5)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":128:5)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":137:5)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":128:8)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":128:27)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":129:5)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":132:5)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":134:5)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":131:19)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":131:9)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":136:17)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":136:9)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":138:5)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":143:5)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":138:8)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":138:26)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":139:5)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":141:15)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":141:9)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":142:19)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":142:9)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":147:1)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":163:1)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":149:5)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":149:9)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":151:14)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":151:13)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":151:5)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":152:5)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":156:5)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":152:8)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":152:26)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":153:5)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":155:17)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":155:9)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":157:5)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":162:5)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":157:8)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":157:26)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":158:5)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":160:15)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":160:9)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":161:19)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_sleep_08.c":161:9)
#loc172 = loc(fused[#loc1, #loc2])
#loc173 = loc(fused[#loc3, #loc4])
#loc174 = loc(fused[#loc5, #loc6])
#loc175 = loc(fused[#loc8, #loc9])
#loc176 = loc(fused[#loc10, #loc11])
#loc177 = loc(fused[#loc14, #loc12])
#loc178 = loc(fused[#loc15, #loc16])
#loc179 = loc(fused[#loc17, #loc18])
#loc180 = loc(fused[#loc19, #loc16])
#loc181 = loc(fused[#loc21, #loc20])
#loc182 = loc(fused[#loc22, #loc23])
#loc183 = loc(fused[#loc24, #loc25])
#loc184 = loc(fused[#loc26, #loc23])
#loc185 = loc(fused[#loc30, #loc31])
#loc186 = loc(fused[#loc32, #loc33])
#loc187 = loc(fused[#loc34, #loc35])
#loc188 = loc(fused[#loc36, #loc37])
#loc189 = loc(fused[#loc38, #loc39])
#loc190 = loc(fused[#loc40, #loc41])
#loc191 = loc(fused[#loc43, #loc42])
#loc192 = loc(fused[#loc47, #loc48])
#loc193 = loc(fused[#loc49, #loc50])
#loc194 = loc(fused[#loc53, #loc51])
#loc195 = loc(fused[#loc54, #loc55])
#loc196 = loc(fused[#loc56, #loc57])
#loc197 = loc(fused[#loc58, #loc55])
#loc198 = loc(fused[#loc60, #loc59])
#loc199 = loc(fused[#loc61, #loc62])
#loc200 = loc(fused[#loc63, #loc64])
#loc201 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc202 = loc(fused[#loc69, #loc70])
#loc203 = loc(fused[#loc71, #loc72])
#loc204 = loc(fused[#loc74, #loc75])
#loc205 = loc(fused[#loc76, #loc77, #loc78, #loc70])
#loc206 = loc(fused[#loc83, #loc84])
#loc207 = loc(fused[#loc86, #loc85])
#loc208 = loc(fused[#loc87, #loc88])
#loc209 = loc(fused[#loc89, #loc90])
#loc210 = loc(fused[#loc93, #loc91])
#loc211 = loc(fused[#loc94, #loc95])
#loc212 = loc(fused[#loc96, #loc97])
#loc213 = loc(fused[#loc98, #loc95])
#loc214 = loc(fused[#loc100, #loc99])
#loc215 = loc(fused[#loc101, #loc102])
#loc216 = loc(fused[#loc103, #loc104])
#loc217 = loc(fused[#loc105, #loc102])
#loc218 = loc(fused[#loc106, #loc107])
#loc219 = loc(fused[#loc108, #loc109])
#loc220 = loc(fused[#loc111, #loc112])
#loc221 = loc(fused[#loc113, #loc114, #loc115, #loc107])
#loc222 = loc(fused[#loc122, #loc123])
#loc223 = loc(fused[#loc124, #loc125])
#loc224 = loc(fused[#loc128, #loc126])
#loc225 = loc(fused[#loc129, #loc130])
#loc226 = loc(fused[#loc131, #loc132])
#loc227 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc228 = loc(fused[#loc139, #loc138])
#loc229 = loc(fused[#loc140, #loc141])
#loc230 = loc(fused[#loc142, #loc143])
#loc231 = loc(fused[#loc144, #loc141])
#loc232 = loc(fused[#loc149, #loc150])
#loc233 = loc(fused[#loc151, #loc152])
#loc234 = loc(fused[#loc155, #loc153])
#loc235 = loc(fused[#loc156, #loc157])
#loc236 = loc(fused[#loc158, #loc159])
#loc237 = loc(fused[#loc160, #loc157])
#loc238 = loc(fused[#loc162, #loc161])
#loc239 = loc(fused[#loc163, #loc164])
#loc240 = loc(fused[#loc165, #loc166])
#loc241 = loc(fused[#loc167, #loc164])
