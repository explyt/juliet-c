!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc220 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":191:10)
#loc221 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":191:14)
#loc222 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":191:20)
#loc223 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":191:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc323 = loc(fused[#loc220, #loc221])
#loc324 = loc(fused[#loc222, #loc223])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_68L7goodG2BEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc236)
  cir.global "private" constant cir_private @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_683badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc237)
  cir.global external dsolocal @CWE23_Relative_Path_Traversal__char_listen_socket_open_68_badData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc238)
  cir.global external dsolocal @CWE23_Relative_Path_Traversal__char_listen_socket_open_68_goodG2BData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc239)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc240)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc241)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc242)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc243)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc244)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc245)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc246)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc247)
  cir.func private @close(!s32i) -> !s32i loc(#loc248)
  cir.func private @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_687badSinkEv() loc(#loc249)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_683badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc251)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc237)
    %2 = cir.get_global @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_683badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc237)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc237)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc33)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc252)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc254)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc255)
      %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc256)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc257)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc258)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc259)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc44)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc257)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc46)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc258)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc49)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc49)
      cir.store %18, %11 : !u64i, !cir.ptr<!u64i> loc(#loc259)
      cir.scope {
        cir.do {
          %19 = cir.const #cir.int<2> : !s32i loc(#loc53)
          %20 = cir.const #cir.int<1> : !u32i loc(#loc54)
          %21 = cir.cast(integral, %20 : !u32i), !s32i loc(#loc54)
          %22 = cir.const #cir.int<6> : !u32i loc(#loc55)
          %23 = cir.cast(integral, %22 : !u32i), !s32i loc(#loc55)
          %24 = cir.call @socket(%19, %21, %23) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc56)
          cir.store %24, %9 : !s32i, !cir.ptr<!s32i> loc(#loc261)
          cir.scope {
            %77 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            %78 = cir.const #cir.int<1> : !s32i loc(#loc62)
            %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc62)
            %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc263)
            cir.if %80 {
              cir.break loc(#loc64)
            } loc(#loc264)
          } loc(#loc262)
          %25 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc265)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc67)
          %27 = cir.const #cir.int<16> : !u64i loc(#loc266)
          cir.libc.memset %27 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc267)
          %28 = cir.const #cir.int<2> : !s32i loc(#loc72)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc72)
          %30 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc268)
          %31 = cir.const #cir.int<0> : !s32i loc(#loc75)
          %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc75)
          %33 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
          %34 = cir.get_member %33[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
          cir.store %32, %34 : !u32i, !cir.ptr<!u32i> loc(#loc269)
          %35 = cir.const #cir.int<27015> : !s32i loc(#loc79)
          %36 = cir.cast(integral, %35 : !s32i), !u16i loc(#loc79)
          %37 = cir.call @htons(%36) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc80)
          %38 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
          cir.store %37, %38 : !u16i, !cir.ptr<!u16i> loc(#loc270)
          cir.scope {
            %77 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %78 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc272)
            %79 = cir.const #cir.int<16> : !u64i loc(#loc273)
            %80 = cir.cast(integral, %79 : !u64i), !u32i loc(#loc273)
            %81 = cir.call @bind(%77, %78, %80) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc91)
            %82 = cir.const #cir.int<1> : !s32i loc(#loc92)
            %83 = cir.unary(minus, %82) : !s32i, !s32i loc(#loc92)
            %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc274)
            cir.if %84 {
              cir.break loc(#loc94)
            } loc(#loc275)
          } loc(#loc271)
          cir.scope {
            %77 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc97)
            %78 = cir.const #cir.int<5> : !s32i loc(#loc98)
            %79 = cir.call @listen(%77, %78) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc99)
            %80 = cir.const #cir.int<1> : !s32i loc(#loc100)
            %81 = cir.unary(minus, %80) : !s32i, !s32i loc(#loc100)
            %82 = cir.cmp(eq, %79, %81) : !s32i, !cir.bool loc(#loc277)
            cir.if %82 {
              cir.break loc(#loc102)
            } loc(#loc278)
          } loc(#loc276)
          %39 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %40 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc104)
          %41 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc105)
          %42 = cir.call @accept(%39, %40, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc106)
          cir.store %42, %10 : !s32i, !cir.ptr<!s32i> loc(#loc279)
          cir.scope {
            %77 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %78 = cir.const #cir.int<1> : !s32i loc(#loc112)
            %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc112)
            %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc281)
            cir.if %80 {
              cir.break loc(#loc114)
            } loc(#loc282)
          } loc(#loc280)
          %43 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
          %45 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc117)
          %46 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc118)
          %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc283)
          %48 = cir.const #cir.int<1> : !u64i loc(#loc284)
          %49 = cir.const #cir.int<4096> : !s32i loc(#loc123)
          %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc123)
          %51 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc124)
          %52 = cir.binop(sub, %50, %51) : !u64i loc(#loc285)
          %53 = cir.const #cir.int<1> : !s32i loc(#loc125)
          %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc125)
          %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc286)
          %56 = cir.binop(mul, %48, %55) : !u64i loc(#loc287)
          %57 = cir.const #cir.int<0> : !s32i loc(#loc127)
          %58 = cir.call @recv(%43, %47, %56, %57) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc128)
          %59 = cir.cast(integral, %58 : !s64i), !s32i loc(#loc128)
          cir.store %59, %6 : !s32i, !cir.ptr<!s32i> loc(#loc288)
          cir.scope {
            %77 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            %78 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc134)
            %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc290)
            %81 = cir.ternary(%80, true {
              %82 = cir.const #true loc(#loc135)
              cir.yield %82 : !cir.bool loc(#loc135)
            }, false {
              %82 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %83 = cir.const #cir.int<0> : !s32i loc(#loc137)
              %84 = cir.cmp(eq, %82, %83) : !s32i, !cir.bool loc(#loc291)
              %85 = cir.ternary(%84, true {
                %86 = cir.const #true loc(#loc135)
                cir.yield %86 : !cir.bool loc(#loc135)
              }, false {
                %86 = cir.const #false loc(#loc135)
                cir.yield %86 : !cir.bool loc(#loc135)
              }) : (!cir.bool) -> !cir.bool loc(#loc135)
              cir.yield %85 : !cir.bool loc(#loc135)
            }) : (!cir.bool) -> !cir.bool loc(#loc135)
            cir.if %81 {
              cir.break loc(#loc139)
            } loc(#loc292)
          } loc(#loc289)
          %60 = cir.const #cir.int<0> : !s8i loc(#loc140)
          %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
          %62 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc142)
          %63 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc143)
          %65 = cir.const #cir.int<1> : !u64i loc(#loc293)
          %66 = cir.binop(div, %64, %65) : !u64i loc(#loc294)
          %67 = cir.binop(add, %62, %66) : !u64i loc(#loc295)
          %68 = cir.ptr_stride(%61 : !cir.ptr<!s8i>, %67 : !u64i), !cir.ptr<!s8i> loc(#loc146)
          cir.store %60, %68 : !s8i, !cir.ptr<!s8i> loc(#loc296)
          %69 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
          %70 = cir.const #cir.int<13> : !s8i loc(#loc148)
          %71 = cir.cast(integral, %70 : !s8i), !s32i loc(#loc148)
          %72 = cir.call @strchr(%69, %71) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc149)
          cir.store %72, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc297)
          cir.scope {
            %77 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
            %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc154)
            cir.if %78 {
              %79 = cir.const #cir.int<0> : !s8i loc(#loc156)
              %80 = cir.load deref %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
              cir.store %79, %80 : !s8i, !cir.ptr<!s8i> loc(#loc300)
            } loc(#loc299)
          } loc(#loc298)
          %73 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
          %74 = cir.const #cir.int<10> : !s8i loc(#loc160)
          %75 = cir.cast(integral, %74 : !s8i), !s32i loc(#loc160)
          %76 = cir.call @strchr(%73, %75) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc161)
          cir.store %76, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc301)
          cir.scope {
            %77 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
            %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc166)
            cir.if %78 {
              %79 = cir.const #cir.int<0> : !s8i loc(#loc168)
              %80 = cir.load deref %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
              cir.store %79, %80 : !s8i, !cir.ptr<!s8i> loc(#loc304)
            } loc(#loc303)
          } loc(#loc302)
          cir.yield loc(#loc52)
        } while {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc171)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc171)
          cir.condition(%20) loc(#loc171)
        } loc(#loc260)
      } loc(#loc260)
      cir.scope {
        %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc174)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc175)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc175)
        %22 = cir.cmp(ne, %19, %21) : !s32i, !cir.bool loc(#loc306)
        cir.if %22 {
          %23 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          %24 = cir.call @close(%23) : (!s32i) -> !s32i loc(#loc178)
        } loc(#loc307)
      } loc(#loc305)
      cir.scope {
        %19 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc181)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc182)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc182)
        %22 = cir.cmp(ne, %19, %21) : !s32i, !cir.bool loc(#loc309)
        cir.if %22 {
          %23 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc184)
          %24 = cir.call @close(%23) : (!s32i) -> !s32i loc(#loc185)
        } loc(#loc310)
      } loc(#loc308)
    } loc(#loc253)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc186)
    %5 = cir.get_global @CWE23_Relative_Path_Traversal__char_listen_socket_open_68_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc238)
    cir.store %4, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc311)
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_687badSinkEv() : () -> () loc(#loc188)
    cir.return loc(#loc30)
  } loc(#loc250)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc312)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc191)
  cir.func private @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_6811goodG2BSinkEv() loc(#loc313)
  cir.func internal private @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_68L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc315)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc236)
    %2 = cir.get_global @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_68L7goodG2BEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc236)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc236)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc198)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc316)
    %4 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc200)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc201)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc191)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc191)
    %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc200)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc202)
    %10 = cir.get_global @CWE23_Relative_Path_Traversal__char_listen_socket_open_68_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc239)
    cir.store %9, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc317)
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_6811goodG2BSinkEv() : () -> () loc(#loc204)
    cir.return loc(#loc195)
  } loc(#loc314)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_684goodEv() extra(#fn_attr1) {
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_68L7goodG2BEv() : () -> () loc(#loc207)
    cir.return loc(#loc206)
  } loc(#loc318)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc319)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc320)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc321)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc217)
  cir.func @main(%arg0: !s32i loc(fused[#loc220, #loc221]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc222, #loc223])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc323)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc324)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc219)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc224)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc225)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc226)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc226)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc227)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc214)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc214)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc228)
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_684goodEv() : () -> () loc(#loc229)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc215)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc215)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc230)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc216)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc216)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc231)
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_683badEv() : () -> () loc(#loc232)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc217)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc217)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc233)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc234)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc325)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc325)
    cir.return %15 : !s32i loc(#loc325)
  } loc(#loc322)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":165:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":165:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":69:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":69:37)
#loc5 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":55:1)
#loc6 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":55:8)
#loc7 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":56:1)
#loc8 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":56:8)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("/usr/include/sys/socket.h":102:1)
#loc12 = loc("/usr/include/sys/socket.h":102:62)
#loc13 = loc("/usr/include/netinet/in.h":404:1)
#loc14 = loc("/usr/include/netinet/in.h":405:40)
#loc15 = loc("/usr/include/sys/socket.h":112:1)
#loc16 = loc("/usr/include/sys/socket.h":113:6)
#loc17 = loc("/usr/include/sys/socket.h":296:1)
#loc18 = loc("/usr/include/sys/socket.h":296:39)
#loc19 = loc("/usr/include/sys/socket.h":306:1)
#loc20 = loc("/usr/include/sys/socket.h":307:38)
#loc21 = loc("/usr/include/sys/socket.h":145:1)
#loc22 = loc("/usr/include/sys/socket.h":145:68)
#loc23 = loc("/usr/include/string.h":226:1)
#loc24 = loc("/usr/include/string.h":227:50)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":64:1)
#loc28 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":64:14)
#loc29 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":66:1)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":152:1)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":68:5)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":68:12)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":70:12)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":70:5)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":71:5)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":149:5)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":76:9)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":76:13)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":77:9)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":77:28)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":78:9)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":78:15)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":79:9)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":79:31)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":80:9)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":80:31)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":81:9)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":81:37)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":81:26)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":81:33)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":82:9)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":134:17)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":92:35)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":92:44)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":92:57)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":92:28)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":92:13)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":92:68)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":93:13)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":96:13)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":93:17)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":93:33)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":94:13)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":95:17)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":97:20)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":97:21)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":97:30)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":97:33)
#loc69 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":97:47)
#loc70 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":97:13)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":97:48)
#loc72 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":98:34)
#loc73 = loc("/usr/include/netinet/in.h":249:5)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":98:13)
#loc75 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":99:39)
#loc76 = loc("/usr/include/netinet/in.h":251:20)
#loc77 = loc("/usr/include/netinet/in.h":33:15)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":99:13)
#loc79 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":100:38)
#loc80 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":100:32)
#loc81 = loc("/usr/include/netinet/in.h":250:15)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":100:13)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":100:46)
#loc84 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":101:13)
#loc85 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":104:13)
#loc86 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":101:22)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":101:54)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":101:55)
#loc89 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":101:64)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":101:78)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":101:17)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":101:84)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":102:13)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":103:17)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":105:13)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":108:13)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":105:24)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":105:38)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":105:17)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":105:57)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":106:13)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":107:17)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":109:35)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":109:49)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":109:55)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":109:28)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":109:13)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":109:59)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":110:13)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":113:13)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":110:17)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":110:33)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":111:13)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":112:17)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:31)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:54)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:61)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:59)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:45)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:68)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:71)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:82)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:87)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:102)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:112)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:113)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:116)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:26)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:13)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":115:117)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":116:13)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":119:13)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":116:17)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":116:31)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":116:44)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":116:47)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":116:61)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":117:13)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":118:17)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":121:57)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":121:13)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":121:18)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":121:28)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":121:41)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":121:52)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":121:53)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":123:30)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":123:36)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":123:23)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":123:13)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":123:40)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":124:13)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":127:13)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":124:17)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":125:13)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":126:28)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":126:18)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":126:17)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":128:30)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":128:36)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":128:23)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":128:13)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":128:40)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":129:13)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":132:13)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":129:17)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":130:13)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":131:28)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":131:18)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":131:17)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":134:16)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":135:9)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":138:9)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":135:13)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":135:29)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":136:9)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":137:26)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":137:13)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":139:9)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":142:9)
#loc181 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":139:13)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":139:29)
#loc183 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":140:9)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":141:26)
#loc185 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":141:13)
#loc186 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":150:73)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":150:5)
#loc188 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":151:5)
#loc189 = loc("/usr/include/string.h":149:1)
#loc190 = loc("/usr/include/string.h":150:14)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":168:18)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":159:1)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":159:18)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":162:1)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":171:1)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":164:5)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":164:12)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":166:12)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":166:5)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":168:5)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":168:12)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":169:77)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":169:5)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":170:5)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":173:1)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":176:1)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":175:5)
#loc208 = loc("/usr/include/stdlib.h":575:1)
#loc209 = loc("/usr/include/stdlib.h":575:41)
#loc210 = loc("/usr/include/time.h":76:1)
#loc211 = loc("/usr/include/time.h":76:38)
#loc212 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc213 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":196:15)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":198:15)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":201:15)
#loc217 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":203:15)
#loc218 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":191:1)
#loc219 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":206:1)
#loc224 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":192:1)
#loc225 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":194:27)
#loc226 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":194:22)
#loc227 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":194:5)
#loc228 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":196:5)
#loc229 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":197:5)
#loc230 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":198:5)
#loc231 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":201:5)
#loc232 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":202:5)
#loc233 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":203:5)
#loc234 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":205:12)
#loc235 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_68a.cpp":205:5)
#loc236 = loc(fused[#loc1, #loc2])
#loc237 = loc(fused[#loc3, #loc4])
#loc238 = loc(fused[#loc5, #loc6])
#loc239 = loc(fused[#loc7, #loc8])
#loc240 = loc(fused[#loc9, #loc10])
#loc241 = loc(fused[#loc11, #loc12])
#loc242 = loc(fused[#loc13, #loc14])
#loc243 = loc(fused[#loc15, #loc16])
#loc244 = loc(fused[#loc17, #loc18])
#loc245 = loc(fused[#loc19, #loc20])
#loc246 = loc(fused[#loc21, #loc22])
#loc247 = loc(fused[#loc23, #loc24])
#loc248 = loc(fused[#loc25, #loc26])
#loc249 = loc(fused[#loc27, #loc28])
#loc250 = loc(fused[#loc29, #loc30])
#loc251 = loc(fused[#loc31, #loc32])
#loc252 = loc(fused[#loc34, #loc33])
#loc253 = loc(fused[#loc35, #loc36])
#loc254 = loc(fused[#loc37, #loc38])
#loc255 = loc(fused[#loc39, #loc40])
#loc256 = loc(fused[#loc41, #loc42])
#loc257 = loc(fused[#loc43, #loc44])
#loc258 = loc(fused[#loc45, #loc46])
#loc259 = loc(fused[#loc47, #loc48])
#loc260 = loc(fused[#loc51, #loc52])
#loc261 = loc(fused[#loc57, #loc58])
#loc262 = loc(fused[#loc59, #loc60])
#loc263 = loc(fused[#loc61, #loc62])
#loc264 = loc(fused[#loc63, #loc60])
#loc265 = loc(fused[#loc65, #loc66])
#loc266 = loc(fused[#loc68, #loc69])
#loc267 = loc(fused[#loc70, #loc71])
#loc268 = loc(fused[#loc74, #loc72])
#loc269 = loc(fused[#loc78, #loc75])
#loc270 = loc(fused[#loc82, #loc83])
#loc271 = loc(fused[#loc84, #loc85])
#loc272 = loc(fused[#loc87, #loc88])
#loc273 = loc(fused[#loc89, #loc90])
#loc274 = loc(fused[#loc91, #loc92])
#loc275 = loc(fused[#loc93, #loc85])
#loc276 = loc(fused[#loc95, #loc96])
#loc277 = loc(fused[#loc99, #loc100])
#loc278 = loc(fused[#loc101, #loc96])
#loc279 = loc(fused[#loc107, #loc108])
#loc280 = loc(fused[#loc109, #loc110])
#loc281 = loc(fused[#loc111, #loc112])
#loc282 = loc(fused[#loc113, #loc110])
#loc283 = loc(fused[#loc119, #loc120])
#loc284 = loc(fused[#loc121, #loc122])
#loc285 = loc(fused[#loc123, #loc124])
#loc286 = loc(fused[#loc123, #loc125])
#loc287 = loc(fused[#loc121, #loc126])
#loc288 = loc(fused[#loc129, #loc130])
#loc289 = loc(fused[#loc131, #loc132])
#loc290 = loc(fused[#loc133, #loc134])
#loc291 = loc(fused[#loc136, #loc137])
#loc292 = loc(fused[#loc138, #loc132])
#loc293 = loc(fused[#loc144, #loc145])
#loc294 = loc(fused[#loc143, #loc145])
#loc295 = loc(fused[#loc142, #loc145])
#loc296 = loc(fused[#loc141, #loc140])
#loc297 = loc(fused[#loc150, #loc151])
#loc298 = loc(fused[#loc152, #loc153])
#loc299 = loc(fused[#loc155, #loc153])
#loc300 = loc(fused[#loc158, #loc156])
#loc301 = loc(fused[#loc162, #loc163])
#loc302 = loc(fused[#loc164, #loc165])
#loc303 = loc(fused[#loc167, #loc165])
#loc304 = loc(fused[#loc170, #loc168])
#loc305 = loc(fused[#loc172, #loc173])
#loc306 = loc(fused[#loc174, #loc175])
#loc307 = loc(fused[#loc176, #loc173])
#loc308 = loc(fused[#loc179, #loc180])
#loc309 = loc(fused[#loc181, #loc182])
#loc310 = loc(fused[#loc183, #loc180])
#loc311 = loc(fused[#loc187, #loc186])
#loc312 = loc(fused[#loc189, #loc190])
#loc313 = loc(fused[#loc192, #loc193])
#loc314 = loc(fused[#loc194, #loc195])
#loc315 = loc(fused[#loc196, #loc197])
#loc316 = loc(fused[#loc199, #loc198])
#loc317 = loc(fused[#loc203, #loc202])
#loc318 = loc(fused[#loc205, #loc206])
#loc319 = loc(fused[#loc208, #loc209])
#loc320 = loc(fused[#loc210, #loc211])
#loc321 = loc(fused[#loc212, #loc213])
#loc322 = loc(fused[#loc218, #loc219])
#loc325 = loc(fused[#loc235, #loc234])
