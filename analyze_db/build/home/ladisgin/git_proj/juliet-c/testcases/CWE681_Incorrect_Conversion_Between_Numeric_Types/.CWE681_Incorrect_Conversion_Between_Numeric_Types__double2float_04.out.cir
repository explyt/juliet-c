!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":150:10)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":150:14)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":150:20)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":150:32)
#true = #cir.bool<true> : !cir.bool
#loc184 = loc(fused[#loc57, #loc58])
#loc185 = loc(fused[#loc59, #loc60])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc163)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc164)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printFloatLine(!cir.float) loc(#loc167)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc16)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc172)
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc173)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc23)
          %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc23)
          cir.store %5, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc173)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc26)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc27)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc164)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc29)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc175)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc34)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc35)
              cir.store %17, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc177)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc38)
            } loc(#loc176)
          } loc(#loc174)
          %6 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc39)
          %7 = cir.cast(floating, %6 : !cir.double), !cir.float loc(#loc39)
          cir.call @printFloatLine(%7) : (!cir.float) -> () loc(#loc40)
        } loc(#loc171)
      } loc(#loc170)
    } loc(#loc169)
    cir.return loc(#loc13)
  } loc(#loc168)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc178)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc181)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc54)
  cir.func @main(%arg0: !s32i loc(fused[#loc57, #loc58]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc59, #loc60])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc56)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc61)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc62)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc63)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc63)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc64)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc51)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %8 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_good() : () -> () loc(#loc66)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc52)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc53)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %13 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_bad() : () -> () loc(#loc70)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc54)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc188)
    cir.return %17 : !s32i loc(#loc188)
  } loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Value is too small or large to be represented as a float\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc81)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc81)
      cir.if %1 {
        %2 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      } else {
        cir.scope {
          %2 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc193)
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc194)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc91)
          %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc91)
          cir.store %5, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc194)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc94)
            %7 = cir.const #cir.int<256> : !s32i loc(#loc95)
            %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc164)
            %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc96)
            %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc97)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc98)
            %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc196)
            cir.if %13 {
              %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc102)
              %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc103)
              cir.store %15, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc198)
            } else {
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc106)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc106)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc107)
            } loc(#loc197)
          } loc(#loc195)
          cir.scope {
            %6 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc110)
            %7 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc111)
            %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc111)
            %9 = cir.cmp(gt, %6, %8) : !cir.double, !cir.bool loc(#loc200)
            %10 = cir.ternary(%9, true {
              %11 = cir.const #true loc(#loc112)
              cir.yield %11 : !cir.bool loc(#loc112)
            }, false {
              %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc113)
              %12 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc114)
              %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc114)
              %14 = cir.cmp(lt, %11, %13) : !cir.double, !cir.bool loc(#loc201)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc112)
                cir.yield %16 : !cir.bool loc(#loc112)
              }, false {
                %16 = cir.const #false loc(#loc112)
                cir.yield %16 : !cir.bool loc(#loc112)
              }) : (!cir.bool) -> !cir.bool loc(#loc112)
              cir.yield %15 : !cir.bool loc(#loc112)
            }) : (!cir.bool) -> !cir.bool loc(#loc112)
            cir.if %10 {
              %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc76)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc76)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc118)
            } else {
              %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc119)
              %12 = cir.cast(floating, %11 : !cir.double), !cir.float loc(#loc119)
              cir.call @printFloatLine(%12) : (!cir.float) -> () loc(#loc120)
            } loc(#loc202)
          } loc(#loc199)
        } loc(#loc192)
      } loc(#loc191)
    } loc(#loc190)
    cir.return loc(#loc78)
  } loc(#loc189)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc125)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc125)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc207)
          %3 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc208)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc132)
          %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc132)
          cir.store %5, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc208)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc135)
            %7 = cir.const #cir.int<256> : !s32i loc(#loc136)
            %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc164)
            %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc137)
            %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc138)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc139)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc139)
            %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc210)
            cir.if %13 {
              %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc143)
              %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc144)
              cir.store %15, %3 : !cir.double, !cir.ptr<!cir.double> loc(#loc212)
            } else {
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc147)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc147)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc148)
            } loc(#loc211)
          } loc(#loc209)
          cir.scope {
            %6 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc151)
            %7 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc152)
            %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc152)
            %9 = cir.cmp(gt, %6, %8) : !cir.double, !cir.bool loc(#loc214)
            %10 = cir.ternary(%9, true {
              %11 = cir.const #true loc(#loc153)
              cir.yield %11 : !cir.bool loc(#loc153)
            }, false {
              %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc154)
              %12 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc155)
              %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc155)
              %14 = cir.cmp(lt, %11, %13) : !cir.double, !cir.bool loc(#loc215)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc153)
                cir.yield %16 : !cir.bool loc(#loc153)
              }, false {
                %16 = cir.const #false loc(#loc153)
                cir.yield %16 : !cir.bool loc(#loc153)
              }) : (!cir.bool) -> !cir.bool loc(#loc153)
              cir.yield %15 : !cir.bool loc(#loc153)
            }) : (!cir.bool) -> !cir.bool loc(#loc153)
            cir.if %10 {
              %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc159)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc159)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc160)
            } else {
              %11 = cir.load %3 : !cir.ptr<!cir.double>, !cir.double loc(#loc161)
              %12 = cir.cast(floating, %11 : !cir.double), !cir.float loc(#loc161)
              cir.call @printFloatLine(%12) : (!cir.float) -> () loc(#loc162)
            } loc(#loc216)
          } loc(#loc213)
        } loc(#loc206)
      } loc(#loc205)
    } loc(#loc204)
    cir.return loc(#loc122)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":48:27)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":22:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":22:39)
#loc12 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":29:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":54:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":31:5)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":53:5)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":31:8)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":32:5)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":33:9)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":52:9)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":34:13)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":34:45)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":35:13)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":35:35)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":41:13)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":49:13)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":41:23)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":41:36)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":41:53)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":41:17)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":41:63)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":42:13)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":45:13)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":47:13)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":44:37)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":44:32)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":44:17)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":44:48)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":48:17)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":51:35)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":51:13)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":135:1)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":139:1)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":137:5)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":137:11)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":138:5)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":138:11)
#loc47 = loc("/usr/include/stdlib.h":575:1)
#loc48 = loc("/usr/include/stdlib.h":575:41)
#loc49 = loc("/usr/include/time.h":76:1)
#loc50 = loc("/usr/include/time.h":76:38)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":155:15)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":157:15)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":160:15)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":162:15)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":150:1)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":165:1)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":151:1)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":153:27)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":153:22)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":153:5)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":155:5)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":156:5)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":156:77)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":157:5)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":160:5)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":161:5)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":161:76)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":162:5)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":164:12)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":164:5)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":66:19)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":90:27)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":61:1)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":98:1)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":63:5)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":97:5)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":63:8)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":64:5)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":67:5)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":69:5)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":66:9)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":70:9)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":96:9)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":71:13)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":71:45)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":72:13)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":72:35)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":78:13)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":86:13)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":78:23)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":78:36)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":78:53)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":78:17)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":78:63)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":79:13)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":82:13)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":84:13)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":81:37)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":81:32)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":81:17)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":81:48)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":85:27)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":85:17)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":88:13)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":95:13)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":88:17)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":88:32)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":88:40)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":88:43)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":88:58)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":89:13)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":91:13)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":93:13)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":90:17)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":94:39)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":94:17)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":101:1)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":133:1)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":103:5)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":132:5)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":103:8)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":104:5)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":105:9)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":131:9)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":106:13)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":106:45)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":107:13)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":107:35)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":113:13)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":121:13)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":113:23)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":113:36)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":113:53)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":113:17)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":113:63)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":114:13)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":117:13)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":119:13)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":116:37)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":116:32)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":116:17)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":116:48)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":120:27)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":120:17)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":123:13)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":130:13)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":123:17)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":123:32)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":123:40)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":123:43)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":123:58)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":124:13)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":126:13)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":128:13)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":125:27)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":125:17)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":129:39)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04.c":129:17)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc166 = loc(fused[#loc7, #loc8])
#loc167 = loc(fused[#loc10, #loc11])
#loc168 = loc(fused[#loc12, #loc13])
#loc169 = loc(fused[#loc14, #loc15])
#loc170 = loc(fused[#loc17, #loc15])
#loc171 = loc(fused[#loc18, #loc19])
#loc172 = loc(fused[#loc20, #loc21])
#loc173 = loc(fused[#loc22, #loc23])
#loc174 = loc(fused[#loc24, #loc25])
#loc175 = loc(fused[#loc29, #loc30])
#loc176 = loc(fused[#loc31, #loc32, #loc33, #loc25])
#loc177 = loc(fused[#loc36, #loc37])
#loc178 = loc(fused[#loc41, #loc42])
#loc179 = loc(fused[#loc43, #loc44])
#loc180 = loc(fused[#loc45, #loc46])
#loc181 = loc(fused[#loc47, #loc48])
#loc182 = loc(fused[#loc49, #loc50])
#loc183 = loc(fused[#loc55, #loc56])
#loc186 = loc(fused[#loc66, #loc67])
#loc187 = loc(fused[#loc70, #loc71])
#loc188 = loc(fused[#loc74, #loc73])
#loc189 = loc(fused[#loc77, #loc78])
#loc190 = loc(fused[#loc79, #loc80])
#loc191 = loc(fused[#loc82, #loc83, #loc84, #loc80])
#loc192 = loc(fused[#loc86, #loc87])
#loc193 = loc(fused[#loc88, #loc89])
#loc194 = loc(fused[#loc90, #loc91])
#loc195 = loc(fused[#loc92, #loc93])
#loc196 = loc(fused[#loc97, #loc98])
#loc197 = loc(fused[#loc99, #loc100, #loc101, #loc93])
#loc198 = loc(fused[#loc104, #loc105])
#loc199 = loc(fused[#loc108, #loc109])
#loc200 = loc(fused[#loc110, #loc111])
#loc201 = loc(fused[#loc113, #loc114])
#loc202 = loc(fused[#loc115, #loc116, #loc117, #loc109])
#loc203 = loc(fused[#loc121, #loc122])
#loc204 = loc(fused[#loc123, #loc124])
#loc205 = loc(fused[#loc126, #loc124])
#loc206 = loc(fused[#loc127, #loc128])
#loc207 = loc(fused[#loc129, #loc130])
#loc208 = loc(fused[#loc131, #loc132])
#loc209 = loc(fused[#loc133, #loc134])
#loc210 = loc(fused[#loc138, #loc139])
#loc211 = loc(fused[#loc140, #loc141, #loc142, #loc134])
#loc212 = loc(fused[#loc145, #loc146])
#loc213 = loc(fused[#loc149, #loc150])
#loc214 = loc(fused[#loc151, #loc152])
#loc215 = loc(fused[#loc154, #loc155])
#loc216 = loc(fused[#loc156, #loc157, #loc158, #loc150])
