!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc100)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc6)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc107)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc107)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc18)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc108)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc109)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc104)
    cir.store %6, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc104)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc15)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc105)
    cir.br ^bb4 loc(#loc110)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc25)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc27)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc27)
    %12 = cir.const #cir.int<6> : !u64i loc(#loc111)
    %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc112)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc30)
    %16 = cir.binop(sub, %13, %15) : !u64i loc(#loc113)
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc6)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc6)
    %21 = cir.call @snprintf(%9, %16, %18, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc25)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %23 = cir.cmp(eq, %21, %22) : !s32i, !cir.bool loc(#loc114)
    cir.brcond %23 ^bb5, ^bb6 loc(#loc115)
  ^bb5:  // pred: ^bb4
    %24 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc9)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb6 loc(#loc24)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc17)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc17)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc103)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc116)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc122)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc124)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc124)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc51)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc125)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb10 loc(#loc54)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc121)
    cir.store %8, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc121)
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc48)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc122)
    cir.br ^bb5 loc(#loc127)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc61)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc63)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc63)
    %14 = cir.const #cir.int<6> : !u64i loc(#loc128)
    %15 = cir.binop(sub, %13, %14) : !u64i loc(#loc129)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc66)
    %18 = cir.binop(sub, %15, %17) : !u64i loc(#loc130)
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc67)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc67)
    %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc68)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc68)
    %23 = cir.call @snprintf(%11, %18, %20, %22) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc61)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc131)
    cir.brcond %25 ^bb6, ^bb7 loc(#loc132)
  ^bb6:  // pred: ^bb5
    %26 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc71)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb7 loc(#loc60)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc60)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc58)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc50)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc50)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc44)
  } loc(#loc120)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc135)
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc137)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc137)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc81)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc138)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc139)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc134)
    cir.store %6, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc134)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc78)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc88)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc90)
    %12 = cir.const #cir.int<6> : !u64i loc(#loc141)
    %13 = cir.binop(sub, %11, %12) : !u64i loc(#loc142)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc93)
    %16 = cir.binop(sub, %13, %15) : !u64i loc(#loc143)
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc94)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc94)
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc95)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc95)
    %21 = cir.call @snprintf(%9, %16, %18, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc88)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc144)
    cir.brcond %23 ^bb5, ^bb6 loc(#loc145)
  ^bb5:  // pred: ^bb4
    %24 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc98)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc85)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc80)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc80)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc74)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":385:1)
#loc4 = loc("/usr/include/stdio.h":387:62)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:57)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:65)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":45:27)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":32:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":49:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":39:13)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":39:36)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":40:13)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":40:27)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":34:5)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":48:5)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":34:8)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":34:26)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":35:5)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":36:9)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":47:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":46:13)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:17)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:26)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:31)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:35)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:52)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:54)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":43:80)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":44:13)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":45:17)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":98:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":102:1)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":100:5)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":100:11)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":101:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":101:11)
#loc40 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc41 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":61:19)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":56:1)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":77:1)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":68:13)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":68:36)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":69:13)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":69:27)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":58:5)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":76:5)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":58:8)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":58:27)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":59:5)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":62:5)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":64:5)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":61:9)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":65:9)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":75:9)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:13)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":74:13)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:17)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:26)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:31)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:35)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:52)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:54)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:57)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:65)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":71:79)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":72:13)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":73:27)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":73:17)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":80:1)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":96:1)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":87:13)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":87:36)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":88:13)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":88:27)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":82:5)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":95:5)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":82:8)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":82:26)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":83:5)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":84:9)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":94:9)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:13)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":93:13)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:17)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:26)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:31)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:35)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:52)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:54)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:57)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:65)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":90:79)
#loc97 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":91:13)
#loc98 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":92:27)
#loc99 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_11.c":92:17)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc10, #loc11])
#loc104 = loc(fused[#loc12, #loc13])
#loc105 = loc(fused[#loc14, #loc15])
#loc106 = loc(fused[#loc16, #loc17])
#loc107 = loc(fused[#loc18, #loc19])
#loc108 = loc(fused[#loc20, #loc17])
#loc109 = loc(fused[#loc21, #loc22])
#loc110 = loc(fused[#loc23, #loc24])
#loc111 = loc(fused[#loc28, #loc29])
#loc112 = loc(fused[#loc27, #loc29])
#loc113 = loc(fused[#loc27, #loc30])
#loc114 = loc(fused[#loc25, #loc31])
#loc115 = loc(fused[#loc32, #loc24])
#loc116 = loc(fused[#loc34, #loc35])
#loc117 = loc(fused[#loc36, #loc37])
#loc118 = loc(fused[#loc38, #loc39])
#loc119 = loc(fused[#loc40, #loc41])
#loc120 = loc(fused[#loc43, #loc44])
#loc121 = loc(fused[#loc45, #loc46])
#loc122 = loc(fused[#loc47, #loc48])
#loc123 = loc(fused[#loc49, #loc50])
#loc124 = loc(fused[#loc51, #loc52])
#loc125 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc126 = loc(fused[#loc57, #loc58])
#loc127 = loc(fused[#loc59, #loc60])
#loc128 = loc(fused[#loc64, #loc65])
#loc129 = loc(fused[#loc63, #loc65])
#loc130 = loc(fused[#loc63, #loc66])
#loc131 = loc(fused[#loc61, #loc69])
#loc132 = loc(fused[#loc70, #loc60])
#loc133 = loc(fused[#loc73, #loc74])
#loc134 = loc(fused[#loc75, #loc76])
#loc135 = loc(fused[#loc77, #loc78])
#loc136 = loc(fused[#loc79, #loc80])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc83, #loc80])
#loc139 = loc(fused[#loc84, #loc85])
#loc140 = loc(fused[#loc86, #loc87])
#loc141 = loc(fused[#loc91, #loc92])
#loc142 = loc(fused[#loc90, #loc92])
#loc143 = loc(fused[#loc90, #loc93])
#loc144 = loc(fused[#loc88, #loc96])
#loc145 = loc(fused[#loc97, #loc87])
