!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":28:25)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":28:32)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":60:29)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":60:36)
#loc148 = loc(fused[#loc11, #loc12])
#loc178 = loc(fused[#loc82, #loc83])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc143)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc144)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc145)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc146)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc11, #loc12])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc10)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc14)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc15)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc15)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc149)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc150)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc14)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc151)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc23)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc154)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc27)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc155)
    } loc(#loc153)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
    cir.return %10 : !cir.ptr<!s8i> loc(#loc156)
  } loc(#loc147)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc157)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc158)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc159)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc40)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    %3 = cir.call @badSource(%2) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc43)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc144)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc165)
      %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc166)
      %7 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc144)
      cir.copy %7 to %4 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc144)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc51)
      %9 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc52)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc51)
      cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc167)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc57)
        cir.store %16, %5 : !u64i, !cir.ptr<!u64i> loc(#loc169)
        cir.for : cond {
          %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %18 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc61)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc61)
          %21 = cir.binop(add, %18, %20) : !u64i loc(#loc170)
          %22 = cir.cmp(lt, %17, %21) : !u64i, !cir.bool loc(#loc171)
          cir.condition(%22) loc(#loc62)
        } body {
          cir.scope {
            %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %18 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc65)
            %19 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %17 : !u64i), !cir.ptr<!s8i> loc(#loc65)
            %20 = cir.load %19 : !cir.ptr<!s8i>, !s8i loc(#loc65)
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
            %22 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc67)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc68)
            cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc173)
          } loc(#loc172)
          cir.yield loc(#loc56)
        } step {
          %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc70)
          %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc71)
          cir.store %18, %5 : !u64i, !cir.ptr<!u64i> loc(#loc174)
          cir.yield loc(#loc168)
        } loc(#loc168)
      } loc(#loc168)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
      cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc74)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc74)
    } loc(#loc164)
    cir.return loc(#loc37)
  } loc(#loc160)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc176)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc78)
    cir.return loc(#loc77)
  } loc(#loc175)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc82, #loc83])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc81)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc84)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc85)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc86)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc86)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc86)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc179)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc180)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc181)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc184)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc98)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc100)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
      } loc(#loc185)
    } loc(#loc183)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    cir.store %11, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc186)
    cir.return %12 : !cir.ptr<!s8i> loc(#loc186)
  } loc(#loc177)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc107)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
    %3 = cir.call @goodG2BSource(%2) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc110)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc143)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc192)
      %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc193)
      %7 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc143)
      cir.copy %7 to %4 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc143)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc118)
      %9 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc119)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc118)
      cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc194)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc124)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc124)
        cir.store %16, %5 : !u64i, !cir.ptr<!u64i> loc(#loc196)
        cir.for : cond {
          %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc126)
          %18 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc127)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc128)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc128)
          %21 = cir.binop(add, %18, %20) : !u64i loc(#loc197)
          %22 = cir.cmp(lt, %17, %21) : !u64i, !cir.bool loc(#loc198)
          cir.condition(%22) loc(#loc129)
        } body {
          cir.scope {
            %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc131)
            %18 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc132)
            %19 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %17 : !u64i), !cir.ptr<!s8i> loc(#loc132)
            %20 = cir.load %19 : !cir.ptr<!s8i>, !s8i loc(#loc132)
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
            %22 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc134)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc135)
            cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc200)
          } loc(#loc199)
          cir.yield loc(#loc123)
        } step {
          %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc137)
          %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc138)
          cir.store %18, %5 : !u64i, !cir.ptr<!u64i> loc(#loc201)
          cir.yield loc(#loc195)
        } loc(#loc195)
      } loc(#loc195)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
      cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc140)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc141)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc141)
    } loc(#loc191)
    cir.return loc(#loc104)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":75:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":75:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":42:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":42:29)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":28:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":34:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":29:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":31:20)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":31:27)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":31:30)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":31:41)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":31:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":31:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":32:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":32:33)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":32:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":32:17)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":32:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":32:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":32:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":32:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":33:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":33:5)
#loc30 = loc("/usr/include/string.h":407:1)
#loc31 = loc("/usr/include/string.h":408:33)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("/usr/include/stdlib.h":687:1)
#loc35 = loc("/usr/include/stdlib.h":687:32)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":36:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":54:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":38:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":38:12)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":39:12)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":39:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":40:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":40:12)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":40:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":40:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":41:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":53:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":43:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":43:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":43:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":44:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":44:28)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":44:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":44:34)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":47:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":50:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":47:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":47:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":47:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":47:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":47:37)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":47:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":48:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":49:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":49:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":49:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":49:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":49:19)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":49:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":47:41)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":47:40)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":51:19)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":51:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":52:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":52:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":89:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":92:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":91:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":91:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":60:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":66:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":61:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":63:20)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":63:28)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":63:31)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":63:34)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":63:45)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":63:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":63:46)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":63:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":64:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":64:33)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":64:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":64:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":64:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":64:24)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":64:30)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":64:29)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":65:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":65:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":69:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":87:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":71:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":71:12)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":72:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":72:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":73:26)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":73:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":73:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":73:30)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":74:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":86:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":76:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":76:16)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":76:19)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":77:21)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":77:28)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":77:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":77:34)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":80:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":83:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":80:18)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":80:14)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":80:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":80:25)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":80:37)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":80:23)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":81:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":82:30)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":82:23)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":82:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":82:18)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":82:19)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":82:31)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":80:41)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":80:40)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":84:19)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":84:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":85:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c":85:14)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc7, #loc8])
#loc147 = loc(fused[#loc9, #loc10])
#loc149 = loc(fused[#loc16, #loc17])
#loc150 = loc(fused[#loc15, #loc17])
#loc151 = loc(fused[#loc14, #loc18])
#loc152 = loc(fused[#loc19, #loc18])
#loc153 = loc(fused[#loc20, #loc21])
#loc154 = loc(fused[#loc22, #loc23])
#loc155 = loc(fused[#loc24, #loc21])
#loc156 = loc(fused[#loc29, #loc28])
#loc157 = loc(fused[#loc30, #loc31])
#loc158 = loc(fused[#loc32, #loc33])
#loc159 = loc(fused[#loc34, #loc35])
#loc160 = loc(fused[#loc36, #loc37])
#loc161 = loc(fused[#loc38, #loc39])
#loc162 = loc(fused[#loc41, #loc40])
#loc163 = loc(fused[#loc44, #loc45])
#loc164 = loc(fused[#loc46, #loc47])
#loc165 = loc(fused[#loc48, #loc49])
#loc166 = loc(fused[#loc48, #loc50])
#loc167 = loc(fused[#loc53, #loc54])
#loc168 = loc(fused[#loc55, #loc56])
#loc169 = loc(fused[#loc58, #loc57])
#loc170 = loc(fused[#loc60, #loc61])
#loc171 = loc(fused[#loc59, #loc61])
#loc172 = loc(fused[#loc63, #loc56])
#loc173 = loc(fused[#loc66, #loc69])
#loc174 = loc(fused[#loc71, #loc70])
#loc175 = loc(fused[#loc76, #loc77])
#loc176 = loc(fused[#loc78, #loc79])
#loc177 = loc(fused[#loc80, #loc81])
#loc179 = loc(fused[#loc88, #loc89])
#loc180 = loc(fused[#loc90, #loc89])
#loc181 = loc(fused[#loc85, #loc91])
#loc182 = loc(fused[#loc92, #loc91])
#loc183 = loc(fused[#loc93, #loc94])
#loc184 = loc(fused[#loc95, #loc96])
#loc185 = loc(fused[#loc97, #loc94])
#loc186 = loc(fused[#loc102, #loc101])
#loc187 = loc(fused[#loc103, #loc104])
#loc188 = loc(fused[#loc105, #loc106])
#loc189 = loc(fused[#loc108, #loc107])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc113, #loc114])
#loc192 = loc(fused[#loc115, #loc116])
#loc193 = loc(fused[#loc115, #loc117])
#loc194 = loc(fused[#loc120, #loc121])
#loc195 = loc(fused[#loc122, #loc123])
#loc196 = loc(fused[#loc125, #loc124])
#loc197 = loc(fused[#loc127, #loc128])
#loc198 = loc(fused[#loc126, #loc128])
#loc199 = loc(fused[#loc130, #loc123])
#loc200 = loc(fused[#loc133, #loc136])
#loc201 = loc(fused[#loc138, #loc137])
