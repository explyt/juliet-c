!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc23 = loc("CWE617_Reachable_Assertion__rand_17.c":34:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc54)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_17.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_17_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc58)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc13)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.br ^bb1 loc(#loc60)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    cir.br ^bb2 loc(#loc60)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc62)
    cir.brcond %7 ^bb3, ^bb11 loc(#loc21)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // pred: ^bb3
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc23)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %11 ^bb5, ^bb6 loc(#loc23)
  ^bb5:  // pred: ^bb4
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
    cir.br ^bb7(%23 : !u32i) loc(#loc23)
  ^bb6:  // pred: ^bb4
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc23)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc23)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc23)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc23)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc23)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc23)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc23)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc23)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc23)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc23)
    cir.br ^bb7(%39 : !u32i) loc(#loc23)
  ^bb7(%40: !u32i loc("CWE617_Reachable_Assertion__rand_17.c":34:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc23)
    cir.store %41, %1 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.br ^bb9 loc(#loc16)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc16)
  ^bb10:  // pred: ^bb9
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %43 = cir.unary(inc, %42) : !s32i, !s32i loc(#loc26)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.br ^bb2 loc(#loc60)
  ^bb11:  // pred: ^bb2
    cir.br ^bb12 loc(#loc16)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc5)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc5)
  ^bb14:  // pred: ^bb13
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc5)
    %45 = cir.const #cir.int<5> : !s32i loc(#loc5)
    %46 = cir.cmp(gt, %44, %45) : !s32i, !cir.bool loc(#loc5)
    cir.brcond %46 ^bb15, ^bb16 loc(#loc5)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17 loc(#loc5)
  ^bb16:  // pred: ^bb14
    %47 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
    %49 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
    %51 = cir.const #cir.int<37> : !s32i loc(#loc5)
    %52 = cir.cast(integral, %51 : !s32i), !u32i loc(#loc5)
    %53 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @__assert_fail(%48, %50, %52, %54) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
    cir.br ^bb17 loc(#loc5)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc5)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc5)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc7)
  } loc(#loc56)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc67)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc28)
  } loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc69)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc70)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc39)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.br ^bb1 loc(#loc72)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc43)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.br ^bb2 loc(#loc72)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc74)
    cir.brcond %7 ^bb3, ^bb7 loc(#loc47)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc75)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<5> : !s32i loc(#loc49)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc49)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.br ^bb5 loc(#loc42)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc42)
  ^bb6:  // pred: ^bb5
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc53)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.br ^bb2 loc(#loc72)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc42)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc31)
  ^bb10:  // pred: ^bb9
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc31)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc31)
    cir.brcond %15 ^bb11, ^bb12 loc(#loc31)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc31)
  ^bb12:  // pred: ^bb10
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc31)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc31)
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc31)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc31)
    %20 = cir.const #cir.int<57> : !s32i loc(#loc31)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc31)
    %22 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc31)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @__assert_fail(%17, %19, %21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb13 loc(#loc31)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc31)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc31)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc33)
  } loc(#loc68)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":67:1)
#loc4 = loc("/usr/include/assert.h":69:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_17.c":37:5)
#loc6 = loc("CWE617_Reachable_Assertion__rand_17.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_17.c":38:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_17.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_17.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__rand_17.c":28:5)
#loc11 = loc("CWE617_Reachable_Assertion__rand_17.c":28:9)
#loc12 = loc("CWE617_Reachable_Assertion__rand_17.c":30:13)
#loc13 = loc("CWE617_Reachable_Assertion__rand_17.c":30:12)
#loc14 = loc("CWE617_Reachable_Assertion__rand_17.c":30:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_17.c":31:5)
#loc16 = loc("CWE617_Reachable_Assertion__rand_17.c":35:5)
#loc17 = loc("CWE617_Reachable_Assertion__rand_17.c":31:13)
#loc18 = loc("CWE617_Reachable_Assertion__rand_17.c":31:9)
#loc19 = loc("CWE617_Reachable_Assertion__rand_17.c":31:16)
#loc20 = loc("CWE617_Reachable_Assertion__rand_17.c":31:20)
#loc21 = loc("CWE617_Reachable_Assertion__rand_17.c":31:18)
#loc22 = loc("CWE617_Reachable_Assertion__rand_17.c":32:5)
#loc24 = loc("CWE617_Reachable_Assertion__rand_17.c":34:9)
#loc25 = loc("CWE617_Reachable_Assertion__rand_17.c":31:24)
#loc26 = loc("CWE617_Reachable_Assertion__rand_17.c":31:23)
#loc27 = loc("CWE617_Reachable_Assertion__rand_17.c":60:1)
#loc28 = loc("CWE617_Reachable_Assertion__rand_17.c":63:1)
#loc29 = loc("CWE617_Reachable_Assertion__rand_17.c":62:5)
#loc30 = loc("CWE617_Reachable_Assertion__rand_17.c":62:13)
#loc31 = loc("CWE617_Reachable_Assertion__rand_17.c":57:5)
#loc32 = loc("CWE617_Reachable_Assertion__rand_17.c":45:1)
#loc33 = loc("CWE617_Reachable_Assertion__rand_17.c":58:1)
#loc34 = loc("CWE617_Reachable_Assertion__rand_17.c":47:5)
#loc35 = loc("CWE617_Reachable_Assertion__rand_17.c":47:9)
#loc36 = loc("CWE617_Reachable_Assertion__rand_17.c":48:5)
#loc37 = loc("CWE617_Reachable_Assertion__rand_17.c":48:9)
#loc38 = loc("CWE617_Reachable_Assertion__rand_17.c":50:13)
#loc39 = loc("CWE617_Reachable_Assertion__rand_17.c":50:12)
#loc40 = loc("CWE617_Reachable_Assertion__rand_17.c":50:5)
#loc41 = loc("CWE617_Reachable_Assertion__rand_17.c":51:5)
#loc42 = loc("CWE617_Reachable_Assertion__rand_17.c":55:5)
#loc43 = loc("CWE617_Reachable_Assertion__rand_17.c":51:13)
#loc44 = loc("CWE617_Reachable_Assertion__rand_17.c":51:9)
#loc45 = loc("CWE617_Reachable_Assertion__rand_17.c":51:16)
#loc46 = loc("CWE617_Reachable_Assertion__rand_17.c":51:20)
#loc47 = loc("CWE617_Reachable_Assertion__rand_17.c":51:18)
#loc48 = loc("CWE617_Reachable_Assertion__rand_17.c":52:5)
#loc49 = loc("CWE617_Reachable_Assertion__rand_17.c":54:16)
#loc50 = loc("CWE617_Reachable_Assertion__rand_17.c":54:29)
#loc51 = loc("CWE617_Reachable_Assertion__rand_17.c":54:9)
#loc52 = loc("CWE617_Reachable_Assertion__rand_17.c":51:24)
#loc53 = loc("CWE617_Reachable_Assertion__rand_17.c":51:23)
#loc54 = loc(fused[#loc1, #loc2])
#loc55 = loc(fused[#loc3, #loc4])
#loc56 = loc(fused[#loc6, #loc7])
#loc57 = loc(fused[#loc8, #loc9])
#loc58 = loc(fused[#loc10, #loc11])
#loc59 = loc(fused[#loc14, #loc12])
#loc60 = loc(fused[#loc15, #loc16])
#loc61 = loc(fused[#loc18, #loc17])
#loc62 = loc(fused[#loc19, #loc20])
#loc63 = loc(fused[#loc22, #loc16])
#loc64 = loc(fused[#loc24, #loc23])
#loc65 = loc(fused[#loc26, #loc25])
#loc66 = loc(fused[#loc27, #loc28])
#loc67 = loc(fused[#loc29, #loc30])
#loc68 = loc(fused[#loc32, #loc33])
#loc69 = loc(fused[#loc34, #loc35])
#loc70 = loc(fused[#loc36, #loc37])
#loc71 = loc(fused[#loc40, #loc38])
#loc72 = loc(fused[#loc41, #loc42])
#loc73 = loc(fused[#loc44, #loc43])
#loc74 = loc(fused[#loc45, #loc46])
#loc75 = loc(fused[#loc48, #loc42])
#loc76 = loc(fused[#loc51, #loc50])
#loc77 = loc(fused[#loc53, #loc52])
