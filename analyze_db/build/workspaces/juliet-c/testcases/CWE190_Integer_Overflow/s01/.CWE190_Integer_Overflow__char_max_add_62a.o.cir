!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @_ZN40CWE190_Integer_Overflow__char_max_add_629badSourceERc(!cir.ptr<!s8i>) loc(#loc64)
  cir.func private @printHexCharLine(!s8i) loc(#loc65)
  cir.func @_ZN40CWE190_Integer_Overflow__char_max_add_623badEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc67)
    %1 = cir.const #cir.int<32> : !s8i loc(#loc9)
    cir.store %1, %0 : !s8i, !cir.ptr<!s8i> loc(#loc68)
    cir.call @_ZN40CWE190_Integer_Overflow__char_max_add_629badSourceERc(%0) : (!cir.ptr<!s8i>) -> () loc(#loc11)
    cir.scope {
      %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc70)
      %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc16)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc16)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc16)
      %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc16)
      cir.store %7, %2 : !s8i, !cir.ptr<!s8i> loc(#loc70)
      %8 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc17)
      cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc18)
    } loc(#loc69)
    cir.return loc(#loc6)
  } loc(#loc66)
  cir.func private @_ZN40CWE190_Integer_Overflow__char_max_add_6213goodG2BSourceERc(!cir.ptr<!s8i>) loc(#loc71)
  cir.func internal private @_ZN40CWE190_Integer_Overflow__char_max_add_62L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc73)
    %1 = cir.const #cir.int<32> : !s8i loc(#loc25)
    cir.store %1, %0 : !s8i, !cir.ptr<!s8i> loc(#loc74)
    cir.call @_ZN40CWE190_Integer_Overflow__char_max_add_6213goodG2BSourceERc(%0) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    cir.scope {
      %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc76)
      %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc32)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc32)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc32)
      %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc32)
      cir.store %7, %2 : !s8i, !cir.ptr<!s8i> loc(#loc76)
      %8 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc33)
      cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc34)
    } loc(#loc75)
    cir.return loc(#loc22)
  } loc(#loc72)
  cir.func private @_ZN40CWE190_Integer_Overflow__char_max_add_6213goodB2GSourceERc(!cir.ptr<!s8i>) loc(#loc77)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc39)
  cir.func internal private @_ZN40CWE190_Integer_Overflow__char_max_add_62L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc80)
    %1 = cir.const #cir.int<32> : !s8i loc(#loc44)
    cir.store %1, %0 : !s8i, !cir.ptr<!s8i> loc(#loc81)
    cir.call @_ZN40CWE190_Integer_Overflow__char_max_add_6213goodB2GSourceERc(%0) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc49)
      %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc49)
      %4 = cir.const #cir.int<127> : !s32i loc(#loc50)
      %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc83)
      cir.if %5 {
        %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc85)
        %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc56)
        %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc56)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc56)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc56)
        cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc85)
        %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc57)
        cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc58)
      } else {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc39)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } loc(#loc84)
    } loc(#loc82)
    cir.return loc(#loc41)
  } loc(#loc79)
  cir.func @_ZN40CWE190_Integer_Overflow__char_max_add_624goodEv() extra(#fn_attr) {
    cir.call @_ZN40CWE190_Integer_Overflow__char_max_add_62L7goodG2BEv() : () -> () loc(#loc62)
    cir.call @_ZN40CWE190_Integer_Overflow__char_max_add_62L7goodB2GEv() : () -> () loc(#loc63)
    cir.return loc(#loc61)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_62a.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":26:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":26:26)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":28:1)
#loc6 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":38:1)
#loc7 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":30:5)
#loc8 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":30:10)
#loc9 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":31:12)
#loc10 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":31:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":32:5)
#loc12 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":33:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":37:5)
#loc14 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":35:9)
#loc15 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":35:30)
#loc16 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":35:23)
#loc17 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":36:26)
#loc18 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":36:9)
#loc19 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":45:1)
#loc20 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":45:30)
#loc21 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":47:1)
#loc22 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":57:1)
#loc23 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":49:5)
#loc24 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":49:10)
#loc25 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":50:12)
#loc26 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":50:5)
#loc27 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":51:5)
#loc28 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":52:5)
#loc29 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":56:5)
#loc30 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":54:9)
#loc31 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":54:30)
#loc32 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":54:23)
#loc33 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":55:26)
#loc34 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":55:9)
#loc35 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":60:1)
#loc36 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":60:30)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":75:19)
#loc40 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":62:1)
#loc41 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":77:1)
#loc42 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":64:5)
#loc43 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":64:10)
#loc44 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":65:12)
#loc45 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":65:5)
#loc46 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":66:5)
#loc47 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":68:5)
#loc48 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":76:5)
#loc49 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":68:9)
#loc50 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":68:16)
#loc51 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":69:5)
#loc52 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":72:5)
#loc53 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":74:5)
#loc54 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":70:9)
#loc55 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":70:30)
#loc56 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":70:23)
#loc57 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":71:26)
#loc58 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":71:9)
#loc59 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":75:9)
#loc60 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":79:1)
#loc61 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":83:1)
#loc62 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":81:5)
#loc63 = loc("CWE190_Integer_Overflow__char_max_add_62a.cpp":82:5)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc66 = loc(fused[#loc5, #loc6])
#loc67 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc10, #loc9])
#loc69 = loc(fused[#loc12, #loc13])
#loc70 = loc(fused[#loc14, #loc15])
#loc71 = loc(fused[#loc19, #loc20])
#loc72 = loc(fused[#loc21, #loc22])
#loc73 = loc(fused[#loc23, #loc24])
#loc74 = loc(fused[#loc26, #loc25])
#loc75 = loc(fused[#loc28, #loc29])
#loc76 = loc(fused[#loc30, #loc31])
#loc77 = loc(fused[#loc35, #loc36])
#loc78 = loc(fused[#loc37, #loc38])
#loc79 = loc(fused[#loc40, #loc41])
#loc80 = loc(fused[#loc42, #loc43])
#loc81 = loc(fused[#loc45, #loc44])
#loc82 = loc(fused[#loc47, #loc48])
#loc83 = loc(fused[#loc49, #loc50])
#loc84 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc85 = loc(fused[#loc54, #loc55])
#loc86 = loc(fused[#loc60, #loc61])
