!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":30:21)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":30:25)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":45:13)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":55:25)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":55:29)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":74:25)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":74:29)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":77:19)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":95:13)
#true = #cir.bool<true> : !cir.bool
#loc94 = loc(fused[#loc8, #loc9])
#loc105 = loc(fused[#loc37, #loc38])
#loc112 = loc(fused[#loc61, #loc62])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @usleep(!u32i) -> !s32i loc(#loc91)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc94)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc11)
    %3 = cir.call @usleep(%2) : (!u32i) -> !s32i loc(#loc12)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc5)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc13)
    cir.return loc(#loc7)
  } loc(#loc93)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc95)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc98)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc21)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc98)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc23)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc25)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc25)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc25)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc25)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc25)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc25)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc25)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc25)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc25)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc25)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc25)
    cir.br ^bb3(%20 : !u32i) loc(#loc25)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc25)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc25)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc25)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc25)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc25)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc25)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc25)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc25)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc25)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc25)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc25)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc25)
    cir.br ^bb3(%36 : !u32i) loc(#loc25)
  ^bb3(%37: !u32i loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":45:13)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc25)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc25)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call %39(%40) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc27)
    cir.return loc(#loc17)
  } loc(#loc96)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc101)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc37, #loc38])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc105)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc39)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc40)
    %3 = cir.call @usleep(%2) : (!u32i) -> !s32i loc(#loc41)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc42)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc104)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc49)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc108)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc51)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %5 = cir.const #cir.int<20> : !s32i loc(#loc53)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc55)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc55)
    cir.return loc(#loc45)
  } loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc58)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc61, #loc62])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc112)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %3 = cir.cmp(gt, %1, %2) : !s32i, !cir.bool loc(#loc114)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc68)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %5 = cir.const #cir.int<2000> : !s32i loc(#loc70)
    %6 = cir.cmp(le, %4, %5) : !s32i, !cir.bool loc(#loc115)
    cir.brcond %6 ^bb3, ^bb4 loc(#loc68)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #true loc(#loc68)
    cir.br ^bb5(%7 : !cir.bool) loc(#loc68)
  ^bb4:  // pred: ^bb2
    %8 = cir.const #false loc(#loc68)
    cir.br ^bb5(%8 : !cir.bool) loc(#loc68)
  ^bb5(%9: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":77:19)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc68)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8(%9 : !cir.bool) loc(#loc68)
  ^bb7:  // pred: ^bb1
    %10 = cir.const #false loc(#loc68)
    cir.br ^bb8(%10 : !cir.bool) loc(#loc68)
  ^bb8(%11: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":77:19)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc68)
  ^bb9:  // pred: ^bb8
    cir.brcond %11 ^bb10, ^bb11 loc(#loc116)
  ^bb10:  // pred: ^bb9
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc74)
    %14 = cir.call @usleep(%13) : (!u32i) -> !s32i loc(#loc75)
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc57)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    cir.br ^bb12 loc(#loc72)
  ^bb11:  // pred: ^bb9
    %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc58)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb12 loc(#loc65)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc65)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc60)
  } loc(#loc111)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc119)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc83)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc119)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc85)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc87)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc87)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc87)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc87)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc87)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc87)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc87)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc87)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc87)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc87)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc87)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc87)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc87)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc87)
    cir.br ^bb3(%20 : !u32i) loc(#loc87)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc87)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc87)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc87)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc87)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc87)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc87)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc87)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc87)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc87)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc87)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc87)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc87)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc87)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc87)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc87)
    cir.br ^bb3(%36 : !u32i) loc(#loc87)
  ^bb3(%37: !u32i loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":95:13)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc87)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc89)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.call %39(%40) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc89)
    cir.return loc(#loc79)
  } loc(#loc117)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_44.c":0:0)
#loc1 = loc("/usr/include/unistd.h":480:1)
#loc2 = loc("/usr/include/unistd.h":480:43)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":34:15)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":30:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":35:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":31:1)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":33:11)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":33:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":34:5)
#loc14 = loc("/usr/include/stdlib.h":573:1)
#loc15 = loc("/usr/include/stdlib.h":573:24)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":37:1)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":48:1)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":39:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":39:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":41:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":41:29)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":43:14)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":43:13)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":43:5)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":45:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":47:5)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":47:13)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":99:1)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":103:1)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":101:5)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":101:13)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":102:5)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":102:13)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":55:1)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":60:1)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":56:1)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":58:11)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":58:5)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":59:15)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":59:5)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":62:1)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":71:1)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":64:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":64:9)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":65:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":65:29)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":67:14)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":67:13)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":67:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":69:13)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":69:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":70:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":70:13)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":80:19)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":84:19)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":74:1)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":86:1)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":75:1)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":77:5)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":85:5)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":77:9)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":77:17)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":77:22)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":77:31)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":78:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":81:5)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":83:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":79:15)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":79:9)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":80:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":84:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":88:1)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":97:1)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":90:5)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":90:9)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":91:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":91:29)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":93:14)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":93:13)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":93:5)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":95:5)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":96:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_44.c":96:13)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc6, #loc7])
#loc95 = loc(fused[#loc14, #loc15])
#loc96 = loc(fused[#loc16, #loc17])
#loc97 = loc(fused[#loc18, #loc19])
#loc98 = loc(fused[#loc20, #loc21])
#loc99 = loc(fused[#loc24, #loc22])
#loc100 = loc(fused[#loc26, #loc25])
#loc101 = loc(fused[#loc29, #loc30])
#loc102 = loc(fused[#loc31, #loc32])
#loc103 = loc(fused[#loc33, #loc34])
#loc104 = loc(fused[#loc35, #loc36])
#loc106 = loc(fused[#loc44, #loc45])
#loc107 = loc(fused[#loc46, #loc47])
#loc108 = loc(fused[#loc48, #loc49])
#loc109 = loc(fused[#loc52, #loc50])
#loc110 = loc(fused[#loc54, #loc53])
#loc111 = loc(fused[#loc59, #loc60])
#loc113 = loc(fused[#loc64, #loc65])
#loc114 = loc(fused[#loc66, #loc67])
#loc115 = loc(fused[#loc69, #loc70])
#loc116 = loc(fused[#loc71, #loc72, #loc73, #loc65])
#loc117 = loc(fused[#loc78, #loc79])
#loc118 = loc(fused[#loc80, #loc81])
#loc119 = loc(fused[#loc82, #loc83])
#loc120 = loc(fused[#loc86, #loc84])
#loc121 = loc(fused[#loc88, #loc87])
