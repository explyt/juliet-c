!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc205)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc206)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc207)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc208)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc210)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc212)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc21)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb1 loc(#loc215)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc205)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc216)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc217)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc212)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc212)
    cir.br ^bb4 loc(#loc218)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc31)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc32)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc32)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc32)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc32)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc32)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc219)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc220)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc40)
    cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.br ^bb7 loc(#loc37)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc222)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc205)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %29 ^bb13, ^bb14 loc(#loc223)
  ^bb13:  // pred: ^bb12
    %30 = cir.const #cir.int<100> : !s32i loc(#loc48)
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %32 = cir.binop(div, %30, %31) : !s32i loc(#loc224)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc50)
    cir.br ^bb14 loc(#loc45)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc45)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc15)
  } loc(#loc211)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc52)
  } loc(#loc225)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc232)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc233)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc72)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc205)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc76)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc236)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc237)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc232)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc232)
    cir.br ^bb4 loc(#loc238)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc82)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc83)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc83)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc83)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc83)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc83)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc83)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc83)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc84)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc85)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc239)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc240)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc90)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc91)
    cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.br ^bb7 loc(#loc88)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc94)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb7 loc(#loc81)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc81)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc79)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc75)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc75)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc242)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc230)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %29 ^bb13, ^bb14 loc(#loc243)
  ^bb13:  // pred: ^bb12
    %30 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb20 loc(#loc100)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc244)
  ^bb15:  // pred: ^bb14
    %32 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %34 = cir.cmp(ne, %32, %33) : !s32i, !cir.bool loc(#loc245)
    cir.brcond %34 ^bb16, ^bb17 loc(#loc246)
  ^bb16:  // pred: ^bb15
    %35 = cir.const #cir.int<100> : !s32i loc(#loc110)
    %36 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %37 = cir.binop(div, %35, %36) : !s32i loc(#loc247)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc112)
    cir.br ^bb18 loc(#loc108)
  ^bb17:  // pred: ^bb15
    %38 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc64)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    cir.br ^bb18 loc(#loc104)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc104)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc97)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc97)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc66)
  } loc(#loc231)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc249)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc250)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc121)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc205)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc125)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc253)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc254)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc249)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc249)
    cir.br ^bb4 loc(#loc255)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc132)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc132)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc132)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc132)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc132)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc132)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc132)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc132)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc207)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc133)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc134)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc135)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc256)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc257)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc139)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc140)
    cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.br ^bb7 loc(#loc137)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc143)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    cir.br ^bb7 loc(#loc130)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc130)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc128)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc124)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc124)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc259)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc205)
    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc147)
    cir.brcond %29 ^bb13, ^bb19 loc(#loc260)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc261)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc152)
    %32 = cir.cmp(ne, %30, %31) : !s32i, !cir.bool loc(#loc262)
    cir.brcond %32 ^bb15, ^bb16 loc(#loc263)
  ^bb15:  // pred: ^bb14
    %33 = cir.const #cir.int<100> : !s32i loc(#loc156)
    %34 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %35 = cir.binop(div, %33, %34) : !s32i loc(#loc264)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc158)
    cir.br ^bb17 loc(#loc154)
  ^bb16:  // pred: ^bb14
    %36 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc159)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc159)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc160)
    cir.br ^bb17 loc(#loc150)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc150)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc146)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc146)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc115)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc166)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.br ^bb1 loc(#loc268)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc230)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc170)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc269)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc174)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc175)
    cir.br ^bb4 loc(#loc172)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc176)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.br ^bb4 loc(#loc169)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc169)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc271)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc205)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc180)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc272)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<100> : !s32i loc(#loc182)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
    %14 = cir.binop(div, %12, %13) : !s32i loc(#loc273)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc184)
    cir.br ^bb8 loc(#loc179)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc179)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc162)
  } loc(#loc265)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc190)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    cir.br ^bb1 loc(#loc277)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc205)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc194)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc278)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<7> : !s32i loc(#loc196)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    cir.br ^bb3 loc(#loc193)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc193)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc280)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc205)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc200)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc281)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc202)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    %12 = cir.binop(div, %10, %11) : !s32i loc(#loc282)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc204)
    cir.br ^bb7 loc(#loc199)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc199)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc186)
  } loc(#loc274)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":24:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":50:1)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":32:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":32:49)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":26:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":26:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":28:13)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":28:12)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":28:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":29:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":44:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":29:8)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":30:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":31:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":43:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":34:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":42:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":34:23)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":34:36)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":34:53)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":34:17)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":34:63)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":35:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":38:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":40:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":37:29)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":37:24)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":37:17)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":37:40)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":41:17)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":45:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":49:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":45:8)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":46:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":48:22)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":48:28)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":48:9)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":174:1)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":180:1)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":176:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":176:14)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":177:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":177:14)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":178:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":178:14)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":179:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":179:14)
#loc61 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc62 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":81:19)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":92:23)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":57:1)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":95:1)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":65:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":65:49)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":59:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":59:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":61:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":61:12)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":61:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":62:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":77:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":62:8)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":63:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":64:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":76:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":67:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":75:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":67:23)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":67:36)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":67:53)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":67:17)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":67:63)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":68:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":71:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":73:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":70:29)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":70:24)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":70:17)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":70:40)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":74:27)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":74:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":78:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":94:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":78:8)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":79:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":82:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":84:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":81:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":86:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":93:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":86:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":86:21)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":87:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":89:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":91:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":88:26)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":88:32)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":88:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":92:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":98:1)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":131:1)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":106:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":106:49)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":100:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":100:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":102:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":102:12)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":102:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":103:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":118:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":103:8)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":104:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":105:9)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":117:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":108:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":116:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":108:23)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":108:36)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":108:53)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":108:17)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":108:63)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":109:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":112:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":114:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":111:29)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":111:24)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":111:17)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":111:40)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":115:27)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":115:17)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":119:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":130:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":119:8)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":120:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":122:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":129:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":122:13)
#loc152 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":122:21)
#loc153 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":123:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":125:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":127:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":124:26)
#loc157 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":124:32)
#loc158 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":124:13)
#loc159 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":128:23)
#loc160 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":128:13)
#loc161 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":134:1)
#loc162 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":154:1)
#loc163 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":136:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":136:9)
#loc165 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":138:13)
#loc166 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":138:12)
#loc167 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":138:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":139:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":148:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":139:8)
#loc171 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":140:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":143:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":145:5)
#loc174 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":142:19)
#loc175 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":142:9)
#loc176 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":147:16)
#loc177 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":147:9)
#loc178 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":149:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":153:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":149:8)
#loc181 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":150:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":152:22)
#loc183 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":152:28)
#loc184 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":152:9)
#loc185 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":157:1)
#loc186 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":172:1)
#loc187 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":159:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":159:9)
#loc189 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":161:13)
#loc190 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":161:12)
#loc191 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":161:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":162:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":166:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":162:8)
#loc195 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":163:5)
#loc196 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":165:16)
#loc197 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":165:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":167:5)
#loc199 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":171:5)
#loc200 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":167:8)
#loc201 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":168:5)
#loc202 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":170:22)
#loc203 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":170:28)
#loc204 = loc("CWE369_Divide_by_Zero__int_fgets_divide_09.c":170:9)
#loc205 = loc(fused[#loc1, #loc2])
#loc206 = loc(fused[#loc3, #loc4])
#loc207 = loc(fused[#loc5, #loc6])
#loc208 = loc(fused[#loc7, #loc8])
#loc209 = loc(fused[#loc9, #loc10])
#loc210 = loc(fused[#loc12, #loc13])
#loc211 = loc(fused[#loc14, #loc15])
#loc212 = loc(fused[#loc16, #loc17])
#loc213 = loc(fused[#loc18, #loc19])
#loc214 = loc(fused[#loc22, #loc20])
#loc215 = loc(fused[#loc23, #loc24])
#loc216 = loc(fused[#loc26, #loc24])
#loc217 = loc(fused[#loc27, #loc28])
#loc218 = loc(fused[#loc29, #loc30])
#loc219 = loc(fused[#loc34, #loc35])
#loc220 = loc(fused[#loc36, #loc37, #loc38, #loc30])
#loc221 = loc(fused[#loc41, #loc42])
#loc222 = loc(fused[#loc44, #loc45])
#loc223 = loc(fused[#loc47, #loc45])
#loc224 = loc(fused[#loc48, #loc49])
#loc225 = loc(fused[#loc51, #loc52])
#loc226 = loc(fused[#loc53, #loc54])
#loc227 = loc(fused[#loc55, #loc56])
#loc228 = loc(fused[#loc57, #loc58])
#loc229 = loc(fused[#loc59, #loc60])
#loc230 = loc(fused[#loc61, #loc62])
#loc231 = loc(fused[#loc65, #loc66])
#loc232 = loc(fused[#loc67, #loc68])
#loc233 = loc(fused[#loc69, #loc70])
#loc234 = loc(fused[#loc73, #loc71])
#loc235 = loc(fused[#loc74, #loc75])
#loc236 = loc(fused[#loc77, #loc75])
#loc237 = loc(fused[#loc78, #loc79])
#loc238 = loc(fused[#loc80, #loc81])
#loc239 = loc(fused[#loc85, #loc86])
#loc240 = loc(fused[#loc87, #loc88, #loc89, #loc81])
#loc241 = loc(fused[#loc92, #loc93])
#loc242 = loc(fused[#loc96, #loc97])
#loc243 = loc(fused[#loc99, #loc100, #loc101, #loc97])
#loc244 = loc(fused[#loc103, #loc104])
#loc245 = loc(fused[#loc105, #loc106])
#loc246 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc247 = loc(fused[#loc110, #loc111])
#loc248 = loc(fused[#loc114, #loc115])
#loc249 = loc(fused[#loc116, #loc117])
#loc250 = loc(fused[#loc118, #loc119])
#loc251 = loc(fused[#loc122, #loc120])
#loc252 = loc(fused[#loc123, #loc124])
#loc253 = loc(fused[#loc126, #loc124])
#loc254 = loc(fused[#loc127, #loc128])
#loc255 = loc(fused[#loc129, #loc130])
#loc256 = loc(fused[#loc134, #loc135])
#loc257 = loc(fused[#loc136, #loc137, #loc138, #loc130])
#loc258 = loc(fused[#loc141, #loc142])
#loc259 = loc(fused[#loc145, #loc146])
#loc260 = loc(fused[#loc148, #loc146])
#loc261 = loc(fused[#loc149, #loc150])
#loc262 = loc(fused[#loc151, #loc152])
#loc263 = loc(fused[#loc153, #loc154, #loc155, #loc150])
#loc264 = loc(fused[#loc156, #loc157])
#loc265 = loc(fused[#loc161, #loc162])
#loc266 = loc(fused[#loc163, #loc164])
#loc267 = loc(fused[#loc167, #loc165])
#loc268 = loc(fused[#loc168, #loc169])
#loc269 = loc(fused[#loc171, #loc172, #loc173, #loc169])
#loc270 = loc(fused[#loc177, #loc176])
#loc271 = loc(fused[#loc178, #loc179])
#loc272 = loc(fused[#loc181, #loc179])
#loc273 = loc(fused[#loc182, #loc183])
#loc274 = loc(fused[#loc185, #loc186])
#loc275 = loc(fused[#loc187, #loc188])
#loc276 = loc(fused[#loc191, #loc189])
#loc277 = loc(fused[#loc192, #loc193])
#loc278 = loc(fused[#loc195, #loc193])
#loc279 = loc(fused[#loc197, #loc196])
#loc280 = loc(fused[#loc198, #loc199])
#loc281 = loc(fused[#loc201, #loc199])
#loc282 = loc(fused[#loc202, #loc203])
