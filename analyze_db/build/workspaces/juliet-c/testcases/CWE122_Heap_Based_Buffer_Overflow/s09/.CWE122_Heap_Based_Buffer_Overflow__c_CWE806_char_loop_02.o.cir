!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc222)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc223)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc224)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc225)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc226)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc228)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc229)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc230)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc231)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc234)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc28)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc235)
    } loc(#loc233)
    cir.scope {
      %8 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
      cir.if %9 {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
        %12 = cir.const #cir.int<65> : !s32i loc(#loc34)
        %13 = cir.const #cir.int<100> : !s32i loc(#loc35)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc35)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc35)
        cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc238)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc39)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
        %20 = cir.const #cir.int<100> : !s32i loc(#loc41)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc41)
        %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc43)
        cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc239)
      } loc(#loc237)
    } loc(#loc236)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc241)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc242)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc243)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc241)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc241)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc51)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc51)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc244)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc57)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc246)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc247)
          cir.condition(%30) loc(#loc61)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc65)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc66)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc67)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc67)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc249)
          } loc(#loc248)
          cir.yield loc(#loc56)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc68)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc69)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc250)
          cir.yield loc(#loc245)
        } loc(#loc245)
      } loc(#loc245)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc70)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc71)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc71)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc73)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc73)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc251)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc76)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc77)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
    } loc(#loc240)
    cir.return loc(#loc12)
  } loc(#loc227)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc253)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc80)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc254)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc82)
    cir.return loc(#loc79)
  } loc(#loc252)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc84)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc256)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc89)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc90)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc257)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc258)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc259)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc260)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc98)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc262)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc100)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc101)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc102)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
      } loc(#loc263)
    } loc(#loc261)
    cir.scope {
      %8 = cir.const #cir.int<0> : !s32i loc(#loc105)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc105)
      cir.if %9 {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc84)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc84)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc109)
      } else {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc110)
        %12 = cir.const #cir.int<65> : !s32i loc(#loc111)
        %13 = cir.const #cir.int<50> : !s32i loc(#loc112)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc113)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc112)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc112)
        cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc266)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc116)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc116)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
        %20 = cir.const #cir.int<50> : !s32i loc(#loc118)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc118)
        %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc120)
        cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc267)
      } loc(#loc265)
    } loc(#loc264)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc269)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc270)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc271)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc269)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc269)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc128)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc128)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc272)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc134)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc134)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc274)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc136)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc137)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc275)
          cir.condition(%30) loc(#loc138)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc141)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc142)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc140)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc143)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc144)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc144)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc277)
          } loc(#loc276)
          cir.yield loc(#loc133)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc145)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc146)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc278)
          cir.yield loc(#loc273)
        } loc(#loc273)
      } loc(#loc273)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc147)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc147)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc148)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc149)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc148)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc150)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc150)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc279)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc152)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc153)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc154)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    } loc(#loc268)
    cir.return loc(#loc86)
  } loc(#loc255)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc281)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc159)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc160)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc160)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc282)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc283)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc284)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc168)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc287)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc170)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc171)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc172)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc170)
      } loc(#loc288)
    } loc(#loc286)
    cir.scope {
      %8 = cir.const #cir.int<1> : !s32i loc(#loc175)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc175)
      cir.if %9 {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc177)
        %12 = cir.const #cir.int<65> : !s32i loc(#loc178)
        %13 = cir.const #cir.int<50> : !s32i loc(#loc179)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc180)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc179)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc179)
        cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc291)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc183)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc183)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
        %20 = cir.const #cir.int<50> : !s32i loc(#loc185)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc186)
        %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc185)
        %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc187)
        cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc292)
      } loc(#loc290)
    } loc(#loc289)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc294)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc295)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc296)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc294)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc294)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc195)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc195)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc297)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc201)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc201)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc299)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc203)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc204)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc300)
          cir.condition(%30) loc(#loc205)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc207)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc208)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc209)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc207)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc210)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc211)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc211)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc302)
          } loc(#loc301)
          cir.yield loc(#loc200)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc212)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc213)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc303)
          cir.yield loc(#loc298)
        } loc(#loc298)
      } loc(#loc298)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc214)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc214)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc215)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc216)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc215)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc217)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc217)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc304)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc218)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc219)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc220)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc221)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc221)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc220)
    } loc(#loc293)
    cir.return loc(#loc156)
  } loc(#loc280)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":47:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":26:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":26:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":26:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":26:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":26:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":27:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":27:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":27:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":27:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":27:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":27:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":27:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":33:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":28:8)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":29:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":31:16)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":31:22)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":31:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":31:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":31:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":31:32)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":32:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":32:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":32:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":32:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":32:19)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":34:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":46:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":35:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":35:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":36:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":36:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":36:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":37:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":37:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":37:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":37:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":39:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":42:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":39:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":39:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":39:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":39:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":39:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":40:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":41:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":41:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":41:29)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":41:18)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":41:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":39:35)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":39:34)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":43:22)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":43:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":43:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":43:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":44:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":44:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":45:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":45:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":112:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":116:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":114:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":114:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":115:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":115:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":62:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":54:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":83:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":56:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":56:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":57:20)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":57:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":57:31)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":57:42)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":57:43)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":57:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":58:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":58:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":58:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":58:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":58:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":58:24)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":58:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":58:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":59:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":69:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":59:8)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":60:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":63:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":65:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":62:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":67:16)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":67:22)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":67:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":67:30)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":67:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":67:31)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":68:22)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":68:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":68:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":68:17)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":68:18)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":70:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":82:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":71:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":71:25)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":72:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":72:16)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":72:19)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":73:19)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":73:26)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":73:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":73:30)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":75:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":78:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":75:18)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":75:14)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":75:21)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":75:25)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":75:23)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":76:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":77:23)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":77:28)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":77:29)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":77:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":77:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":75:35)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":75:34)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":79:22)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":79:14)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":79:17)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":79:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":80:19)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":80:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":81:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":81:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":86:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":110:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":88:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":88:12)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":89:20)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":89:27)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":89:31)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":89:42)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":89:43)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":89:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":90:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":90:33)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":90:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":90:17)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":90:23)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":90:24)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":90:30)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":90:29)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":91:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":96:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":91:8)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":92:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":94:16)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":94:22)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":94:27)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":94:30)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":94:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":94:31)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":95:22)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":95:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":95:14)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":95:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":95:18)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":97:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":109:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":98:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":98:25)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":99:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":99:16)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":99:19)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":100:19)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":100:26)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":100:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":100:30)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":102:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":105:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":102:18)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":102:14)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":102:21)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":102:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":102:23)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":103:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":104:23)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":104:28)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":104:29)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":104:18)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":104:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":102:35)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":102:34)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":106:22)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":106:14)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":106:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":106:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":107:19)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":107:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":108:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c":108:14)
#loc222 = loc(fused[#loc1, #loc2])
#loc223 = loc(fused[#loc3, #loc4])
#loc224 = loc(fused[#loc5, #loc6])
#loc225 = loc(fused[#loc7, #loc8])
#loc226 = loc(fused[#loc9, #loc10])
#loc227 = loc(fused[#loc11, #loc12])
#loc228 = loc(fused[#loc13, #loc14])
#loc229 = loc(fused[#loc17, #loc18])
#loc230 = loc(fused[#loc16, #loc18])
#loc231 = loc(fused[#loc15, #loc19])
#loc232 = loc(fused[#loc20, #loc19])
#loc233 = loc(fused[#loc21, #loc22])
#loc234 = loc(fused[#loc23, #loc24])
#loc235 = loc(fused[#loc25, #loc22])
#loc236 = loc(fused[#loc29, #loc30])
#loc237 = loc(fused[#loc32, #loc30])
#loc238 = loc(fused[#loc37, #loc38])
#loc239 = loc(fused[#loc40, #loc39])
#loc240 = loc(fused[#loc44, #loc45])
#loc241 = loc(fused[#loc46, #loc47])
#loc242 = loc(fused[#loc48, #loc49])
#loc243 = loc(fused[#loc48, #loc50])
#loc244 = loc(fused[#loc53, #loc54])
#loc245 = loc(fused[#loc55, #loc56])
#loc246 = loc(fused[#loc58, #loc57])
#loc247 = loc(fused[#loc59, #loc60])
#loc248 = loc(fused[#loc62, #loc56])
#loc249 = loc(fused[#loc67, #loc65])
#loc250 = loc(fused[#loc69, #loc68])
#loc251 = loc(fused[#loc73, #loc70])
#loc252 = loc(fused[#loc78, #loc79])
#loc253 = loc(fused[#loc80, #loc81])
#loc254 = loc(fused[#loc82, #loc83])
#loc255 = loc(fused[#loc85, #loc86])
#loc256 = loc(fused[#loc87, #loc88])
#loc257 = loc(fused[#loc91, #loc92])
#loc258 = loc(fused[#loc90, #loc92])
#loc259 = loc(fused[#loc89, #loc93])
#loc260 = loc(fused[#loc94, #loc93])
#loc261 = loc(fused[#loc95, #loc96])
#loc262 = loc(fused[#loc97, #loc98])
#loc263 = loc(fused[#loc99, #loc96])
#loc264 = loc(fused[#loc103, #loc104])
#loc265 = loc(fused[#loc106, #loc107, #loc108, #loc104])
#loc266 = loc(fused[#loc114, #loc115])
#loc267 = loc(fused[#loc117, #loc116])
#loc268 = loc(fused[#loc121, #loc122])
#loc269 = loc(fused[#loc123, #loc124])
#loc270 = loc(fused[#loc125, #loc126])
#loc271 = loc(fused[#loc125, #loc127])
#loc272 = loc(fused[#loc130, #loc131])
#loc273 = loc(fused[#loc132, #loc133])
#loc274 = loc(fused[#loc135, #loc134])
#loc275 = loc(fused[#loc136, #loc137])
#loc276 = loc(fused[#loc139, #loc133])
#loc277 = loc(fused[#loc144, #loc142])
#loc278 = loc(fused[#loc146, #loc145])
#loc279 = loc(fused[#loc150, #loc147])
#loc280 = loc(fused[#loc155, #loc156])
#loc281 = loc(fused[#loc157, #loc158])
#loc282 = loc(fused[#loc161, #loc162])
#loc283 = loc(fused[#loc160, #loc162])
#loc284 = loc(fused[#loc159, #loc163])
#loc285 = loc(fused[#loc164, #loc163])
#loc286 = loc(fused[#loc165, #loc166])
#loc287 = loc(fused[#loc167, #loc168])
#loc288 = loc(fused[#loc169, #loc166])
#loc289 = loc(fused[#loc173, #loc174])
#loc290 = loc(fused[#loc176, #loc174])
#loc291 = loc(fused[#loc181, #loc182])
#loc292 = loc(fused[#loc184, #loc183])
#loc293 = loc(fused[#loc188, #loc189])
#loc294 = loc(fused[#loc190, #loc191])
#loc295 = loc(fused[#loc192, #loc193])
#loc296 = loc(fused[#loc192, #loc194])
#loc297 = loc(fused[#loc197, #loc198])
#loc298 = loc(fused[#loc199, #loc200])
#loc299 = loc(fused[#loc202, #loc201])
#loc300 = loc(fused[#loc203, #loc204])
#loc301 = loc(fused[#loc206, #loc200])
#loc302 = loc(fused[#loc211, #loc209])
#loc303 = loc(fused[#loc213, #loc212])
#loc304 = loc(fused[#loc217, #loc214])
