!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":29:26)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":61:26)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc69)
  cir.func private @printUnsignedLine(!u32i) loc(#loc70)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc72)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc73)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc11)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc74)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc13)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc13)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc13)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc13)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc13)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc13)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc13)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc13)
    cir.br ^bb3(%19 : !u32i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc13)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc13)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc13)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc13)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc13)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc13)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc13)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc13)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc13)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc13)
    cir.br ^bb3(%35 : !u32i) loc(#loc13)
  ^bb3(%36: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":29:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc13)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc13)
    cir.store %38, %1 : !u32i, !cir.ptr<!u32i> loc(#loc75)
    cir.br ^bb5 loc(#loc76)
  ^bb5:  // pred: ^bb4
    %39 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc17)
    %40 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc8)
    %41 = cir.binop(mul, %39, %40) : !u32i loc(#loc77)
    cir.store %41, %0 : !u32i, !cir.ptr<!u32i> loc(#loc72)
    %42 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc18)
    cir.call @printUnsignedLine(%42) : (!u32i) -> () loc(#loc19)
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc71)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc79)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc80)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc78)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc82)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc83)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc32)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc84)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc34)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc34)
    cir.store %5, %1 : !u32i, !cir.ptr<!u32i> loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc38)
    %7 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc29)
    %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc87)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc82)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc39)
    cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc40)
    cir.br ^bb2 loc(#loc37)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc27)
  } loc(#loc81)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc41)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc51)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc92)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc53)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc53)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc53)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc53)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc53)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc53)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc53)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc53)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc53)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc53)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc53)
    cir.br ^bb3(%19 : !u32i) loc(#loc53)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc53)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc53)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc53)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc53)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc53)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc53)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc53)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc53)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc53)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc53)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc53)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc53)
    cir.br ^bb3(%35 : !u32i) loc(#loc53)
  ^bb3(%36: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":61:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc53)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc53)
    cir.store %38, %1 : !u32i, !cir.ptr<!u32i> loc(#loc93)
    cir.br ^bb5 loc(#loc94)
  ^bb5:  // pred: ^bb4
    %39 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc57)
    %40 = cir.cast(integral, %39 : !u32i), !s64i loc(#loc57)
    %41 = cir.cast(integral, %40 : !s64i), !s32i loc(#loc57)
    %42 = cir.abs %41 poison : !s32i loc(#loc58)
    %43 = cir.cast(integral, %42 : !s32i), !s64i loc(#loc58)
    %44 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc59)
    %45 = cir.const #cir.int<2147483647> : !s32i loc(#loc60)
    %46 = cir.cast(integral, %45 : !s32i), !u32i loc(#loc60)
    %47 = cir.const #cir.int<2> : !u32i loc(#loc60)
    %48 = cir.binop(mul, %46, %47) : !u32i loc(#loc60)
    %49 = cir.const #cir.int<1> : !u32i loc(#loc60)
    %50 = cir.binop(add, %48, %49) : !u32i loc(#loc60)
    %51 = cir.cast(int_to_float, %50 : !u32i), !cir.double loc(#loc60)
    %52 = cir.call @sqrt(%51) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc59)
    %53 = cir.cast(float_to_int, %52 : !cir.double), !s64i loc(#loc59)
    %54 = cir.cmp(lt, %43, %53) : !s64i, !cir.bool loc(#loc95)
    cir.brcond %54 ^bb6, ^bb7 loc(#loc96)
  ^bb6:  // pred: ^bb5
    %55 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc65)
    %56 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc48)
    %57 = cir.binop(mul, %55, %56) : !u32i loc(#loc97)
    cir.store %57, %0 : !u32i, !cir.ptr<!u32i> loc(#loc90)
    %58 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc66)
    cir.call @printUnsignedLine(%58) : (!u32i) -> () loc(#loc67)
    cir.br ^bb8 loc(#loc63)
  ^bb7:  // pred: ^bb5
    %59 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc56)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc46)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":35:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":32:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":32:38)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":26:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":27:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":30:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":34:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":32:31)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":33:27)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":33:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":74:1)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":78:1)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":76:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":76:13)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":77:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":77:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":42:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":53:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":50:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":50:38)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":44:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":44:18)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":45:12)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":45:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":47:12)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":47:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":48:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":52:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":50:31)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":51:27)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":51:9)
#loc41 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":70:19)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":56:1)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":72:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":65:9)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":65:38)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":58:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":58:18)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":59:12)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":59:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":61:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":63:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":71:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":63:19)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":63:9)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":63:33)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":63:46)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":63:54)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":64:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":67:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":69:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":65:31)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":66:27)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":66:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_01.c":70:9)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc9, #loc10])
#loc74 = loc(fused[#loc12, #loc11])
#loc75 = loc(fused[#loc14, #loc13])
#loc76 = loc(fused[#loc15, #loc16])
#loc77 = loc(fused[#loc17, #loc8])
#loc78 = loc(fused[#loc20, #loc21])
#loc79 = loc(fused[#loc22, #loc23])
#loc80 = loc(fused[#loc24, #loc25])
#loc81 = loc(fused[#loc26, #loc27])
#loc82 = loc(fused[#loc28, #loc29])
#loc83 = loc(fused[#loc30, #loc31])
#loc84 = loc(fused[#loc33, #loc32])
#loc85 = loc(fused[#loc35, #loc34])
#loc86 = loc(fused[#loc36, #loc37])
#loc87 = loc(fused[#loc38, #loc29])
#loc88 = loc(fused[#loc42, #loc43])
#loc89 = loc(fused[#loc45, #loc46])
#loc90 = loc(fused[#loc47, #loc48])
#loc91 = loc(fused[#loc49, #loc50])
#loc92 = loc(fused[#loc52, #loc51])
#loc93 = loc(fused[#loc54, #loc53])
#loc94 = loc(fused[#loc55, #loc56])
#loc95 = loc(fused[#loc58, #loc61])
#loc96 = loc(fused[#loc62, #loc63, #loc64, #loc56])
#loc97 = loc(fused[#loc65, #loc48])
