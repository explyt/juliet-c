!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":21:21)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":21:27)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":56:25)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":56:31)
#loc103 = loc(fused[#loc5, #loc6])
#loc123 = loc(fused[#loc56, #loc57])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc101)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc103)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc105)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc105)
      cir.store %2, %1 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc105)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc107)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc18)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc18)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc109)
          cir.for : cond {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc20)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc21)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc21)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc110)
            cir.condition(%13) loc(#loc22)
          } body {
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc24)
              %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc25)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc25)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc25)
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc28)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc112)
            } loc(#loc111)
            cir.yield loc(#loc17)
          } step {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc31)
            cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc113)
            cir.yield loc(#loc108)
          } loc(#loc108)
        } loc(#loc108)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc33)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc34)
        %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc35)
      } loc(#loc106)
    } loc(#loc104)
    cir.return loc(#loc4)
  } loc(#loc102)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc115)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc116)
    %2 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc117)
    %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc118)
    %4 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc41)
    cir.store %4, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>> loc(#loc116)
    %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 50>>), !cir.ptr<!s32i> loc(#loc46)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc119)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc48)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc48)
    cir.return loc(#loc37)
  } loc(#loc114)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    cir.return loc(#loc51)
  } loc(#loc120)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc56, #loc57])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc123)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc58)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc125)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc125)
      cir.store %2, %1 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc125)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc127)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc69)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc69)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc129)
          cir.for : cond {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc72)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc72)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc130)
            cir.condition(%13) loc(#loc73)
          } body {
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc75)
              %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc76)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc76)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc76)
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc78)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc79)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc132)
            } loc(#loc131)
            cir.yield loc(#loc68)
          } step {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc81)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc82)
            cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc133)
            cir.yield loc(#loc128)
          } loc(#loc128)
        } loc(#loc128)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc84)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc85)
        %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc83)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc86)
      } loc(#loc126)
    } loc(#loc124)
    cir.return loc(#loc55)
  } loc(#loc122)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc137)
    %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc138)
    %4 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc92)
    cir.store %4, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>> loc(#loc136)
    %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc97)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc99)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc99)
    cir.return loc(#loc88)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":35:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":22:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":34:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":24:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":24:29)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":25:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":33:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":26:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":26:20)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":31:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:18)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:25)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":29:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:34)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:27)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:17)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:35)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:35)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:34)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":32:26)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":32:31)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":32:32)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":32:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":37:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":49:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":39:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":39:11)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":41:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":41:31)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":42:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":42:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":43:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":43:27)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":46:12)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":46:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":48:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":48:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":83:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":86:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":85:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":85:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":56:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":70:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":57:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":58:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":69:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":59:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":59:29)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":60:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":68:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":61:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":61:20)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:13)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":66:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:18)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:25)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:29)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:27)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":64:13)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:34)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:27)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:17)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:22)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:23)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:35)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:35)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:34)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":67:26)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":67:31)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":67:32)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":67:13)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":72:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":81:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":74:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":74:11)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":75:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":75:31)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":76:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":76:25)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":77:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":77:27)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":79:12)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":79:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":80:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":80:13)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc8, #loc9])
#loc105 = loc(fused[#loc10, #loc11])
#loc106 = loc(fused[#loc12, #loc13])
#loc107 = loc(fused[#loc14, #loc15])
#loc108 = loc(fused[#loc16, #loc17])
#loc109 = loc(fused[#loc19, #loc18])
#loc110 = loc(fused[#loc20, #loc21])
#loc111 = loc(fused[#loc23, #loc17])
#loc112 = loc(fused[#loc26, #loc29])
#loc113 = loc(fused[#loc31, #loc30])
#loc114 = loc(fused[#loc36, #loc37])
#loc115 = loc(fused[#loc38, #loc39])
#loc116 = loc(fused[#loc40, #loc41])
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc44, #loc45])
#loc119 = loc(fused[#loc47, #loc46])
#loc120 = loc(fused[#loc50, #loc51])
#loc121 = loc(fused[#loc52, #loc53])
#loc122 = loc(fused[#loc54, #loc55])
#loc124 = loc(fused[#loc59, #loc60])
#loc125 = loc(fused[#loc61, #loc62])
#loc126 = loc(fused[#loc63, #loc64])
#loc127 = loc(fused[#loc65, #loc66])
#loc128 = loc(fused[#loc67, #loc68])
#loc129 = loc(fused[#loc70, #loc69])
#loc130 = loc(fused[#loc71, #loc72])
#loc131 = loc(fused[#loc74, #loc68])
#loc132 = loc(fused[#loc77, #loc80])
#loc133 = loc(fused[#loc82, #loc81])
#loc134 = loc(fused[#loc87, #loc88])
#loc135 = loc(fused[#loc89, #loc90])
#loc136 = loc(fused[#loc91, #loc92])
#loc137 = loc(fused[#loc93, #loc94])
#loc138 = loc(fused[#loc95, #loc96])
#loc139 = loc(fused[#loc98, #loc97])
