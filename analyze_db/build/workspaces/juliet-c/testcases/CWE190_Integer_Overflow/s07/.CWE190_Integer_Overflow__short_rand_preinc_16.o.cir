!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":29:23)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":56:23)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__short_rand_preinc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc98)
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_preinc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc101)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc102)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc104)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb3, ^bb10 loc(#loc15)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc105)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc17)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb7(%21 : !u32i) loc(#loc17)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb7(%37 : !u32i) loc(#loc17)
  ^bb7(%38: !u32i loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":29:23)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc17)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc17)
    cir.store %40, %1 : !s16i, !cir.ptr<!s16i> loc(#loc106)
    cir.br ^bb10 loc(#loc19)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc14)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc14)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc107)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc107)
  ^bb13:  // 2 preds: ^bb12, ^bb18
    %41 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %42 ^bb14, ^bb19 loc(#loc22)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc108)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc109)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc26)
    %44 = cir.unary(inc, %43) : !s16i, !s16i loc(#loc26)
    cir.store %44, %1 : !s16i, !cir.ptr<!s16i> loc(#loc110)
    %45 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    cir.store %45, %0 : !s16i, !cir.ptr<!s16i> loc(#loc101)
    %46 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc28)
    %47 = cir.cast(integral, %46 : !s16i), !s32i loc(#loc28)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc29)
    cir.br ^bb17 loc(#loc25)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc30)
  ^bb18:  // no predecessors
    cir.br ^bb13 loc(#loc21)
  ^bb19:  // 2 preds: ^bb13, ^bb17
    cir.br ^bb20 loc(#loc21)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc6)
  } loc(#loc100)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_preinc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc111)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc116)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc117)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc46)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc118)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc119)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %4 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc50)
    cir.brcond %5 ^bb3, ^bb10 loc(#loc50)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc52)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc52)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc52)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc52)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc52)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc52)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc52)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc52)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc52)
    cir.br ^bb7(%21 : !u32i) loc(#loc52)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc52)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc52)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc52)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc52)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc52)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc52)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc52)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc52)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc52)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc52)
    cir.br ^bb7(%37 : !u32i) loc(#loc52)
  ^bb7(%38: !u32i loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":56:23)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc52)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc52)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc52)
    cir.store %40, %1 : !s16i, !cir.ptr<!s16i> loc(#loc121)
    cir.br ^bb10 loc(#loc54)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc49)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc49)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc122)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc122)
  ^bb13:  // 2 preds: ^bb12, ^bb21
    %41 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %42 ^bb14, ^bb22 loc(#loc57)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc123)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc124)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc61)
    %44 = cir.cast(integral, %43 : !s16i), !s32i loc(#loc61)
    %45 = cir.const #cir.int<32767> : !s32i loc(#loc62)
    %46 = cir.cmp(lt, %44, %45) : !s32i, !cir.bool loc(#loc125)
    cir.brcond %46 ^bb17, ^bb18 loc(#loc126)
  ^bb17:  // pred: ^bb16
    %47 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc66)
    %48 = cir.unary(inc, %47) : !s16i, !s16i loc(#loc66)
    cir.store %48, %1 : !s16i, !cir.ptr<!s16i> loc(#loc127)
    %49 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc43)
    cir.store %49, %0 : !s16i, !cir.ptr<!s16i> loc(#loc116)
    %50 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc68)
    %51 = cir.cast(integral, %50 : !s16i), !s32i loc(#loc68)
    cir.call @printIntLine(%51) : (!s32i) -> () loc(#loc69)
    cir.br ^bb19 loc(#loc64)
  ^bb18:  // pred: ^bb16
    %52 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc39)
    %53 = cir.cast(array_to_ptrdecay, %52 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%53) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    cir.br ^bb19 loc(#loc60)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc60)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc71)
  ^bb21:  // no predecessors
    cir.br ^bb13 loc(#loc56)
  ^bb22:  // 2 preds: ^bb13, ^bb20
    cir.br ^bb23 loc(#loc56)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc41)
  } loc(#loc115)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc129)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc130)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc78)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc131)
    cir.br ^bb1 loc(#loc132)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc132)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %4 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %5 ^bb3, ^bb6 loc(#loc82)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc133)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<2> : !s32i loc(#loc84)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc84)
    cir.store %7, %1 : !s16i, !cir.ptr<!s16i> loc(#loc134)
    cir.br ^bb6 loc(#loc86)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc81)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc81)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc135)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc135)
  ^bb9:  // 2 preds: ^bb8, ^bb14
    %8 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %9 ^bb10, ^bb15 loc(#loc89)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc136)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc137)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc93)
    %11 = cir.unary(inc, %10) : !s16i, !s16i loc(#loc93)
    cir.store %11, %1 : !s16i, !cir.ptr<!s16i> loc(#loc138)
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc75)
    cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc129)
    %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc95)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc95)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc96)
    cir.br ^bb13 loc(#loc92)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc97)
  ^bb14:  // no predecessors
    cir.br ^bb9 loc(#loc88)
  ^bb15:  // 2 preds: ^bb9, ^bb13
    cir.br ^bb16 loc(#loc88)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc73)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__short_rand_preinc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":42:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":37:13)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":37:28)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":24:11)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":25:12)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":31:5)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":26:11)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":29:9)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":32:5)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":41:5)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":32:11)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":33:5)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":34:9)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":39:9)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":36:13)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":36:15)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":38:26)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":38:13)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":40:9)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":99:1)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":103:1)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":101:5)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":101:13)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":102:5)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":102:13)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":70:23)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":49:1)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":74:1)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":65:13)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":65:28)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":51:5)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":51:11)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":52:12)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":52:5)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":53:5)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":58:5)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":53:11)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":54:5)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":56:9)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":57:9)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":59:5)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":73:5)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":59:11)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":60:5)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":62:9)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":71:9)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":62:13)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":62:20)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":63:9)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":67:9)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":69:9)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":64:13)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":64:15)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":66:26)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":66:13)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":70:13)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":72:9)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":77:1)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":97:1)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":92:13)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":92:28)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":79:5)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":79:11)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":80:12)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":80:5)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":81:5)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":86:5)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":81:11)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":82:5)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":84:16)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":84:9)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":85:9)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":87:5)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":96:5)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":87:11)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":88:5)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":89:9)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":94:9)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":91:13)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":91:15)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":93:26)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":93:13)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_preinc_16.c":95:9)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc5, #loc6])
#loc101 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc9, #loc10])
#loc103 = loc(fused[#loc12, #loc11])
#loc104 = loc(fused[#loc13, #loc14])
#loc105 = loc(fused[#loc16, #loc14])
#loc106 = loc(fused[#loc18, #loc17])
#loc107 = loc(fused[#loc20, #loc21])
#loc108 = loc(fused[#loc23, #loc21])
#loc109 = loc(fused[#loc24, #loc25])
#loc110 = loc(fused[#loc26, #loc27])
#loc111 = loc(fused[#loc31, #loc32])
#loc112 = loc(fused[#loc33, #loc34])
#loc113 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc40, #loc41])
#loc116 = loc(fused[#loc42, #loc43])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc47, #loc46])
#loc119 = loc(fused[#loc48, #loc49])
#loc120 = loc(fused[#loc51, #loc49])
#loc121 = loc(fused[#loc53, #loc52])
#loc122 = loc(fused[#loc55, #loc56])
#loc123 = loc(fused[#loc58, #loc56])
#loc124 = loc(fused[#loc59, #loc60])
#loc125 = loc(fused[#loc61, #loc62])
#loc126 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc127 = loc(fused[#loc66, #loc67])
#loc128 = loc(fused[#loc72, #loc73])
#loc129 = loc(fused[#loc74, #loc75])
#loc130 = loc(fused[#loc76, #loc77])
#loc131 = loc(fused[#loc79, #loc78])
#loc132 = loc(fused[#loc80, #loc81])
#loc133 = loc(fused[#loc83, #loc81])
#loc134 = loc(fused[#loc85, #loc84])
#loc135 = loc(fused[#loc87, #loc88])
#loc136 = loc(fused[#loc90, #loc88])
#loc137 = loc(fused[#loc91, #loc92])
#loc138 = loc(fused[#loc93, #loc94])
