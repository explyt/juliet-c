!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":27:21)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":27:25)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":71:26)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":71:30)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":116:26)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":116:30)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":156:25)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":156:29)
#loc218 = loc(fused[#loc16, #loc17])
#loc239 = loc(fused[#loc73, #loc74])
#loc258 = loc(fused[#loc130, #loc131])
#loc277 = loc(fused[#loc185, #loc186])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc211)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc212)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc215)
  cir.func private @printIntLine(!s32i) loc(#loc216)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc16, #loc17])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc218)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc18)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc215)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc21)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc27)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc222)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc29)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.return loc(#loc15)
  } loc(#loc217)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc227)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc227)
      cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc227)
      cir.scope {
        %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc42)
        %8 = cir.const #cir.int<3> : !s32i loc(#loc43)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc43)
        %10 = cir.const #cir.int<4> : !u64i loc(#loc43)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc43)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc43)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc43)
        %14 = cir.binop(add, %11, %13) : !u64i loc(#loc43)
        %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc43)
        %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc212)
        %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc44)
        %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc45)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc46)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc46)
        %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc229)
        cir.if %21 {
          %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc50)
          %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc51)
          cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
        } else {
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc54)
        } loc(#loc230)
      } loc(#loc228)
    } loc(#loc226)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc215)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.call @badSink(%4) : (!s32i) -> () loc(#loc58)
    cir.return loc(#loc31)
  } loc(#loc223)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc234)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc235)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc236)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc60)
  } loc(#loc233)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc237)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc70)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc73, #loc74])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc239)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc237)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc78)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc82)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc86)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc243)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc245)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc91)
            %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc92)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc245)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc94)
          } else {
            %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc70)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc70)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc95)
          } loc(#loc244)
        } loc(#loc242)
      } loc(#loc241)
    } loc(#loc240)
    cir.return loc(#loc72)
  } loc(#loc238)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc247)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc100)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    cir.scope {
      %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc250)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc250)
      cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc250)
      cir.scope {
        %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
        %8 = cir.const #cir.int<3> : !s32i loc(#loc109)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc109)
        %10 = cir.const #cir.int<4> : !u64i loc(#loc109)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc109)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc109)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc109)
        %14 = cir.binop(add, %11, %13) : !u64i loc(#loc109)
        %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc109)
        %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc212)
        %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc110)
        %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc111)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc112)
        %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc252)
        cir.if %21 {
          %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
          %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc117)
          cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
        } else {
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc120)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc120)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc121)
        } loc(#loc253)
      } loc(#loc251)
    } loc(#loc249)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %3 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc237)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    cir.call @goodB2G1Sink(%4) : (!s32i) -> () loc(#loc125)
    cir.return loc(#loc97)
  } loc(#loc246)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc256)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc130, #loc131])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc258)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc256)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc135)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc135)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc140)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc262)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc264)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc145)
            %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc146)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc264)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc148)
          } else {
            %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc149)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc149)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc150)
          } loc(#loc263)
        } loc(#loc261)
      } loc(#loc260)
    } loc(#loc259)
    cir.return loc(#loc129)
  } loc(#loc257)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc155)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.scope {
      %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc269)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc269)
      cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc269)
      cir.scope {
        %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc163)
        %8 = cir.const #cir.int<3> : !s32i loc(#loc164)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc164)
        %10 = cir.const #cir.int<4> : !u64i loc(#loc164)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc164)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc164)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc164)
        %14 = cir.binop(add, %11, %13) : !u64i loc(#loc164)
        %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc164)
        %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc212)
        %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc165)
        %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc166)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc167)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc167)
        %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc271)
        cir.if %21 {
          %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc171)
          %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc172)
          cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
        } else {
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc175)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc175)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc176)
        } loc(#loc272)
      } loc(#loc270)
    } loc(#loc268)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc177)
    %3 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc256)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.call @goodB2G2Sink(%4) : (!s32i) -> () loc(#loc180)
    cir.return loc(#loc152)
  } loc(#loc265)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc275)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc185, #loc186])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc277)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc275)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc190)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc190)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc281)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc195)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc196)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc281)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc197)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc198)
        } loc(#loc280)
      } loc(#loc279)
    } loc(#loc278)
    cir.return loc(#loc184)
  } loc(#loc276)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc283)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc203)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc205)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc207)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc275)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc286)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.call @goodG2BSink(%5) : (!s32i) -> () loc(#loc210)
    cir.return loc(#loc200)
  } loc(#loc282)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":54:23)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":25:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":25:24)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":27:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":37:1)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":28:1)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":36:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":29:8)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":30:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":31:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":35:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":33:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":33:33)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":33:26)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":34:26)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":34:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":39:1)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":59:1)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":41:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":41:9)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":43:12)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":43:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":44:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":56:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":45:9)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":45:45)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":47:9)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":55:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":47:19)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":47:32)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":47:49)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":47:13)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":47:59)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":48:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":51:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":53:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":50:25)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":50:20)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":50:13)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":50:36)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":54:13)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":57:17)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":57:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":58:13)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":58:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":179:1)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":184:1)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":181:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":181:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":182:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":182:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":183:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":183:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":66:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":66:29)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":76:19)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":88:23)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":71:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":91:1)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":72:1)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":73:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":90:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":73:8)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":74:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":77:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":79:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":76:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":81:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":89:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":81:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":81:20)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":82:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":85:9)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":87:9)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":83:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":83:33)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":83:26)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":84:26)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":84:13)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":88:13)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":93:1)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":113:1)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":95:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":95:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":97:12)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":97:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":98:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":110:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":99:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":99:45)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":101:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":109:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":101:19)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":101:32)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":101:49)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":101:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":101:59)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":102:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":105:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":107:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":104:25)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":104:20)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":104:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":104:36)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":108:23)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":108:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":111:22)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":111:5)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":112:18)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":112:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":67:1)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":67:29)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":116:1)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":131:1)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":117:1)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":118:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":130:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":118:8)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":119:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":121:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":129:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":121:13)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":121:20)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":122:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":125:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":127:9)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":123:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":123:33)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":123:26)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":124:26)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":124:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":128:23)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":128:13)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":133:1)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":153:1)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":135:5)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":135:9)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":137:12)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":137:5)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":138:5)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":150:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":139:9)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":139:45)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":141:9)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":149:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":141:19)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":141:32)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":141:49)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":141:13)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":141:59)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":142:9)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":145:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":147:9)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":144:25)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":144:20)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":144:13)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":144:36)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":148:23)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":148:13)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":151:22)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":151:5)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":152:18)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":152:5)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":68:1)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":68:28)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":156:1)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":166:1)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":157:1)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":158:5)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":165:5)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":158:8)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":159:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":160:9)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":164:9)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":162:13)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":162:33)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":162:26)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":163:26)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":163:13)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":168:1)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":177:1)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":170:5)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":170:9)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":172:12)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":172:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":174:12)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":174:5)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":175:21)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":175:5)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":176:17)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_add_21.c":176:5)
#loc211 = loc(fused[#loc1, #loc2])
#loc212 = loc(fused[#loc3, #loc4])
#loc213 = loc(fused[#loc5, #loc6])
#loc214 = loc(fused[#loc7, #loc8])
#loc215 = loc(fused[#loc10, #loc11])
#loc216 = loc(fused[#loc12, #loc13])
#loc217 = loc(fused[#loc14, #loc15])
#loc219 = loc(fused[#loc19, #loc20])
#loc220 = loc(fused[#loc22, #loc20])
#loc221 = loc(fused[#loc23, #loc24])
#loc222 = loc(fused[#loc25, #loc26])
#loc223 = loc(fused[#loc30, #loc31])
#loc224 = loc(fused[#loc32, #loc33])
#loc225 = loc(fused[#loc35, #loc34])
#loc226 = loc(fused[#loc36, #loc37])
#loc227 = loc(fused[#loc38, #loc39])
#loc228 = loc(fused[#loc40, #loc41])
#loc229 = loc(fused[#loc45, #loc46])
#loc230 = loc(fused[#loc47, #loc48, #loc49, #loc41])
#loc231 = loc(fused[#loc52, #loc53])
#loc232 = loc(fused[#loc56, #loc55])
#loc233 = loc(fused[#loc59, #loc60])
#loc234 = loc(fused[#loc61, #loc62])
#loc235 = loc(fused[#loc63, #loc64])
#loc236 = loc(fused[#loc65, #loc66])
#loc237 = loc(fused[#loc67, #loc68])
#loc238 = loc(fused[#loc71, #loc72])
#loc240 = loc(fused[#loc76, #loc77])
#loc241 = loc(fused[#loc79, #loc80, #loc81, #loc77])
#loc242 = loc(fused[#loc83, #loc84])
#loc243 = loc(fused[#loc85, #loc86])
#loc244 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc245 = loc(fused[#loc90, #loc91])
#loc246 = loc(fused[#loc96, #loc97])
#loc247 = loc(fused[#loc98, #loc99])
#loc248 = loc(fused[#loc101, #loc100])
#loc249 = loc(fused[#loc102, #loc103])
#loc250 = loc(fused[#loc104, #loc105])
#loc251 = loc(fused[#loc106, #loc107])
#loc252 = loc(fused[#loc111, #loc112])
#loc253 = loc(fused[#loc113, #loc114, #loc115, #loc107])
#loc254 = loc(fused[#loc118, #loc119])
#loc255 = loc(fused[#loc123, #loc122])
#loc256 = loc(fused[#loc126, #loc127])
#loc257 = loc(fused[#loc128, #loc129])
#loc259 = loc(fused[#loc133, #loc134])
#loc260 = loc(fused[#loc136, #loc134])
#loc261 = loc(fused[#loc137, #loc138])
#loc262 = loc(fused[#loc139, #loc140])
#loc263 = loc(fused[#loc141, #loc142, #loc143, #loc138])
#loc264 = loc(fused[#loc144, #loc145])
#loc265 = loc(fused[#loc151, #loc152])
#loc266 = loc(fused[#loc153, #loc154])
#loc267 = loc(fused[#loc156, #loc155])
#loc268 = loc(fused[#loc157, #loc158])
#loc269 = loc(fused[#loc159, #loc160])
#loc270 = loc(fused[#loc161, #loc162])
#loc271 = loc(fused[#loc166, #loc167])
#loc272 = loc(fused[#loc168, #loc169, #loc170, #loc162])
#loc273 = loc(fused[#loc173, #loc174])
#loc274 = loc(fused[#loc178, #loc177])
#loc275 = loc(fused[#loc181, #loc182])
#loc276 = loc(fused[#loc183, #loc184])
#loc278 = loc(fused[#loc188, #loc189])
#loc279 = loc(fused[#loc191, #loc189])
#loc280 = loc(fused[#loc192, #loc193])
#loc281 = loc(fused[#loc194, #loc195])
#loc282 = loc(fused[#loc199, #loc200])
#loc283 = loc(fused[#loc201, #loc202])
#loc284 = loc(fused[#loc204, #loc203])
#loc285 = loc(fused[#loc206, #loc205])
#loc286 = loc(fused[#loc208, #loc207])
