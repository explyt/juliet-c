!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":112:10)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":112:14)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":112:20)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":112:32)
#loc150 = loc(fused[#loc52, #loc53])
#loc151 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printIntLine(!s32i) loc(#loc133)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc12)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc137)
    cir.br ^bb1 loc(#loc138)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc16)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc14)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc18)
    cir.store %8, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
    cir.br ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb2
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc140)
  ^bb8:  // pred: ^bb7
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc135)
    cir.store %11, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc135)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc25)
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc26)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc26)
    %16 = cir.const #cir.int<10> : !s32i loc(#loc27)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc27)
    %18 = cir.const #cir.int<4> : !u64i loc(#loc141)
    %19 = cir.binop(mul, %17, %18) : !u64i loc(#loc142)
    cir.libc.memcpy %19 bytes from %15 to %13 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc143)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc34)
    %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc35)
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc7)
  } loc(#loc134)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc144)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc147)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc59)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.return %17 : !s32i loc(#loc154)
  } loc(#loc149)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc76)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc80)
    cir.br ^bb2 loc(#loc78)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc78)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc82)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb6 loc(#loc84)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<10> : !s32i loc(#loc85)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc85)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc85)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc85)
    %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc85)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc85)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc161)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc156)
    cir.store %13, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc156)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc90)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc91)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc91)
    %18 = cir.const #cir.int<10> : !s32i loc(#loc92)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc92)
    %20 = cir.const #cir.int<4> : !u64i loc(#loc162)
    %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc163)
    cir.libc.memcpy %21 bytes from %17 to %15 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc164)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc98)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc99)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc100)
    cir.br ^bb9 loc(#loc89)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc71)
  } loc(#loc155)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc107)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc168)
    cir.br ^bb1 loc(#loc169)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc111)
    cir.br ^bb2 loc(#loc109)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc109)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc112)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<10> : !s32i loc(#loc113)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc113)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc113)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc113)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc113)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc113)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
    cir.store %10, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc170)
    cir.br ^bb6 loc(#loc115)
  ^bb5:  // pred: ^bb2
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc116)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc116)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    cir.br ^bb6 loc(#loc118)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc110)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc171)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc166)
    cir.store %13, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc166)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc121)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc122)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc122)
    %18 = cir.const #cir.int<10> : !s32i loc(#loc123)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc123)
    %20 = cir.const #cir.int<4> : !u64i loc(#loc172)
    %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc173)
    cir.libc.memcpy %21 bytes from %17 to %15 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc174)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc130)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc131)
    cir.br ^bb9 loc(#loc120)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc102)
  } loc(#loc165)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":33:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":21:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":42:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":37:9)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":37:28)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":23:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":23:11)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":24:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":24:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":25:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":35:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":25:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":27:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":29:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":29:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":30:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":33:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":34:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":36:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":41:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":39:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":39:22)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":39:30)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":39:33)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":39:43)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":39:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":39:44)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:22)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:27)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:28)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":96:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":100:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":98:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":98:14)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":99:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":99:14)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":117:15)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":119:15)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":122:15)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":124:15)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":112:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":127:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":113:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":115:27)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":115:22)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":115:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":117:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":118:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":118:63)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":119:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":122:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":123:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":123:62)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":124:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":126:12)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":126:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":49:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":70:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":65:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":65:28)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":51:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":51:11)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":52:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":52:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":53:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":63:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":53:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":55:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":57:19)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":57:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":58:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":61:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":61:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":62:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":64:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":69:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":67:16)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":67:22)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":67:30)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":67:33)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":67:43)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":67:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":67:44)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":68:22)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":68:27)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":68:28)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":68:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":73:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":94:1)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":89:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":89:28)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":75:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":75:11)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":76:12)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":76:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":77:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":87:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":77:12)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":79:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":81:23)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":81:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":82:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":85:19)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":85:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":86:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":88:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":93:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":91:16)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":91:22)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":91:30)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":91:33)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":91:43)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":91:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":91:44)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":92:22)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":92:27)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":92:28)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c":92:9)
#loc132 = loc(fused[#loc1, #loc2])
#loc133 = loc(fused[#loc4, #loc5])
#loc134 = loc(fused[#loc6, #loc7])
#loc135 = loc(fused[#loc8, #loc9])
#loc136 = loc(fused[#loc10, #loc11])
#loc137 = loc(fused[#loc13, #loc12])
#loc138 = loc(fused[#loc14, #loc15])
#loc139 = loc(fused[#loc19, #loc18])
#loc140 = loc(fused[#loc23, #loc24])
#loc141 = loc(fused[#loc28, #loc29])
#loc142 = loc(fused[#loc27, #loc29])
#loc143 = loc(fused[#loc30, #loc31])
#loc144 = loc(fused[#loc36, #loc37])
#loc145 = loc(fused[#loc38, #loc39])
#loc146 = loc(fused[#loc40, #loc41])
#loc147 = loc(fused[#loc42, #loc43])
#loc148 = loc(fused[#loc44, #loc45])
#loc149 = loc(fused[#loc50, #loc51])
#loc152 = loc(fused[#loc61, #loc62])
#loc153 = loc(fused[#loc65, #loc66])
#loc154 = loc(fused[#loc69, #loc68])
#loc155 = loc(fused[#loc70, #loc71])
#loc156 = loc(fused[#loc72, #loc73])
#loc157 = loc(fused[#loc74, #loc75])
#loc158 = loc(fused[#loc77, #loc76])
#loc159 = loc(fused[#loc78, #loc79])
#loc160 = loc(fused[#loc86, #loc85])
#loc161 = loc(fused[#loc88, #loc89])
#loc162 = loc(fused[#loc93, #loc94])
#loc163 = loc(fused[#loc92, #loc94])
#loc164 = loc(fused[#loc95, #loc96])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc103, #loc104])
#loc167 = loc(fused[#loc105, #loc106])
#loc168 = loc(fused[#loc108, #loc107])
#loc169 = loc(fused[#loc109, #loc110])
#loc170 = loc(fused[#loc114, #loc113])
#loc171 = loc(fused[#loc119, #loc120])
#loc172 = loc(fused[#loc124, #loc125])
#loc173 = loc(fused[#loc123, #loc125])
#loc174 = loc(fused[#loc126, #loc127])
