!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":22:26)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":22:34)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":66:30)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":66:38)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":46:30)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":46:38)
#loc100 = loc(fused[#loc5, #loc6])
#loc114 = loc(fused[#loc39, #loc40])
#loc127 = loc(fused[#loc74, #loc75])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc98)
  cir.func internal private @badSource(%arg0: !s64i loc(fused[#loc5, #loc6])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc8)
      %12 = cir.const #cir.int<60> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc8)
      %16 = cir.const #cir.int<45> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc8)
      %21 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc8)
      %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc8)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc8)
      %26 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc8)
      %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc8)
      %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc8)
      %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc8)
      cir.yield %31 : !u64i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc8)
      %12 = cir.const #cir.int<60> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc8)
      %16 = cir.const #cir.int<45> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc8)
      %21 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc8)
      %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc8)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc8)
      %26 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc8)
      %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc8)
      %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc8)
      %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc8)
      %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc8)
      %33 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc8)
      %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc8)
      cir.yield %35 : !u64i loc(#loc8)
    }) : (!cir.bool) -> !u64i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc8)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc101)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc102)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc102)
    cir.return %9 : !s64i loc(#loc102)
  } loc(#loc99)
  cir.func private @printLongLongLine(!s64i) loc(#loc103)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_add_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc18)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc106)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc20)
    %3 = cir.call @badSource(%2) : (!s64i) -> !s64i loc(#loc21)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc107)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc109)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc27)
      %8 = cir.binop(add, %5, %7) nsw : !s64i loc(#loc28)
      cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc109)
      %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc29)
      cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc30)
    } loc(#loc108)
    cir.return loc(#loc15)
  } loc(#loc104)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_add_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc112)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc110)
  cir.func internal private @goodB2GSource(%arg0: !s64i loc(fused[#loc39, #loc40])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc114)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc41)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc42)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc42)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc42)
      %12 = cir.const #cir.int<60> : !s32i loc(#loc42)
      %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc42)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc42)
      %16 = cir.const #cir.int<45> : !s32i loc(#loc42)
      %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc42)
      %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc42)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc42)
      %21 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc42)
      %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc42)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc42)
      %26 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc42)
      %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc42)
      %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc42)
      %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc42)
      cir.yield %31 : !u64i loc(#loc42)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc42)
      %12 = cir.const #cir.int<60> : !s32i loc(#loc42)
      %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc42)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc42)
      %16 = cir.const #cir.int<45> : !s32i loc(#loc42)
      %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc42)
      %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc42)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc42)
      %21 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc42)
      %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc42)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc42)
      %26 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc42)
      %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc42)
      %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc42)
      %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc42)
      %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc42)
      %33 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc42)
      %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc42)
      cir.yield %35 : !u64i loc(#loc42)
    }) : (!cir.bool) -> !u64i loc(#loc42)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc42)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc115)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc116)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc116)
    cir.return %9 : !s64i loc(#loc116)
  } loc(#loc113)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc53)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc55)
    %3 = cir.call @goodB2GSource(%2) : (!s64i) -> !s64i loc(#loc56)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc121)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc61)
      %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc62)
      %6 = cir.cmp(lt, %4, %5) : !s64i, !cir.bool loc(#loc123)
      cir.if %6 {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc125)
        %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc68)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc67)
        %11 = cir.binop(add, %8, %10) nsw : !s64i loc(#loc68)
        cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc125)
        %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc69)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc70)
      } else {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      } loc(#loc124)
    } loc(#loc122)
    cir.return loc(#loc50)
  } loc(#loc118)
  cir.func internal private @goodG2BSource(%arg0: !s64i loc(fused[#loc74, #loc75])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc76)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc77)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc79)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc129)
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc129)
    cir.return %5 : !s64i loc(#loc129)
  } loc(#loc126)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc85)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc132)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
    %3 = cir.call @goodG2BSource(%2) : (!s64i) -> !s64i loc(#loc88)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc133)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc135)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc95)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc94)
      %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc94)
      %8 = cir.binop(add, %5, %7) nsw : !s64i loc(#loc95)
      cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc135)
      %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc96)
      cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc97)
    } loc(#loc134)
    cir.return loc(#loc82)
  } loc(#loc130)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":27:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":25:21)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":25:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":26:12)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":29:1)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":39:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":31:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":31:13)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":32:12)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":32:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":33:22)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":33:12)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":33:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":33:26)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":34:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":38:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":36:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":36:33)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":36:26)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":37:27)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":37:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":90:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":94:1)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":92:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":92:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":93:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":93:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":66:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":71:1)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":67:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":69:21)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":69:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":70:12)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":70:5)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":86:19)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":73:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":88:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":75:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":75:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":76:12)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":76:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":77:26)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":77:12)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":77:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":77:30)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":79:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":87:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":79:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":79:16)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":80:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":83:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":85:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":81:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":81:33)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":81:26)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":82:27)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":82:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":86:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":46:1)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":51:1)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":47:1)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":49:12)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":49:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":50:12)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":50:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":53:1)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":63:1)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":55:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":55:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":56:12)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":56:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":57:26)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":57:12)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":57:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":57:30)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":58:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":62:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":60:9)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":60:33)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":60:26)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":61:27)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_add_42.c":61:9)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc9, #loc8])
#loc102 = loc(fused[#loc11, #loc10])
#loc103 = loc(fused[#loc12, #loc13])
#loc104 = loc(fused[#loc14, #loc15])
#loc105 = loc(fused[#loc16, #loc17])
#loc106 = loc(fused[#loc19, #loc18])
#loc107 = loc(fused[#loc22, #loc23])
#loc108 = loc(fused[#loc24, #loc25])
#loc109 = loc(fused[#loc26, #loc27])
#loc110 = loc(fused[#loc31, #loc32])
#loc111 = loc(fused[#loc33, #loc34])
#loc112 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc43, #loc42])
#loc116 = loc(fused[#loc45, #loc44])
#loc117 = loc(fused[#loc46, #loc47])
#loc118 = loc(fused[#loc49, #loc50])
#loc119 = loc(fused[#loc51, #loc52])
#loc120 = loc(fused[#loc54, #loc53])
#loc121 = loc(fused[#loc57, #loc58])
#loc122 = loc(fused[#loc59, #loc60])
#loc123 = loc(fused[#loc61, #loc62])
#loc124 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc125 = loc(fused[#loc66, #loc67])
#loc126 = loc(fused[#loc72, #loc73])
#loc128 = loc(fused[#loc78, #loc77])
#loc129 = loc(fused[#loc80, #loc79])
#loc130 = loc(fused[#loc81, #loc82])
#loc131 = loc(fused[#loc83, #loc84])
#loc132 = loc(fused[#loc86, #loc85])
#loc133 = loc(fused[#loc89, #loc90])
#loc134 = loc(fused[#loc91, #loc92])
#loc135 = loc(fused[#loc93, #loc94])
