!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc11 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":20:23)
#loc12 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":20:27)
#loc51 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":35:24)
#loc52 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":35:28)
#loc84 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc51, #loc52])
module @"/workspaces/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @signal(!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc79)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc81)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc82)
  cir.func internal private @helperBad(%arg0: !s32i loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["voidPointer", init] {alignment = 8 : i64} loc(#loc85)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc15)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc16)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc17)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc17)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    cir.store %5, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
    %8 = cir.cmp(eq, %6, %7) : !cir.ptr<!void>, !cir.bool loc(#loc87)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc88)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc23)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc25)
    cir.call @exit(%11) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc26)
    cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc27)
    cir.return loc(#loc10)
  } loc(#loc83)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc32)
    %1 = cir.const #cir.int<5> : !s32i loc(#loc33)
    %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc91)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc92)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<2> : !s32i loc(#loc35)
    %4 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
    %5 = cir.call @signal(%3, %4) : (!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc37)
    cir.br ^bb3 loc(#loc31)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc31)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc29)
  } loc(#loc89)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc93)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" internal dsolocal @volatileSigAtomic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc97)
  cir.func internal private @helperGood(%arg0: !s32i loc(fused[#loc51, #loc52])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc99)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %2 = cir.get_global @volatileSigAtomic : !cir.ptr<!s32i> loc(#loc97)
    cir.store volatile %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.return loc(#loc50)
  } loc(#loc98)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc60)
    %1 = cir.const #cir.int<5> : !s32i loc(#loc61)
    %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc103)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc104)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb4 loc(#loc63)
  ^bb3:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc66)
    %6 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!s32i)>> loc(#loc67)
    %7 = cir.call @signal(%5, %6) : (!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc68)
    cir.br ^bb4 loc(#loc59)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc59)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc57)
  } loc(#loc101)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc73)
    %1 = cir.const #cir.int<5> : !s32i loc(#loc74)
    %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc107)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc108)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<2> : !s32i loc(#loc76)
    %4 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!s32i)>> loc(#loc77)
    %5 = cir.call @signal(%3, %4) : (!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc78)
    cir.br ^bb3 loc(#loc72)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc70)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":0:0)
#loc1 = loc("/usr/include/signal.h":88:1)
#loc2 = loc("/usr/include/signal.h":89:6)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":20:1)
#loc10 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":31:1)
#loc13 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":28:5)
#loc14 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":28:34)
#loc15 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":21:1)
#loc16 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":28:25)
#loc17 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":28:32)
#loc18 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":29:5)
#loc19 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":29:40)
#loc20 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":29:9)
#loc21 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":29:24)
#loc22 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":29:30)
#loc23 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":29:31)
#loc24 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":29:37)
#loc25 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":29:36)
#loc26 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":30:10)
#loc27 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":30:5)
#loc28 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":51:1)
#loc29 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":57:1)
#loc30 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":53:5)
#loc31 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":56:5)
#loc32 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":53:8)
#loc33 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":53:27)
#loc34 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":54:5)
#loc35 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":55:16)
#loc36 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":55:24)
#loc37 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":55:9)
#loc38 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":86:1)
#loc39 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":90:1)
#loc40 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":88:5)
#loc41 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":88:11)
#loc42 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":89:5)
#loc43 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":89:11)
#loc44 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":69:19)
#loc47 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":33:1)
#loc48 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":33:50)
#loc49 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":35:1)
#loc50 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":42:1)
#loc53 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":36:1)
#loc54 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":41:25)
#loc55 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":41:5)
#loc56 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":64:1)
#loc57 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":75:1)
#loc58 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":66:5)
#loc59 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":74:5)
#loc60 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":66:8)
#loc61 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":66:27)
#loc62 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":67:5)
#loc63 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":70:5)
#loc64 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":72:5)
#loc65 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":69:9)
#loc66 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":73:16)
#loc67 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":73:24)
#loc68 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":73:9)
#loc69 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":78:1)
#loc70 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":84:1)
#loc71 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":80:5)
#loc72 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":83:5)
#loc73 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":80:8)
#loc74 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":80:27)
#loc75 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":81:5)
#loc76 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":82:16)
#loc77 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":82:24)
#loc78 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_06.c":82:9)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc5, #loc6])
#loc82 = loc(fused[#loc7, #loc8])
#loc83 = loc(fused[#loc9, #loc10])
#loc85 = loc(fused[#loc13, #loc14])
#loc86 = loc(fused[#loc18, #loc19])
#loc87 = loc(fused[#loc20, #loc21])
#loc88 = loc(fused[#loc22, #loc19])
#loc89 = loc(fused[#loc28, #loc29])
#loc90 = loc(fused[#loc30, #loc31])
#loc91 = loc(fused[#loc32, #loc33])
#loc92 = loc(fused[#loc34, #loc31])
#loc93 = loc(fused[#loc38, #loc39])
#loc94 = loc(fused[#loc40, #loc41])
#loc95 = loc(fused[#loc42, #loc43])
#loc96 = loc(fused[#loc44, #loc45])
#loc97 = loc(fused[#loc47, #loc48])
#loc98 = loc(fused[#loc49, #loc50])
#loc100 = loc(fused[#loc55, #loc54])
#loc101 = loc(fused[#loc56, #loc57])
#loc102 = loc(fused[#loc58, #loc59])
#loc103 = loc(fused[#loc60, #loc61])
#loc104 = loc(fused[#loc62, #loc63, #loc64, #loc59])
#loc105 = loc(fused[#loc69, #loc70])
#loc106 = loc(fused[#loc71, #loc72])
#loc107 = loc(fused[#loc73, #loc74])
#loc108 = loc(fused[#loc75, #loc72])
