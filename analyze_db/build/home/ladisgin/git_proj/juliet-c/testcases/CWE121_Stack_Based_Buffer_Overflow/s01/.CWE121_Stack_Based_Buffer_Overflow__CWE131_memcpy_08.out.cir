!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":113:10)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":113:14)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":113:20)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":113:32)
#loc155 = loc(fused[#loc49, #loc50])
#loc156 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc135)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc141)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc142)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc16)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc16)
    cir.store %10, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc144)
  ^bb5:  // pred: ^bb4
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc137)
    cir.store %11, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc137)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc20)
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc21)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
    %16 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc22)
    %18 = cir.const #cir.int<4> : !u64i loc(#loc145)
    %19 = cir.binop(mul, %17, %18) : !u64i loc(#loc146)
    cir.libc.memcpy %19 bytes from %15 to %13 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc147)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc29)
    %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc30)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc136)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc148)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc151)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc152)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc56)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    cir.return %17 : !s32i loc(#loc159)
  } loc(#loc154)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc69)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    cir.return %2 : !s32i loc(#loc161)
  } loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc78)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    cir.br ^bb1 loc(#loc166)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc167)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc82)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc168)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.br ^bb4 loc(#loc85)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<10> : !s32i loc(#loc88)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc88)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc88)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc88)
    %12 = cir.alloca !u8i, !cir.ptr<!u8i>, %11 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc88)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc88)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc88)
    cir.store %14, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc81)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc170)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc163)
    cir.store %15, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc163)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc93)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc93)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc94)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc94)
    %22 = cir.const #cir.int<4> : !u64i loc(#loc171)
    %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc172)
    cir.libc.memcpy %23 bytes from %19 to %17 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc173)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc101)
    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc102)
    cir.br ^bb7 loc(#loc91)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc73)
  } loc(#loc162)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc105)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
    cir.return %2 : !s32i loc(#loc175)
  } loc(#loc174)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc177)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc113)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc181)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc117)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<10> : !s32i loc(#loc120)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc120)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc120)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc120)
    %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc120)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc120)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc183)
    cir.br ^bb3 loc(#loc116)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc184)
  ^bb5:  // pred: ^bb4
    %13 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc177)
    cir.store %13, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc177)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc124)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc125)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc125)
    %18 = cir.const #cir.int<10> : !s32i loc(#loc126)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc126)
    %20 = cir.const #cir.int<4> : !u64i loc(#loc185)
    %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc186)
    cir.libc.memcpy %21 bytes from %17 to %15 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc187)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc132)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc133)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc134)
    cir.br ^bb6 loc(#loc123)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc108)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":35:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":50:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":45:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":45:28)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":37:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":37:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":38:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":38:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":39:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":43:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":39:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":39:26)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":40:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":42:23)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":42:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":44:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":49:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:22)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:30)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:33)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:43)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":47:44)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":48:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":48:27)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":48:28)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":48:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":97:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":101:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":99:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":99:14)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":100:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":100:14)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":118:15)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":120:15)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":123:15)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":125:15)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":113:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":128:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":114:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":116:27)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":116:22)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":116:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":118:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":119:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":119:63)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":120:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":123:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":124:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":124:62)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":125:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":127:12)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":127:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":23:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":26:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":25:12)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":25:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":64:19)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":57:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":77:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":72:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":72:28)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":59:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":59:11)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":60:12)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":60:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":61:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":70:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":61:8)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":61:27)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":62:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":65:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":67:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":64:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":69:23)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":69:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":71:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":76:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:16)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:30)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:33)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:43)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":74:44)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":75:22)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":75:27)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":75:28)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":75:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":28:1)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":31:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":30:12)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":30:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":80:1)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":95:1)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":90:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":90:28)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":82:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":82:11)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":83:12)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":83:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":84:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":88:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":84:8)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":84:26)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":85:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":87:23)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":87:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":89:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":94:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:16)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:22)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:30)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:33)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:43)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":92:44)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":93:22)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":93:27)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":93:28)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c":93:9)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc5, #loc6])
#loc138 = loc(fused[#loc7, #loc8])
#loc139 = loc(fused[#loc10, #loc9])
#loc140 = loc(fused[#loc11, #loc12])
#loc141 = loc(fused[#loc13, #loc14])
#loc142 = loc(fused[#loc15, #loc12])
#loc143 = loc(fused[#loc17, #loc16])
#loc144 = loc(fused[#loc18, #loc19])
#loc145 = loc(fused[#loc23, #loc24])
#loc146 = loc(fused[#loc22, #loc24])
#loc147 = loc(fused[#loc25, #loc26])
#loc148 = loc(fused[#loc31, #loc32])
#loc149 = loc(fused[#loc33, #loc34])
#loc150 = loc(fused[#loc35, #loc36])
#loc151 = loc(fused[#loc37, #loc38])
#loc152 = loc(fused[#loc39, #loc40])
#loc153 = loc(fused[#loc41, #loc42])
#loc154 = loc(fused[#loc47, #loc48])
#loc157 = loc(fused[#loc58, #loc59])
#loc158 = loc(fused[#loc62, #loc63])
#loc159 = loc(fused[#loc66, #loc65])
#loc160 = loc(fused[#loc67, #loc68])
#loc161 = loc(fused[#loc70, #loc69])
#loc162 = loc(fused[#loc72, #loc73])
#loc163 = loc(fused[#loc74, #loc75])
#loc164 = loc(fused[#loc76, #loc77])
#loc165 = loc(fused[#loc79, #loc78])
#loc166 = loc(fused[#loc80, #loc81])
#loc167 = loc(fused[#loc82, #loc83])
#loc168 = loc(fused[#loc84, #loc85, #loc86, #loc81])
#loc169 = loc(fused[#loc89, #loc88])
#loc170 = loc(fused[#loc90, #loc91])
#loc171 = loc(fused[#loc95, #loc96])
#loc172 = loc(fused[#loc94, #loc96])
#loc173 = loc(fused[#loc97, #loc98])
#loc174 = loc(fused[#loc103, #loc104])
#loc175 = loc(fused[#loc106, #loc105])
#loc176 = loc(fused[#loc107, #loc108])
#loc177 = loc(fused[#loc109, #loc110])
#loc178 = loc(fused[#loc111, #loc112])
#loc179 = loc(fused[#loc114, #loc113])
#loc180 = loc(fused[#loc115, #loc116])
#loc181 = loc(fused[#loc117, #loc118])
#loc182 = loc(fused[#loc119, #loc116])
#loc183 = loc(fused[#loc121, #loc120])
#loc184 = loc(fused[#loc122, #loc123])
#loc185 = loc(fused[#loc127, #loc128])
#loc186 = loc(fused[#loc126, #loc128])
#loc187 = loc(fused[#loc129, #loc130])
