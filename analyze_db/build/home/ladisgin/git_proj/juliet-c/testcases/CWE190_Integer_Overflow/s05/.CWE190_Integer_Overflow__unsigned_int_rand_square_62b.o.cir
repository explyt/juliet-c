!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":25:16)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":25:30)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":28:26)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":36:20)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":36:34)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":43:20)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":43:34)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":46:26)
#loc26 = loc(fused[#loc5, #loc6])
#loc29 = loc(fused[#loc12, #loc13])
#loc32 = loc(fused[#loc19, #loc20])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc24)
  cir.func @_ZN52CWE190_Integer_Overflow__unsigned_int_rand_square_629badSourceERj(%arg0: !cir.ptr<!u32i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc26)
    cir.store %arg0, %0 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %4 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc8)
    %7 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %8 = cir.shift(left, %6 : !u32i, %7 : !s32i) -> !u32i loc(#loc8)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
    %11 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
    %13 = cir.binop(xor, %8, %12) : !u32i loc(#loc8)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
    %16 = cir.binop(xor, %13, %15) : !u32i loc(#loc8)
    cir.br ^bb3(%16 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc8)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc8)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc8)
    %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc8)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc8)
    %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc8)
    %29 = cir.unary(minus, %28) : !u32i, !u32i loc(#loc8)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc8)
    %32 = cir.binop(sub, %29, %31) : !u32i loc(#loc8)
    cir.br ^bb3(%32 : !u32i) loc(#loc8)
  ^bb3(%33: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":28:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %34 = cir.cast(integral, %33 : !u32i), !s32i loc(#loc8)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc8)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc9)
    cir.store %35, %36 : !u32i, !cir.ptr<!u32i> loc(#loc27)
    cir.return loc(#loc4)
  } loc(#loc25)
  cir.func @_ZN52CWE190_Integer_Overflow__unsigned_int_rand_square_6213goodG2BSourceERj(%arg0: !cir.ptr<!u32i> loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc29)
    cir.store %arg0, %0 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc14)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc15)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc15)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc16)
    cir.store %2, %3 : !u32i, !cir.ptr<!u32i> loc(#loc30)
    cir.return loc(#loc11)
  } loc(#loc28)
  cir.func @_ZN52CWE190_Integer_Overflow__unsigned_int_rand_square_6213goodB2GSourceERj(%arg0: !cir.ptr<!u32i> loc(fused[#loc19, #loc20])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc32)
    cir.store %arg0, %0 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc21)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc22)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %4 ^bb1, ^bb2 loc(#loc22)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc22)
    %7 = cir.const #cir.int<30> : !s32i loc(#loc22)
    %8 = cir.shift(left, %6 : !u32i, %7 : !s32i) -> !u32i loc(#loc22)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc22)
    %11 = cir.const #cir.int<15> : !s32i loc(#loc22)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc22)
    %13 = cir.binop(xor, %8, %12) : !u32i loc(#loc22)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc22)
    %16 = cir.binop(xor, %13, %15) : !u32i loc(#loc22)
    cir.br ^bb3(%16 : !u32i) loc(#loc22)
  ^bb2:  // pred: ^bb0
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc22)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc22)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc22)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc22)
    %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc22)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc22)
    %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc22)
    %29 = cir.unary(minus, %28) : !u32i, !u32i loc(#loc22)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc22)
    %32 = cir.binop(sub, %29, %31) : !u32i loc(#loc22)
    cir.br ^bb3(%32 : !u32i) loc(#loc22)
  ^bb3(%33: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":46:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // pred: ^bb3
    %34 = cir.cast(integral, %33 : !u32i), !s32i loc(#loc22)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc22)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc23)
    cir.store %35, %36 : !u32i, !cir.ptr<!u32i> loc(#loc33)
    cir.return loc(#loc18)
  } loc(#loc31)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":25:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":29:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":26:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":28:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":36:1)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":40:1)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":37:1)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":39:12)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":39:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":43:1)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":47:1)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":44:1)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_62b.cpp":46:5)
#loc24 = loc(fused[#loc1, #loc2])
#loc25 = loc(fused[#loc3, #loc4])
#loc27 = loc(fused[#loc9, #loc8])
#loc28 = loc(fused[#loc10, #loc11])
#loc30 = loc(fused[#loc16, #loc15])
#loc31 = loc(fused[#loc17, #loc18])
#loc33 = loc(fused[#loc23, #loc22])
