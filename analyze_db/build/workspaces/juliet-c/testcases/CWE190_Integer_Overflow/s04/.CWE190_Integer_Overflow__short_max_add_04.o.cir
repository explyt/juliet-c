!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc152)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_add_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc154)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc7)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc155)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
      cir.if %4 {
        %5 = cir.const #cir.int<32767> : !s32i loc(#loc13)
        %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc13)
        cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc158)
      } loc(#loc157)
    } loc(#loc156)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc162)
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc23)
          %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc23)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc23)
          %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc23)
          cir.store %10, %5 : !s16i, !cir.ptr<!s16i> loc(#loc162)
          %11 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc24)
          %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc24)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc25)
        } loc(#loc161)
      } loc(#loc160)
    } loc(#loc159)
    cir.return loc(#loc4)
  } loc(#loc153)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_add_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc165)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc166)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc163)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc170)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc44)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc171)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc48)
      cir.if %4 {
        %5 = cir.const #cir.int<32767> : !s32i loc(#loc50)
        %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc50)
        cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc174)
      } loc(#loc173)
    } loc(#loc172)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc54)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc58)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc61)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc61)
          %7 = cir.const #cir.int<32767> : !s32i loc(#loc62)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc178)
          cir.if %8 {
            %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc180)
            %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc68)
            %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc68)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc67)
            %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc68)
            %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc68)
            cir.store %14, %9 : !s16i, !cir.ptr<!s16i> loc(#loc180)
            %15 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc69)
            %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc69)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc70)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc39)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc39)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
          } loc(#loc179)
        } loc(#loc177)
      } loc(#loc176)
    } loc(#loc175)
    cir.return loc(#loc41)
  } loc(#loc169)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc76)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc183)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc80)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc80)
      cir.if %4 {
        %5 = cir.const #cir.int<32767> : !s32i loc(#loc82)
        %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc82)
        cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc186)
      } loc(#loc185)
    } loc(#loc184)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc86)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc86)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc90)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc90)
          %7 = cir.const #cir.int<32767> : !s32i loc(#loc91)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc190)
          cir.if %8 {
            %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc192)
            %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc97)
            %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc97)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc96)
            %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc97)
            %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc97)
            cir.store %14, %9 : !s16i, !cir.ptr<!s16i> loc(#loc192)
            %15 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc98)
            %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc98)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc99)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc100)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc100)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc101)
          } loc(#loc191)
        } loc(#loc189)
      } loc(#loc188)
    } loc(#loc187)
    cir.return loc(#loc73)
  } loc(#loc181)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc194)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc106)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc195)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc110)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc110)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc114)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc114)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc115)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc116)
        %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc116)
        cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc198)
      } loc(#loc197)
    } loc(#loc196)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc120)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc120)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc202)
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc126)
          %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc126)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc125)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc126)
          %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc126)
          cir.store %10, %5 : !s16i, !cir.ptr<!s16i> loc(#loc202)
          %11 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc127)
          %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc127)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc128)
        } loc(#loc201)
      } loc(#loc200)
    } loc(#loc199)
    cir.return loc(#loc103)
  } loc(#loc193)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc133)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc133)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc205)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc137)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc139)
        %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc139)
        cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc208)
      } loc(#loc207)
    } loc(#loc206)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc143)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc143)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc212)
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc149)
          %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc149)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc148)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc149)
          %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc149)
          cir.store %10, %5 : !s16i, !cir.ptr<!s16i> loc(#loc212)
          %11 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc150)
          %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc150)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc151)
        } loc(#loc211)
      } loc(#loc210)
    } loc(#loc209)
    cir.return loc(#loc130)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_add_04.c":28:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_add_04.c":45:1)
#loc5 = loc("CWE190_Integer_Overflow__short_max_add_04.c":30:5)
#loc6 = loc("CWE190_Integer_Overflow__short_max_add_04.c":30:11)
#loc7 = loc("CWE190_Integer_Overflow__short_max_add_04.c":31:12)
#loc8 = loc("CWE190_Integer_Overflow__short_max_add_04.c":31:5)
#loc9 = loc("CWE190_Integer_Overflow__short_max_add_04.c":32:5)
#loc10 = loc("CWE190_Integer_Overflow__short_max_add_04.c":36:5)
#loc11 = loc("CWE190_Integer_Overflow__short_max_add_04.c":32:8)
#loc12 = loc("CWE190_Integer_Overflow__short_max_add_04.c":33:5)
#loc13 = loc("CWE190_Integer_Overflow__short_max_add_04.c":35:16)
#loc14 = loc("CWE190_Integer_Overflow__short_max_add_04.c":35:9)
#loc15 = loc("CWE190_Integer_Overflow__short_max_add_04.c":37:5)
#loc16 = loc("CWE190_Integer_Overflow__short_max_add_04.c":44:5)
#loc17 = loc("CWE190_Integer_Overflow__short_max_add_04.c":37:8)
#loc18 = loc("CWE190_Integer_Overflow__short_max_add_04.c":38:5)
#loc19 = loc("CWE190_Integer_Overflow__short_max_add_04.c":39:9)
#loc20 = loc("CWE190_Integer_Overflow__short_max_add_04.c":43:9)
#loc21 = loc("CWE190_Integer_Overflow__short_max_add_04.c":41:13)
#loc22 = loc("CWE190_Integer_Overflow__short_max_add_04.c":41:35)
#loc23 = loc("CWE190_Integer_Overflow__short_max_add_04.c":41:28)
#loc24 = loc("CWE190_Integer_Overflow__short_max_add_04.c":42:26)
#loc25 = loc("CWE190_Integer_Overflow__short_max_add_04.c":42:13)
#loc26 = loc("CWE190_Integer_Overflow__short_max_add_04.c":151:1)
#loc27 = loc("CWE190_Integer_Overflow__short_max_add_04.c":157:1)
#loc28 = loc("CWE190_Integer_Overflow__short_max_add_04.c":153:5)
#loc29 = loc("CWE190_Integer_Overflow__short_max_add_04.c":153:14)
#loc30 = loc("CWE190_Integer_Overflow__short_max_add_04.c":154:5)
#loc31 = loc("CWE190_Integer_Overflow__short_max_add_04.c":154:14)
#loc32 = loc("CWE190_Integer_Overflow__short_max_add_04.c":155:5)
#loc33 = loc("CWE190_Integer_Overflow__short_max_add_04.c":155:14)
#loc34 = loc("CWE190_Integer_Overflow__short_max_add_04.c":156:5)
#loc35 = loc("CWE190_Integer_Overflow__short_max_add_04.c":156:14)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__short_max_add_04.c":64:19)
#loc39 = loc("CWE190_Integer_Overflow__short_max_add_04.c":76:23)
#loc40 = loc("CWE190_Integer_Overflow__short_max_add_04.c":52:1)
#loc41 = loc("CWE190_Integer_Overflow__short_max_add_04.c":79:1)
#loc42 = loc("CWE190_Integer_Overflow__short_max_add_04.c":54:5)
#loc43 = loc("CWE190_Integer_Overflow__short_max_add_04.c":54:11)
#loc44 = loc("CWE190_Integer_Overflow__short_max_add_04.c":55:12)
#loc45 = loc("CWE190_Integer_Overflow__short_max_add_04.c":55:5)
#loc46 = loc("CWE190_Integer_Overflow__short_max_add_04.c":56:5)
#loc47 = loc("CWE190_Integer_Overflow__short_max_add_04.c":60:5)
#loc48 = loc("CWE190_Integer_Overflow__short_max_add_04.c":56:8)
#loc49 = loc("CWE190_Integer_Overflow__short_max_add_04.c":57:5)
#loc50 = loc("CWE190_Integer_Overflow__short_max_add_04.c":59:16)
#loc51 = loc("CWE190_Integer_Overflow__short_max_add_04.c":59:9)
#loc52 = loc("CWE190_Integer_Overflow__short_max_add_04.c":61:5)
#loc53 = loc("CWE190_Integer_Overflow__short_max_add_04.c":78:5)
#loc54 = loc("CWE190_Integer_Overflow__short_max_add_04.c":61:8)
#loc55 = loc("CWE190_Integer_Overflow__short_max_add_04.c":62:5)
#loc56 = loc("CWE190_Integer_Overflow__short_max_add_04.c":65:5)
#loc57 = loc("CWE190_Integer_Overflow__short_max_add_04.c":67:5)
#loc58 = loc("CWE190_Integer_Overflow__short_max_add_04.c":64:9)
#loc59 = loc("CWE190_Integer_Overflow__short_max_add_04.c":69:9)
#loc60 = loc("CWE190_Integer_Overflow__short_max_add_04.c":77:9)
#loc61 = loc("CWE190_Integer_Overflow__short_max_add_04.c":69:13)
#loc62 = loc("CWE190_Integer_Overflow__short_max_add_04.c":69:20)
#loc63 = loc("CWE190_Integer_Overflow__short_max_add_04.c":70:9)
#loc64 = loc("CWE190_Integer_Overflow__short_max_add_04.c":73:9)
#loc65 = loc("CWE190_Integer_Overflow__short_max_add_04.c":75:9)
#loc66 = loc("CWE190_Integer_Overflow__short_max_add_04.c":71:13)
#loc67 = loc("CWE190_Integer_Overflow__short_max_add_04.c":71:35)
#loc68 = loc("CWE190_Integer_Overflow__short_max_add_04.c":71:28)
#loc69 = loc("CWE190_Integer_Overflow__short_max_add_04.c":72:26)
#loc70 = loc("CWE190_Integer_Overflow__short_max_add_04.c":72:13)
#loc71 = loc("CWE190_Integer_Overflow__short_max_add_04.c":76:13)
#loc72 = loc("CWE190_Integer_Overflow__short_max_add_04.c":82:1)
#loc73 = loc("CWE190_Integer_Overflow__short_max_add_04.c":104:1)
#loc74 = loc("CWE190_Integer_Overflow__short_max_add_04.c":84:5)
#loc75 = loc("CWE190_Integer_Overflow__short_max_add_04.c":84:11)
#loc76 = loc("CWE190_Integer_Overflow__short_max_add_04.c":85:12)
#loc77 = loc("CWE190_Integer_Overflow__short_max_add_04.c":85:5)
#loc78 = loc("CWE190_Integer_Overflow__short_max_add_04.c":86:5)
#loc79 = loc("CWE190_Integer_Overflow__short_max_add_04.c":90:5)
#loc80 = loc("CWE190_Integer_Overflow__short_max_add_04.c":86:8)
#loc81 = loc("CWE190_Integer_Overflow__short_max_add_04.c":87:5)
#loc82 = loc("CWE190_Integer_Overflow__short_max_add_04.c":89:16)
#loc83 = loc("CWE190_Integer_Overflow__short_max_add_04.c":89:9)
#loc84 = loc("CWE190_Integer_Overflow__short_max_add_04.c":91:5)
#loc85 = loc("CWE190_Integer_Overflow__short_max_add_04.c":103:5)
#loc86 = loc("CWE190_Integer_Overflow__short_max_add_04.c":91:8)
#loc87 = loc("CWE190_Integer_Overflow__short_max_add_04.c":92:5)
#loc88 = loc("CWE190_Integer_Overflow__short_max_add_04.c":94:9)
#loc89 = loc("CWE190_Integer_Overflow__short_max_add_04.c":102:9)
#loc90 = loc("CWE190_Integer_Overflow__short_max_add_04.c":94:13)
#loc91 = loc("CWE190_Integer_Overflow__short_max_add_04.c":94:20)
#loc92 = loc("CWE190_Integer_Overflow__short_max_add_04.c":95:9)
#loc93 = loc("CWE190_Integer_Overflow__short_max_add_04.c":98:9)
#loc94 = loc("CWE190_Integer_Overflow__short_max_add_04.c":100:9)
#loc95 = loc("CWE190_Integer_Overflow__short_max_add_04.c":96:13)
#loc96 = loc("CWE190_Integer_Overflow__short_max_add_04.c":96:35)
#loc97 = loc("CWE190_Integer_Overflow__short_max_add_04.c":96:28)
#loc98 = loc("CWE190_Integer_Overflow__short_max_add_04.c":97:26)
#loc99 = loc("CWE190_Integer_Overflow__short_max_add_04.c":97:13)
#loc100 = loc("CWE190_Integer_Overflow__short_max_add_04.c":101:23)
#loc101 = loc("CWE190_Integer_Overflow__short_max_add_04.c":101:13)
#loc102 = loc("CWE190_Integer_Overflow__short_max_add_04.c":107:1)
#loc103 = loc("CWE190_Integer_Overflow__short_max_add_04.c":129:1)
#loc104 = loc("CWE190_Integer_Overflow__short_max_add_04.c":109:5)
#loc105 = loc("CWE190_Integer_Overflow__short_max_add_04.c":109:11)
#loc106 = loc("CWE190_Integer_Overflow__short_max_add_04.c":110:12)
#loc107 = loc("CWE190_Integer_Overflow__short_max_add_04.c":110:5)
#loc108 = loc("CWE190_Integer_Overflow__short_max_add_04.c":111:5)
#loc109 = loc("CWE190_Integer_Overflow__short_max_add_04.c":120:5)
#loc110 = loc("CWE190_Integer_Overflow__short_max_add_04.c":111:8)
#loc111 = loc("CWE190_Integer_Overflow__short_max_add_04.c":112:5)
#loc112 = loc("CWE190_Integer_Overflow__short_max_add_04.c":115:5)
#loc113 = loc("CWE190_Integer_Overflow__short_max_add_04.c":117:5)
#loc114 = loc("CWE190_Integer_Overflow__short_max_add_04.c":114:19)
#loc115 = loc("CWE190_Integer_Overflow__short_max_add_04.c":114:9)
#loc116 = loc("CWE190_Integer_Overflow__short_max_add_04.c":119:16)
#loc117 = loc("CWE190_Integer_Overflow__short_max_add_04.c":119:9)
#loc118 = loc("CWE190_Integer_Overflow__short_max_add_04.c":121:5)
#loc119 = loc("CWE190_Integer_Overflow__short_max_add_04.c":128:5)
#loc120 = loc("CWE190_Integer_Overflow__short_max_add_04.c":121:8)
#loc121 = loc("CWE190_Integer_Overflow__short_max_add_04.c":122:5)
#loc122 = loc("CWE190_Integer_Overflow__short_max_add_04.c":123:9)
#loc123 = loc("CWE190_Integer_Overflow__short_max_add_04.c":127:9)
#loc124 = loc("CWE190_Integer_Overflow__short_max_add_04.c":125:13)
#loc125 = loc("CWE190_Integer_Overflow__short_max_add_04.c":125:35)
#loc126 = loc("CWE190_Integer_Overflow__short_max_add_04.c":125:28)
#loc127 = loc("CWE190_Integer_Overflow__short_max_add_04.c":126:26)
#loc128 = loc("CWE190_Integer_Overflow__short_max_add_04.c":126:13)
#loc129 = loc("CWE190_Integer_Overflow__short_max_add_04.c":132:1)
#loc130 = loc("CWE190_Integer_Overflow__short_max_add_04.c":149:1)
#loc131 = loc("CWE190_Integer_Overflow__short_max_add_04.c":134:5)
#loc132 = loc("CWE190_Integer_Overflow__short_max_add_04.c":134:11)
#loc133 = loc("CWE190_Integer_Overflow__short_max_add_04.c":135:12)
#loc134 = loc("CWE190_Integer_Overflow__short_max_add_04.c":135:5)
#loc135 = loc("CWE190_Integer_Overflow__short_max_add_04.c":136:5)
#loc136 = loc("CWE190_Integer_Overflow__short_max_add_04.c":140:5)
#loc137 = loc("CWE190_Integer_Overflow__short_max_add_04.c":136:8)
#loc138 = loc("CWE190_Integer_Overflow__short_max_add_04.c":137:5)
#loc139 = loc("CWE190_Integer_Overflow__short_max_add_04.c":139:16)
#loc140 = loc("CWE190_Integer_Overflow__short_max_add_04.c":139:9)
#loc141 = loc("CWE190_Integer_Overflow__short_max_add_04.c":141:5)
#loc142 = loc("CWE190_Integer_Overflow__short_max_add_04.c":148:5)
#loc143 = loc("CWE190_Integer_Overflow__short_max_add_04.c":141:8)
#loc144 = loc("CWE190_Integer_Overflow__short_max_add_04.c":142:5)
#loc145 = loc("CWE190_Integer_Overflow__short_max_add_04.c":143:9)
#loc146 = loc("CWE190_Integer_Overflow__short_max_add_04.c":147:9)
#loc147 = loc("CWE190_Integer_Overflow__short_max_add_04.c":145:13)
#loc148 = loc("CWE190_Integer_Overflow__short_max_add_04.c":145:35)
#loc149 = loc("CWE190_Integer_Overflow__short_max_add_04.c":145:28)
#loc150 = loc("CWE190_Integer_Overflow__short_max_add_04.c":146:26)
#loc151 = loc("CWE190_Integer_Overflow__short_max_add_04.c":146:13)
#loc152 = loc(fused[#loc1, #loc2])
#loc153 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc5, #loc6])
#loc155 = loc(fused[#loc8, #loc7])
#loc156 = loc(fused[#loc9, #loc10])
#loc157 = loc(fused[#loc12, #loc10])
#loc158 = loc(fused[#loc14, #loc13])
#loc159 = loc(fused[#loc15, #loc16])
#loc160 = loc(fused[#loc18, #loc16])
#loc161 = loc(fused[#loc19, #loc20])
#loc162 = loc(fused[#loc21, #loc22])
#loc163 = loc(fused[#loc26, #loc27])
#loc164 = loc(fused[#loc28, #loc29])
#loc165 = loc(fused[#loc30, #loc31])
#loc166 = loc(fused[#loc32, #loc33])
#loc167 = loc(fused[#loc34, #loc35])
#loc168 = loc(fused[#loc36, #loc37])
#loc169 = loc(fused[#loc40, #loc41])
#loc170 = loc(fused[#loc42, #loc43])
#loc171 = loc(fused[#loc45, #loc44])
#loc172 = loc(fused[#loc46, #loc47])
#loc173 = loc(fused[#loc49, #loc47])
#loc174 = loc(fused[#loc51, #loc50])
#loc175 = loc(fused[#loc52, #loc53])
#loc176 = loc(fused[#loc55, #loc56, #loc57, #loc53])
#loc177 = loc(fused[#loc59, #loc60])
#loc178 = loc(fused[#loc61, #loc62])
#loc179 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc180 = loc(fused[#loc66, #loc67])
#loc181 = loc(fused[#loc72, #loc73])
#loc182 = loc(fused[#loc74, #loc75])
#loc183 = loc(fused[#loc77, #loc76])
#loc184 = loc(fused[#loc78, #loc79])
#loc185 = loc(fused[#loc81, #loc79])
#loc186 = loc(fused[#loc83, #loc82])
#loc187 = loc(fused[#loc84, #loc85])
#loc188 = loc(fused[#loc87, #loc85])
#loc189 = loc(fused[#loc88, #loc89])
#loc190 = loc(fused[#loc90, #loc91])
#loc191 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc192 = loc(fused[#loc95, #loc96])
#loc193 = loc(fused[#loc102, #loc103])
#loc194 = loc(fused[#loc104, #loc105])
#loc195 = loc(fused[#loc107, #loc106])
#loc196 = loc(fused[#loc108, #loc109])
#loc197 = loc(fused[#loc111, #loc112, #loc113, #loc109])
#loc198 = loc(fused[#loc117, #loc116])
#loc199 = loc(fused[#loc118, #loc119])
#loc200 = loc(fused[#loc121, #loc119])
#loc201 = loc(fused[#loc122, #loc123])
#loc202 = loc(fused[#loc124, #loc125])
#loc203 = loc(fused[#loc129, #loc130])
#loc204 = loc(fused[#loc131, #loc132])
#loc205 = loc(fused[#loc134, #loc133])
#loc206 = loc(fused[#loc135, #loc136])
#loc207 = loc(fused[#loc138, #loc136])
#loc208 = loc(fused[#loc140, #loc139])
#loc209 = loc(fused[#loc141, #loc142])
#loc210 = loc(fused[#loc144, #loc142])
#loc211 = loc(fused[#loc145, #loc146])
#loc212 = loc(fused[#loc147, #loc148])
