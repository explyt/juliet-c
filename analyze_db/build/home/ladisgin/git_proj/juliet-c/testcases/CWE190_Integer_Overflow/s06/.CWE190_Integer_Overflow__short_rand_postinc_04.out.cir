!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc51 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":173:10)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":173:14)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":173:20)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":173:32)
#loc209 = loc(fused[#loc51, #loc52])
#loc210 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__short_rand_postinc_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc187)
  cir.func private @printIntLine(!s32i) loc(#loc188)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_postinc_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc190)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc9)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc191)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc15)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc15)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc15)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc15)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc15)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc15)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc15)
          cir.yield %23 : !u32i loc(#loc15)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc15)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc15)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc15)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc15)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc15)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc15)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc15)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc15)
          cir.yield %27 : !u32i loc(#loc15)
        }) : (!cir.bool) -> !u32i loc(#loc15)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc15)
        %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc15)
        cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc194)
      } loc(#loc193)
    } loc(#loc192)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc198)
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc25)
          %7 = cir.unary(inc, %6) : !s16i, !s16i loc(#loc26)
          cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc199)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
          cir.store %8, %5 : !s16i, !cir.ptr<!s16i> loc(#loc198)
          %9 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc27)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc27)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc28)
        } loc(#loc197)
      } loc(#loc196)
    } loc(#loc195)
    cir.return loc(#loc6)
  } loc(#loc189)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_postinc_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc200)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc205)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc206)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc207)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc210)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE190_Integer_Overflow__short_rand_postinc_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call @CWE190_Integer_Overflow__short_rand_postinc_04_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE190_Integer_Overflow__short_rand_postinc_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call @CWE190_Integer_Overflow__short_rand_postinc_04_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc213)
    cir.return %17 : !s32i loc(#loc213)
  } loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc75)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc216)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc79)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc81)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc81)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc81)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc81)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc81)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc81)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc81)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc81)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc81)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc81)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc81)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc81)
          cir.yield %23 : !u32i loc(#loc81)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc81)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc81)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc81)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc81)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc81)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc81)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc81)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc81)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc81)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc81)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc81)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc81)
          cir.yield %27 : !u32i loc(#loc81)
        }) : (!cir.bool) -> !u32i loc(#loc81)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc81)
        %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc81)
        cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc219)
      } loc(#loc218)
    } loc(#loc217)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc85)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc85)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc92)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc92)
          %7 = cir.const #cir.int<32767> : !s32i loc(#loc93)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc223)
          cir.if %8 {
            %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc225)
            %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc99)
            %11 = cir.unary(inc, %10) : !s16i, !s16i loc(#loc100)
            cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc226)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc98)
            cir.store %12, %9 : !s16i, !cir.ptr<!s16i> loc(#loc225)
            %13 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc101)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc101)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc102)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc70)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc70)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          } loc(#loc224)
        } loc(#loc222)
      } loc(#loc221)
    } loc(#loc220)
    cir.return loc(#loc72)
  } loc(#loc214)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc228)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc108)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc229)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc112)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc112)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc114)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc114)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc114)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc114)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc114)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc114)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc114)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc114)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc114)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc114)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc114)
          cir.yield %23 : !u32i loc(#loc114)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc114)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc114)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc114)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc114)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc114)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc114)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc114)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc114)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc114)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc114)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc114)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc114)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc114)
          cir.yield %27 : !u32i loc(#loc114)
        }) : (!cir.bool) -> !u32i loc(#loc114)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc114)
        %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc114)
        cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc232)
      } loc(#loc231)
    } loc(#loc230)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc118)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc118)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc122)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc122)
          %7 = cir.const #cir.int<32767> : !s32i loc(#loc123)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc236)
          cir.if %8 {
            %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc238)
            %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc129)
            %11 = cir.unary(inc, %10) : !s16i, !s16i loc(#loc130)
            cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc239)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc128)
            cir.store %12, %9 : !s16i, !cir.ptr<!s16i> loc(#loc238)
            %13 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc131)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc131)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc132)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc133)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc133)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc134)
          } loc(#loc237)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc233)
    cir.return loc(#loc105)
  } loc(#loc227)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc241)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc139)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc139)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc242)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc143)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc143)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc149)
        %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc149)
        cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc245)
      } loc(#loc244)
    } loc(#loc243)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc153)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc153)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc249)
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc159)
          %7 = cir.unary(inc, %6) : !s16i, !s16i loc(#loc160)
          cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc250)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc158)
          cir.store %8, %5 : !s16i, !cir.ptr<!s16i> loc(#loc249)
          %9 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc161)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc161)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc162)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc246)
    cir.return loc(#loc136)
  } loc(#loc240)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc252)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc167)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc167)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc253)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc171)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc171)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc173)
        %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc173)
        cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc256)
      } loc(#loc255)
    } loc(#loc254)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc177)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc177)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc260)
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc183)
          %7 = cir.unary(inc, %6) : !s16i, !s16i loc(#loc184)
          cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc261)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc182)
          cir.store %8, %5 : !s16i, !cir.ptr<!s16i> loc(#loc260)
          %9 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc185)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc185)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc186)
        } loc(#loc259)
      } loc(#loc258)
    } loc(#loc257)
    cir.return loc(#loc164)
  } loc(#loc251)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__short_rand_postinc_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":28:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":46:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":30:5)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":30:11)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":31:12)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":31:5)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":32:5)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":36:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":32:8)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":35:23)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":35:9)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":45:5)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":37:8)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":39:9)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":44:9)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":42:13)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":42:28)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":41:17)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":41:13)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":43:26)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":43:13)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":156:1)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":162:1)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":158:5)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":158:14)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":159:5)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":159:14)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":160:5)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":160:14)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":161:5)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":161:14)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":178:15)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":180:15)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":183:15)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":185:15)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":173:1)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":188:1)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":174:1)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":176:27)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":176:22)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":176:5)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":178:5)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":179:5)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":179:57)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":180:5)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":183:5)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":184:5)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":184:56)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":185:5)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":187:12)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":187:5)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":65:19)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":78:23)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":53:1)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":81:1)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":55:5)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":55:11)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":56:12)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":56:5)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":57:5)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":61:5)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":57:8)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":58:5)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":60:23)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":60:9)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":62:5)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":80:5)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":62:8)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":63:5)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":66:5)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":68:5)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":65:9)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":70:9)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":79:9)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":70:13)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":70:20)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":71:9)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":75:9)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":77:9)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":73:13)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":73:28)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":72:17)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":72:13)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":74:26)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":74:13)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":78:13)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":84:1)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":107:1)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":86:5)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":86:11)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":87:12)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":87:5)
#loc110 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":88:5)
#loc111 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":92:5)
#loc112 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":88:8)
#loc113 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":89:5)
#loc114 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":91:23)
#loc115 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":91:9)
#loc116 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":93:5)
#loc117 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":106:5)
#loc118 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":93:8)
#loc119 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":94:5)
#loc120 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":96:9)
#loc121 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":105:9)
#loc122 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":96:13)
#loc123 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":96:20)
#loc124 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":97:9)
#loc125 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":101:9)
#loc126 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":103:9)
#loc127 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":99:13)
#loc128 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":99:28)
#loc129 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":98:17)
#loc130 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":98:13)
#loc131 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":100:26)
#loc132 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":100:13)
#loc133 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":104:23)
#loc134 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":104:13)
#loc135 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":110:1)
#loc136 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":133:1)
#loc137 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":112:5)
#loc138 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":112:11)
#loc139 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":113:12)
#loc140 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":113:5)
#loc141 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":114:5)
#loc142 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":123:5)
#loc143 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":114:8)
#loc144 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":115:5)
#loc145 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":118:5)
#loc146 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":120:5)
#loc147 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":117:19)
#loc148 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":117:9)
#loc149 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":122:16)
#loc150 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":122:9)
#loc151 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":124:5)
#loc152 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":132:5)
#loc153 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":124:8)
#loc154 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":125:5)
#loc155 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":126:9)
#loc156 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":131:9)
#loc157 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":129:13)
#loc158 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":129:28)
#loc159 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":128:17)
#loc160 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":128:13)
#loc161 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":130:26)
#loc162 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":130:13)
#loc163 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":136:1)
#loc164 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":154:1)
#loc165 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":138:5)
#loc166 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":138:11)
#loc167 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":139:12)
#loc168 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":139:5)
#loc169 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":140:5)
#loc170 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":144:5)
#loc171 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":140:8)
#loc172 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":141:5)
#loc173 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":143:16)
#loc174 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":143:9)
#loc175 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":145:5)
#loc176 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":153:5)
#loc177 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":145:8)
#loc178 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":146:5)
#loc179 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":147:9)
#loc180 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":152:9)
#loc181 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":150:13)
#loc182 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":150:28)
#loc183 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":149:17)
#loc184 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":149:13)
#loc185 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":151:26)
#loc186 = loc("CWE190_Integer_Overflow__short_rand_postinc_04.c":151:13)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc10, #loc9])
#loc192 = loc(fused[#loc11, #loc12])
#loc193 = loc(fused[#loc14, #loc12])
#loc194 = loc(fused[#loc16, #loc15])
#loc195 = loc(fused[#loc17, #loc18])
#loc196 = loc(fused[#loc20, #loc18])
#loc197 = loc(fused[#loc21, #loc22])
#loc198 = loc(fused[#loc23, #loc24])
#loc199 = loc(fused[#loc26, #loc25])
#loc200 = loc(fused[#loc29, #loc30])
#loc201 = loc(fused[#loc31, #loc32])
#loc202 = loc(fused[#loc33, #loc34])
#loc203 = loc(fused[#loc35, #loc36])
#loc204 = loc(fused[#loc37, #loc38])
#loc205 = loc(fused[#loc39, #loc40])
#loc206 = loc(fused[#loc41, #loc42])
#loc207 = loc(fused[#loc43, #loc44])
#loc208 = loc(fused[#loc49, #loc50])
#loc211 = loc(fused[#loc60, #loc61])
#loc212 = loc(fused[#loc64, #loc65])
#loc213 = loc(fused[#loc68, #loc67])
#loc214 = loc(fused[#loc71, #loc72])
#loc215 = loc(fused[#loc73, #loc74])
#loc216 = loc(fused[#loc76, #loc75])
#loc217 = loc(fused[#loc77, #loc78])
#loc218 = loc(fused[#loc80, #loc78])
#loc219 = loc(fused[#loc82, #loc81])
#loc220 = loc(fused[#loc83, #loc84])
#loc221 = loc(fused[#loc86, #loc87, #loc88, #loc84])
#loc222 = loc(fused[#loc90, #loc91])
#loc223 = loc(fused[#loc92, #loc93])
#loc224 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc225 = loc(fused[#loc97, #loc98])
#loc226 = loc(fused[#loc100, #loc99])
#loc227 = loc(fused[#loc104, #loc105])
#loc228 = loc(fused[#loc106, #loc107])
#loc229 = loc(fused[#loc109, #loc108])
#loc230 = loc(fused[#loc110, #loc111])
#loc231 = loc(fused[#loc113, #loc111])
#loc232 = loc(fused[#loc115, #loc114])
#loc233 = loc(fused[#loc116, #loc117])
#loc234 = loc(fused[#loc119, #loc117])
#loc235 = loc(fused[#loc120, #loc121])
#loc236 = loc(fused[#loc122, #loc123])
#loc237 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc238 = loc(fused[#loc127, #loc128])
#loc239 = loc(fused[#loc130, #loc129])
#loc240 = loc(fused[#loc135, #loc136])
#loc241 = loc(fused[#loc137, #loc138])
#loc242 = loc(fused[#loc140, #loc139])
#loc243 = loc(fused[#loc141, #loc142])
#loc244 = loc(fused[#loc144, #loc145, #loc146, #loc142])
#loc245 = loc(fused[#loc150, #loc149])
#loc246 = loc(fused[#loc151, #loc152])
#loc247 = loc(fused[#loc154, #loc152])
#loc248 = loc(fused[#loc155, #loc156])
#loc249 = loc(fused[#loc157, #loc158])
#loc250 = loc(fused[#loc160, #loc159])
#loc251 = loc(fused[#loc163, #loc164])
#loc252 = loc(fused[#loc165, #loc166])
#loc253 = loc(fused[#loc168, #loc167])
#loc254 = loc(fused[#loc169, #loc170])
#loc255 = loc(fused[#loc172, #loc170])
#loc256 = loc(fused[#loc174, #loc173])
#loc257 = loc(fused[#loc175, #loc176])
#loc258 = loc(fused[#loc178, #loc176])
#loc259 = loc(fused[#loc179, #loc180])
#loc260 = loc(fused[#loc181, #loc182])
#loc261 = loc(fused[#loc184, #loc183])
