!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc37 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":91:10)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":91:14)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":91:20)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":91:32)
!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType = !cir.struct<struct "_CWE190_Integer_Overflow__int_rand_preinc_67_structType" {!s32i}>
#loc100 = loc(fused[#loc37, #loc38])
#loc101 = loc(fused[#loc39, #loc40])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_67a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc85)
  cir.func private @CWE190_Integer_Overflow__int_rand_preinc_67b_badSink(!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType) loc(#loc86)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_67_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.alloca !ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType>, ["myStruct"] {alignment = 4 : i64} loc(#loc89)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc13)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc13)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc13)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc13)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc13)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc13)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc13)
      cir.yield %23 : !u32i loc(#loc13)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc13)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc13)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc13)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc13)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc13)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc13)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc13)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc13)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc13)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc13)
      cir.yield %27 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc13)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %10 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType> -> !cir.ptr<!s32i> loc(#loc16)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %11 = cir.load %1 : !cir.ptr<!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType>, !ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType loc(#loc18)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_67b_badSink(%11) : (!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType) -> () loc(#loc18)
    cir.return loc(#loc6)
  } loc(#loc87)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_preinc_67_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc93)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc96)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc97)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc34)
  cir.func @main(%arg0: !s32i loc(fused[#loc37, #loc38]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc39, #loc40])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc100)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc101)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc36)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc41)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc42)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc43)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc43)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc44)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc31)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_rand_preinc_67_good : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_67_good() : () -> () loc(#loc46)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc32)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc33)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_rand_preinc_67_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_67_bad() : () -> () loc(#loc50)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc34)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    cir.return %17 : !s32i loc(#loc104)
  } loc(#loc99)
  cir.func private @CWE190_Integer_Overflow__int_rand_preinc_67b_goodG2BSink(!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType) loc(#loc105)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.alloca !ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType>, ["myStruct"] {alignment = 4 : i64} loc(#loc108)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc65)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %5 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType> -> !cir.ptr<!s32i> loc(#loc16)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %6 = cir.load %1 : !cir.ptr<!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType>, !ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType loc(#loc69)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_67b_goodG2BSink(%6) : (!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType) -> () loc(#loc69)
    cir.return loc(#loc58)
  } loc(#loc106)
  cir.func private @CWE190_Integer_Overflow__int_rand_preinc_67b_goodB2GSink(!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType) loc(#loc112)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType>, ["myStruct"] {alignment = 4 : i64} loc(#loc115)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc80)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc80)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc80)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc80)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc80)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc80)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc80)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc80)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc80)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc80)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc80)
      cir.yield %23 : !u32i loc(#loc80)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc80)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc80)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc80)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc80)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc80)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc80)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc80)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc80)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc80)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc80)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc80)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc80)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc80)
      cir.yield %27 : !u32i loc(#loc80)
    }) : (!cir.bool) -> !u32i loc(#loc80)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc80)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %10 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType> -> !cir.ptr<!s32i> loc(#loc16)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %11 = cir.load %1 : !cir.ptr<!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType>, !ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType loc(#loc84)
    cir.call @CWE190_Integer_Overflow__int_rand_preinc_67b_goodB2GSink(%11) : (!ty__CWE190_Integer_Overflow__int_rand_preinc_67_structType) -> () loc(#loc84)
    cir.return loc(#loc73)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_67a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":28:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":28:122)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":30:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":40:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":32:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":32:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":33:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":33:60)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":35:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":35:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":37:12)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":37:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":38:28)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":22:9)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":38:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":39:5)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":76:1)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":80:1)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":78:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":78:13)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":79:5)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":79:13)
#loc25 = loc("/usr/include/stdlib.h":575:1)
#loc26 = loc("/usr/include/stdlib.h":575:41)
#loc27 = loc("/usr/include/time.h":76:1)
#loc28 = loc("/usr/include/time.h":76:38)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":96:15)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":98:15)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":101:15)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":103:15)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":91:1)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":106:1)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":92:1)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":94:27)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":94:22)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":94:5)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":96:5)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":97:5)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":97:54)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":98:5)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":101:5)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":102:5)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":102:53)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":103:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":105:12)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":105:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":47:1)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":47:126)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":49:1)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":59:1)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":51:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":51:9)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":52:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":52:60)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":54:12)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":54:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":56:12)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":56:5)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":57:28)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":57:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":58:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":62:1)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":62:126)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":64:1)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":74:1)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":66:5)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":66:9)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":67:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":67:60)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":69:12)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":69:5)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":71:12)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":71:5)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":72:28)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":72:5)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_preinc_67a.c":73:5)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc5, #loc6])
#loc88 = loc(fused[#loc7, #loc8])
#loc89 = loc(fused[#loc9, #loc10])
#loc90 = loc(fused[#loc12, #loc11])
#loc91 = loc(fused[#loc14, #loc13])
#loc92 = loc(fused[#loc17, #loc15])
#loc93 = loc(fused[#loc19, #loc20])
#loc94 = loc(fused[#loc21, #loc22])
#loc95 = loc(fused[#loc23, #loc24])
#loc96 = loc(fused[#loc25, #loc26])
#loc97 = loc(fused[#loc27, #loc28])
#loc98 = loc(fused[#loc29, #loc30])
#loc99 = loc(fused[#loc35, #loc36])
#loc102 = loc(fused[#loc46, #loc47])
#loc103 = loc(fused[#loc50, #loc51])
#loc104 = loc(fused[#loc54, #loc53])
#loc105 = loc(fused[#loc55, #loc56])
#loc106 = loc(fused[#loc57, #loc58])
#loc107 = loc(fused[#loc59, #loc60])
#loc108 = loc(fused[#loc61, #loc62])
#loc109 = loc(fused[#loc64, #loc63])
#loc110 = loc(fused[#loc66, #loc65])
#loc111 = loc(fused[#loc68, #loc67])
#loc112 = loc(fused[#loc70, #loc71])
#loc113 = loc(fused[#loc72, #loc73])
#loc114 = loc(fused[#loc74, #loc75])
#loc115 = loc(fused[#loc76, #loc77])
#loc116 = loc(fused[#loc79, #loc78])
#loc117 = loc(fused[#loc81, #loc80])
#loc118 = loc(fused[#loc83, #loc82])
