!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":22:21)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":22:25)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":70:25)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":70:29)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":113:25)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":113:29)
#true = #cir.bool<true> : !cir.bool
#loc273 = loc(fused[#loc14, #loc15])
#loc308 = loc(fused[#loc102, #loc103])
#loc339 = loc(fused[#loc184, #loc185])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc267)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc268)
  cir.func private  @printIntLine(!s32i) loc(#loc269)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc270)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc271)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc273)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc275)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc276)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc24)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc24)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc277)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc278)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc279)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc276)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc281)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc31)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc35)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
        } loc(#loc282)
      } loc(#loc280)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc38)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc284)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc40)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc41)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc285)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc42)
          cir.condition(%17) loc(#loc42)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc44)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc47)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc287)
          } loc(#loc286)
          cir.yield loc(#loc37)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc49)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc288)
          cir.yield loc(#loc283)
        } loc(#loc283)
      } loc(#loc283)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc290)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc54)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc58)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc61)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc292)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc64)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc294)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc67)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc295)
              %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc68)
              cir.condition(%25) loc(#loc68)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc72)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc70)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc73)
              } loc(#loc296)
              cir.yield loc(#loc63)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc75)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc297)
              cir.yield loc(#loc293)
            } loc(#loc293)
          } loc(#loc293)
        } else {
          %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc76)
        } loc(#loc291)
      } loc(#loc289)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc77)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc274)
    cir.return loc(#loc13)
  } loc(#loc272)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc298)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc300)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc301)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc86)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc301)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc88)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc90)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc90)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc90)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc90)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc90)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc90)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc90)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc90)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc90)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc90)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc90)
      cir.yield %24 : !u32i loc(#loc90)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc90)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc90)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc90)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc90)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc90)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc90)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc90)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc90)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc90)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc90)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc90)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc90)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc90)
      cir.yield %28 : !u32i loc(#loc90)
    }) : (!cir.bool) -> !u32i loc(#loc90)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc90)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc303)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc92)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc92)
    cir.return loc(#loc82)
  } loc(#loc299)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc305)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc96)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc306)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc98)
    cir.return loc(#loc95)
  } loc(#loc304)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc102, #loc103])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc308)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc310)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc311)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc111)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc112)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc112)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc312)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc313)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc314)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc311)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc118)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc118)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc316)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc119)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc121)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc122)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc123)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc121)
        } loc(#loc317)
      } loc(#loc315)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc126)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc319)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc129)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc320)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc130)
          cir.condition(%17) loc(#loc130)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc132)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc134)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc135)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc322)
          } loc(#loc321)
          cir.yield loc(#loc125)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc137)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc323)
          cir.yield loc(#loc318)
        } loc(#loc318)
      } loc(#loc318)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc141)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc325)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc142)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc146)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc147)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc149)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc327)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc152)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc329)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc154)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc155)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc330)
              %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc156)
              cir.condition(%25) loc(#loc156)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc160)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc158)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc161)
              } loc(#loc331)
              cir.yield loc(#loc151)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc162)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc163)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc332)
              cir.yield loc(#loc328)
            } loc(#loc328)
          } loc(#loc328)
        } else {
          %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc164)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc164)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc165)
        } loc(#loc326)
      } loc(#loc324)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc166)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc167)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc166)
    } loc(#loc309)
    cir.return loc(#loc101)
  } loc(#loc307)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc334)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc335)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc173)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc335)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc174)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc175)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc336)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc177)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc337)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc179)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc179)
    cir.return loc(#loc169)
  } loc(#loc333)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc181)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc184, #loc185])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc339)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc341)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc342)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc193)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc194)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc194)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc343)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc344)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc193)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc345)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc342)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc199)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc200)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc200)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc347)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc201)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc203)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc204)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc205)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc203)
        } loc(#loc348)
      } loc(#loc346)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc208)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc350)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc210)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc211)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc351)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc212)
          cir.condition(%17) loc(#loc212)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc214)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc216)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc217)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc353)
          } loc(#loc352)
          cir.yield loc(#loc207)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc218)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc219)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc354)
          cir.yield loc(#loc349)
        } loc(#loc349)
      } loc(#loc349)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc222)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc223)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc356)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc224)
        %17 = cir.ternary(%16, true {
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc226)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc227)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc357)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc229)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc225)
            cir.yield %23 : !cir.bool loc(#loc225)
          }, false {
            %23 = cir.const #false loc(#loc225)
            cir.yield %23 : !cir.bool loc(#loc225)
          }) : (!cir.bool) -> !cir.bool loc(#loc225)
          cir.yield %22 : !cir.bool loc(#loc225)
        }, false {
          %18 = cir.const #false loc(#loc225)
          cir.yield %18 : !cir.bool loc(#loc225)
        }) : (!cir.bool) -> !cir.bool loc(#loc225)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc233)
          %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc234)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc235)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc236)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc359)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc239)
            cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc361)
            cir.for : cond {
              %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc241)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc242)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc362)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc243)
              cir.condition(%26) loc(#loc243)
            } body {
              cir.scope {
                %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc245)
                %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc247)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc248)
              } loc(#loc363)
              cir.yield loc(#loc238)
            } step {
              %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc249)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc250)
              cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc364)
              cir.yield loc(#loc360)
            } loc(#loc360)
          } loc(#loc360)
        } else {
          %18 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc181)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc181)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc251)
        } loc(#loc358)
      } loc(#loc355)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc252)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc253)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc253)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc252)
    } loc(#loc340)
    cir.return loc(#loc183)
  } loc(#loc338)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc366)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc367)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc259)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc367)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc260)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc261)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc368)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc263)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc263)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc263)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc263)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc263)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc263)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc263)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc263)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc263)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc263)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc263)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc263)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc263)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc263)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc263)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc263)
      cir.yield %24 : !u32i loc(#loc263)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc263)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc263)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc263)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc263)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc263)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc263)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc263)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc263)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc263)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc263)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc263)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc263)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc263)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc263)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc263)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc263)
      cir.yield %28 : !u32i loc(#loc263)
    }) : (!cir.bool) -> !u32i loc(#loc263)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc263)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc369)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc265)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc266)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc265)
    cir.return loc(#loc255)
  } loc(#loc365)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":46:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":22:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":50:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":23:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":24:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":49:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":25:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":25:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:54)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:38)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:53)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:39)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:20)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:36)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:35)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:21)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":30:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":31:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":31:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":31:20)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":31:21)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:30)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":35:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":47:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":35:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":35:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":35:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":36:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":43:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":45:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":37:28)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":37:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":37:20)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":37:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":42:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:21)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:26)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":40:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":41:30)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":41:37)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":41:38)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":41:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":46:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":48:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":48:14)
#loc79 = loc("/usr/include/stdlib.h":573:1)
#loc80 = loc("/usr/include/stdlib.h":573:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":52:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":63:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":54:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":54:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":56:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":56:29)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":58:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":58:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":58:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":60:12)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":60:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":62:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":62:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":153:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":157:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":155:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":155:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":156:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":156:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":70:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":98:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":71:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":72:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":97:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":73:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":73:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:54)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:31)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:38)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:43)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:53)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:39)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:20)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:29)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:30)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:36)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:35)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":80:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:18)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:14)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:21)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:25)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":78:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":79:25)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":79:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":79:20)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":79:21)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:30)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:29)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":83:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":95:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":83:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":83:21)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":83:18)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":84:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":91:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":93:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":85:28)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":85:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":85:20)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":85:24)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":90:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:21)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:17)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:24)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:28)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:26)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":88:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":89:30)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":89:37)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":89:38)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":89:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:33)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:32)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":94:23)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":94:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":96:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":96:14)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":100:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":110:1)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":102:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":102:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":103:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":103:29)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":105:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":105:12)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":105:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":108:12)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":108:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":109:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":109:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":136:23)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":113:1)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":140:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":114:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":115:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":139:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":116:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":116:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:54)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:31)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:38)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:43)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:53)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:39)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:23)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:20)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:29)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:30)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:36)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:35)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":123:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:18)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:14)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:21)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:25)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:23)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":121:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":122:25)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":122:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":122:20)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":122:21)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:29)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":137:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:21)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:18)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:23)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:26)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:34)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:36)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:31)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":126:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":133:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":135:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":127:28)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":127:13)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":127:20)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":127:24)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":132:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:21)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:17)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:24)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:28)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:26)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":130:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":131:30)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":131:37)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":131:38)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":131:17)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:33)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:32)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":136:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":138:9)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":138:14)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":142:1)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":151:1)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":144:5)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":144:9)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":145:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":145:29)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":147:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":147:12)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":147:5)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":149:12)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":149:5)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":150:5)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":150:13)
#loc267 = loc(fused[#loc1, #loc2])
#loc268 = loc(fused[#loc3, #loc4])
#loc269 = loc(fused[#loc5, #loc6])
#loc270 = loc(fused[#loc7, #loc8])
#loc271 = loc(fused[#loc10, #loc11])
#loc272 = loc(fused[#loc12, #loc13])
#loc274 = loc(fused[#loc17, #loc18])
#loc275 = loc(fused[#loc19, #loc20])
#loc276 = loc(fused[#loc21, #loc22])
#loc277 = loc(fused[#loc25, #loc26])
#loc278 = loc(fused[#loc24, #loc26])
#loc279 = loc(fused[#loc23, #loc22])
#loc280 = loc(fused[#loc27, #loc28])
#loc281 = loc(fused[#loc29, #loc30])
#loc282 = loc(fused[#loc32, #loc28])
#loc283 = loc(fused[#loc36, #loc37])
#loc284 = loc(fused[#loc39, #loc38])
#loc285 = loc(fused[#loc40, #loc41])
#loc286 = loc(fused[#loc43, #loc37])
#loc287 = loc(fused[#loc45, #loc44])
#loc288 = loc(fused[#loc49, #loc48])
#loc289 = loc(fused[#loc50, #loc51])
#loc290 = loc(fused[#loc52, #loc53])
#loc291 = loc(fused[#loc55, #loc56, #loc57, #loc51])
#loc292 = loc(fused[#loc59, #loc58])
#loc293 = loc(fused[#loc62, #loc63])
#loc294 = loc(fused[#loc65, #loc64])
#loc295 = loc(fused[#loc66, #loc67])
#loc296 = loc(fused[#loc69, #loc63])
#loc297 = loc(fused[#loc75, #loc74])
#loc298 = loc(fused[#loc79, #loc80])
#loc299 = loc(fused[#loc81, #loc82])
#loc300 = loc(fused[#loc83, #loc84])
#loc301 = loc(fused[#loc85, #loc86])
#loc302 = loc(fused[#loc89, #loc87])
#loc303 = loc(fused[#loc91, #loc90])
#loc304 = loc(fused[#loc94, #loc95])
#loc305 = loc(fused[#loc96, #loc97])
#loc306 = loc(fused[#loc98, #loc99])
#loc307 = loc(fused[#loc100, #loc101])
#loc309 = loc(fused[#loc105, #loc106])
#loc310 = loc(fused[#loc107, #loc108])
#loc311 = loc(fused[#loc109, #loc110])
#loc312 = loc(fused[#loc113, #loc114])
#loc313 = loc(fused[#loc112, #loc114])
#loc314 = loc(fused[#loc111, #loc110])
#loc315 = loc(fused[#loc115, #loc116])
#loc316 = loc(fused[#loc117, #loc118])
#loc317 = loc(fused[#loc120, #loc116])
#loc318 = loc(fused[#loc124, #loc125])
#loc319 = loc(fused[#loc127, #loc126])
#loc320 = loc(fused[#loc128, #loc129])
#loc321 = loc(fused[#loc131, #loc125])
#loc322 = loc(fused[#loc133, #loc132])
#loc323 = loc(fused[#loc137, #loc136])
#loc324 = loc(fused[#loc138, #loc139])
#loc325 = loc(fused[#loc140, #loc141])
#loc326 = loc(fused[#loc143, #loc144, #loc145, #loc139])
#loc327 = loc(fused[#loc147, #loc146])
#loc328 = loc(fused[#loc150, #loc151])
#loc329 = loc(fused[#loc153, #loc152])
#loc330 = loc(fused[#loc154, #loc155])
#loc331 = loc(fused[#loc157, #loc151])
#loc332 = loc(fused[#loc163, #loc162])
#loc333 = loc(fused[#loc168, #loc169])
#loc334 = loc(fused[#loc170, #loc171])
#loc335 = loc(fused[#loc172, #loc173])
#loc336 = loc(fused[#loc176, #loc174])
#loc337 = loc(fused[#loc178, #loc177])
#loc338 = loc(fused[#loc182, #loc183])
#loc340 = loc(fused[#loc187, #loc188])
#loc341 = loc(fused[#loc189, #loc190])
#loc342 = loc(fused[#loc191, #loc192])
#loc343 = loc(fused[#loc195, #loc196])
#loc344 = loc(fused[#loc194, #loc196])
#loc345 = loc(fused[#loc193, #loc192])
#loc346 = loc(fused[#loc197, #loc198])
#loc347 = loc(fused[#loc199, #loc200])
#loc348 = loc(fused[#loc202, #loc198])
#loc349 = loc(fused[#loc206, #loc207])
#loc350 = loc(fused[#loc209, #loc208])
#loc351 = loc(fused[#loc210, #loc211])
#loc352 = loc(fused[#loc213, #loc207])
#loc353 = loc(fused[#loc215, #loc214])
#loc354 = loc(fused[#loc219, #loc218])
#loc355 = loc(fused[#loc220, #loc221])
#loc356 = loc(fused[#loc222, #loc223])
#loc357 = loc(fused[#loc226, #loc228])
#loc358 = loc(fused[#loc230, #loc231, #loc232, #loc221])
#loc359 = loc(fused[#loc234, #loc233])
#loc360 = loc(fused[#loc237, #loc238])
#loc361 = loc(fused[#loc240, #loc239])
#loc362 = loc(fused[#loc241, #loc242])
#loc363 = loc(fused[#loc244, #loc238])
#loc364 = loc(fused[#loc250, #loc249])
#loc365 = loc(fused[#loc254, #loc255])
#loc366 = loc(fused[#loc256, #loc257])
#loc367 = loc(fused[#loc258, #loc259])
#loc368 = loc(fused[#loc262, #loc260])
#loc369 = loc(fused[#loc264, #loc263])
