!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc154)
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc155)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc156)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printIntLine(!s32i) loc(#loc157)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_modulo_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc15)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc154)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc21)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc156)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc21)
      } loc(#loc162)
    } loc(#loc161)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc154)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc25)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc27)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc165)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc29)
      } loc(#loc164)
    } loc(#loc163)
    cir.return loc(#loc11)
  } loc(#loc158)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_modulo_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc166)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc171)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc172)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc154)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc55)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc57)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc156)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc58)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc59)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc59)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc57)
      } loc(#loc177)
    } loc(#loc176)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc171)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc62)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc70)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !s32i loc(#loc181)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc71)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc75)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc183)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc77)
          } else {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc45)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc182)
        } loc(#loc180)
      } loc(#loc179)
    } loc(#loc178)
    cir.return loc(#loc47)
  } loc(#loc173)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc154)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc88)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc90)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc156)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc90)
      } loc(#loc188)
    } loc(#loc187)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc154)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc95)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !s32i loc(#loc192)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc101)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc105)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc194)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc107)
          } else {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc108)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc108)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          } loc(#loc193)
        } loc(#loc191)
      } loc(#loc190)
    } loc(#loc189)
    cir.return loc(#loc80)
  } loc(#loc184)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc115)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc171)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc119)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc119)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc124)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc125)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
      } loc(#loc199)
    } loc(#loc198)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc154)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc129)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc131)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc203)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc133)
      } loc(#loc202)
    } loc(#loc201)
    cir.return loc(#loc111)
  } loc(#loc195)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc139)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc154)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc143)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc143)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc145)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
      } loc(#loc208)
    } loc(#loc207)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc154)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc149)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc151)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc212)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc153)
      } loc(#loc211)
    } loc(#loc210)
    cir.return loc(#loc135)
  } loc(#loc204)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":23:1)
#loc2 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":23:25)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":36:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":28:1)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":43:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":30:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":30:9)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":32:13)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":32:12)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":32:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":33:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":37:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":33:8)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":34:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":36:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":36:16)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":38:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":42:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":38:8)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":39:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":41:22)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":41:28)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":41:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":145:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":151:1)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":147:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":147:14)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":148:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":148:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":149:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":149:14)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":150:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":150:14)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":24:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":24:26)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":63:19)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":74:23)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":50:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":77:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":52:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":52:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":54:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":54:12)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":54:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":55:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":59:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":55:8)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":56:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":58:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":58:16)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":58:23)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":60:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":76:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":60:8)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":61:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":64:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":66:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":63:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":68:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":75:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":68:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":68:21)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":68:18)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":69:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":71:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":73:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":70:26)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":70:32)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":70:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":74:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":80:1)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":102:1)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":82:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":82:9)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":84:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":84:12)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":84:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":85:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":89:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":85:8)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":86:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":88:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":88:16)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":88:23)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":90:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":101:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":90:8)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":91:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":93:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":100:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":93:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":93:21)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":93:18)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":94:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":96:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":98:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":95:26)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":95:32)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":95:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":99:23)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":99:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":105:1)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":125:1)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":107:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":107:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":109:13)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":109:12)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":109:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":110:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":119:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":110:8)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":111:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":114:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":116:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":113:19)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":113:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":118:16)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":118:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":120:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":124:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":120:8)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":121:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":123:22)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":123:28)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":123:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":128:1)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":143:1)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":130:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":130:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":132:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":132:12)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":132:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":133:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":137:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":133:8)
#loc144 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":134:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":136:16)
#loc146 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":136:9)
#loc147 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":138:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":142:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":138:8)
#loc150 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":139:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":141:22)
#loc152 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":141:28)
#loc153 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_05.c":141:9)
#loc154 = loc(fused[#loc1, #loc2])
#loc155 = loc(fused[#loc3, #loc4])
#loc156 = loc(fused[#loc5, #loc6])
#loc157 = loc(fused[#loc8, #loc9])
#loc158 = loc(fused[#loc10, #loc11])
#loc159 = loc(fused[#loc12, #loc13])
#loc160 = loc(fused[#loc16, #loc14])
#loc161 = loc(fused[#loc17, #loc18])
#loc162 = loc(fused[#loc20, #loc18])
#loc163 = loc(fused[#loc23, #loc24])
#loc164 = loc(fused[#loc26, #loc24])
#loc165 = loc(fused[#loc27, #loc28])
#loc166 = loc(fused[#loc30, #loc31])
#loc167 = loc(fused[#loc32, #loc33])
#loc168 = loc(fused[#loc34, #loc35])
#loc169 = loc(fused[#loc36, #loc37])
#loc170 = loc(fused[#loc38, #loc39])
#loc171 = loc(fused[#loc40, #loc41])
#loc172 = loc(fused[#loc42, #loc43])
#loc173 = loc(fused[#loc46, #loc47])
#loc174 = loc(fused[#loc48, #loc49])
#loc175 = loc(fused[#loc52, #loc50])
#loc176 = loc(fused[#loc53, #loc54])
#loc177 = loc(fused[#loc56, #loc54])
#loc178 = loc(fused[#loc60, #loc61])
#loc179 = loc(fused[#loc63, #loc64, #loc65, #loc61])
#loc180 = loc(fused[#loc67, #loc68])
#loc181 = loc(fused[#loc69, #loc70])
#loc182 = loc(fused[#loc72, #loc73, #loc74, #loc68])
#loc183 = loc(fused[#loc75, #loc76])
#loc184 = loc(fused[#loc79, #loc80])
#loc185 = loc(fused[#loc81, #loc82])
#loc186 = loc(fused[#loc85, #loc83])
#loc187 = loc(fused[#loc86, #loc87])
#loc188 = loc(fused[#loc89, #loc87])
#loc189 = loc(fused[#loc93, #loc94])
#loc190 = loc(fused[#loc96, #loc94])
#loc191 = loc(fused[#loc97, #loc98])
#loc192 = loc(fused[#loc99, #loc100])
#loc193 = loc(fused[#loc102, #loc103, #loc104, #loc98])
#loc194 = loc(fused[#loc105, #loc106])
#loc195 = loc(fused[#loc110, #loc111])
#loc196 = loc(fused[#loc112, #loc113])
#loc197 = loc(fused[#loc116, #loc114])
#loc198 = loc(fused[#loc117, #loc118])
#loc199 = loc(fused[#loc120, #loc121, #loc122, #loc118])
#loc200 = loc(fused[#loc126, #loc125])
#loc201 = loc(fused[#loc127, #loc128])
#loc202 = loc(fused[#loc130, #loc128])
#loc203 = loc(fused[#loc131, #loc132])
#loc204 = loc(fused[#loc134, #loc135])
#loc205 = loc(fused[#loc136, #loc137])
#loc206 = loc(fused[#loc140, #loc138])
#loc207 = loc(fused[#loc141, #loc142])
#loc208 = loc(fused[#loc144, #loc142])
#loc209 = loc(fused[#loc146, #loc145])
#loc210 = loc(fused[#loc147, #loc148])
#loc211 = loc(fused[#loc150, #loc148])
#loc212 = loc(fused[#loc151, #loc152])
