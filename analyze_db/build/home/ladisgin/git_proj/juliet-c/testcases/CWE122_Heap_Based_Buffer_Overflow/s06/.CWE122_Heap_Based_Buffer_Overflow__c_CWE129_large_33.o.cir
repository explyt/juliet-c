!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":130:27)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc235)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc236)
  cir.func private @printIntLine(!s32i) loc(#loc237)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc239)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc242)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc243)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc244)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc245)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc23)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc25)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc27)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb1 loc(#loc248)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc15)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.br ^bb2 loc(#loc249)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc33)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc34)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc34)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc250)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc251)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc33)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc252)
    cir.store %16, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc243)
    cir.br ^bb3 loc(#loc253)
  ^bb3:  // pred: ^bb2
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc40)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc254)
    cir.brcond %19 ^bb4, ^bb5 loc(#loc255)
  ^bb4:  // pred: ^bb3
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc42)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc44)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc42)
    cir.br ^bb5 loc(#loc38)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc38)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc256)
  ^bb7:  // pred: ^bb6
    %23 = cir.const #cir.int<0> : !s32i loc(#loc47)
    cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.br ^bb8 loc(#loc256)
  ^bb8:  // 2 preds: ^bb7, ^bb10
    %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc50)
    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc258)
    cir.brcond %26 ^bb9, ^bb11 loc(#loc258)
  ^bb9:  // pred: ^bb8
    %27 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %28 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc54)
    cir.store %27, %30 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    cir.br ^bb10 loc(#loc46)
  ^bb10:  // pred: ^bb9
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %32 = cir.unary(inc, %31) : !s32i, !s32i loc(#loc56)
    cir.store %32, %1 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    cir.br ^bb8 loc(#loc256)
  ^bb11:  // pred: ^bb8
    cir.br ^bb12 loc(#loc46)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc261)
  ^bb13:  // pred: ^bb12
    %33 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %35 = cir.cmp(ge, %33, %34) : !s32i, !cir.bool loc(#loc262)
    cir.brcond %35 ^bb14, ^bb21 loc(#loc263)
  ^bb14:  // pred: ^bb13
    %36 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %37 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!s32i>, %38 : !s32i), !cir.ptr<!s32i> loc(#loc67)
    cir.store %36, %39 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.br ^bb15 loc(#loc265)
  ^bb15:  // pred: ^bb14
    %40 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.br ^bb16 loc(#loc265)
  ^bb16:  // 2 preds: ^bb15, ^bb18
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %42 = cir.const #cir.int<10> : !s32i loc(#loc73)
    %43 = cir.cmp(lt, %41, %42) : !s32i, !cir.bool loc(#loc267)
    cir.brcond %43 ^bb17, ^bb19 loc(#loc267)
  ^bb17:  // pred: ^bb16
    %44 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %46 = cir.ptr_stride(%44 : !cir.ptr<!s32i>, %45 : !s32i), !cir.ptr<!s32i> loc(#loc76)
    %47 = cir.load %46 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc77)
    cir.br ^bb18 loc(#loc69)
  ^bb18:  // pred: ^bb17
    %48 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %49 = cir.unary(inc, %48) : !s32i, !s32i loc(#loc79)
    cir.store %49, %1 : !s32i, !cir.ptr<!s32i> loc(#loc268)
    cir.br ^bb16 loc(#loc265)
  ^bb19:  // pred: ^bb16
    cir.br ^bb20 loc(#loc69)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc62)
  ^bb21:  // pred: ^bb13
    %50 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb22 loc(#loc58)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc58)
  ^bb23:  // pred: ^bb22
    %52 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc81)
    cir.call @free(%53) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc82)
    cir.br ^bb24 loc(#loc32)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc30)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc13)
  } loc(#loc240)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc270)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc271)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc272)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc273)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc274)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc94)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc96)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    %7 = cir.const #cir.int<7> : !s32i loc(#loc98)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    cir.br ^bb1 loc(#loc277)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.br ^bb2 loc(#loc278)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc104)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc105)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc105)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc279)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc280)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc104)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc281)
    cir.store %16, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc272)
    cir.br ^bb3 loc(#loc282)
  ^bb3:  // pred: ^bb2
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc111)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc283)
    cir.brcond %19 ^bb4, ^bb5 loc(#loc284)
  ^bb4:  // pred: ^bb3
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc113)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc115)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc113)
    cir.br ^bb5 loc(#loc109)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc109)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc285)
  ^bb7:  // pred: ^bb6
    %23 = cir.const #cir.int<0> : !s32i loc(#loc118)
    cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc286)
    cir.br ^bb8 loc(#loc285)
  ^bb8:  // 2 preds: ^bb7, ^bb10
    %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc121)
    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc287)
    cir.brcond %26 ^bb9, ^bb11 loc(#loc287)
  ^bb9:  // pred: ^bb8
    %27 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %28 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc125)
    cir.store %27, %30 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.br ^bb10 loc(#loc117)
  ^bb10:  // pred: ^bb9
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %32 = cir.unary(inc, %31) : !s32i, !s32i loc(#loc127)
    cir.store %32, %1 : !s32i, !cir.ptr<!s32i> loc(#loc289)
    cir.br ^bb8 loc(#loc285)
  ^bb11:  // pred: ^bb8
    cir.br ^bb12 loc(#loc117)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc290)
  ^bb13:  // pred: ^bb12
    %33 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %35 = cir.cmp(ge, %33, %34) : !s32i, !cir.bool loc(#loc291)
    cir.brcond %35 ^bb14, ^bb21 loc(#loc292)
  ^bb14:  // pred: ^bb13
    %36 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %37 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!s32i>, %38 : !s32i), !cir.ptr<!s32i> loc(#loc138)
    cir.store %36, %39 : !s32i, !cir.ptr<!s32i> loc(#loc293)
    cir.br ^bb15 loc(#loc294)
  ^bb15:  // pred: ^bb14
    %40 = cir.const #cir.int<0> : !s32i loc(#loc141)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc295)
    cir.br ^bb16 loc(#loc294)
  ^bb16:  // 2 preds: ^bb15, ^bb18
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %42 = cir.const #cir.int<10> : !s32i loc(#loc144)
    %43 = cir.cmp(lt, %41, %42) : !s32i, !cir.bool loc(#loc296)
    cir.brcond %43 ^bb17, ^bb19 loc(#loc296)
  ^bb17:  // pred: ^bb16
    %44 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %46 = cir.ptr_stride(%44 : !cir.ptr<!s32i>, %45 : !s32i), !cir.ptr<!s32i> loc(#loc147)
    %47 = cir.load %46 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc148)
    cir.br ^bb18 loc(#loc140)
  ^bb18:  // pred: ^bb17
    %48 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %49 = cir.unary(inc, %48) : !s32i, !s32i loc(#loc150)
    cir.store %49, %1 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    cir.br ^bb16 loc(#loc294)
  ^bb19:  // pred: ^bb16
    cir.br ^bb20 loc(#loc140)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc133)
  ^bb21:  // pred: ^bb13
    %50 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc151)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    cir.br ^bb22 loc(#loc129)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc129)
  ^bb23:  // pred: ^bb22
    %52 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc153)
    cir.call @free(%53) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc154)
    cir.br ^bb24 loc(#loc103)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc101)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc84)
  } loc(#loc269)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc155)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc299)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc300)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc301)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc302)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc303)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc169)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc171)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    cir.br ^bb1 loc(#loc306)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    cir.br ^bb2 loc(#loc307)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc177)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc178)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc178)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc308)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc309)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc177)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc310)
    cir.store %16, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc301)
    cir.br ^bb3 loc(#loc311)
  ^bb3:  // pred: ^bb2
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc184)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc312)
    cir.brcond %19 ^bb4, ^bb5 loc(#loc313)
  ^bb4:  // pred: ^bb3
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc186)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc187)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc188)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc186)
    cir.br ^bb5 loc(#loc182)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc182)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc314)
  ^bb7:  // pred: ^bb6
    %23 = cir.const #cir.int<0> : !s32i loc(#loc191)
    cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    cir.br ^bb8 loc(#loc314)
  ^bb8:  // 2 preds: ^bb7, ^bb10
    %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc194)
    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc316)
    cir.brcond %26 ^bb9, ^bb11 loc(#loc316)
  ^bb9:  // pred: ^bb8
    %27 = cir.const #cir.int<0> : !s32i loc(#loc195)
    %28 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc196)
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc198)
    cir.store %27, %30 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    cir.br ^bb10 loc(#loc190)
  ^bb10:  // pred: ^bb9
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc199)
    %32 = cir.unary(inc, %31) : !s32i, !s32i loc(#loc200)
    cir.store %32, %1 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    cir.br ^bb8 loc(#loc314)
  ^bb11:  // pred: ^bb8
    cir.br ^bb12 loc(#loc190)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc319)
  ^bb13:  // pred: ^bb12
    %33 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc204)
    %35 = cir.cmp(ge, %33, %34) : !s32i, !cir.bool loc(#loc320)
    cir.brcond %35 ^bb14, ^bb19 loc(#loc205)
  ^bb14:  // pred: ^bb13
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
    %37 = cir.const #cir.int<10> : !s32i loc(#loc207)
    %38 = cir.cmp(lt, %36, %37) : !s32i, !cir.bool loc(#loc321)
    cir.brcond %38 ^bb15, ^bb16 loc(#loc205)
  ^bb15:  // pred: ^bb14
    %39 = cir.const #true loc(#loc205)
    cir.br ^bb17(%39 : !cir.bool) loc(#loc205)
  ^bb16:  // pred: ^bb14
    %40 = cir.const #false loc(#loc205)
    cir.br ^bb17(%40 : !cir.bool) loc(#loc205)
  ^bb17(%41: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":130:27)):  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc205)
  ^bb18:  // pred: ^bb17
    cir.br ^bb20(%41 : !cir.bool) loc(#loc205)
  ^bb19:  // pred: ^bb13
    %42 = cir.const #false loc(#loc205)
    cir.br ^bb20(%42 : !cir.bool) loc(#loc205)
  ^bb20(%43: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":130:27)):  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc205)
  ^bb21:  // pred: ^bb20
    cir.brcond %43 ^bb22, ^bb29 loc(#loc322)
  ^bb22:  // pred: ^bb21
    %44 = cir.const #cir.int<1> : !s32i loc(#loc212)
    %45 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc213)
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc214)
    %47 = cir.ptr_stride(%45 : !cir.ptr<!s32i>, %46 : !s32i), !cir.ptr<!s32i> loc(#loc215)
    cir.store %44, %47 : !s32i, !cir.ptr<!s32i> loc(#loc323)
    cir.br ^bb23 loc(#loc324)
  ^bb23:  // pred: ^bb22
    %48 = cir.const #cir.int<0> : !s32i loc(#loc218)
    cir.store %48, %1 : !s32i, !cir.ptr<!s32i> loc(#loc325)
    cir.br ^bb24 loc(#loc324)
  ^bb24:  // 2 preds: ^bb23, ^bb26
    %49 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    %50 = cir.const #cir.int<10> : !s32i loc(#loc221)
    %51 = cir.cmp(lt, %49, %50) : !s32i, !cir.bool loc(#loc326)
    cir.brcond %51 ^bb25, ^bb27 loc(#loc326)
  ^bb25:  // pred: ^bb24
    %52 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
    %53 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    %54 = cir.ptr_stride(%52 : !cir.ptr<!s32i>, %53 : !s32i), !cir.ptr<!s32i> loc(#loc224)
    %55 = cir.load %54 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc225)
    cir.br ^bb26 loc(#loc217)
  ^bb26:  // pred: ^bb25
    %56 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    %57 = cir.unary(inc, %56) : !s32i, !s32i loc(#loc227)
    cir.store %57, %1 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    cir.br ^bb24 loc(#loc324)
  ^bb27:  // pred: ^bb24
    cir.br ^bb28 loc(#loc217)
  ^bb28:  // pred: ^bb27
    cir.br ^bb30 loc(#loc210)
  ^bb29:  // pred: ^bb21
    %58 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc155)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc228)
    cir.br ^bb30 loc(#loc202)
  ^bb30:  // 2 preds: ^bb28, ^bb29
    cir.br ^bb31 loc(#loc202)
  ^bb31:  // pred: ^bb30
    %60 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc229)
    cir.call @free(%61) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc230)
    cir.br ^bb32 loc(#loc176)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc174)
  ^bb33:  // pred: ^bb32
    cir.return loc(#loc157)
  } loc(#loc298)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33L7goodG2BEv() : () -> () loc(#loc233)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33L7goodB2GEv() : () -> () loc(#loc234)
    cir.return loc(#loc232)
  } loc(#loc328)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":57:27)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":25:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":62:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":34:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":34:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":36:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":36:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":37:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":37:58)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":27:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":27:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":28:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":28:20)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":30:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":30:12)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":30:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":32:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":32:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":33:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":61:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":35:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":60:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":37:35)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":37:42)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":37:47)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":37:57)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":38:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":38:43)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":38:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":38:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":38:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":38:34)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":38:40)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":38:39)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":40:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":43:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":40:22)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":40:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":40:25)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":40:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":42:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":42:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":42:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":42:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":40:34)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":40:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":46:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":58:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":46:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":46:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":47:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":54:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":56:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":48:32)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":48:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":48:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":48:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":50:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":53:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":50:25)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":50:21)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":50:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":50:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":52:34)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":52:41)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":52:42)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":52:21)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":50:37)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":50:36)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":57:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":59:18)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":59:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":69:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":107:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":79:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":79:20)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":81:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":81:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":82:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":82:58)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":71:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":71:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":72:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":72:20)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":74:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":74:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":74:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":77:12)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":77:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":78:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":106:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":80:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":105:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":82:35)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":82:42)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":82:47)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":82:57)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":83:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":83:43)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":83:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":83:27)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":83:33)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":83:34)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":83:40)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":83:39)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":85:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":88:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":85:22)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":85:18)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":85:25)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":85:29)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":87:29)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":87:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":87:24)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":87:25)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":85:34)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":85:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":91:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":103:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":91:17)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":91:25)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":92:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":99:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":101:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":93:32)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":93:17)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":93:24)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":93:28)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":95:17)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":98:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":95:25)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":95:21)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":95:28)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":95:32)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":97:34)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":97:41)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":97:42)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":97:21)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":95:37)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":95:36)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":102:27)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":102:17)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":104:18)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":104:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":141:27)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":110:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":146:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":119:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":119:20)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":121:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":121:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":122:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":122:58)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":112:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":112:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":113:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":113:20)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":115:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":115:12)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":115:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":117:12)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":117:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":118:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":145:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":120:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":144:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":122:35)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":122:42)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":122:47)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":122:57)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":123:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":123:43)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":123:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":123:27)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":123:33)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":123:34)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":123:40)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":123:39)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":125:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":128:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":125:22)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":125:18)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":125:25)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":125:29)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":127:29)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":127:17)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":127:24)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":127:25)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":125:34)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":125:33)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":130:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":142:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":130:17)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":130:25)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":130:30)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":130:38)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":130:40)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":131:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":138:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":140:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":132:32)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":132:17)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":132:24)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":132:28)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":134:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":137:17)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":134:25)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":134:21)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":134:28)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":134:32)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":136:34)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":136:41)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":136:42)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":136:21)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":134:37)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":134:36)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":141:17)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":143:18)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":143:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":148:1)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":152:1)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":150:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_33.cpp":151:5)
#loc235 = loc(fused[#loc1, #loc2])
#loc236 = loc(fused[#loc3, #loc4])
#loc237 = loc(fused[#loc5, #loc6])
#loc238 = loc(fused[#loc7, #loc8])
#loc239 = loc(fused[#loc10, #loc11])
#loc240 = loc(fused[#loc12, #loc13])
#loc241 = loc(fused[#loc14, #loc15])
#loc242 = loc(fused[#loc16, #loc17])
#loc243 = loc(fused[#loc18, #loc19])
#loc244 = loc(fused[#loc20, #loc21])
#loc245 = loc(fused[#loc22, #loc23])
#loc246 = loc(fused[#loc26, #loc24])
#loc247 = loc(fused[#loc28, #loc27])
#loc248 = loc(fused[#loc29, #loc30])
#loc249 = loc(fused[#loc31, #loc32])
#loc250 = loc(fused[#loc35, #loc36])
#loc251 = loc(fused[#loc34, #loc36])
#loc252 = loc(fused[#loc33, #loc19])
#loc253 = loc(fused[#loc37, #loc38])
#loc254 = loc(fused[#loc39, #loc40])
#loc255 = loc(fused[#loc41, #loc38])
#loc256 = loc(fused[#loc45, #loc46])
#loc257 = loc(fused[#loc48, #loc47])
#loc258 = loc(fused[#loc49, #loc50])
#loc259 = loc(fused[#loc52, #loc51])
#loc260 = loc(fused[#loc56, #loc55])
#loc261 = loc(fused[#loc57, #loc58])
#loc262 = loc(fused[#loc59, #loc60])
#loc263 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc264 = loc(fused[#loc65, #loc64])
#loc265 = loc(fused[#loc68, #loc69])
#loc266 = loc(fused[#loc71, #loc70])
#loc267 = loc(fused[#loc72, #loc73])
#loc268 = loc(fused[#loc79, #loc78])
#loc269 = loc(fused[#loc83, #loc84])
#loc270 = loc(fused[#loc85, #loc86])
#loc271 = loc(fused[#loc87, #loc88])
#loc272 = loc(fused[#loc89, #loc90])
#loc273 = loc(fused[#loc91, #loc92])
#loc274 = loc(fused[#loc93, #loc94])
#loc275 = loc(fused[#loc97, #loc95])
#loc276 = loc(fused[#loc99, #loc98])
#loc277 = loc(fused[#loc100, #loc101])
#loc278 = loc(fused[#loc102, #loc103])
#loc279 = loc(fused[#loc106, #loc107])
#loc280 = loc(fused[#loc105, #loc107])
#loc281 = loc(fused[#loc104, #loc90])
#loc282 = loc(fused[#loc108, #loc109])
#loc283 = loc(fused[#loc110, #loc111])
#loc284 = loc(fused[#loc112, #loc109])
#loc285 = loc(fused[#loc116, #loc117])
#loc286 = loc(fused[#loc119, #loc118])
#loc287 = loc(fused[#loc120, #loc121])
#loc288 = loc(fused[#loc123, #loc122])
#loc289 = loc(fused[#loc127, #loc126])
#loc290 = loc(fused[#loc128, #loc129])
#loc291 = loc(fused[#loc130, #loc131])
#loc292 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc293 = loc(fused[#loc136, #loc135])
#loc294 = loc(fused[#loc139, #loc140])
#loc295 = loc(fused[#loc142, #loc141])
#loc296 = loc(fused[#loc143, #loc144])
#loc297 = loc(fused[#loc150, #loc149])
#loc298 = loc(fused[#loc156, #loc157])
#loc299 = loc(fused[#loc158, #loc159])
#loc300 = loc(fused[#loc160, #loc161])
#loc301 = loc(fused[#loc162, #loc163])
#loc302 = loc(fused[#loc164, #loc165])
#loc303 = loc(fused[#loc166, #loc167])
#loc304 = loc(fused[#loc170, #loc168])
#loc305 = loc(fused[#loc172, #loc171])
#loc306 = loc(fused[#loc173, #loc174])
#loc307 = loc(fused[#loc175, #loc176])
#loc308 = loc(fused[#loc179, #loc180])
#loc309 = loc(fused[#loc178, #loc180])
#loc310 = loc(fused[#loc177, #loc163])
#loc311 = loc(fused[#loc181, #loc182])
#loc312 = loc(fused[#loc183, #loc184])
#loc313 = loc(fused[#loc185, #loc182])
#loc314 = loc(fused[#loc189, #loc190])
#loc315 = loc(fused[#loc192, #loc191])
#loc316 = loc(fused[#loc193, #loc194])
#loc317 = loc(fused[#loc196, #loc195])
#loc318 = loc(fused[#loc200, #loc199])
#loc319 = loc(fused[#loc201, #loc202])
#loc320 = loc(fused[#loc203, #loc204])
#loc321 = loc(fused[#loc206, #loc208])
#loc322 = loc(fused[#loc209, #loc210, #loc211, #loc202])
#loc323 = loc(fused[#loc213, #loc212])
#loc324 = loc(fused[#loc216, #loc217])
#loc325 = loc(fused[#loc219, #loc218])
#loc326 = loc(fused[#loc220, #loc221])
#loc327 = loc(fused[#loc227, #loc226])
#loc328 = loc(fused[#loc231, #loc232])
