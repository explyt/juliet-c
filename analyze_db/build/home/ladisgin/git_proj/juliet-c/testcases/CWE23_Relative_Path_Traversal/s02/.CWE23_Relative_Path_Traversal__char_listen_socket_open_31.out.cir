!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc260 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":203:10)
#loc261 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":203:14)
#loc262 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":203:20)
#loc263 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":203:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc380 = loc(fused[#loc260, #loc261])
#loc381 = loc(fused[#loc262, #loc263])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_31L7goodG2BEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc276)
  cir.global "private" constant cir_private @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_313badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc277)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc278)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc279)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc280)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc281)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc282)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc283)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc284)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc285)
  cir.func private @close(!s32i) -> !s32i loc(#loc286)
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc287)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_313badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc289)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc277)
    %2 = cir.get_global @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_313badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc277)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc277)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc29)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc290)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc292)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc293)
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc294)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc295)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc296)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc297)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc40)
      cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc295)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc42)
      cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc296)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc45)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc45)
      cir.store %16, %9 : !u64i, !cir.ptr<!u64i> loc(#loc297)
      cir.scope {
        cir.do {
          %17 = cir.const #cir.int<2> : !s32i loc(#loc49)
          %18 = cir.const #cir.int<1> : !u32i loc(#loc50)
          %19 = cir.cast(integral, %18 : !u32i), !s32i loc(#loc50)
          %20 = cir.const #cir.int<6> : !u32i loc(#loc51)
          %21 = cir.cast(integral, %20 : !u32i), !s32i loc(#loc51)
          %22 = cir.call @socket(%17, %19, %21) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
          cir.store %22, %7 : !s32i, !cir.ptr<!s32i> loc(#loc299)
          cir.scope {
            %75 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc57)
            %76 = cir.const #cir.int<1> : !s32i loc(#loc58)
            %77 = cir.unary(minus, %76) : !s32i, !s32i loc(#loc58)
            %78 = cir.cmp(eq, %75, %77) : !s32i, !cir.bool loc(#loc301)
            cir.if %78 {
              cir.break loc(#loc60)
            } loc(#loc302)
          } loc(#loc300)
          %23 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc303)
          %24 = cir.const #cir.int<0> : !s32i loc(#loc63)
          %25 = cir.const #cir.int<16> : !u64i loc(#loc304)
          cir.libc.memset %25 bytes from %23 set to %24 : !cir.ptr<!void>, !s32i, !u64i loc(#loc305)
          %26 = cir.const #cir.int<2> : !s32i loc(#loc68)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc68)
          %28 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
          cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc306)
          %29 = cir.const #cir.int<0> : !s32i loc(#loc71)
          %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc71)
          %31 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
          %32 = cir.get_member %31[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
          cir.store %30, %32 : !u32i, !cir.ptr<!u32i> loc(#loc307)
          %33 = cir.const #cir.int<27015> : !s32i loc(#loc75)
          %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc75)
          %35 = cir.call @htons(%34) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc76)
          %36 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
          cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc308)
          cir.scope {
            %75 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %76 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc310)
            %77 = cir.const #cir.int<16> : !u64i loc(#loc311)
            %78 = cir.cast(integral, %77 : !u64i), !u32i loc(#loc311)
            %79 = cir.call @bind(%75, %76, %78) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc87)
            %80 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %81 = cir.unary(minus, %80) : !s32i, !s32i loc(#loc88)
            %82 = cir.cmp(eq, %79, %81) : !s32i, !cir.bool loc(#loc312)
            cir.if %82 {
              cir.break loc(#loc90)
            } loc(#loc313)
          } loc(#loc309)
          cir.scope {
            %75 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            %76 = cir.const #cir.int<5> : !s32i loc(#loc94)
            %77 = cir.call @listen(%75, %76) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc95)
            %78 = cir.const #cir.int<1> : !s32i loc(#loc96)
            %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc96)
            %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc315)
            cir.if %80 {
              cir.break loc(#loc98)
            } loc(#loc316)
          } loc(#loc314)
          %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc99)
          %38 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc100)
          %39 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc101)
          %40 = cir.call @accept(%37, %38, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc102)
          cir.store %40, %8 : !s32i, !cir.ptr<!s32i> loc(#loc317)
          cir.scope {
            %75 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %76 = cir.const #cir.int<1> : !s32i loc(#loc108)
            %77 = cir.unary(minus, %76) : !s32i, !s32i loc(#loc108)
            %78 = cir.cmp(eq, %75, %77) : !s32i, !cir.bool loc(#loc319)
            cir.if %78 {
              cir.break loc(#loc110)
            } loc(#loc320)
          } loc(#loc318)
          %41 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc111)
          %42 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
          %43 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc113)
          %44 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc114)
          %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc321)
          %46 = cir.const #cir.int<1> : !u64i loc(#loc322)
          %47 = cir.const #cir.int<4096> : !s32i loc(#loc119)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc119)
          %49 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc120)
          %50 = cir.binop(sub, %48, %49) : !u64i loc(#loc323)
          %51 = cir.const #cir.int<1> : !s32i loc(#loc121)
          %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc121)
          %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc324)
          %54 = cir.binop(mul, %46, %53) : !u64i loc(#loc325)
          %55 = cir.const #cir.int<0> : !s32i loc(#loc123)
          %56 = cir.call @recv(%41, %45, %54, %55) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc124)
          %57 = cir.cast(integral, %56 : !s64i), !s32i loc(#loc124)
          cir.store %57, %4 : !s32i, !cir.ptr<!s32i> loc(#loc326)
          cir.scope {
            %75 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc129)
            %76 = cir.const #cir.int<1> : !s32i loc(#loc130)
            %77 = cir.unary(minus, %76) : !s32i, !s32i loc(#loc130)
            %78 = cir.cmp(eq, %75, %77) : !s32i, !cir.bool loc(#loc328)
            %79 = cir.ternary(%78, true {
              %80 = cir.const #true loc(#loc131)
              cir.yield %80 : !cir.bool loc(#loc131)
            }, false {
              %80 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %81 = cir.const #cir.int<0> : !s32i loc(#loc133)
              %82 = cir.cmp(eq, %80, %81) : !s32i, !cir.bool loc(#loc329)
              %83 = cir.ternary(%82, true {
                %84 = cir.const #true loc(#loc131)
                cir.yield %84 : !cir.bool loc(#loc131)
              }, false {
                %84 = cir.const #false loc(#loc131)
                cir.yield %84 : !cir.bool loc(#loc131)
              }) : (!cir.bool) -> !cir.bool loc(#loc131)
              cir.yield %83 : !cir.bool loc(#loc131)
            }) : (!cir.bool) -> !cir.bool loc(#loc131)
            cir.if %79 {
              cir.break loc(#loc135)
            } loc(#loc330)
          } loc(#loc327)
          %58 = cir.const #cir.int<0> : !s8i loc(#loc136)
          %59 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
          %60 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc138)
          %61 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc139)
          %62 = cir.cast(integral, %61 : !s32i), !u64i loc(#loc139)
          %63 = cir.const #cir.int<1> : !u64i loc(#loc331)
          %64 = cir.binop(div, %62, %63) : !u64i loc(#loc332)
          %65 = cir.binop(add, %60, %64) : !u64i loc(#loc333)
          %66 = cir.ptr_stride(%59 : !cir.ptr<!s8i>, %65 : !u64i), !cir.ptr<!s8i> loc(#loc142)
          cir.store %58, %66 : !s8i, !cir.ptr<!s8i> loc(#loc334)
          %67 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
          %68 = cir.const #cir.int<13> : !s8i loc(#loc144)
          %69 = cir.cast(integral, %68 : !s8i), !s32i loc(#loc144)
          %70 = cir.call @strchr(%67, %69) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc145)
          cir.store %70, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc335)
          cir.scope {
            %75 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
            %76 = cir.cast(ptr_to_bool, %75 : !cir.ptr<!s8i>), !cir.bool loc(#loc150)
            cir.if %76 {
              %77 = cir.const #cir.int<0> : !s8i loc(#loc152)
              %78 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
              cir.store %77, %78 : !s8i, !cir.ptr<!s8i> loc(#loc338)
            } loc(#loc337)
          } loc(#loc336)
          %71 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
          %72 = cir.const #cir.int<10> : !s8i loc(#loc156)
          %73 = cir.cast(integral, %72 : !s8i), !s32i loc(#loc156)
          %74 = cir.call @strchr(%71, %73) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc157)
          cir.store %74, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc339)
          cir.scope {
            %75 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
            %76 = cir.cast(ptr_to_bool, %75 : !cir.ptr<!s8i>), !cir.bool loc(#loc162)
            cir.if %76 {
              %77 = cir.const #cir.int<0> : !s8i loc(#loc164)
              %78 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
              cir.store %77, %78 : !s8i, !cir.ptr<!s8i> loc(#loc342)
            } loc(#loc341)
          } loc(#loc340)
          cir.yield loc(#loc48)
        } while {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc167)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc167)
          cir.condition(%18) loc(#loc167)
        } loc(#loc298)
      } loc(#loc298)
      cir.scope {
        %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc170)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc171)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc171)
        %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc344)
        cir.if %20 {
          %21 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc173)
          %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc174)
        } loc(#loc345)
      } loc(#loc343)
      cir.scope {
        %17 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc177)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc178)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc178)
        %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc347)
        cir.if %20 {
          %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc180)
          %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc181)
        } loc(#loc348)
      } loc(#loc346)
    } loc(#loc291)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc350)
      %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc351)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
      cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc350)
      %7 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
      cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc351)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc353)
        %9 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc192)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc193)
        %11 = cir.const #cir.int<64> : !s32i loc(#loc194)
        %12 = cir.binop(or, %10, %11) : !s32i loc(#loc354)
        %13 = cir.const #cir.int<256> : !s32i loc(#loc195)
        %14 = cir.const #cir.int<128> : !s32i loc(#loc196)
        %15 = cir.binop(or, %13, %14) : !s32i loc(#loc355)
        %16 = cir.call @open(%9, %12, %15) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc197)
        cir.store %16, %8 : !s32i, !cir.ptr<!s32i> loc(#loc356)
        cir.scope {
          %17 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc203)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc204)
          %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc358)
          cir.if %20 {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc206)
            %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc207)
          } loc(#loc359)
        } loc(#loc357)
      } loc(#loc352)
    } loc(#loc349)
    cir.return loc(#loc26)
  } loc(#loc288)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc360)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc210)
  cir.func internal private @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_31L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc362)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc276)
    %2 = cir.get_global @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_31L7goodG2BEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc276)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc276)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc215)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc363)
    %4 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc217)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc218)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc210)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc210)
    %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc217)
    cir.scope {
      %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc365)
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc366)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc222)
      cir.store %11, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc365)
      %12 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc224)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc366)
      cir.scope {
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc368)
        %14 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc229)
        %15 = cir.const #cir.int<2> : !s32i loc(#loc230)
        %16 = cir.const #cir.int<64> : !s32i loc(#loc231)
        %17 = cir.binop(or, %15, %16) : !s32i loc(#loc369)
        %18 = cir.const #cir.int<256> : !s32i loc(#loc232)
        %19 = cir.const #cir.int<128> : !s32i loc(#loc233)
        %20 = cir.binop(or, %18, %19) : !s32i loc(#loc370)
        %21 = cir.call @open(%14, %17, %20) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc234)
        cir.store %21, %13 : !s32i, !cir.ptr<!s32i> loc(#loc371)
        cir.scope {
          %22 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc239)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc240)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc241)
          %25 = cir.cmp(ne, %22, %24) : !s32i, !cir.bool loc(#loc373)
          cir.if %25 {
            %26 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc243)
            %27 = cir.call @close(%26) : (!s32i) -> !s32i loc(#loc244)
          } loc(#loc374)
        } loc(#loc372)
      } loc(#loc367)
    } loc(#loc364)
    cir.return loc(#loc212)
  } loc(#loc361)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_314goodEv() extra(#fn_attr1) {
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_31L7goodG2BEv() : () -> () loc(#loc247)
    cir.return loc(#loc246)
  } loc(#loc375)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc376)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc377)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc378)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc254)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc255)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc256)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc257)
  cir.func @main(%arg0: !s32i loc(fused[#loc260, #loc261]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc262, #loc263])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc380)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc381)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc259)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc264)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc265)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc266)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc266)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc267)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc254)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc254)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc268)
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_314goodEv() : () -> () loc(#loc269)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc255)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc255)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc270)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc256)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc256)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc271)
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_313badEv() : () -> () loc(#loc272)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc257)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc257)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc273)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc274)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc382)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc382)
    cir.return %15 : !s32i loc(#loc382)
  } loc(#loc379)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":167:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":167:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":63:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":63:37)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/sys/socket.h":102:1)
#loc8 = loc("/usr/include/sys/socket.h":102:62)
#loc9 = loc("/usr/include/netinet/in.h":404:1)
#loc10 = loc("/usr/include/netinet/in.h":405:40)
#loc11 = loc("/usr/include/sys/socket.h":112:1)
#loc12 = loc("/usr/include/sys/socket.h":113:6)
#loc13 = loc("/usr/include/sys/socket.h":296:1)
#loc14 = loc("/usr/include/sys/socket.h":296:39)
#loc15 = loc("/usr/include/sys/socket.h":306:1)
#loc16 = loc("/usr/include/sys/socket.h":307:38)
#loc17 = loc("/usr/include/sys/socket.h":145:1)
#loc18 = loc("/usr/include/sys/socket.h":145:68)
#loc19 = loc("/usr/include/string.h":226:1)
#loc20 = loc("/usr/include/string.h":227:50)
#loc21 = loc("/usr/include/unistd.h":358:1)
#loc22 = loc("/usr/include/unistd.h":358:27)
#loc23 = loc("/usr/include/fcntl.h":209:1)
#loc24 = loc("/usr/include/fcntl.h":209:56)
#loc25 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":60:1)
#loc26 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":157:1)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":62:5)
#loc28 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":62:12)
#loc29 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":64:12)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":64:5)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":65:5)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":143:5)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":70:9)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":70:13)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":71:9)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":71:28)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":72:9)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":72:15)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":73:9)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":73:31)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":74:9)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":74:31)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":75:9)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":75:37)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":75:26)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":75:33)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":76:9)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":128:17)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":86:35)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":86:44)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":86:57)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":86:28)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":86:13)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":86:68)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":87:13)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":90:13)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":87:17)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":87:33)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":88:13)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":89:17)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":91:20)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":91:21)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":91:30)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":91:33)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":91:47)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":91:13)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":91:48)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":92:34)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":92:13)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":93:39)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":93:13)
#loc75 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":94:38)
#loc76 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":94:32)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":94:13)
#loc79 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":94:46)
#loc80 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":95:13)
#loc81 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":98:13)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":95:22)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":95:54)
#loc84 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":95:55)
#loc85 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":95:64)
#loc86 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":95:78)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":95:17)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":95:84)
#loc89 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":96:13)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":97:17)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":99:13)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":102:13)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":99:24)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":99:38)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":99:17)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":99:57)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":100:13)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":101:17)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":103:35)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":103:49)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":103:55)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":103:28)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":103:13)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":103:59)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":104:13)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":107:13)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":104:17)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":104:33)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":105:13)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":106:17)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:31)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:54)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:61)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:59)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:45)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:68)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:71)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:82)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:87)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:102)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:112)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:113)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:116)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:26)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:13)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":109:117)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":110:13)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":113:13)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":110:17)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":110:31)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":110:44)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":110:47)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":110:61)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":111:13)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":112:17)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":115:57)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":115:13)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":115:18)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":115:28)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":115:41)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":115:52)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":115:53)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":117:30)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":117:36)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":117:23)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":117:13)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":117:40)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":118:13)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":121:13)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":118:17)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":119:13)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":120:28)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":120:18)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":120:17)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":122:30)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":122:36)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":122:23)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":122:13)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":122:40)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":123:13)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":126:13)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":123:17)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":124:13)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":125:28)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":125:18)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":125:17)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":128:16)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":129:9)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":132:9)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":129:13)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":129:29)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":130:9)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":131:26)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":131:13)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":133:9)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":136:9)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":133:13)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":133:29)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":134:9)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":135:26)
#loc181 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":135:13)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":144:5)
#loc183 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":156:5)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":145:9)
#loc185 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":145:27)
#loc186 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":146:9)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":146:23)
#loc188 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":147:9)
#loc189 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":155:9)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":148:13)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":148:17)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":150:29)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":150:35)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":150:42)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":150:51)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":150:59)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":150:24)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":150:13)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":150:67)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":151:13)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":154:13)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":151:17)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":151:30)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":151:29)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":152:13)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":153:23)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":153:17)
#loc208 = loc("/usr/include/string.h":149:1)
#loc209 = loc("/usr/include/string.h":150:14)
#loc210 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":170:18)
#loc211 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":164:1)
#loc212 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":184:1)
#loc213 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":166:5)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":166:12)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":168:12)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":168:5)
#loc217 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":170:5)
#loc218 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":170:12)
#loc219 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":171:5)
#loc220 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":183:5)
#loc221 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":172:9)
#loc222 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":172:27)
#loc223 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":173:9)
#loc224 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":173:23)
#loc225 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":174:9)
#loc226 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":182:9)
#loc227 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":175:13)
#loc228 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":175:17)
#loc229 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":177:29)
#loc230 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":177:35)
#loc231 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":177:42)
#loc232 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":177:51)
#loc233 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":177:59)
#loc234 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":177:24)
#loc235 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":177:13)
#loc236 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":177:67)
#loc237 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":178:13)
#loc238 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":181:13)
#loc239 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":178:17)
#loc240 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":178:30)
#loc241 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":178:29)
#loc242 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":179:13)
#loc243 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":180:23)
#loc244 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":180:17)
#loc245 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":186:1)
#loc246 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":189:1)
#loc247 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":188:5)
#loc248 = loc("/usr/include/stdlib.h":575:1)
#loc249 = loc("/usr/include/stdlib.h":575:41)
#loc250 = loc("/usr/include/time.h":76:1)
#loc251 = loc("/usr/include/time.h":76:38)
#loc252 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc253 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc254 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":208:15)
#loc255 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":210:15)
#loc256 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":213:15)
#loc257 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":215:15)
#loc258 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":203:1)
#loc259 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":218:1)
#loc264 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":204:1)
#loc265 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":206:27)
#loc266 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":206:22)
#loc267 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":206:5)
#loc268 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":208:5)
#loc269 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":209:5)
#loc270 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":210:5)
#loc271 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":213:5)
#loc272 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":214:5)
#loc273 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":215:5)
#loc274 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":217:12)
#loc275 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_31.cpp":217:5)
#loc276 = loc(fused[#loc1, #loc2])
#loc277 = loc(fused[#loc3, #loc4])
#loc278 = loc(fused[#loc5, #loc6])
#loc279 = loc(fused[#loc7, #loc8])
#loc280 = loc(fused[#loc9, #loc10])
#loc281 = loc(fused[#loc11, #loc12])
#loc282 = loc(fused[#loc13, #loc14])
#loc283 = loc(fused[#loc15, #loc16])
#loc284 = loc(fused[#loc17, #loc18])
#loc285 = loc(fused[#loc19, #loc20])
#loc286 = loc(fused[#loc21, #loc22])
#loc287 = loc(fused[#loc23, #loc24])
#loc288 = loc(fused[#loc25, #loc26])
#loc289 = loc(fused[#loc27, #loc28])
#loc290 = loc(fused[#loc30, #loc29])
#loc291 = loc(fused[#loc31, #loc32])
#loc292 = loc(fused[#loc33, #loc34])
#loc293 = loc(fused[#loc35, #loc36])
#loc294 = loc(fused[#loc37, #loc38])
#loc295 = loc(fused[#loc39, #loc40])
#loc296 = loc(fused[#loc41, #loc42])
#loc297 = loc(fused[#loc43, #loc44])
#loc298 = loc(fused[#loc47, #loc48])
#loc299 = loc(fused[#loc53, #loc54])
#loc300 = loc(fused[#loc55, #loc56])
#loc301 = loc(fused[#loc57, #loc58])
#loc302 = loc(fused[#loc59, #loc56])
#loc303 = loc(fused[#loc61, #loc62])
#loc304 = loc(fused[#loc64, #loc65])
#loc305 = loc(fused[#loc66, #loc67])
#loc306 = loc(fused[#loc70, #loc68])
#loc307 = loc(fused[#loc74, #loc71])
#loc308 = loc(fused[#loc78, #loc79])
#loc309 = loc(fused[#loc80, #loc81])
#loc310 = loc(fused[#loc83, #loc84])
#loc311 = loc(fused[#loc85, #loc86])
#loc312 = loc(fused[#loc87, #loc88])
#loc313 = loc(fused[#loc89, #loc81])
#loc314 = loc(fused[#loc91, #loc92])
#loc315 = loc(fused[#loc95, #loc96])
#loc316 = loc(fused[#loc97, #loc92])
#loc317 = loc(fused[#loc103, #loc104])
#loc318 = loc(fused[#loc105, #loc106])
#loc319 = loc(fused[#loc107, #loc108])
#loc320 = loc(fused[#loc109, #loc106])
#loc321 = loc(fused[#loc115, #loc116])
#loc322 = loc(fused[#loc117, #loc118])
#loc323 = loc(fused[#loc119, #loc120])
#loc324 = loc(fused[#loc119, #loc121])
#loc325 = loc(fused[#loc117, #loc122])
#loc326 = loc(fused[#loc125, #loc126])
#loc327 = loc(fused[#loc127, #loc128])
#loc328 = loc(fused[#loc129, #loc130])
#loc329 = loc(fused[#loc132, #loc133])
#loc330 = loc(fused[#loc134, #loc128])
#loc331 = loc(fused[#loc140, #loc141])
#loc332 = loc(fused[#loc139, #loc141])
#loc333 = loc(fused[#loc138, #loc141])
#loc334 = loc(fused[#loc137, #loc136])
#loc335 = loc(fused[#loc146, #loc147])
#loc336 = loc(fused[#loc148, #loc149])
#loc337 = loc(fused[#loc151, #loc149])
#loc338 = loc(fused[#loc154, #loc152])
#loc339 = loc(fused[#loc158, #loc159])
#loc340 = loc(fused[#loc160, #loc161])
#loc341 = loc(fused[#loc163, #loc161])
#loc342 = loc(fused[#loc166, #loc164])
#loc343 = loc(fused[#loc168, #loc169])
#loc344 = loc(fused[#loc170, #loc171])
#loc345 = loc(fused[#loc172, #loc169])
#loc346 = loc(fused[#loc175, #loc176])
#loc347 = loc(fused[#loc177, #loc178])
#loc348 = loc(fused[#loc179, #loc176])
#loc349 = loc(fused[#loc182, #loc183])
#loc350 = loc(fused[#loc184, #loc185])
#loc351 = loc(fused[#loc186, #loc187])
#loc352 = loc(fused[#loc188, #loc189])
#loc353 = loc(fused[#loc190, #loc191])
#loc354 = loc(fused[#loc193, #loc194])
#loc355 = loc(fused[#loc195, #loc196])
#loc356 = loc(fused[#loc198, #loc199])
#loc357 = loc(fused[#loc200, #loc201])
#loc358 = loc(fused[#loc202, #loc203])
#loc359 = loc(fused[#loc205, #loc201])
#loc360 = loc(fused[#loc208, #loc209])
#loc361 = loc(fused[#loc211, #loc212])
#loc362 = loc(fused[#loc213, #loc214])
#loc363 = loc(fused[#loc216, #loc215])
#loc364 = loc(fused[#loc219, #loc220])
#loc365 = loc(fused[#loc221, #loc222])
#loc366 = loc(fused[#loc223, #loc224])
#loc367 = loc(fused[#loc225, #loc226])
#loc368 = loc(fused[#loc227, #loc228])
#loc369 = loc(fused[#loc230, #loc231])
#loc370 = loc(fused[#loc232, #loc233])
#loc371 = loc(fused[#loc235, #loc236])
#loc372 = loc(fused[#loc237, #loc238])
#loc373 = loc(fused[#loc239, #loc240])
#loc374 = loc(fused[#loc242, #loc238])
#loc375 = loc(fused[#loc245, #loc246])
#loc376 = loc(fused[#loc248, #loc249])
#loc377 = loc(fused[#loc250, #loc251])
#loc378 = loc(fused[#loc252, #loc253])
#loc379 = loc(fused[#loc258, #loc259])
#loc382 = loc(fused[#loc275, #loc274])
