!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":303:10)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":303:14)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":303:20)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":303:32)
#true = #cir.bool<true> : !cir.bool
#loc573 = loc(fused[#loc135, #loc136])
#loc574 = loc(fused[#loc137, #loc138])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc519)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc520)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc521)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc522)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc523)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc524)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc525)
  cir.func private @printIntLine(!s32i) loc(#loc526)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc18)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc527)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc529)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc530)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc519)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc30)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc534)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc534)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc534)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc39)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc39)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc39)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc39)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc39)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc39)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc39)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc39)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc521)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc40)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc41)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc536)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc46)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc47)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc538)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc50)
            } loc(#loc537)
          } loc(#loc535)
        } loc(#loc533)
      } loc(#loc532)
    } loc(#loc531)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc519)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc53)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc542)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc543)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc61)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc62)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc62)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc544)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc545)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc61)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc546)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc543)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc68)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc68)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc548)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc70)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc71)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc72)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc70)
            } loc(#loc549)
          } loc(#loc547)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc75)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc551)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc78)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc552)
              cir.condition(%21) loc(#loc79)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc81)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc84)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc554)
              } loc(#loc553)
              cir.yield loc(#loc74)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc86)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc555)
              cir.yield loc(#loc550)
            } loc(#loc550)
          } loc(#loc550)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc90)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc557)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc94)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc97)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc559)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc100)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc561)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc103)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc562)
                  cir.condition(%28) loc(#loc104)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc108)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc109)
                  } loc(#loc563)
                  cir.yield loc(#loc99)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc111)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc564)
                  cir.yield loc(#loc560)
                } loc(#loc560)
              } loc(#loc560)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc18)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc18)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc112)
            } loc(#loc558)
          } loc(#loc556)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc113)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc114)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc113)
        } loc(#loc541)
      } loc(#loc540)
    } loc(#loc539)
    cir.return loc(#loc22)
  } loc(#loc528)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc566)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc117)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc567)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc119)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc568)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc121)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc569)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc123)
    cir.return loc(#loc116)
  } loc(#loc565)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc570)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc571)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc132)
  cir.func @main(%arg0: !s32i loc(fused[#loc135, #loc136]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc137, #loc138])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc573)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc574)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc134)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc139)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc140)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc141)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc141)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc142)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc129)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc143)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc575)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_good() : () -> () loc(#loc144)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc130)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc131)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc147)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc576)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad() : () -> () loc(#loc148)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc132)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc151)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc577)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc577)
    cir.return %17 : !s32i loc(#loc577)
  } loc(#loc572)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc578)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc156)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc580)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc162)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc581)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc519)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc166)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc166)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc585)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc585)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc585)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc174)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc175)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc175)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc175)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc175)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc175)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc175)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc175)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc175)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc521)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc176)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc177)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc178)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc178)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc587)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc182)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc183)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc589)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc186)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc186)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc187)
            } loc(#loc588)
          } loc(#loc586)
        } loc(#loc584)
      } loc(#loc583)
    } loc(#loc582)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc578)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc190)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc190)
      cir.if %5 {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc194)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc593)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc594)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc201)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc202)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc202)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc595)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc596)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc201)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc597)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc594)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc208)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc208)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc599)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc210)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc211)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc212)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc210)
            } loc(#loc600)
          } loc(#loc598)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc215)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc602)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc217)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc218)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc603)
              cir.condition(%21) loc(#loc219)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc221)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc224)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc605)
              } loc(#loc604)
              cir.yield loc(#loc214)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc225)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc226)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc606)
              cir.yield loc(#loc601)
            } loc(#loc601)
          } loc(#loc601)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc229)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc230)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc608)
            %21 = cir.ternary(%20, true {
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc232)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc233)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc609)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc231)
                cir.yield %26 : !cir.bool loc(#loc231)
              }, false {
                %26 = cir.const #false loc(#loc231)
                cir.yield %26 : !cir.bool loc(#loc231)
              }) : (!cir.bool) -> !cir.bool loc(#loc231)
              cir.yield %25 : !cir.bool loc(#loc231)
            }, false {
              %22 = cir.const #false loc(#loc231)
              cir.yield %22 : !cir.bool loc(#loc231)
            }) : (!cir.bool) -> !cir.bool loc(#loc231)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc238)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc239)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc240)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc241)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc611)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc244)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc613)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc247)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc614)
                  cir.condition(%29) loc(#loc248)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc250)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc251)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc252)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc253)
                  } loc(#loc615)
                  cir.yield loc(#loc243)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc255)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc616)
                  cir.yield loc(#loc612)
                } loc(#loc612)
              } loc(#loc612)
            } else {
              %22 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc156)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc156)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc256)
            } loc(#loc610)
          } loc(#loc607)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc257)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc258)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc258)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc257)
        } loc(#loc592)
      } loc(#loc591)
    } loc(#loc590)
    cir.return loc(#loc158)
  } loc(#loc579)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc618)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc263)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc264)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc619)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc519)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc268)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc268)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc623)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc623)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc623)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc276)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc277)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc277)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc277)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc277)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc277)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc277)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc277)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc277)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc521)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc278)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc279)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc280)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc280)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc625)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc284)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc285)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc627)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc288)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc288)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc289)
            } loc(#loc626)
          } loc(#loc624)
        } loc(#loc622)
      } loc(#loc621)
    } loc(#loc620)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc519)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc292)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc292)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc631)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc632)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc300)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc301)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc301)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc633)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc634)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc300)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc635)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc632)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc306)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc307)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc307)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc637)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc309)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc310)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc311)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc309)
            } loc(#loc638)
          } loc(#loc636)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc314)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc640)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc316)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc317)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc641)
              cir.condition(%21) loc(#loc318)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc320)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc321)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc322)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc323)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc643)
              } loc(#loc642)
              cir.yield loc(#loc313)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc324)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc325)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc644)
              cir.yield loc(#loc639)
            } loc(#loc639)
          } loc(#loc639)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc328)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc329)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc646)
            %21 = cir.ternary(%20, true {
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc331)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc332)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc647)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc330)
                cir.yield %26 : !cir.bool loc(#loc330)
              }, false {
                %26 = cir.const #false loc(#loc330)
                cir.yield %26 : !cir.bool loc(#loc330)
              }) : (!cir.bool) -> !cir.bool loc(#loc330)
              cir.yield %25 : !cir.bool loc(#loc330)
            }, false {
              %22 = cir.const #false loc(#loc330)
              cir.yield %22 : !cir.bool loc(#loc330)
            }) : (!cir.bool) -> !cir.bool loc(#loc330)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc337)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc338)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc339)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc340)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc649)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc343)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc651)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc345)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc346)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc652)
                  cir.condition(%29) loc(#loc347)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc349)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc350)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc351)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc349)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc352)
                  } loc(#loc653)
                  cir.yield loc(#loc342)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc353)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc354)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc654)
                  cir.yield loc(#loc650)
                } loc(#loc650)
              } loc(#loc650)
            } else {
              %22 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc355)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc355)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc356)
            } loc(#loc648)
          } loc(#loc645)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc357)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc358)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc358)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc357)
        } loc(#loc630)
      } loc(#loc629)
    } loc(#loc628)
    cir.return loc(#loc260)
  } loc(#loc617)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc656)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc363)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc364)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc657)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc578)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc368)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc368)
      cir.if %5 {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc372)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc372)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc373)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc374)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc660)
      } loc(#loc659)
    } loc(#loc658)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc519)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc378)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc378)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc664)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc665)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc386)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc387)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc387)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc666)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc667)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc386)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc668)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc665)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc392)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc393)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc393)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc670)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc395)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc396)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc397)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc395)
            } loc(#loc671)
          } loc(#loc669)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc400)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc673)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc402)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc403)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc674)
              cir.condition(%21) loc(#loc404)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc406)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc407)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc408)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc409)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc676)
              } loc(#loc675)
              cir.yield loc(#loc399)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc410)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc411)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc677)
              cir.yield loc(#loc672)
            } loc(#loc672)
          } loc(#loc672)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc414)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc415)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc679)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc419)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc420)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc421)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc422)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc681)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc425)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc683)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc427)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc428)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc684)
                  cir.condition(%28) loc(#loc429)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc431)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc432)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc433)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc431)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc434)
                  } loc(#loc685)
                  cir.yield loc(#loc424)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc435)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc436)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc686)
                  cir.yield loc(#loc682)
                } loc(#loc682)
              } loc(#loc682)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc437)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc437)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc438)
            } loc(#loc680)
          } loc(#loc678)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc439)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc440)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc440)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc439)
        } loc(#loc663)
      } loc(#loc662)
    } loc(#loc661)
    cir.return loc(#loc360)
  } loc(#loc655)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc688)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc445)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc446)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc689)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc519)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc450)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc450)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc452)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc692)
      } loc(#loc691)
    } loc(#loc690)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc519)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc456)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc456)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc696)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc697)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc464)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc465)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc465)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc698)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc699)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc464)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc700)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc697)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc470)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc471)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc471)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc702)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc473)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc474)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc475)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc473)
            } loc(#loc703)
          } loc(#loc701)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc478)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc705)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc480)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc481)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc706)
              cir.condition(%21) loc(#loc482)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc484)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc485)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc486)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc487)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc708)
              } loc(#loc707)
              cir.yield loc(#loc477)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc488)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc489)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc709)
              cir.yield loc(#loc704)
            } loc(#loc704)
          } loc(#loc704)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc492)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc493)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc711)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc497)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc498)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc499)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc500)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc713)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc503)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc715)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc505)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc506)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc716)
                  cir.condition(%28) loc(#loc507)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc509)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc510)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc511)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc509)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc512)
                  } loc(#loc717)
                  cir.yield loc(#loc502)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc513)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc514)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc718)
                  cir.yield loc(#loc714)
                } loc(#loc714)
              } loc(#loc714)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc515)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc515)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc516)
            } loc(#loc712)
          } loc(#loc710)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc517)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc518)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc518)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc517)
        } loc(#loc695)
      } loc(#loc694)
    } loc(#loc693)
    cir.return loc(#loc442)
  } loc(#loc687)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":25:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":47:27)
#loc12 = loc("/usr/include/stdlib.h":672:1)
#loc13 = loc("/usr/include/stdlib.h":672:45)
#loc14 = loc("/usr/include/stdlib.h":756:1)
#loc15 = loc("/usr/include/stdlib.h":756:70)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":75:27)
#loc19 = loc("/usr/include/stdlib.h":687:1)
#loc20 = loc("/usr/include/stdlib.h":687:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":30:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":80:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":32:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":32:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":34:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":34:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":34:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":35:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":50:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":35:8)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":36:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":37:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":49:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":38:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":38:49)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":40:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":48:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":40:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":40:36)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":40:53)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":40:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":40:63)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":41:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":44:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":46:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":43:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":43:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":43:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":43:40)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":47:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":51:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":79:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":51:8)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":52:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":53:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":78:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":54:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":54:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":55:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":55:58)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":55:35)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":55:42)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":55:47)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":55:57)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":56:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":56:43)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":56:17)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":56:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":56:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":56:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":56:40)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":56:39)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":58:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":61:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":58:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":58:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":58:25)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":58:29)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":58:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":59:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":60:29)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":60:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":60:24)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":60:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":58:34)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":58:33)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":64:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":76:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":64:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":64:25)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":65:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":72:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":74:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":66:32)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":66:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":66:24)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":66:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":68:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":71:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":68:25)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":68:21)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":68:28)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":68:32)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":68:30)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":69:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":70:34)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":70:41)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":70:42)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":70:21)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":68:37)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":68:36)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":75:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":77:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":77:18)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":286:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":292:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":288:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":288:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":289:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":289:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":290:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":290:14)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":291:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":291:14)
#loc125 = loc("/usr/include/stdlib.h":575:1)
#loc126 = loc("/usr/include/stdlib.h":575:41)
#loc127 = loc("/usr/include/time.h":76:1)
#loc128 = loc("/usr/include/time.h":76:38)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":308:15)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":310:15)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":313:15)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":315:15)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":303:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":318:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":304:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":306:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":306:22)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":306:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":308:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":309:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":309:63)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":310:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":313:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":314:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":314:62)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":315:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":317:12)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":317:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":26:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":26:26)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":111:19)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":136:27)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":87:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":141:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":89:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":89:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":91:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":91:12)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":91:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":92:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":107:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":92:8)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":93:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":94:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":106:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":95:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":95:49)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":97:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":105:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":97:23)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":97:36)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":97:53)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":97:17)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":97:63)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":98:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":101:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":103:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":100:29)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":100:24)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":100:17)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":100:40)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":104:27)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":104:17)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":108:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":140:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":108:8)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":109:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":112:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":114:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":111:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":115:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":139:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":116:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":116:17)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":117:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":117:58)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":117:35)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":117:42)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":117:47)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":117:57)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":118:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":118:43)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":118:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":118:27)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":118:33)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":118:34)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":118:40)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":118:39)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":120:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":123:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":120:22)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":120:18)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":120:25)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":120:29)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":120:27)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":121:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":122:29)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":122:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":122:24)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":122:25)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":120:34)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":120:33)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":125:13)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":137:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":125:17)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":125:25)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":125:27)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":125:30)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":125:38)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":125:40)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":126:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":133:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":135:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":127:32)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":127:17)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":127:24)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":127:28)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":129:17)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":132:17)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":129:25)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":129:21)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":129:28)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":129:32)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":129:30)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":130:17)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":131:34)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":131:41)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":131:42)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":131:21)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":129:37)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":129:36)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":136:17)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":138:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":138:18)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":144:1)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":193:1)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":146:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":146:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":148:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":148:12)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":148:5)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":149:5)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":164:5)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":149:8)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":150:5)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":151:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":163:9)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":152:13)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":152:49)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":154:13)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":162:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":154:23)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":154:36)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":154:53)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":154:17)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":154:63)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":155:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":158:13)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":160:13)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":157:29)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":157:24)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":157:17)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":157:40)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":161:27)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":161:17)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":165:5)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":192:5)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":165:8)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":166:5)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":167:9)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":191:9)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":168:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":168:17)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":169:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":169:58)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":169:35)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":169:42)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":169:47)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":169:57)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":170:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":170:43)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":170:17)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":170:27)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":170:33)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":170:34)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":170:40)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":170:39)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":172:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":175:13)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":172:22)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":172:18)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":172:25)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":172:29)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":172:27)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":173:13)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":174:29)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":174:17)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":174:24)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":174:25)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":172:34)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":172:33)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":177:13)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":189:13)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":177:17)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":177:25)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":177:27)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":177:30)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":177:38)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":177:40)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":178:13)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":185:13)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":187:13)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":179:32)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":179:17)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":179:24)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":179:28)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":181:17)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":184:17)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":181:25)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":181:21)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":181:28)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":181:32)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":181:30)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":182:17)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":183:34)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":183:41)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":183:42)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":183:21)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":181:37)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":181:36)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":188:27)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":188:17)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":190:13)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":190:18)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":196:1)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":241:1)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":198:5)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":198:9)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":200:13)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":200:12)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":200:5)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":201:5)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":211:5)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":201:8)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":202:5)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":205:5)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":207:5)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":204:19)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":204:9)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":210:16)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":210:9)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":212:5)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":240:5)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":212:8)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":213:5)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":214:9)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":239:9)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":215:13)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":215:17)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":216:13)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":216:58)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":216:35)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":216:42)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":216:47)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":216:57)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":217:13)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":217:43)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":217:17)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":217:27)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":217:33)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":217:34)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":217:40)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":217:39)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":219:13)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":222:13)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":219:22)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":219:18)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":219:25)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":219:29)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":219:27)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":220:13)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":221:29)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":221:17)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":221:24)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":221:25)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":219:34)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":219:33)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":225:13)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":237:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":225:17)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":225:25)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":226:13)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":233:13)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":235:13)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":227:32)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":227:17)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":227:24)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":227:28)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":229:17)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":232:17)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":229:25)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":229:21)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":229:28)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":229:32)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":229:30)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":230:17)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":231:34)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":231:41)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":231:42)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":231:21)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":229:37)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":229:36)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":236:27)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":236:17)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":238:13)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":238:18)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":244:1)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":284:1)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":246:5)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":246:9)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":248:13)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":248:12)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":248:5)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":249:5)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":254:5)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":249:8)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":250:5)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":253:16)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":253:9)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":255:5)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":283:5)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":255:8)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":256:5)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":257:9)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":282:9)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":258:13)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":258:17)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":259:13)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":259:58)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":259:35)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":259:42)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":259:47)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":259:57)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":260:13)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":260:43)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":260:17)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":260:27)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":260:33)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":260:34)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":260:40)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":260:39)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":262:13)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":265:13)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":262:22)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":262:18)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":262:25)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":262:29)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":262:27)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":263:13)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":264:29)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":264:17)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":264:24)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":264:25)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":262:34)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":262:33)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":268:13)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":280:13)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":268:17)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":268:25)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":269:13)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":276:13)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":278:13)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":270:32)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":270:17)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":270:24)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":270:28)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":272:17)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":275:17)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":272:25)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":272:21)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":272:28)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":272:32)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":272:30)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":273:17)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":274:34)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":274:41)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":274:42)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":274:21)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":272:37)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":272:36)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":279:27)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":279:17)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":281:13)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c":281:18)
#loc519 = loc(fused[#loc1, #loc2])
#loc520 = loc(fused[#loc3, #loc4])
#loc521 = loc(fused[#loc5, #loc6])
#loc522 = loc(fused[#loc7, #loc8])
#loc523 = loc(fused[#loc9, #loc10])
#loc524 = loc(fused[#loc12, #loc13])
#loc525 = loc(fused[#loc14, #loc15])
#loc526 = loc(fused[#loc16, #loc17])
#loc527 = loc(fused[#loc19, #loc20])
#loc528 = loc(fused[#loc21, #loc22])
#loc529 = loc(fused[#loc23, #loc24])
#loc530 = loc(fused[#loc27, #loc25])
#loc531 = loc(fused[#loc28, #loc29])
#loc532 = loc(fused[#loc31, #loc29])
#loc533 = loc(fused[#loc32, #loc33])
#loc534 = loc(fused[#loc34, #loc35])
#loc535 = loc(fused[#loc36, #loc37])
#loc536 = loc(fused[#loc41, #loc42])
#loc537 = loc(fused[#loc43, #loc44, #loc45, #loc37])
#loc538 = loc(fused[#loc48, #loc49])
#loc539 = loc(fused[#loc51, #loc52])
#loc540 = loc(fused[#loc54, #loc52])
#loc541 = loc(fused[#loc55, #loc56])
#loc542 = loc(fused[#loc57, #loc58])
#loc543 = loc(fused[#loc59, #loc60])
#loc544 = loc(fused[#loc63, #loc64])
#loc545 = loc(fused[#loc62, #loc64])
#loc546 = loc(fused[#loc61, #loc60])
#loc547 = loc(fused[#loc65, #loc66])
#loc548 = loc(fused[#loc67, #loc68])
#loc549 = loc(fused[#loc69, #loc66])
#loc550 = loc(fused[#loc73, #loc74])
#loc551 = loc(fused[#loc76, #loc75])
#loc552 = loc(fused[#loc77, #loc78])
#loc553 = loc(fused[#loc80, #loc74])
#loc554 = loc(fused[#loc82, #loc81])
#loc555 = loc(fused[#loc86, #loc85])
#loc556 = loc(fused[#loc87, #loc88])
#loc557 = loc(fused[#loc89, #loc90])
#loc558 = loc(fused[#loc91, #loc92, #loc93, #loc88])
#loc559 = loc(fused[#loc95, #loc94])
#loc560 = loc(fused[#loc98, #loc99])
#loc561 = loc(fused[#loc101, #loc100])
#loc562 = loc(fused[#loc102, #loc103])
#loc563 = loc(fused[#loc105, #loc99])
#loc564 = loc(fused[#loc111, #loc110])
#loc565 = loc(fused[#loc115, #loc116])
#loc566 = loc(fused[#loc117, #loc118])
#loc567 = loc(fused[#loc119, #loc120])
#loc568 = loc(fused[#loc121, #loc122])
#loc569 = loc(fused[#loc123, #loc124])
#loc570 = loc(fused[#loc125, #loc126])
#loc571 = loc(fused[#loc127, #loc128])
#loc572 = loc(fused[#loc133, #loc134])
#loc575 = loc(fused[#loc144, #loc145])
#loc576 = loc(fused[#loc148, #loc149])
#loc577 = loc(fused[#loc152, #loc151])
#loc578 = loc(fused[#loc153, #loc154])
#loc579 = loc(fused[#loc157, #loc158])
#loc580 = loc(fused[#loc159, #loc160])
#loc581 = loc(fused[#loc163, #loc161])
#loc582 = loc(fused[#loc164, #loc165])
#loc583 = loc(fused[#loc167, #loc165])
#loc584 = loc(fused[#loc168, #loc169])
#loc585 = loc(fused[#loc170, #loc171])
#loc586 = loc(fused[#loc172, #loc173])
#loc587 = loc(fused[#loc177, #loc178])
#loc588 = loc(fused[#loc179, #loc180, #loc181, #loc173])
#loc589 = loc(fused[#loc184, #loc185])
#loc590 = loc(fused[#loc188, #loc189])
#loc591 = loc(fused[#loc191, #loc192, #loc193, #loc189])
#loc592 = loc(fused[#loc195, #loc196])
#loc593 = loc(fused[#loc197, #loc198])
#loc594 = loc(fused[#loc199, #loc200])
#loc595 = loc(fused[#loc203, #loc204])
#loc596 = loc(fused[#loc202, #loc204])
#loc597 = loc(fused[#loc201, #loc200])
#loc598 = loc(fused[#loc205, #loc206])
#loc599 = loc(fused[#loc207, #loc208])
#loc600 = loc(fused[#loc209, #loc206])
#loc601 = loc(fused[#loc213, #loc214])
#loc602 = loc(fused[#loc216, #loc215])
#loc603 = loc(fused[#loc217, #loc218])
#loc604 = loc(fused[#loc220, #loc214])
#loc605 = loc(fused[#loc222, #loc221])
#loc606 = loc(fused[#loc226, #loc225])
#loc607 = loc(fused[#loc227, #loc228])
#loc608 = loc(fused[#loc229, #loc230])
#loc609 = loc(fused[#loc232, #loc234])
#loc610 = loc(fused[#loc235, #loc236, #loc237, #loc228])
#loc611 = loc(fused[#loc239, #loc238])
#loc612 = loc(fused[#loc242, #loc243])
#loc613 = loc(fused[#loc245, #loc244])
#loc614 = loc(fused[#loc246, #loc247])
#loc615 = loc(fused[#loc249, #loc243])
#loc616 = loc(fused[#loc255, #loc254])
#loc617 = loc(fused[#loc259, #loc260])
#loc618 = loc(fused[#loc261, #loc262])
#loc619 = loc(fused[#loc265, #loc263])
#loc620 = loc(fused[#loc266, #loc267])
#loc621 = loc(fused[#loc269, #loc267])
#loc622 = loc(fused[#loc270, #loc271])
#loc623 = loc(fused[#loc272, #loc273])
#loc624 = loc(fused[#loc274, #loc275])
#loc625 = loc(fused[#loc279, #loc280])
#loc626 = loc(fused[#loc281, #loc282, #loc283, #loc275])
#loc627 = loc(fused[#loc286, #loc287])
#loc628 = loc(fused[#loc290, #loc291])
#loc629 = loc(fused[#loc293, #loc291])
#loc630 = loc(fused[#loc294, #loc295])
#loc631 = loc(fused[#loc296, #loc297])
#loc632 = loc(fused[#loc298, #loc299])
#loc633 = loc(fused[#loc302, #loc303])
#loc634 = loc(fused[#loc301, #loc303])
#loc635 = loc(fused[#loc300, #loc299])
#loc636 = loc(fused[#loc304, #loc305])
#loc637 = loc(fused[#loc306, #loc307])
#loc638 = loc(fused[#loc308, #loc305])
#loc639 = loc(fused[#loc312, #loc313])
#loc640 = loc(fused[#loc315, #loc314])
#loc641 = loc(fused[#loc316, #loc317])
#loc642 = loc(fused[#loc319, #loc313])
#loc643 = loc(fused[#loc321, #loc320])
#loc644 = loc(fused[#loc325, #loc324])
#loc645 = loc(fused[#loc326, #loc327])
#loc646 = loc(fused[#loc328, #loc329])
#loc647 = loc(fused[#loc331, #loc333])
#loc648 = loc(fused[#loc334, #loc335, #loc336, #loc327])
#loc649 = loc(fused[#loc338, #loc337])
#loc650 = loc(fused[#loc341, #loc342])
#loc651 = loc(fused[#loc344, #loc343])
#loc652 = loc(fused[#loc345, #loc346])
#loc653 = loc(fused[#loc348, #loc342])
#loc654 = loc(fused[#loc354, #loc353])
#loc655 = loc(fused[#loc359, #loc360])
#loc656 = loc(fused[#loc361, #loc362])
#loc657 = loc(fused[#loc365, #loc363])
#loc658 = loc(fused[#loc366, #loc367])
#loc659 = loc(fused[#loc369, #loc370, #loc371, #loc367])
#loc660 = loc(fused[#loc375, #loc374])
#loc661 = loc(fused[#loc376, #loc377])
#loc662 = loc(fused[#loc379, #loc377])
#loc663 = loc(fused[#loc380, #loc381])
#loc664 = loc(fused[#loc382, #loc383])
#loc665 = loc(fused[#loc384, #loc385])
#loc666 = loc(fused[#loc388, #loc389])
#loc667 = loc(fused[#loc387, #loc389])
#loc668 = loc(fused[#loc386, #loc385])
#loc669 = loc(fused[#loc390, #loc391])
#loc670 = loc(fused[#loc392, #loc393])
#loc671 = loc(fused[#loc394, #loc391])
#loc672 = loc(fused[#loc398, #loc399])
#loc673 = loc(fused[#loc401, #loc400])
#loc674 = loc(fused[#loc402, #loc403])
#loc675 = loc(fused[#loc405, #loc399])
#loc676 = loc(fused[#loc407, #loc406])
#loc677 = loc(fused[#loc411, #loc410])
#loc678 = loc(fused[#loc412, #loc413])
#loc679 = loc(fused[#loc414, #loc415])
#loc680 = loc(fused[#loc416, #loc417, #loc418, #loc413])
#loc681 = loc(fused[#loc420, #loc419])
#loc682 = loc(fused[#loc423, #loc424])
#loc683 = loc(fused[#loc426, #loc425])
#loc684 = loc(fused[#loc427, #loc428])
#loc685 = loc(fused[#loc430, #loc424])
#loc686 = loc(fused[#loc436, #loc435])
#loc687 = loc(fused[#loc441, #loc442])
#loc688 = loc(fused[#loc443, #loc444])
#loc689 = loc(fused[#loc447, #loc445])
#loc690 = loc(fused[#loc448, #loc449])
#loc691 = loc(fused[#loc451, #loc449])
#loc692 = loc(fused[#loc453, #loc452])
#loc693 = loc(fused[#loc454, #loc455])
#loc694 = loc(fused[#loc457, #loc455])
#loc695 = loc(fused[#loc458, #loc459])
#loc696 = loc(fused[#loc460, #loc461])
#loc697 = loc(fused[#loc462, #loc463])
#loc698 = loc(fused[#loc466, #loc467])
#loc699 = loc(fused[#loc465, #loc467])
#loc700 = loc(fused[#loc464, #loc463])
#loc701 = loc(fused[#loc468, #loc469])
#loc702 = loc(fused[#loc470, #loc471])
#loc703 = loc(fused[#loc472, #loc469])
#loc704 = loc(fused[#loc476, #loc477])
#loc705 = loc(fused[#loc479, #loc478])
#loc706 = loc(fused[#loc480, #loc481])
#loc707 = loc(fused[#loc483, #loc477])
#loc708 = loc(fused[#loc485, #loc484])
#loc709 = loc(fused[#loc489, #loc488])
#loc710 = loc(fused[#loc490, #loc491])
#loc711 = loc(fused[#loc492, #loc493])
#loc712 = loc(fused[#loc494, #loc495, #loc496, #loc491])
#loc713 = loc(fused[#loc498, #loc497])
#loc714 = loc(fused[#loc501, #loc502])
#loc715 = loc(fused[#loc504, #loc503])
#loc716 = loc(fused[#loc505, #loc506])
#loc717 = loc(fused[#loc508, #loc502])
#loc718 = loc(fused[#loc514, #loc513])
