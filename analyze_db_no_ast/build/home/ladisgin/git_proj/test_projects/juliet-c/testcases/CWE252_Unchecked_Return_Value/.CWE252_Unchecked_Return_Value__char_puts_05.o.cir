!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_puts_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc57)
  cir.func private  @puts(!cir.ptr<!s8i>) -> !s32i loc(#loc58)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_puts_05_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc57)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc5)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc5)
        %5 = cir.call @puts(%4) : (!cir.ptr<!s8i>) -> !s32i loc(#loc12)
      } loc(#loc61)
    } loc(#loc60)
    cir.return loc(#loc7)
  } loc(#loc59)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_puts_05_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc63)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc15)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc64)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc17)
    cir.return loc(#loc14)
  } loc(#loc62)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc65)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc66)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc23)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"puts failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto internal private  @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc65)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc29)
      cir.if %2 {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc23)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc23)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc33)
      } else {
        cir.scope {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc36)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc36)
          %5 = cir.call @puts(%4) : (!cir.ptr<!s8i>) -> !s32i loc(#loc37)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc38)
          %8 = cir.cmp(eq, %5, %7) : !s32i, !s32i loc(#loc71)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc39)
          cir.if %9 {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          } loc(#loc72)
        } loc(#loc70)
      } loc(#loc69)
    } loc(#loc68)
    cir.return loc(#loc26)
  } loc(#loc67)
  cir.func no_proto internal private  @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc57)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc46)
      cir.if %2 {
        cir.scope {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc50)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc50)
          %5 = cir.call @puts(%4) : (!cir.ptr<!s8i>) -> !s32i loc(#loc51)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc52)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc52)
          %8 = cir.cmp(eq, %5, %7) : !s32i, !s32i loc(#loc77)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc53)
          cir.if %9 {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc55)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc55)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc56)
          } loc(#loc78)
        } loc(#loc76)
      } loc(#loc75)
    } loc(#loc74)
    cir.return loc(#loc43)
  } loc(#loc73)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_puts_05.c":0:0)
#loc1 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":31:1)
#loc2 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":31:25)
#loc3 = loc("/usr/include/stdio.h":724:1)
#loc4 = loc("/usr/include/stdio.h":724:33)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":41:14)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":36:1)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":43:1)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":38:5)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":42:5)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":38:8)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":39:5)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":41:9)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":80:1)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":84:1)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":82:5)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":82:11)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":83:5)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":83:11)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":32:1)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":32:26)
#loc21 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":55:19)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":62:23)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":50:1)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":65:1)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":52:5)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":64:5)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":52:8)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":53:5)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":56:5)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":58:5)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":55:9)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":60:9)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":63:9)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":60:18)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":60:13)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":60:31)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":60:28)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":61:9)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":62:13)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":68:1)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":78:1)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":70:5)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":77:5)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":70:8)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":71:5)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":73:9)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":76:9)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":73:18)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":73:13)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":73:31)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":73:28)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":74:9)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":75:23)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_puts_05.c":75:13)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc3, #loc4])
#loc59 = loc(fused[#loc6, #loc7])
#loc60 = loc(fused[#loc8, #loc9])
#loc61 = loc(fused[#loc11, #loc9])
#loc62 = loc(fused[#loc13, #loc14])
#loc63 = loc(fused[#loc15, #loc16])
#loc64 = loc(fused[#loc17, #loc18])
#loc65 = loc(fused[#loc19, #loc20])
#loc66 = loc(fused[#loc21, #loc22])
#loc67 = loc(fused[#loc25, #loc26])
#loc68 = loc(fused[#loc27, #loc28])
#loc69 = loc(fused[#loc30, #loc31, #loc32, #loc28])
#loc70 = loc(fused[#loc34, #loc35])
#loc71 = loc(fused[#loc37, #loc38])
#loc72 = loc(fused[#loc40, #loc35])
#loc73 = loc(fused[#loc42, #loc43])
#loc74 = loc(fused[#loc44, #loc45])
#loc75 = loc(fused[#loc47, #loc45])
#loc76 = loc(fused[#loc48, #loc49])
#loc77 = loc(fused[#loc51, #loc52])
#loc78 = loc(fused[#loc54, #loc49])
