!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":97:10)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":97:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":97:20)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":97:32)
#loc176 = loc(fused[#loc45, #loc46])
#loc177 = loc(fused[#loc47, #loc48])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc157)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc158)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_badData = #cir.ptr<null> : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc159)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc162)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc163)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc164)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc20)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
    %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc166)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc22)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc24)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc22)
    cir.br ^bb3 loc(#loc18)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
    %15 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
    cir.store %14, %15 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc168)
    %16 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %16() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc8)
  } loc(#loc160)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc30)
  } loc(#loc170)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc172)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc173)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc42)
  cir.func @main(%arg0: !s32i loc(fused[#loc45, #loc46]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc49)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc51)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc51)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc52)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_good() : () -> () loc(#loc54)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc41)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_bad() : () -> () loc(#loc58)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.return %17 : !s32i loc(#loc180)
  } loc(#loc175)
  cir.func private @printIntLine(!s32i) loc(#loc181)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc182)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc184)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc186)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
    cir.store %4, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc184)
    cir.store %5, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc184)
    cir.br ^bb2 loc(#loc188)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc79)
    cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc189)
    cir.br ^bb3 loc(#loc188)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc81)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc82)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc82)
    %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc190)
    cir.brcond %11 ^bb4, ^bb8 loc(#loc83)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc191)
  ^bb5:  // pred: ^bb4
    %12 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc85)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc86)
    %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc86)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc88)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc89)
    cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb6 loc(#loc78)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc78)
  ^bb7:  // pred: ^bb6
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc91)
    %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc92)
    cir.store %20, %1 : !u64i, !cir.ptr<!u64i> loc(#loc193)
    cir.br ^bb3 loc(#loc188)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc78)
  ^bb9:  // pred: ^bb8
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc95)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc96)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
    cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc98)
    cir.br ^bb10 loc(#loc76)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc68)
  } loc(#loc183)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc194)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc105)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc107)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc108)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc108)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc198)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc199)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc107)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc200)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc201)
    cir.br ^bb1 loc(#loc202)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc116)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc203)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc204)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc118)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc120)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc118)
    cir.br ^bb3 loc(#loc114)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc114)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
    %17 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc194)
    cir.store %16, %17 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc205)
    %18 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %18() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc123)
    cir.return loc(#loc102)
  } loc(#loc195)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc208)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc209)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc210)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc194)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
    cir.store %4, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc208)
    cir.store %5, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc208)
    cir.br ^bb2 loc(#loc212)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<0> : !s32i loc(#loc137)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc137)
    cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc213)
    cir.br ^bb3 loc(#loc212)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc139)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc140)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc140)
    %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc214)
    cir.brcond %11 ^bb4, ^bb8 loc(#loc141)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc215)
  ^bb5:  // pred: ^bb4
    %12 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc143)
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc144)
    %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc144)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc146)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc147)
    cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.br ^bb6 loc(#loc136)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc136)
  ^bb7:  // pred: ^bb6
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc149)
    %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc150)
    cir.store %20, %1 : !u64i, !cir.ptr<!u64i> loc(#loc217)
    cir.br ^bb3 loc(#loc212)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc136)
  ^bb9:  // pred: ^bb8
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc152)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc153)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc154)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc155)
    cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc156)
    cir.br ^bb10 loc(#loc134)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc126)
  } loc(#loc207)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":19:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":19:14)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":40:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":49:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":42:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":42:11)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":43:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":43:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":45:19)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":45:26)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":45:28)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":45:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":46:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":46:33)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":46:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":46:17)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":46:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":46:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":46:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":46:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":47:65)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":47:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":48:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":48:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":83:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":86:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":85:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":85:13)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":102:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":104:15)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":107:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":109:15)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":97:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":112:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":98:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":100:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":100:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":100:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":102:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":103:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":103:60)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":104:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":107:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":108:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":108:59)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":109:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":111:12)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":111:5)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc65 = loc("/usr/include/stdlib.h":687:1)
#loc66 = loc("/usr/include/stdlib.h":687:32)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":24:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":38:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":28:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":28:28)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":29:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":29:16)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":26:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":26:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":27:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":37:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":31:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":34:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":31:18)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":31:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":31:21)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":31:25)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":31:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":32:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":33:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":33:23)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":33:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":33:18)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":33:19)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":33:31)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":31:30)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":31:29)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":35:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":35:27)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":35:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":35:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":36:14)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":36:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":20:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":20:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":72:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":81:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":74:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":74:11)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":75:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":75:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":77:19)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":77:26)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":77:29)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":77:39)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":77:40)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":77:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":78:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":78:33)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":78:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":78:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":78:23)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":78:24)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":78:30)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":78:29)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":79:69)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":79:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":80:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":80:17)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":56:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":70:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":60:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":60:28)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":61:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":61:16)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":58:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":58:18)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":59:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":69:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":63:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":66:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":63:18)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":63:14)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":63:21)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":63:25)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":63:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":64:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":65:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":65:23)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":65:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":65:18)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":65:19)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":65:31)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":63:30)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":63:29)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":67:22)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":67:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":67:28)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":67:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":68:14)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c":68:9)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc7, #loc8])
#loc161 = loc(fused[#loc9, #loc10])
#loc162 = loc(fused[#loc12, #loc11])
#loc163 = loc(fused[#loc13, #loc15])
#loc164 = loc(fused[#loc16, #loc15])
#loc165 = loc(fused[#loc17, #loc18])
#loc166 = loc(fused[#loc19, #loc20])
#loc167 = loc(fused[#loc21, #loc18])
#loc168 = loc(fused[#loc26, #loc25])
#loc169 = loc(fused[#loc27, #loc28])
#loc170 = loc(fused[#loc29, #loc30])
#loc171 = loc(fused[#loc31, #loc32])
#loc172 = loc(fused[#loc33, #loc34])
#loc173 = loc(fused[#loc35, #loc36])
#loc174 = loc(fused[#loc37, #loc38])
#loc175 = loc(fused[#loc43, #loc44])
#loc178 = loc(fused[#loc54, #loc55])
#loc179 = loc(fused[#loc58, #loc59])
#loc180 = loc(fused[#loc62, #loc61])
#loc181 = loc(fused[#loc63, #loc64])
#loc182 = loc(fused[#loc65, #loc66])
#loc183 = loc(fused[#loc67, #loc68])
#loc184 = loc(fused[#loc69, #loc70])
#loc185 = loc(fused[#loc71, #loc72])
#loc186 = loc(fused[#loc73, #loc74])
#loc187 = loc(fused[#loc75, #loc76])
#loc188 = loc(fused[#loc77, #loc78])
#loc189 = loc(fused[#loc80, #loc79])
#loc190 = loc(fused[#loc81, #loc82])
#loc191 = loc(fused[#loc84, #loc78])
#loc192 = loc(fused[#loc87, #loc90])
#loc193 = loc(fused[#loc92, #loc91])
#loc194 = loc(fused[#loc99, #loc100])
#loc195 = loc(fused[#loc101, #loc102])
#loc196 = loc(fused[#loc103, #loc104])
#loc197 = loc(fused[#loc106, #loc105])
#loc198 = loc(fused[#loc109, #loc110])
#loc199 = loc(fused[#loc108, #loc110])
#loc200 = loc(fused[#loc107, #loc111])
#loc201 = loc(fused[#loc112, #loc111])
#loc202 = loc(fused[#loc113, #loc114])
#loc203 = loc(fused[#loc115, #loc116])
#loc204 = loc(fused[#loc117, #loc114])
#loc205 = loc(fused[#loc122, #loc121])
#loc206 = loc(fused[#loc123, #loc124])
#loc207 = loc(fused[#loc125, #loc126])
#loc208 = loc(fused[#loc127, #loc128])
#loc209 = loc(fused[#loc129, #loc130])
#loc210 = loc(fused[#loc131, #loc132])
#loc211 = loc(fused[#loc133, #loc134])
#loc212 = loc(fused[#loc135, #loc136])
#loc213 = loc(fused[#loc138, #loc137])
#loc214 = loc(fused[#loc139, #loc140])
#loc215 = loc(fused[#loc142, #loc136])
#loc216 = loc(fused[#loc145, #loc148])
#loc217 = loc(fused[#loc150, #loc149])
