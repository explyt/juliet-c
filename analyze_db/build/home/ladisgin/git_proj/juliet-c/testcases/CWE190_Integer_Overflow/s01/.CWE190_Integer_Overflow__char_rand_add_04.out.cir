!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":35:22)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":168:10)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":168:14)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":168:20)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":168:32)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":59:22)
#loc114 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":89:22)
#loc203 = loc(fused[#loc50, #loc51])
#loc204 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc182)
  cir.func private @printHexCharLine(!s8i) loc(#loc183)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_add_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc185)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc186)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc11)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc187)
    cir.br ^bb1 loc(#loc188)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc189)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb5(%21 : !u32i) loc(#loc17)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb5(%37 : !u32i) loc(#loc17)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__char_rand_add_04.c":35:22)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !s8i loc(#loc17)
    cir.store %40, %1 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc191)
  ^bb9:  // pred: ^bb8
    %41 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %42 ^bb10, ^bb13 loc(#loc192)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc193)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc25)
    %44 = cir.cast(integral, %43 : !s8i), !s32i loc(#loc25)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %46 = cir.binop(add, %44, %45) nsw : !s32i loc(#loc25)
    %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc25)
    cir.store %47, %0 : !s8i, !cir.ptr<!s8i> loc(#loc185)
    %48 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc26)
    cir.call @printHexCharLine(%48) : (!s8i) -> () loc(#loc27)
    cir.br ^bb12 loc(#loc24)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc20)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc20)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc6)
  } loc(#loc184)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_add_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc194)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc199)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc200)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc204)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call @CWE190_Integer_Overflow__char_rand_add_04_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_rand_add_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call @CWE190_Integer_Overflow__char_rand_add_04_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    cir.return %17 : !s32i loc(#loc207)
  } loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc209)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc210)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc76)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc76)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc80)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc82)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc82)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc82)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc82)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc82)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc82)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc82)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc82)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc82)
    cir.br ^bb5(%21 : !u32i) loc(#loc82)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc82)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc82)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc82)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc82)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc82)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc82)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc82)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc82)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc82)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc82)
    cir.br ^bb5(%37 : !u32i) loc(#loc82)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__char_rand_add_04.c":59:22)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc82)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc82)
    %40 = cir.cast(integral, %39 : !s32i), !s8i loc(#loc82)
    cir.store %40, %1 : !s8i, !cir.ptr<!s8i> loc(#loc214)
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc79)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc215)
  ^bb9:  // pred: ^bb8
    %41 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc216)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb17 loc(#loc88)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc217)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc93)
    %46 = cir.cast(integral, %45 : !s8i), !s32i loc(#loc93)
    %47 = cir.const #cir.int<127> : !s32i loc(#loc94)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc218)
    cir.brcond %48 ^bb13, ^bb14 loc(#loc219)
  ^bb13:  // pred: ^bb12
    %49 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc98)
    %50 = cir.cast(integral, %49 : !s8i), !s32i loc(#loc98)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %52 = cir.binop(add, %50, %51) nsw : !s32i loc(#loc98)
    %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc98)
    cir.store %53, %0 : !s8i, !cir.ptr<!s8i> loc(#loc209)
    %54 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc99)
    cir.call @printHexCharLine(%54) : (!s8i) -> () loc(#loc100)
    cir.br ^bb15 loc(#loc96)
  ^bb14:  // pred: ^bb12
    %55 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc69)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb15 loc(#loc92)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc92)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc85)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc85)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc71)
  } loc(#loc208)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc221)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc222)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc108)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc108)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc223)
    cir.br ^bb1 loc(#loc224)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc225)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc114)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc114)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc114)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc114)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc114)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc114)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc114)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc114)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc114)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc114)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc114)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc114)
    cir.br ^bb5(%21 : !u32i) loc(#loc114)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc114)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc114)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc114)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc114)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc114)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc114)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc114)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc114)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc114)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc114)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc114)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc114)
    cir.br ^bb5(%37 : !u32i) loc(#loc114)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__char_rand_add_04.c":89:22)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc114)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc114)
    %40 = cir.cast(integral, %39 : !s32i), !s8i loc(#loc114)
    cir.store %40, %1 : !s8i, !cir.ptr<!s8i> loc(#loc226)
    cir.br ^bb7 loc(#loc111)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc111)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc227)
  ^bb9:  // pred: ^bb8
    %41 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %42 ^bb10, ^bb16 loc(#loc228)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc229)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc122)
    %44 = cir.cast(integral, %43 : !s8i), !s32i loc(#loc122)
    %45 = cir.const #cir.int<127> : !s32i loc(#loc123)
    %46 = cir.cmp(lt, %44, %45) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %46 ^bb12, ^bb13 loc(#loc231)
  ^bb12:  // pred: ^bb11
    %47 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc127)
    %48 = cir.cast(integral, %47 : !s8i), !s32i loc(#loc127)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %50 = cir.binop(add, %48, %49) nsw : !s32i loc(#loc127)
    %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc127)
    cir.store %51, %0 : !s8i, !cir.ptr<!s8i> loc(#loc221)
    %52 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc128)
    cir.call @printHexCharLine(%52) : (!s8i) -> () loc(#loc129)
    cir.br ^bb14 loc(#loc125)
  ^bb13:  // pred: ^bb11
    %53 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc130)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb14 loc(#loc121)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc121)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc117)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc117)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc103)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc233)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc234)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc138)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc138)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc142)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc142)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc237)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc146)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc147)
    cir.br ^bb4 loc(#loc144)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc148)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc148)
    cir.store %9, %1 : !s8i, !cir.ptr<!s8i> loc(#loc238)
    cir.br ^bb4 loc(#loc141)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc141)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc239)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc240)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc241)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc156)
    %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc156)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %15 = cir.binop(add, %13, %14) nsw : !s32i loc(#loc156)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc156)
    cir.store %16, %0 : !s8i, !cir.ptr<!s8i> loc(#loc233)
    %17 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc157)
    cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc158)
    cir.br ^bb9 loc(#loc155)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc151)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc151)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc133)
  } loc(#loc232)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc243)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc244)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc165)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc165)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc245)
    cir.br ^bb1 loc(#loc246)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc169)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc169)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc247)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc171)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc171)
    cir.store %7, %1 : !s8i, !cir.ptr<!s8i> loc(#loc248)
    cir.br ^bb3 loc(#loc168)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc168)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc249)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc175)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc250)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc251)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc179)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc179)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc179)
    %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc179)
    cir.store %14, %0 : !s8i, !cir.ptr<!s8i> loc(#loc243)
    %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc180)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc181)
    cir.br ^bb8 loc(#loc178)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc174)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc174)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc160)
  } loc(#loc242)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":28:1)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":45:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":41:13)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":41:34)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":30:10)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":32:8)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":35:9)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":37:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":44:5)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":37:8)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":39:9)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":43:9)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":41:27)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":42:30)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":42:13)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":151:1)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":157:1)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":153:5)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":153:14)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":154:5)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":154:14)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":155:5)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":155:14)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":156:5)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":156:14)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":173:15)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":175:15)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":178:15)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":180:15)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":168:1)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":183:1)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":169:1)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":171:27)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":171:22)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":171:5)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":173:5)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":174:5)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":174:52)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":175:5)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":178:5)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":179:5)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":179:51)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":180:5)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":182:12)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":182:5)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":64:19)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":76:23)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":52:1)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":79:1)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":71:13)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":71:34)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":54:5)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":54:10)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":55:12)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":55:5)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":56:5)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":60:5)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":56:8)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":57:5)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":59:9)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":61:5)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":78:5)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":61:8)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":62:5)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":65:5)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":67:5)
#loc90 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":64:9)
#loc91 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":69:9)
#loc92 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":77:9)
#loc93 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":69:13)
#loc94 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":69:20)
#loc95 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":70:9)
#loc96 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":73:9)
#loc97 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":75:9)
#loc98 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":71:27)
#loc99 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":72:30)
#loc100 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":72:13)
#loc101 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":76:13)
#loc102 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":82:1)
#loc103 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":104:1)
#loc104 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":96:13)
#loc105 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":96:34)
#loc106 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":84:5)
#loc107 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":84:10)
#loc108 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":85:12)
#loc109 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":85:5)
#loc110 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":86:5)
#loc111 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":90:5)
#loc112 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":86:8)
#loc113 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":87:5)
#loc115 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":89:9)
#loc116 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":91:5)
#loc117 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":103:5)
#loc118 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":91:8)
#loc119 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":92:5)
#loc120 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":94:9)
#loc121 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":102:9)
#loc122 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":94:13)
#loc123 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":94:20)
#loc124 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":95:9)
#loc125 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":98:9)
#loc126 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":100:9)
#loc127 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":96:27)
#loc128 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":97:30)
#loc129 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":97:13)
#loc130 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":101:23)
#loc131 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":101:13)
#loc132 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":107:1)
#loc133 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":129:1)
#loc134 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":125:13)
#loc135 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":125:34)
#loc136 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":109:5)
#loc137 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":109:10)
#loc138 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":110:12)
#loc139 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":110:5)
#loc140 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":111:5)
#loc141 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":120:5)
#loc142 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":111:8)
#loc143 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":112:5)
#loc144 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":115:5)
#loc145 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":117:5)
#loc146 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":114:19)
#loc147 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":114:9)
#loc148 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":119:16)
#loc149 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":119:9)
#loc150 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":121:5)
#loc151 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":128:5)
#loc152 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":121:8)
#loc153 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":122:5)
#loc154 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":123:9)
#loc155 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":127:9)
#loc156 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":125:27)
#loc157 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":126:30)
#loc158 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":126:13)
#loc159 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":132:1)
#loc160 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":149:1)
#loc161 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":145:13)
#loc162 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":145:34)
#loc163 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":134:5)
#loc164 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":134:10)
#loc165 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":135:12)
#loc166 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":135:5)
#loc167 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":136:5)
#loc168 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":140:5)
#loc169 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":136:8)
#loc170 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":137:5)
#loc171 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":139:16)
#loc172 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":139:9)
#loc173 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":141:5)
#loc174 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":148:5)
#loc175 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":141:8)
#loc176 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":142:5)
#loc177 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":143:9)
#loc178 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":147:9)
#loc179 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":145:27)
#loc180 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":146:30)
#loc181 = loc("CWE190_Integer_Overflow__char_rand_add_04.c":146:13)
#loc182 = loc(fused[#loc1, #loc2])
#loc183 = loc(fused[#loc3, #loc4])
#loc184 = loc(fused[#loc5, #loc6])
#loc185 = loc(fused[#loc7, #loc8])
#loc186 = loc(fused[#loc9, #loc10])
#loc187 = loc(fused[#loc12, #loc11])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc16, #loc14])
#loc190 = loc(fused[#loc18, #loc17])
#loc191 = loc(fused[#loc19, #loc20])
#loc192 = loc(fused[#loc22, #loc20])
#loc193 = loc(fused[#loc23, #loc24])
#loc194 = loc(fused[#loc28, #loc29])
#loc195 = loc(fused[#loc30, #loc31])
#loc196 = loc(fused[#loc32, #loc33])
#loc197 = loc(fused[#loc34, #loc35])
#loc198 = loc(fused[#loc36, #loc37])
#loc199 = loc(fused[#loc38, #loc39])
#loc200 = loc(fused[#loc40, #loc41])
#loc201 = loc(fused[#loc42, #loc43])
#loc202 = loc(fused[#loc48, #loc49])
#loc205 = loc(fused[#loc59, #loc60])
#loc206 = loc(fused[#loc63, #loc64])
#loc207 = loc(fused[#loc67, #loc66])
#loc208 = loc(fused[#loc70, #loc71])
#loc209 = loc(fused[#loc72, #loc73])
#loc210 = loc(fused[#loc74, #loc75])
#loc211 = loc(fused[#loc77, #loc76])
#loc212 = loc(fused[#loc78, #loc79])
#loc213 = loc(fused[#loc81, #loc79])
#loc214 = loc(fused[#loc83, #loc82])
#loc215 = loc(fused[#loc84, #loc85])
#loc216 = loc(fused[#loc87, #loc88, #loc89, #loc85])
#loc217 = loc(fused[#loc91, #loc92])
#loc218 = loc(fused[#loc93, #loc94])
#loc219 = loc(fused[#loc95, #loc96, #loc97, #loc92])
#loc220 = loc(fused[#loc102, #loc103])
#loc221 = loc(fused[#loc104, #loc105])
#loc222 = loc(fused[#loc106, #loc107])
#loc223 = loc(fused[#loc109, #loc108])
#loc224 = loc(fused[#loc110, #loc111])
#loc225 = loc(fused[#loc113, #loc111])
#loc226 = loc(fused[#loc115, #loc114])
#loc227 = loc(fused[#loc116, #loc117])
#loc228 = loc(fused[#loc119, #loc117])
#loc229 = loc(fused[#loc120, #loc121])
#loc230 = loc(fused[#loc122, #loc123])
#loc231 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc232 = loc(fused[#loc132, #loc133])
#loc233 = loc(fused[#loc134, #loc135])
#loc234 = loc(fused[#loc136, #loc137])
#loc235 = loc(fused[#loc139, #loc138])
#loc236 = loc(fused[#loc140, #loc141])
#loc237 = loc(fused[#loc143, #loc144, #loc145, #loc141])
#loc238 = loc(fused[#loc149, #loc148])
#loc239 = loc(fused[#loc150, #loc151])
#loc240 = loc(fused[#loc153, #loc151])
#loc241 = loc(fused[#loc154, #loc155])
#loc242 = loc(fused[#loc159, #loc160])
#loc243 = loc(fused[#loc161, #loc162])
#loc244 = loc(fused[#loc163, #loc164])
#loc245 = loc(fused[#loc166, #loc165])
#loc246 = loc(fused[#loc167, #loc168])
#loc247 = loc(fused[#loc170, #loc168])
#loc248 = loc(fused[#loc172, #loc171])
#loc249 = loc(fused[#loc173, #loc174])
#loc250 = loc(fused[#loc176, #loc174])
#loc251 = loc(fused[#loc177, #loc178])
