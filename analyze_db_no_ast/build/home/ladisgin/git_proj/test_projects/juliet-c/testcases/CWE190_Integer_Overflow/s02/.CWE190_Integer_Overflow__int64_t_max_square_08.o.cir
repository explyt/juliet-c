!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc181)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_square_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc183)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc7)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc184)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc186)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc11)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
      cir.if %4 {
        %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc14)
        cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc188)
      } loc(#loc187)
    } loc(#loc185)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc190)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc193)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc25)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc24)
          %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc25)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc193)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc27)
        } loc(#loc192)
      } loc(#loc191)
    } loc(#loc189)
    cir.return loc(#loc4)
  } loc(#loc182)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_square_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc194)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc39)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc40)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.return %2 : !s32i loc(#loc200)
  } loc(#loc199)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc202)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc47)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc53)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc205)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc207)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc57)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc57)
      cir.if %4 {
        %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc60)
        cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc209)
      } loc(#loc208)
    } loc(#loc206)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc211)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc64)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc64)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc72)
          %6 = cir.call @imaxabs(%5) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc73)
          %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc73)
          %8 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc74)
          %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc75)
          %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc75)
          %11 = cir.call @sqrtl(%10) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc74)
          %12 = cir.cmp(le, %7, %11) : !cir.long_double<!cir.f80>, !s32i loc(#loc214)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc77)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc216)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc83)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc82)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc83)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc216)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc84)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc85)
          } else {
            %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc86)
          } loc(#loc215)
        } loc(#loc213)
      } loc(#loc212)
    } loc(#loc210)
    cir.return loc(#loc50)
  } loc(#loc203)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
    cir.return %2 : !s32i loc(#loc218)
  } loc(#loc217)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc95)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc221)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc223)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc99)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc99)
      cir.if %4 {
        %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc102)
        cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc106)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc106)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc111)
          %6 = cir.call @imaxabs(%5) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc112)
          %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc112)
          %8 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc113)
          %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc114)
          %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc114)
          %11 = cir.call @sqrtl(%10) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc113)
          %12 = cir.cmp(le, %7, %11) : !cir.long_double<!cir.f80>, !s32i loc(#loc230)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc116)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc232)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc122)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc121)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc122)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc232)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc123)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc124)
          } else {
            %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc125)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc125)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc126)
          } loc(#loc231)
        } loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc92)
  } loc(#loc219)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc131)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc235)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc237)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc135)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc135)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc140)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc140)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc141)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc142)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc142)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc239)
      } loc(#loc238)
    } loc(#loc236)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc241)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc146)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc146)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc244)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc153)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc152)
          %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc153)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc244)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc154)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc155)
        } loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    cir.return loc(#loc128)
  } loc(#loc233)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc246)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc160)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc247)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc249)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc164)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc164)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc167)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc167)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc251)
      } loc(#loc250)
    } loc(#loc248)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc253)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc171)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc171)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc256)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc178)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc177)
          %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc178)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc256)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc179)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc180)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc252)
    cir.return loc(#loc157)
  } loc(#loc245)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":38:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":55:1)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":40:5)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":40:13)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":41:12)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":41:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":42:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":46:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":42:8)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":42:26)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":43:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":45:16)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":45:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":47:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":54:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":47:8)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":47:26)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":48:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":49:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":53:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":51:13)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":51:37)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":51:30)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":52:31)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":52:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":161:1)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":167:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":163:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":163:14)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":164:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":164:14)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":165:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":165:14)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":166:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":166:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":26:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":29:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":28:12)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":28:5)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":74:19)
#loc45 = loc("/usr/include/inttypes.h":351:1)
#loc46 = loc("/usr/include/inttypes.h":351:74)
#loc47 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":86:23)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":62:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":89:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":64:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":64:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":65:12)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":65:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":66:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":70:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":66:8)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":66:26)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":67:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":69:16)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":69:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":71:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":88:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":71:8)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":71:27)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":72:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":75:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":77:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":74:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":79:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":87:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":79:31)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":79:13)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":79:40)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":79:46)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":79:55)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":79:37)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":80:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":83:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":85:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":81:13)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":81:37)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":81:30)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":82:31)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":82:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":86:13)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":31:1)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":34:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":33:12)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":33:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":92:1)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":114:1)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":94:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":94:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":95:12)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":95:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":96:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":100:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":96:8)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":96:26)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":97:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":99:16)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":99:9)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":101:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":113:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":101:8)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":101:26)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":102:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":104:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":112:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":104:31)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":104:13)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":104:40)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":104:46)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":104:55)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":104:37)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":105:9)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":108:9)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":110:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":106:13)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":106:37)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":106:30)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":107:31)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":107:13)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":111:23)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":111:13)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":117:1)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":139:1)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":119:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":119:13)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":120:12)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":120:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":121:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":130:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":121:8)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":121:27)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":122:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":125:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":127:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":124:19)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":124:9)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":129:16)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":129:9)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":131:5)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":138:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":131:8)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":131:26)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":132:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":133:9)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":137:9)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":135:13)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":135:37)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":135:30)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":136:31)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":136:13)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":142:1)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":159:1)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":144:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":144:13)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":145:12)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":145:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":146:5)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":150:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":146:8)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":146:26)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":147:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":149:16)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":149:9)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":151:5)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":158:5)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":151:8)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":151:26)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":152:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":153:9)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":157:9)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":155:13)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":155:37)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":155:30)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":156:31)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_max_square_08.c":156:13)
#loc181 = loc(fused[#loc1, #loc2])
#loc182 = loc(fused[#loc3, #loc4])
#loc183 = loc(fused[#loc5, #loc6])
#loc184 = loc(fused[#loc8, #loc7])
#loc185 = loc(fused[#loc9, #loc10])
#loc186 = loc(fused[#loc11, #loc12])
#loc187 = loc(fused[#loc13, #loc10])
#loc188 = loc(fused[#loc15, #loc14])
#loc189 = loc(fused[#loc16, #loc17])
#loc190 = loc(fused[#loc18, #loc19])
#loc191 = loc(fused[#loc20, #loc17])
#loc192 = loc(fused[#loc21, #loc22])
#loc193 = loc(fused[#loc23, #loc24])
#loc194 = loc(fused[#loc28, #loc29])
#loc195 = loc(fused[#loc30, #loc31])
#loc196 = loc(fused[#loc32, #loc33])
#loc197 = loc(fused[#loc34, #loc35])
#loc198 = loc(fused[#loc36, #loc37])
#loc199 = loc(fused[#loc38, #loc39])
#loc200 = loc(fused[#loc41, #loc40])
#loc201 = loc(fused[#loc42, #loc43])
#loc202 = loc(fused[#loc45, #loc46])
#loc203 = loc(fused[#loc49, #loc50])
#loc204 = loc(fused[#loc51, #loc52])
#loc205 = loc(fused[#loc54, #loc53])
#loc206 = loc(fused[#loc55, #loc56])
#loc207 = loc(fused[#loc57, #loc58])
#loc208 = loc(fused[#loc59, #loc56])
#loc209 = loc(fused[#loc61, #loc60])
#loc210 = loc(fused[#loc62, #loc63])
#loc211 = loc(fused[#loc64, #loc65])
#loc212 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc213 = loc(fused[#loc70, #loc71])
#loc214 = loc(fused[#loc73, #loc76])
#loc215 = loc(fused[#loc78, #loc79, #loc80, #loc71])
#loc216 = loc(fused[#loc81, #loc82])
#loc217 = loc(fused[#loc87, #loc88])
#loc218 = loc(fused[#loc90, #loc89])
#loc219 = loc(fused[#loc91, #loc92])
#loc220 = loc(fused[#loc93, #loc94])
#loc221 = loc(fused[#loc96, #loc95])
#loc222 = loc(fused[#loc97, #loc98])
#loc223 = loc(fused[#loc99, #loc100])
#loc224 = loc(fused[#loc101, #loc98])
#loc225 = loc(fused[#loc103, #loc102])
#loc226 = loc(fused[#loc104, #loc105])
#loc227 = loc(fused[#loc106, #loc107])
#loc228 = loc(fused[#loc108, #loc105])
#loc229 = loc(fused[#loc109, #loc110])
#loc230 = loc(fused[#loc112, #loc115])
#loc231 = loc(fused[#loc117, #loc118, #loc119, #loc110])
#loc232 = loc(fused[#loc120, #loc121])
#loc233 = loc(fused[#loc127, #loc128])
#loc234 = loc(fused[#loc129, #loc130])
#loc235 = loc(fused[#loc132, #loc131])
#loc236 = loc(fused[#loc133, #loc134])
#loc237 = loc(fused[#loc135, #loc136])
#loc238 = loc(fused[#loc137, #loc138, #loc139, #loc134])
#loc239 = loc(fused[#loc143, #loc142])
#loc240 = loc(fused[#loc144, #loc145])
#loc241 = loc(fused[#loc146, #loc147])
#loc242 = loc(fused[#loc148, #loc145])
#loc243 = loc(fused[#loc149, #loc150])
#loc244 = loc(fused[#loc151, #loc152])
#loc245 = loc(fused[#loc156, #loc157])
#loc246 = loc(fused[#loc158, #loc159])
#loc247 = loc(fused[#loc161, #loc160])
#loc248 = loc(fused[#loc162, #loc163])
#loc249 = loc(fused[#loc164, #loc165])
#loc250 = loc(fused[#loc166, #loc163])
#loc251 = loc(fused[#loc168, #loc167])
#loc252 = loc(fused[#loc169, #loc170])
#loc253 = loc(fused[#loc171, #loc172])
#loc254 = loc(fused[#loc173, #loc170])
#loc255 = loc(fused[#loc174, #loc175])
#loc256 = loc(fused[#loc176, #loc177])
