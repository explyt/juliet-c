!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc54)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_17.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_17_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc58)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc13)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc17)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc62)
        cir.condition(%8) loc(#loc21)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc23)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc23)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
            cir.yield %23 : !u32i loc(#loc23)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc23)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc23)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc23)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc23)
            cir.yield %27 : !u32i loc(#loc23)
          }) : (!cir.bool) -> !u32i loc(#loc23)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc23)
          cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc64)
        } loc(#loc63)
        cir.yield loc(#loc16)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc26)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
        cir.yield loc(#loc60)
      } loc(#loc60)
    } loc(#loc60)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc5)
    cir.scope {
      cir.scope {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc5)
        %6 = cir.const #cir.int<5> : !s32i loc(#loc5)
        %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc5)
        cir.if %7 {
        } else {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
          %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
          %12 = cir.const #cir.int<37> : !s32i loc(#loc5)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc5)
          %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @__assert_fail(%9, %11, %13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
        } loc(#loc5)
      } loc(#loc5)
    } loc(#loc5)
    cir.return loc(#loc7)
  } loc(#loc56)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc67)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc28)
  } loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc69)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc70)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc39)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc43)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc74)
        cir.condition(%8) loc(#loc47)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<5> : !s32i loc(#loc49)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc50)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc49)
          cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc76)
        } loc(#loc75)
        cir.yield loc(#loc42)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc53)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
        cir.yield loc(#loc72)
      } loc(#loc72)
    } loc(#loc72)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc31)
    cir.scope {
      cir.scope {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %6 = cir.const #cir.int<5> : !s32i loc(#loc31)
        %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc31)
        cir.if %7 {
        } else {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc31)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc31)
          %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc31)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc31)
          %12 = cir.const #cir.int<57> : !s32i loc(#loc31)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc31)
          %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc31)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc31)
          cir.call @__assert_fail(%9, %11, %13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc31)
        } loc(#loc31)
      } loc(#loc31)
    } loc(#loc31)
    cir.return loc(#loc33)
  } loc(#loc68)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":69:1)
#loc4 = loc("/usr/include/assert.h":71:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_17.c":37:5)
#loc6 = loc("CWE617_Reachable_Assertion__rand_17.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_17.c":38:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_17.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_17.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__rand_17.c":28:5)
#loc11 = loc("CWE617_Reachable_Assertion__rand_17.c":28:9)
#loc12 = loc("CWE617_Reachable_Assertion__rand_17.c":30:13)
#loc13 = loc("CWE617_Reachable_Assertion__rand_17.c":30:12)
#loc14 = loc("CWE617_Reachable_Assertion__rand_17.c":30:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_17.c":31:5)
#loc16 = loc("CWE617_Reachable_Assertion__rand_17.c":35:5)
#loc17 = loc("CWE617_Reachable_Assertion__rand_17.c":31:13)
#loc18 = loc("CWE617_Reachable_Assertion__rand_17.c":31:9)
#loc19 = loc("CWE617_Reachable_Assertion__rand_17.c":31:16)
#loc20 = loc("CWE617_Reachable_Assertion__rand_17.c":31:20)
#loc21 = loc("CWE617_Reachable_Assertion__rand_17.c":31:18)
#loc22 = loc("CWE617_Reachable_Assertion__rand_17.c":32:5)
#loc23 = loc("CWE617_Reachable_Assertion__rand_17.c":34:16)
#loc24 = loc("CWE617_Reachable_Assertion__rand_17.c":34:9)
#loc25 = loc("CWE617_Reachable_Assertion__rand_17.c":31:24)
#loc26 = loc("CWE617_Reachable_Assertion__rand_17.c":31:23)
#loc27 = loc("CWE617_Reachable_Assertion__rand_17.c":60:1)
#loc28 = loc("CWE617_Reachable_Assertion__rand_17.c":63:1)
#loc29 = loc("CWE617_Reachable_Assertion__rand_17.c":62:5)
#loc30 = loc("CWE617_Reachable_Assertion__rand_17.c":62:13)
#loc31 = loc("CWE617_Reachable_Assertion__rand_17.c":57:5)
#loc32 = loc("CWE617_Reachable_Assertion__rand_17.c":45:1)
#loc33 = loc("CWE617_Reachable_Assertion__rand_17.c":58:1)
#loc34 = loc("CWE617_Reachable_Assertion__rand_17.c":47:5)
#loc35 = loc("CWE617_Reachable_Assertion__rand_17.c":47:9)
#loc36 = loc("CWE617_Reachable_Assertion__rand_17.c":48:5)
#loc37 = loc("CWE617_Reachable_Assertion__rand_17.c":48:9)
#loc38 = loc("CWE617_Reachable_Assertion__rand_17.c":50:13)
#loc39 = loc("CWE617_Reachable_Assertion__rand_17.c":50:12)
#loc40 = loc("CWE617_Reachable_Assertion__rand_17.c":50:5)
#loc41 = loc("CWE617_Reachable_Assertion__rand_17.c":51:5)
#loc42 = loc("CWE617_Reachable_Assertion__rand_17.c":55:5)
#loc43 = loc("CWE617_Reachable_Assertion__rand_17.c":51:13)
#loc44 = loc("CWE617_Reachable_Assertion__rand_17.c":51:9)
#loc45 = loc("CWE617_Reachable_Assertion__rand_17.c":51:16)
#loc46 = loc("CWE617_Reachable_Assertion__rand_17.c":51:20)
#loc47 = loc("CWE617_Reachable_Assertion__rand_17.c":51:18)
#loc48 = loc("CWE617_Reachable_Assertion__rand_17.c":52:5)
#loc49 = loc("CWE617_Reachable_Assertion__rand_17.c":54:16)
#loc50 = loc("CWE617_Reachable_Assertion__rand_17.c":54:29)
#loc51 = loc("CWE617_Reachable_Assertion__rand_17.c":54:9)
#loc52 = loc("CWE617_Reachable_Assertion__rand_17.c":51:24)
#loc53 = loc("CWE617_Reachable_Assertion__rand_17.c":51:23)
#loc54 = loc(fused[#loc1, #loc2])
#loc55 = loc(fused[#loc3, #loc4])
#loc56 = loc(fused[#loc6, #loc7])
#loc57 = loc(fused[#loc8, #loc9])
#loc58 = loc(fused[#loc10, #loc11])
#loc59 = loc(fused[#loc14, #loc12])
#loc60 = loc(fused[#loc15, #loc16])
#loc61 = loc(fused[#loc18, #loc17])
#loc62 = loc(fused[#loc19, #loc20])
#loc63 = loc(fused[#loc22, #loc16])
#loc64 = loc(fused[#loc24, #loc23])
#loc65 = loc(fused[#loc26, #loc25])
#loc66 = loc(fused[#loc27, #loc28])
#loc67 = loc(fused[#loc29, #loc30])
#loc68 = loc(fused[#loc32, #loc33])
#loc69 = loc(fused[#loc34, #loc35])
#loc70 = loc(fused[#loc36, #loc37])
#loc71 = loc(fused[#loc40, #loc38])
#loc72 = loc(fused[#loc41, #loc42])
#loc73 = loc(fused[#loc44, #loc43])
#loc74 = loc(fused[#loc45, #loc46])
#loc75 = loc(fused[#loc48, #loc42])
#loc76 = loc(fused[#loc51, #loc50])
#loc77 = loc(fused[#loc53, #loc52])
