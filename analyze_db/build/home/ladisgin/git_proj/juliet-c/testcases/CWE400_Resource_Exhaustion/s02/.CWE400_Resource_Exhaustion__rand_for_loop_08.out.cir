!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":191:10)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":191:14)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":191:20)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":191:32)
#true = #cir.bool<true> : !cir.bool
#loc277 = loc(fused[#loc60, #loc61])
#loc278 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc250)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc251)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc256)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          cir.yield %23 : !u32i loc(#loc18)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc18)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc18)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc18)
          cir.yield %27 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc18)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
      } loc(#loc257)
    } loc(#loc255)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc263)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc28)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc263)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc31)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc265)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc266)
              cir.condition(%14) loc(#loc35)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc37)
              } loc(#loc267)
              cir.yield loc(#loc30)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc38)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc39)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc268)
              cir.yield loc(#loc264)
            } loc(#loc264)
          } loc(#loc264)
        } loc(#loc262)
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc7)
  } loc(#loc252)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc270)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc271)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc272)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc273)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc269)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc274)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc275)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc278)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc279)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_08_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc280)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_08_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc281)
    cir.return %17 : !s32i loc(#loc281)
  } loc(#loc276)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc80)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc283)
    cir.return %2 : !s32i loc(#loc283)
  } loc(#loc282)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc82)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc285)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc88)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc286)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc288)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc92)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc92)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc95)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc95)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc95)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc95)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc95)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc95)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc95)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc95)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc95)
          cir.yield %23 : !u32i loc(#loc95)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc95)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc95)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc95)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc95)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc95)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc95)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc95)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc95)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc95)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc95)
          cir.yield %27 : !u32i loc(#loc95)
        }) : (!cir.bool) -> !u32i loc(#loc95)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc95)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc290)
      } loc(#loc289)
    } loc(#loc287)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc292)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc99)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc99)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc82)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc82)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc295)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc108)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc295)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc112)
            %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc297)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %14 = cir.const #cir.int<20> : !s32i loc(#loc115)
              %15 = cir.cmp(le, %13, %14) : !s32i, !cir.bool loc(#loc298)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc113)
                cir.yield %17 : !cir.bool loc(#loc113)
              }, false {
                %17 = cir.const #false loc(#loc113)
                cir.yield %17 : !cir.bool loc(#loc113)
              }) : (!cir.bool) -> !cir.bool loc(#loc113)
              cir.yield %16 : !cir.bool loc(#loc113)
            }, false {
              %13 = cir.const #false loc(#loc113)
              cir.yield %13 : !cir.bool loc(#loc113)
            }) : (!cir.bool) -> !cir.bool loc(#loc113)
            cir.if %12 {
              cir.scope {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc119)
                %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc119)
                cir.store %14, %6 : !u64i, !cir.ptr<!u64i> loc(#loc301)
                cir.for : cond {
                  %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc121)
                  %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                  %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc122)
                  %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc302)
                  cir.condition(%18) loc(#loc123)
                } body {
                  cir.scope {
                    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc125)
                    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc125)
                    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc126)
                  } loc(#loc303)
                  cir.yield loc(#loc118)
                } step {
                  %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc127)
                  %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc128)
                  cir.store %16, %6 : !u64i, !cir.ptr<!u64i> loc(#loc304)
                  cir.yield loc(#loc300)
                } loc(#loc300)
              } loc(#loc300)
            } loc(#loc299)
          } loc(#loc296)
        } loc(#loc294)
      } loc(#loc293)
    } loc(#loc291)
    cir.return loc(#loc84)
  } loc(#loc284)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc131)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc306)
    cir.return %2 : !s32i loc(#loc306)
  } loc(#loc305)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc308)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc138)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc311)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc142)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc142)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc145)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc145)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc145)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc145)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc145)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc145)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc145)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc145)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc145)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc145)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc145)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc145)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc145)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc145)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc145)
          cir.yield %23 : !u32i loc(#loc145)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc145)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc145)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc145)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc145)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc145)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc145)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc145)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc145)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc145)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc145)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc145)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc145)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc145)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc145)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc145)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc145)
          cir.yield %27 : !u32i loc(#loc145)
        }) : (!cir.bool) -> !u32i loc(#loc145)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc145)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc313)
      } loc(#loc312)
    } loc(#loc310)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc315)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc149)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc149)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc318)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc155)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc155)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc318)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc159)
            %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc320)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              %14 = cir.const #cir.int<20> : !s32i loc(#loc162)
              %15 = cir.cmp(le, %13, %14) : !s32i, !cir.bool loc(#loc321)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc160)
                cir.yield %17 : !cir.bool loc(#loc160)
              }, false {
                %17 = cir.const #false loc(#loc160)
                cir.yield %17 : !cir.bool loc(#loc160)
              }) : (!cir.bool) -> !cir.bool loc(#loc160)
              cir.yield %16 : !cir.bool loc(#loc160)
            }, false {
              %13 = cir.const #false loc(#loc160)
              cir.yield %13 : !cir.bool loc(#loc160)
            }) : (!cir.bool) -> !cir.bool loc(#loc160)
            cir.if %12 {
              cir.scope {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc166)
                %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc166)
                cir.store %14, %6 : !u64i, !cir.ptr<!u64i> loc(#loc324)
                cir.for : cond {
                  %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc168)
                  %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
                  %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc169)
                  %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc325)
                  cir.condition(%18) loc(#loc170)
                } body {
                  cir.scope {
                    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc172)
                    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc172)
                    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc173)
                  } loc(#loc326)
                  cir.yield loc(#loc165)
                } step {
                  %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc174)
                  %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc175)
                  cir.store %16, %6 : !u64i, !cir.ptr<!u64i> loc(#loc327)
                  cir.yield loc(#loc323)
                } loc(#loc323)
              } loc(#loc323)
            } loc(#loc322)
          } loc(#loc319)
        } loc(#loc317)
      } loc(#loc316)
    } loc(#loc314)
    cir.return loc(#loc134)
  } loc(#loc307)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc329)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc181)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc332)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc185)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc185)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc191)
      } else {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc192)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc334)
      } loc(#loc333)
    } loc(#loc331)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc336)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc196)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc196)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc339)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc202)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc202)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc339)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc205)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc205)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc341)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc207)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc208)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc208)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc342)
              cir.condition(%14) loc(#loc209)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc211)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc211)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc212)
              } loc(#loc343)
              cir.yield loc(#loc204)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc213)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc214)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc344)
              cir.yield loc(#loc340)
            } loc(#loc340)
          } loc(#loc340)
        } loc(#loc338)
      } loc(#loc337)
    } loc(#loc335)
    cir.return loc(#loc177)
  } loc(#loc328)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc346)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc219)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc220)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc347)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc349)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc224)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc224)
      cir.if %5 {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc227)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc351)
      } loc(#loc350)
    } loc(#loc348)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc353)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc231)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc231)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc356)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc237)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc237)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc356)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc240)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc240)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc358)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc242)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc243)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc243)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc359)
              cir.condition(%14) loc(#loc244)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc246)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc246)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc247)
              } loc(#loc360)
              cir.yield loc(#loc239)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc248)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc249)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc361)
              cir.yield loc(#loc357)
            } loc(#loc357)
          } loc(#loc357)
        } loc(#loc355)
      } loc(#loc354)
    } loc(#loc352)
    cir.return loc(#loc216)
  } loc(#loc345)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":52:27)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":35:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":56:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":37:5)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":37:9)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":39:14)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":39:13)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":39:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":40:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":44:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":40:8)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":40:26)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":41:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":43:17)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":43:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":45:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":55:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":45:8)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":45:26)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":46:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":47:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":54:9)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":48:13)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":48:24)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:13)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":53:13)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:22)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:18)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:25)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:37)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:27)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":51:13)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":52:17)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:45)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:44)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":174:1)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":180:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":176:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":176:14)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":177:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":177:14)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":178:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":178:14)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":179:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":179:14)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":196:15)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":198:15)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":201:15)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":203:15)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":191:1)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":206:1)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":192:1)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":194:27)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":194:22)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":194:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":196:5)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":197:5)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":197:55)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":198:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":201:5)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":202:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":202:54)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":203:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":205:12)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":205:5)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":23:1)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":26:1)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":25:12)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":25:5)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":76:19)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":63:1)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":92:1)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":65:5)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":65:9)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":67:14)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":67:13)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":67:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":68:5)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":72:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":68:8)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":68:26)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":69:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":71:17)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":71:9)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":73:5)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":91:5)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":73:8)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":73:27)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":74:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":77:5)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":79:5)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":76:9)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":80:9)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":90:9)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":81:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":81:24)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:13)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":89:13)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:17)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:25)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:27)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:30)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:39)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":84:13)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:17)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":88:17)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:26)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:22)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:29)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:41)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:31)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":86:17)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":87:31)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":87:21)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:49)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:48)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":28:1)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":31:1)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":30:12)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":30:5)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":95:1)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":119:1)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":97:5)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":97:9)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":99:14)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":99:13)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":99:5)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":100:5)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":104:5)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":100:8)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":100:26)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":101:5)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":103:17)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":103:9)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":105:5)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":118:5)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":105:8)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":105:26)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":106:5)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":107:9)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":117:9)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":108:13)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":108:24)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:13)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":116:13)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:17)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:25)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:27)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:30)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:39)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":111:13)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:17)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":115:17)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:26)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:22)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:29)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:41)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:31)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":113:17)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":114:31)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":114:21)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:49)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:48)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":122:1)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":148:1)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":124:5)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":124:9)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":126:14)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":126:13)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":126:5)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":127:5)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":136:5)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":127:8)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":127:27)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":128:5)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":131:5)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":133:5)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":130:19)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":130:9)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":135:17)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":135:9)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":137:5)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":147:5)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":137:8)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":137:26)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":138:5)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":139:9)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":146:9)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":140:13)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":140:24)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:13)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":145:13)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:22)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:18)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:25)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:37)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:27)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":143:13)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":144:27)
#loc212 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":144:17)
#loc213 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:45)
#loc214 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:44)
#loc215 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":151:1)
#loc216 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":172:1)
#loc217 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":153:5)
#loc218 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":153:9)
#loc219 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":155:14)
#loc220 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":155:13)
#loc221 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":155:5)
#loc222 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":156:5)
#loc223 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":160:5)
#loc224 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":156:8)
#loc225 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":156:26)
#loc226 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":157:5)
#loc227 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":159:17)
#loc228 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":159:9)
#loc229 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":161:5)
#loc230 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":171:5)
#loc231 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":161:8)
#loc232 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":161:26)
#loc233 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":162:5)
#loc234 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":163:9)
#loc235 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":170:9)
#loc236 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":164:13)
#loc237 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":164:24)
#loc238 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:13)
#loc239 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":169:13)
#loc240 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:22)
#loc241 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:18)
#loc242 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:25)
#loc243 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:37)
#loc244 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:27)
#loc245 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":167:13)
#loc246 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":168:27)
#loc247 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":168:17)
#loc248 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:45)
#loc249 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:44)
#loc250 = loc(fused[#loc1, #loc2])
#loc251 = loc(fused[#loc3, #loc4])
#loc252 = loc(fused[#loc6, #loc7])
#loc253 = loc(fused[#loc8, #loc9])
#loc254 = loc(fused[#loc12, #loc10])
#loc255 = loc(fused[#loc13, #loc14])
#loc256 = loc(fused[#loc15, #loc16])
#loc257 = loc(fused[#loc17, #loc14])
#loc258 = loc(fused[#loc19, #loc18])
#loc259 = loc(fused[#loc20, #loc21])
#loc260 = loc(fused[#loc22, #loc23])
#loc261 = loc(fused[#loc24, #loc21])
#loc262 = loc(fused[#loc25, #loc26])
#loc263 = loc(fused[#loc27, #loc28])
#loc264 = loc(fused[#loc29, #loc30])
#loc265 = loc(fused[#loc32, #loc31])
#loc266 = loc(fused[#loc33, #loc34])
#loc267 = loc(fused[#loc36, #loc30])
#loc268 = loc(fused[#loc39, #loc38])
#loc269 = loc(fused[#loc40, #loc41])
#loc270 = loc(fused[#loc42, #loc43])
#loc271 = loc(fused[#loc44, #loc45])
#loc272 = loc(fused[#loc46, #loc47])
#loc273 = loc(fused[#loc48, #loc49])
#loc274 = loc(fused[#loc50, #loc51])
#loc275 = loc(fused[#loc52, #loc53])
#loc276 = loc(fused[#loc58, #loc59])
#loc279 = loc(fused[#loc69, #loc70])
#loc280 = loc(fused[#loc73, #loc74])
#loc281 = loc(fused[#loc77, #loc76])
#loc282 = loc(fused[#loc78, #loc79])
#loc283 = loc(fused[#loc81, #loc80])
#loc284 = loc(fused[#loc83, #loc84])
#loc285 = loc(fused[#loc85, #loc86])
#loc286 = loc(fused[#loc89, #loc87])
#loc287 = loc(fused[#loc90, #loc91])
#loc288 = loc(fused[#loc92, #loc93])
#loc289 = loc(fused[#loc94, #loc91])
#loc290 = loc(fused[#loc96, #loc95])
#loc291 = loc(fused[#loc97, #loc98])
#loc292 = loc(fused[#loc99, #loc100])
#loc293 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc294 = loc(fused[#loc105, #loc106])
#loc295 = loc(fused[#loc107, #loc108])
#loc296 = loc(fused[#loc109, #loc110])
#loc297 = loc(fused[#loc111, #loc112])
#loc298 = loc(fused[#loc114, #loc115])
#loc299 = loc(fused[#loc116, #loc110])
#loc300 = loc(fused[#loc117, #loc118])
#loc301 = loc(fused[#loc120, #loc119])
#loc302 = loc(fused[#loc121, #loc122])
#loc303 = loc(fused[#loc124, #loc118])
#loc304 = loc(fused[#loc128, #loc127])
#loc305 = loc(fused[#loc129, #loc130])
#loc306 = loc(fused[#loc132, #loc131])
#loc307 = loc(fused[#loc133, #loc134])
#loc308 = loc(fused[#loc135, #loc136])
#loc309 = loc(fused[#loc139, #loc137])
#loc310 = loc(fused[#loc140, #loc141])
#loc311 = loc(fused[#loc142, #loc143])
#loc312 = loc(fused[#loc144, #loc141])
#loc313 = loc(fused[#loc146, #loc145])
#loc314 = loc(fused[#loc147, #loc148])
#loc315 = loc(fused[#loc149, #loc150])
#loc316 = loc(fused[#loc151, #loc148])
#loc317 = loc(fused[#loc152, #loc153])
#loc318 = loc(fused[#loc154, #loc155])
#loc319 = loc(fused[#loc156, #loc157])
#loc320 = loc(fused[#loc158, #loc159])
#loc321 = loc(fused[#loc161, #loc162])
#loc322 = loc(fused[#loc163, #loc157])
#loc323 = loc(fused[#loc164, #loc165])
#loc324 = loc(fused[#loc167, #loc166])
#loc325 = loc(fused[#loc168, #loc169])
#loc326 = loc(fused[#loc171, #loc165])
#loc327 = loc(fused[#loc175, #loc174])
#loc328 = loc(fused[#loc176, #loc177])
#loc329 = loc(fused[#loc178, #loc179])
#loc330 = loc(fused[#loc182, #loc180])
#loc331 = loc(fused[#loc183, #loc184])
#loc332 = loc(fused[#loc185, #loc186])
#loc333 = loc(fused[#loc187, #loc188, #loc189, #loc184])
#loc334 = loc(fused[#loc193, #loc192])
#loc335 = loc(fused[#loc194, #loc195])
#loc336 = loc(fused[#loc196, #loc197])
#loc337 = loc(fused[#loc198, #loc195])
#loc338 = loc(fused[#loc199, #loc200])
#loc339 = loc(fused[#loc201, #loc202])
#loc340 = loc(fused[#loc203, #loc204])
#loc341 = loc(fused[#loc206, #loc205])
#loc342 = loc(fused[#loc207, #loc208])
#loc343 = loc(fused[#loc210, #loc204])
#loc344 = loc(fused[#loc214, #loc213])
#loc345 = loc(fused[#loc215, #loc216])
#loc346 = loc(fused[#loc217, #loc218])
#loc347 = loc(fused[#loc221, #loc219])
#loc348 = loc(fused[#loc222, #loc223])
#loc349 = loc(fused[#loc224, #loc225])
#loc350 = loc(fused[#loc226, #loc223])
#loc351 = loc(fused[#loc228, #loc227])
#loc352 = loc(fused[#loc229, #loc230])
#loc353 = loc(fused[#loc231, #loc232])
#loc354 = loc(fused[#loc233, #loc230])
#loc355 = loc(fused[#loc234, #loc235])
#loc356 = loc(fused[#loc236, #loc237])
#loc357 = loc(fused[#loc238, #loc239])
#loc358 = loc(fused[#loc241, #loc240])
#loc359 = loc(fused[#loc242, #loc243])
#loc360 = loc(fused[#loc245, #loc239])
#loc361 = loc(fused[#loc249, #loc248])
