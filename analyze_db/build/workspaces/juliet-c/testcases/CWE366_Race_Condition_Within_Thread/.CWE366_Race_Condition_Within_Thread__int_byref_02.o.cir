!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!ty__stdThread = !cir.record<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.record<struct "_stdThreadLock" incomplete>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":24:23)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":24:29)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":38:24)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":38:30)
#true = #cir.bool<true> : !cir.bool
#loc261 = loc(fused[#loc5, #loc6])
#loc302 = loc(fused[#loc106, #loc107])
module @"/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc259)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc261)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc262)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc263)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc262)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc265)
      cir.for : cond {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %7 = cir.const #cir.int<1000000> : !s32i loc(#loc17)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc266)
        cir.condition(%8) loc(#loc18)
      } body {
        cir.scope {
          %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
          %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc21)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc21)
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
          cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc268)
        } loc(#loc267)
        cir.yield loc(#loc13)
      } step {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc26)
        cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc269)
        cir.yield loc(#loc264)
      } loc(#loc264)
    } loc(#loc264)
    cir.return loc(#loc4)
  } loc(#loc260)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc270)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc271)
  cir.func private @printIntLine(!s32i) loc(#loc272)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_02_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc37)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc277)
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc278)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valBadSink"] {alignment = 4 : i64} loc(#loc279)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc42)
          cir.store %5, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc277)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc44)
          cir.store %6, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc278)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc47)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc280)
          cir.scope {
            %9 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc51)
            %10 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc282)
            %11 = cir.call @stdThreadCreate(%9, %10, %2) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc54)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc54)
            %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc54)
            cir.if %13 {
              %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc56)
              cir.store %14, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc284)
            } loc(#loc283)
          } loc(#loc281)
          cir.scope {
            %9 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc60)
            %10 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc286)
            %11 = cir.call @stdThreadCreate(%9, %10, %3) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc63)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc63)
            %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc63)
            cir.if %13 {
              %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc65)
              cir.store %14, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc288)
            } loc(#loc287)
          } loc(#loc285)
          cir.scope {
            %9 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc69)
            %10 = cir.cast(ptr_to_bool, %9 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc69)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc71)
              %13 = cir.call @stdThreadJoin(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc72)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc72)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc70)
                cir.yield %16 : !cir.bool loc(#loc70)
              }, false {
                %16 = cir.const #false loc(#loc70)
                cir.yield %16 : !cir.bool loc(#loc70)
              }) : (!cir.bool) -> !cir.bool loc(#loc70)
              cir.yield %15 : !cir.bool loc(#loc70)
            }, false {
              %12 = cir.const #false loc(#loc70)
              cir.yield %12 : !cir.bool loc(#loc70)
            }) : (!cir.bool) -> !cir.bool loc(#loc70)
            cir.if %11 {
              %12 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc74)
              %13 = cir.call @stdThreadDestroy(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc75)
            } loc(#loc290)
          } loc(#loc289)
          cir.scope {
            %9 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc78)
            %10 = cir.cast(ptr_to_bool, %9 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc78)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc80)
              %13 = cir.call @stdThreadJoin(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc81)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc81)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc79)
                cir.yield %16 : !cir.bool loc(#loc79)
              }, false {
                %16 = cir.const #false loc(#loc79)
                cir.yield %16 : !cir.bool loc(#loc79)
              }) : (!cir.bool) -> !cir.bool loc(#loc79)
              cir.yield %15 : !cir.bool loc(#loc79)
            }, false {
              %12 = cir.const #false loc(#loc79)
              cir.yield %12 : !cir.bool loc(#loc79)
            }) : (!cir.bool) -> !cir.bool loc(#loc79)
            cir.if %11 {
              %12 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc83)
              %13 = cir.call @stdThreadDestroy(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc84)
            } loc(#loc292)
          } loc(#loc291)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc85)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc86)
        } loc(#loc276)
      } loc(#loc275)
    } loc(#loc274)
    cir.return loc(#loc34)
  } loc(#loc273)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_02_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc294)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc89)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc295)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc91)
    cir.return loc(#loc88)
  } loc(#loc293)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc296)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc95)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc297)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc298)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc299)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc300)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc106, #loc107])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc302)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc303)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc304)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc112)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc109)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc109)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc303)
    %5 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc298)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc113)
    cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc114)
    cir.scope {
      %9 = cir.const #cir.int<0> : !s32i loc(#loc117)
      cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc306)
      cir.for : cond {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %11 = cir.const #cir.int<1000000> : !s32i loc(#loc120)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc307)
        cir.condition(%12) loc(#loc121)
      } body {
        cir.scope {
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc125)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc124)
          %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
          cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc309)
        } loc(#loc308)
        cir.yield loc(#loc116)
      } step {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
        %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc129)
        cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc310)
        cir.yield loc(#loc305)
      } loc(#loc305)
    } loc(#loc305)
    %7 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc298)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc130)
    cir.call @stdThreadLockRelease(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc131)
    cir.return loc(#loc105)
  } loc(#loc301)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc311)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc138)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc138)
      cir.if %1 {
        %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc142)
      } else {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc316)
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc317)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc318)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc146)
          cir.store %5, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc316)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc148)
          cir.store %6, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc317)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc151)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc319)
          cir.scope {
            %11 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc298)
            %12 = cir.call @stdThreadLockCreate(%11) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc155)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc155)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc155)
            cir.if %14 {
              cir.return loc(#loc157)
            } loc(#loc321)
          } loc(#loc320)
          cir.scope {
            %11 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc160)
            %12 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc323)
            %13 = cir.call @stdThreadCreate(%11, %12, %2) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc163)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc163)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc163)
            cir.if %15 {
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc165)
              cir.store %16, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc325)
            } loc(#loc324)
          } loc(#loc322)
          cir.scope {
            %11 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc169)
            %12 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc327)
            %13 = cir.call @stdThreadCreate(%11, %12, %3) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc172)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc172)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc172)
            cir.if %15 {
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc174)
              cir.store %16, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc329)
            } loc(#loc328)
          } loc(#loc326)
          cir.scope {
            %11 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc178)
            %12 = cir.cast(ptr_to_bool, %11 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc178)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc180)
              %15 = cir.call @stdThreadJoin(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc181)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc181)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc179)
                cir.yield %18 : !cir.bool loc(#loc179)
              }, false {
                %18 = cir.const #false loc(#loc179)
                cir.yield %18 : !cir.bool loc(#loc179)
              }) : (!cir.bool) -> !cir.bool loc(#loc179)
              cir.yield %17 : !cir.bool loc(#loc179)
            }, false {
              %14 = cir.const #false loc(#loc179)
              cir.yield %14 : !cir.bool loc(#loc179)
            }) : (!cir.bool) -> !cir.bool loc(#loc179)
            cir.if %13 {
              %14 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc183)
              %15 = cir.call @stdThreadDestroy(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc184)
            } loc(#loc331)
          } loc(#loc330)
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc187)
            %12 = cir.cast(ptr_to_bool, %11 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc187)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc189)
              %15 = cir.call @stdThreadJoin(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc190)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc190)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc188)
                cir.yield %18 : !cir.bool loc(#loc188)
              }, false {
                %18 = cir.const #false loc(#loc188)
                cir.yield %18 : !cir.bool loc(#loc188)
              }) : (!cir.bool) -> !cir.bool loc(#loc188)
              cir.yield %17 : !cir.bool loc(#loc188)
            }, false {
              %14 = cir.const #false loc(#loc188)
              cir.yield %14 : !cir.bool loc(#loc188)
            }) : (!cir.bool) -> !cir.bool loc(#loc188)
            cir.if %13 {
              %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc192)
              %15 = cir.call @stdThreadDestroy(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc193)
            } loc(#loc333)
          } loc(#loc332)
          %8 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc298)
          %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc194)
          cir.call @stdThreadLockDestroy(%9) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc195)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc196)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc197)
        } loc(#loc315)
      } loc(#loc314)
    } loc(#loc313)
    cir.return loc(#loc135)
  } loc(#loc312)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc202)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc202)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc338)
          %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc339)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc340)
          %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc207)
          cir.store %5, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc338)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc209)
          cir.store %6, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc339)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc212)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc341)
          cir.scope {
            %11 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc298)
            %12 = cir.call @stdThreadLockCreate(%11) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc216)
            %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc216)
            %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc216)
            cir.if %14 {
              cir.return loc(#loc218)
            } loc(#loc343)
          } loc(#loc342)
          cir.scope {
            %11 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc221)
            %12 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc345)
            %13 = cir.call @stdThreadCreate(%11, %12, %2) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc224)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc224)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc224)
            cir.if %15 {
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc226)
              cir.store %16, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc347)
            } loc(#loc346)
          } loc(#loc344)
          cir.scope {
            %11 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc230)
            %12 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc349)
            %13 = cir.call @stdThreadCreate(%11, %12, %3) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc233)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc233)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc233)
            cir.if %15 {
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc235)
              cir.store %16, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc351)
            } loc(#loc350)
          } loc(#loc348)
          cir.scope {
            %11 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc239)
            %12 = cir.cast(ptr_to_bool, %11 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc239)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc241)
              %15 = cir.call @stdThreadJoin(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc242)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc242)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc240)
                cir.yield %18 : !cir.bool loc(#loc240)
              }, false {
                %18 = cir.const #false loc(#loc240)
                cir.yield %18 : !cir.bool loc(#loc240)
              }) : (!cir.bool) -> !cir.bool loc(#loc240)
              cir.yield %17 : !cir.bool loc(#loc240)
            }, false {
              %14 = cir.const #false loc(#loc240)
              cir.yield %14 : !cir.bool loc(#loc240)
            }) : (!cir.bool) -> !cir.bool loc(#loc240)
            cir.if %13 {
              %14 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc244)
              %15 = cir.call @stdThreadDestroy(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc245)
            } loc(#loc353)
          } loc(#loc352)
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc248)
            %12 = cir.cast(ptr_to_bool, %11 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc248)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc250)
              %15 = cir.call @stdThreadJoin(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc251)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc251)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc249)
                cir.yield %18 : !cir.bool loc(#loc249)
              }, false {
                %18 = cir.const #false loc(#loc249)
                cir.yield %18 : !cir.bool loc(#loc249)
              }) : (!cir.bool) -> !cir.bool loc(#loc249)
              cir.yield %17 : !cir.bool loc(#loc249)
            }, false {
              %14 = cir.const #false loc(#loc249)
              cir.yield %14 : !cir.bool loc(#loc249)
            }) : (!cir.bool) -> !cir.bool loc(#loc249)
            cir.if %13 {
              %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc253)
              %15 = cir.call @stdThreadDestroy(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc254)
            } loc(#loc355)
          } loc(#loc354)
          %8 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc298)
          %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc255)
          cir.call @stdThreadLockDestroy(%9) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc256)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc257)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc258)
        } loc(#loc337)
      } loc(#loc336)
    } loc(#loc335)
    cir.return loc(#loc199)
  } loc(#loc334)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_02.c":0:0)
#loc1 = loc("../../testcasesupport/std_thread.h":14:1)
#loc2 = loc("../../testcasesupport/std_thread.h":14:74)
#loc3 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":24:1)
#loc4 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":36:1)
#loc7 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":26:5)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":26:27)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":27:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":27:9)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":25:1)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":32:5)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":35:5)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":32:14)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":32:10)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":32:17)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":32:21)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":32:19)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":33:5)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":34:22)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":34:21)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":34:33)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":34:10)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":34:9)
#loc25 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":32:31)
#loc26 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":32:30)
#loc27 = loc("../../testcasesupport/std_thread.h":15:1)
#loc28 = loc("../../testcasesupport/std_thread.h":15:35)
#loc29 = loc("../../testcasesupport/std_thread.h":16:1)
#loc30 = loc("../../testcasesupport/std_thread.h":16:38)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc33 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":55:1)
#loc34 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":83:1)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":57:5)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":82:5)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":57:8)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":58:5)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":59:9)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":81:9)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":60:13)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":60:33)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":61:13)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":61:33)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":62:13)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":62:17)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":63:26)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":63:13)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":64:13)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":67:13)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":64:34)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":64:52)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":64:53)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":64:18)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":65:13)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":66:27)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":66:17)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":68:13)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":71:13)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":68:34)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":68:52)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":68:53)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":68:18)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":69:13)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":70:27)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":70:17)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":72:13)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":75:13)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":72:17)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":72:25)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":72:42)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":72:28)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":73:13)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":74:34)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":74:17)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":76:13)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":79:13)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":76:17)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":76:25)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":76:42)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":76:28)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":77:13)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":78:34)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":78:17)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":80:26)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":80:13)
#loc87 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":166:1)
#loc88 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":170:1)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":168:5)
#loc90 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":168:11)
#loc91 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":169:5)
#loc92 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":169:11)
#loc93 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc94 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc95 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":95:19)
#loc96 = loc("../../testcasesupport/std_thread.h":18:1)
#loc97 = loc("../../testcasesupport/std_thread.h":18:44)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":22:1)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":22:34)
#loc100 = loc("../../testcasesupport/std_thread.h":19:1)
#loc101 = loc("../../testcasesupport/std_thread.h":19:45)
#loc102 = loc("../../testcasesupport/std_thread.h":20:1)
#loc103 = loc("../../testcasesupport/std_thread.h":20:45)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":38:1)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":51:1)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":40:5)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":40:28)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":41:5)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":41:9)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":39:1)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":45:26)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":45:5)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":46:5)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":49:5)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":46:14)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":46:10)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":46:17)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":46:21)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":46:19)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":47:5)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":48:22)
#loc124 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":48:21)
#loc125 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":48:33)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":48:10)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":48:9)
#loc128 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":46:31)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":46:30)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":50:26)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":50:5)
#loc132 = loc("../../testcasesupport/std_thread.h":21:1)
#loc133 = loc("../../testcasesupport/std_thread.h":21:45)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":90:1)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":128:1)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":92:5)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":127:5)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":92:8)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":93:5)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":96:5)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":98:5)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":95:9)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":99:9)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":126:9)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":100:13)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":100:33)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":101:13)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":101:33)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":102:13)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":102:17)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":103:27)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":103:13)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":104:13)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":107:13)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":104:18)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":105:13)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":106:17)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":108:13)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":111:13)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":108:34)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":108:53)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":108:54)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":108:18)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":109:13)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":110:27)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":110:17)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":112:13)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":115:13)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":112:34)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":112:53)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":112:54)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":112:18)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":113:13)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":114:27)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":114:17)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":116:13)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":119:13)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":116:17)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":116:25)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":116:42)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":116:28)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":117:13)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":118:34)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":118:17)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":120:13)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":123:13)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":120:17)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":120:25)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":120:42)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":120:28)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":121:13)
#loc192 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":122:34)
#loc193 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":122:17)
#loc194 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":124:34)
#loc195 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":124:13)
#loc196 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":125:26)
#loc197 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":125:13)
#loc198 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":131:1)
#loc199 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":164:1)
#loc200 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":133:5)
#loc201 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":163:5)
#loc202 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":133:8)
#loc203 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":134:5)
#loc204 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":135:9)
#loc205 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":162:9)
#loc206 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":136:13)
#loc207 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":136:33)
#loc208 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":137:13)
#loc209 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":137:33)
#loc210 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":138:13)
#loc211 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":138:17)
#loc212 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":139:27)
#loc213 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":139:13)
#loc214 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":140:13)
#loc215 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":143:13)
#loc216 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":140:18)
#loc217 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":141:13)
#loc218 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":142:17)
#loc219 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":144:13)
#loc220 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":147:13)
#loc221 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":144:34)
#loc222 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":144:53)
#loc223 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":144:54)
#loc224 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":144:18)
#loc225 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":145:13)
#loc226 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":146:27)
#loc227 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":146:17)
#loc228 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":148:13)
#loc229 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":151:13)
#loc230 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":148:34)
#loc231 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":148:53)
#loc232 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":148:54)
#loc233 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":148:18)
#loc234 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":149:13)
#loc235 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":150:27)
#loc236 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":150:17)
#loc237 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":152:13)
#loc238 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":155:13)
#loc239 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":152:17)
#loc240 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":152:25)
#loc241 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":152:42)
#loc242 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":152:28)
#loc243 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":153:13)
#loc244 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":154:34)
#loc245 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":154:17)
#loc246 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":156:13)
#loc247 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":159:13)
#loc248 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":156:17)
#loc249 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":156:25)
#loc250 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":156:42)
#loc251 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":156:28)
#loc252 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":157:13)
#loc253 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":158:34)
#loc254 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":158:17)
#loc255 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":160:34)
#loc256 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":160:13)
#loc257 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":161:26)
#loc258 = loc("CWE366_Race_Condition_Within_Thread__int_byref_02.c":161:13)
#loc259 = loc(fused[#loc1, #loc2])
#loc260 = loc(fused[#loc3, #loc4])
#loc262 = loc(fused[#loc7, #loc8])
#loc263 = loc(fused[#loc9, #loc10])
#loc264 = loc(fused[#loc12, #loc13])
#loc265 = loc(fused[#loc15, #loc14])
#loc266 = loc(fused[#loc16, #loc17])
#loc267 = loc(fused[#loc19, #loc13])
#loc268 = loc(fused[#loc24, #loc22])
#loc269 = loc(fused[#loc26, #loc25])
#loc270 = loc(fused[#loc27, #loc28])
#loc271 = loc(fused[#loc29, #loc30])
#loc272 = loc(fused[#loc31, #loc32])
#loc273 = loc(fused[#loc33, #loc34])
#loc274 = loc(fused[#loc35, #loc36])
#loc275 = loc(fused[#loc38, #loc36])
#loc276 = loc(fused[#loc39, #loc40])
#loc277 = loc(fused[#loc41, #loc42])
#loc278 = loc(fused[#loc43, #loc44])
#loc279 = loc(fused[#loc45, #loc46])
#loc280 = loc(fused[#loc48, #loc47])
#loc281 = loc(fused[#loc49, #loc50])
#loc282 = loc(fused[#loc52, #loc53])
#loc283 = loc(fused[#loc55, #loc50])
#loc284 = loc(fused[#loc57, #loc56])
#loc285 = loc(fused[#loc58, #loc59])
#loc286 = loc(fused[#loc61, #loc62])
#loc287 = loc(fused[#loc64, #loc59])
#loc288 = loc(fused[#loc66, #loc65])
#loc289 = loc(fused[#loc67, #loc68])
#loc290 = loc(fused[#loc73, #loc68])
#loc291 = loc(fused[#loc76, #loc77])
#loc292 = loc(fused[#loc82, #loc77])
#loc293 = loc(fused[#loc87, #loc88])
#loc294 = loc(fused[#loc89, #loc90])
#loc295 = loc(fused[#loc91, #loc92])
#loc296 = loc(fused[#loc93, #loc94])
#loc297 = loc(fused[#loc96, #loc97])
#loc298 = loc(fused[#loc98, #loc99])
#loc299 = loc(fused[#loc100, #loc101])
#loc300 = loc(fused[#loc102, #loc103])
#loc301 = loc(fused[#loc104, #loc105])
#loc303 = loc(fused[#loc108, #loc109])
#loc304 = loc(fused[#loc110, #loc111])
#loc305 = loc(fused[#loc115, #loc116])
#loc306 = loc(fused[#loc118, #loc117])
#loc307 = loc(fused[#loc119, #loc120])
#loc308 = loc(fused[#loc122, #loc116])
#loc309 = loc(fused[#loc127, #loc125])
#loc310 = loc(fused[#loc129, #loc128])
#loc311 = loc(fused[#loc132, #loc133])
#loc312 = loc(fused[#loc134, #loc135])
#loc313 = loc(fused[#loc136, #loc137])
#loc314 = loc(fused[#loc139, #loc140, #loc141, #loc137])
#loc315 = loc(fused[#loc143, #loc144])
#loc316 = loc(fused[#loc145, #loc146])
#loc317 = loc(fused[#loc147, #loc148])
#loc318 = loc(fused[#loc149, #loc150])
#loc319 = loc(fused[#loc152, #loc151])
#loc320 = loc(fused[#loc153, #loc154])
#loc321 = loc(fused[#loc156, #loc154])
#loc322 = loc(fused[#loc158, #loc159])
#loc323 = loc(fused[#loc161, #loc162])
#loc324 = loc(fused[#loc164, #loc159])
#loc325 = loc(fused[#loc166, #loc165])
#loc326 = loc(fused[#loc167, #loc168])
#loc327 = loc(fused[#loc170, #loc171])
#loc328 = loc(fused[#loc173, #loc168])
#loc329 = loc(fused[#loc175, #loc174])
#loc330 = loc(fused[#loc176, #loc177])
#loc331 = loc(fused[#loc182, #loc177])
#loc332 = loc(fused[#loc185, #loc186])
#loc333 = loc(fused[#loc191, #loc186])
#loc334 = loc(fused[#loc198, #loc199])
#loc335 = loc(fused[#loc200, #loc201])
#loc336 = loc(fused[#loc203, #loc201])
#loc337 = loc(fused[#loc204, #loc205])
#loc338 = loc(fused[#loc206, #loc207])
#loc339 = loc(fused[#loc208, #loc209])
#loc340 = loc(fused[#loc210, #loc211])
#loc341 = loc(fused[#loc213, #loc212])
#loc342 = loc(fused[#loc214, #loc215])
#loc343 = loc(fused[#loc217, #loc215])
#loc344 = loc(fused[#loc219, #loc220])
#loc345 = loc(fused[#loc222, #loc223])
#loc346 = loc(fused[#loc225, #loc220])
#loc347 = loc(fused[#loc227, #loc226])
#loc348 = loc(fused[#loc228, #loc229])
#loc349 = loc(fused[#loc231, #loc232])
#loc350 = loc(fused[#loc234, #loc229])
#loc351 = loc(fused[#loc236, #loc235])
#loc352 = loc(fused[#loc237, #loc238])
#loc353 = loc(fused[#loc243, #loc238])
#loc354 = loc(fused[#loc246, #loc247])
#loc355 = loc(fused[#loc252, #loc247])
