!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_max_preinc_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc118)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_preinc_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc122)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc122)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc125)
      %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc18)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc126)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    } loc(#loc124)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc129)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc129)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc131)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc32)
        cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc132)
        %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc131)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc35)
      } loc(#loc130)
    } loc(#loc128)
    cir.return loc(#loc4)
  } loc(#loc119)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_preinc_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc133)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc139)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc138)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc50)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc142)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc142)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc57)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc143)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    } loc(#loc141)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc146)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc146)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc148)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc71)
        cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc149)
        %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc70)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc148)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc74)
      } loc(#loc147)
    } loc(#loc145)
    cir.return loc(#loc43)
  } loc(#loc136)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc154)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc154)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc157)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc157)
      %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc158)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    } loc(#loc156)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc161)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc102)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc161)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc105)
        %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc163)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc107)
        cir.if %10 {
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc165)
          %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc113)
          cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc166)
          %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc165)
          %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc116)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc117)
        } loc(#loc164)
      } loc(#loc162)
    } loc(#loc160)
    cir.return loc(#loc79)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_max_preinc_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":44:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":24:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":25:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":25:22)
#loc9 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":26:22)
#loc11 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":30:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":30:21)
#loc17 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":30:20)
#loc18 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":32:16)
#loc19 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":33:21)
#loc21 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":33:10)
#loc22 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":33:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":35:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":43:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":36:21)
#loc27 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":36:20)
#loc28 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":37:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":42:9)
#loc30 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":40:13)
#loc31 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":40:26)
#loc32 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":39:13)
#loc33 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":39:15)
#loc34 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":41:26)
#loc35 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":41:13)
#loc36 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":105:1)
#loc37 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":109:1)
#loc38 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":107:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":107:13)
#loc40 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":108:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":108:13)
#loc42 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":51:1)
#loc43 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":73:1)
#loc44 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":53:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":53:9)
#loc46 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":54:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":54:22)
#loc48 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":55:5)
#loc49 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":55:22)
#loc50 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":57:12)
#loc51 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":57:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":58:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":63:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":59:9)
#loc55 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":59:21)
#loc56 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":59:20)
#loc57 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":61:16)
#loc58 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":61:9)
#loc59 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":62:21)
#loc60 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":62:10)
#loc61 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":62:9)
#loc62 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":64:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":72:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":65:9)
#loc65 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":65:21)
#loc66 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":65:20)
#loc67 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":66:9)
#loc68 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":71:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":69:13)
#loc70 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":69:26)
#loc71 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":68:13)
#loc72 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":68:15)
#loc73 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":70:26)
#loc74 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":70:13)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc77 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":100:23)
#loc78 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":76:1)
#loc79 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":103:1)
#loc80 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":78:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":78:9)
#loc82 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":79:5)
#loc83 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":79:22)
#loc84 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":80:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":80:22)
#loc86 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":82:12)
#loc87 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":82:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":83:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":88:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":84:9)
#loc91 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":84:21)
#loc92 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":84:20)
#loc93 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":86:16)
#loc94 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":86:9)
#loc95 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":87:21)
#loc96 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":87:10)
#loc97 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":87:9)
#loc98 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":89:5)
#loc99 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":102:5)
#loc100 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":90:9)
#loc101 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":90:21)
#loc102 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":90:20)
#loc103 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":92:9)
#loc104 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":101:9)
#loc105 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":92:13)
#loc106 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":92:20)
#loc107 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":92:18)
#loc108 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":93:9)
#loc109 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":97:9)
#loc110 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":99:9)
#loc111 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":95:13)
#loc112 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":95:26)
#loc113 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":94:13)
#loc114 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":94:15)
#loc115 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":96:26)
#loc116 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":96:13)
#loc117 = loc("CWE190_Integer_Overflow__int_max_preinc_32.c":100:13)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc9, #loc10])
#loc123 = loc(fused[#loc12, #loc11])
#loc124 = loc(fused[#loc13, #loc14])
#loc125 = loc(fused[#loc15, #loc16])
#loc126 = loc(fused[#loc19, #loc18])
#loc127 = loc(fused[#loc22, #loc20])
#loc128 = loc(fused[#loc23, #loc24])
#loc129 = loc(fused[#loc25, #loc26])
#loc130 = loc(fused[#loc28, #loc29])
#loc131 = loc(fused[#loc30, #loc31])
#loc132 = loc(fused[#loc32, #loc33])
#loc133 = loc(fused[#loc36, #loc37])
#loc134 = loc(fused[#loc38, #loc39])
#loc135 = loc(fused[#loc40, #loc41])
#loc136 = loc(fused[#loc42, #loc43])
#loc137 = loc(fused[#loc44, #loc45])
#loc138 = loc(fused[#loc46, #loc47])
#loc139 = loc(fused[#loc48, #loc49])
#loc140 = loc(fused[#loc51, #loc50])
#loc141 = loc(fused[#loc52, #loc53])
#loc142 = loc(fused[#loc54, #loc55])
#loc143 = loc(fused[#loc58, #loc57])
#loc144 = loc(fused[#loc61, #loc59])
#loc145 = loc(fused[#loc62, #loc63])
#loc146 = loc(fused[#loc64, #loc65])
#loc147 = loc(fused[#loc67, #loc68])
#loc148 = loc(fused[#loc69, #loc70])
#loc149 = loc(fused[#loc71, #loc72])
#loc150 = loc(fused[#loc75, #loc76])
#loc151 = loc(fused[#loc78, #loc79])
#loc152 = loc(fused[#loc80, #loc81])
#loc153 = loc(fused[#loc82, #loc83])
#loc154 = loc(fused[#loc84, #loc85])
#loc155 = loc(fused[#loc87, #loc86])
#loc156 = loc(fused[#loc88, #loc89])
#loc157 = loc(fused[#loc90, #loc91])
#loc158 = loc(fused[#loc94, #loc93])
#loc159 = loc(fused[#loc97, #loc95])
#loc160 = loc(fused[#loc98, #loc99])
#loc161 = loc(fused[#loc100, #loc101])
#loc162 = loc(fused[#loc103, #loc104])
#loc163 = loc(fused[#loc105, #loc106])
#loc164 = loc(fused[#loc108, #loc109, #loc110, #loc104])
#loc165 = loc(fused[#loc111, #loc112])
#loc166 = loc(fused[#loc113, #loc114])
