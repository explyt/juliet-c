!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc115)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc116)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc117)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc118)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc119)
  cir.func private @close(!s32i) -> !s32i loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc15)
  cir.func no_proto @CWE510_Trapdoor__network_listen_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc125)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc126)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc127)
            %4 = cir.const #cir.int<1> : !s32i loc(#loc27)
            %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc27)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc126)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc29)
            cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc127)
            cir.scope {
              cir.do {
                cir.scope {
                  %8 = cir.const #cir.int<2> : !s32i loc(#loc34)
                  %9 = cir.const #cir.int<1> : !s32i loc(#loc35)
                  %10 = cir.const #cir.int<6> : !s32i loc(#loc36)
                  %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc37)
                  cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
                  cir.scope {
                    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc42)
                    %31 = cir.const #cir.int<1> : !s32i loc(#loc43)
                    %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc43)
                    %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc132)
                    cir.if %33 {
                      cir.break loc(#loc45)
                    } loc(#loc133)
                  } loc(#loc131)
                  %12 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc134)
                  %13 = cir.const #cir.int<0> : !s32i loc(#loc48)
                  %14 = cir.const #cir.int<16> : !u64i loc(#loc135)
                  cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc136)
                  %15 = cir.const #cir.int<2> : !s32i loc(#loc53)
                  %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc53)
                  %17 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc54)
                  cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc137)
                  %18 = cir.const #cir.int<0> : !s32i loc(#loc56)
                  %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc56)
                  %20 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc57)
                  %21 = cir.get_member %20[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc58)
                  cir.store %19, %21 : !u32i, !cir.ptr<!u32i> loc(#loc138)
                  %22 = cir.const #cir.int<30000> : !s32i loc(#loc60)
                  %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc60)
                  %24 = cir.call @htons(%23) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc61)
                  %25 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
                  cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc139)
                  cir.scope {
                    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
                    %31 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc141)
                    %32 = cir.const #cir.int<16> : !u64i loc(#loc142)
                    %33 = cir.cast(integral, %32 : !u64i), !u32i loc(#loc142)
                    %34 = cir.call @bind(%30, %31, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc72)
                    %35 = cir.const #cir.int<1> : !s32i loc(#loc73)
                    %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc73)
                    %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc143)
                    cir.if %37 {
                      cir.break loc(#loc75)
                    } loc(#loc144)
                  } loc(#loc140)
                  cir.scope {
                    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                    %31 = cir.const #cir.int<5> : !s32i loc(#loc79)
                    %32 = cir.call @listen(%30, %31) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc80)
                    %33 = cir.const #cir.int<1> : !s32i loc(#loc81)
                    %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc81)
                    %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc146)
                    cir.if %35 {
                      cir.break loc(#loc83)
                    } loc(#loc147)
                  } loc(#loc145)
                  %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                  %27 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc85)
                  %28 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc86)
                  %29 = cir.call @accept(%26, %27, %28) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc87)
                  cir.store %29, %3 : !s32i, !cir.ptr<!s32i> loc(#loc148)
                  cir.scope {
                    %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                    %31 = cir.const #cir.int<1> : !s32i loc(#loc93)
                    %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc93)
                    %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc150)
                    cir.if %33 {
                      cir.break loc(#loc95)
                    } loc(#loc151)
                  } loc(#loc149)
                } loc(#loc129)
                cir.yield loc(#loc31)
              } while {
                %8 = cir.const #cir.int<0> : !s32i loc(#loc96)
                %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc96)
                cir.condition(%9) loc(#loc96)
              } loc(#loc128)
            } loc(#loc128)
            cir.scope {
              %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc100)
              %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc100)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc153)
              cir.if %11 {
                %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc103)
              } loc(#loc154)
            } loc(#loc152)
            cir.scope {
              %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc107)
              %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc107)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc156)
              cir.if %11 {
                %12 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc110)
              } loc(#loc157)
            } loc(#loc155)
          } loc(#loc124)
          cir.break loc(#loc111)
        } loc(#loc21)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc15)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc15)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          cir.break loc(#loc114)
        } loc(#loc112)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc123)
    cir.return loc(#loc17)
  } loc(#loc122)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_15.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/unistd.h":358:1)
#loc12 = loc("/usr/include/unistd.h":358:27)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("CWE510_Trapdoor__network_listen_15.c":105:19)
#loc16 = loc("CWE510_Trapdoor__network_listen_15.c":39:1)
#loc17 = loc("CWE510_Trapdoor__network_listen_15.c":108:1)
#loc18 = loc("CWE510_Trapdoor__network_listen_15.c":41:5)
#loc19 = loc("CWE510_Trapdoor__network_listen_15.c":107:5)
#loc20 = loc("CWE510_Trapdoor__network_listen_15.c":41:12)
#loc21 = loc("CWE510_Trapdoor__network_listen_15.c":43:5)
#loc22 = loc("CWE510_Trapdoor__network_listen_15.c":44:5)
#loc23 = loc("CWE510_Trapdoor__network_listen_15.c":101:5)
#loc24 = loc("CWE510_Trapdoor__network_listen_15.c":49:9)
#loc25 = loc("CWE510_Trapdoor__network_listen_15.c":49:28)
#loc26 = loc("CWE510_Trapdoor__network_listen_15.c":50:9)
#loc27 = loc("CWE510_Trapdoor__network_listen_15.c":50:31)
#loc28 = loc("CWE510_Trapdoor__network_listen_15.c":51:9)
#loc29 = loc("CWE510_Trapdoor__network_listen_15.c":51:31)
#loc30 = loc("CWE510_Trapdoor__network_listen_15.c":52:9)
#loc31 = loc("CWE510_Trapdoor__network_listen_15.c":86:17)
#loc32 = loc("CWE510_Trapdoor__network_listen_15.c":53:9)
#loc33 = loc("CWE510_Trapdoor__network_listen_15.c":85:9)
#loc34 = loc("CWE510_Trapdoor__network_listen_15.c":61:35)
#loc35 = loc("CWE510_Trapdoor__network_listen_15.c":61:44)
#loc36 = loc("CWE510_Trapdoor__network_listen_15.c":61:57)
#loc37 = loc("CWE510_Trapdoor__network_listen_15.c":61:28)
#loc38 = loc("CWE510_Trapdoor__network_listen_15.c":61:13)
#loc39 = loc("CWE510_Trapdoor__network_listen_15.c":61:68)
#loc40 = loc("CWE510_Trapdoor__network_listen_15.c":62:13)
#loc41 = loc("CWE510_Trapdoor__network_listen_15.c":65:13)
#loc42 = loc("CWE510_Trapdoor__network_listen_15.c":62:17)
#loc43 = loc("CWE510_Trapdoor__network_listen_15.c":62:33)
#loc44 = loc("CWE510_Trapdoor__network_listen_15.c":63:13)
#loc45 = loc("CWE510_Trapdoor__network_listen_15.c":64:17)
#loc46 = loc("CWE510_Trapdoor__network_listen_15.c":66:20)
#loc47 = loc("CWE510_Trapdoor__network_listen_15.c":66:21)
#loc48 = loc("CWE510_Trapdoor__network_listen_15.c":66:30)
#loc49 = loc("CWE510_Trapdoor__network_listen_15.c":66:33)
#loc50 = loc("CWE510_Trapdoor__network_listen_15.c":66:47)
#loc51 = loc("CWE510_Trapdoor__network_listen_15.c":66:13)
#loc52 = loc("CWE510_Trapdoor__network_listen_15.c":66:48)
#loc53 = loc("CWE510_Trapdoor__network_listen_15.c":67:34)
#loc54 = loc("/usr/include/netinet/in.h":249:5)
#loc55 = loc("CWE510_Trapdoor__network_listen_15.c":67:13)
#loc56 = loc("CWE510_Trapdoor__network_listen_15.c":68:39)
#loc57 = loc("/usr/include/netinet/in.h":251:20)
#loc58 = loc("/usr/include/netinet/in.h":33:15)
#loc59 = loc("CWE510_Trapdoor__network_listen_15.c":68:13)
#loc60 = loc("CWE510_Trapdoor__network_listen_15.c":69:38)
#loc61 = loc("CWE510_Trapdoor__network_listen_15.c":69:32)
#loc62 = loc("/usr/include/netinet/in.h":250:15)
#loc63 = loc("CWE510_Trapdoor__network_listen_15.c":69:13)
#loc64 = loc("CWE510_Trapdoor__network_listen_15.c":69:43)
#loc65 = loc("CWE510_Trapdoor__network_listen_15.c":70:13)
#loc66 = loc("CWE510_Trapdoor__network_listen_15.c":73:13)
#loc67 = loc("CWE510_Trapdoor__network_listen_15.c":70:22)
#loc68 = loc("CWE510_Trapdoor__network_listen_15.c":70:54)
#loc69 = loc("CWE510_Trapdoor__network_listen_15.c":70:55)
#loc70 = loc("CWE510_Trapdoor__network_listen_15.c":70:64)
#loc71 = loc("CWE510_Trapdoor__network_listen_15.c":70:78)
#loc72 = loc("CWE510_Trapdoor__network_listen_15.c":70:17)
#loc73 = loc("CWE510_Trapdoor__network_listen_15.c":70:84)
#loc74 = loc("CWE510_Trapdoor__network_listen_15.c":71:13)
#loc75 = loc("CWE510_Trapdoor__network_listen_15.c":72:17)
#loc76 = loc("CWE510_Trapdoor__network_listen_15.c":74:13)
#loc77 = loc("CWE510_Trapdoor__network_listen_15.c":77:13)
#loc78 = loc("CWE510_Trapdoor__network_listen_15.c":74:24)
#loc79 = loc("CWE510_Trapdoor__network_listen_15.c":74:38)
#loc80 = loc("CWE510_Trapdoor__network_listen_15.c":74:17)
#loc81 = loc("CWE510_Trapdoor__network_listen_15.c":74:44)
#loc82 = loc("CWE510_Trapdoor__network_listen_15.c":75:13)
#loc83 = loc("CWE510_Trapdoor__network_listen_15.c":76:17)
#loc84 = loc("CWE510_Trapdoor__network_listen_15.c":79:35)
#loc85 = loc("CWE510_Trapdoor__network_listen_15.c":79:49)
#loc86 = loc("CWE510_Trapdoor__network_listen_15.c":79:55)
#loc87 = loc("CWE510_Trapdoor__network_listen_15.c":79:28)
#loc88 = loc("CWE510_Trapdoor__network_listen_15.c":79:13)
#loc89 = loc("CWE510_Trapdoor__network_listen_15.c":79:59)
#loc90 = loc("CWE510_Trapdoor__network_listen_15.c":80:13)
#loc91 = loc("CWE510_Trapdoor__network_listen_15.c":83:13)
#loc92 = loc("CWE510_Trapdoor__network_listen_15.c":80:17)
#loc93 = loc("CWE510_Trapdoor__network_listen_15.c":80:33)
#loc94 = loc("CWE510_Trapdoor__network_listen_15.c":81:13)
#loc95 = loc("CWE510_Trapdoor__network_listen_15.c":82:17)
#loc96 = loc("CWE510_Trapdoor__network_listen_15.c":86:16)
#loc97 = loc("CWE510_Trapdoor__network_listen_15.c":87:9)
#loc98 = loc("CWE510_Trapdoor__network_listen_15.c":90:9)
#loc99 = loc("CWE510_Trapdoor__network_listen_15.c":87:13)
#loc100 = loc("CWE510_Trapdoor__network_listen_15.c":87:29)
#loc101 = loc("CWE510_Trapdoor__network_listen_15.c":88:9)
#loc102 = loc("CWE510_Trapdoor__network_listen_15.c":89:26)
#loc103 = loc("CWE510_Trapdoor__network_listen_15.c":89:13)
#loc104 = loc("CWE510_Trapdoor__network_listen_15.c":91:9)
#loc105 = loc("CWE510_Trapdoor__network_listen_15.c":94:9)
#loc106 = loc("CWE510_Trapdoor__network_listen_15.c":91:13)
#loc107 = loc("CWE510_Trapdoor__network_listen_15.c":91:29)
#loc108 = loc("CWE510_Trapdoor__network_listen_15.c":92:9)
#loc109 = loc("CWE510_Trapdoor__network_listen_15.c":93:26)
#loc110 = loc("CWE510_Trapdoor__network_listen_15.c":93:13)
#loc111 = loc("CWE510_Trapdoor__network_listen_15.c":102:5)
#loc112 = loc("CWE510_Trapdoor__network_listen_15.c":103:5)
#loc113 = loc("CWE510_Trapdoor__network_listen_15.c":105:9)
#loc114 = loc("CWE510_Trapdoor__network_listen_15.c":106:9)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc11, #loc12])
#loc121 = loc(fused[#loc13, #loc14])
#loc122 = loc(fused[#loc16, #loc17])
#loc123 = loc(fused[#loc18, #loc19])
#loc124 = loc(fused[#loc22, #loc23])
#loc125 = loc(fused[#loc24, #loc25])
#loc126 = loc(fused[#loc26, #loc27])
#loc127 = loc(fused[#loc28, #loc29])
#loc128 = loc(fused[#loc30, #loc31])
#loc129 = loc(fused[#loc32, #loc33])
#loc130 = loc(fused[#loc38, #loc39])
#loc131 = loc(fused[#loc40, #loc41])
#loc132 = loc(fused[#loc42, #loc43])
#loc133 = loc(fused[#loc44, #loc41])
#loc134 = loc(fused[#loc46, #loc47])
#loc135 = loc(fused[#loc49, #loc50])
#loc136 = loc(fused[#loc51, #loc52])
#loc137 = loc(fused[#loc55, #loc53])
#loc138 = loc(fused[#loc59, #loc56])
#loc139 = loc(fused[#loc63, #loc64])
#loc140 = loc(fused[#loc65, #loc66])
#loc141 = loc(fused[#loc68, #loc69])
#loc142 = loc(fused[#loc70, #loc71])
#loc143 = loc(fused[#loc72, #loc73])
#loc144 = loc(fused[#loc74, #loc66])
#loc145 = loc(fused[#loc76, #loc77])
#loc146 = loc(fused[#loc80, #loc81])
#loc147 = loc(fused[#loc82, #loc77])
#loc148 = loc(fused[#loc88, #loc89])
#loc149 = loc(fused[#loc90, #loc91])
#loc150 = loc(fused[#loc92, #loc93])
#loc151 = loc(fused[#loc94, #loc91])
#loc152 = loc(fused[#loc97, #loc98])
#loc153 = loc(fused[#loc99, #loc100])
#loc154 = loc(fused[#loc101, #loc98])
#loc155 = loc(fused[#loc104, #loc105])
#loc156 = loc(fused[#loc106, #loc107])
#loc157 = loc(fused[#loc108, #loc105])
