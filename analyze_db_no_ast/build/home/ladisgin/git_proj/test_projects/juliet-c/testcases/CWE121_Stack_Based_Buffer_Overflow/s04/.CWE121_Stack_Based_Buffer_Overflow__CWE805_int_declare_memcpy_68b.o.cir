!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68_badData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc45)
  cir.func private  @printIntLine(!s32i) loc(#loc46)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b_badSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc48)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc45)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc48)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc50)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc50)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc50)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc13)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc13)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc14)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc14)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc15)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc15)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc51)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc52)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc53)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc21)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc22)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc23)
    } loc(#loc49)
    cir.return loc(#loc6)
  } loc(#loc47)
  cir.global "private"  external @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68_goodG2BData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc54)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b_goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc56)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc54)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc56)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc58)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc58)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc58)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc34)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc35)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc35)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc36)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc36)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc59)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc60)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc61)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc43)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc41)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc44)
    } loc(#loc57)
    cir.return loc(#loc27)
  } loc(#loc55)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":19:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":19:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":26:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":35:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":28:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":28:18)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":29:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":34:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":30:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":30:29)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":32:16)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":32:22)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":32:30)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":32:34)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":32:44)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":32:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":32:45)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":33:22)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":33:27)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":33:28)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":33:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":20:1)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":20:14)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":42:1)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":51:1)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":44:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":44:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":45:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":50:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":46:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":46:29)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":48:16)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":48:22)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":48:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":48:34)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":48:44)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":48:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":48:45)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":49:22)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":49:27)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":49:28)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c":49:9)
#loc45 = loc(fused[#loc1, #loc2])
#loc46 = loc(fused[#loc3, #loc4])
#loc47 = loc(fused[#loc5, #loc6])
#loc48 = loc(fused[#loc7, #loc8])
#loc49 = loc(fused[#loc9, #loc10])
#loc50 = loc(fused[#loc11, #loc12])
#loc51 = loc(fused[#loc16, #loc17])
#loc52 = loc(fused[#loc15, #loc17])
#loc53 = loc(fused[#loc18, #loc19])
#loc54 = loc(fused[#loc24, #loc25])
#loc55 = loc(fused[#loc26, #loc27])
#loc56 = loc(fused[#loc28, #loc29])
#loc57 = loc(fused[#loc30, #loc31])
#loc58 = loc(fused[#loc32, #loc33])
#loc59 = loc(fused[#loc37, #loc38])
#loc60 = loc(fused[#loc36, #loc38])
#loc61 = loc(fused[#loc39, #loc40])
