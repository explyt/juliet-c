!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc243)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc244)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc245)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private @printIntLine(!s32i) loc(#loc247)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc22)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc253)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc253)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc253)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc31)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc31)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc31)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc31)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc31)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc31)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc31)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc31)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc244)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc255)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc39)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc42)
              } loc(#loc256)
            } loc(#loc254)
          } loc(#loc252)
          cir.break loc(#loc43)
        } loc(#loc23)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc45)
          cir.break loc(#loc46)
        } loc(#loc44)
        cir.yield loc(#loc20)
      } loc(#loc20)
    } loc(#loc251)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc49)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc51)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc259)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc53)
          cir.break loc(#loc54)
        } loc(#loc50)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc57)
          cir.break loc(#loc58)
        } loc(#loc55)
        cir.yield loc(#loc47)
      } loc(#loc47)
    } loc(#loc258)
    cir.return loc(#loc14)
  } loc(#loc248)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc261)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc262)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc263)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc264)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    cir.return loc(#loc60)
  } loc(#loc260)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc75)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc79)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc270)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc270)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc270)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc87)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc88)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc88)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc88)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc88)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc88)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc88)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc88)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc88)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc244)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc89)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc90)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc91)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc272)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc95)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc96)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc99)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc99)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc100)
              } loc(#loc273)
            } loc(#loc271)
          } loc(#loc269)
          cir.break loc(#loc101)
        } loc(#loc80)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc103)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc103)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc104)
          cir.break loc(#loc105)
        } loc(#loc102)
        cir.yield loc(#loc77)
      } loc(#loc77)
    } loc(#loc268)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc108)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc110)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc110)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc111)
          cir.break loc(#loc112)
        } loc(#loc109)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc117)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc277)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc121)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc279)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc123)
            } else {
              %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc69)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc69)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc124)
            } loc(#loc278)
          } loc(#loc276)
          cir.break loc(#loc125)
        } loc(#loc113)
        cir.yield loc(#loc106)
      } loc(#loc106)
    } loc(#loc275)
    cir.return loc(#loc71)
  } loc(#loc265)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc131)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc135)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc285)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc285)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc285)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc143)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc144)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc144)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc144)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc144)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc144)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc144)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc144)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc144)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc244)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc145)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc146)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc147)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc147)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc287)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc151)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc152)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc289)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc155)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc155)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc156)
              } loc(#loc288)
            } loc(#loc286)
          } loc(#loc284)
          cir.break loc(#loc157)
        } loc(#loc136)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc159)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc159)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc160)
          cir.break loc(#loc161)
        } loc(#loc158)
        cir.yield loc(#loc133)
      } loc(#loc133)
    } loc(#loc283)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc164)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc169)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc292)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc173)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc294)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc175)
            } else {
              %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc176)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc176)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc177)
            } loc(#loc293)
          } loc(#loc291)
          cir.break loc(#loc178)
        } loc(#loc165)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc180)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc180)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc181)
          cir.break loc(#loc182)
        } loc(#loc179)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc290)
    cir.return loc(#loc127)
  } loc(#loc280)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc296)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc187)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc188)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc192)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc194)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc194)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc195)
          cir.break loc(#loc196)
        } loc(#loc193)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc198)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc299)
          cir.break loc(#loc200)
        } loc(#loc197)
        cir.yield loc(#loc190)
      } loc(#loc190)
    } loc(#loc298)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc203)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc205)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc301)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc207)
          cir.break loc(#loc208)
        } loc(#loc204)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc210)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc210)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc211)
          cir.break loc(#loc212)
        } loc(#loc209)
        cir.yield loc(#loc201)
      } loc(#loc201)
    } loc(#loc300)
    cir.return loc(#loc184)
  } loc(#loc295)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc303)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc217)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc218)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc222)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc224)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
          cir.break loc(#loc226)
        } loc(#loc223)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc228)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc228)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc229)
          cir.break loc(#loc230)
        } loc(#loc227)
        cir.yield loc(#loc220)
      } loc(#loc220)
    } loc(#loc305)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc233)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc235)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc308)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc237)
          cir.break loc(#loc238)
        } loc(#loc234)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc240)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc240)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc241)
          cir.break loc(#loc242)
        } loc(#loc239)
        cir.yield loc(#loc231)
      } loc(#loc231)
    } loc(#loc307)
    cir.return loc(#loc214)
  } loc(#loc302)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":42:23)
#loc10 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":48:19)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":24:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":62:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":26:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":26:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":28:13)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":28:12)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":28:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":29:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":50:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":29:12)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":31:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":32:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":44:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":33:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":33:45)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":43:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:19)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:32)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:49)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":35:59)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":36:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":39:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":41:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":38:25)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":38:20)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":38:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":38:36)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":42:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":45:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":46:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":48:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":49:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":51:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":61:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":51:12)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":53:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":55:22)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":55:28)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":55:9)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":56:9)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":57:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":59:19)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":59:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":60:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":224:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":230:1)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":226:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":226:14)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":227:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":227:14)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":228:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":228:14)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":229:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":229:14)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":110:23)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":69:1)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":114:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":71:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":71:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":73:13)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":73:12)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":73:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":74:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":95:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":74:12)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":76:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":77:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":89:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":78:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":78:45)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":88:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:19)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:32)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:49)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":80:59)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":81:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":84:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":86:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":83:25)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":83:20)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":83:13)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":83:36)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":87:23)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":87:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":90:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":91:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":93:19)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":93:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":94:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":96:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":113:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":96:12)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":98:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":100:19)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":100:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":101:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":102:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":104:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":111:9)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":104:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":104:21)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":105:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":107:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":109:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":106:26)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":106:32)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":106:13)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":110:13)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":112:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":117:1)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":162:1)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":119:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":119:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":121:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":121:12)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":121:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":122:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":143:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":122:12)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":124:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":125:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":137:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":126:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":126:45)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":136:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:19)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:32)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:49)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:13)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":128:59)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":129:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":132:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":134:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":131:25)
#loc152 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":131:20)
#loc153 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":131:13)
#loc154 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":131:36)
#loc155 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":135:23)
#loc156 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":135:13)
#loc157 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":138:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":139:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":141:19)
#loc160 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":141:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":142:9)
#loc162 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":144:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":161:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":144:12)
#loc165 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":146:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":148:9)
#loc167 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":155:9)
#loc168 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":148:13)
#loc169 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":148:21)
#loc170 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":149:9)
#loc171 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":151:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":153:9)
#loc173 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":150:26)
#loc174 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":150:32)
#loc175 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":150:13)
#loc176 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":154:23)
#loc177 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":154:13)
#loc178 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":156:9)
#loc179 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":157:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":159:19)
#loc181 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":159:9)
#loc182 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":160:9)
#loc183 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":165:1)
#loc184 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":192:1)
#loc185 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":167:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":167:9)
#loc187 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":169:13)
#loc188 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":169:12)
#loc189 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":169:5)
#loc190 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":170:5)
#loc191 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":180:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":170:12)
#loc193 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":172:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":174:19)
#loc195 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":174:9)
#loc196 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":175:9)
#loc197 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":176:5)
#loc198 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":178:16)
#loc199 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":178:9)
#loc200 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":179:9)
#loc201 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":181:5)
#loc202 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":191:5)
#loc203 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":181:12)
#loc204 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":183:5)
#loc205 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":185:22)
#loc206 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":185:28)
#loc207 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":185:9)
#loc208 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":186:9)
#loc209 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":187:5)
#loc210 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":189:19)
#loc211 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":189:9)
#loc212 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":190:9)
#loc213 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":195:1)
#loc214 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":222:1)
#loc215 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":197:5)
#loc216 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":197:9)
#loc217 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":199:13)
#loc218 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":199:12)
#loc219 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":199:5)
#loc220 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":200:5)
#loc221 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":210:5)
#loc222 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":200:12)
#loc223 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":202:5)
#loc224 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":204:16)
#loc225 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":204:9)
#loc226 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":205:9)
#loc227 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":206:5)
#loc228 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":208:19)
#loc229 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":208:9)
#loc230 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":209:9)
#loc231 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":211:5)
#loc232 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":221:5)
#loc233 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":211:12)
#loc234 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":213:5)
#loc235 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":215:22)
#loc236 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":215:28)
#loc237 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":215:9)
#loc238 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":216:9)
#loc239 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":217:5)
#loc240 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":219:19)
#loc241 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":219:9)
#loc242 = loc("CWE369_Divide_by_Zero__int_fgets_divide_15.c":220:9)
#loc243 = loc(fused[#loc1, #loc2])
#loc244 = loc(fused[#loc3, #loc4])
#loc245 = loc(fused[#loc5, #loc6])
#loc246 = loc(fused[#loc7, #loc8])
#loc247 = loc(fused[#loc11, #loc12])
#loc248 = loc(fused[#loc13, #loc14])
#loc249 = loc(fused[#loc15, #loc16])
#loc250 = loc(fused[#loc19, #loc17])
#loc251 = loc(fused[#loc20, #loc21])
#loc252 = loc(fused[#loc24, #loc25])
#loc253 = loc(fused[#loc26, #loc27])
#loc254 = loc(fused[#loc28, #loc29])
#loc255 = loc(fused[#loc33, #loc34])
#loc256 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc257 = loc(fused[#loc40, #loc41])
#loc258 = loc(fused[#loc47, #loc48])
#loc259 = loc(fused[#loc51, #loc52])
#loc260 = loc(fused[#loc59, #loc60])
#loc261 = loc(fused[#loc61, #loc62])
#loc262 = loc(fused[#loc63, #loc64])
#loc263 = loc(fused[#loc65, #loc66])
#loc264 = loc(fused[#loc67, #loc68])
#loc265 = loc(fused[#loc70, #loc71])
#loc266 = loc(fused[#loc72, #loc73])
#loc267 = loc(fused[#loc76, #loc74])
#loc268 = loc(fused[#loc77, #loc78])
#loc269 = loc(fused[#loc81, #loc82])
#loc270 = loc(fused[#loc83, #loc84])
#loc271 = loc(fused[#loc85, #loc86])
#loc272 = loc(fused[#loc90, #loc91])
#loc273 = loc(fused[#loc92, #loc93, #loc94, #loc86])
#loc274 = loc(fused[#loc97, #loc98])
#loc275 = loc(fused[#loc106, #loc107])
#loc276 = loc(fused[#loc114, #loc115])
#loc277 = loc(fused[#loc116, #loc117])
#loc278 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc279 = loc(fused[#loc121, #loc122])
#loc280 = loc(fused[#loc126, #loc127])
#loc281 = loc(fused[#loc128, #loc129])
#loc282 = loc(fused[#loc132, #loc130])
#loc283 = loc(fused[#loc133, #loc134])
#loc284 = loc(fused[#loc137, #loc138])
#loc285 = loc(fused[#loc139, #loc140])
#loc286 = loc(fused[#loc141, #loc142])
#loc287 = loc(fused[#loc146, #loc147])
#loc288 = loc(fused[#loc148, #loc149, #loc150, #loc142])
#loc289 = loc(fused[#loc153, #loc154])
#loc290 = loc(fused[#loc162, #loc163])
#loc291 = loc(fused[#loc166, #loc167])
#loc292 = loc(fused[#loc168, #loc169])
#loc293 = loc(fused[#loc170, #loc171, #loc172, #loc167])
#loc294 = loc(fused[#loc173, #loc174])
#loc295 = loc(fused[#loc183, #loc184])
#loc296 = loc(fused[#loc185, #loc186])
#loc297 = loc(fused[#loc189, #loc187])
#loc298 = loc(fused[#loc190, #loc191])
#loc299 = loc(fused[#loc199, #loc198])
#loc300 = loc(fused[#loc201, #loc202])
#loc301 = loc(fused[#loc205, #loc206])
#loc302 = loc(fused[#loc213, #loc214])
#loc303 = loc(fused[#loc215, #loc216])
#loc304 = loc(fused[#loc219, #loc217])
#loc305 = loc(fused[#loc220, #loc221])
#loc306 = loc(fused[#loc225, #loc224])
#loc307 = loc(fused[#loc231, #loc232])
#loc308 = loc(fused[#loc235, #loc236])
