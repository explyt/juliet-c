!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":24:21)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":24:28)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":133:10)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":133:14)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":133:20)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":133:32)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":60:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":60:32)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":90:25)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":90:32)
#loc275 = loc(fused[#loc11, #loc12])
#loc308 = loc(fused[#loc104, #loc105])
#loc309 = loc(fused[#loc106, #loc107])
#loc315 = loc(fused[#loc126, #loc127])
#loc341 = loc(fused[#loc201, #loc202])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc270)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc271)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc272)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc273)
  cir.func internal private @badSink(%arg0: !cir.ptr<!void> loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc276)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc277)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc275)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc17)
    cir.br ^bb1 loc(#loc278)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc20)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc21)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc21)
    %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc20)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc276)
    %7 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc22)
    %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc23)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc279)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc280)
    %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    cir.store %13, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc277)
    cir.br ^bb2 loc(#loc281)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!void>, !cir.bool loc(#loc282)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc283)
  ^bb3:  // pred: ^bb2
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc28)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
    %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc41)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc10)
  } loc(#loc274)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc284)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc285)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc286)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc288)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc289)
    %2 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc290)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc55)
    cir.store %3, %2 : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>> loc(#loc290)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc56)
    cir.store %4, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc291)
    cir.br ^bb1 loc(#loc292)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc60)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc61)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc61)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc293)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc294)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc60)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc295)
    cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc288)
    cir.br ^bb2 loc(#loc296)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc67)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc67)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc297)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc298)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc69)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc71)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc69)
    cir.br ^bb4 loc(#loc65)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc65)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc73)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc74)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc74)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc74)
    %25 = cir.call @wmemset(%19, %20, %24) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc76)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc79)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc79)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc81)
    cir.store %26, %31 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc82)
    cir.store %33, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc300)
    cir.br ^bb6 loc(#loc59)
  ^bb6:  // pred: ^bb5
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc84)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
    cir.call %34(%35) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc84)
    cir.return loc(#loc49)
  } loc(#loc287)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc302)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc88)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc303)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc90)
    cir.return loc(#loc87)
  } loc(#loc301)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc304)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc305)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc306)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc101)
  cir.func @main(%arg0: !s32i loc(fused[#loc104, #loc105]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc106, #loc107])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc308)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc309)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc108)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc109)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc110)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc110)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc111)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc98)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc310)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_44_good() : () -> () loc(#loc113)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc99)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc100)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc311)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad() : () -> () loc(#loc117)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc101)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc120)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc312)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc312)
    cir.return %17 : !s32i loc(#loc312)
  } loc(#loc307)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc313)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc126, #loc127])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc316)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc317)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc315)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc132)
    cir.br ^bb1 loc(#loc318)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc135)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc136)
    %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc135)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc316)
    %7 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc137)
    %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc138)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc139)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc319)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc140)
    %14 = cir.call @calloc(%11, %13) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
    cir.store %14, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc317)
    cir.br ^bb2 loc(#loc320)
  ^bb2:  // pred: ^bb1
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
    %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!void>, !cir.bool loc(#loc321)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc322)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc146)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc147)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc148)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc146)
    cir.br ^bb4 loc(#loc142)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc149)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc150)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
    %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc151)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc152)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc152)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc154)
    cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc155)
    cir.br ^bb6 loc(#loc134)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc125)
  } loc(#loc314)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc324)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc325)
    %2 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc326)
    %3 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc163)
    cir.store %3, %2 : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>> loc(#loc326)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc164)
    cir.store %4, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc327)
    cir.br ^bb1 loc(#loc328)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc168)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc169)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc169)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc329)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc330)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc168)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc331)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc324)
    cir.br ^bb2 loc(#loc332)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc175)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc175)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc333)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc334)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc177)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc178)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc179)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc177)
    cir.br ^bb4 loc(#loc173)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc173)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc180)
    %21 = cir.const #cir.int<65> : !s32i loc(#loc181)
    %22 = cir.const #cir.int<50> : !s32i loc(#loc182)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc182)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc182)
    cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc335)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc186)
    %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc186)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
    %29 = cir.const #cir.int<50> : !s32i loc(#loc188)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc188)
    %32 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %31 : !s32i), !cir.ptr<!s8i> loc(#loc190)
    cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc336)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc191)
    cir.store %34, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc337)
    cir.br ^bb6 loc(#loc167)
  ^bb6:  // pred: ^bb5
    %35 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc193)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc194)
    cir.call %35(%36) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc193)
    cir.return loc(#loc157)
  } loc(#loc323)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc338)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc339)
  cir.func internal private @goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc201, #loc202])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc342)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc343)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc341)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc207)
    cir.br ^bb1 loc(#loc344)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc210)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc211)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc211)
    %6 = cir.call @wcslen(%5) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc210)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc342)
    %7 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc212)
    %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc213)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc214)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc214)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc345)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc346)
    %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc212)
    cir.store %13, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc343)
    cir.br ^bb2 loc(#loc347)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc219)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc220)
    %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!void>, !cir.bool loc(#loc348)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc349)
  ^bb3:  // pred: ^bb2
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc222)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc223)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc224)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc222)
    cir.br ^bb4 loc(#loc218)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc218)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc225)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc225)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc226)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc226)
    %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc227)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc228)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc228)
    cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc229)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc230)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc231)
    cir.br ^bb6 loc(#loc209)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc200)
  } loc(#loc340)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc351)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc352)
    %2 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc353)
    %3 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc239)
    cir.store %3, %2 : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>> loc(#loc353)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc240)
    cir.store %4, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc354)
    cir.br ^bb1 loc(#loc355)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc244)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc245)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc245)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc356)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc357)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc244)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc358)
    cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc351)
    cir.br ^bb2 loc(#loc359)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc250)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc251)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc251)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc360)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc361)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc253)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc254)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc255)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc253)
    cir.br ^bb4 loc(#loc249)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc249)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc256)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc257)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc258)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc259)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc258)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc258)
    %25 = cir.call @wmemset(%19, %20, %24) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc260)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc261)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc262)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc263)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc264)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc263)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc265)
    cir.store %26, %31 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc266)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc266)
    cir.store %33, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc363)
    cir.br ^bb6 loc(#loc243)
  ^bb6:  // pred: ^bb5
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc268)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc269)
    cir.call %34(%35) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc268)
    cir.return loc(#loc233)
  } loc(#loc350)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdlib.h":675:1)
#loc4 = loc("/usr/include/stdlib.h":676:14)
#loc5 = loc("/usr/include/wchar.h":98:1)
#loc6 = loc("/usr/include/wchar.h":100:14)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":35:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":28:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":28:45)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:64)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":25:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":34:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":28:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":28:41)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:38)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:46)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:49)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:63)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":31:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":31:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":31:15)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":32:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":32:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":33:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":33:9)
#loc42 = loc("/usr/include/stdlib.h":672:1)
#loc43 = loc("/usr/include/stdlib.h":672:45)
#loc44 = loc("/usr/include/stdlib.h":756:1)
#loc45 = loc("/usr/include/stdlib.h":756:70)
#loc46 = loc("/usr/include/wchar.h":296:1)
#loc47 = loc("/usr/include/wchar.h":296:65)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":37:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":53:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:71)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":39:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":39:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":41:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":41:32)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":42:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":42:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":43:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":50:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:46)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:53)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:56)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:70)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:46)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:36)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:37)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:43)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:42)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:38)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:41)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:31)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:23)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:26)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":49:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":49:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":52:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":52:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":119:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":123:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":121:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":121:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":122:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":122:13)
#loc92 = loc("/usr/include/stdlib.h":575:1)
#loc93 = loc("/usr/include/stdlib.h":575:41)
#loc94 = loc("/usr/include/time.h":76:1)
#loc95 = loc("/usr/include/time.h":76:38)
#loc96 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc97 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":138:15)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":140:15)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":143:15)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":145:15)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":133:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":148:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":134:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":136:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":136:22)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":136:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":138:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":139:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":139:55)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":140:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":143:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":144:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":144:54)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":145:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":147:12)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":147:5)
#loc122 = loc("/usr/include/string.h":141:1)
#loc123 = loc("/usr/include/string.h":142:14)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":60:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":71:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":64:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":64:45)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:50)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":61:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":62:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":70:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":64:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":64:41)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:31)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:38)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:46)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:49)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:37)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:21)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:27)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:28)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:34)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:33)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":67:22)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":67:28)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":67:15)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":68:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":68:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":69:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":69:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":73:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":87:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:63)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":75:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":75:12)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":76:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":76:32)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":77:12)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":77:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":78:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":85:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:41)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:48)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:51)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:62)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:47)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:31)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:37)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:38)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:44)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:43)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:16)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:32)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:37)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:40)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:41)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:32)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:24)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:27)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:28)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":84:24)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":84:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":86:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":86:13)
#loc195 = loc("/usr/include/wchar.h":247:1)
#loc196 = loc("/usr/include/wchar.h":247:51)
#loc197 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc198 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":90:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":101:1)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":94:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":94:48)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:64)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":91:1)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":92:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":100:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":94:26)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":94:44)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:31)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:38)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:46)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:49)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:63)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:37)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:21)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:27)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:28)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:34)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:33)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":97:22)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":97:28)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":97:15)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":98:31)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":98:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":99:14)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":99:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":103:1)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":117:1)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:71)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":105:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":105:12)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":106:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":106:32)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":107:12)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":107:5)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":108:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":115:5)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:46)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:53)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:56)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:70)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:46)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:30)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:36)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:37)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:43)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:42)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:17)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:32)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:38)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:41)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:9)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:31)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:23)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:26)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:27)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":114:24)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":114:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":116:5)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":116:13)
#loc270 = loc(fused[#loc1, #loc2])
#loc271 = loc(fused[#loc3, #loc4])
#loc272 = loc(fused[#loc5, #loc6])
#loc273 = loc(fused[#loc7, #loc8])
#loc274 = loc(fused[#loc9, #loc10])
#loc276 = loc(fused[#loc13, #loc14])
#loc277 = loc(fused[#loc15, #loc16])
#loc278 = loc(fused[#loc18, #loc19])
#loc279 = loc(fused[#loc23, #loc24])
#loc280 = loc(fused[#loc25, #loc26])
#loc281 = loc(fused[#loc27, #loc28])
#loc282 = loc(fused[#loc29, #loc30])
#loc283 = loc(fused[#loc31, #loc28])
#loc284 = loc(fused[#loc42, #loc43])
#loc285 = loc(fused[#loc44, #loc45])
#loc286 = loc(fused[#loc46, #loc47])
#loc287 = loc(fused[#loc48, #loc49])
#loc288 = loc(fused[#loc50, #loc51])
#loc289 = loc(fused[#loc52, #loc53])
#loc290 = loc(fused[#loc54, #loc55])
#loc291 = loc(fused[#loc57, #loc56])
#loc292 = loc(fused[#loc58, #loc59])
#loc293 = loc(fused[#loc62, #loc63])
#loc294 = loc(fused[#loc61, #loc63])
#loc295 = loc(fused[#loc60, #loc51])
#loc296 = loc(fused[#loc64, #loc65])
#loc297 = loc(fused[#loc66, #loc67])
#loc298 = loc(fused[#loc68, #loc65])
#loc299 = loc(fused[#loc78, #loc77])
#loc300 = loc(fused[#loc83, #loc82])
#loc301 = loc(fused[#loc86, #loc87])
#loc302 = loc(fused[#loc88, #loc89])
#loc303 = loc(fused[#loc90, #loc91])
#loc304 = loc(fused[#loc92, #loc93])
#loc305 = loc(fused[#loc94, #loc95])
#loc306 = loc(fused[#loc96, #loc97])
#loc307 = loc(fused[#loc102, #loc103])
#loc310 = loc(fused[#loc113, #loc114])
#loc311 = loc(fused[#loc117, #loc118])
#loc312 = loc(fused[#loc121, #loc120])
#loc313 = loc(fused[#loc122, #loc123])
#loc314 = loc(fused[#loc124, #loc125])
#loc316 = loc(fused[#loc128, #loc129])
#loc317 = loc(fused[#loc130, #loc131])
#loc318 = loc(fused[#loc133, #loc134])
#loc319 = loc(fused[#loc138, #loc139])
#loc320 = loc(fused[#loc141, #loc142])
#loc321 = loc(fused[#loc143, #loc144])
#loc322 = loc(fused[#loc145, #loc142])
#loc323 = loc(fused[#loc156, #loc157])
#loc324 = loc(fused[#loc158, #loc159])
#loc325 = loc(fused[#loc160, #loc161])
#loc326 = loc(fused[#loc162, #loc163])
#loc327 = loc(fused[#loc165, #loc164])
#loc328 = loc(fused[#loc166, #loc167])
#loc329 = loc(fused[#loc170, #loc171])
#loc330 = loc(fused[#loc169, #loc171])
#loc331 = loc(fused[#loc168, #loc159])
#loc332 = loc(fused[#loc172, #loc173])
#loc333 = loc(fused[#loc174, #loc175])
#loc334 = loc(fused[#loc176, #loc173])
#loc335 = loc(fused[#loc184, #loc185])
#loc336 = loc(fused[#loc187, #loc186])
#loc337 = loc(fused[#loc192, #loc191])
#loc338 = loc(fused[#loc195, #loc196])
#loc339 = loc(fused[#loc197, #loc198])
#loc340 = loc(fused[#loc199, #loc200])
#loc342 = loc(fused[#loc203, #loc204])
#loc343 = loc(fused[#loc205, #loc206])
#loc344 = loc(fused[#loc208, #loc209])
#loc345 = loc(fused[#loc213, #loc214])
#loc346 = loc(fused[#loc215, #loc216])
#loc347 = loc(fused[#loc217, #loc218])
#loc348 = loc(fused[#loc219, #loc220])
#loc349 = loc(fused[#loc221, #loc218])
#loc350 = loc(fused[#loc232, #loc233])
#loc351 = loc(fused[#loc234, #loc235])
#loc352 = loc(fused[#loc236, #loc237])
#loc353 = loc(fused[#loc238, #loc239])
#loc354 = loc(fused[#loc241, #loc240])
#loc355 = loc(fused[#loc242, #loc243])
#loc356 = loc(fused[#loc246, #loc247])
#loc357 = loc(fused[#loc245, #loc247])
#loc358 = loc(fused[#loc244, #loc235])
#loc359 = loc(fused[#loc248, #loc249])
#loc360 = loc(fused[#loc250, #loc251])
#loc361 = loc(fused[#loc252, #loc249])
#loc362 = loc(fused[#loc262, #loc261])
#loc363 = loc(fused[#loc267, #loc266])
