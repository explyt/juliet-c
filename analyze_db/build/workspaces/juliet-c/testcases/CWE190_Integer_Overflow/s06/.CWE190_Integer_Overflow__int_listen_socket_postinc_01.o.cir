!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_listen_socket_postinc_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc308)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc309)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc310)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc311)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc312)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc313)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc314)
  cir.func private @close(!s32i) -> !s32i loc(#loc315)
  cir.func private @printIntLine(!s32i) loc(#loc316)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_postinc_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc318)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc319)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc321)
      %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc322)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc323)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc324)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc325)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc32)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc32)
      cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc323)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc34)
      cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc324)
      cir.scope {
        cir.do {
          cir.scope {
            %11 = cir.const #cir.int<2> : !s32i loc(#loc41)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %13 = cir.const #cir.int<6> : !s32i loc(#loc43)
            %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc44)
            cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc328)
            cir.scope {
              %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc49)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc50)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc330)
              cir.if %59 {
                cir.break loc(#loc52)
              } loc(#loc331)
            } loc(#loc329)
            %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc332)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc55)
            %17 = cir.const #cir.int<16> : !u64i loc(#loc333)
            cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc334)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc60)
            %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc60)
            %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
            cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc335)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc63)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc63)
            %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc336)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc67)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc67)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc68)
            %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc337)
            cir.scope {
              %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %57 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc339)
              %58 = cir.const #cir.int<16> : !u64i loc(#loc340)
              %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc340)
              %60 = cir.call @bind(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc79)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc80)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc80)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc341)
              cir.if %63 {
                cir.break loc(#loc82)
              } loc(#loc342)
            } loc(#loc338)
            cir.scope {
              %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %57 = cir.const #cir.int<5> : !s32i loc(#loc86)
              %58 = cir.call @listen(%56, %57) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc87)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc88)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc88)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc344)
              cir.if %61 {
                cir.break loc(#loc90)
              } loc(#loc345)
            } loc(#loc343)
            %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc92)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc93)
            %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc94)
            cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc346)
            cir.scope {
              %56 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc100)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc100)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc348)
              cir.if %59 {
                cir.break loc(#loc102)
              } loc(#loc349)
            } loc(#loc347)
            %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
            %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc104)
            %36 = cir.const #cir.int<3> : !s32i loc(#loc105)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc105)
            %38 = cir.const #cir.int<4> : !u64i loc(#loc105)
            %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc105)
            %40 = cir.const #cir.int<2> : !s32i loc(#loc105)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc105)
            %42 = cir.binop(add, %39, %41) : !u64i loc(#loc105)
            %43 = cir.const #cir.int<1> : !s32i loc(#loc106)
            %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc106)
            %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc350)
            %46 = cir.const #cir.int<0> : !s32i loc(#loc107)
            %47 = cir.call @recv(%33, %35, %45, %46) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc108)
            %48 = cir.cast(integral, %47 : !s64i), !s32i loc(#loc108)
            cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc351)
            cir.scope {
              %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc114)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc114)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc353)
              %60 = cir.ternary(%59, true {
                %61 = cir.const #true loc(#loc115)
                cir.yield %61 : !cir.bool loc(#loc115)
              }, false {
                %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %62 = cir.const #cir.int<0> : !s32i loc(#loc117)
                %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc354)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc115)
                  cir.yield %65 : !cir.bool loc(#loc115)
                }, false {
                  %65 = cir.const #false loc(#loc115)
                  cir.yield %65 : !cir.bool loc(#loc115)
                }) : (!cir.bool) -> !cir.bool loc(#loc115)
                cir.yield %64 : !cir.bool loc(#loc115)
              }) : (!cir.bool) -> !cir.bool loc(#loc115)
              cir.if %60 {
                cir.break loc(#loc119)
              } loc(#loc355)
            } loc(#loc352)
            %49 = cir.const #cir.int<0> : !s32i loc(#loc120)
            %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc120)
            %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %52 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc122)
            %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc122)
            cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc356)
            %54 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
            %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc124)
            cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc357)
          } loc(#loc327)
          cir.yield loc(#loc38)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc127)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc127)
          cir.condition(%12) loc(#loc127)
        } loc(#loc326)
      } loc(#loc326)
      cir.scope {
        %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc131)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc359)
        cir.if %14 {
          %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc133)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc134)
        } loc(#loc360)
      } loc(#loc358)
      cir.scope {
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc138)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc138)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc362)
        cir.if %14 {
          %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc140)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc141)
        } loc(#loc363)
      } loc(#loc361)
    } loc(#loc320)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc365)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
      %4 = cir.unary(inc, %3) nsw : !s32i, !s32i loc(#loc147)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc366)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc365)
      %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc149)
    } loc(#loc364)
    cir.return loc(#loc20)
  } loc(#loc317)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_postinc_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc368)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc152)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc369)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc154)
    cir.return loc(#loc151)
  } loc(#loc367)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc371)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc160)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc372)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc162)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc373)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc375)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
      %5 = cir.unary(inc, %4) nsw : !s32i, !s32i loc(#loc169)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc376)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
      cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc375)
      %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc170)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc171)
    } loc(#loc374)
    cir.return loc(#loc157)
  } loc(#loc370)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc377)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc174)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc379)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc179)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc380)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc382)
      %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc383)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc384)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc385)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc386)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc188)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc188)
      cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc384)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc190)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc190)
      cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc385)
      cir.scope {
        cir.do {
          cir.scope {
            %11 = cir.const #cir.int<2> : !s32i loc(#loc197)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc198)
            %13 = cir.const #cir.int<6> : !s32i loc(#loc199)
            %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc200)
            cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc389)
            cir.scope {
              %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc205)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc206)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc206)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc391)
              cir.if %59 {
                cir.break loc(#loc208)
              } loc(#loc392)
            } loc(#loc390)
            %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc393)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc211)
            %17 = cir.const #cir.int<16> : !u64i loc(#loc394)
            cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc395)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc216)
            %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc216)
            %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
            cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc396)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc218)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc218)
            %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc397)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc220)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc220)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc221)
            %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc398)
            cir.scope {
              %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc226)
              %57 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc400)
              %58 = cir.const #cir.int<16> : !u64i loc(#loc401)
              %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc401)
              %60 = cir.call @bind(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc231)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc232)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc232)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc402)
              cir.if %63 {
                cir.break loc(#loc234)
              } loc(#loc403)
            } loc(#loc399)
            cir.scope {
              %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc237)
              %57 = cir.const #cir.int<5> : !s32i loc(#loc238)
              %58 = cir.call @listen(%56, %57) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc239)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc240)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc240)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc405)
              cir.if %61 {
                cir.break loc(#loc242)
              } loc(#loc406)
            } loc(#loc404)
            %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc243)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc244)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc245)
            %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc246)
            cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc407)
            cir.scope {
              %56 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc251)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc252)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc252)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc409)
              cir.if %59 {
                cir.break loc(#loc254)
              } loc(#loc410)
            } loc(#loc408)
            %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc255)
            %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc256)
            %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc256)
            %36 = cir.const #cir.int<3> : !s32i loc(#loc257)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc257)
            %38 = cir.const #cir.int<4> : !u64i loc(#loc257)
            %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc257)
            %40 = cir.const #cir.int<2> : !s32i loc(#loc257)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc257)
            %42 = cir.binop(add, %39, %41) : !u64i loc(#loc257)
            %43 = cir.const #cir.int<1> : !s32i loc(#loc258)
            %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc258)
            %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc411)
            %46 = cir.const #cir.int<0> : !s32i loc(#loc259)
            %47 = cir.call @recv(%33, %35, %45, %46) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc260)
            %48 = cir.cast(integral, %47 : !s64i), !s32i loc(#loc260)
            cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc412)
            cir.scope {
              %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc266)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc266)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc414)
              %60 = cir.ternary(%59, true {
                %61 = cir.const #true loc(#loc267)
                cir.yield %61 : !cir.bool loc(#loc267)
              }, false {
                %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                %62 = cir.const #cir.int<0> : !s32i loc(#loc269)
                %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc415)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc267)
                  cir.yield %65 : !cir.bool loc(#loc267)
                }, false {
                  %65 = cir.const #false loc(#loc267)
                  cir.yield %65 : !cir.bool loc(#loc267)
                }) : (!cir.bool) -> !cir.bool loc(#loc267)
                cir.yield %64 : !cir.bool loc(#loc267)
              }) : (!cir.bool) -> !cir.bool loc(#loc267)
              cir.if %60 {
                cir.break loc(#loc271)
              } loc(#loc416)
            } loc(#loc413)
            %49 = cir.const #cir.int<0> : !s32i loc(#loc272)
            %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc272)
            %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc273)
            %52 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc274)
            %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc274)
            cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc417)
            %54 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc275)
            %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc276)
            cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc418)
          } loc(#loc388)
          cir.yield loc(#loc194)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc279)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc279)
          cir.condition(%12) loc(#loc279)
        } loc(#loc387)
      } loc(#loc387)
      cir.scope {
        %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc282)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc283)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc283)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc420)
        cir.if %14 {
          %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc285)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc286)
        } loc(#loc421)
      } loc(#loc419)
      cir.scope {
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc289)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc290)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc290)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc423)
        cir.if %14 {
          %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc292)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc293)
        } loc(#loc424)
      } loc(#loc422)
    } loc(#loc381)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc296)
      %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc297)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc426)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc428)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc303)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc304)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc429)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc302)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc428)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc305)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc306)
      } else {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc174)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc174)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc307)
      } loc(#loc427)
    } loc(#loc425)
    cir.return loc(#loc176)
  } loc(#loc378)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":44:1)
#loc20 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":124:1)
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":46:5)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":46:9)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":48:12)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":48:5)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":49:5)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":117:5)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":54:9)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":54:13)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":55:9)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":55:28)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":56:9)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":56:31)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":57:9)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":57:31)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":58:9)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":58:41)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":59:9)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":102:17)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":60:9)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":101:9)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":69:35)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":69:44)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":69:57)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":69:28)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":69:13)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":69:68)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":70:13)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":73:13)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":70:17)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":70:33)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":71:13)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":72:17)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":74:20)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":74:21)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":74:30)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":74:33)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":74:47)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":74:13)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":74:48)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":75:34)
#loc61 = loc("/usr/include/netinet/in.h":249:5)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":75:13)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":76:39)
#loc64 = loc("/usr/include/netinet/in.h":251:20)
#loc65 = loc("/usr/include/netinet/in.h":33:15)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":76:13)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":77:38)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":77:32)
#loc69 = loc("/usr/include/netinet/in.h":250:15)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":77:13)
#loc71 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":77:46)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":78:13)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":81:13)
#loc74 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":78:22)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":78:54)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":78:55)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":78:64)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":78:78)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":78:17)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":78:84)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":79:13)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":80:17)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":82:13)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":85:13)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":82:24)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":82:38)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":82:17)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":82:57)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":83:13)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":84:17)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":86:35)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":86:49)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":86:55)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":86:28)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":86:13)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":86:59)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":87:13)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":90:13)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":87:17)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":87:33)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":88:13)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":89:17)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":92:31)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":92:45)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":92:58)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":92:76)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":92:79)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":92:26)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":92:13)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":92:80)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":93:13)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":96:13)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":93:17)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":93:31)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":93:44)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":93:47)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":93:61)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":94:13)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":95:17)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":98:39)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":98:25)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":98:13)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":100:25)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":100:20)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":100:13)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":100:36)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":102:16)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":103:9)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":106:9)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":103:13)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":103:29)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":104:9)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":105:26)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":105:13)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":107:9)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":110:9)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":107:13)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":107:29)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":108:9)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":109:26)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":109:13)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":118:5)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":123:5)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":121:9)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":121:22)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":120:13)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":120:9)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":122:22)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":122:9)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":234:1)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":238:1)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":236:5)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":236:13)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":237:5)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":237:13)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":131:1)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":144:1)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":133:5)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":133:9)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":135:12)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":135:5)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":137:12)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":137:5)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":138:5)
#loc165 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":143:5)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":141:9)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":141:22)
#loc168 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":140:13)
#loc169 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":140:9)
#loc170 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":142:22)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":142:9)
#loc172 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc173 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":230:19)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":147:1)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":232:1)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":149:5)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":149:9)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":151:12)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":151:5)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":152:5)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":220:5)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":157:9)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":157:13)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":158:9)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":158:28)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":159:9)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":159:31)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":160:9)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":160:31)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":161:9)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":161:41)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":162:9)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":205:17)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":163:9)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":204:9)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":172:35)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":172:44)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":172:57)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":172:28)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":172:13)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":172:68)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":173:13)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":176:13)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":173:17)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":173:33)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":174:13)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":175:17)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":177:20)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":177:21)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":177:30)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":177:33)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":177:47)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":177:13)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":177:48)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":178:34)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":178:13)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":179:39)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":179:13)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":180:38)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":180:32)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":180:13)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":180:46)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":181:13)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":184:13)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":181:22)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":181:54)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":181:55)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":181:64)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":181:78)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":181:17)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":181:84)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":182:13)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":183:17)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":185:13)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":188:13)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":185:24)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":185:38)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":185:17)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":185:57)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":186:13)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":187:17)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":189:35)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":189:49)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":189:55)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":189:28)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":189:13)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":189:59)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":190:13)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":193:13)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":190:17)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":190:33)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":191:13)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":192:17)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":195:31)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":195:45)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":195:58)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":195:76)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":195:79)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":195:26)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":195:13)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":195:80)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":196:13)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":199:13)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":196:17)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":196:31)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":196:44)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":196:47)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":196:61)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":197:13)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":198:17)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":201:39)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":201:25)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":201:13)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":203:25)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":203:20)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":203:13)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":203:36)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":205:16)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":206:9)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":209:9)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":206:13)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":206:29)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":207:9)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":208:26)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":208:13)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":210:9)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":213:9)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":210:13)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":210:29)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":211:9)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":212:26)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":212:13)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":222:5)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":231:5)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":222:9)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":222:16)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":223:5)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":227:5)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":229:5)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":225:9)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":225:22)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":224:13)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":224:9)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":226:22)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":226:9)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_postinc_01.c":230:9)
#loc308 = loc(fused[#loc1, #loc2])
#loc309 = loc(fused[#loc3, #loc4])
#loc310 = loc(fused[#loc5, #loc6])
#loc311 = loc(fused[#loc7, #loc8])
#loc312 = loc(fused[#loc9, #loc10])
#loc313 = loc(fused[#loc11, #loc12])
#loc314 = loc(fused[#loc13, #loc14])
#loc315 = loc(fused[#loc15, #loc16])
#loc316 = loc(fused[#loc17, #loc18])
#loc317 = loc(fused[#loc19, #loc20])
#loc318 = loc(fused[#loc21, #loc22])
#loc319 = loc(fused[#loc24, #loc23])
#loc320 = loc(fused[#loc25, #loc26])
#loc321 = loc(fused[#loc27, #loc28])
#loc322 = loc(fused[#loc29, #loc30])
#loc323 = loc(fused[#loc31, #loc32])
#loc324 = loc(fused[#loc33, #loc34])
#loc325 = loc(fused[#loc35, #loc36])
#loc326 = loc(fused[#loc37, #loc38])
#loc327 = loc(fused[#loc39, #loc40])
#loc328 = loc(fused[#loc45, #loc46])
#loc329 = loc(fused[#loc47, #loc48])
#loc330 = loc(fused[#loc49, #loc50])
#loc331 = loc(fused[#loc51, #loc48])
#loc332 = loc(fused[#loc53, #loc54])
#loc333 = loc(fused[#loc56, #loc57])
#loc334 = loc(fused[#loc58, #loc59])
#loc335 = loc(fused[#loc62, #loc60])
#loc336 = loc(fused[#loc66, #loc63])
#loc337 = loc(fused[#loc70, #loc71])
#loc338 = loc(fused[#loc72, #loc73])
#loc339 = loc(fused[#loc75, #loc76])
#loc340 = loc(fused[#loc77, #loc78])
#loc341 = loc(fused[#loc79, #loc80])
#loc342 = loc(fused[#loc81, #loc73])
#loc343 = loc(fused[#loc83, #loc84])
#loc344 = loc(fused[#loc87, #loc88])
#loc345 = loc(fused[#loc89, #loc84])
#loc346 = loc(fused[#loc95, #loc96])
#loc347 = loc(fused[#loc97, #loc98])
#loc348 = loc(fused[#loc99, #loc100])
#loc349 = loc(fused[#loc101, #loc98])
#loc350 = loc(fused[#loc105, #loc106])
#loc351 = loc(fused[#loc109, #loc110])
#loc352 = loc(fused[#loc111, #loc112])
#loc353 = loc(fused[#loc113, #loc114])
#loc354 = loc(fused[#loc116, #loc117])
#loc355 = loc(fused[#loc118, #loc112])
#loc356 = loc(fused[#loc122, #loc120])
#loc357 = loc(fused[#loc125, #loc126])
#loc358 = loc(fused[#loc128, #loc129])
#loc359 = loc(fused[#loc130, #loc131])
#loc360 = loc(fused[#loc132, #loc129])
#loc361 = loc(fused[#loc135, #loc136])
#loc362 = loc(fused[#loc137, #loc138])
#loc363 = loc(fused[#loc139, #loc136])
#loc364 = loc(fused[#loc142, #loc143])
#loc365 = loc(fused[#loc144, #loc145])
#loc366 = loc(fused[#loc147, #loc146])
#loc367 = loc(fused[#loc150, #loc151])
#loc368 = loc(fused[#loc152, #loc153])
#loc369 = loc(fused[#loc154, #loc155])
#loc370 = loc(fused[#loc156, #loc157])
#loc371 = loc(fused[#loc158, #loc159])
#loc372 = loc(fused[#loc161, #loc160])
#loc373 = loc(fused[#loc163, #loc162])
#loc374 = loc(fused[#loc164, #loc165])
#loc375 = loc(fused[#loc166, #loc167])
#loc376 = loc(fused[#loc169, #loc168])
#loc377 = loc(fused[#loc172, #loc173])
#loc378 = loc(fused[#loc175, #loc176])
#loc379 = loc(fused[#loc177, #loc178])
#loc380 = loc(fused[#loc180, #loc179])
#loc381 = loc(fused[#loc181, #loc182])
#loc382 = loc(fused[#loc183, #loc184])
#loc383 = loc(fused[#loc185, #loc186])
#loc384 = loc(fused[#loc187, #loc188])
#loc385 = loc(fused[#loc189, #loc190])
#loc386 = loc(fused[#loc191, #loc192])
#loc387 = loc(fused[#loc193, #loc194])
#loc388 = loc(fused[#loc195, #loc196])
#loc389 = loc(fused[#loc201, #loc202])
#loc390 = loc(fused[#loc203, #loc204])
#loc391 = loc(fused[#loc205, #loc206])
#loc392 = loc(fused[#loc207, #loc204])
#loc393 = loc(fused[#loc209, #loc210])
#loc394 = loc(fused[#loc212, #loc213])
#loc395 = loc(fused[#loc214, #loc215])
#loc396 = loc(fused[#loc217, #loc216])
#loc397 = loc(fused[#loc219, #loc218])
#loc398 = loc(fused[#loc222, #loc223])
#loc399 = loc(fused[#loc224, #loc225])
#loc400 = loc(fused[#loc227, #loc228])
#loc401 = loc(fused[#loc229, #loc230])
#loc402 = loc(fused[#loc231, #loc232])
#loc403 = loc(fused[#loc233, #loc225])
#loc404 = loc(fused[#loc235, #loc236])
#loc405 = loc(fused[#loc239, #loc240])
#loc406 = loc(fused[#loc241, #loc236])
#loc407 = loc(fused[#loc247, #loc248])
#loc408 = loc(fused[#loc249, #loc250])
#loc409 = loc(fused[#loc251, #loc252])
#loc410 = loc(fused[#loc253, #loc250])
#loc411 = loc(fused[#loc257, #loc258])
#loc412 = loc(fused[#loc261, #loc262])
#loc413 = loc(fused[#loc263, #loc264])
#loc414 = loc(fused[#loc265, #loc266])
#loc415 = loc(fused[#loc268, #loc269])
#loc416 = loc(fused[#loc270, #loc264])
#loc417 = loc(fused[#loc274, #loc272])
#loc418 = loc(fused[#loc277, #loc278])
#loc419 = loc(fused[#loc280, #loc281])
#loc420 = loc(fused[#loc282, #loc283])
#loc421 = loc(fused[#loc284, #loc281])
#loc422 = loc(fused[#loc287, #loc288])
#loc423 = loc(fused[#loc289, #loc290])
#loc424 = loc(fused[#loc291, #loc288])
#loc425 = loc(fused[#loc294, #loc295])
#loc426 = loc(fused[#loc296, #loc297])
#loc427 = loc(fused[#loc298, #loc299, #loc300, #loc295])
#loc428 = loc(fused[#loc301, #loc302])
#loc429 = loc(fused[#loc304, #loc303])
