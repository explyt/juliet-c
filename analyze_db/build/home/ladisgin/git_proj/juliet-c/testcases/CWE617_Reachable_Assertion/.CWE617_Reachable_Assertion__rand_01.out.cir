!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc31 = loc("CWE617_Reachable_Assertion__rand_01.c":67:10)
#loc32 = loc("CWE617_Reachable_Assertion__rand_01.c":67:14)
#loc33 = loc("CWE617_Reachable_Assertion__rand_01.c":67:20)
#loc34 = loc("CWE617_Reachable_Assertion__rand_01.c":67:32)
#loc72 = loc(fused[#loc31, #loc32])
#loc73 = loc(fused[#loc33, #loc34])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc60)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_01.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_01_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc63)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc13)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc13)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc13)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc13)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc13)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc13)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc13)
      cir.yield %21 : !u32i loc(#loc13)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc13)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc13)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc13)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc13)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc13)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc13)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc13)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc13)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc13)
      cir.yield %25 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc13)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc5)
    cir.scope {
      cir.scope {
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc5)
        %11 = cir.const #cir.int<5> : !s32i loc(#loc5)
        %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc5)
        cir.if %12 {
        } else {
          %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
          %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
          %17 = cir.const #cir.int<33> : !s32i loc(#loc5)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc5)
          %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @__assert_fail(%14, %16, %18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
        } loc(#loc5)
      } loc(#loc5)
    } loc(#loc5)
    cir.return loc(#loc7)
  } loc(#loc62)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc67)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc17)
    cir.return loc(#loc16)
  } loc(#loc66)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc68)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc69)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc25)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc28)
  cir.func @main(%arg0: !s32i loc(fused[#loc31, #loc32]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc33, #loc34])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc72)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc73)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc30)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc35)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc35)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc36)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc37)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc37)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc38)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc25)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc25)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    %8 = cir.get_global @CWE617_Reachable_Assertion__rand_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc74)
    cir.call @CWE617_Reachable_Assertion__rand_01_good() : () -> () loc(#loc40)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc26)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc27)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    %13 = cir.get_global @CWE617_Reachable_Assertion__rand_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc75)
    cir.call @CWE617_Reachable_Assertion__rand_01_bad() : () -> () loc(#loc44)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc28)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc47)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.return %17 : !s32i loc(#loc76)
  } loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc55)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc57)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc57)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc49)
    cir.scope {
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc49)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc49)
        cir.if %9 {
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc49)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc49)
          %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc49)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc49)
          %14 = cir.const #cir.int<49> : !s32i loc(#loc49)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc49)
          %16 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
          cir.call @__assert_fail(%11, %13, %15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc49)
        } loc(#loc49)
      } loc(#loc49)
    } loc(#loc49)
    cir.return loc(#loc51)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":67:1)
#loc4 = loc("/usr/include/assert.h":69:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_01.c":33:5)
#loc6 = loc("CWE617_Reachable_Assertion__rand_01.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_01.c":34:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_01.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_01.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__rand_01.c":29:13)
#loc11 = loc("CWE617_Reachable_Assertion__rand_01.c":29:12)
#loc12 = loc("CWE617_Reachable_Assertion__rand_01.c":29:5)
#loc13 = loc("CWE617_Reachable_Assertion__rand_01.c":31:12)
#loc14 = loc("CWE617_Reachable_Assertion__rand_01.c":31:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_01.c":52:1)
#loc16 = loc("CWE617_Reachable_Assertion__rand_01.c":55:1)
#loc17 = loc("CWE617_Reachable_Assertion__rand_01.c":54:5)
#loc18 = loc("CWE617_Reachable_Assertion__rand_01.c":54:13)
#loc19 = loc("/usr/include/stdlib.h":575:1)
#loc20 = loc("/usr/include/stdlib.h":575:41)
#loc21 = loc("/usr/include/time.h":76:1)
#loc22 = loc("/usr/include/time.h":76:38)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("CWE617_Reachable_Assertion__rand_01.c":72:15)
#loc26 = loc("CWE617_Reachable_Assertion__rand_01.c":74:15)
#loc27 = loc("CWE617_Reachable_Assertion__rand_01.c":77:15)
#loc28 = loc("CWE617_Reachable_Assertion__rand_01.c":79:15)
#loc29 = loc("CWE617_Reachable_Assertion__rand_01.c":67:1)
#loc30 = loc("CWE617_Reachable_Assertion__rand_01.c":82:1)
#loc35 = loc("CWE617_Reachable_Assertion__rand_01.c":68:1)
#loc36 = loc("CWE617_Reachable_Assertion__rand_01.c":70:27)
#loc37 = loc("CWE617_Reachable_Assertion__rand_01.c":70:22)
#loc38 = loc("CWE617_Reachable_Assertion__rand_01.c":70:5)
#loc39 = loc("CWE617_Reachable_Assertion__rand_01.c":72:5)
#loc40 = loc("CWE617_Reachable_Assertion__rand_01.c":73:5)
#loc41 = loc("CWE617_Reachable_Assertion__rand_01.c":73:46)
#loc42 = loc("CWE617_Reachable_Assertion__rand_01.c":74:5)
#loc43 = loc("CWE617_Reachable_Assertion__rand_01.c":77:5)
#loc44 = loc("CWE617_Reachable_Assertion__rand_01.c":78:5)
#loc45 = loc("CWE617_Reachable_Assertion__rand_01.c":78:45)
#loc46 = loc("CWE617_Reachable_Assertion__rand_01.c":79:5)
#loc47 = loc("CWE617_Reachable_Assertion__rand_01.c":81:12)
#loc48 = loc("CWE617_Reachable_Assertion__rand_01.c":81:5)
#loc49 = loc("CWE617_Reachable_Assertion__rand_01.c":49:5)
#loc50 = loc("CWE617_Reachable_Assertion__rand_01.c":41:1)
#loc51 = loc("CWE617_Reachable_Assertion__rand_01.c":50:1)
#loc52 = loc("CWE617_Reachable_Assertion__rand_01.c":43:5)
#loc53 = loc("CWE617_Reachable_Assertion__rand_01.c":43:9)
#loc54 = loc("CWE617_Reachable_Assertion__rand_01.c":45:13)
#loc55 = loc("CWE617_Reachable_Assertion__rand_01.c":45:12)
#loc56 = loc("CWE617_Reachable_Assertion__rand_01.c":45:5)
#loc57 = loc("CWE617_Reachable_Assertion__rand_01.c":47:12)
#loc58 = loc("CWE617_Reachable_Assertion__rand_01.c":47:25)
#loc59 = loc("CWE617_Reachable_Assertion__rand_01.c":47:5)
#loc60 = loc(fused[#loc1, #loc2])
#loc61 = loc(fused[#loc3, #loc4])
#loc62 = loc(fused[#loc6, #loc7])
#loc63 = loc(fused[#loc8, #loc9])
#loc64 = loc(fused[#loc12, #loc10])
#loc65 = loc(fused[#loc14, #loc13])
#loc66 = loc(fused[#loc15, #loc16])
#loc67 = loc(fused[#loc17, #loc18])
#loc68 = loc(fused[#loc19, #loc20])
#loc69 = loc(fused[#loc21, #loc22])
#loc70 = loc(fused[#loc23, #loc24])
#loc71 = loc(fused[#loc29, #loc30])
#loc74 = loc(fused[#loc40, #loc41])
#loc75 = loc(fused[#loc44, #loc45])
#loc76 = loc(fused[#loc48, #loc47])
#loc77 = loc(fused[#loc50, #loc51])
#loc78 = loc(fused[#loc52, #loc53])
#loc79 = loc(fused[#loc56, #loc54])
#loc80 = loc(fused[#loc59, #loc58])
