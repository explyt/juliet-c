!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({nothrow = #cir.nothrow})>
#loc1 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":26:16)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":26:31)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":57:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":57:35)
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc114 = loc(fused[#loc7, #loc8])
#loc134 = loc(fused[#loc61, #loc62])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func linkonce_odr @_ZN12TwoIntsClassaSERKS_(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7), %arg1: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc1)
    %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["", init, const] {alignment = 8 : i64} loc(#loc1)
    %2 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["__retval"] {alignment = 8 : i64} loc(#loc1)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    cir.store %arg1, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %3 = cir.load deref %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    %4 = cir.get_member %3[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    %6 = cir.get_member %5[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc1)
    %8 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc2)
    %9 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc2)
    cir.libc.memcpy %7 bytes from %9 to %8 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc1)
    cir.store %3, %2 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    cir.return %10 : !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
  } loc(#loc1)
  cir.func private @printIntLine(!s32i) loc(#loc112)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_539badSink_dEP12TwoIntsClass(%arg0: !cir.ptr<!ty_TwoIntsClass> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc115)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc116)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc117)
    %3 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc114)
    cir.store %arg0, %3 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc15)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc119)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc120)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc22)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc121)
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc24)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc25)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc122)
    cir.brcond %9 ^bb5, ^bb9 loc(#loc122)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc123)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %11 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc28)
    %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc29)
    %13 = cir.ptr_stride(%12 : !cir.ptr<!ty_TwoIntsClass>, %11 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc29)
    %14 = cir.get_member %13[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
    cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %16 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc31)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc32)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc32)
    %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc33)
    cir.store %15, %19 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.br ^bb7 loc(#loc21)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc21)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc34)
    %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc35)
    cir.store %21, %1 : !u64i, !cir.ptr<!u64i> loc(#loc126)
    cir.br ^bb4 loc(#loc120)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc19)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc127)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc128)
  ^bb13:  // pred: ^bb12
    %22 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc40)
    cir.store %23, %2 : !u64i, !cir.ptr<!u64i> loc(#loc129)
    cir.br ^bb14 loc(#loc128)
  ^bb14:  // 2 preds: ^bb13, ^bb18
    %24 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc42)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc43)
    %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc130)
    cir.brcond %27 ^bb15, ^bb19 loc(#loc130)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc131)
  ^bb16:  // pred: ^bb15
    %28 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc45)
    %29 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc46)
    %30 = cir.ptr_stride(%29 : !cir.ptr<!ty_TwoIntsClass>, %28 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc46)
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc47)
    %32 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc48)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!ty_TwoIntsClass>, %32 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc49)
    %34 = cir.call @_ZN12TwoIntsClassaSERKS_(%33, %30) : (!cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr2) loc(#loc50)
    cir.br ^bb17 loc(#loc39)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc39)
  ^bb18:  // pred: ^bb17
    %35 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc51)
    %36 = cir.unary(inc, %35) : !u64i, !u64i loc(#loc52)
    cir.store %36, %2 : !u64i, !cir.ptr<!u64i> loc(#loc132)
    cir.br ^bb14 loc(#loc128)
  ^bb19:  // pred: ^bb14
    cir.br ^bb20 loc(#loc39)
  ^bb20:  // pred: ^bb19
    %37 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc53)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc54)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!ty_TwoIntsClass>, %38 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc55)
    %40 = cir.get_member %39[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc57)
    %42 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc58)
    cir.delete.array %42 : <!ty_TwoIntsClass> loc(#loc58)
    cir.br ^bb21 loc(#loc37)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc17)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc6)
  } loc(#loc113)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_5313goodG2BSink_dEP12TwoIntsClass(%arg0: !cir.ptr<!ty_TwoIntsClass> loc(fused[#loc61, #loc62])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc135)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc137)
    %3 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc134)
    cir.store %arg0, %3 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc69)
    cir.br ^bb1 loc(#loc138)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc139)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc140)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc76)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc141)
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc78)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc79)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc79)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc142)
    cir.brcond %9 ^bb5, ^bb9 loc(#loc142)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc143)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %11 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc82)
    %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
    %13 = cir.ptr_stride(%12 : !cir.ptr<!ty_TwoIntsClass>, %11 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
    %14 = cir.get_member %13[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
    cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %16 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc85)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc86)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc86)
    %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc33)
    cir.store %15, %19 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.br ^bb7 loc(#loc75)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc75)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc87)
    %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc88)
    cir.store %21, %1 : !u64i, !cir.ptr<!u64i> loc(#loc146)
    cir.br ^bb4 loc(#loc140)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc75)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc73)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc147)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc148)
  ^bb13:  // pred: ^bb12
    %22 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc93)
    cir.store %23, %2 : !u64i, !cir.ptr<!u64i> loc(#loc149)
    cir.br ^bb14 loc(#loc148)
  ^bb14:  // 2 preds: ^bb13, ^bb18
    %24 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc95)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc96)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc96)
    %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc150)
    cir.brcond %27 ^bb15, ^bb19 loc(#loc150)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc151)
  ^bb16:  // pred: ^bb15
    %28 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc98)
    %29 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc99)
    %30 = cir.ptr_stride(%29 : !cir.ptr<!ty_TwoIntsClass>, %28 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc99)
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc100)
    %32 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc101)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!ty_TwoIntsClass>, %32 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc102)
    %34 = cir.call @_ZN12TwoIntsClassaSERKS_(%33, %30) : (!cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr2) loc(#loc103)
    cir.br ^bb17 loc(#loc92)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc92)
  ^bb18:  // pred: ^bb17
    %35 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc104)
    %36 = cir.unary(inc, %35) : !u64i, !u64i loc(#loc105)
    cir.store %36, %2 : !u64i, !cir.ptr<!u64i> loc(#loc152)
    cir.br ^bb14 loc(#loc148)
  ^bb19:  // pred: ^bb14
    cir.br ^bb20 loc(#loc92)
  ^bb20:  // pred: ^bb19
    %37 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc106)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!ty_TwoIntsClass>, %38 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc108)
    %40 = cir.get_member %39[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc110)
    %42 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc111)
    cir.delete.array %42 : <!ty_TwoIntsClass> loc(#loc111)
    cir.br ^bb21 loc(#loc90)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc71)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc60)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":0:0)
#loc2 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":26:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":50:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":29:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":29:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":31:13)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":31:20)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":40:13)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":40:20)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":27:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":28:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":49:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":30:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":38:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":33:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":37:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":33:22)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":33:18)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":33:25)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":33:29)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":34:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":35:36)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":35:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":35:17)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":36:36)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":36:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":36:17)
#loc33 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":33:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":33:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":39:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":48:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":42:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":45:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":42:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":42:18)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":42:25)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":42:29)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":43:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":44:34)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":44:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":44:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":44:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":44:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":44:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":42:35)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":42:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":46:26)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":46:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":46:32)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":46:34)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":46:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":47:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":57:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":81:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":60:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":60:32)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":62:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":62:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":71:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":71:20)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":58:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":59:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":80:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":61:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":69:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":64:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":68:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":64:22)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":64:18)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":64:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":64:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":65:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":66:36)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":66:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":66:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":67:36)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":67:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":67:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":64:35)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":64:34)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":70:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":79:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":73:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":76:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":73:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":73:18)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":73:25)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":73:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":74:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":75:34)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":75:27)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":75:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":75:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":75:23)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":75:25)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":73:35)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":73:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":77:26)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":77:31)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":77:32)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":77:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":77:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_53d.cpp":78:23)
#loc112 = loc(fused[#loc3, #loc4])
#loc113 = loc(fused[#loc5, #loc6])
#loc115 = loc(fused[#loc9, #loc10])
#loc116 = loc(fused[#loc11, #loc12])
#loc117 = loc(fused[#loc13, #loc14])
#loc118 = loc(fused[#loc16, #loc17])
#loc119 = loc(fused[#loc18, #loc19])
#loc120 = loc(fused[#loc20, #loc21])
#loc121 = loc(fused[#loc23, #loc22])
#loc122 = loc(fused[#loc24, #loc25])
#loc123 = loc(fused[#loc26, #loc21])
#loc124 = loc(fused[#loc29, #loc27])
#loc125 = loc(fused[#loc32, #loc30])
#loc126 = loc(fused[#loc35, #loc34])
#loc127 = loc(fused[#loc36, #loc37])
#loc128 = loc(fused[#loc38, #loc39])
#loc129 = loc(fused[#loc41, #loc40])
#loc130 = loc(fused[#loc42, #loc43])
#loc131 = loc(fused[#loc44, #loc39])
#loc132 = loc(fused[#loc52, #loc51])
#loc133 = loc(fused[#loc59, #loc60])
#loc135 = loc(fused[#loc63, #loc64])
#loc136 = loc(fused[#loc65, #loc66])
#loc137 = loc(fused[#loc67, #loc68])
#loc138 = loc(fused[#loc70, #loc71])
#loc139 = loc(fused[#loc72, #loc73])
#loc140 = loc(fused[#loc74, #loc75])
#loc141 = loc(fused[#loc77, #loc76])
#loc142 = loc(fused[#loc78, #loc79])
#loc143 = loc(fused[#loc80, #loc75])
#loc144 = loc(fused[#loc83, #loc81])
#loc145 = loc(fused[#loc86, #loc84])
#loc146 = loc(fused[#loc88, #loc87])
#loc147 = loc(fused[#loc89, #loc90])
#loc148 = loc(fused[#loc91, #loc92])
#loc149 = loc(fused[#loc94, #loc93])
#loc150 = loc(fused[#loc95, #loc96])
#loc151 = loc(fused[#loc97, #loc92])
#loc152 = loc(fused[#loc105, #loc104])
