!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":21:75)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":21:85)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":43:79)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":43:89)
#loc78 = loc(fused[#loc7, #loc8])
#loc90 = loc(fused[#loc42, #loc43])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc75)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc76)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b_badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc79)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc80)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc78)
    cir.store %arg0, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc13)
    cir.br ^bb1 loc(#loc81)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc79)
    cir.store %3, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc79)
    cir.br ^bb2 loc(#loc82)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc83)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc20)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc20)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc84)
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc22)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc85)
    cir.brcond %9 ^bb5, ^bb9 loc(#loc24)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc86)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc26)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc27)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %10 : !u64i), !cir.ptr<!s64i> loc(#loc27)
    %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc27)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc29)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc30)
    cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc87)
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc19)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc32)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc33)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc88)
    cir.br ^bb4 loc(#loc83)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc19)
  ^bb10:  // pred: ^bb9
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc34)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s64i>, %20 : !s32i), !cir.ptr<!s64i> loc(#loc36)
    %22 = cir.load %21 : !cir.ptr<!s64i>, !s64i loc(#loc34)
    cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc37)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc38)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc38)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc39)
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc15)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc6)
  } loc(#loc77)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b_goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc42, #loc43])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc91)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc92)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc90)
    cir.store %arg0, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc48)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc91)
    cir.store %3, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc91)
    cir.br ^bb2 loc(#loc94)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc95)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc55)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc96)
    cir.br ^bb4 loc(#loc95)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc57)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc58)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc58)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc97)
    cir.brcond %9 ^bb5, ^bb9 loc(#loc59)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc98)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc61)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc62)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %10 : !u64i), !cir.ptr<!s64i> loc(#loc62)
    %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc62)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc63)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc64)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc65)
    cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc99)
    cir.br ^bb7 loc(#loc54)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc54)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc67)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc68)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc100)
    cir.br ^bb4 loc(#loc95)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc54)
  ^bb10:  // pred: ^bb9
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc69)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s64i>, %20 : !s32i), !cir.ptr<!s64i> loc(#loc71)
    %22 = cir.load %21 : !cir.ptr<!s64i>, !s64i loc(#loc69)
    cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc72)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc73)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc73)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc74)
    cir.br ^bb11 loc(#loc52)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc50)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc41)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":24:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":24:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":26:13)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":26:20)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":22:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":35:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":25:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":34:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":28:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":31:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":28:22)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":28:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":28:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":28:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":28:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":29:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":30:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":30:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":30:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":30:22)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":30:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":30:35)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":28:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":28:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":32:31)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":32:36)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":32:37)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":32:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":33:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":33:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":43:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":58:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":46:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":46:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":48:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":48:20)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":44:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":45:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":57:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":47:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":56:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":50:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":53:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":50:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":50:18)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":50:25)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":50:29)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":50:27)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":51:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":52:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":52:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":52:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":52:22)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":52:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":52:35)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":50:35)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":50:34)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":54:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":54:36)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":54:37)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":54:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":55:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c":55:13)
#loc75 = loc(fused[#loc1, #loc2])
#loc76 = loc(fused[#loc3, #loc4])
#loc77 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc9, #loc10])
#loc80 = loc(fused[#loc11, #loc12])
#loc81 = loc(fused[#loc14, #loc15])
#loc82 = loc(fused[#loc16, #loc17])
#loc83 = loc(fused[#loc18, #loc19])
#loc84 = loc(fused[#loc21, #loc20])
#loc85 = loc(fused[#loc22, #loc23])
#loc86 = loc(fused[#loc25, #loc19])
#loc87 = loc(fused[#loc28, #loc31])
#loc88 = loc(fused[#loc33, #loc32])
#loc89 = loc(fused[#loc40, #loc41])
#loc91 = loc(fused[#loc44, #loc45])
#loc92 = loc(fused[#loc46, #loc47])
#loc93 = loc(fused[#loc49, #loc50])
#loc94 = loc(fused[#loc51, #loc52])
#loc95 = loc(fused[#loc53, #loc54])
#loc96 = loc(fused[#loc56, #loc55])
#loc97 = loc(fused[#loc57, #loc58])
#loc98 = loc(fused[#loc60, #loc54])
#loc99 = loc(fused[#loc63, #loc66])
#loc100 = loc(fused[#loc68, #loc67])
