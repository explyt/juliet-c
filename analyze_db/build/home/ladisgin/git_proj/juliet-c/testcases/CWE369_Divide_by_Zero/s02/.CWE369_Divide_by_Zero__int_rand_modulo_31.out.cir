!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":94:10)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":94:14)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":94:20)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":94:32)
#loc121 = loc(fused[#loc41, #loc42])
#loc122 = loc(fused[#loc43, #loc44])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc104)
  cir.func private @printIntLine(!s32i) loc(#loc105)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc12)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc12)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc12)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc12)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc12)
      cir.yield %20 : !u32i loc(#loc12)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc12)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc12)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc12)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc12)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc12)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc12)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc12)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc12)
      cir.yield %24 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc111)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc112)
      %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc111)
      %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc112)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc20)
      %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %15 = cir.binop(rem, %13, %14) : !s32i loc(#loc113)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc22)
    } loc(#loc110)
    cir.return loc(#loc6)
  } loc(#loc106)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc114)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc117)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc118)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc38)
  cir.func @main(%arg0: !s32i loc(fused[#loc41, #loc42]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc43, #loc44])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc122)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc40)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc45)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc46)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc47)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc47)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc48)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc35)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call @CWE369_Divide_by_Zero__int_rand_modulo_31_good() : () -> () loc(#loc50)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc37)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call @CWE369_Divide_by_Zero__int_rand_modulo_31_bad() : () -> () loc(#loc54)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc38)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    cir.return %17 : !s32i loc(#loc125)
  } loc(#loc120)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc64)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc66)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc131)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc132)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc131)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc132)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc74)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc133)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc76)
    } loc(#loc130)
    cir.return loc(#loc60)
  } loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc83)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc85)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc85)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc85)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc85)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc85)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc85)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc85)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc85)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc85)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc85)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc85)
      cir.yield %20 : !u32i loc(#loc85)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc85)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc85)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc85)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc85)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc85)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc85)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc85)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc85)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc85)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc85)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc85)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc85)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc85)
      cir.yield %24 : !u32i loc(#loc85)
    }) : (!cir.bool) -> !u32i loc(#loc85)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc85)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc139)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc140)
      %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc139)
      %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc140)
      cir.scope {
        %13 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc96)
        %15 = cir.cmp(ne, %13, %14) : !s32i, !cir.bool loc(#loc142)
        cir.if %15 {
          %16 = cir.const #cir.int<100> : !s32i loc(#loc100)
          %17 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc101)
          %18 = cir.binop(rem, %16, %17) : !s32i loc(#loc144)
          cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc102)
        } else {
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc77)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc77)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc103)
        } loc(#loc143)
      } loc(#loc141)
    } loc(#loc138)
    cir.return loc(#loc79)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":22:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":35:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":24:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":24:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":26:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":26:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":26:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":28:12)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":28:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":29:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":34:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":30:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":30:24)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":31:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":31:20)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":33:22)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":33:28)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":33:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":80:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":84:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":82:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":82:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":83:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":83:13)
#loc29 = loc("/usr/include/stdlib.h":575:1)
#loc30 = loc("/usr/include/stdlib.h":575:41)
#loc31 = loc("/usr/include/time.h":76:1)
#loc32 = loc("/usr/include/time.h":76:38)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":99:15)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":101:15)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":104:15)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":106:15)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":94:1)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":109:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":95:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":97:27)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":97:22)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":97:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":99:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":100:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":100:52)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":101:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":104:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":105:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":105:51)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":106:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":108:12)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":108:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":42:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":55:1)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":44:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":44:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":46:13)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":46:12)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":46:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":48:12)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":48:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":49:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":54:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":50:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":50:24)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":51:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":51:20)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":53:22)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":53:28)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":53:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":75:23)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":58:1)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":78:1)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":60:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":60:9)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":62:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":62:12)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":62:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":64:12)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":64:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":65:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":77:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":66:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":66:24)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":67:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":67:20)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":69:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":76:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":69:13)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":69:21)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":70:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":72:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":74:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":71:26)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":71:32)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":71:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_modulo_31.c":75:13)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc7, #loc8])
#loc108 = loc(fused[#loc11, #loc9])
#loc109 = loc(fused[#loc13, #loc12])
#loc110 = loc(fused[#loc14, #loc15])
#loc111 = loc(fused[#loc16, #loc17])
#loc112 = loc(fused[#loc18, #loc19])
#loc113 = loc(fused[#loc20, #loc21])
#loc114 = loc(fused[#loc23, #loc24])
#loc115 = loc(fused[#loc25, #loc26])
#loc116 = loc(fused[#loc27, #loc28])
#loc117 = loc(fused[#loc29, #loc30])
#loc118 = loc(fused[#loc31, #loc32])
#loc119 = loc(fused[#loc33, #loc34])
#loc120 = loc(fused[#loc39, #loc40])
#loc123 = loc(fused[#loc50, #loc51])
#loc124 = loc(fused[#loc54, #loc55])
#loc125 = loc(fused[#loc58, #loc57])
#loc126 = loc(fused[#loc59, #loc60])
#loc127 = loc(fused[#loc61, #loc62])
#loc128 = loc(fused[#loc65, #loc63])
#loc129 = loc(fused[#loc67, #loc66])
#loc130 = loc(fused[#loc68, #loc69])
#loc131 = loc(fused[#loc70, #loc71])
#loc132 = loc(fused[#loc72, #loc73])
#loc133 = loc(fused[#loc74, #loc75])
#loc134 = loc(fused[#loc78, #loc79])
#loc135 = loc(fused[#loc80, #loc81])
#loc136 = loc(fused[#loc84, #loc82])
#loc137 = loc(fused[#loc86, #loc85])
#loc138 = loc(fused[#loc87, #loc88])
#loc139 = loc(fused[#loc89, #loc90])
#loc140 = loc(fused[#loc91, #loc92])
#loc141 = loc(fused[#loc93, #loc94])
#loc142 = loc(fused[#loc95, #loc96])
#loc143 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc144 = loc(fused[#loc100, #loc101])
