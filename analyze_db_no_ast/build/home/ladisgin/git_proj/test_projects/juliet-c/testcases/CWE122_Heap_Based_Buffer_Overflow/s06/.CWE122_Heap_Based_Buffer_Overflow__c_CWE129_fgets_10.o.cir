!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc506)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc507)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc508)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc509)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc510)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc511)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc512)
  cir.func private  @printIntLine(!s32i) loc(#loc513)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc18)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc514)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc516)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc517)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc30)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc521)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc521)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc521)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc39)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc39)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc39)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc39)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc39)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc39)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc39)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc39)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc508)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc40)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc41)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc523)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc43)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc47)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc48)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc525)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc51)
            } loc(#loc524)
          } loc(#loc522)
        } loc(#loc520)
      } loc(#loc519)
    } loc(#loc518)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc54)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc529)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc530)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc62)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc63)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc63)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc531)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc532)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc533)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc530)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc535)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc70)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc72)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc73)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc74)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
            } loc(#loc536)
          } loc(#loc534)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc77)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc538)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc80)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc539)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc81)
              cir.condition(%22) loc(#loc81)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc83)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc86)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc541)
              } loc(#loc540)
              cir.yield loc(#loc76)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc88)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc542)
              cir.yield loc(#loc537)
            } loc(#loc537)
          } loc(#loc537)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc92)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc544)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc93)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc97)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc100)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc546)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc103)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc548)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc106)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc549)
                  %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc107)
                  cir.condition(%30) loc(#loc107)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc111)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc112)
                  } loc(#loc550)
                  cir.yield loc(#loc102)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc114)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc551)
                  cir.yield loc(#loc547)
                } loc(#loc547)
              } loc(#loc547)
            } else {
              %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc18)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc18)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc115)
            } loc(#loc545)
          } loc(#loc543)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc116)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc117)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
        } loc(#loc528)
      } loc(#loc527)
    } loc(#loc526)
    cir.return loc(#loc22)
  } loc(#loc515)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc553)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc120)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc554)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc122)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc555)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc124)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc556)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc126)
    cir.return loc(#loc119)
  } loc(#loc552)
  cir.global "private"  external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc557)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc130)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc131)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc559)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc137)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc560)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc141)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc564)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc564)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc564)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc149)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc150)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc150)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc150)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc150)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc150)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc150)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc150)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc150)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc508)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc151)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc152)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc153)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc566)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc154)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc158)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc159)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc568)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc162)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc162)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc163)
            } loc(#loc567)
          } loc(#loc565)
        } loc(#loc563)
      } loc(#loc562)
    } loc(#loc561)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc557)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc166)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc166)
      cir.if %5 {
        %6 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc170)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc572)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc573)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc177)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc178)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc178)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc574)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc575)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc177)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc576)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc573)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc184)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc184)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc578)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc185)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc187)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc188)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc189)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc187)
            } loc(#loc579)
          } loc(#loc577)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc192)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc581)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc194)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc195)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc582)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc196)
              cir.condition(%22) loc(#loc196)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc198)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc199)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc200)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc201)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc584)
              } loc(#loc583)
              cir.yield loc(#loc191)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc202)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc203)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc585)
              cir.yield loc(#loc580)
            } loc(#loc580)
          } loc(#loc580)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc207)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc587)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc208)
            %22 = cir.ternary(%21, true {
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc211)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc588)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc213)
              %27 = cir.ternary(%26, true {
                %28 = cir.const #true loc(#loc209)
                cir.yield %28 : !cir.bool loc(#loc209)
              }, false {
                %28 = cir.const #false loc(#loc209)
                cir.yield %28 : !cir.bool loc(#loc209)
              }) : (!cir.bool) -> !cir.bool loc(#loc209)
              cir.yield %27 : !cir.bool loc(#loc209)
            }, false {
              %23 = cir.const #false loc(#loc209)
              cir.yield %23 : !cir.bool loc(#loc209)
            }) : (!cir.bool) -> !cir.bool loc(#loc209)
            cir.if %22 {
              %23 = cir.const #cir.int<1> : !s32i loc(#loc217)
              %24 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc218)
              %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc220)
              cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc590)
              cir.scope {
                %27 = cir.const #cir.int<0> : !s32i loc(#loc223)
                cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc592)
                cir.for : cond {
                  %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc225)
                  %29 = cir.const #cir.int<10> : !s32i loc(#loc226)
                  %30 = cir.cmp(lt, %28, %29) : !s32i, !s32i loc(#loc593)
                  %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc227)
                  cir.condition(%31) loc(#loc227)
                } body {
                  cir.scope {
                    %28 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
                    %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc230)
                    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc231)
                    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc232)
                  } loc(#loc594)
                  cir.yield loc(#loc222)
                } step {
                  %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                  %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc234)
                  cir.store %29, %6 : !s32i, !cir.ptr<!s32i> loc(#loc595)
                  cir.yield loc(#loc591)
                } loc(#loc591)
              } loc(#loc591)
            } else {
              %23 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc131)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc131)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc235)
            } loc(#loc589)
          } loc(#loc586)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc236)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc237)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc236)
        } loc(#loc571)
      } loc(#loc570)
    } loc(#loc569)
    cir.return loc(#loc133)
  } loc(#loc558)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc597)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc242)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc243)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc598)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc247)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc247)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc602)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc602)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc602)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc255)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc256)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc256)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc256)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc256)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc256)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc256)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc256)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc256)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc508)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc257)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc258)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc259)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc259)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc604)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc260)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc264)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc265)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc606)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc268)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc268)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc269)
            } loc(#loc605)
          } loc(#loc603)
        } loc(#loc601)
      } loc(#loc600)
    } loc(#loc599)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc272)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc272)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc610)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc611)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc280)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc281)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc281)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc612)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc613)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc280)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc614)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc611)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc286)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc287)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc287)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc616)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc288)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc290)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc291)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc292)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc290)
            } loc(#loc617)
          } loc(#loc615)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc295)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc619)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc297)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc298)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc620)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc299)
              cir.condition(%22) loc(#loc299)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc301)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc302)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc303)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc304)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc622)
              } loc(#loc621)
              cir.yield loc(#loc294)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc305)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc306)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc623)
              cir.yield loc(#loc618)
            } loc(#loc618)
          } loc(#loc618)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc309)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc310)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc625)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc311)
            %22 = cir.ternary(%21, true {
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc313)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc314)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc626)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc316)
              %27 = cir.ternary(%26, true {
                %28 = cir.const #true loc(#loc312)
                cir.yield %28 : !cir.bool loc(#loc312)
              }, false {
                %28 = cir.const #false loc(#loc312)
                cir.yield %28 : !cir.bool loc(#loc312)
              }) : (!cir.bool) -> !cir.bool loc(#loc312)
              cir.yield %27 : !cir.bool loc(#loc312)
            }, false {
              %23 = cir.const #false loc(#loc312)
              cir.yield %23 : !cir.bool loc(#loc312)
            }) : (!cir.bool) -> !cir.bool loc(#loc312)
            cir.if %22 {
              %23 = cir.const #cir.int<1> : !s32i loc(#loc320)
              %24 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc321)
              %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc322)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc323)
              cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc628)
              cir.scope {
                %27 = cir.const #cir.int<0> : !s32i loc(#loc326)
                cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc630)
                cir.for : cond {
                  %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc328)
                  %29 = cir.const #cir.int<10> : !s32i loc(#loc329)
                  %30 = cir.cmp(lt, %28, %29) : !s32i, !s32i loc(#loc631)
                  %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc330)
                  cir.condition(%31) loc(#loc330)
                } body {
                  cir.scope {
                    %28 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc332)
                    %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc333)
                    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc334)
                    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc332)
                    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc335)
                  } loc(#loc632)
                  cir.yield loc(#loc325)
                } step {
                  %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc336)
                  %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc337)
                  cir.store %29, %6 : !s32i, !cir.ptr<!s32i> loc(#loc633)
                  cir.yield loc(#loc629)
                } loc(#loc629)
              } loc(#loc629)
            } else {
              %23 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc338)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc338)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc339)
            } loc(#loc627)
          } loc(#loc624)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc340)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc341)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc341)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc340)
        } loc(#loc609)
      } loc(#loc608)
    } loc(#loc607)
    cir.return loc(#loc239)
  } loc(#loc596)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc635)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc346)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc347)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc636)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc557)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc351)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc351)
      cir.if %5 {
        %6 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc355)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc355)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc356)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc357)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc639)
      } loc(#loc638)
    } loc(#loc637)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc361)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc361)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc643)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc644)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc369)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc370)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc370)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc645)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc646)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc369)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc647)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc644)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc375)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc376)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc376)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc649)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc377)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc379)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc380)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc381)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc379)
            } loc(#loc650)
          } loc(#loc648)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc384)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc652)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc386)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc387)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc653)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc388)
              cir.condition(%22) loc(#loc388)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc390)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc391)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc392)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc393)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc655)
              } loc(#loc654)
              cir.yield loc(#loc383)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc394)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc395)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc656)
              cir.yield loc(#loc651)
            } loc(#loc651)
          } loc(#loc651)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc398)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc399)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc658)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc400)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc404)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc405)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc406)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc407)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc660)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc410)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc662)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc412)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc413)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc663)
                  %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc414)
                  cir.condition(%30) loc(#loc414)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc416)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc417)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc418)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc416)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc419)
                  } loc(#loc664)
                  cir.yield loc(#loc409)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc420)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc421)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc665)
                  cir.yield loc(#loc661)
                } loc(#loc661)
              } loc(#loc661)
            } else {
              %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc422)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc422)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc423)
            } loc(#loc659)
          } loc(#loc657)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc424)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc425)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc425)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc424)
        } loc(#loc642)
      } loc(#loc641)
    } loc(#loc640)
    cir.return loc(#loc343)
  } loc(#loc634)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc667)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc430)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc431)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc668)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc435)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc435)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc437)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc671)
      } loc(#loc670)
    } loc(#loc669)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc441)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc441)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc675)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc676)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc449)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc450)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc450)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc677)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc678)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc449)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc679)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc676)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc455)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc456)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc456)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc681)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc457)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc459)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc460)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc461)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc459)
            } loc(#loc682)
          } loc(#loc680)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc464)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc684)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc466)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc467)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc685)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc468)
              cir.condition(%22) loc(#loc468)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc470)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc471)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc472)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc473)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc687)
              } loc(#loc686)
              cir.yield loc(#loc463)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc474)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc475)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc688)
              cir.yield loc(#loc683)
            } loc(#loc683)
          } loc(#loc683)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc478)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc479)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !s32i loc(#loc690)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc480)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc484)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc485)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc486)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc487)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc692)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc490)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc694)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc492)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc493)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc695)
                  %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc494)
                  cir.condition(%30) loc(#loc494)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc496)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc497)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc498)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc496)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc499)
                  } loc(#loc696)
                  cir.yield loc(#loc489)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc500)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc501)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc697)
                  cir.yield loc(#loc693)
                } loc(#loc693)
              } loc(#loc693)
            } else {
              %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc502)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc502)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc503)
            } loc(#loc691)
          } loc(#loc689)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc504)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc505)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc505)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc504)
        } loc(#loc674)
      } loc(#loc673)
    } loc(#loc672)
    cir.return loc(#loc427)
  } loc(#loc666)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":41:27)
#loc12 = loc("/usr/include/stdlib.h":672:1)
#loc13 = loc("/usr/include/stdlib.h":672:45)
#loc14 = loc("/usr/include/stdlib.h":756:1)
#loc15 = loc("/usr/include/stdlib.h":756:70)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":69:27)
#loc19 = loc("/usr/include/stdlib.h":687:1)
#loc20 = loc("/usr/include/stdlib.h":687:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":24:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":74:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":26:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":26:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":28:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":28:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":28:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":29:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":44:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":29:8)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":30:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":31:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":43:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":32:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":32:49)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":34:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":42:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":34:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":34:36)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":34:53)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":34:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":34:63)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":34:60)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":35:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":38:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":40:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":37:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":37:24)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":37:17)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":37:40)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":41:17)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":45:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":73:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":45:8)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":46:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":47:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":72:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":48:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":48:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":49:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":49:58)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":49:35)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":49:42)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":49:47)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":49:57)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":50:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":50:43)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":50:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":50:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":50:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":50:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":50:34)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":50:40)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":50:39)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":52:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":55:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":52:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":52:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":52:25)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":52:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":52:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":53:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":54:29)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":54:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":54:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":54:25)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":52:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":52:33)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":58:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":70:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":58:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":58:25)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":58:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":59:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":66:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":68:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":60:32)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":60:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":60:24)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":60:28)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":62:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":65:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":62:25)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":62:21)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":62:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":62:32)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":62:30)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":63:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":64:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":64:41)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":64:42)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":64:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":62:37)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":62:36)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":69:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":71:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":71:18)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":280:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":286:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":282:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":282:14)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":283:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":283:14)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":284:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":284:14)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":285:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":285:14)
#loc128 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc129 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":105:19)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":130:27)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":81:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":135:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":83:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":83:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":85:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":85:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":85:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":86:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":101:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":86:8)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":87:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":88:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":100:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":89:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":89:49)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":91:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":99:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":91:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":91:36)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":91:53)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":91:17)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":91:63)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":91:60)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":92:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":95:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":97:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":94:29)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":94:24)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":94:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":94:40)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":98:27)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":98:17)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":102:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":134:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":102:8)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":103:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":106:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":108:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":105:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":109:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":133:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":110:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":110:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":111:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":111:58)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":111:35)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":111:42)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":111:47)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":111:57)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":112:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":112:43)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":112:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":112:27)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":112:24)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":112:33)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":112:34)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":112:40)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":112:39)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":114:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":117:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":114:22)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":114:18)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":114:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":114:29)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":114:27)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":115:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":116:29)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":116:17)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":116:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":116:25)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":114:34)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":114:33)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":119:13)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":131:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":119:17)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":119:25)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":119:22)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":119:27)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":119:30)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":119:38)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":119:40)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":119:35)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":120:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":127:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":129:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":121:32)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":121:17)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":121:24)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":121:28)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":123:17)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":126:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":123:25)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":123:21)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":123:28)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":123:32)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":123:30)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":124:17)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":125:34)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":125:41)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":125:42)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":125:21)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":123:37)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":123:36)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":130:17)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":132:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":132:18)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":138:1)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":187:1)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":140:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":140:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":142:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":142:12)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":142:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":143:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":158:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":143:8)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":144:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":145:9)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":157:9)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":146:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":146:49)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":148:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":156:13)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":148:23)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":148:36)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":148:53)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":148:17)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":148:63)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":148:60)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":149:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":152:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":154:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":151:29)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":151:24)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":151:17)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":151:40)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":155:27)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":155:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":159:5)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":186:5)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":159:8)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":160:5)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":161:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":185:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":162:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":162:17)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":163:13)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":163:58)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":163:35)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":163:42)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":163:47)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":163:57)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":164:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":164:43)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":164:17)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":164:27)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":164:24)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":164:33)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":164:34)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":164:40)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":164:39)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":166:13)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":169:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":166:22)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":166:18)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":166:25)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":166:29)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":166:27)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":167:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":168:29)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":168:17)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":168:24)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":168:25)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":166:34)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":166:33)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":171:13)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":183:13)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":171:17)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":171:25)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":171:22)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":171:27)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":171:30)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":171:38)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":171:40)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":171:35)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":172:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":179:13)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":181:13)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":173:32)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":173:17)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":173:24)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":173:28)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":175:17)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":178:17)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":175:25)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":175:21)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":175:28)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":175:32)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":175:30)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":176:17)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":177:34)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":177:41)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":177:42)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":177:21)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":175:37)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":175:36)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":182:27)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":182:17)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":184:13)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":184:18)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":190:1)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":235:1)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":192:5)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":192:9)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":194:13)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":194:12)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":194:5)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":195:5)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":205:5)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":195:8)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":196:5)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":199:5)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":201:5)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":198:19)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":198:9)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":204:16)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":204:9)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":206:5)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":234:5)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":206:8)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":207:5)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":208:9)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":233:9)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":209:13)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":209:17)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":210:13)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":210:58)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":210:35)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":210:42)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":210:47)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":210:57)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":211:13)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":211:43)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":211:17)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":211:27)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":211:24)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":211:33)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":211:34)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":211:40)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":211:39)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":213:13)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":216:13)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":213:22)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":213:18)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":213:25)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":213:29)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":213:27)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":214:13)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":215:29)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":215:17)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":215:24)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":215:25)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":213:34)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":213:33)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":219:13)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":231:13)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":219:17)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":219:25)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":219:22)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":220:13)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":227:13)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":229:13)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":221:32)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":221:17)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":221:24)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":221:28)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":223:17)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":226:17)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":223:25)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":223:21)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":223:28)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":223:32)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":223:30)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":224:17)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":225:34)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":225:41)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":225:42)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":225:21)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":223:37)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":223:36)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":230:27)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":230:17)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":232:13)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":232:18)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":238:1)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":278:1)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":240:5)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":240:9)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":242:13)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":242:12)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":242:5)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":243:5)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":248:5)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":243:8)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":244:5)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":247:16)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":247:9)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":249:5)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":277:5)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":249:8)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":250:5)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":251:9)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":276:9)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":252:13)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":252:17)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":253:13)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":253:58)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":253:35)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":253:42)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":253:47)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":253:57)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":254:13)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":254:43)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":254:17)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":254:27)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":254:24)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":254:33)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":254:34)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":254:40)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":254:39)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":256:13)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":259:13)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":256:22)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":256:18)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":256:25)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":256:29)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":256:27)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":257:13)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":258:29)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":258:17)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":258:24)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":258:25)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":256:34)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":256:33)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":262:13)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":274:13)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":262:17)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":262:25)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":262:22)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":263:13)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":270:13)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":272:13)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":264:32)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":264:17)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":264:24)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":264:28)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":266:17)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":269:17)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":266:25)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":266:21)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":266:28)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":266:32)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":266:30)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":267:17)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":268:34)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":268:41)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":268:42)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":268:21)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":266:37)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":266:36)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":273:27)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":273:17)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":275:13)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c":275:18)
#loc506 = loc(fused[#loc1, #loc2])
#loc507 = loc(fused[#loc3, #loc4])
#loc508 = loc(fused[#loc5, #loc6])
#loc509 = loc(fused[#loc7, #loc8])
#loc510 = loc(fused[#loc9, #loc10])
#loc511 = loc(fused[#loc12, #loc13])
#loc512 = loc(fused[#loc14, #loc15])
#loc513 = loc(fused[#loc16, #loc17])
#loc514 = loc(fused[#loc19, #loc20])
#loc515 = loc(fused[#loc21, #loc22])
#loc516 = loc(fused[#loc23, #loc24])
#loc517 = loc(fused[#loc27, #loc25])
#loc518 = loc(fused[#loc28, #loc29])
#loc519 = loc(fused[#loc31, #loc29])
#loc520 = loc(fused[#loc32, #loc33])
#loc521 = loc(fused[#loc34, #loc35])
#loc522 = loc(fused[#loc36, #loc37])
#loc523 = loc(fused[#loc41, #loc42])
#loc524 = loc(fused[#loc44, #loc45, #loc46, #loc37])
#loc525 = loc(fused[#loc49, #loc50])
#loc526 = loc(fused[#loc52, #loc53])
#loc527 = loc(fused[#loc55, #loc53])
#loc528 = loc(fused[#loc56, #loc57])
#loc529 = loc(fused[#loc58, #loc59])
#loc530 = loc(fused[#loc60, #loc61])
#loc531 = loc(fused[#loc64, #loc65])
#loc532 = loc(fused[#loc63, #loc65])
#loc533 = loc(fused[#loc62, #loc61])
#loc534 = loc(fused[#loc66, #loc67])
#loc535 = loc(fused[#loc68, #loc69])
#loc536 = loc(fused[#loc71, #loc67])
#loc537 = loc(fused[#loc75, #loc76])
#loc538 = loc(fused[#loc78, #loc77])
#loc539 = loc(fused[#loc79, #loc80])
#loc540 = loc(fused[#loc82, #loc76])
#loc541 = loc(fused[#loc84, #loc83])
#loc542 = loc(fused[#loc88, #loc87])
#loc543 = loc(fused[#loc89, #loc90])
#loc544 = loc(fused[#loc91, #loc92])
#loc545 = loc(fused[#loc94, #loc95, #loc96, #loc90])
#loc546 = loc(fused[#loc98, #loc97])
#loc547 = loc(fused[#loc101, #loc102])
#loc548 = loc(fused[#loc104, #loc103])
#loc549 = loc(fused[#loc105, #loc106])
#loc550 = loc(fused[#loc108, #loc102])
#loc551 = loc(fused[#loc114, #loc113])
#loc552 = loc(fused[#loc118, #loc119])
#loc553 = loc(fused[#loc120, #loc121])
#loc554 = loc(fused[#loc122, #loc123])
#loc555 = loc(fused[#loc124, #loc125])
#loc556 = loc(fused[#loc126, #loc127])
#loc557 = loc(fused[#loc128, #loc129])
#loc558 = loc(fused[#loc132, #loc133])
#loc559 = loc(fused[#loc134, #loc135])
#loc560 = loc(fused[#loc138, #loc136])
#loc561 = loc(fused[#loc139, #loc140])
#loc562 = loc(fused[#loc142, #loc140])
#loc563 = loc(fused[#loc143, #loc144])
#loc564 = loc(fused[#loc145, #loc146])
#loc565 = loc(fused[#loc147, #loc148])
#loc566 = loc(fused[#loc152, #loc153])
#loc567 = loc(fused[#loc155, #loc156, #loc157, #loc148])
#loc568 = loc(fused[#loc160, #loc161])
#loc569 = loc(fused[#loc164, #loc165])
#loc570 = loc(fused[#loc167, #loc168, #loc169, #loc165])
#loc571 = loc(fused[#loc171, #loc172])
#loc572 = loc(fused[#loc173, #loc174])
#loc573 = loc(fused[#loc175, #loc176])
#loc574 = loc(fused[#loc179, #loc180])
#loc575 = loc(fused[#loc178, #loc180])
#loc576 = loc(fused[#loc177, #loc176])
#loc577 = loc(fused[#loc181, #loc182])
#loc578 = loc(fused[#loc183, #loc184])
#loc579 = loc(fused[#loc186, #loc182])
#loc580 = loc(fused[#loc190, #loc191])
#loc581 = loc(fused[#loc193, #loc192])
#loc582 = loc(fused[#loc194, #loc195])
#loc583 = loc(fused[#loc197, #loc191])
#loc584 = loc(fused[#loc199, #loc198])
#loc585 = loc(fused[#loc203, #loc202])
#loc586 = loc(fused[#loc204, #loc205])
#loc587 = loc(fused[#loc206, #loc207])
#loc588 = loc(fused[#loc210, #loc212])
#loc589 = loc(fused[#loc214, #loc215, #loc216, #loc205])
#loc590 = loc(fused[#loc218, #loc217])
#loc591 = loc(fused[#loc221, #loc222])
#loc592 = loc(fused[#loc224, #loc223])
#loc593 = loc(fused[#loc225, #loc226])
#loc594 = loc(fused[#loc228, #loc222])
#loc595 = loc(fused[#loc234, #loc233])
#loc596 = loc(fused[#loc238, #loc239])
#loc597 = loc(fused[#loc240, #loc241])
#loc598 = loc(fused[#loc244, #loc242])
#loc599 = loc(fused[#loc245, #loc246])
#loc600 = loc(fused[#loc248, #loc246])
#loc601 = loc(fused[#loc249, #loc250])
#loc602 = loc(fused[#loc251, #loc252])
#loc603 = loc(fused[#loc253, #loc254])
#loc604 = loc(fused[#loc258, #loc259])
#loc605 = loc(fused[#loc261, #loc262, #loc263, #loc254])
#loc606 = loc(fused[#loc266, #loc267])
#loc607 = loc(fused[#loc270, #loc271])
#loc608 = loc(fused[#loc273, #loc271])
#loc609 = loc(fused[#loc274, #loc275])
#loc610 = loc(fused[#loc276, #loc277])
#loc611 = loc(fused[#loc278, #loc279])
#loc612 = loc(fused[#loc282, #loc283])
#loc613 = loc(fused[#loc281, #loc283])
#loc614 = loc(fused[#loc280, #loc279])
#loc615 = loc(fused[#loc284, #loc285])
#loc616 = loc(fused[#loc286, #loc287])
#loc617 = loc(fused[#loc289, #loc285])
#loc618 = loc(fused[#loc293, #loc294])
#loc619 = loc(fused[#loc296, #loc295])
#loc620 = loc(fused[#loc297, #loc298])
#loc621 = loc(fused[#loc300, #loc294])
#loc622 = loc(fused[#loc302, #loc301])
#loc623 = loc(fused[#loc306, #loc305])
#loc624 = loc(fused[#loc307, #loc308])
#loc625 = loc(fused[#loc309, #loc310])
#loc626 = loc(fused[#loc313, #loc315])
#loc627 = loc(fused[#loc317, #loc318, #loc319, #loc308])
#loc628 = loc(fused[#loc321, #loc320])
#loc629 = loc(fused[#loc324, #loc325])
#loc630 = loc(fused[#loc327, #loc326])
#loc631 = loc(fused[#loc328, #loc329])
#loc632 = loc(fused[#loc331, #loc325])
#loc633 = loc(fused[#loc337, #loc336])
#loc634 = loc(fused[#loc342, #loc343])
#loc635 = loc(fused[#loc344, #loc345])
#loc636 = loc(fused[#loc348, #loc346])
#loc637 = loc(fused[#loc349, #loc350])
#loc638 = loc(fused[#loc352, #loc353, #loc354, #loc350])
#loc639 = loc(fused[#loc358, #loc357])
#loc640 = loc(fused[#loc359, #loc360])
#loc641 = loc(fused[#loc362, #loc360])
#loc642 = loc(fused[#loc363, #loc364])
#loc643 = loc(fused[#loc365, #loc366])
#loc644 = loc(fused[#loc367, #loc368])
#loc645 = loc(fused[#loc371, #loc372])
#loc646 = loc(fused[#loc370, #loc372])
#loc647 = loc(fused[#loc369, #loc368])
#loc648 = loc(fused[#loc373, #loc374])
#loc649 = loc(fused[#loc375, #loc376])
#loc650 = loc(fused[#loc378, #loc374])
#loc651 = loc(fused[#loc382, #loc383])
#loc652 = loc(fused[#loc385, #loc384])
#loc653 = loc(fused[#loc386, #loc387])
#loc654 = loc(fused[#loc389, #loc383])
#loc655 = loc(fused[#loc391, #loc390])
#loc656 = loc(fused[#loc395, #loc394])
#loc657 = loc(fused[#loc396, #loc397])
#loc658 = loc(fused[#loc398, #loc399])
#loc659 = loc(fused[#loc401, #loc402, #loc403, #loc397])
#loc660 = loc(fused[#loc405, #loc404])
#loc661 = loc(fused[#loc408, #loc409])
#loc662 = loc(fused[#loc411, #loc410])
#loc663 = loc(fused[#loc412, #loc413])
#loc664 = loc(fused[#loc415, #loc409])
#loc665 = loc(fused[#loc421, #loc420])
#loc666 = loc(fused[#loc426, #loc427])
#loc667 = loc(fused[#loc428, #loc429])
#loc668 = loc(fused[#loc432, #loc430])
#loc669 = loc(fused[#loc433, #loc434])
#loc670 = loc(fused[#loc436, #loc434])
#loc671 = loc(fused[#loc438, #loc437])
#loc672 = loc(fused[#loc439, #loc440])
#loc673 = loc(fused[#loc442, #loc440])
#loc674 = loc(fused[#loc443, #loc444])
#loc675 = loc(fused[#loc445, #loc446])
#loc676 = loc(fused[#loc447, #loc448])
#loc677 = loc(fused[#loc451, #loc452])
#loc678 = loc(fused[#loc450, #loc452])
#loc679 = loc(fused[#loc449, #loc448])
#loc680 = loc(fused[#loc453, #loc454])
#loc681 = loc(fused[#loc455, #loc456])
#loc682 = loc(fused[#loc458, #loc454])
#loc683 = loc(fused[#loc462, #loc463])
#loc684 = loc(fused[#loc465, #loc464])
#loc685 = loc(fused[#loc466, #loc467])
#loc686 = loc(fused[#loc469, #loc463])
#loc687 = loc(fused[#loc471, #loc470])
#loc688 = loc(fused[#loc475, #loc474])
#loc689 = loc(fused[#loc476, #loc477])
#loc690 = loc(fused[#loc478, #loc479])
#loc691 = loc(fused[#loc481, #loc482, #loc483, #loc477])
#loc692 = loc(fused[#loc485, #loc484])
#loc693 = loc(fused[#loc488, #loc489])
#loc694 = loc(fused[#loc491, #loc490])
#loc695 = loc(fused[#loc492, #loc493])
#loc696 = loc(fused[#loc495, #loc489])
#loc697 = loc(fused[#loc501, #loc500])
