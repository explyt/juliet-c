!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc155)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc156)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printHexCharLine(!s8i) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc161)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc162)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc163)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc21)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc21)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc164)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc166)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc166)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc25)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc30)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc157)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %14 = cir.call @__isoc99_fscanf(%11, %13, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc30)
    cir.br ^bb4 loc(#loc28)
  ^bb3:  // pred: ^bb1
    %15 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc32)
    cir.store %16, %2 : !s8i, !cir.ptr<!s8i> loc(#loc168)
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc24)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc169)
  ^bb6:  // pred: ^bb5
    %17 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc170)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc170)
    %19 = cir.call %18() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc36)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc36)
    cir.brcond %20 ^bb7, ^bb10 loc(#loc171)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc172)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc43)
    %22 = cir.cast(integral, %21 : !s8i), !s32i loc(#loc43)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %24 = cir.binop(add, %22, %23) nsw : !s32i loc(#loc43)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc43)
    cir.store %25, %0 : !s8i, !cir.ptr<!s8i> loc(#loc161)
    %26 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc44)
    cir.call @printHexCharLine(%26) : (!s8i) -> () loc(#loc45)
    cir.br ^bb9 loc(#loc42)
  ^bb9:  // pred: ^bb8
    cir.br ^bb16 loc(#loc39)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc173)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc48)
    %28 = cir.cast(integral, %27 : !s8i), !s32i loc(#loc48)
    %29 = cir.const #cir.int<127> : !s32i loc(#loc49)
    %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc174)
    cir.brcond %30 ^bb12, ^bb13 loc(#loc175)
  ^bb12:  // pred: ^bb11
    %31 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc53)
    %32 = cir.cast(integral, %31 : !s8i), !s32i loc(#loc53)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %34 = cir.binop(add, %32, %33) nsw : !s32i loc(#loc53)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc53)
    cir.store %35, %1 : !s8i, !cir.ptr<!s8i> loc(#loc162)
    %36 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc54)
    cir.call @printHexCharLine(%36) : (!s8i) -> () loc(#loc55)
    cir.br ^bb14 loc(#loc51)
  ^bb13:  // pred: ^bb11
    %37 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc12)
    %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb14 loc(#loc47)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc47)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc35)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc35)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc14)
  } loc(#loc160)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc176)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc180)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc181)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc182)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc71)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc71)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc183)
    cir.br ^bb1 loc(#loc184)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc185)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc185)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc75)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc75)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc186)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc80)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc157)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc81)
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc82)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc82)
    %14 = cir.call @__isoc99_fscanf(%11, %13, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc80)
    cir.br ^bb4 loc(#loc78)
  ^bb3:  // pred: ^bb1
    %15 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc83)
    %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc157)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc84)
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc85)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc85)
    %20 = cir.call @__isoc99_fscanf(%17, %19, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc83)
    cir.br ^bb4 loc(#loc74)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc74)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc187)
  ^bb6:  // pred: ^bb5
    %21 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc188)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc188)
    %23 = cir.call %22() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc88)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %24 ^bb7, ^bb13 loc(#loc189)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc190)
  ^bb8:  // pred: ^bb7
    %25 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc95)
    %26 = cir.cast(integral, %25 : !s8i), !s32i loc(#loc95)
    %27 = cir.const #cir.int<127> : !s32i loc(#loc96)
    %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc191)
    cir.brcond %28 ^bb9, ^bb10 loc(#loc192)
  ^bb9:  // pred: ^bb8
    %29 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc100)
    %30 = cir.cast(integral, %29 : !s8i), !s32i loc(#loc100)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %32 = cir.binop(add, %30, %31) nsw : !s32i loc(#loc100)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc100)
    cir.store %33, %0 : !s8i, !cir.ptr<!s8i> loc(#loc180)
    %34 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc101)
    cir.call @printHexCharLine(%34) : (!s8i) -> () loc(#loc102)
    cir.br ^bb11 loc(#loc98)
  ^bb10:  // pred: ^bb8
    %35 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc103)
    %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb11 loc(#loc94)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc94)
  ^bb12:  // pred: ^bb11
    cir.br ^bb19 loc(#loc91)
  ^bb13:  // pred: ^bb6
    cir.br ^bb14 loc(#loc193)
  ^bb14:  // pred: ^bb13
    %37 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc107)
    %38 = cir.cast(integral, %37 : !s8i), !s32i loc(#loc107)
    %39 = cir.const #cir.int<127> : !s32i loc(#loc108)
    %40 = cir.cmp(lt, %38, %39) : !s32i, !cir.bool loc(#loc194)
    cir.brcond %40 ^bb15, ^bb16 loc(#loc195)
  ^bb15:  // pred: ^bb14
    %41 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc112)
    %42 = cir.cast(integral, %41 : !s8i), !s32i loc(#loc112)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %44 = cir.binop(add, %42, %43) nsw : !s32i loc(#loc112)
    %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc112)
    cir.store %45, %1 : !s8i, !cir.ptr<!s8i> loc(#loc181)
    %46 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc113)
    cir.call @printHexCharLine(%46) : (!s8i) -> () loc(#loc114)
    cir.br ^bb17 loc(#loc110)
  ^bb16:  // pred: ^bb14
    %47 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc115)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb17 loc(#loc106)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc106)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc87)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc87)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc64)
  } loc(#loc179)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc197)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc198)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc199)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc125)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc125)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc202)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc202)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc129)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc203)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc134)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc134)
    cir.store %10, %2 : !s8i, !cir.ptr<!s8i> loc(#loc204)
    cir.br ^bb4 loc(#loc132)
  ^bb3:  // pred: ^bb1
    %11 = cir.const #cir.int<2> : !s32i loc(#loc136)
    %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc136)
    cir.store %12, %2 : !s8i, !cir.ptr<!s8i> loc(#loc205)
    cir.br ^bb4 loc(#loc128)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc128)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc206)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc207)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc207)
    %15 = cir.call %14() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc140)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc140)
    cir.brcond %16 ^bb7, ^bb10 loc(#loc208)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc209)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc147)
    %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc147)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %20 = cir.binop(add, %18, %19) nsw : !s32i loc(#loc147)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc147)
    cir.store %21, %0 : !s8i, !cir.ptr<!s8i> loc(#loc197)
    %22 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc148)
    cir.call @printHexCharLine(%22) : (!s8i) -> () loc(#loc149)
    cir.br ^bb9 loc(#loc146)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc143)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc210)
  ^bb11:  // pred: ^bb10
    %23 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc152)
    %24 = cir.cast(integral, %23 : !s8i), !s32i loc(#loc152)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %26 = cir.binop(add, %24, %25) nsw : !s32i loc(#loc152)
    %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc152)
    cir.store %27, %1 : !s8i, !cir.ptr<!s8i> loc(#loc198)
    %28 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc153)
    cir.call @printHexCharLine(%28) : (!s8i) -> () loc(#loc154)
    cir.br ^bb12 loc(#loc151)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc139)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc139)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc118)
  } loc(#loc196)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":29:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":54:23)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":22:1)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":57:1)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":40:13)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":40:34)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":49:13)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":49:34)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":24:5)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":24:10)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":25:12)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":25:5)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":26:5)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":35:5)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":26:8)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":26:33)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":27:5)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":30:5)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":32:5)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":29:9)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":29:17)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":34:16)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":34:9)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":36:5)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":56:5)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":36:8)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":36:33)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":37:5)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":43:5)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":45:5)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":38:9)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":42:9)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":40:27)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":41:30)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":41:13)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":47:9)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":55:9)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":47:13)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":47:20)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":48:9)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":51:9)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":53:9)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":49:27)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":50:30)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":50:13)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":54:13)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":143:1)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":147:1)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":145:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":145:13)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":146:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":146:13)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":66:1)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":106:1)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":85:13)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":85:34)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":98:13)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":98:34)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":68:5)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":68:10)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":69:12)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":69:5)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":70:5)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":79:5)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":70:8)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":70:33)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":71:5)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":74:5)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":76:5)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":73:9)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":73:17)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":73:24)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":78:9)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":78:17)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":78:24)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":80:5)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":105:5)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":80:8)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":80:33)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":81:5)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":92:5)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":94:5)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":83:9)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":91:9)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":83:13)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":83:20)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":84:9)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":87:9)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":89:9)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":85:27)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":86:30)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":86:13)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":90:23)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":90:13)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":96:9)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":104:9)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":96:13)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":96:20)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":97:9)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":100:9)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":102:9)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":98:27)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":99:30)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":99:13)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":103:23)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":103:13)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":111:1)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":141:1)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":129:13)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":129:34)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":137:13)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":137:34)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":113:5)
#loc124 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":113:10)
#loc125 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":114:12)
#loc126 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":114:5)
#loc127 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":115:5)
#loc128 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":124:5)
#loc129 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":115:8)
#loc130 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":115:33)
#loc131 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":116:5)
#loc132 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":119:5)
#loc133 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":121:5)
#loc134 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":118:16)
#loc135 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":118:9)
#loc136 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":123:16)
#loc137 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":123:9)
#loc138 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":125:5)
#loc139 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":140:5)
#loc140 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":125:8)
#loc141 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":125:33)
#loc142 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":126:5)
#loc143 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":132:5)
#loc144 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":134:5)
#loc145 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":127:9)
#loc146 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":131:9)
#loc147 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":129:27)
#loc148 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":130:30)
#loc149 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":130:13)
#loc150 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":135:9)
#loc151 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":139:9)
#loc152 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":137:27)
#loc153 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":138:30)
#loc154 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":138:13)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc8, #loc9])
#loc159 = loc(fused[#loc10, #loc11])
#loc160 = loc(fused[#loc13, #loc14])
#loc161 = loc(fused[#loc15, #loc16])
#loc162 = loc(fused[#loc17, #loc18])
#loc163 = loc(fused[#loc19, #loc20])
#loc164 = loc(fused[#loc22, #loc21])
#loc165 = loc(fused[#loc23, #loc24])
#loc166 = loc(fused[#loc25, #loc26])
#loc167 = loc(fused[#loc27, #loc28, #loc29, #loc24])
#loc168 = loc(fused[#loc33, #loc32])
#loc169 = loc(fused[#loc34, #loc35])
#loc170 = loc(fused[#loc36, #loc37])
#loc171 = loc(fused[#loc38, #loc39, #loc40, #loc35])
#loc172 = loc(fused[#loc41, #loc42])
#loc173 = loc(fused[#loc46, #loc47])
#loc174 = loc(fused[#loc48, #loc49])
#loc175 = loc(fused[#loc50, #loc51, #loc52, #loc47])
#loc176 = loc(fused[#loc57, #loc58])
#loc177 = loc(fused[#loc59, #loc60])
#loc178 = loc(fused[#loc61, #loc62])
#loc179 = loc(fused[#loc63, #loc64])
#loc180 = loc(fused[#loc65, #loc66])
#loc181 = loc(fused[#loc67, #loc68])
#loc182 = loc(fused[#loc69, #loc70])
#loc183 = loc(fused[#loc72, #loc71])
#loc184 = loc(fused[#loc73, #loc74])
#loc185 = loc(fused[#loc75, #loc76])
#loc186 = loc(fused[#loc77, #loc78, #loc79, #loc74])
#loc187 = loc(fused[#loc86, #loc87])
#loc188 = loc(fused[#loc88, #loc89])
#loc189 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc190 = loc(fused[#loc93, #loc94])
#loc191 = loc(fused[#loc95, #loc96])
#loc192 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc193 = loc(fused[#loc105, #loc106])
#loc194 = loc(fused[#loc107, #loc108])
#loc195 = loc(fused[#loc109, #loc110, #loc111, #loc106])
#loc196 = loc(fused[#loc117, #loc118])
#loc197 = loc(fused[#loc119, #loc120])
#loc198 = loc(fused[#loc121, #loc122])
#loc199 = loc(fused[#loc123, #loc124])
#loc200 = loc(fused[#loc126, #loc125])
#loc201 = loc(fused[#loc127, #loc128])
#loc202 = loc(fused[#loc129, #loc130])
#loc203 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc204 = loc(fused[#loc135, #loc134])
#loc205 = loc(fused[#loc137, #loc136])
#loc206 = loc(fused[#loc138, #loc139])
#loc207 = loc(fused[#loc140, #loc141])
#loc208 = loc(fused[#loc142, #loc143, #loc144, #loc139])
#loc209 = loc(fused[#loc145, #loc146])
#loc210 = loc(fused[#loc150, #loc151])
