!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_add_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc172)
  cir.func private @printIntLine(!s32i) loc(#loc173)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_add_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc175)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc9)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc176)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc178)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc16)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc16)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc16)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc16)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc16)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc16)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc16)
          cir.yield %24 : !u32i loc(#loc16)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc16)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc16)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc16)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc16)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc16)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc16)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc16)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc16)
          cir.yield %28 : !u32i loc(#loc16)
        }) : (!cir.bool) -> !u32i loc(#loc16)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc16)
        %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc16)
        cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc180)
      } loc(#loc179)
    } loc(#loc177)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc182)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc20)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc185)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc27)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc27)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc27)
          %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc27)
          cir.store %11, %6 : !s16i, !cir.ptr<!s16i> loc(#loc185)
          %12 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc28)
          %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc28)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc29)
        } loc(#loc184)
      } loc(#loc183)
    } loc(#loc181)
    cir.return loc(#loc6)
  } loc(#loc174)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_add_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc189)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc190)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc186)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    cir.return %2 : !s32i loc(#loc192)
  } loc(#loc191)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc195)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc52)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc196)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc198)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc56)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc56)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc59)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc59)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc59)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc59)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc59)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc59)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc59)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc59)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc59)
          cir.yield %24 : !u32i loc(#loc59)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc59)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc59)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc59)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc59)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc59)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc59)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc59)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc59)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc59)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc59)
          cir.yield %28 : !u32i loc(#loc59)
        }) : (!cir.bool) -> !u32i loc(#loc59)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc59)
        %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc59)
        cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc200)
      } loc(#loc199)
    } loc(#loc197)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc202)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc63)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc63)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc71)
          %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc71)
          %8 = cir.const #cir.int<32767> : !s32i loc(#loc72)
          %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc205)
          cir.if %9 {
            %10 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc207)
            %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc78)
            %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc78)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc77)
            %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc78)
            %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc78)
            cir.store %15, %10 : !s16i, !cir.ptr<!s16i> loc(#loc207)
            %16 = cir.load %10 : !cir.ptr<!s16i>, !s16i loc(#loc79)
            %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc79)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc80)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc81)
          } loc(#loc206)
        } loc(#loc204)
      } loc(#loc203)
    } loc(#loc201)
    cir.return loc(#loc49)
  } loc(#loc194)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.return %2 : !s32i loc(#loc209)
  } loc(#loc208)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc211)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc90)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc212)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc214)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc94)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc94)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc97)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc97)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc97)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc97)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc97)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc97)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc97)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc97)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc97)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc97)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc97)
          cir.yield %24 : !u32i loc(#loc97)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc97)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc97)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc97)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc97)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc97)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc97)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc97)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc97)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc97)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc97)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc97)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc97)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc97)
          cir.yield %28 : !u32i loc(#loc97)
        }) : (!cir.bool) -> !u32i loc(#loc97)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc97)
        %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc97)
        cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc216)
      } loc(#loc215)
    } loc(#loc213)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc218)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc101)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc101)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc106)
          %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc106)
          %8 = cir.const #cir.int<32767> : !s32i loc(#loc107)
          %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc221)
          cir.if %9 {
            %10 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc223)
            %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc113)
            %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc113)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc112)
            %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc113)
            %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc113)
            cir.store %15, %10 : !s16i, !cir.ptr<!s16i> loc(#loc223)
            %16 = cir.load %10 : !cir.ptr<!s16i>, !s16i loc(#loc114)
            %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc114)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc115)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc116)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc116)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc117)
          } loc(#loc222)
        } loc(#loc220)
      } loc(#loc219)
    } loc(#loc217)
    cir.return loc(#loc87)
  } loc(#loc210)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc225)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc122)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc226)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc228)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc126)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc126)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc132)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc133)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc133)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc230)
      } loc(#loc229)
    } loc(#loc227)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc232)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc137)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc137)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc235)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc144)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc144)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc143)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc144)
          %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc144)
          cir.store %11, %6 : !s16i, !cir.ptr<!s16i> loc(#loc235)
          %12 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc145)
          %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc145)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc146)
        } loc(#loc234)
      } loc(#loc233)
    } loc(#loc231)
    cir.return loc(#loc119)
  } loc(#loc224)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc237)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc151)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc151)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc238)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc240)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc155)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc155)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc158)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc158)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc242)
      } loc(#loc241)
    } loc(#loc239)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc244)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc162)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc162)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc247)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc169)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc169)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc168)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc169)
          %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc169)
          cir.store %11, %6 : !s16i, !cir.ptr<!s16i> loc(#loc247)
          %12 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc170)
          %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc170)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc171)
        } loc(#loc246)
      } loc(#loc245)
    } loc(#loc243)
    cir.return loc(#loc148)
  } loc(#loc236)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_add_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":35:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":52:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":37:5)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":37:11)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":38:12)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":38:5)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":39:5)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":43:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":39:8)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":39:26)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":40:5)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":42:23)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":42:9)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":44:5)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":51:5)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":44:8)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":44:26)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":45:5)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":46:9)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":50:9)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":48:13)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":48:35)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":48:28)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":49:26)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":49:13)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":158:1)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":164:1)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":160:5)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":160:14)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":161:5)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":161:14)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":162:5)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":162:14)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":163:5)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":163:14)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":23:1)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":26:1)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":25:12)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":25:5)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":71:19)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":83:23)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":59:1)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":86:1)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":61:5)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":61:11)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":62:12)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":62:5)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":67:5)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":63:8)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":63:26)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":64:5)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":66:23)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":66:9)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":68:5)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":85:5)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":68:8)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":68:27)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":69:5)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":72:5)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":74:5)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":71:9)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":76:9)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":84:9)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":76:13)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":76:20)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":77:9)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":80:9)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":82:9)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":78:13)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":78:35)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":78:28)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":79:26)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":79:13)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":83:13)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":28:1)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":31:1)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":30:12)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":30:5)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":89:1)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":111:1)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":91:5)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":91:11)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":92:12)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":92:5)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":93:5)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":97:5)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":93:8)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":93:26)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":94:5)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":96:23)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":96:9)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":98:5)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":110:5)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":98:8)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":98:26)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":99:5)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":101:9)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":109:9)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":101:13)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":101:20)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":102:9)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":105:9)
#loc110 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":107:9)
#loc111 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":103:13)
#loc112 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":103:35)
#loc113 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":103:28)
#loc114 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":104:26)
#loc115 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":104:13)
#loc116 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":108:23)
#loc117 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":108:13)
#loc118 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":114:1)
#loc119 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":136:1)
#loc120 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":116:5)
#loc121 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":116:11)
#loc122 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":117:12)
#loc123 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":117:5)
#loc124 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":118:5)
#loc125 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":127:5)
#loc126 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":118:8)
#loc127 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":118:27)
#loc128 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":119:5)
#loc129 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":122:5)
#loc130 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":124:5)
#loc131 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":121:19)
#loc132 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":121:9)
#loc133 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":126:16)
#loc134 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":126:9)
#loc135 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":128:5)
#loc136 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":135:5)
#loc137 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":128:8)
#loc138 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":128:26)
#loc139 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":129:5)
#loc140 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":130:9)
#loc141 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":134:9)
#loc142 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":132:13)
#loc143 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":132:35)
#loc144 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":132:28)
#loc145 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":133:26)
#loc146 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":133:13)
#loc147 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":139:1)
#loc148 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":156:1)
#loc149 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":141:5)
#loc150 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":141:11)
#loc151 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":142:12)
#loc152 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":142:5)
#loc153 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":143:5)
#loc154 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":147:5)
#loc155 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":143:8)
#loc156 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":143:26)
#loc157 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":144:5)
#loc158 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":146:16)
#loc159 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":146:9)
#loc160 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":148:5)
#loc161 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":155:5)
#loc162 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":148:8)
#loc163 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":148:26)
#loc164 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":149:5)
#loc165 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":150:9)
#loc166 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":154:9)
#loc167 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":152:13)
#loc168 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":152:35)
#loc169 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":152:28)
#loc170 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":153:26)
#loc171 = loc("CWE190_Integer_Overflow__short_rand_add_08.c":153:13)
#loc172 = loc(fused[#loc1, #loc2])
#loc173 = loc(fused[#loc3, #loc4])
#loc174 = loc(fused[#loc5, #loc6])
#loc175 = loc(fused[#loc7, #loc8])
#loc176 = loc(fused[#loc10, #loc9])
#loc177 = loc(fused[#loc11, #loc12])
#loc178 = loc(fused[#loc13, #loc14])
#loc179 = loc(fused[#loc15, #loc12])
#loc180 = loc(fused[#loc17, #loc16])
#loc181 = loc(fused[#loc18, #loc19])
#loc182 = loc(fused[#loc20, #loc21])
#loc183 = loc(fused[#loc22, #loc19])
#loc184 = loc(fused[#loc23, #loc24])
#loc185 = loc(fused[#loc25, #loc26])
#loc186 = loc(fused[#loc30, #loc31])
#loc187 = loc(fused[#loc32, #loc33])
#loc188 = loc(fused[#loc34, #loc35])
#loc189 = loc(fused[#loc36, #loc37])
#loc190 = loc(fused[#loc38, #loc39])
#loc191 = loc(fused[#loc40, #loc41])
#loc192 = loc(fused[#loc43, #loc42])
#loc193 = loc(fused[#loc44, #loc45])
#loc194 = loc(fused[#loc48, #loc49])
#loc195 = loc(fused[#loc50, #loc51])
#loc196 = loc(fused[#loc53, #loc52])
#loc197 = loc(fused[#loc54, #loc55])
#loc198 = loc(fused[#loc56, #loc57])
#loc199 = loc(fused[#loc58, #loc55])
#loc200 = loc(fused[#loc60, #loc59])
#loc201 = loc(fused[#loc61, #loc62])
#loc202 = loc(fused[#loc63, #loc64])
#loc203 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc204 = loc(fused[#loc69, #loc70])
#loc205 = loc(fused[#loc71, #loc72])
#loc206 = loc(fused[#loc73, #loc74, #loc75, #loc70])
#loc207 = loc(fused[#loc76, #loc77])
#loc208 = loc(fused[#loc82, #loc83])
#loc209 = loc(fused[#loc85, #loc84])
#loc210 = loc(fused[#loc86, #loc87])
#loc211 = loc(fused[#loc88, #loc89])
#loc212 = loc(fused[#loc91, #loc90])
#loc213 = loc(fused[#loc92, #loc93])
#loc214 = loc(fused[#loc94, #loc95])
#loc215 = loc(fused[#loc96, #loc93])
#loc216 = loc(fused[#loc98, #loc97])
#loc217 = loc(fused[#loc99, #loc100])
#loc218 = loc(fused[#loc101, #loc102])
#loc219 = loc(fused[#loc103, #loc100])
#loc220 = loc(fused[#loc104, #loc105])
#loc221 = loc(fused[#loc106, #loc107])
#loc222 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc223 = loc(fused[#loc111, #loc112])
#loc224 = loc(fused[#loc118, #loc119])
#loc225 = loc(fused[#loc120, #loc121])
#loc226 = loc(fused[#loc123, #loc122])
#loc227 = loc(fused[#loc124, #loc125])
#loc228 = loc(fused[#loc126, #loc127])
#loc229 = loc(fused[#loc128, #loc129, #loc130, #loc125])
#loc230 = loc(fused[#loc134, #loc133])
#loc231 = loc(fused[#loc135, #loc136])
#loc232 = loc(fused[#loc137, #loc138])
#loc233 = loc(fused[#loc139, #loc136])
#loc234 = loc(fused[#loc140, #loc141])
#loc235 = loc(fused[#loc142, #loc143])
#loc236 = loc(fused[#loc147, #loc148])
#loc237 = loc(fused[#loc149, #loc150])
#loc238 = loc(fused[#loc152, #loc151])
#loc239 = loc(fused[#loc153, #loc154])
#loc240 = loc(fused[#loc155, #loc156])
#loc241 = loc(fused[#loc157, #loc154])
#loc242 = loc(fused[#loc159, #loc158])
#loc243 = loc(fused[#loc160, #loc161])
#loc244 = loc(fused[#loc162, #loc163])
#loc245 = loc(fused[#loc164, #loc161])
#loc246 = loc(fused[#loc165, #loc166])
#loc247 = loc(fused[#loc167, #loc168])
