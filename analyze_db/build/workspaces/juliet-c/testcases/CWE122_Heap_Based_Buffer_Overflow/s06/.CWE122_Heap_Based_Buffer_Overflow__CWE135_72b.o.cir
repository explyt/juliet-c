!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc3 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1126:7)
#loc4 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1126:18)
#loc5 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1126:28)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":30:14)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":30:29)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":50:18)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":50:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":65:18)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":65:33)
#loc144 = loc(fused[#loc4, #loc5])
#loc153 = loc(fused[#loc29, #loc30])
#loc165 = loc(fused[#loc68, #loc69])
#loc177 = loc(fused[#loc108, #loc109])
!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E3A3A_Vector_impl_data = !cir.record<struct "std::_Vector_base<void *, std::allocator<void *>>::_Vector_impl_data" {!cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!void>>} #cir.record.decl.ast>
!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E3A3A_Vector_impl = !cir.record<struct "std::_Vector_base<void *, std::allocator<void *>>::_Vector_impl" {!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E3A3A_Vector_impl_data} #cir.record.decl.ast>
!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E = !cir.record<struct "std::_Vector_base<void *, std::allocator<void *>>" {!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E3A3A_Vector_impl} #cir.record.decl.ast>
!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E = !cir.record<class "std::vector<void *, std::allocator<void *>>" {!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func linkonce_odr @_ZNSt6vectorIPvSaIS0_EEixEm(%arg0: !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E> loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1126:7), %arg1: !u64i loc(fused[#loc4, #loc5])) -> !cir.ptr<!cir.ptr<!void>> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>>, ["this", init] {alignment = 8 : i64} loc(#loc3)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__n", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["__retval"] {alignment = 8 : i64} loc(#loc2)
    cir.store %arg0, %0 : !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>> loc(#loc6)
    cir.store %arg1, %1 : !u64i, !cir.ptr<!u64i> loc(#loc6)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>>, !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E> loc(#loc3)
    %4 = cir.base_class_addr(%3 : !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E> loc(#loc7)
    %5 = cir.get_member %4[0] {name = "_M_impl"} : !cir.ptr<!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E> -> !cir.ptr<!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E3A3A_Vector_impl> loc(#loc8)
    %6 = cir.base_class_addr(%5 : !cir.ptr<!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E3A3A_Vector_impl> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E3A3A_Vector_impl_data> loc(#loc7)
    %7 = cir.get_member %6[0] {name = "_M_start"} : !cir.ptr<!ty_std3A3A_Vector_base3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E3A3A_Vector_impl_data> -> !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc9)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc10)
    %9 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc11)
    %10 = cir.ptr_stride(%8 : !cir.ptr<!cir.ptr<!void>>, %9 : !u64i), !cir.ptr<!cir.ptr<!void>> loc(#loc12)
    cir.store %10, %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc145)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc145)
    cir.return %11 : !cir.ptr<!cir.ptr<!void>> loc(#loc145)
  } loc(#loc143)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr1) loc(#loc146)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc147)
  cir.func private @exit(!s32i) extra(#fn_attr1) loc(#loc148)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc149)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc151)
  cir.func @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_727badSinkESt6vectorIPvSaIS1_EE(%arg0: !ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E loc(fused[#loc29, #loc30])) extra(#fn_attr2) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.alloca !ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc153)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc156)
    cir.store %arg0, %2 : !ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E> loc(#loc37)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc38)
    %6 = cir.call @_ZNSt6vectorIPvSaIS0_EEixEm(%2, %5) : (!cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>, !u64i) -> !cir.ptr<!cir.ptr<!void>> extra(#fn_attr1) loc(#loc39)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    cir.store %7, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc156)
    cir.br ^bb1 loc(#loc157)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc42)
    %9 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
    %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr1) loc(#loc42)
    cir.store %11, %0 : !u64i, !cir.ptr<!u64i> loc(#loc154)
    %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc44)
    %13 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc45)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc46)
    %16 = cir.binop(add, %13, %15) : !u64i loc(#loc158)
    %17 = cir.const #cir.int<4> : !u64i loc(#loc159)
    %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc44)
    cir.store %18, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc155)
    cir.br ^bb2 loc(#loc160)
  ^bb2:  // pred: ^bb1
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc51)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc52)
    %21 = cir.cmp(eq, %19, %20) : !cir.ptr<!void>, !cir.bool loc(#loc161)
    cir.brcond %21 ^bb3, ^bb4 loc(#loc162)
  ^bb3:  // pred: ^bb2
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc54)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc56)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr1) loc(#loc54)
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc50)
  ^bb5:  // pred: ^bb4
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc57)
    %27 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
    %29 = cir.call @wcscpy(%26, %28) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc59)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc60)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc62)
    cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc63)
    cir.br ^bb6 loc(#loc41)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc28)
  } loc(#loc152)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc163)
  cir.func @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_7211goodG2BSinkESt6vectorIPvSaIS1_EE(%arg0: !ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E loc(fused[#loc68, #loc69])) extra(#fn_attr2) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.alloca !ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc165)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc168)
    cir.store %arg0, %2 : !ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E> loc(#loc76)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc77)
    %6 = cir.call @_ZNSt6vectorIPvSaIS0_EEixEm(%2, %5) : (!cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>, !u64i) -> !cir.ptr<!cir.ptr<!void>> extra(#fn_attr1) loc(#loc78)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
    cir.store %7, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc168)
    cir.br ^bb1 loc(#loc169)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc81)
    %9 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
    %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr1) loc(#loc81)
    cir.store %11, %0 : !u64i, !cir.ptr<!u64i> loc(#loc166)
    %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc83)
    %13 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc84)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc85)
    %16 = cir.binop(add, %13, %15) : !u64i loc(#loc170)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc86)
    %19 = cir.call @calloc(%16, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc83)
    cir.store %19, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc167)
    cir.br ^bb2 loc(#loc171)
  ^bb2:  // pred: ^bb1
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
    %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc90)
    %22 = cir.cmp(eq, %20, %21) : !cir.ptr<!void>, !cir.bool loc(#loc172)
    cir.brcond %22 ^bb3, ^bb4 loc(#loc173)
  ^bb3:  // pred: ^bb2
    %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc92)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc94)
    cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr1) loc(#loc92)
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc88)
  ^bb5:  // pred: ^bb4
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc95)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc95)
    %28 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc96)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
    %30 = cir.call @strcpy(%27, %29) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc97)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc98)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc100)
    cir.call @free(%33) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc101)
    cir.br ^bb6 loc(#loc80)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc67)
  } loc(#loc164)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr1) loc(#loc174)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc175)
  cir.func @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_7211goodB2GSinkESt6vectorIPvSaIS1_EE(%arg0: !ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E loc(fused[#loc108, #loc109])) extra(#fn_attr2) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc179)
    %2 = cir.alloca !ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc177)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc180)
    cir.store %arg0, %2 : !ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E> loc(#loc116)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc117)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc117)
    %6 = cir.call @_ZNSt6vectorIPvSaIS0_EEixEm(%2, %5) : (!cir.ptr<!ty_std3A3Avector3Cvoid_2A2C_std3A3Aallocator3Cvoid_2A3E3E>, !u64i) -> !cir.ptr<!cir.ptr<!void>> extra(#fn_attr1) loc(#loc118)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc118)
    cir.store %7, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc121)
    %9 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc122)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
    %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr1) loc(#loc121)
    cir.store %11, %0 : !u64i, !cir.ptr<!u64i> loc(#loc178)
    %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc123)
    %13 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc124)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc125)
    %16 = cir.binop(add, %13, %15) : !u64i loc(#loc182)
    %17 = cir.const #cir.int<4> : !u64i loc(#loc183)
    %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc123)
    cir.store %18, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc179)
    cir.br ^bb2 loc(#loc184)
  ^bb2:  // pred: ^bb1
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc130)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc131)
    %21 = cir.cmp(eq, %19, %20) : !cir.ptr<!void>, !cir.bool loc(#loc185)
    cir.brcond %21 ^bb3, ^bb4 loc(#loc186)
  ^bb3:  // pred: ^bb2
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc133)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc135)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr1) loc(#loc133)
    cir.br ^bb4 loc(#loc129)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc129)
  ^bb5:  // pred: ^bb4
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc136)
    %27 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc137)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc137)
    %29 = cir.call @wcscpy(%26, %28) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc138)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc139)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc139)
    cir.call @printWLine(%31) : (!cir.ptr<!s32i>) -> () loc(#loc140)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc141)
    cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc142)
    cir.br ^bb6 loc(#loc120)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc107)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1125:7)
#loc2 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1130:7)
#loc6 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1127:7)
#loc7 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:11)
#loc8 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":374:20)
#loc9 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":94:10)
#loc10 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:25)
#loc11 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:36)
#loc12 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:34)
#loc13 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:2)
#loc14 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:39)
#loc15 = loc("/usr/include/string.h":407:1)
#loc16 = loc("/usr/include/string.h":408:33)
#loc17 = loc("/usr/include/stdlib.h":675:1)
#loc18 = loc("/usr/include/stdlib.h":676:14)
#loc19 = loc("/usr/include/stdlib.h":756:1)
#loc20 = loc("/usr/include/stdlib.h":756:70)
#loc21 = loc("/usr/include/wchar.h":98:1)
#loc22 = loc("/usr/include/wchar.h":100:14)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":30:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":43:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":36:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":36:45)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":37:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":37:64)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":33:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":33:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":31:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":33:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":33:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":34:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":42:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":36:26)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":36:41)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":37:31)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":37:38)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":37:46)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":37:49)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":37:63)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":38:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":38:37)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":38:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":38:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":38:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":38:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":38:34)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":38:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":39:33)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":39:50)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":39:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":40:27)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":40:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":41:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":41:9)
#loc64 = loc("/usr/include/string.h":141:1)
#loc65 = loc("/usr/include/string.h":142:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":50:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":62:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":55:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":55:45)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":56:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":56:50)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":52:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":52:31)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":51:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":52:30)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":52:19)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":53:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":61:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":55:26)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":55:41)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":56:31)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":56:38)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":56:46)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":56:49)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":57:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":57:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":57:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":57:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":57:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":57:28)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":57:34)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":57:33)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":58:30)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":58:44)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":58:15)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":59:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":59:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":60:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":60:9)
#loc102 = loc("/usr/include/wchar.h":247:1)
#loc103 = loc("/usr/include/wchar.h":247:51)
#loc104 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc105 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":65:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":77:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":70:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":70:48)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":71:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":71:64)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":67:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":67:31)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":66:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":67:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":67:19)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":68:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":76:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":70:26)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":70:44)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":71:31)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":71:38)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":71:46)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":71:49)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":71:63)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":72:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":72:37)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":72:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":72:21)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":72:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":72:28)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":72:34)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":72:33)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":73:33)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":73:50)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":73:15)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":74:31)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":74:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":75:14)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_72b.cpp":75:9)
#loc143 = loc(fused[#loc1, #loc2])
#loc145 = loc(fused[#loc13, #loc14])
#loc146 = loc(fused[#loc15, #loc16])
#loc147 = loc(fused[#loc17, #loc18])
#loc148 = loc(fused[#loc19, #loc20])
#loc149 = loc(fused[#loc21, #loc22])
#loc150 = loc(fused[#loc23, #loc24])
#loc151 = loc(fused[#loc25, #loc26])
#loc152 = loc(fused[#loc27, #loc28])
#loc154 = loc(fused[#loc31, #loc32])
#loc155 = loc(fused[#loc33, #loc34])
#loc156 = loc(fused[#loc35, #loc36])
#loc157 = loc(fused[#loc40, #loc41])
#loc158 = loc(fused[#loc45, #loc46])
#loc159 = loc(fused[#loc47, #loc48])
#loc160 = loc(fused[#loc49, #loc50])
#loc161 = loc(fused[#loc51, #loc52])
#loc162 = loc(fused[#loc53, #loc50])
#loc163 = loc(fused[#loc64, #loc65])
#loc164 = loc(fused[#loc66, #loc67])
#loc166 = loc(fused[#loc70, #loc71])
#loc167 = loc(fused[#loc72, #loc73])
#loc168 = loc(fused[#loc74, #loc75])
#loc169 = loc(fused[#loc79, #loc80])
#loc170 = loc(fused[#loc84, #loc85])
#loc171 = loc(fused[#loc87, #loc88])
#loc172 = loc(fused[#loc89, #loc90])
#loc173 = loc(fused[#loc91, #loc88])
#loc174 = loc(fused[#loc102, #loc103])
#loc175 = loc(fused[#loc104, #loc105])
#loc176 = loc(fused[#loc106, #loc107])
#loc178 = loc(fused[#loc110, #loc111])
#loc179 = loc(fused[#loc112, #loc113])
#loc180 = loc(fused[#loc114, #loc115])
#loc181 = loc(fused[#loc119, #loc120])
#loc182 = loc(fused[#loc124, #loc125])
#loc183 = loc(fused[#loc126, #loc127])
#loc184 = loc(fused[#loc128, #loc129])
#loc185 = loc(fused[#loc130, #loc131])
#loc186 = loc(fused[#loc132, #loc129])
