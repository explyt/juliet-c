!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":83:10)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":83:14)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":83:20)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":83:32)
#loc125 = loc(fused[#loc49, #loc50])
#loc126 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc104)
  cir.func private @printIntLine(!s32i) loc(#loc105)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc9)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc9)
        cir.condition(%1) loc(#loc9)
      } do {
        cir.scope {
          %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc109)
          %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc110)
          %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc16)
          cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc111)
          cir.scope {
            %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
            %8 = cir.const #cir.int<2> : !s32i loc(#loc22)
            %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc113)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc23)
            %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc114)
            cir.if %11 {
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc25)
              %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc25)
              %14 = cir.const #cir.int<2> : !u32i loc(#loc25)
              %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc25)
              %16 = cir.const #cir.int<1> : !u32i loc(#loc25)
              %17 = cir.binop(add, %15, %16) : !u32i loc(#loc25)
              %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc26)
              %19 = cir.binop(sub, %17, %18) : !u32i loc(#loc116)
              cir.store %19, %0 : !u32i, !cir.ptr<!u32i> loc(#loc117)
            } loc(#loc115)
          } loc(#loc112)
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc28)
          %5 = cir.cast(integral, %4 : !u32i), !s32i loc(#loc28)
          cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc118)
          %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc31)
        } loc(#loc108)
        cir.break loc(#loc32)
      } loc(#loc107)
    } loc(#loc107)
    cir.return loc(#loc6)
  } loc(#loc106)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc34)
  } loc(#loc119)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc121)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc122)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc56)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.return %17 : !s32i loc(#loc129)
  } loc(#loc124)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc130)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc73)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc73)
        cir.condition(%1) loc(#loc73)
      } do {
        cir.scope {
          %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc134)
          %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc135)
          %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
          %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc80)
          cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc136)
          cir.scope {
            %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
            %8 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc138)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc87)
            %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc139)
            cir.if %11 {
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc89)
              %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc89)
              %14 = cir.const #cir.int<2> : !u32i loc(#loc89)
              %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc89)
              %16 = cir.const #cir.int<1> : !u32i loc(#loc89)
              %17 = cir.binop(add, %15, %16) : !u32i loc(#loc89)
              %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc90)
              %19 = cir.binop(sub, %17, %18) : !u32i loc(#loc141)
              cir.store %19, %0 : !u32i, !cir.ptr<!u32i> loc(#loc142)
            } loc(#loc140)
          } loc(#loc137)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc94)
            %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc95)
            %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc95)
            %10 = cir.cmp(gt, %7, %9) : !u32i, !cir.bool loc(#loc144)
            cir.if %10 {
              %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc97)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc98)
              cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
            } loc(#loc145)
          } loc(#loc143)
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc99)
          %5 = cir.cast(integral, %4 : !u32i), !s32i loc(#loc99)
          cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc146)
          %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc101)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc102)
        } loc(#loc133)
        cir.break loc(#loc103)
      } loc(#loc132)
    } loc(#loc132)
    cir.return loc(#loc70)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":20:1)
#loc6 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":38:1)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":22:5)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":37:5)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":22:11)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":24:9)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":35:9)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":25:13)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":25:22)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":26:13)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":26:17)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":27:27)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":27:13)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":27:32)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:13)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":31:13)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:17)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:26)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:31)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":29:13)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":30:31)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":30:42)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":30:17)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":33:25)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":33:13)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":34:26)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":34:13)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":36:9)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":69:1)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":72:1)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":71:5)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":71:11)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":88:15)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":90:15)
#loc45 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":93:15)
#loc46 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":95:15)
#loc47 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":83:1)
#loc48 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":98:1)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":84:1)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":86:27)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":86:22)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":86:5)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":88:5)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":89:5)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":89:63)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":90:5)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":93:5)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":94:5)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":94:62)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":95:5)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":97:12)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":97:5)
#loc67 = loc("/usr/include/stdlib.h":756:1)
#loc68 = loc("/usr/include/stdlib.h":756:70)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":45:1)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":67:1)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":47:5)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":66:5)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":47:11)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":49:9)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":64:9)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":50:13)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":50:22)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":51:13)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":51:17)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":52:27)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":52:13)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":52:32)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:13)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":56:13)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:17)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:26)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:31)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":54:13)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":55:31)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":55:42)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":55:17)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:13)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":61:13)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:17)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:31)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":59:13)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":60:17)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":60:22)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":62:25)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":62:13)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":63:26)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":63:13)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":65:9)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc7, #loc8])
#loc108 = loc(fused[#loc10, #loc11])
#loc109 = loc(fused[#loc12, #loc13])
#loc110 = loc(fused[#loc14, #loc15])
#loc111 = loc(fused[#loc17, #loc18])
#loc112 = loc(fused[#loc19, #loc20])
#loc113 = loc(fused[#loc21, #loc22])
#loc114 = loc(fused[#loc21, #loc23])
#loc115 = loc(fused[#loc24, #loc20])
#loc116 = loc(fused[#loc25, #loc26])
#loc117 = loc(fused[#loc27, #loc26])
#loc118 = loc(fused[#loc29, #loc28])
#loc119 = loc(fused[#loc33, #loc34])
#loc120 = loc(fused[#loc35, #loc36])
#loc121 = loc(fused[#loc37, #loc38])
#loc122 = loc(fused[#loc39, #loc40])
#loc123 = loc(fused[#loc41, #loc42])
#loc124 = loc(fused[#loc47, #loc48])
#loc127 = loc(fused[#loc58, #loc59])
#loc128 = loc(fused[#loc62, #loc63])
#loc129 = loc(fused[#loc66, #loc65])
#loc130 = loc(fused[#loc67, #loc68])
#loc131 = loc(fused[#loc69, #loc70])
#loc132 = loc(fused[#loc71, #loc72])
#loc133 = loc(fused[#loc74, #loc75])
#loc134 = loc(fused[#loc76, #loc77])
#loc135 = loc(fused[#loc78, #loc79])
#loc136 = loc(fused[#loc81, #loc82])
#loc137 = loc(fused[#loc83, #loc84])
#loc138 = loc(fused[#loc85, #loc86])
#loc139 = loc(fused[#loc85, #loc87])
#loc140 = loc(fused[#loc88, #loc84])
#loc141 = loc(fused[#loc89, #loc90])
#loc142 = loc(fused[#loc91, #loc90])
#loc143 = loc(fused[#loc92, #loc93])
#loc144 = loc(fused[#loc94, #loc95])
#loc145 = loc(fused[#loc96, #loc93])
#loc146 = loc(fused[#loc100, #loc99])
