!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":129:10)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":129:14)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":129:20)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":129:32)
#loc240 = loc(fused[#loc77, #loc78])
#loc241 = loc(fused[#loc79, #loc80])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc211)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc212)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc214)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc215)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc216)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc217)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc218)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc15)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc15)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc15)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc15)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc15)
    cir.store %11, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
    %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %13 = cir.const #cir.int<5> : !s32i loc(#loc20)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc221)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc222)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc24)
    %19 = cir.const #cir.int<100> : !s32i loc(#loc25)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc25)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc25)
    cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc223)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc29)
    %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc31)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc31)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc33)
    cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc224)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc225)
  ^bb5:  // pred: ^bb4
    %30 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc214)
    cir.store %30, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc214)
    %31 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc36)
    %32 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %33 = cir.call @strlen(%32) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc36)
    cir.store %33, %2 : !u64i, !cir.ptr<!u64i> loc(#loc226)
    cir.br ^bb6 loc(#loc227)
  ^bb6:  // pred: ^bb5
    %34 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc42)
    cir.store %35, %1 : !u64i, !cir.ptr<!u64i> loc(#loc228)
    cir.br ^bb7 loc(#loc227)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %36 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc44)
    %37 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc45)
    %38 = cir.cmp(lt, %36, %37) : !u64i, !cir.bool loc(#loc229)
    cir.brcond %38 ^bb8, ^bb12 loc(#loc46)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc230)
  ^bb9:  // pred: ^bb8
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc49)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %40 : !u64i), !cir.ptr<!s8i> loc(#loc50)
    %42 = cir.load %41 : !cir.ptr<!s8i>, !s8i loc(#loc48)
    %43 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc51)
    %44 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc52)
    %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc52)
    cir.store %42, %45 : !s8i, !cir.ptr<!s8i> loc(#loc231)
    cir.br ^bb10 loc(#loc41)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc41)
  ^bb11:  // pred: ^bb10
    %46 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc53)
    %47 = cir.unary(inc, %46) : !u64i, !u64i loc(#loc54)
    cir.store %47, %1 : !u64i, !cir.ptr<!u64i> loc(#loc232)
    cir.br ^bb7 loc(#loc227)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc41)
  ^bb13:  // pred: ^bb12
    %48 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc55)
    %50 = cir.const #cir.int<50> : !s32i loc(#loc56)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc56)
    %53 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc58)
    %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc58)
    cir.store %49, %54 : !s8i, !cir.ptr<!s8i> loc(#loc233)
    %55 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb14 loc(#loc35)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc6)
  } loc(#loc213)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc234)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc237)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc74)
  cir.func @main(%arg0: !s32i loc(fused[#loc77, #loc78]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc81)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc82)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc83)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc83)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc84)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc242)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06_good() : () -> () loc(#loc86)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc73)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06_bad() : () -> () loc(#loc90)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc74)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc244)
    cir.return %17 : !s32i loc(#loc244)
  } loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc95)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc246)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc247)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc248)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc250)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc106)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc106)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc106)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc106)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc106)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc106)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc106)
    cir.store %11, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
    %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %13 = cir.const #cir.int<5> : !s32i loc(#loc111)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc112)
    %15 = cir.cmp(ne, %13, %14) : !s32i, !cir.bool loc(#loc253)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc254)
  ^bb2:  // pred: ^bb1
    %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb4 loc(#loc114)
  ^bb3:  // pred: ^bb1
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc118)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc119)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc119)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc119)
    cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc255)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc123)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc123)
    %27 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc125)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc125)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc127)
    cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc256)
    cir.br ^bb4 loc(#loc110)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc257)
  ^bb6:  // pred: ^bb5
    %32 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc246)
    cir.store %32, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc246)
    %33 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc130)
    %34 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    %35 = cir.call @strlen(%34) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc130)
    cir.store %35, %2 : !u64i, !cir.ptr<!u64i> loc(#loc258)
    cir.br ^bb7 loc(#loc259)
  ^bb7:  // pred: ^bb6
    %36 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc136)
    cir.store %37, %1 : !u64i, !cir.ptr<!u64i> loc(#loc260)
    cir.br ^bb8 loc(#loc259)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %38 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc138)
    %39 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc139)
    %40 = cir.cmp(lt, %38, %39) : !u64i, !cir.bool loc(#loc261)
    cir.brcond %40 ^bb9, ^bb13 loc(#loc140)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc262)
  ^bb10:  // pred: ^bb9
    %41 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
    %42 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc143)
    %43 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %42 : !u64i), !cir.ptr<!s8i> loc(#loc144)
    %44 = cir.load %43 : !cir.ptr<!s8i>, !s8i loc(#loc142)
    %45 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc145)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc146)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc146)
    cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc263)
    cir.br ^bb11 loc(#loc135)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc135)
  ^bb12:  // pred: ^bb11
    %48 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc147)
    %49 = cir.unary(inc, %48) : !u64i, !u64i loc(#loc148)
    cir.store %49, %1 : !u64i, !cir.ptr<!u64i> loc(#loc264)
    cir.br ^bb8 loc(#loc259)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc135)
  ^bb14:  // pred: ^bb13
    %50 = cir.const #cir.int<0> : !s32i loc(#loc149)
    %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc149)
    %52 = cir.const #cir.int<50> : !s32i loc(#loc150)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %54 = cir.binop(sub, %52, %53) nsw : !s32i loc(#loc150)
    %55 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc152)
    %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc152)
    cir.store %51, %56 : !s8i, !cir.ptr<!s8i> loc(#loc265)
    %57 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    cir.br ^bb15 loc(#loc129)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc97)
  } loc(#loc245)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc267)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc268)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc269)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc270)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc271)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc165)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc165)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc165)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc165)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc165)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc165)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc165)
    cir.store %11, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
    %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc272)
    cir.br ^bb1 loc(#loc273)
  ^bb1:  // pred: ^bb0
    %13 = cir.const #cir.int<5> : !s32i loc(#loc170)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc171)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc274)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc275)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc173)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc174)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc175)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc175)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc175)
    cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc276)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc179)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc179)
    %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc181)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc181)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc183)
    cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc277)
    cir.br ^bb3 loc(#loc169)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc169)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc278)
  ^bb5:  // pred: ^bb4
    %30 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc267)
    cir.store %30, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc267)
    %31 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc186)
    %32 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
    %33 = cir.call @strlen(%32) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc186)
    cir.store %33, %2 : !u64i, !cir.ptr<!u64i> loc(#loc279)
    cir.br ^bb6 loc(#loc280)
  ^bb6:  // pred: ^bb5
    %34 = cir.const #cir.int<0> : !s32i loc(#loc192)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc192)
    cir.store %35, %1 : !u64i, !cir.ptr<!u64i> loc(#loc281)
    cir.br ^bb7 loc(#loc280)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %36 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc194)
    %37 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc195)
    %38 = cir.cmp(lt, %36, %37) : !u64i, !cir.bool loc(#loc282)
    cir.brcond %38 ^bb8, ^bb12 loc(#loc196)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc283)
  ^bb9:  // pred: ^bb8
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc199)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %40 : !u64i), !cir.ptr<!s8i> loc(#loc200)
    %42 = cir.load %41 : !cir.ptr<!s8i>, !s8i loc(#loc198)
    %43 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc201)
    %44 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc202)
    %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc202)
    cir.store %42, %45 : !s8i, !cir.ptr<!s8i> loc(#loc284)
    cir.br ^bb10 loc(#loc191)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc191)
  ^bb11:  // pred: ^bb10
    %46 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc203)
    %47 = cir.unary(inc, %46) : !u64i, !u64i loc(#loc204)
    cir.store %47, %1 : !u64i, !cir.ptr<!u64i> loc(#loc285)
    cir.br ^bb7 loc(#loc280)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc191)
  ^bb13:  // pred: ^bb12
    %48 = cir.const #cir.int<0> : !s32i loc(#loc205)
    %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc205)
    %50 = cir.const #cir.int<50> : !s32i loc(#loc206)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc207)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc206)
    %53 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc208)
    %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc208)
    cir.store %49, %54 : !s8i, !cir.ptr<!s8i> loc(#loc286)
    %55 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
    cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    cir.br ^bb14 loc(#loc185)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc156)
  } loc(#loc266)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":27:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":50:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":39:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":39:25)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":40:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":40:16)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":40:19)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":29:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":29:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":30:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":30:33)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":31:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":31:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":32:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":37:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":32:8)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":32:27)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":33:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":35:16)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":35:22)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":35:27)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":35:31)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":35:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":35:32)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":36:23)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":36:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":36:14)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":36:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":36:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":38:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":49:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":41:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":41:26)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":41:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":41:30)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":43:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":46:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":43:18)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":43:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":43:21)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":43:25)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":43:23)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":44:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":45:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":45:28)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":45:29)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":45:18)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":45:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":43:35)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":43:34)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":47:22)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":47:14)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":47:17)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":47:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":48:19)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":48:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":113:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":117:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":115:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":115:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":116:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":116:14)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":134:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":136:15)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":139:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":141:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":129:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":144:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":130:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":132:27)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":132:22)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":132:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":134:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":135:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":135:73)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":136:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":139:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":140:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":140:72)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":141:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":143:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":143:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":65:19)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":57:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":85:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":74:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":74:25)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":75:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":75:16)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":75:19)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":59:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":59:12)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":60:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":60:33)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":61:12)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":61:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":62:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":72:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":62:8)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":62:27)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":63:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":66:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":68:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":65:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":70:16)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":70:22)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":70:27)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":70:30)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":70:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":70:31)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":71:22)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":71:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":71:14)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":71:17)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":71:18)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":73:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":84:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":76:19)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":76:26)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":76:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":76:30)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":78:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":81:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":78:18)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":78:14)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":78:21)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":78:25)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":78:23)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":79:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":80:23)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":80:28)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":80:29)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":80:18)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":80:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":78:35)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":78:34)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":82:22)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":82:14)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":82:17)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":82:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":83:19)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":83:9)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":88:1)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":111:1)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":100:9)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":100:25)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":101:9)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":101:16)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":101:19)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":90:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":90:12)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":91:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":91:33)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":92:12)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":92:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":93:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":98:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":93:8)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":93:27)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":94:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":96:16)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":96:22)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":96:27)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":96:30)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":96:9)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":96:31)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":97:22)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":97:9)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":97:14)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":97:17)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":97:18)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":99:5)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":110:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":102:19)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":102:26)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":102:9)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":102:30)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":104:9)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":107:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":104:18)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":104:14)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":104:21)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":104:25)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":104:23)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":105:9)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":106:23)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":106:28)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":106:29)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":106:18)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":106:13)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":104:35)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":104:34)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":108:22)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":108:14)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":108:17)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":108:9)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":109:19)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c":109:9)
#loc211 = loc(fused[#loc1, #loc2])
#loc212 = loc(fused[#loc3, #loc4])
#loc213 = loc(fused[#loc5, #loc6])
#loc214 = loc(fused[#loc7, #loc8])
#loc215 = loc(fused[#loc9, #loc10])
#loc216 = loc(fused[#loc9, #loc11])
#loc217 = loc(fused[#loc12, #loc13])
#loc218 = loc(fused[#loc14, #loc15])
#loc219 = loc(fused[#loc17, #loc16])
#loc220 = loc(fused[#loc18, #loc19])
#loc221 = loc(fused[#loc20, #loc21])
#loc222 = loc(fused[#loc22, #loc19])
#loc223 = loc(fused[#loc27, #loc28])
#loc224 = loc(fused[#loc30, #loc29])
#loc225 = loc(fused[#loc34, #loc35])
#loc226 = loc(fused[#loc38, #loc39])
#loc227 = loc(fused[#loc40, #loc41])
#loc228 = loc(fused[#loc43, #loc42])
#loc229 = loc(fused[#loc44, #loc45])
#loc230 = loc(fused[#loc47, #loc41])
#loc231 = loc(fused[#loc52, #loc50])
#loc232 = loc(fused[#loc54, #loc53])
#loc233 = loc(fused[#loc58, #loc55])
#loc234 = loc(fused[#loc61, #loc62])
#loc235 = loc(fused[#loc63, #loc64])
#loc236 = loc(fused[#loc65, #loc66])
#loc237 = loc(fused[#loc67, #loc68])
#loc238 = loc(fused[#loc69, #loc70])
#loc239 = loc(fused[#loc75, #loc76])
#loc242 = loc(fused[#loc86, #loc87])
#loc243 = loc(fused[#loc90, #loc91])
#loc244 = loc(fused[#loc94, #loc93])
#loc245 = loc(fused[#loc96, #loc97])
#loc246 = loc(fused[#loc98, #loc99])
#loc247 = loc(fused[#loc100, #loc101])
#loc248 = loc(fused[#loc100, #loc102])
#loc249 = loc(fused[#loc103, #loc104])
#loc250 = loc(fused[#loc105, #loc106])
#loc251 = loc(fused[#loc108, #loc107])
#loc252 = loc(fused[#loc109, #loc110])
#loc253 = loc(fused[#loc111, #loc112])
#loc254 = loc(fused[#loc113, #loc114, #loc115, #loc110])
#loc255 = loc(fused[#loc121, #loc122])
#loc256 = loc(fused[#loc124, #loc123])
#loc257 = loc(fused[#loc128, #loc129])
#loc258 = loc(fused[#loc132, #loc133])
#loc259 = loc(fused[#loc134, #loc135])
#loc260 = loc(fused[#loc137, #loc136])
#loc261 = loc(fused[#loc138, #loc139])
#loc262 = loc(fused[#loc141, #loc135])
#loc263 = loc(fused[#loc146, #loc144])
#loc264 = loc(fused[#loc148, #loc147])
#loc265 = loc(fused[#loc152, #loc149])
#loc266 = loc(fused[#loc155, #loc156])
#loc267 = loc(fused[#loc157, #loc158])
#loc268 = loc(fused[#loc159, #loc160])
#loc269 = loc(fused[#loc159, #loc161])
#loc270 = loc(fused[#loc162, #loc163])
#loc271 = loc(fused[#loc164, #loc165])
#loc272 = loc(fused[#loc167, #loc166])
#loc273 = loc(fused[#loc168, #loc169])
#loc274 = loc(fused[#loc170, #loc171])
#loc275 = loc(fused[#loc172, #loc169])
#loc276 = loc(fused[#loc177, #loc178])
#loc277 = loc(fused[#loc180, #loc179])
#loc278 = loc(fused[#loc184, #loc185])
#loc279 = loc(fused[#loc188, #loc189])
#loc280 = loc(fused[#loc190, #loc191])
#loc281 = loc(fused[#loc193, #loc192])
#loc282 = loc(fused[#loc194, #loc195])
#loc283 = loc(fused[#loc197, #loc191])
#loc284 = loc(fused[#loc202, #loc200])
#loc285 = loc(fused[#loc204, #loc203])
#loc286 = loc(fused[#loc208, #loc205])
