!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc63)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc64)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc66)
    %1 = cir.alloca !cir.array<!s8i x 10>, !cir.ptr<!cir.array<!s8i x 10>>, ["dataBadBuffer"] {alignment = 1 : i64} loc(#loc67)
    %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["dataGoodBuffer"] {alignment = 1 : i64} loc(#loc68)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%4) loc(#loc15)
      } do {
        %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc16)
        cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc70)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc18)
        %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc18)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc20)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s8i>, %7 : !s32i), !cir.ptr<!s8i> loc(#loc21)
        cir.store %5, %8 : !s8i, !cir.ptr<!s8i> loc(#loc71)
        cir.break loc(#loc22)
      } loc(#loc69)
    } loc(#loc69)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc73)
      %4 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc73)
      cir.store %4, %3 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc73)
      %5 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc27)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc29)
      %8 = cir.call @strcpy(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc27)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    } loc(#loc72)
    cir.return loc(#loc6)
  } loc(#loc65)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc75)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc74)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc77)
    %1 = cir.alloca !cir.array<!s8i x 10>, !cir.ptr<!cir.array<!s8i x 10>>, ["dataBadBuffer"] {alignment = 1 : i64} loc(#loc78)
    %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["dataGoodBuffer"] {alignment = 1 : i64} loc(#loc79)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
        cir.condition(%4) loc(#loc46)
      } do {
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc47)
        cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc81)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc49)
        %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc49)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc51)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s8i>, %7 : !s32i), !cir.ptr<!s8i> loc(#loc52)
        cir.store %5, %8 : !s8i, !cir.ptr<!s8i> loc(#loc82)
        cir.break loc(#loc53)
      } loc(#loc80)
    } loc(#loc80)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc84)
      %4 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc84)
      cir.store %4, %3 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc84)
      %5 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc58)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc60)
      %8 = cir.call @strcpy(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc58)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    } loc(#loc83)
    cir.return loc(#loc37)
  } loc(#loc76)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":0:0)
#loc1 = loc("/usr/include/string.h":141:1)
#loc2 = loc("/usr/include/string.h":142:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":28:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":47:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":30:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":30:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":31:26)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":32:29)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":33:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":40:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":33:11)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":37:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":37:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":38:19)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":38:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":38:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":38:15)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":39:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":41:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":46:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":42:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":42:29)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":44:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":44:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":44:22)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":45:19)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":45:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":75:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":78:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":77:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":77:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":54:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":73:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":56:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":56:12)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":57:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":57:26)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":58:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":58:29)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":59:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":66:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":59:11)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":63:16)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":63:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":64:19)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":64:9)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":64:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":64:15)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":65:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":67:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":72:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":68:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":68:29)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":70:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":70:16)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":70:22)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":71:19)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c":71:9)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc3, #loc4])
#loc65 = loc(fused[#loc5, #loc6])
#loc66 = loc(fused[#loc7, #loc8])
#loc67 = loc(fused[#loc9, #loc10])
#loc68 = loc(fused[#loc11, #loc12])
#loc69 = loc(fused[#loc13, #loc14])
#loc70 = loc(fused[#loc17, #loc16])
#loc71 = loc(fused[#loc19, #loc18])
#loc72 = loc(fused[#loc23, #loc24])
#loc73 = loc(fused[#loc25, #loc26])
#loc74 = loc(fused[#loc32, #loc33])
#loc75 = loc(fused[#loc34, #loc35])
#loc76 = loc(fused[#loc36, #loc37])
#loc77 = loc(fused[#loc38, #loc39])
#loc78 = loc(fused[#loc40, #loc41])
#loc79 = loc(fused[#loc42, #loc43])
#loc80 = loc(fused[#loc44, #loc45])
#loc81 = loc(fused[#loc48, #loc47])
#loc82 = loc(fused[#loc50, #loc49])
#loc83 = loc(fused[#loc54, #loc55])
#loc84 = loc(fused[#loc56, #loc57])
