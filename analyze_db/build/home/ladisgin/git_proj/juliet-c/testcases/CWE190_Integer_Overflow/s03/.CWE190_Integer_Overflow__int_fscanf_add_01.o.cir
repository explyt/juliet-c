!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc69)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc71)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_add_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc73)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc74)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc16)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc70)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc17)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc16)
    cir.br ^bb1 loc(#loc76)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc20)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc22)
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc9)
  } loc(#loc72)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_add_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc78)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc79)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc77)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc82)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc37)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb1 loc(#loc85)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc41)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc43)
    cir.br ^bb2 loc(#loc40)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc30)
  } loc(#loc80)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc89)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc55)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc70)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc56)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc57)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc57)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc55)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc61)
    %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc92)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc93)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc65)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc67)
    cir.br ^bb4 loc(#loc63)
  ^bb3:  // pred: ^bb1
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb4 loc(#loc59)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc59)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc48)
  } loc(#loc87)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":28:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":34:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":31:9)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":31:29)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":24:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":26:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":28:12)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":31:22)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":32:22)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":32:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":75:1)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":79:1)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":77:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":77:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":78:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":78:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":41:1)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":53:1)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":50:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":50:29)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":43:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":43:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":45:12)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":45:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":47:12)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":47:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":48:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":52:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":50:22)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":51:22)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":51:9)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":71:19)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":56:1)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":73:1)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":66:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":66:29)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":58:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":58:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":60:12)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":60:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":62:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":62:12)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":62:19)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":64:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":72:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":64:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":64:16)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":65:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":68:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":70:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":66:22)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":67:22)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":67:9)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_add_01.c":71:9)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc6, #loc7])
#loc72 = loc(fused[#loc8, #loc9])
#loc73 = loc(fused[#loc10, #loc11])
#loc74 = loc(fused[#loc12, #loc13])
#loc75 = loc(fused[#loc15, #loc14])
#loc76 = loc(fused[#loc18, #loc19])
#loc77 = loc(fused[#loc23, #loc24])
#loc78 = loc(fused[#loc25, #loc26])
#loc79 = loc(fused[#loc27, #loc28])
#loc80 = loc(fused[#loc29, #loc30])
#loc81 = loc(fused[#loc31, #loc32])
#loc82 = loc(fused[#loc33, #loc34])
#loc83 = loc(fused[#loc36, #loc35])
#loc84 = loc(fused[#loc38, #loc37])
#loc85 = loc(fused[#loc39, #loc40])
#loc86 = loc(fused[#loc44, #loc45])
#loc87 = loc(fused[#loc47, #loc48])
#loc88 = loc(fused[#loc49, #loc50])
#loc89 = loc(fused[#loc51, #loc52])
#loc90 = loc(fused[#loc54, #loc53])
#loc91 = loc(fused[#loc58, #loc59])
#loc92 = loc(fused[#loc60, #loc61])
#loc93 = loc(fused[#loc62, #loc63, #loc64, #loc59])
