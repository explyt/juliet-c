!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":322:10)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":322:14)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":322:20)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":322:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc688 = loc(fused[#loc483, #loc484])
#loc689 = loc(fused[#loc485, #loc486])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc499)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc500)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc501)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc502)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc503)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc504)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc505)
  cir.func private @close(!s32i) -> !s32i loc(#loc506)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc507)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc508)
  cir.func private @printIntLine(!s32i) loc(#loc509)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc510)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc25)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc511)
  cir.func @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc513)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc514)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc33)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc35)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc515)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc517)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc518)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc519)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc520)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc521)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc44)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc519)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc46)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc520)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc51)
          %14 = cir.const #cir.int<1> : !u32i loc(#loc52)
          %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc52)
          %16 = cir.const #cir.int<6> : !u32i loc(#loc53)
          %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc53)
          %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
          cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc523)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc59)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc60)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc60)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc525)
            cir.if %62 {
              cir.break loc(#loc62)
            } loc(#loc526)
          } loc(#loc524)
          %19 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc527)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc65)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc528)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc529)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc70)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc70)
          %24 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc530)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc73)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc73)
          %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc531)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc77)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc77)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc78)
          %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc532)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %60 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc534)
            %61 = cir.const #cir.int<16> : !u64i loc(#loc535)
            %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc535)
            %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc89)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc90)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc536)
            cir.if %66 {
              cir.break loc(#loc92)
            } loc(#loc537)
          } loc(#loc533)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %60 = cir.const #cir.int<5> : !s32i loc(#loc96)
            %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc97)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc98)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc98)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc539)
            cir.if %64 {
              cir.break loc(#loc100)
            } loc(#loc540)
          } loc(#loc538)
          %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc101)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc102)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc103)
          %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc104)
          cir.store %36, %7 : !s32i, !cir.ptr<!s32i> loc(#loc541)
          cir.scope {
            %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc110)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc543)
            cir.if %62 {
              cir.break loc(#loc112)
            } loc(#loc544)
          } loc(#loc542)
          %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %38 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
          %40 = cir.const #cir.int<3> : !s32i loc(#loc115)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc115)
          %42 = cir.const #cir.int<4> : !u64i loc(#loc115)
          %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc115)
          %44 = cir.const #cir.int<2> : !s32i loc(#loc115)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc115)
          %46 = cir.binop(add, %43, %45) : !u64i loc(#loc115)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc116)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc116)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc545)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc117)
          %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc118)
          %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc118)
          cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc546)
          cir.scope {
            %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc124)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc124)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc548)
            %63 = cir.ternary(%62, true {
              %64 = cir.const #true loc(#loc125)
              cir.yield %64 : !cir.bool loc(#loc125)
            }, false {
              %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc126)
              %65 = cir.const #cir.int<0> : !s32i loc(#loc127)
              %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc549)
              %67 = cir.ternary(%66, true {
                %68 = cir.const #true loc(#loc125)
                cir.yield %68 : !cir.bool loc(#loc125)
              }, false {
                %68 = cir.const #false loc(#loc125)
                cir.yield %68 : !cir.bool loc(#loc125)
              }) : (!cir.bool) -> !cir.bool loc(#loc125)
              cir.yield %67 : !cir.bool loc(#loc125)
            }) : (!cir.bool) -> !cir.bool loc(#loc125)
            cir.if %63 {
              cir.break loc(#loc129)
            } loc(#loc550)
          } loc(#loc547)
          %53 = cir.const #cir.int<0> : !s8i loc(#loc130)
          %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc131)
          %55 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
          %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc132)
          cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc551)
          %57 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
          %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc134)
          cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc552)
          cir.yield loc(#loc50)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc137)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc137)
          cir.condition(%14) loc(#loc137)
        } loc(#loc522)
      } loc(#loc522)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc141)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc554)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc144)
        } loc(#loc555)
      } loc(#loc553)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc147)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc148)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc148)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc557)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc151)
        } loc(#loc558)
      } loc(#loc556)
    } loc(#loc516)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc560)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc560)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc562)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc563)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc162)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc163)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc163)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc564)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc565)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc162)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc566)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc563)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc169)
          %21 = cir.cmp(eq, %19, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc568)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc171)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc172)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc173)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc171)
          } loc(#loc569)
        } loc(#loc567)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc176)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc571)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc179)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc572)
            cir.condition(%22) loc(#loc572)
          } body {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc180)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc182)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc183)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc573)
            cir.yield loc(#loc175)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc185)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc574)
            cir.yield loc(#loc570)
          } loc(#loc570)
        } loc(#loc570)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc188)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc189)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc576)
          cir.if %21 {
            %22 = cir.const #cir.int<1> : !s32i loc(#loc193)
            %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc194)
            %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc195)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc196)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc578)
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc199)
              cir.store %26, %7 : !s32i, !cir.ptr<!s32i> loc(#loc580)
              cir.for : cond {
                %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc201)
                %28 = cir.const #cir.int<10> : !s32i loc(#loc202)
                %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc581)
                cir.condition(%29) loc(#loc581)
              } body {
                %27 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc203)
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc204)
                %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc205)
                %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc203)
                cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc206)
                cir.yield loc(#loc198)
              } step {
                %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc207)
                %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc208)
                cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc582)
                cir.yield loc(#loc579)
              } loc(#loc579)
            } loc(#loc579)
          } else {
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc25)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc25)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc209)
          } loc(#loc577)
        } loc(#loc575)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc210)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc211)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc210)
      } loc(#loc561)
    } loc(#loc559)
    cir.return loc(#loc29)
  } loc(#loc512)
  cir.func internal private @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc584)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc585)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc217)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc218)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc219)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc586)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc221)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc587)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc589)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc226)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc589)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc591)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc592)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc233)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc234)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc234)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc593)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc594)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc233)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc595)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc592)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc239)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc240)
          %22 = cir.cmp(eq, %20, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc597)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc242)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc243)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc244)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc242)
          } loc(#loc598)
        } loc(#loc596)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc247)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc600)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc249)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc250)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc601)
            cir.condition(%23) loc(#loc601)
          } body {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc251)
            %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc252)
            %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc253)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc254)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc602)
            cir.yield loc(#loc246)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc255)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc256)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc603)
            cir.yield loc(#loc599)
          } loc(#loc599)
        } loc(#loc599)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc259)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc260)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc605)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc264)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc265)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc266)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc267)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc607)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc270)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc609)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc273)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc610)
                cir.condition(%30) loc(#loc610)
              } body {
                %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc274)
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc275)
                %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc276)
                %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc274)
                cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc277)
                cir.yield loc(#loc269)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc279)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc611)
                cir.yield loc(#loc608)
              } loc(#loc608)
            } loc(#loc608)
          } else {
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc280)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc280)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc281)
          } loc(#loc606)
        } loc(#loc604)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc282)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc283)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc283)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc282)
      } loc(#loc590)
    } loc(#loc588)
    cir.return loc(#loc213)
  } loc(#loc583)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc284)
  cir.func internal private @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc613)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc614)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc290)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc291)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc292)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc615)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc617)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc618)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc619)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc620)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc621)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc301)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc301)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc619)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc303)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc303)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc620)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc308)
          %14 = cir.const #cir.int<1> : !u32i loc(#loc309)
          %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc309)
          %16 = cir.const #cir.int<6> : !u32i loc(#loc310)
          %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc310)
          %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc311)
          cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc623)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc316)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc317)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc317)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc625)
            cir.if %62 {
              cir.break loc(#loc319)
            } loc(#loc626)
          } loc(#loc624)
          %19 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc627)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc322)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc628)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc629)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc327)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc327)
          %24 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc630)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc329)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc329)
          %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc631)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc331)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc331)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc332)
          %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc632)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc337)
            %60 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc634)
            %61 = cir.const #cir.int<16> : !u64i loc(#loc635)
            %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc635)
            %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc342)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc343)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc343)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc636)
            cir.if %66 {
              cir.break loc(#loc345)
            } loc(#loc637)
          } loc(#loc633)
          cir.scope {
            %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc348)
            %60 = cir.const #cir.int<5> : !s32i loc(#loc349)
            %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc350)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc351)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc351)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc639)
            cir.if %64 {
              cir.break loc(#loc353)
            } loc(#loc640)
          } loc(#loc638)
          %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc354)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc355)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc356)
          %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc357)
          cir.store %36, %7 : !s32i, !cir.ptr<!s32i> loc(#loc641)
          cir.scope {
            %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc362)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc363)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc363)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc643)
            cir.if %62 {
              cir.break loc(#loc365)
            } loc(#loc644)
          } loc(#loc642)
          %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc366)
          %38 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc367)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc367)
          %40 = cir.const #cir.int<3> : !s32i loc(#loc368)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc368)
          %42 = cir.const #cir.int<4> : !u64i loc(#loc368)
          %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc368)
          %44 = cir.const #cir.int<2> : !s32i loc(#loc368)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc368)
          %46 = cir.binop(add, %43, %45) : !u64i loc(#loc368)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc369)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc369)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc645)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc370)
          %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc371)
          %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc371)
          cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc646)
          cir.scope {
            %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc376)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc377)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc377)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc648)
            %63 = cir.ternary(%62, true {
              %64 = cir.const #true loc(#loc378)
              cir.yield %64 : !cir.bool loc(#loc378)
            }, false {
              %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc379)
              %65 = cir.const #cir.int<0> : !s32i loc(#loc380)
              %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc649)
              %67 = cir.ternary(%66, true {
                %68 = cir.const #true loc(#loc378)
                cir.yield %68 : !cir.bool loc(#loc378)
              }, false {
                %68 = cir.const #false loc(#loc378)
                cir.yield %68 : !cir.bool loc(#loc378)
              }) : (!cir.bool) -> !cir.bool loc(#loc378)
              cir.yield %67 : !cir.bool loc(#loc378)
            }) : (!cir.bool) -> !cir.bool loc(#loc378)
            cir.if %63 {
              cir.break loc(#loc382)
            } loc(#loc650)
          } loc(#loc647)
          %53 = cir.const #cir.int<0> : !s8i loc(#loc383)
          %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc384)
          %55 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc385)
          %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc385)
          cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc651)
          %57 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc386)
          %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc387)
          cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc652)
          cir.yield loc(#loc307)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc390)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc390)
          cir.condition(%14) loc(#loc390)
        } loc(#loc622)
      } loc(#loc622)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc393)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc394)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc394)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc654)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc396)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc397)
        } loc(#loc655)
      } loc(#loc653)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc400)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc401)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc401)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc657)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc403)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc404)
        } loc(#loc658)
      } loc(#loc656)
    } loc(#loc616)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc660)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc408)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc408)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc660)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc662)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc663)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc415)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc416)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc416)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc664)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc665)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc415)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc666)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc663)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc421)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc422)
          %21 = cir.cmp(eq, %19, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc668)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc424)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc425)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc426)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc424)
          } loc(#loc669)
        } loc(#loc667)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc429)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc671)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc431)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc432)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc672)
            cir.condition(%22) loc(#loc672)
          } body {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc433)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc434)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc435)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc436)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc673)
            cir.yield loc(#loc428)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc437)
            %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc438)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc674)
            cir.yield loc(#loc670)
          } loc(#loc670)
        } loc(#loc670)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc441)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc442)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc676)
          %22 = cir.ternary(%21, true {
            %23 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc444)
            %24 = cir.const #cir.int<10> : !s32i loc(#loc445)
            %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc677)
            %26 = cir.ternary(%25, true {
              %27 = cir.const #true loc(#loc443)
              cir.yield %27 : !cir.bool loc(#loc443)
            }, false {
              %27 = cir.const #false loc(#loc443)
              cir.yield %27 : !cir.bool loc(#loc443)
            }) : (!cir.bool) -> !cir.bool loc(#loc443)
            cir.yield %26 : !cir.bool loc(#loc443)
          }, false {
            %23 = cir.const #false loc(#loc443)
            cir.yield %23 : !cir.bool loc(#loc443)
          }) : (!cir.bool) -> !cir.bool loc(#loc443)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc450)
            %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc451)
            %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc452)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc453)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc679)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc456)
              cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc681)
              cir.for : cond {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc458)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc459)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc682)
                cir.condition(%30) loc(#loc682)
              } body {
                %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc460)
                %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc461)
                %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc462)
                %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc460)
                cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc463)
                cir.yield loc(#loc455)
              } step {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc464)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc465)
                cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc683)
                cir.yield loc(#loc680)
              } loc(#loc680)
            } loc(#loc680)
          } else {
            %23 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc284)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc284)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc466)
          } loc(#loc678)
        } loc(#loc675)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc467)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc468)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc468)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc467)
      } loc(#loc661)
    } loc(#loc659)
    cir.return loc(#loc286)
  } loc(#loc612)
  cir.func @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33L7goodG2BEv() : () -> () loc(#loc471)
    cir.call @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33L7goodB2GEv() : () -> () loc(#loc472)
    cir.return loc(#loc470)
  } loc(#loc684)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc685)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc686)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc477)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc478)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc479)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc480)
  cir.func @main(%arg0: !s32i loc(fused[#loc483, #loc484]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc485, #loc486])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc688)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc689)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc482)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc487)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc487)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc488)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc489)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc489)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc490)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc477)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc477)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc491)
    cir.call @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_334goodEv() : () -> () loc(#loc492)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc478)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc478)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc493)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc479)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc479)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc494)
    cir.call @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_333badEv() : () -> () loc(#loc495)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc480)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc480)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc496)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc497)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc690)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc690)
    cir.return %15 : !s32i loc(#loc690)
  } loc(#loc687)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/include/stdlib.h":672:1)
#loc18 = loc("/usr/include/stdlib.h":672:45)
#loc19 = loc("/usr/include/stdlib.h":756:1)
#loc20 = loc("/usr/include/stdlib.h":756:70)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":146:27)
#loc26 = loc("/usr/include/stdlib.h":687:1)
#loc27 = loc("/usr/include/stdlib.h":687:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":47:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":151:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":49:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":49:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":50:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":50:20)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":52:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":52:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":52:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":53:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":121:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":58:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":58:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":59:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":59:28)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":60:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":60:31)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":61:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":61:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":62:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":62:41)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":63:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":106:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":73:35)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":73:44)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":73:57)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":73:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":73:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":73:68)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":74:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":77:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":74:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":74:33)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":75:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":76:17)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":78:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":78:21)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":78:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":78:33)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":78:47)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":78:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":78:48)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":79:34)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":79:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":80:39)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":80:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":81:38)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":81:32)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":81:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":81:46)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":82:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":85:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":82:22)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":82:54)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":82:55)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":82:64)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":82:78)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":82:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":82:84)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":83:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":84:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":86:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":89:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":86:24)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":86:38)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":86:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":86:57)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":87:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":88:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":90:35)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":90:49)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":90:55)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":90:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":90:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":90:59)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":91:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":94:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":91:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":91:33)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":92:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":93:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":96:31)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":96:45)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":96:58)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":96:76)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":96:79)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":96:26)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":96:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":96:80)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":97:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":100:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":97:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":97:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":97:44)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":97:47)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":97:61)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":98:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":99:17)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":102:39)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":102:25)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":102:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":104:25)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":104:20)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":104:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":104:36)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":106:16)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":107:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":110:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":107:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":107:29)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":108:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":109:26)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":109:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":111:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":114:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":111:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":111:29)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":112:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":113:26)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":113:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":122:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":150:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":123:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":123:20)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":124:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":149:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":125:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":125:17)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":126:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":126:58)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":126:35)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":126:42)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":126:47)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":126:57)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":127:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":127:43)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":127:17)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":127:27)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":127:33)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":127:34)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":127:40)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":127:39)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":129:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":132:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":129:22)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":129:18)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":129:25)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":129:29)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":131:29)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":131:17)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":131:24)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":131:25)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":129:34)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":129:33)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":135:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":147:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":135:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":135:25)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":136:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":143:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":145:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":137:32)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":137:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":137:24)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":137:28)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":139:17)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":142:17)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":139:25)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":139:21)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":139:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":139:32)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":141:34)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":141:41)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":141:42)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":141:21)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":139:37)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":139:36)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":146:17)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":148:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":148:18)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":158:1)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":196:1)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":160:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":160:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":161:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":161:20)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":163:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":163:12)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":163:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":166:12)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":166:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":167:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":195:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":168:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":168:20)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":169:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":194:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":170:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":170:17)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":171:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":171:58)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":171:35)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":171:42)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":171:47)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":171:57)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":172:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":172:43)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":172:17)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":172:27)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":172:33)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":172:34)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":172:40)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":172:39)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":174:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":177:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":174:22)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":174:18)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":174:25)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":174:29)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":176:29)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":176:17)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":176:24)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":176:25)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":174:34)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":174:33)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":180:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":192:13)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":180:17)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":180:25)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":181:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":188:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":190:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":182:32)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":182:17)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":182:24)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":182:28)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":184:17)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":187:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":184:25)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":184:21)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":184:28)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":184:32)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":186:34)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":186:41)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":186:42)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":186:21)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":184:37)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":184:36)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":191:27)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":191:17)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":193:13)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":193:18)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":297:27)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":199:1)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":302:1)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":201:5)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":201:9)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":202:5)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":202:20)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":204:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":204:12)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":204:5)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":205:5)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":273:5)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":210:9)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":210:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":211:9)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":211:28)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":212:9)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":212:31)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":213:9)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":213:31)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":214:9)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":214:41)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":215:9)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":258:17)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":225:35)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":225:44)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":225:57)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":225:28)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":225:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":225:68)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":226:13)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":229:13)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":226:17)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":226:33)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":227:13)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":228:17)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":230:20)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":230:21)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":230:30)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":230:33)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":230:47)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":230:13)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":230:48)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":231:34)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":231:13)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":232:39)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":232:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":233:38)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":233:32)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":233:13)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":233:46)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":234:13)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":237:13)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":234:22)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":234:54)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":234:55)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":234:64)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":234:78)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":234:17)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":234:84)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":235:13)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":236:17)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":238:13)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":241:13)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":238:24)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":238:38)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":238:17)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":238:57)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":239:13)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":240:17)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":242:35)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":242:49)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":242:55)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":242:28)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":242:13)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":242:59)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":243:13)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":246:13)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":243:17)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":243:33)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":244:13)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":245:17)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":248:31)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":248:45)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":248:58)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":248:76)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":248:79)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":248:26)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":248:13)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":248:80)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":249:13)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":252:13)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":249:17)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":249:31)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":249:44)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":249:47)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":249:61)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":250:13)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":251:17)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":254:39)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":254:25)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":254:13)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":256:25)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":256:20)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":256:13)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":256:36)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":258:16)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":259:9)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":262:9)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":259:13)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":259:29)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":260:9)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":261:26)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":261:13)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":263:9)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":266:9)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":263:13)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":263:29)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":264:9)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":265:26)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":265:13)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":274:5)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":301:5)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":275:9)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":275:20)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":276:9)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":300:9)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":277:13)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":277:17)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":278:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":278:58)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":278:35)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":278:42)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":278:47)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":278:57)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":279:13)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":279:43)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":279:17)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":279:27)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":279:33)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":279:34)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":279:40)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":279:39)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":281:13)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":284:13)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":281:22)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":281:18)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":281:25)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":281:29)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":283:29)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":283:17)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":283:24)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":283:25)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":281:34)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":281:33)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":286:13)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":298:13)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":286:17)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":286:25)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":286:27)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":286:30)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":286:38)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":286:40)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":287:13)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":294:13)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":296:13)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":288:32)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":288:17)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":288:24)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":288:28)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":290:17)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":293:17)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":290:25)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":290:21)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":290:28)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":290:32)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":292:34)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":292:41)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":292:42)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":292:21)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":290:37)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":290:36)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":297:17)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":299:13)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":299:18)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":304:1)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":308:1)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":306:5)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":307:5)
#loc473 = loc("/usr/include/stdlib.h":575:1)
#loc474 = loc("/usr/include/stdlib.h":575:41)
#loc475 = loc("/usr/include/time.h":76:1)
#loc476 = loc("/usr/include/time.h":76:38)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":327:15)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":329:15)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":332:15)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":334:15)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":322:1)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":337:1)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":323:1)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":325:27)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":325:22)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":325:5)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":327:5)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":328:5)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":329:5)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":332:5)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":333:5)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":334:5)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":336:12)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_33.cpp":336:5)
#loc499 = loc(fused[#loc1, #loc2])
#loc500 = loc(fused[#loc3, #loc4])
#loc501 = loc(fused[#loc5, #loc6])
#loc502 = loc(fused[#loc7, #loc8])
#loc503 = loc(fused[#loc9, #loc10])
#loc504 = loc(fused[#loc11, #loc12])
#loc505 = loc(fused[#loc13, #loc14])
#loc506 = loc(fused[#loc15, #loc16])
#loc507 = loc(fused[#loc17, #loc18])
#loc508 = loc(fused[#loc19, #loc20])
#loc509 = loc(fused[#loc21, #loc22])
#loc510 = loc(fused[#loc23, #loc24])
#loc511 = loc(fused[#loc26, #loc27])
#loc512 = loc(fused[#loc28, #loc29])
#loc513 = loc(fused[#loc30, #loc31])
#loc514 = loc(fused[#loc32, #loc33])
#loc515 = loc(fused[#loc36, #loc34])
#loc516 = loc(fused[#loc37, #loc38])
#loc517 = loc(fused[#loc39, #loc40])
#loc518 = loc(fused[#loc41, #loc42])
#loc519 = loc(fused[#loc43, #loc44])
#loc520 = loc(fused[#loc45, #loc46])
#loc521 = loc(fused[#loc47, #loc48])
#loc522 = loc(fused[#loc49, #loc50])
#loc523 = loc(fused[#loc55, #loc56])
#loc524 = loc(fused[#loc57, #loc58])
#loc525 = loc(fused[#loc59, #loc60])
#loc526 = loc(fused[#loc61, #loc58])
#loc527 = loc(fused[#loc63, #loc64])
#loc528 = loc(fused[#loc66, #loc67])
#loc529 = loc(fused[#loc68, #loc69])
#loc530 = loc(fused[#loc72, #loc70])
#loc531 = loc(fused[#loc76, #loc73])
#loc532 = loc(fused[#loc80, #loc81])
#loc533 = loc(fused[#loc82, #loc83])
#loc534 = loc(fused[#loc85, #loc86])
#loc535 = loc(fused[#loc87, #loc88])
#loc536 = loc(fused[#loc89, #loc90])
#loc537 = loc(fused[#loc91, #loc83])
#loc538 = loc(fused[#loc93, #loc94])
#loc539 = loc(fused[#loc97, #loc98])
#loc540 = loc(fused[#loc99, #loc94])
#loc541 = loc(fused[#loc105, #loc106])
#loc542 = loc(fused[#loc107, #loc108])
#loc543 = loc(fused[#loc109, #loc110])
#loc544 = loc(fused[#loc111, #loc108])
#loc545 = loc(fused[#loc115, #loc116])
#loc546 = loc(fused[#loc119, #loc120])
#loc547 = loc(fused[#loc121, #loc122])
#loc548 = loc(fused[#loc123, #loc124])
#loc549 = loc(fused[#loc126, #loc127])
#loc550 = loc(fused[#loc128, #loc122])
#loc551 = loc(fused[#loc132, #loc130])
#loc552 = loc(fused[#loc135, #loc136])
#loc553 = loc(fused[#loc138, #loc139])
#loc554 = loc(fused[#loc140, #loc141])
#loc555 = loc(fused[#loc142, #loc139])
#loc556 = loc(fused[#loc145, #loc146])
#loc557 = loc(fused[#loc147, #loc148])
#loc558 = loc(fused[#loc149, #loc146])
#loc559 = loc(fused[#loc152, #loc153])
#loc560 = loc(fused[#loc154, #loc155])
#loc561 = loc(fused[#loc156, #loc157])
#loc562 = loc(fused[#loc158, #loc159])
#loc563 = loc(fused[#loc160, #loc161])
#loc564 = loc(fused[#loc164, #loc165])
#loc565 = loc(fused[#loc163, #loc165])
#loc566 = loc(fused[#loc162, #loc161])
#loc567 = loc(fused[#loc166, #loc167])
#loc568 = loc(fused[#loc168, #loc169])
#loc569 = loc(fused[#loc170, #loc167])
#loc570 = loc(fused[#loc174, #loc175])
#loc571 = loc(fused[#loc177, #loc176])
#loc572 = loc(fused[#loc178, #loc179])
#loc573 = loc(fused[#loc181, #loc180])
#loc574 = loc(fused[#loc185, #loc184])
#loc575 = loc(fused[#loc186, #loc187])
#loc576 = loc(fused[#loc188, #loc189])
#loc577 = loc(fused[#loc190, #loc191, #loc192, #loc187])
#loc578 = loc(fused[#loc194, #loc193])
#loc579 = loc(fused[#loc197, #loc198])
#loc580 = loc(fused[#loc200, #loc199])
#loc581 = loc(fused[#loc201, #loc202])
#loc582 = loc(fused[#loc208, #loc207])
#loc583 = loc(fused[#loc212, #loc213])
#loc584 = loc(fused[#loc214, #loc215])
#loc585 = loc(fused[#loc216, #loc217])
#loc586 = loc(fused[#loc220, #loc218])
#loc587 = loc(fused[#loc222, #loc221])
#loc588 = loc(fused[#loc223, #loc224])
#loc589 = loc(fused[#loc225, #loc226])
#loc590 = loc(fused[#loc227, #loc228])
#loc591 = loc(fused[#loc229, #loc230])
#loc592 = loc(fused[#loc231, #loc232])
#loc593 = loc(fused[#loc235, #loc236])
#loc594 = loc(fused[#loc234, #loc236])
#loc595 = loc(fused[#loc233, #loc232])
#loc596 = loc(fused[#loc237, #loc238])
#loc597 = loc(fused[#loc239, #loc240])
#loc598 = loc(fused[#loc241, #loc238])
#loc599 = loc(fused[#loc245, #loc246])
#loc600 = loc(fused[#loc248, #loc247])
#loc601 = loc(fused[#loc249, #loc250])
#loc602 = loc(fused[#loc252, #loc251])
#loc603 = loc(fused[#loc256, #loc255])
#loc604 = loc(fused[#loc257, #loc258])
#loc605 = loc(fused[#loc259, #loc260])
#loc606 = loc(fused[#loc261, #loc262, #loc263, #loc258])
#loc607 = loc(fused[#loc265, #loc264])
#loc608 = loc(fused[#loc268, #loc269])
#loc609 = loc(fused[#loc271, #loc270])
#loc610 = loc(fused[#loc272, #loc273])
#loc611 = loc(fused[#loc279, #loc278])
#loc612 = loc(fused[#loc285, #loc286])
#loc613 = loc(fused[#loc287, #loc288])
#loc614 = loc(fused[#loc289, #loc290])
#loc615 = loc(fused[#loc293, #loc291])
#loc616 = loc(fused[#loc294, #loc295])
#loc617 = loc(fused[#loc296, #loc297])
#loc618 = loc(fused[#loc298, #loc299])
#loc619 = loc(fused[#loc300, #loc301])
#loc620 = loc(fused[#loc302, #loc303])
#loc621 = loc(fused[#loc304, #loc305])
#loc622 = loc(fused[#loc306, #loc307])
#loc623 = loc(fused[#loc312, #loc313])
#loc624 = loc(fused[#loc314, #loc315])
#loc625 = loc(fused[#loc316, #loc317])
#loc626 = loc(fused[#loc318, #loc315])
#loc627 = loc(fused[#loc320, #loc321])
#loc628 = loc(fused[#loc323, #loc324])
#loc629 = loc(fused[#loc325, #loc326])
#loc630 = loc(fused[#loc328, #loc327])
#loc631 = loc(fused[#loc330, #loc329])
#loc632 = loc(fused[#loc333, #loc334])
#loc633 = loc(fused[#loc335, #loc336])
#loc634 = loc(fused[#loc338, #loc339])
#loc635 = loc(fused[#loc340, #loc341])
#loc636 = loc(fused[#loc342, #loc343])
#loc637 = loc(fused[#loc344, #loc336])
#loc638 = loc(fused[#loc346, #loc347])
#loc639 = loc(fused[#loc350, #loc351])
#loc640 = loc(fused[#loc352, #loc347])
#loc641 = loc(fused[#loc358, #loc359])
#loc642 = loc(fused[#loc360, #loc361])
#loc643 = loc(fused[#loc362, #loc363])
#loc644 = loc(fused[#loc364, #loc361])
#loc645 = loc(fused[#loc368, #loc369])
#loc646 = loc(fused[#loc372, #loc373])
#loc647 = loc(fused[#loc374, #loc375])
#loc648 = loc(fused[#loc376, #loc377])
#loc649 = loc(fused[#loc379, #loc380])
#loc650 = loc(fused[#loc381, #loc375])
#loc651 = loc(fused[#loc385, #loc383])
#loc652 = loc(fused[#loc388, #loc389])
#loc653 = loc(fused[#loc391, #loc392])
#loc654 = loc(fused[#loc393, #loc394])
#loc655 = loc(fused[#loc395, #loc392])
#loc656 = loc(fused[#loc398, #loc399])
#loc657 = loc(fused[#loc400, #loc401])
#loc658 = loc(fused[#loc402, #loc399])
#loc659 = loc(fused[#loc405, #loc406])
#loc660 = loc(fused[#loc407, #loc408])
#loc661 = loc(fused[#loc409, #loc410])
#loc662 = loc(fused[#loc411, #loc412])
#loc663 = loc(fused[#loc413, #loc414])
#loc664 = loc(fused[#loc417, #loc418])
#loc665 = loc(fused[#loc416, #loc418])
#loc666 = loc(fused[#loc415, #loc414])
#loc667 = loc(fused[#loc419, #loc420])
#loc668 = loc(fused[#loc421, #loc422])
#loc669 = loc(fused[#loc423, #loc420])
#loc670 = loc(fused[#loc427, #loc428])
#loc671 = loc(fused[#loc430, #loc429])
#loc672 = loc(fused[#loc431, #loc432])
#loc673 = loc(fused[#loc434, #loc433])
#loc674 = loc(fused[#loc438, #loc437])
#loc675 = loc(fused[#loc439, #loc440])
#loc676 = loc(fused[#loc441, #loc442])
#loc677 = loc(fused[#loc444, #loc446])
#loc678 = loc(fused[#loc447, #loc448, #loc449, #loc440])
#loc679 = loc(fused[#loc451, #loc450])
#loc680 = loc(fused[#loc454, #loc455])
#loc681 = loc(fused[#loc457, #loc456])
#loc682 = loc(fused[#loc458, #loc459])
#loc683 = loc(fused[#loc465, #loc464])
#loc684 = loc(fused[#loc469, #loc470])
#loc685 = loc(fused[#loc473, #loc474])
#loc686 = loc(fused[#loc475, #loc476])
#loc687 = loc(fused[#loc481, #loc482])
#loc690 = loc(fused[#loc498, #loc497])
