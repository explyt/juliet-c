!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":23:71)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":23:78)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":56:75)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":56:82)
#loc160 = loc(fused[#loc7, #loc8])
#loc187 = loc(fused[#loc83, #loc84])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc157)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc158)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41_badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc160)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc162)
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc163)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc16)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc16)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc17)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc18)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc18)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc18)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc164)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc22)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc23)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc24)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc23)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc25)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc25)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc165)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc28)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc28)
        cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc167)
        cir.for : cond {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
          %31 = cir.const #cir.int<100> : !s32i loc(#loc31)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc31)
          %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc168)
          cir.condition(%33) loc(#loc32)
        } body {
          cir.scope {
            %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc34)
            %31 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc35)
            %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !u64i), !cir.ptr<!s8i> loc(#loc35)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc35)
            %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
            %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc38)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc170)
          } loc(#loc169)
          cir.yield loc(#loc27)
        } step {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc40)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc41)
          cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc171)
          cir.yield loc(#loc166)
        } loc(#loc166)
      } loc(#loc166)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc42)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc44)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc46)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc172)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc48)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc49)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc50)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc49)
    } loc(#loc161)
    cir.return loc(#loc6)
  } loc(#loc159)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc173)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc174)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc176)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc59)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc61)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc62)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc62)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc178)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc179)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc61)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc180)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
    cir.scope {
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc70)
      %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc183)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc72)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc73)
        %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc74)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
      } loc(#loc184)
    } loc(#loc182)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc75)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc78)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc185)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41_badSink(%14) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.return loc(#loc56)
  } loc(#loc175)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41_goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc83, #loc84])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc187)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc85)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc189)
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc190)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc92)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc93)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc94)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc95)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc94)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc94)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc191)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc98)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc98)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc99)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc100)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc99)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc101)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc101)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc192)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc104)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc104)
        cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc194)
        cir.for : cond {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc106)
          %31 = cir.const #cir.int<100> : !s32i loc(#loc107)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc107)
          %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc195)
          cir.condition(%33) loc(#loc108)
        } body {
          cir.scope {
            %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc110)
            %31 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc111)
            %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !u64i), !cir.ptr<!s8i> loc(#loc111)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc111)
            %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
            %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc113)
            %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc114)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc197)
          } loc(#loc196)
          cir.yield loc(#loc103)
        } step {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc116)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc117)
          cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc198)
          cir.yield loc(#loc193)
        } loc(#loc193)
      } loc(#loc193)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc118)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc118)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc120)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc121)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc120)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc122)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc199)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc124)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc125)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
    } loc(#loc188)
    cir.return loc(#loc82)
  } loc(#loc186)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc129)
    cir.return loc(#loc128)
  } loc(#loc200)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc135)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc137)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc138)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc138)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc205)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc206)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc207)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    cir.scope {
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc146)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc146)
      %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc210)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc148)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc150)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc148)
      } loc(#loc211)
    } loc(#loc209)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc151)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc151)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc153)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc154)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc212)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41_goodG2BSink(%14) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    cir.return loc(#loc132)
  } loc(#loc202)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":39:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":25:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":38:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":26:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":26:16)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":27:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":27:24)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":28:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":28:24)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":28:29)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":28:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":28:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":28:34)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":29:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":29:16)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":29:20)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":31:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":34:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":31:18)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":31:14)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":31:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":31:25)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":31:23)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":32:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":33:30)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":33:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":33:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":33:18)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":33:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":33:31)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":31:31)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":31:30)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":35:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":35:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":35:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":35:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":36:19)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":36:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":37:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":37:14)
#loc51 = loc("/usr/include/stdlib.h":672:1)
#loc52 = loc("/usr/include/stdlib.h":672:45)
#loc53 = loc("/usr/include/stdlib.h":756:1)
#loc54 = loc("/usr/include/stdlib.h":756:70)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":41:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":50:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":43:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":43:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":44:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":44:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":46:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":46:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":46:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":46:41)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":46:42)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":46:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":47:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":47:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":47:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":47:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":47:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":47:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":47:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":47:29)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":48:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":48:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":48:10)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":48:11)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":49:70)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":49:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":56:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":72:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":57:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":58:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":71:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":59:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":59:16)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":60:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":60:24)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":61:16)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":61:24)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":61:29)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":61:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":61:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":61:34)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":62:25)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":62:16)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":62:20)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":62:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":64:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":67:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":64:18)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":64:14)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":64:21)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":64:25)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":64:23)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":65:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":66:30)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":66:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":66:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":66:18)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":66:19)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":66:31)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":64:31)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":64:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":68:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":68:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":68:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":68:18)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":68:19)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":69:19)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":69:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":70:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":70:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":86:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":89:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":88:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":88:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":75:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":84:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":77:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":77:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":78:12)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":78:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":80:20)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":80:27)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":80:31)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":80:42)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":80:43)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":80:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":81:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":81:33)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":81:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":81:17)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":81:23)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":81:24)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":81:30)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":81:29)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":82:15)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":82:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":82:10)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":82:11)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":83:74)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c":83:5)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc161 = loc(fused[#loc10, #loc11])
#loc162 = loc(fused[#loc12, #loc13])
#loc163 = loc(fused[#loc14, #loc15])
#loc164 = loc(fused[#loc20, #loc21])
#loc165 = loc(fused[#loc25, #loc22])
#loc166 = loc(fused[#loc26, #loc27])
#loc167 = loc(fused[#loc29, #loc28])
#loc168 = loc(fused[#loc30, #loc31])
#loc169 = loc(fused[#loc33, #loc27])
#loc170 = loc(fused[#loc36, #loc39])
#loc171 = loc(fused[#loc41, #loc40])
#loc172 = loc(fused[#loc43, #loc42])
#loc173 = loc(fused[#loc51, #loc52])
#loc174 = loc(fused[#loc53, #loc54])
#loc175 = loc(fused[#loc55, #loc56])
#loc176 = loc(fused[#loc57, #loc58])
#loc177 = loc(fused[#loc60, #loc59])
#loc178 = loc(fused[#loc63, #loc64])
#loc179 = loc(fused[#loc62, #loc64])
#loc180 = loc(fused[#loc61, #loc65])
#loc181 = loc(fused[#loc66, #loc65])
#loc182 = loc(fused[#loc67, #loc68])
#loc183 = loc(fused[#loc69, #loc70])
#loc184 = loc(fused[#loc71, #loc68])
#loc185 = loc(fused[#loc76, #loc75])
#loc186 = loc(fused[#loc81, #loc82])
#loc188 = loc(fused[#loc86, #loc87])
#loc189 = loc(fused[#loc88, #loc89])
#loc190 = loc(fused[#loc90, #loc91])
#loc191 = loc(fused[#loc96, #loc97])
#loc192 = loc(fused[#loc101, #loc98])
#loc193 = loc(fused[#loc102, #loc103])
#loc194 = loc(fused[#loc105, #loc104])
#loc195 = loc(fused[#loc106, #loc107])
#loc196 = loc(fused[#loc109, #loc103])
#loc197 = loc(fused[#loc112, #loc115])
#loc198 = loc(fused[#loc117, #loc116])
#loc199 = loc(fused[#loc119, #loc118])
#loc200 = loc(fused[#loc127, #loc128])
#loc201 = loc(fused[#loc129, #loc130])
#loc202 = loc(fused[#loc131, #loc132])
#loc203 = loc(fused[#loc133, #loc134])
#loc204 = loc(fused[#loc136, #loc135])
#loc205 = loc(fused[#loc139, #loc140])
#loc206 = loc(fused[#loc138, #loc140])
#loc207 = loc(fused[#loc137, #loc141])
#loc208 = loc(fused[#loc142, #loc141])
#loc209 = loc(fused[#loc143, #loc144])
#loc210 = loc(fused[#loc145, #loc146])
#loc211 = loc(fused[#loc147, #loc144])
#loc212 = loc(fused[#loc152, #loc151])
