!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc117 = loc("CWE510_Trapdoor__network_listen_08.c":121:10)
#loc118 = loc("CWE510_Trapdoor__network_listen_08.c":121:14)
#loc119 = loc("CWE510_Trapdoor__network_listen_08.c":121:20)
#loc120 = loc("CWE510_Trapdoor__network_listen_08.c":121:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc182 = loc(fused[#loc117, #loc118])
#loc183 = loc(fused[#loc119, #loc120])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc135)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc136)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc137)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc138)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc139)
  cir.func private @close(!s32i) -> !s32i loc(#loc140)
  cir.func no_proto @CWE510_Trapdoor__network_listen_08_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc143)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc17)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc146)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc147)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc148)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc25)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc25)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc147)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc27)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc27)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc148)
          cir.scope {
            cir.do {
              %10 = cir.const #cir.int<2> : !s32i loc(#loc30)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc31)
              %12 = cir.const #cir.int<6> : !s32i loc(#loc32)
              %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc33)
              cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc150)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc38)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc39)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc39)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc152)
                cir.if %35 {
                  cir.break loc(#loc41)
                } loc(#loc153)
              } loc(#loc151)
              %14 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc154)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc44)
              %16 = cir.const #cir.int<16> : !u64i loc(#loc155)
              cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc156)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc49)
              %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc49)
              %19 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc50)
              cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc157)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc52)
              %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc52)
              %22 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc53)
              %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc54)
              cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc158)
              %24 = cir.const #cir.int<30000> : !s32i loc(#loc56)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc56)
              %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc57)
              %27 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
              cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc159)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc63)
                %33 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc161)
                %34 = cir.const #cir.int<16> : !u64i loc(#loc162)
                %35 = cir.cast(integral, %34 : !u64i), !u32i loc(#loc162)
                %36 = cir.call @bind(%32, %33, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc68)
                %37 = cir.const #cir.int<1> : !s32i loc(#loc69)
                %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc69)
                %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc163)
                cir.if %39 {
                  cir.break loc(#loc71)
                } loc(#loc164)
              } loc(#loc160)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc74)
                %33 = cir.const #cir.int<5> : !s32i loc(#loc75)
                %34 = cir.call @listen(%32, %33) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc76)
                %35 = cir.const #cir.int<1> : !s32i loc(#loc77)
                %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc77)
                %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc166)
                cir.if %37 {
                  cir.break loc(#loc79)
                } loc(#loc167)
              } loc(#loc165)
              %28 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc80)
              %29 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc81)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc82)
              %31 = cir.call @accept(%28, %29, %30) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc83)
              cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc168)
              cir.scope {
                %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc89)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc89)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc170)
                cir.if %35 {
                  cir.break loc(#loc91)
                } loc(#loc171)
              } loc(#loc169)
              cir.yield loc(#loc29)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc92)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc92)
              cir.condition(%11) loc(#loc92)
            } loc(#loc149)
          } loc(#loc149)
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc96)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc96)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc173)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc99)
            } loc(#loc174)
          } loc(#loc172)
          cir.scope {
            %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc103)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc103)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc176)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc105)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc106)
            } loc(#loc177)
          } loc(#loc175)
        } loc(#loc145)
      } loc(#loc144)
    } loc(#loc142)
    cir.return loc(#loc14)
  } loc(#loc141)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc178)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc179)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc114)
  cir.func @main(%arg0: !s32i loc(fused[#loc117, #loc118]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc119, #loc120])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc183)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc116)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc121)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc122)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc123)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc123)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc124)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc113)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc113)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    %8 = cir.get_global @CWE510_Trapdoor__network_listen_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call @CWE510_Trapdoor__network_listen_08_bad() : () -> () loc(#loc126)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc114)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc114)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc129)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    cir.return %12 : !s32i loc(#loc185)
  } loc(#loc181)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc133)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    cir.return %2 : !s32i loc(#loc187)
  } loc(#loc186)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_08.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/unistd.h":358:1)
#loc12 = loc("/usr/include/unistd.h":358:27)
#loc13 = loc("CWE510_Trapdoor__network_listen_08.c":47:1)
#loc14 = loc("CWE510_Trapdoor__network_listen_08.c":110:1)
#loc15 = loc("CWE510_Trapdoor__network_listen_08.c":49:5)
#loc16 = loc("CWE510_Trapdoor__network_listen_08.c":109:5)
#loc17 = loc("CWE510_Trapdoor__network_listen_08.c":49:8)
#loc18 = loc("CWE510_Trapdoor__network_listen_08.c":49:26)
#loc19 = loc("CWE510_Trapdoor__network_listen_08.c":50:5)
#loc20 = loc("CWE510_Trapdoor__network_listen_08.c":51:9)
#loc21 = loc("CWE510_Trapdoor__network_listen_08.c":108:9)
#loc22 = loc("CWE510_Trapdoor__network_listen_08.c":56:13)
#loc23 = loc("CWE510_Trapdoor__network_listen_08.c":56:32)
#loc24 = loc("CWE510_Trapdoor__network_listen_08.c":57:13)
#loc25 = loc("CWE510_Trapdoor__network_listen_08.c":57:35)
#loc26 = loc("CWE510_Trapdoor__network_listen_08.c":58:13)
#loc27 = loc("CWE510_Trapdoor__network_listen_08.c":58:35)
#loc28 = loc("CWE510_Trapdoor__network_listen_08.c":59:13)
#loc29 = loc("CWE510_Trapdoor__network_listen_08.c":93:21)
#loc30 = loc("CWE510_Trapdoor__network_listen_08.c":68:39)
#loc31 = loc("CWE510_Trapdoor__network_listen_08.c":68:48)
#loc32 = loc("CWE510_Trapdoor__network_listen_08.c":68:61)
#loc33 = loc("CWE510_Trapdoor__network_listen_08.c":68:32)
#loc34 = loc("CWE510_Trapdoor__network_listen_08.c":68:17)
#loc35 = loc("CWE510_Trapdoor__network_listen_08.c":68:72)
#loc36 = loc("CWE510_Trapdoor__network_listen_08.c":69:17)
#loc37 = loc("CWE510_Trapdoor__network_listen_08.c":72:17)
#loc38 = loc("CWE510_Trapdoor__network_listen_08.c":69:21)
#loc39 = loc("CWE510_Trapdoor__network_listen_08.c":69:37)
#loc40 = loc("CWE510_Trapdoor__network_listen_08.c":70:17)
#loc41 = loc("CWE510_Trapdoor__network_listen_08.c":71:21)
#loc42 = loc("CWE510_Trapdoor__network_listen_08.c":73:24)
#loc43 = loc("CWE510_Trapdoor__network_listen_08.c":73:25)
#loc44 = loc("CWE510_Trapdoor__network_listen_08.c":73:34)
#loc45 = loc("CWE510_Trapdoor__network_listen_08.c":73:37)
#loc46 = loc("CWE510_Trapdoor__network_listen_08.c":73:51)
#loc47 = loc("CWE510_Trapdoor__network_listen_08.c":73:17)
#loc48 = loc("CWE510_Trapdoor__network_listen_08.c":73:52)
#loc49 = loc("CWE510_Trapdoor__network_listen_08.c":74:38)
#loc50 = loc("/usr/include/netinet/in.h":249:5)
#loc51 = loc("CWE510_Trapdoor__network_listen_08.c":74:17)
#loc52 = loc("CWE510_Trapdoor__network_listen_08.c":75:43)
#loc53 = loc("/usr/include/netinet/in.h":251:20)
#loc54 = loc("/usr/include/netinet/in.h":33:15)
#loc55 = loc("CWE510_Trapdoor__network_listen_08.c":75:17)
#loc56 = loc("CWE510_Trapdoor__network_listen_08.c":76:42)
#loc57 = loc("CWE510_Trapdoor__network_listen_08.c":76:36)
#loc58 = loc("/usr/include/netinet/in.h":250:15)
#loc59 = loc("CWE510_Trapdoor__network_listen_08.c":76:17)
#loc60 = loc("CWE510_Trapdoor__network_listen_08.c":76:47)
#loc61 = loc("CWE510_Trapdoor__network_listen_08.c":77:17)
#loc62 = loc("CWE510_Trapdoor__network_listen_08.c":80:17)
#loc63 = loc("CWE510_Trapdoor__network_listen_08.c":77:26)
#loc64 = loc("CWE510_Trapdoor__network_listen_08.c":77:58)
#loc65 = loc("CWE510_Trapdoor__network_listen_08.c":77:59)
#loc66 = loc("CWE510_Trapdoor__network_listen_08.c":77:68)
#loc67 = loc("CWE510_Trapdoor__network_listen_08.c":77:82)
#loc68 = loc("CWE510_Trapdoor__network_listen_08.c":77:21)
#loc69 = loc("CWE510_Trapdoor__network_listen_08.c":77:88)
#loc70 = loc("CWE510_Trapdoor__network_listen_08.c":78:17)
#loc71 = loc("CWE510_Trapdoor__network_listen_08.c":79:21)
#loc72 = loc("CWE510_Trapdoor__network_listen_08.c":81:17)
#loc73 = loc("CWE510_Trapdoor__network_listen_08.c":84:17)
#loc74 = loc("CWE510_Trapdoor__network_listen_08.c":81:28)
#loc75 = loc("CWE510_Trapdoor__network_listen_08.c":81:42)
#loc76 = loc("CWE510_Trapdoor__network_listen_08.c":81:21)
#loc77 = loc("CWE510_Trapdoor__network_listen_08.c":81:48)
#loc78 = loc("CWE510_Trapdoor__network_listen_08.c":82:17)
#loc79 = loc("CWE510_Trapdoor__network_listen_08.c":83:21)
#loc80 = loc("CWE510_Trapdoor__network_listen_08.c":86:39)
#loc81 = loc("CWE510_Trapdoor__network_listen_08.c":86:53)
#loc82 = loc("CWE510_Trapdoor__network_listen_08.c":86:59)
#loc83 = loc("CWE510_Trapdoor__network_listen_08.c":86:32)
#loc84 = loc("CWE510_Trapdoor__network_listen_08.c":86:17)
#loc85 = loc("CWE510_Trapdoor__network_listen_08.c":86:63)
#loc86 = loc("CWE510_Trapdoor__network_listen_08.c":87:17)
#loc87 = loc("CWE510_Trapdoor__network_listen_08.c":90:17)
#loc88 = loc("CWE510_Trapdoor__network_listen_08.c":87:21)
#loc89 = loc("CWE510_Trapdoor__network_listen_08.c":87:37)
#loc90 = loc("CWE510_Trapdoor__network_listen_08.c":88:17)
#loc91 = loc("CWE510_Trapdoor__network_listen_08.c":89:21)
#loc92 = loc("CWE510_Trapdoor__network_listen_08.c":93:20)
#loc93 = loc("CWE510_Trapdoor__network_listen_08.c":94:13)
#loc94 = loc("CWE510_Trapdoor__network_listen_08.c":97:13)
#loc95 = loc("CWE510_Trapdoor__network_listen_08.c":94:17)
#loc96 = loc("CWE510_Trapdoor__network_listen_08.c":94:33)
#loc97 = loc("CWE510_Trapdoor__network_listen_08.c":95:13)
#loc98 = loc("CWE510_Trapdoor__network_listen_08.c":96:30)
#loc99 = loc("CWE510_Trapdoor__network_listen_08.c":96:17)
#loc100 = loc("CWE510_Trapdoor__network_listen_08.c":98:13)
#loc101 = loc("CWE510_Trapdoor__network_listen_08.c":101:13)
#loc102 = loc("CWE510_Trapdoor__network_listen_08.c":98:17)
#loc103 = loc("CWE510_Trapdoor__network_listen_08.c":98:33)
#loc104 = loc("CWE510_Trapdoor__network_listen_08.c":99:13)
#loc105 = loc("CWE510_Trapdoor__network_listen_08.c":100:30)
#loc106 = loc("CWE510_Trapdoor__network_listen_08.c":100:17)
#loc107 = loc("/usr/include/stdlib.h":575:1)
#loc108 = loc("/usr/include/stdlib.h":575:41)
#loc109 = loc("/usr/include/time.h":76:1)
#loc110 = loc("/usr/include/time.h":76:38)
#loc111 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc112 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc113 = loc("CWE510_Trapdoor__network_listen_08.c":126:15)
#loc114 = loc("CWE510_Trapdoor__network_listen_08.c":128:15)
#loc115 = loc("CWE510_Trapdoor__network_listen_08.c":121:1)
#loc116 = loc("CWE510_Trapdoor__network_listen_08.c":131:1)
#loc121 = loc("CWE510_Trapdoor__network_listen_08.c":122:1)
#loc122 = loc("CWE510_Trapdoor__network_listen_08.c":124:27)
#loc123 = loc("CWE510_Trapdoor__network_listen_08.c":124:22)
#loc124 = loc("CWE510_Trapdoor__network_listen_08.c":124:5)
#loc125 = loc("CWE510_Trapdoor__network_listen_08.c":126:5)
#loc126 = loc("CWE510_Trapdoor__network_listen_08.c":127:5)
#loc127 = loc("CWE510_Trapdoor__network_listen_08.c":127:44)
#loc128 = loc("CWE510_Trapdoor__network_listen_08.c":128:5)
#loc129 = loc("CWE510_Trapdoor__network_listen_08.c":130:12)
#loc130 = loc("CWE510_Trapdoor__network_listen_08.c":130:5)
#loc131 = loc("CWE510_Trapdoor__network_listen_08.c":40:1)
#loc132 = loc("CWE510_Trapdoor__network_listen_08.c":43:1)
#loc133 = loc("CWE510_Trapdoor__network_listen_08.c":42:12)
#loc134 = loc("CWE510_Trapdoor__network_listen_08.c":42:5)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc5, #loc6])
#loc138 = loc(fused[#loc7, #loc8])
#loc139 = loc(fused[#loc9, #loc10])
#loc140 = loc(fused[#loc11, #loc12])
#loc141 = loc(fused[#loc13, #loc14])
#loc142 = loc(fused[#loc15, #loc16])
#loc143 = loc(fused[#loc17, #loc18])
#loc144 = loc(fused[#loc19, #loc16])
#loc145 = loc(fused[#loc20, #loc21])
#loc146 = loc(fused[#loc22, #loc23])
#loc147 = loc(fused[#loc24, #loc25])
#loc148 = loc(fused[#loc26, #loc27])
#loc149 = loc(fused[#loc28, #loc29])
#loc150 = loc(fused[#loc34, #loc35])
#loc151 = loc(fused[#loc36, #loc37])
#loc152 = loc(fused[#loc38, #loc39])
#loc153 = loc(fused[#loc40, #loc37])
#loc154 = loc(fused[#loc42, #loc43])
#loc155 = loc(fused[#loc45, #loc46])
#loc156 = loc(fused[#loc47, #loc48])
#loc157 = loc(fused[#loc51, #loc49])
#loc158 = loc(fused[#loc55, #loc52])
#loc159 = loc(fused[#loc59, #loc60])
#loc160 = loc(fused[#loc61, #loc62])
#loc161 = loc(fused[#loc64, #loc65])
#loc162 = loc(fused[#loc66, #loc67])
#loc163 = loc(fused[#loc68, #loc69])
#loc164 = loc(fused[#loc70, #loc62])
#loc165 = loc(fused[#loc72, #loc73])
#loc166 = loc(fused[#loc76, #loc77])
#loc167 = loc(fused[#loc78, #loc73])
#loc168 = loc(fused[#loc84, #loc85])
#loc169 = loc(fused[#loc86, #loc87])
#loc170 = loc(fused[#loc88, #loc89])
#loc171 = loc(fused[#loc90, #loc87])
#loc172 = loc(fused[#loc93, #loc94])
#loc173 = loc(fused[#loc95, #loc96])
#loc174 = loc(fused[#loc97, #loc94])
#loc175 = loc(fused[#loc100, #loc101])
#loc176 = loc(fused[#loc102, #loc103])
#loc177 = loc(fused[#loc104, #loc101])
#loc178 = loc(fused[#loc107, #loc108])
#loc179 = loc(fused[#loc109, #loc110])
#loc180 = loc(fused[#loc111, #loc112])
#loc181 = loc(fused[#loc115, #loc116])
#loc184 = loc(fused[#loc126, #loc127])
#loc185 = loc(fused[#loc130, #loc129])
#loc186 = loc(fused[#loc131, #loc132])
#loc187 = loc(fused[#loc134, #loc133])
