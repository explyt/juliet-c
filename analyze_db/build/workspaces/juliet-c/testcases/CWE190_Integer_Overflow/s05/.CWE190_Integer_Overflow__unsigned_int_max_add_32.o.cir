!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc114)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc117)
    %2 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc118)
    cir.store %0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc117)
    cir.store %0, %2 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc118)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc11)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc119)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc121)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc16)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc17)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc121)
      %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc18)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc18)
      %10 = cir.const #cir.int<2> : !u32i loc(#loc18)
      %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc18)
      %12 = cir.const #cir.int<1> : !u32i loc(#loc18)
      %13 = cir.binop(add, %11, %12) : !u32i loc(#loc18)
      cir.store %13, %5 : !u32i, !cir.ptr<!u32i> loc(#loc122)
      %14 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc20)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc21)
      cir.store %14, %15 : !u32i, !cir.ptr<!u32i> loc(#loc123)
    } loc(#loc120)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc26)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc27)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc125)
      cir.scope {
        %8 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
        %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc32)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc31)
        %12 = cir.binop(add, %9, %11) : !u32i loc(#loc128)
        cir.store %12, %8 : !u32i, !cir.ptr<!u32i> loc(#loc127)
        %13 = cir.load %8 : !cir.ptr<!u32i>, !u32i loc(#loc33)
        cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc34)
      } loc(#loc126)
    } loc(#loc124)
    cir.return loc(#loc4)
  } loc(#loc115)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc131)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc129)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc134)
    %2 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc135)
    cir.store %0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc134)
    cir.store %0, %2 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc135)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc49)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc136)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc138)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc54)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc55)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc138)
      %8 = cir.const #cir.int<2> : !s32i loc(#loc56)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc56)
      cir.store %9, %5 : !u32i, !cir.ptr<!u32i> loc(#loc139)
      %10 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc58)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc59)
      cir.store %10, %11 : !u32i, !cir.ptr<!u32i> loc(#loc140)
    } loc(#loc137)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc142)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc64)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc65)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc142)
      cir.scope {
        %8 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc144)
        %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc70)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc69)
        %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc69)
        %12 = cir.binop(add, %9, %11) : !u32i loc(#loc145)
        cir.store %12, %8 : !u32i, !cir.ptr<!u32i> loc(#loc144)
        %13 = cir.load %8 : !cir.ptr<!u32i>, !u32i loc(#loc71)
        cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc72)
      } loc(#loc143)
    } loc(#loc141)
    cir.return loc(#loc42)
  } loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc149)
    %2 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc150)
    cir.store %0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc149)
    cir.store %0, %2 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc150)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc84)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc151)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc153)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc89)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc90)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc153)
      %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc91)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc91)
      %10 = cir.const #cir.int<2> : !u32i loc(#loc91)
      %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc91)
      %12 = cir.const #cir.int<1> : !u32i loc(#loc91)
      %13 = cir.binop(add, %11, %12) : !u32i loc(#loc91)
      cir.store %13, %5 : !u32i, !cir.ptr<!u32i> loc(#loc154)
      %14 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc93)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc94)
      cir.store %14, %15 : !u32i, !cir.ptr<!u32i> loc(#loc155)
    } loc(#loc152)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc157)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc99)
      %7 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc100)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc157)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc103)
        %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
        %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc104)
        %11 = cir.const #cir.int<2> : !u32i loc(#loc104)
        %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc104)
        %13 = cir.const #cir.int<1> : !u32i loc(#loc104)
        %14 = cir.binop(add, %12, %13) : !u32i loc(#loc104)
        %15 = cir.cmp(lt, %8, %14) : !u32i, !cir.bool loc(#loc159)
        cir.if %15 {
          %16 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc161)
          %17 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc110)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc109)
          %20 = cir.binop(add, %17, %19) : !u32i loc(#loc162)
          cir.store %20, %16 : !u32i, !cir.ptr<!u32i> loc(#loc161)
          %21 = cir.load %16 : !cir.ptr<!u32i>, !u32i loc(#loc111)
          cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc112)
        } else {
          %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc75)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc75)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc113)
        } loc(#loc160)
      } loc(#loc158)
    } loc(#loc156)
    cir.return loc(#loc77)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":42:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":24:18)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":25:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":25:31)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":26:31)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":27:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":29:9)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":29:30)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":29:29)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":31:16)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":32:21)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":32:10)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":32:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":34:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":41:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":35:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":35:30)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":35:29)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":36:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":40:9)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":38:13)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":38:42)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":38:35)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":39:31)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":39:13)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":99:1)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":103:1)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":101:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":101:13)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":102:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":102:13)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":49:1)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":69:1)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":51:5)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":51:18)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":52:31)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":53:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":53:31)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":54:12)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":54:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":55:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":60:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":56:9)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":56:30)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":56:29)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":58:16)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":58:9)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":59:21)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":59:10)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":59:9)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":61:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":68:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":62:9)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":62:30)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":62:29)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":63:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":67:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":65:13)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":65:42)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":65:35)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":66:31)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":66:13)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":94:23)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":72:1)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":97:1)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":74:5)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":74:18)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":75:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":75:31)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":76:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":76:31)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":77:12)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":77:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":78:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":83:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":79:9)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":79:30)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":79:29)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":81:16)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":81:9)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":82:21)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":82:10)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":82:9)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":84:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":96:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":85:9)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":85:30)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":85:29)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":87:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":95:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":87:13)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":87:20)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":88:9)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":91:9)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":93:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":89:13)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":89:42)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":89:35)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":90:31)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":90:13)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_32.c":94:13)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc5, #loc6])
#loc117 = loc(fused[#loc7, #loc8])
#loc118 = loc(fused[#loc9, #loc10])
#loc119 = loc(fused[#loc12, #loc11])
#loc120 = loc(fused[#loc13, #loc14])
#loc121 = loc(fused[#loc15, #loc16])
#loc122 = loc(fused[#loc19, #loc18])
#loc123 = loc(fused[#loc22, #loc20])
#loc124 = loc(fused[#loc23, #loc24])
#loc125 = loc(fused[#loc25, #loc26])
#loc126 = loc(fused[#loc28, #loc29])
#loc127 = loc(fused[#loc30, #loc31])
#loc128 = loc(fused[#loc32, #loc31])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc37, #loc38])
#loc131 = loc(fused[#loc39, #loc40])
#loc132 = loc(fused[#loc41, #loc42])
#loc133 = loc(fused[#loc43, #loc44])
#loc134 = loc(fused[#loc45, #loc46])
#loc135 = loc(fused[#loc47, #loc48])
#loc136 = loc(fused[#loc50, #loc49])
#loc137 = loc(fused[#loc51, #loc52])
#loc138 = loc(fused[#loc53, #loc54])
#loc139 = loc(fused[#loc57, #loc56])
#loc140 = loc(fused[#loc60, #loc58])
#loc141 = loc(fused[#loc61, #loc62])
#loc142 = loc(fused[#loc63, #loc64])
#loc143 = loc(fused[#loc66, #loc67])
#loc144 = loc(fused[#loc68, #loc69])
#loc145 = loc(fused[#loc70, #loc69])
#loc146 = loc(fused[#loc73, #loc74])
#loc147 = loc(fused[#loc76, #loc77])
#loc148 = loc(fused[#loc78, #loc79])
#loc149 = loc(fused[#loc80, #loc81])
#loc150 = loc(fused[#loc82, #loc83])
#loc151 = loc(fused[#loc85, #loc84])
#loc152 = loc(fused[#loc86, #loc87])
#loc153 = loc(fused[#loc88, #loc89])
#loc154 = loc(fused[#loc92, #loc91])
#loc155 = loc(fused[#loc95, #loc93])
#loc156 = loc(fused[#loc96, #loc97])
#loc157 = loc(fused[#loc98, #loc99])
#loc158 = loc(fused[#loc101, #loc102])
#loc159 = loc(fused[#loc103, #loc104])
#loc160 = loc(fused[#loc105, #loc106, #loc107, #loc102])
#loc161 = loc(fused[#loc108, #loc109])
#loc162 = loc(fused[#loc110, #loc109])
