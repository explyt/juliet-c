!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc49)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc10)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc10)
        cir.condition(%1) loc(#loc10)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc55)
            %1 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc16)
            cir.scope {
              %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc19)
              %3 = cir.const #cir.int<1199163600> : !s32i loc(#loc20)
              %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc20)
              %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc57)
              cir.if %5 {
                %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
                %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
                %8 = cir.call @unlink(%7) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc22)
              } loc(#loc58)
            } loc(#loc56)
          } loc(#loc54)
          cir.break loc(#loc23)
        } loc(#loc53)
        cir.yield loc(#loc9)
      } loc(#loc52)
    } loc(#loc52)
    cir.return loc(#loc7)
  } loc(#loc51)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc60)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc25)
  } loc(#loc59)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc35)
        cir.condition(%1) loc(#loc35)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc66)
            %1 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc41)
            cir.scope {
              %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
              %3 = cir.const #cir.int<1199163600> : !s32i loc(#loc45)
              %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc45)
              %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc68)
              cir.if %5 {
                %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc30)
                %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc30)
                cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc47)
              } loc(#loc69)
            } loc(#loc67)
          } loc(#loc65)
          cir.break loc(#loc48)
        } loc(#loc64)
        cir.yield loc(#loc34)
      } loc(#loc63)
    } loc(#loc63)
    cir.return loc(#loc32)
  } loc(#loc62)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_16.c":0:0)
#loc1 = loc("/usr/include/time.h":76:1)
#loc2 = loc("/usr/include/time.h":76:38)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__time_16.c":41:24)
#loc6 = loc("CWE511_Logic_Time_Bomb__time_16.c":31:1)
#loc7 = loc("CWE511_Logic_Time_Bomb__time_16.c":46:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__time_16.c":33:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__time_16.c":45:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__time_16.c":33:11)
#loc11 = loc("CWE511_Logic_Time_Bomb__time_16.c":34:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__time_16.c":35:9)
#loc13 = loc("CWE511_Logic_Time_Bomb__time_16.c":43:9)
#loc14 = loc("CWE511_Logic_Time_Bomb__time_16.c":36:13)
#loc15 = loc("CWE511_Logic_Time_Bomb__time_16.c":36:20)
#loc16 = loc("CWE511_Logic_Time_Bomb__time_16.c":38:13)
#loc17 = loc("CWE511_Logic_Time_Bomb__time_16.c":39:13)
#loc18 = loc("CWE511_Logic_Time_Bomb__time_16.c":42:13)
#loc19 = loc("CWE511_Logic_Time_Bomb__time_16.c":39:17)
#loc20 = loc("CWE511_Logic_Time_Bomb__time_16.c":39:31)
#loc21 = loc("CWE511_Logic_Time_Bomb__time_16.c":40:13)
#loc22 = loc("CWE511_Logic_Time_Bomb__time_16.c":41:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__time_16.c":44:9)
#loc24 = loc("CWE511_Logic_Time_Bomb__time_16.c":70:1)
#loc25 = loc("CWE511_Logic_Time_Bomb__time_16.c":73:1)
#loc26 = loc("CWE511_Logic_Time_Bomb__time_16.c":72:5)
#loc27 = loc("CWE511_Logic_Time_Bomb__time_16.c":72:11)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE511_Logic_Time_Bomb__time_16.c":63:27)
#loc31 = loc("CWE511_Logic_Time_Bomb__time_16.c":53:1)
#loc32 = loc("CWE511_Logic_Time_Bomb__time_16.c":68:1)
#loc33 = loc("CWE511_Logic_Time_Bomb__time_16.c":55:5)
#loc34 = loc("CWE511_Logic_Time_Bomb__time_16.c":67:5)
#loc35 = loc("CWE511_Logic_Time_Bomb__time_16.c":55:11)
#loc36 = loc("CWE511_Logic_Time_Bomb__time_16.c":56:5)
#loc37 = loc("CWE511_Logic_Time_Bomb__time_16.c":57:9)
#loc38 = loc("CWE511_Logic_Time_Bomb__time_16.c":65:9)
#loc39 = loc("CWE511_Logic_Time_Bomb__time_16.c":58:13)
#loc40 = loc("CWE511_Logic_Time_Bomb__time_16.c":58:20)
#loc41 = loc("CWE511_Logic_Time_Bomb__time_16.c":60:13)
#loc42 = loc("CWE511_Logic_Time_Bomb__time_16.c":61:13)
#loc43 = loc("CWE511_Logic_Time_Bomb__time_16.c":64:13)
#loc44 = loc("CWE511_Logic_Time_Bomb__time_16.c":61:17)
#loc45 = loc("CWE511_Logic_Time_Bomb__time_16.c":61:31)
#loc46 = loc("CWE511_Logic_Time_Bomb__time_16.c":62:13)
#loc47 = loc("CWE511_Logic_Time_Bomb__time_16.c":63:17)
#loc48 = loc("CWE511_Logic_Time_Bomb__time_16.c":66:9)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc3, #loc4])
#loc51 = loc(fused[#loc6, #loc7])
#loc52 = loc(fused[#loc8, #loc9])
#loc53 = loc(fused[#loc11, #loc9])
#loc54 = loc(fused[#loc12, #loc13])
#loc55 = loc(fused[#loc14, #loc15])
#loc56 = loc(fused[#loc17, #loc18])
#loc57 = loc(fused[#loc19, #loc20])
#loc58 = loc(fused[#loc21, #loc18])
#loc59 = loc(fused[#loc24, #loc25])
#loc60 = loc(fused[#loc26, #loc27])
#loc61 = loc(fused[#loc28, #loc29])
#loc62 = loc(fused[#loc31, #loc32])
#loc63 = loc(fused[#loc33, #loc34])
#loc64 = loc(fused[#loc36, #loc34])
#loc65 = loc(fused[#loc37, #loc38])
#loc66 = loc(fused[#loc39, #loc40])
#loc67 = loc(fused[#loc42, #loc43])
#loc68 = loc(fused[#loc44, #loc45])
#loc69 = loc(fused[#loc46, #loc43])
