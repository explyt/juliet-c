!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":22:22)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":22:26)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":101:10)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":101:14)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":101:20)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":101:32)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":62:26)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":62:30)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":44:26)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":44:30)
#loc118 = loc(fused[#loc3, #loc4])
#loc134 = loc(fused[#loc44, #loc45])
#loc135 = loc(fused[#loc46, #loc47])
#loc140 = loc(fused[#loc64, #loc65])
#loc152 = loc(fused[#loc96, #loc97])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc3, #loc4])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc5)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc6)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    cir.return %4 : !s32i loc(#loc120)
  } loc(#loc117)
  cir.func private @printIntLine(!s32i) loc(#loc121)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc20)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc126)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc25)
    cir.return loc(#loc13)
  } loc(#loc122)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc127)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc130)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc131)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc135)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc51)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_zero_modulo_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call @CWE369_Divide_by_Zero__int_zero_modulo_42_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_zero_modulo_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE369_Divide_by_Zero__int_zero_modulo_42_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.return %17 : !s32i loc(#loc138)
  } loc(#loc133)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.return %4 : !s32i loc(#loc142)
  } loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc77)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc80)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.br ^bb1 loc(#loc147)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc148)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc149)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc150)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc92)
    cir.br ^bb4 loc(#loc88)
  ^bb3:  // pred: ^bb1
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc71)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc84)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc73)
  } loc(#loc143)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc96, #loc97])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc95)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc99)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.return %4 : !s32i loc(#loc154)
  } loc(#loc151)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc108)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc111)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc114)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc159)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc116)
    cir.return loc(#loc104)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_42.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":22:1)
#loc2 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":27:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":23:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":25:12)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":25:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":26:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":26:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":29:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":37:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":31:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":31:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":33:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":33:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":33:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":34:22)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":34:12)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":34:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":34:26)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":36:18)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":36:24)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":36:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":86:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":90:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":88:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":88:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":89:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":89:13)
#loc32 = loc("/usr/include/stdlib.h":575:1)
#loc33 = loc("/usr/include/stdlib.h":575:41)
#loc34 = loc("/usr/include/time.h":76:1)
#loc35 = loc("/usr/include/time.h":76:38)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":106:15)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":108:15)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":111:15)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":113:15)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":101:1)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":116:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":102:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":104:27)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":104:22)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":104:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":106:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":107:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":107:52)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":108:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":111:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":112:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":112:51)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":113:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":115:12)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":115:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":62:1)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":67:1)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":63:1)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":65:12)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":65:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":66:12)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":66:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":82:19)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":69:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":84:1)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":71:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":71:9)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":73:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":73:12)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":73:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":74:26)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":74:12)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":74:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":74:30)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":76:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":83:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":76:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":76:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":77:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":79:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":81:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":78:22)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":78:28)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":78:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":82:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":44:1)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":49:1)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":45:1)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":47:12)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":47:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":48:12)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":48:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":51:1)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":59:1)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":53:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":53:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":55:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":55:12)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":55:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":56:26)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":56:12)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":56:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":56:30)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":58:18)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":58:24)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":58:5)
#loc117 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc7, #loc6])
#loc120 = loc(fused[#loc9, #loc8])
#loc121 = loc(fused[#loc10, #loc11])
#loc122 = loc(fused[#loc12, #loc13])
#loc123 = loc(fused[#loc14, #loc15])
#loc124 = loc(fused[#loc18, #loc16])
#loc125 = loc(fused[#loc21, #loc22])
#loc126 = loc(fused[#loc23, #loc24])
#loc127 = loc(fused[#loc26, #loc27])
#loc128 = loc(fused[#loc28, #loc29])
#loc129 = loc(fused[#loc30, #loc31])
#loc130 = loc(fused[#loc32, #loc33])
#loc131 = loc(fused[#loc34, #loc35])
#loc132 = loc(fused[#loc36, #loc37])
#loc133 = loc(fused[#loc42, #loc43])
#loc136 = loc(fused[#loc53, #loc54])
#loc137 = loc(fused[#loc57, #loc58])
#loc138 = loc(fused[#loc61, #loc60])
#loc139 = loc(fused[#loc62, #loc63])
#loc141 = loc(fused[#loc68, #loc67])
#loc142 = loc(fused[#loc70, #loc69])
#loc143 = loc(fused[#loc72, #loc73])
#loc144 = loc(fused[#loc74, #loc75])
#loc145 = loc(fused[#loc78, #loc76])
#loc146 = loc(fused[#loc81, #loc82])
#loc147 = loc(fused[#loc83, #loc84])
#loc148 = loc(fused[#loc85, #loc86])
#loc149 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc150 = loc(fused[#loc90, #loc91])
#loc151 = loc(fused[#loc94, #loc95])
#loc153 = loc(fused[#loc100, #loc99])
#loc154 = loc(fused[#loc102, #loc101])
#loc155 = loc(fused[#loc103, #loc104])
#loc156 = loc(fused[#loc105, #loc106])
#loc157 = loc(fused[#loc109, #loc107])
#loc158 = loc(fused[#loc112, #loc113])
#loc159 = loc(fused[#loc114, #loc115])
