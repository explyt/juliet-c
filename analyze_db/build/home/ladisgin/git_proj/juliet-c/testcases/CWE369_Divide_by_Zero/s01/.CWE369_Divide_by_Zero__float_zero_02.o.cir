!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc159)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc163)
    cir.br ^bb1 loc(#loc164)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc165)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc15)
    cir.store %5, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc166)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc167)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc168)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc169)
  ^bb7:  // pred: ^bb6
    %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc23)
    %9 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc24)
    %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc24)
    %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc170)
    %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc170)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc26)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc4)
  } loc(#loc160)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc28)
  } loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc47)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc53)
    cir.store %5, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc183)
    cir.br ^bb3 loc(#loc50)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc184)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc185)
  ^bb6:  // pred: ^bb5
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb13 loc(#loc59)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc186)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc64)
    %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc64)
    %12 = cir.fabs %11 : !cir.double loc(#loc64)
    %13 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc65)
    %14 = cir.cmp(gt, %12, %13) : !cir.double, !cir.bool loc(#loc187)
    cir.brcond %14 ^bb9, ^bb10 loc(#loc188)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc70)
    %16 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc71)
    %17 = cir.cast(floating, %16 : !cir.float), !cir.double loc(#loc71)
    %18 = cir.binop(div, %15, %17) : !cir.double loc(#loc189)
    %19 = cir.cast(float_to_int, %18 : !cir.double), !s32i loc(#loc189)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc73)
    cir.br ^bb11 loc(#loc68)
  ^bb10:  // pred: ^bb8
    %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc40)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb11 loc(#loc63)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc63)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc56)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc56)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc42)
  } loc(#loc177)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc81)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc193)
    cir.br ^bb1 loc(#loc194)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc195)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc87)
    cir.store %5, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc196)
    cir.br ^bb3 loc(#loc84)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc197)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc91)
    cir.brcond %7 ^bb6, ^bb12 loc(#loc198)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc199)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc95)
    %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc95)
    %10 = cir.fabs %9 : !cir.double loc(#loc95)
    %11 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc96)
    %12 = cir.cmp(gt, %10, %11) : !cir.double, !cir.bool loc(#loc200)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc201)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc101)
    %14 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc102)
    %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc102)
    %16 = cir.binop(div, %13, %15) : !cir.double loc(#loc202)
    %17 = cir.cast(float_to_int, %16 : !cir.double), !s32i loc(#loc202)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc104)
    cir.br ^bb10 loc(#loc99)
  ^bb9:  // pred: ^bb7
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc105)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb10 loc(#loc94)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc94)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc90)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc90)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc76)
  } loc(#loc190)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc113)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc206)
    cir.br ^bb1 loc(#loc207)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc208)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc121)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc121)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    cir.br ^bb4 loc(#loc119)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc123)
    cir.store %7, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc209)
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc116)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc210)
  ^bb6:  // pred: ^bb5
    %8 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %9 ^bb7, ^bb10 loc(#loc211)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc212)
  ^bb8:  // pred: ^bb7
    %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc131)
    %11 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc132)
    %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc132)
    %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc213)
    %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc213)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc134)
    cir.br ^bb9 loc(#loc130)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc126)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc126)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc108)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc141)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc217)
    cir.br ^bb1 loc(#loc218)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc145)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc219)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc147)
    cir.store %5, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc220)
    cir.br ^bb3 loc(#loc144)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc144)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc221)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc222)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc223)
  ^bb7:  // pred: ^bb6
    %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc155)
    %9 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc156)
    %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc156)
    %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc224)
    %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc224)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc158)
    cir.br ^bb8 loc(#loc154)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc150)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc150)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc136)
  } loc(#loc214)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_02.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_02.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_02.c":42:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_02.c":38:13)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_02.c":38:44)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_02.c":26:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_02.c":26:11)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_02.c":28:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_02.c":28:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_02.c":29:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_02.c":33:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_02.c":29:8)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_02.c":30:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_02.c":32:16)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_02.c":32:9)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_02.c":34:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_02.c":41:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_02.c":34:8)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_02.c":35:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_02.c":36:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_02.c":40:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_02.c":38:32)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_02.c":38:40)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_02.c":39:26)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_02.c":39:13)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_02.c":152:1)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_02.c":158:1)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_02.c":154:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_02.c":154:14)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_02.c":155:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_02.c":155:14)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_02.c":156:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_02.c":156:14)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_02.c":157:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_02.c":157:14)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_02.c":62:19)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_02.c":74:23)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_02.c":49:1)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_02.c":77:1)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_02.c":69:13)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_02.c":69:44)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_02.c":51:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_02.c":51:11)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_02.c":53:12)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_02.c":53:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_02.c":54:5)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_02.c":58:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_02.c":54:8)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_02.c":55:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_02.c":57:16)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_02.c":57:9)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_02.c":59:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_02.c":76:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_02.c":59:8)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_02.c":60:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_02.c":63:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_02.c":65:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_02.c":62:9)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_02.c":67:9)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_02.c":75:9)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_02.c":67:17)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_02.c":67:25)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_02.c":67:12)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_02.c":68:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_02.c":71:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_02.c":73:9)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_02.c":69:32)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_02.c":69:40)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_02.c":70:26)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_02.c":70:13)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_02.c":74:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_02.c":80:1)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_02.c":103:1)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_02.c":95:13)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_02.c":95:44)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_02.c":82:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_02.c":82:11)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_02.c":84:12)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_02.c":84:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_02.c":85:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_02.c":89:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_02.c":85:8)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_02.c":86:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_02.c":88:16)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_02.c":88:9)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_02.c":90:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_02.c":102:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_02.c":90:8)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_02.c":91:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_02.c":93:9)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_02.c":101:9)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_02.c":93:17)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_02.c":93:25)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_02.c":93:12)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_02.c":94:9)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_02.c":97:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_02.c":99:9)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_02.c":95:32)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_02.c":95:40)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_02.c":96:26)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_02.c":96:13)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_02.c":100:23)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_02.c":100:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_02.c":106:1)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_02.c":129:1)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_02.c":125:13)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_02.c":125:44)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_02.c":108:5)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_02.c":108:11)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_02.c":110:12)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_02.c":110:5)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_02.c":111:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_02.c":120:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_02.c":111:8)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_02.c":112:5)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_02.c":115:5)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_02.c":117:5)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_02.c":114:19)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_02.c":114:9)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_02.c":119:16)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_02.c":119:9)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_02.c":121:5)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_02.c":128:5)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_02.c":121:8)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_02.c":122:5)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_02.c":123:9)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_02.c":127:9)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_02.c":125:32)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_02.c":125:40)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_02.c":126:26)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_02.c":126:13)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_02.c":132:1)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_02.c":150:1)
#loc137 = loc("CWE369_Divide_by_Zero__float_zero_02.c":146:13)
#loc138 = loc("CWE369_Divide_by_Zero__float_zero_02.c":146:44)
#loc139 = loc("CWE369_Divide_by_Zero__float_zero_02.c":134:5)
#loc140 = loc("CWE369_Divide_by_Zero__float_zero_02.c":134:11)
#loc141 = loc("CWE369_Divide_by_Zero__float_zero_02.c":136:12)
#loc142 = loc("CWE369_Divide_by_Zero__float_zero_02.c":136:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_zero_02.c":137:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_zero_02.c":141:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_zero_02.c":137:8)
#loc146 = loc("CWE369_Divide_by_Zero__float_zero_02.c":138:5)
#loc147 = loc("CWE369_Divide_by_Zero__float_zero_02.c":140:16)
#loc148 = loc("CWE369_Divide_by_Zero__float_zero_02.c":140:9)
#loc149 = loc("CWE369_Divide_by_Zero__float_zero_02.c":142:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_zero_02.c":149:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_zero_02.c":142:8)
#loc152 = loc("CWE369_Divide_by_Zero__float_zero_02.c":143:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_zero_02.c":144:9)
#loc154 = loc("CWE369_Divide_by_Zero__float_zero_02.c":148:9)
#loc155 = loc("CWE369_Divide_by_Zero__float_zero_02.c":146:32)
#loc156 = loc("CWE369_Divide_by_Zero__float_zero_02.c":146:40)
#loc157 = loc("CWE369_Divide_by_Zero__float_zero_02.c":147:26)
#loc158 = loc("CWE369_Divide_by_Zero__float_zero_02.c":147:13)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc7, #loc8])
#loc163 = loc(fused[#loc10, #loc9])
#loc164 = loc(fused[#loc11, #loc12])
#loc165 = loc(fused[#loc14, #loc12])
#loc166 = loc(fused[#loc16, #loc15])
#loc167 = loc(fused[#loc17, #loc18])
#loc168 = loc(fused[#loc20, #loc18])
#loc169 = loc(fused[#loc21, #loc22])
#loc170 = loc(fused[#loc23, #loc24])
#loc171 = loc(fused[#loc27, #loc28])
#loc172 = loc(fused[#loc29, #loc30])
#loc173 = loc(fused[#loc31, #loc32])
#loc174 = loc(fused[#loc33, #loc34])
#loc175 = loc(fused[#loc35, #loc36])
#loc176 = loc(fused[#loc37, #loc38])
#loc177 = loc(fused[#loc41, #loc42])
#loc178 = loc(fused[#loc43, #loc44])
#loc179 = loc(fused[#loc45, #loc46])
#loc180 = loc(fused[#loc48, #loc47])
#loc181 = loc(fused[#loc49, #loc50])
#loc182 = loc(fused[#loc52, #loc50])
#loc183 = loc(fused[#loc54, #loc53])
#loc184 = loc(fused[#loc55, #loc56])
#loc185 = loc(fused[#loc58, #loc59, #loc60, #loc56])
#loc186 = loc(fused[#loc62, #loc63])
#loc187 = loc(fused[#loc66, #loc65])
#loc188 = loc(fused[#loc67, #loc68, #loc69, #loc63])
#loc189 = loc(fused[#loc70, #loc71])
#loc190 = loc(fused[#loc75, #loc76])
#loc191 = loc(fused[#loc77, #loc78])
#loc192 = loc(fused[#loc79, #loc80])
#loc193 = loc(fused[#loc82, #loc81])
#loc194 = loc(fused[#loc83, #loc84])
#loc195 = loc(fused[#loc86, #loc84])
#loc196 = loc(fused[#loc88, #loc87])
#loc197 = loc(fused[#loc89, #loc90])
#loc198 = loc(fused[#loc92, #loc90])
#loc199 = loc(fused[#loc93, #loc94])
#loc200 = loc(fused[#loc97, #loc96])
#loc201 = loc(fused[#loc98, #loc99, #loc100, #loc94])
#loc202 = loc(fused[#loc101, #loc102])
#loc203 = loc(fused[#loc107, #loc108])
#loc204 = loc(fused[#loc109, #loc110])
#loc205 = loc(fused[#loc111, #loc112])
#loc206 = loc(fused[#loc114, #loc113])
#loc207 = loc(fused[#loc115, #loc116])
#loc208 = loc(fused[#loc118, #loc119, #loc120, #loc116])
#loc209 = loc(fused[#loc124, #loc123])
#loc210 = loc(fused[#loc125, #loc126])
#loc211 = loc(fused[#loc128, #loc126])
#loc212 = loc(fused[#loc129, #loc130])
#loc213 = loc(fused[#loc131, #loc132])
#loc214 = loc(fused[#loc135, #loc136])
#loc215 = loc(fused[#loc137, #loc138])
#loc216 = loc(fused[#loc139, #loc140])
#loc217 = loc(fused[#loc142, #loc141])
#loc218 = loc(fused[#loc143, #loc144])
#loc219 = loc(fused[#loc146, #loc144])
#loc220 = loc(fused[#loc148, #loc147])
#loc221 = loc(fused[#loc149, #loc150])
#loc222 = loc(fused[#loc152, #loc150])
#loc223 = loc(fused[#loc153, #loc154])
#loc224 = loc(fused[#loc155, #loc156])
