!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc3 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":22:22)
#loc4 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":22:26)
#loc37 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":68:26)
#loc38 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":68:30)
#loc72 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":47:26)
#loc73 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":47:30)
#loc98 = loc(fused[#loc3, #loc4])
#loc112 = loc(fused[#loc37, #loc38])
#loc125 = loc(fused[#loc72, #loc73])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc3, #loc4])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc5)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc6)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc6)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc6)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc6)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    cir.return %7 : !s32i loc(#loc100)
  } loc(#loc97)
  cir.func private @printIntLine(!s32i) loc(#loc101)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %3 = cir.call @badSource(%2) : (!s32i) -> !s32i loc(#loc19)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc107)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc25)
      %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc26)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc107)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc28)
    } loc(#loc106)
    cir.return loc(#loc13)
  } loc(#loc102)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc109)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc108)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc37, #loc38])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc36)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc39)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc40)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc40)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc40)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    cir.return %7 : !s32i loc(#loc114)
  } loc(#loc111)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %3 = cir.call @goodB2GSource(%2) : (!s32i) -> !s32i loc(#loc54)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc60)
      %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc60)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc60)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc60)
      %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc121)
      cir.if %9 {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc123)
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc66)
        cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc123)
        %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc68)
      } else {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc46)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } loc(#loc122)
    } loc(#loc120)
    cir.return loc(#loc48)
  } loc(#loc116)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc72, #loc73])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc71)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc75)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc76)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    cir.return %5 : !s32i loc(#loc127)
  } loc(#loc124)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %3 = cir.call @goodG2BSource(%2) : (!s32i) -> !s32i loc(#loc87)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc133)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc93)
      %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc94)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc133)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc96)
    } loc(#loc132)
    cir.return loc(#loc81)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_42.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":22:1)
#loc2 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":27:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":23:1)
#loc6 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":25:12)
#loc7 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":25:5)
#loc8 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":26:12)
#loc9 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":26:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":29:1)
#loc13 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":40:1)
#loc14 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":31:5)
#loc15 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":31:9)
#loc16 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":33:12)
#loc17 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":33:5)
#loc18 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":34:22)
#loc19 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":34:12)
#loc20 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":34:5)
#loc21 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":34:26)
#loc22 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":35:5)
#loc23 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":39:5)
#loc24 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":37:9)
#loc25 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":37:29)
#loc26 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":37:22)
#loc27 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":38:22)
#loc28 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":38:9)
#loc29 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":93:1)
#loc30 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":97:1)
#loc31 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":95:5)
#loc32 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":95:13)
#loc33 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":96:5)
#loc34 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":96:13)
#loc35 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":68:1)
#loc36 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":73:1)
#loc39 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":69:1)
#loc40 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":71:12)
#loc41 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":71:5)
#loc42 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":72:12)
#loc43 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":72:5)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":89:19)
#loc47 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":75:1)
#loc48 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":91:1)
#loc49 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":77:5)
#loc50 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":77:9)
#loc51 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":79:12)
#loc52 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":79:5)
#loc53 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":80:26)
#loc54 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":80:12)
#loc55 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":80:5)
#loc56 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":80:30)
#loc57 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":82:5)
#loc58 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":90:5)
#loc59 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":82:9)
#loc60 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":82:16)
#loc61 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":83:5)
#loc62 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":86:5)
#loc63 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":88:5)
#loc64 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":84:9)
#loc65 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":84:29)
#loc66 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":84:22)
#loc67 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":85:22)
#loc68 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":85:9)
#loc69 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":89:9)
#loc70 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":47:1)
#loc71 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":52:1)
#loc74 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":48:1)
#loc75 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":50:13)
#loc76 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":50:12)
#loc77 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":50:5)
#loc78 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":51:12)
#loc79 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":51:5)
#loc80 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":54:1)
#loc81 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":65:1)
#loc82 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":56:5)
#loc83 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":56:9)
#loc84 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":58:12)
#loc85 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":58:5)
#loc86 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":59:26)
#loc87 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":59:12)
#loc88 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":59:5)
#loc89 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":59:30)
#loc90 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":60:5)
#loc91 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":64:5)
#loc92 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":62:9)
#loc93 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":62:29)
#loc94 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":62:22)
#loc95 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":63:22)
#loc96 = loc("CWE191_Integer_Underflow__int_min_sub_42.c":63:9)
#loc97 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc7, #loc6])
#loc100 = loc(fused[#loc9, #loc8])
#loc101 = loc(fused[#loc10, #loc11])
#loc102 = loc(fused[#loc12, #loc13])
#loc103 = loc(fused[#loc14, #loc15])
#loc104 = loc(fused[#loc17, #loc16])
#loc105 = loc(fused[#loc20, #loc21])
#loc106 = loc(fused[#loc22, #loc23])
#loc107 = loc(fused[#loc24, #loc25])
#loc108 = loc(fused[#loc29, #loc30])
#loc109 = loc(fused[#loc31, #loc32])
#loc110 = loc(fused[#loc33, #loc34])
#loc111 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc41, #loc40])
#loc114 = loc(fused[#loc43, #loc42])
#loc115 = loc(fused[#loc44, #loc45])
#loc116 = loc(fused[#loc47, #loc48])
#loc117 = loc(fused[#loc49, #loc50])
#loc118 = loc(fused[#loc52, #loc51])
#loc119 = loc(fused[#loc55, #loc56])
#loc120 = loc(fused[#loc57, #loc58])
#loc121 = loc(fused[#loc59, #loc60])
#loc122 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc123 = loc(fused[#loc64, #loc65])
#loc124 = loc(fused[#loc70, #loc71])
#loc126 = loc(fused[#loc77, #loc75])
#loc127 = loc(fused[#loc79, #loc78])
#loc128 = loc(fused[#loc80, #loc81])
#loc129 = loc(fused[#loc82, #loc83])
#loc130 = loc(fused[#loc85, #loc84])
#loc131 = loc(fused[#loc88, #loc89])
#loc132 = loc(fused[#loc90, #loc91])
#loc133 = loc(fused[#loc92, #loc93])
