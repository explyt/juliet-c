!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":205:10)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":205:14)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":205:20)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":205:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc316 = loc(fused[#loc183, #loc184])
#loc317 = loc(fused[#loc185, #loc186])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc245)
  cir.global "private" constant cir_private @__const.goodG2B1.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc246)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_02_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc247)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc248)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc249)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc250)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc13)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc251)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc252)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc253)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc254)
  cir.func private @close(!s32i) -> !s32i loc(#loc255)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc256)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc27)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc258)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc247)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_02_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc247)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc247)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc32)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc259)
    cir.scope {
      %13 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc36)
      cir.if %14 {
        cir.scope {
          %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc263)
          %16 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc264)
          %17 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc265)
          %18 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc266)
          %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc267)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc47)
          cir.store %21, %18 : !s32i, !cir.ptr<!s32i> loc(#loc266)
          %22 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc50)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
          %24 = cir.call @strlen(%23) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc50)
          cir.store %24, %19 : !u64i, !cir.ptr<!u64i> loc(#loc267)
          cir.scope {
            cir.do {
              %25 = cir.const #cir.int<2> : !s32i loc(#loc54)
              %26 = cir.const #cir.int<1> : !s32i loc(#loc55)
              %27 = cir.const #cir.int<6> : !s32i loc(#loc56)
              %28 = cir.call @socket(%25, %26, %27) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
              cir.store %28, %18 : !s32i, !cir.ptr<!s32i> loc(#loc269)
              cir.scope {
                %79 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                %80 = cir.const #cir.int<1> : !s32i loc(#loc63)
                %81 = cir.unary(minus, %80) : !s32i, !s32i loc(#loc63)
                %82 = cir.cmp(eq, %79, %81) : !s32i, !cir.bool loc(#loc271)
                cir.if %82 {
                  cir.break loc(#loc65)
                } loc(#loc272)
              } loc(#loc270)
              %29 = cir.cast(bitcast, %16 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc273)
              %30 = cir.const #cir.int<0> : !s32i loc(#loc68)
              %31 = cir.const #cir.int<16> : !u64i loc(#loc274)
              cir.libc.memset %31 bytes from %29 set to %30 : !cir.ptr<!void>, !s32i, !u64i loc(#loc275)
              %32 = cir.const #cir.int<2> : !s32i loc(#loc73)
              %33 = cir.cast(integral, %32 : !s32i), !u16i loc(#loc73)
              %34 = cir.get_member %16[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
              cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc276)
              %35 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc13)
              %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc13)
              %37 = cir.call @inet_addr(%36) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc76)
              %38 = cir.get_member %16[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
              %39 = cir.get_member %38[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
              cir.store %37, %39 : !u32i, !cir.ptr<!u32i> loc(#loc277)
              %40 = cir.const #cir.int<27015> : !s32i loc(#loc81)
              %41 = cir.cast(integral, %40 : !s32i), !u16i loc(#loc81)
              %42 = cir.call @htons(%41) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc82)
              %43 = cir.get_member %16[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
              cir.store %42, %43 : !u16i, !cir.ptr<!u16i> loc(#loc278)
              cir.scope {
                %79 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %80 = cir.cast(bitcast, %16 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc280)
                %81 = cir.const #cir.int<16> : !u64i loc(#loc281)
                %82 = cir.cast(integral, %81 : !u64i), !u32i loc(#loc281)
                %83 = cir.call @connect(%79, %80, %82) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc93)
                %84 = cir.const #cir.int<1> : !s32i loc(#loc94)
                %85 = cir.unary(minus, %84) : !s32i, !s32i loc(#loc94)
                %86 = cir.cmp(eq, %83, %85) : !s32i, !cir.bool loc(#loc282)
                cir.if %86 {
                  cir.break loc(#loc96)
                } loc(#loc283)
              } loc(#loc279)
              %44 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc97)
              %45 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
              %46 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc99)
              %47 = cir.ptr_stride(%45 : !cir.ptr<!s8i>, %46 : !u64i), !cir.ptr<!s8i> loc(#loc100)
              %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc284)
              %49 = cir.const #cir.int<1> : !u64i loc(#loc285)
              %50 = cir.const #cir.int<100> : !s32i loc(#loc105)
              %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc105)
              %52 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc106)
              %53 = cir.binop(sub, %51, %52) : !u64i loc(#loc286)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc107)
              %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc107)
              %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc287)
              %57 = cir.binop(mul, %49, %56) : !u64i loc(#loc288)
              %58 = cir.const #cir.int<0> : !s32i loc(#loc109)
              %59 = cir.call @recv(%44, %48, %57, %58) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc110)
              %60 = cir.cast(integral, %59 : !s64i), !s32i loc(#loc110)
              cir.store %60, %15 : !s32i, !cir.ptr<!s32i> loc(#loc289)
              cir.scope {
                %79 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                %80 = cir.const #cir.int<1> : !s32i loc(#loc116)
                %81 = cir.unary(minus, %80) : !s32i, !s32i loc(#loc116)
                %82 = cir.cmp(eq, %79, %81) : !s32i, !cir.bool loc(#loc291)
                %83 = cir.ternary(%82, true {
                  %84 = cir.const #true loc(#loc117)
                  cir.yield %84 : !cir.bool loc(#loc117)
                }, false {
                  %84 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                  %85 = cir.const #cir.int<0> : !s32i loc(#loc119)
                  %86 = cir.cmp(eq, %84, %85) : !s32i, !cir.bool loc(#loc292)
                  %87 = cir.ternary(%86, true {
                    %88 = cir.const #true loc(#loc117)
                    cir.yield %88 : !cir.bool loc(#loc117)
                  }, false {
                    %88 = cir.const #false loc(#loc117)
                    cir.yield %88 : !cir.bool loc(#loc117)
                  }) : (!cir.bool) -> !cir.bool loc(#loc117)
                  cir.yield %87 : !cir.bool loc(#loc117)
                }) : (!cir.bool) -> !cir.bool loc(#loc117)
                cir.if %83 {
                  cir.break loc(#loc121)
                } loc(#loc293)
              } loc(#loc290)
              %61 = cir.const #cir.int<0> : !s32i loc(#loc122)
              %62 = cir.cast(integral, %61 : !s32i), !s8i loc(#loc122)
              %63 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
              %64 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc124)
              %65 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %66 = cir.cast(integral, %65 : !s32i), !u64i loc(#loc125)
              %67 = cir.const #cir.int<1> : !u64i loc(#loc294)
              %68 = cir.binop(div, %66, %67) : !u64i loc(#loc295)
              %69 = cir.binop(add, %64, %68) : !u64i loc(#loc296)
              %70 = cir.ptr_stride(%63 : !cir.ptr<!s8i>, %69 : !u64i), !cir.ptr<!s8i> loc(#loc128)
              cir.store %62, %70 : !s8i, !cir.ptr<!s8i> loc(#loc297)
              %71 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc129)
              %72 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
              %73 = cir.const #cir.int<13> : !s32i loc(#loc131)
              %74 = cir.call @strchr(%72, %73) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc129)
              cir.store %74, %17 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc298)
              cir.scope {
                %79 = cir.load %17 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
                %80 = cir.cast(ptr_to_bool, %79 : !cir.ptr<!s8i>), !cir.bool loc(#loc136)
                cir.if %80 {
                  %81 = cir.const #cir.int<0> : !s32i loc(#loc138)
                  %82 = cir.cast(integral, %81 : !s32i), !s8i loc(#loc138)
                  %83 = cir.load deref %17 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
                  cir.store %82, %83 : !s8i, !cir.ptr<!s8i> loc(#loc301)
                } loc(#loc300)
              } loc(#loc299)
              %75 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc141)
              %76 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
              %77 = cir.const #cir.int<10> : !s32i loc(#loc143)
              %78 = cir.call @strchr(%76, %77) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc141)
              cir.store %78, %17 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc302)
              cir.scope {
                %79 = cir.load %17 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
                %80 = cir.cast(ptr_to_bool, %79 : !cir.ptr<!s8i>), !cir.bool loc(#loc148)
                cir.if %80 {
                  %81 = cir.const #cir.int<0> : !s32i loc(#loc150)
                  %82 = cir.cast(integral, %81 : !s32i), !s8i loc(#loc150)
                  %83 = cir.load deref %17 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
                  cir.store %82, %83 : !s8i, !cir.ptr<!s8i> loc(#loc305)
                } loc(#loc304)
              } loc(#loc303)
              cir.yield loc(#loc53)
            } while {
              %25 = cir.const #cir.int<0> : !s32i loc(#loc153)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc153)
              cir.condition(%26) loc(#loc153)
            } loc(#loc268)
          } loc(#loc268)
          cir.scope {
            %25 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc156)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc157)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc157)
            %28 = cir.cmp(ne, %25, %27) : !s32i, !cir.bool loc(#loc307)
            cir.if %28 {
              %29 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc159)
              %30 = cir.call @close(%29) : (!s32i) -> !s32i loc(#loc160)
            } loc(#loc308)
          } loc(#loc306)
        } loc(#loc262)
      } loc(#loc261)
    } loc(#loc260)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc26)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc26)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc161)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc161)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc27)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc27)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc163)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc164)
    cir.return loc(#loc29)
  } loc(#loc257)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc310)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc167)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc311)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc169)
    cir.return loc(#loc166)
  } loc(#loc309)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc312)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc313)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc314)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc180)
  cir.func @main(%arg0: !s32i loc(fused[#loc183, #loc184]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc185, #loc186])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc316)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc317)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc182)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc187)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc188)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc189)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc189)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc190)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc177)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc318)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_02_good() : () -> () loc(#loc192)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc178)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc179)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc195)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc319)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_02_bad() : () -> () loc(#loc196)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc180)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc199)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc320)
    cir.return %17 : !s32i loc(#loc320)
  } loc(#loc315)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc201)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc321)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc204)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc323)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc246)
    %2 = cir.get_global @__const.goodG2B1.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc246)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc246)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc209)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc324)
    cir.scope {
      %13 = cir.const #cir.int<0> : !s32i loc(#loc213)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc213)
      cir.if %14 {
        %15 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc201)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc201)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc217)
      } else {
        %15 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc218)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc219)
        %17 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc204)
        %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc204)
        %19 = cir.call @strcat(%16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc218)
      } loc(#loc326)
    } loc(#loc325)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc220)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc220)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc221)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc221)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc222)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc222)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc223)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc224)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc225)
    cir.return loc(#loc206)
  } loc(#loc322)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc328)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc245)
    %2 = cir.get_global @__const.goodG2B2.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc245)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc245)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc230)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc329)
    cir.scope {
      %13 = cir.const #cir.int<1> : !s32i loc(#loc234)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc234)
      cir.if %14 {
        %15 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc236)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc237)
        %17 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc238)
        %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc238)
        %19 = cir.call @strcat(%16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc236)
      } loc(#loc331)
    } loc(#loc330)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc239)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc239)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc240)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc240)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc241)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc241)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc242)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc243)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc244)
    cir.return loc(#loc227)
  } loc(#loc327)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":176:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":176:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":154:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":154:28)
#loc5 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":68:5)
#loc6 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":68:28)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/sys/socket.h":102:1)
#loc10 = loc("/usr/include/sys/socket.h":102:62)
#loc11 = loc("/usr/include/arpa/inet.h":34:1)
#loc12 = loc("/usr/include/arpa/inet.h":34:47)
#loc13 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":99:53)
#loc14 = loc("/usr/include/netinet/in.h":404:1)
#loc15 = loc("/usr/include/netinet/in.h":405:40)
#loc16 = loc("/usr/include/sys/socket.h":126:1)
#loc17 = loc("/usr/include/sys/socket.h":126:75)
#loc18 = loc("/usr/include/sys/socket.h":145:1)
#loc19 = loc("/usr/include/sys/socket.h":145:68)
#loc20 = loc("/usr/include/string.h":246:1)
#loc21 = loc("/usr/include/string.h":247:33)
#loc22 = loc("/usr/include/unistd.h":358:1)
#loc23 = loc("/usr/include/unistd.h":358:27)
#loc24 = loc("/usr/include/unistd.h":605:1)
#loc25 = loc("/usr/include/unistd.h":606:14)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":143:12)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":143:38)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":65:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":144:1)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":67:5)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":67:12)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":69:12)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":69:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":70:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":139:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":70:8)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":71:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":72:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":138:9)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":77:13)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":77:17)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":78:13)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":78:32)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":79:13)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":79:19)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":80:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":80:36)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":81:13)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":81:41)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":81:30)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":81:37)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":82:13)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":127:21)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":92:40)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":92:49)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":92:62)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":92:33)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":92:17)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":92:73)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":93:17)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":96:17)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":93:21)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":93:38)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":94:17)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":95:21)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":97:24)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":97:25)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":97:34)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":97:37)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":97:51)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":97:17)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":97:52)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":98:38)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":98:17)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":99:43)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":99:17)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":99:63)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":100:42)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":100:36)
#loc83 = loc("/usr/include/netinet/in.h":250:15)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":100:17)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":100:50)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":101:17)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":104:17)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":101:29)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":101:62)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":101:63)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":101:72)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":101:86)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":101:21)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":101:92)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":102:17)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":103:21)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:35)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:59)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:66)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:64)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:50)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:73)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:76)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:87)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:92)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:98)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:108)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:109)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:112)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:30)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:17)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":108:113)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":109:17)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":112:17)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":109:21)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":109:35)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":109:48)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":109:51)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":109:65)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":110:17)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":111:21)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":114:61)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":114:17)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":114:22)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":114:32)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":114:45)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":114:56)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":114:57)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":116:27)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":116:34)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":116:40)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":116:17)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":116:44)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":117:17)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":120:17)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":117:21)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":118:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":119:32)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":119:22)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":119:21)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":121:27)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":121:34)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":121:40)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":121:17)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":121:44)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":122:17)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":125:17)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":122:21)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":123:17)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":124:32)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":124:22)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":124:21)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":127:20)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":128:13)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":131:13)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":128:17)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":128:34)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":129:13)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":130:30)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":130:17)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":143:25)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":143:52)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":143:66)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":143:5)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":189:1)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":193:1)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":191:5)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":191:14)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":192:5)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":192:14)
#loc171 = loc("/usr/include/stdlib.h":575:1)
#loc172 = loc("/usr/include/stdlib.h":575:41)
#loc173 = loc("/usr/include/time.h":76:1)
#loc174 = loc("/usr/include/time.h":76:38)
#loc175 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc176 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":210:15)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":212:15)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":215:15)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":217:15)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":205:1)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":220:1)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":206:1)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":208:27)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":208:22)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":208:5)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":210:5)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":211:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":211:68)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":212:5)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":215:5)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":216:5)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":216:67)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":217:5)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":219:12)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":219:5)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":159:19)
#loc202 = loc("/usr/include/string.h":149:1)
#loc203 = loc("/usr/include/string.h":150:14)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":164:22)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":151:1)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":170:1)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":153:5)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":153:12)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":155:12)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":155:5)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":156:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":165:5)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":156:8)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":157:5)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":160:5)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":162:5)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":159:9)
#loc218 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":164:9)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":164:16)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":169:12)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":169:25)
#loc222 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":169:38)
#loc223 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":169:52)
#loc224 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":169:66)
#loc225 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":169:5)
#loc226 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":173:1)
#loc227 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":187:1)
#loc228 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":175:5)
#loc229 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":175:12)
#loc230 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":177:12)
#loc231 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":177:5)
#loc232 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":178:5)
#loc233 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":182:5)
#loc234 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":178:8)
#loc235 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":179:5)
#loc236 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":181:9)
#loc237 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":181:16)
#loc238 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":181:22)
#loc239 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":186:12)
#loc240 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":186:25)
#loc241 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":186:38)
#loc242 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":186:52)
#loc243 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":186:66)
#loc244 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_02.c":186:5)
#loc245 = loc(fused[#loc1, #loc2])
#loc246 = loc(fused[#loc3, #loc4])
#loc247 = loc(fused[#loc5, #loc6])
#loc248 = loc(fused[#loc7, #loc8])
#loc249 = loc(fused[#loc9, #loc10])
#loc250 = loc(fused[#loc11, #loc12])
#loc251 = loc(fused[#loc14, #loc15])
#loc252 = loc(fused[#loc16, #loc17])
#loc253 = loc(fused[#loc18, #loc19])
#loc254 = loc(fused[#loc20, #loc21])
#loc255 = loc(fused[#loc22, #loc23])
#loc256 = loc(fused[#loc24, #loc25])
#loc257 = loc(fused[#loc28, #loc29])
#loc258 = loc(fused[#loc30, #loc31])
#loc259 = loc(fused[#loc33, #loc32])
#loc260 = loc(fused[#loc34, #loc35])
#loc261 = loc(fused[#loc37, #loc35])
#loc262 = loc(fused[#loc38, #loc39])
#loc263 = loc(fused[#loc40, #loc41])
#loc264 = loc(fused[#loc42, #loc43])
#loc265 = loc(fused[#loc44, #loc45])
#loc266 = loc(fused[#loc46, #loc47])
#loc267 = loc(fused[#loc48, #loc49])
#loc268 = loc(fused[#loc52, #loc53])
#loc269 = loc(fused[#loc58, #loc59])
#loc270 = loc(fused[#loc60, #loc61])
#loc271 = loc(fused[#loc62, #loc63])
#loc272 = loc(fused[#loc64, #loc61])
#loc273 = loc(fused[#loc66, #loc67])
#loc274 = loc(fused[#loc69, #loc70])
#loc275 = loc(fused[#loc71, #loc72])
#loc276 = loc(fused[#loc75, #loc73])
#loc277 = loc(fused[#loc79, #loc80])
#loc278 = loc(fused[#loc84, #loc85])
#loc279 = loc(fused[#loc86, #loc87])
#loc280 = loc(fused[#loc89, #loc90])
#loc281 = loc(fused[#loc91, #loc92])
#loc282 = loc(fused[#loc93, #loc94])
#loc283 = loc(fused[#loc95, #loc87])
#loc284 = loc(fused[#loc101, #loc102])
#loc285 = loc(fused[#loc103, #loc104])
#loc286 = loc(fused[#loc105, #loc106])
#loc287 = loc(fused[#loc105, #loc107])
#loc288 = loc(fused[#loc103, #loc108])
#loc289 = loc(fused[#loc111, #loc112])
#loc290 = loc(fused[#loc113, #loc114])
#loc291 = loc(fused[#loc115, #loc116])
#loc292 = loc(fused[#loc118, #loc119])
#loc293 = loc(fused[#loc120, #loc114])
#loc294 = loc(fused[#loc126, #loc127])
#loc295 = loc(fused[#loc125, #loc127])
#loc296 = loc(fused[#loc124, #loc127])
#loc297 = loc(fused[#loc123, #loc122])
#loc298 = loc(fused[#loc132, #loc133])
#loc299 = loc(fused[#loc134, #loc135])
#loc300 = loc(fused[#loc137, #loc135])
#loc301 = loc(fused[#loc140, #loc138])
#loc302 = loc(fused[#loc144, #loc145])
#loc303 = loc(fused[#loc146, #loc147])
#loc304 = loc(fused[#loc149, #loc147])
#loc305 = loc(fused[#loc152, #loc150])
#loc306 = loc(fused[#loc154, #loc155])
#loc307 = loc(fused[#loc156, #loc157])
#loc308 = loc(fused[#loc158, #loc155])
#loc309 = loc(fused[#loc165, #loc166])
#loc310 = loc(fused[#loc167, #loc168])
#loc311 = loc(fused[#loc169, #loc170])
#loc312 = loc(fused[#loc171, #loc172])
#loc313 = loc(fused[#loc173, #loc174])
#loc314 = loc(fused[#loc175, #loc176])
#loc315 = loc(fused[#loc181, #loc182])
#loc318 = loc(fused[#loc192, #loc193])
#loc319 = loc(fused[#loc196, #loc197])
#loc320 = loc(fused[#loc200, #loc199])
#loc321 = loc(fused[#loc202, #loc203])
#loc322 = loc(fused[#loc205, #loc206])
#loc323 = loc(fused[#loc207, #loc208])
#loc324 = loc(fused[#loc210, #loc209])
#loc325 = loc(fused[#loc211, #loc212])
#loc326 = loc(fused[#loc214, #loc215, #loc216, #loc212])
#loc327 = loc(fused[#loc226, #loc227])
#loc328 = loc(fused[#loc228, #loc229])
#loc329 = loc(fused[#loc231, #loc230])
#loc330 = loc(fused[#loc232, #loc233])
#loc331 = loc(fused[#loc235, #loc233])
