!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":24:51)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":24:100)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":24:107)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":37:51)
#loc90 = loc(fused[#loc10, #loc11])
!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad = !cir.record<class "CWE122_Heap_Based_Buffer_Overflow__CWE135_84::CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad" {!cir.ptr<!void>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc86)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc87)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc88)
  cir.func @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_8448CWE122_Heap_Based_Buffer_Overflow__CWE135_84_badC2EPv(%arg0: !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad> loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":24:51), %arg1: !cir.ptr<!void> loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc9)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc90)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>> loc(#loc12)
    cir.store %arg1, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc12)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad> loc(#loc9)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc13)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad> -> !cir.ptr<!cir.ptr<!void>> loc(#loc14)
    cir.store %3, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc91)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc93)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc20)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc21)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc21)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc94)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc95)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc96)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc93)
      cir.scope {
        %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc27)
        %31 = cir.cmp(eq, %29, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc98)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc29)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc30)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc31)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
        } loc(#loc99)
      } loc(#loc97)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc33)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc34)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc34)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc34)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc36)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc37)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc39)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc39)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc41)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc100)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc42)
      %28 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad> -> !cir.ptr<!cir.ptr<!void>> loc(#loc14)
      cir.store %27, %28 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc101)
    } loc(#loc92)
    cir.return loc(#loc8)
  } loc(#loc89)
  cir.func private @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_8448CWE122_Heap_Based_Buffer_Overflow__CWE135_84_badC1EPv(!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>, !cir.ptr<!void>) alias(@_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_8448CWE122_Heap_Based_Buffer_Overflow__CWE135_84_badC2EPv) loc(#loc89)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc102)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc106)
  cir.func @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_8448CWE122_Heap_Based_Buffer_Overflow__CWE135_84_badD2Ev(%arg0: !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad> loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":37:51)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc56)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>> loc(#loc57)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad> loc(#loc56)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc109)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc110)
      %4 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc64)
      %5 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad> -> !cir.ptr<!cir.ptr<!void>> loc(#loc14)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc65)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc65)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc64)
      cir.store %8, %2 : !u64i, !cir.ptr<!u64i> loc(#loc109)
      %9 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc66)
      %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc67)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc68)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc68)
      %13 = cir.binop(add, %10, %12) : !u64i loc(#loc111)
      %14 = cir.const #cir.int<4> : !u64i loc(#loc112)
      %15 = cir.call @calloc(%13, %14) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc66)
      cir.store %15, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc110)
      cir.scope {
        %26 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc73)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc74)
        %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc114)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc76)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc77)
          %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc78)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
        } loc(#loc115)
      } loc(#loc113)
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
      %18 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad> -> !cir.ptr<!cir.ptr<!void>> loc(#loc14)
      %19 = cir.load %18 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc80)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc80)
      %21 = cir.call @wcscpy(%17, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc81)
      %22 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc83)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc84)
      %25 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc84)
    } loc(#loc108)
    cir.return loc(#loc55)
  } loc(#loc107)
  cir.func private @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_8448CWE122_Heap_Based_Buffer_Overflow__CWE135_84_badD1Ev(!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_843A3ACWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad>) alias(@_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_8448CWE122_Heap_Based_Buffer_Overflow__CWE135_84_badD2Ev) loc(#loc107)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":35:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":25:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":26:12)
#loc14 = loc("./CWE122_Heap_Based_Buffer_Overflow__CWE135_84.h":34:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":34:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":28:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":28:71)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":28:46)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":28:53)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":28:56)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":28:70)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":29:46)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":29:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":29:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":29:36)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":29:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":29:43)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":29:42)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":30:17)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":30:32)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":30:38)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":30:41)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":30:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":31:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":31:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":31:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":31:26)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":31:27)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":33:24)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":33:9)
#loc44 = loc("/usr/include/string.h":407:1)
#loc45 = loc("/usr/include/string.h":408:33)
#loc46 = loc("/usr/include/stdlib.h":675:1)
#loc47 = loc("/usr/include/stdlib.h":676:14)
#loc48 = loc("/usr/include/wchar.h":98:1)
#loc49 = loc("/usr/include/wchar.h":100:14)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("/usr/include/stdlib.h":687:1)
#loc53 = loc("/usr/include/stdlib.h":687:32)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":37:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":48:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":38:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":39:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":47:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":41:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":41:45)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":42:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":42:64)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":41:26)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":41:41)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":42:31)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":42:38)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":42:46)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":42:49)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":42:63)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":43:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":43:37)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":43:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":43:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":43:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":43:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":43:34)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":43:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":44:33)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":44:50)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":44:15)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":45:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":45:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":46:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_84_bad.cpp":46:14)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc3, #loc4])
#loc88 = loc(fused[#loc5, #loc6])
#loc89 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc15, #loc13])
#loc92 = loc(fused[#loc16, #loc17])
#loc93 = loc(fused[#loc18, #loc19])
#loc94 = loc(fused[#loc22, #loc23])
#loc95 = loc(fused[#loc21, #loc23])
#loc96 = loc(fused[#loc20, #loc19])
#loc97 = loc(fused[#loc24, #loc25])
#loc98 = loc(fused[#loc26, #loc27])
#loc99 = loc(fused[#loc28, #loc25])
#loc100 = loc(fused[#loc38, #loc37])
#loc101 = loc(fused[#loc43, #loc42])
#loc102 = loc(fused[#loc44, #loc45])
#loc103 = loc(fused[#loc46, #loc47])
#loc104 = loc(fused[#loc48, #loc49])
#loc105 = loc(fused[#loc50, #loc51])
#loc106 = loc(fused[#loc52, #loc53])
#loc107 = loc(fused[#loc54, #loc55])
#loc108 = loc(fused[#loc58, #loc59])
#loc109 = loc(fused[#loc60, #loc61])
#loc110 = loc(fused[#loc62, #loc63])
#loc111 = loc(fused[#loc67, #loc68])
#loc112 = loc(fused[#loc69, #loc70])
#loc113 = loc(fused[#loc71, #loc72])
#loc114 = loc(fused[#loc73, #loc74])
#loc115 = loc(fused[#loc75, #loc72])
