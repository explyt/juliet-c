!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":302:10)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":302:14)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":302:20)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":302:32)
#true = #cir.bool<true> : !cir.bool
#loc583 = loc(fused[#loc137, #loc138])
#loc584 = loc(fused[#loc139, #loc140])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc527)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc528)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc529)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc530)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc531)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc532)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc533)
  cir.func private @printIntLine(!s32i) loc(#loc534)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc18)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc535)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc537)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc538)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc31)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc540)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc543)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc543)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc543)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc40)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc40)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc40)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc40)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc40)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc40)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc40)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc40)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc529)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc41)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc42)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc43)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc545)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc47)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc48)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc547)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc51)
            } loc(#loc546)
          } loc(#loc544)
        } loc(#loc542)
      } loc(#loc541)
    } loc(#loc539)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc55)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc549)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc552)
          %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc553)
          %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc63)
          %10 = cir.const #cir.int<10> : !s32i loc(#loc64)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc64)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc554)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc555)
          %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc556)
          cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc553)
          cir.scope {
            %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc70)
            %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc558)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc72)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc73)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc74)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
            } loc(#loc559)
          } loc(#loc557)
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc77)
            cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc561)
            cir.for : cond {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc80)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc562)
              cir.condition(%22) loc(#loc81)
            } body {
              cir.scope {
                %20 = cir.const #cir.int<0> : !s32i loc(#loc83)
                %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
                %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc86)
                cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc564)
              } loc(#loc563)
              cir.yield loc(#loc76)
            } step {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc88)
              cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc565)
              cir.yield loc(#loc560)
            } loc(#loc560)
          } loc(#loc560)
          cir.scope {
            %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc92)
            %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc567)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc96)
              %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc99)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc569)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc102)
                cir.store %26, %7 : !s32i, !cir.ptr<!s32i> loc(#loc571)
                cir.for : cond {
                  %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc105)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc572)
                  cir.condition(%29) loc(#loc106)
                } body {
                  cir.scope {
                    %27 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
                    %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc110)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc111)
                  } loc(#loc573)
                  cir.yield loc(#loc101)
                } step {
                  %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc113)
                  cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc574)
                  cir.yield loc(#loc570)
                } loc(#loc570)
              } loc(#loc570)
            } else {
              %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc18)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc18)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc114)
            } loc(#loc568)
          } loc(#loc566)
          %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc115)
          %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc116)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc116)
          cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc115)
        } loc(#loc551)
      } loc(#loc550)
    } loc(#loc548)
    cir.return loc(#loc22)
  } loc(#loc536)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc576)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc119)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc577)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc121)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc578)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc123)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc579)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc125)
    cir.return loc(#loc118)
  } loc(#loc575)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc580)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc581)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc134)
  cir.func @main(%arg0: !s32i loc(fused[#loc137, #loc138]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc139, #loc140])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc583)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc584)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc136)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc141)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc142)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc143)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc143)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc144)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc131)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc585)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good() : () -> () loc(#loc146)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc132)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc133)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc149)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc586)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad() : () -> () loc(#loc150)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc134)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc134)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc153)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc587)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc587)
    cir.return %17 : !s32i loc(#loc587)
  } loc(#loc582)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc156)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc589)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc162)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc590)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc166)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc167)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc592)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc595)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc595)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc595)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc175)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc176)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc176)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc176)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc176)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc176)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc176)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc176)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc176)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc529)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc177)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc178)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc179)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc179)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc597)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc183)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc184)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc599)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc187)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc187)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc188)
            } loc(#loc598)
          } loc(#loc596)
        } loc(#loc594)
      } loc(#loc593)
    } loc(#loc591)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc191)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc192)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc601)
      cir.if %6 {
        %7 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc196)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc604)
          %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc605)
          %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc203)
          %10 = cir.const #cir.int<10> : !s32i loc(#loc204)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc204)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc606)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc607)
          %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc203)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc608)
          cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc605)
          cir.scope {
            %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc210)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc210)
            %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc610)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc212)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc213)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc214)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc212)
            } loc(#loc611)
          } loc(#loc609)
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc217)
            cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc613)
            cir.for : cond {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc219)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc220)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc614)
              cir.condition(%22) loc(#loc221)
            } body {
              cir.scope {
                %20 = cir.const #cir.int<0> : !s32i loc(#loc223)
                %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc224)
                %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc225)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc226)
                cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc616)
              } loc(#loc615)
              cir.yield loc(#loc216)
            } step {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc228)
              cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc617)
              cir.yield loc(#loc612)
            } loc(#loc612)
          } loc(#loc612)
          cir.scope {
            %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc231)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc232)
            %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc619)
            %22 = cir.ternary(%21, true {
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc234)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc235)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc620)
              %26 = cir.ternary(%25, true {
                %27 = cir.const #true loc(#loc233)
                cir.yield %27 : !cir.bool loc(#loc233)
              }, false {
                %27 = cir.const #false loc(#loc233)
                cir.yield %27 : !cir.bool loc(#loc233)
              }) : (!cir.bool) -> !cir.bool loc(#loc233)
              cir.yield %26 : !cir.bool loc(#loc233)
            }, false {
              %23 = cir.const #false loc(#loc233)
              cir.yield %23 : !cir.bool loc(#loc233)
            }) : (!cir.bool) -> !cir.bool loc(#loc233)
            cir.if %22 {
              %23 = cir.const #cir.int<1> : !s32i loc(#loc240)
              %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc241)
              %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc242)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc243)
              cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc622)
              cir.scope {
                %27 = cir.const #cir.int<0> : !s32i loc(#loc246)
                cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc624)
                cir.for : cond {
                  %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc248)
                  %29 = cir.const #cir.int<10> : !s32i loc(#loc249)
                  %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc625)
                  cir.condition(%30) loc(#loc250)
                } body {
                  cir.scope {
                    %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc252)
                    %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc253)
                    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc254)
                    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc252)
                    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc255)
                  } loc(#loc626)
                  cir.yield loc(#loc245)
                } step {
                  %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc256)
                  %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc257)
                  cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc627)
                  cir.yield loc(#loc623)
                } loc(#loc623)
              } loc(#loc623)
            } else {
              %23 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc156)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc156)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc258)
            } loc(#loc621)
          } loc(#loc618)
          %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc259)
          %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc260)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc260)
          cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc259)
        } loc(#loc603)
      } loc(#loc602)
    } loc(#loc600)
    cir.return loc(#loc158)
  } loc(#loc588)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc629)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc265)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc266)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc630)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc270)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc271)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc632)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc635)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc635)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc635)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc279)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc280)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc280)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc280)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc280)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc280)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc280)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc280)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc280)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc529)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc281)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc282)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc283)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc283)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc637)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc287)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc288)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc639)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc291)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc291)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc292)
            } loc(#loc638)
          } loc(#loc636)
        } loc(#loc634)
      } loc(#loc633)
    } loc(#loc631)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc295)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc296)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc641)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc644)
          %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc645)
          %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc304)
          %10 = cir.const #cir.int<10> : !s32i loc(#loc305)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc305)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc646)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc647)
          %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc304)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc648)
          cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc645)
          cir.scope {
            %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc310)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc311)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc311)
            %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc650)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc313)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc314)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc315)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc313)
            } loc(#loc651)
          } loc(#loc649)
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc318)
            cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc653)
            cir.for : cond {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc320)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc321)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc654)
              cir.condition(%22) loc(#loc322)
            } body {
              cir.scope {
                %20 = cir.const #cir.int<0> : !s32i loc(#loc324)
                %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc325)
                %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc326)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc327)
                cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc656)
              } loc(#loc655)
              cir.yield loc(#loc317)
            } step {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc328)
              %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc329)
              cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc657)
              cir.yield loc(#loc652)
            } loc(#loc652)
          } loc(#loc652)
          cir.scope {
            %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc332)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc333)
            %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc659)
            %22 = cir.ternary(%21, true {
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc335)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc336)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc660)
              %26 = cir.ternary(%25, true {
                %27 = cir.const #true loc(#loc334)
                cir.yield %27 : !cir.bool loc(#loc334)
              }, false {
                %27 = cir.const #false loc(#loc334)
                cir.yield %27 : !cir.bool loc(#loc334)
              }) : (!cir.bool) -> !cir.bool loc(#loc334)
              cir.yield %26 : !cir.bool loc(#loc334)
            }, false {
              %23 = cir.const #false loc(#loc334)
              cir.yield %23 : !cir.bool loc(#loc334)
            }) : (!cir.bool) -> !cir.bool loc(#loc334)
            cir.if %22 {
              %23 = cir.const #cir.int<1> : !s32i loc(#loc341)
              %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc342)
              %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc343)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc344)
              cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc662)
              cir.scope {
                %27 = cir.const #cir.int<0> : !s32i loc(#loc347)
                cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc664)
                cir.for : cond {
                  %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc349)
                  %29 = cir.const #cir.int<10> : !s32i loc(#loc350)
                  %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc665)
                  cir.condition(%30) loc(#loc351)
                } body {
                  cir.scope {
                    %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc353)
                    %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc354)
                    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc355)
                    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc353)
                    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc356)
                  } loc(#loc666)
                  cir.yield loc(#loc346)
                } step {
                  %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc357)
                  %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc358)
                  cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc667)
                  cir.yield loc(#loc663)
                } loc(#loc663)
              } loc(#loc663)
            } else {
              %23 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc359)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc359)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc360)
            } loc(#loc661)
          } loc(#loc658)
          %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc361)
          %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc362)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc362)
          cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc361)
        } loc(#loc643)
      } loc(#loc642)
    } loc(#loc640)
    cir.return loc(#loc262)
  } loc(#loc628)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc669)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc367)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc368)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc670)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc372)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc373)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc672)
      cir.if %6 {
        %7 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc377)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc377)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc378)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc379)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc674)
      } loc(#loc673)
    } loc(#loc671)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc383)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc384)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc676)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc679)
          %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc680)
          %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc392)
          %10 = cir.const #cir.int<10> : !s32i loc(#loc393)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc393)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc681)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc682)
          %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc392)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc683)
          cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc680)
          cir.scope {
            %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc398)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc399)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc399)
            %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc685)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc401)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc402)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc403)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc401)
            } loc(#loc686)
          } loc(#loc684)
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc406)
            cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc688)
            cir.for : cond {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc408)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc409)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc689)
              cir.condition(%22) loc(#loc410)
            } body {
              cir.scope {
                %20 = cir.const #cir.int<0> : !s32i loc(#loc412)
                %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc413)
                %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc414)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc415)
                cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc691)
              } loc(#loc690)
              cir.yield loc(#loc405)
            } step {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc416)
              %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc417)
              cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc692)
              cir.yield loc(#loc687)
            } loc(#loc687)
          } loc(#loc687)
          cir.scope {
            %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc420)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc421)
            %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc694)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc425)
              %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc426)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc427)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc428)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc696)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc431)
                cir.store %26, %7 : !s32i, !cir.ptr<!s32i> loc(#loc698)
                cir.for : cond {
                  %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc433)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc434)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc699)
                  cir.condition(%29) loc(#loc435)
                } body {
                  cir.scope {
                    %27 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc437)
                    %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc438)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc439)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc437)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc440)
                  } loc(#loc700)
                  cir.yield loc(#loc430)
                } step {
                  %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc441)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc442)
                  cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc701)
                  cir.yield loc(#loc697)
                } loc(#loc697)
              } loc(#loc697)
            } else {
              %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc443)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc443)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc444)
            } loc(#loc695)
          } loc(#loc693)
          %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc445)
          %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc446)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc446)
          cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc445)
        } loc(#loc678)
      } loc(#loc677)
    } loc(#loc675)
    cir.return loc(#loc364)
  } loc(#loc668)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc703)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc451)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc452)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc704)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc456)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc457)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc706)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc459)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc708)
      } loc(#loc707)
    } loc(#loc705)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc527)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc463)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc464)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc710)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc713)
          %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc714)
          %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc472)
          %10 = cir.const #cir.int<10> : !s32i loc(#loc473)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc473)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc715)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc716)
          %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc472)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc717)
          cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc714)
          cir.scope {
            %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc478)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc479)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc479)
            %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc719)
            cir.if %22 {
              %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc481)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc482)
              %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc483)
              cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc481)
            } loc(#loc720)
          } loc(#loc718)
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc486)
            cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc722)
            cir.for : cond {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc488)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc489)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc723)
              cir.condition(%22) loc(#loc490)
            } body {
              cir.scope {
                %20 = cir.const #cir.int<0> : !s32i loc(#loc492)
                %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc493)
                %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc494)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc495)
                cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc725)
              } loc(#loc724)
              cir.yield loc(#loc485)
            } step {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc496)
              %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc497)
              cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc726)
              cir.yield loc(#loc721)
            } loc(#loc721)
          } loc(#loc721)
          cir.scope {
            %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc500)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc501)
            %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc728)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc505)
              %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc506)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc507)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc508)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc730)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc511)
                cir.store %26, %7 : !s32i, !cir.ptr<!s32i> loc(#loc732)
                cir.for : cond {
                  %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc513)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc514)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc733)
                  cir.condition(%29) loc(#loc515)
                } body {
                  cir.scope {
                    %27 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc517)
                    %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc518)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc519)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc517)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc520)
                  } loc(#loc734)
                  cir.yield loc(#loc510)
                } step {
                  %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc521)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc522)
                  cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc735)
                  cir.yield loc(#loc731)
                } loc(#loc731)
              } loc(#loc731)
            } else {
              %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc523)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc523)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc524)
            } loc(#loc729)
          } loc(#loc727)
          %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc525)
          %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc526)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc526)
          cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc525)
        } loc(#loc712)
      } loc(#loc711)
    } loc(#loc709)
    cir.return loc(#loc448)
  } loc(#loc702)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":25:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":46:27)
#loc12 = loc("/usr/include/stdlib.h":672:1)
#loc13 = loc("/usr/include/stdlib.h":672:45)
#loc14 = loc("/usr/include/stdlib.h":756:1)
#loc15 = loc("/usr/include/stdlib.h":756:70)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":74:27)
#loc19 = loc("/usr/include/stdlib.h":687:1)
#loc20 = loc("/usr/include/stdlib.h":687:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":29:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":79:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":31:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":31:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":33:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":33:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":33:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":34:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":49:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":34:8)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":34:20)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":35:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":36:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":48:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":37:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":37:49)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":39:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":47:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":39:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":39:36)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":39:53)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":39:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":39:63)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":40:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":43:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":45:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":42:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":42:24)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":42:17)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":42:40)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":46:17)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":50:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":78:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":50:8)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":50:20)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":51:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":52:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":77:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":53:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":53:17)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":54:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":54:58)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":54:35)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":54:42)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":54:47)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":54:57)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":55:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":55:43)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":55:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":55:27)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":55:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":55:34)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":55:40)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":55:39)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":57:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":60:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":57:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":57:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":57:25)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":57:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":57:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":58:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":59:29)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":59:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":59:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":59:25)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":57:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":57:33)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":63:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":75:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":63:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":63:25)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":64:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":71:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":73:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":65:32)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":65:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":65:24)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":65:28)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":67:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":70:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":67:25)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":67:21)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":67:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":67:32)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":67:30)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":68:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":69:34)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":69:41)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":69:42)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":69:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":67:37)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":67:36)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":74:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":76:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":76:18)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":285:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":291:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":287:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":287:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":288:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":288:14)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":289:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":289:14)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":290:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":290:14)
#loc127 = loc("/usr/include/stdlib.h":575:1)
#loc128 = loc("/usr/include/stdlib.h":575:41)
#loc129 = loc("/usr/include/time.h":76:1)
#loc130 = loc("/usr/include/time.h":76:38)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":307:15)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":309:15)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":312:15)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":314:15)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":302:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":317:1)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":303:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":305:27)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":305:22)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":305:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":307:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":308:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":308:63)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":309:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":312:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":313:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":313:62)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":314:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":316:12)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":316:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":110:19)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":135:27)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":86:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":140:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":88:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":88:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":90:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":90:12)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":90:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":91:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":106:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":91:8)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":91:20)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":92:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":93:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":105:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":94:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":94:49)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":96:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":104:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":96:23)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":96:36)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":96:53)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":96:17)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":96:63)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":97:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":100:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":102:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":99:29)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":99:24)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":99:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":99:40)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":103:27)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":103:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":107:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":139:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":107:8)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":107:20)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":108:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":111:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":113:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":110:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":114:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":138:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":115:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":115:17)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":116:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":116:58)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":116:35)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":116:42)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":116:47)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":116:57)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":117:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":117:43)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":117:17)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":117:27)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":117:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":117:34)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":117:40)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":117:39)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":119:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":122:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":119:22)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":119:18)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":119:25)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":119:29)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":119:27)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":120:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":121:29)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":121:17)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":121:24)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":121:25)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":119:34)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":119:33)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":124:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":136:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":124:17)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":124:25)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":124:27)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":124:30)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":124:38)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":124:40)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":125:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":132:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":134:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":126:32)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":126:17)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":126:24)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":126:28)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":128:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":131:17)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":128:25)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":128:21)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":128:28)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":128:32)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":128:30)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":129:17)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":130:34)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":130:41)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":130:42)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":130:21)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":128:37)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":128:36)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":135:17)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":137:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":137:18)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":143:1)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":192:1)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":145:5)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":145:9)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":147:13)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":147:12)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":147:5)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":148:5)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":163:5)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":148:8)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":148:20)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":149:5)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":150:9)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":162:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":151:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":151:49)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":153:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":161:13)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":153:23)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":153:36)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":153:53)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":153:17)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":153:63)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":154:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":157:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":159:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":156:29)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":156:24)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":156:17)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":156:40)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":160:27)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":160:17)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":164:5)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":191:5)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":164:8)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":164:20)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":165:5)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":166:9)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":190:9)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":167:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":167:17)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":168:13)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":168:58)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":168:35)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":168:42)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":168:47)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":168:57)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":169:13)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":169:43)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":169:17)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":169:27)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":169:33)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":169:34)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":169:40)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":169:39)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":171:13)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":174:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":171:22)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":171:18)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":171:25)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":171:29)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":171:27)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":172:13)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":173:29)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":173:17)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":173:24)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":173:25)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":171:34)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":171:33)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":176:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":188:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":176:17)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":176:25)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":176:27)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":176:30)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":176:38)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":176:40)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":177:13)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":184:13)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":186:13)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":178:32)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":178:17)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":178:24)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":178:28)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":180:17)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":183:17)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":180:25)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":180:21)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":180:28)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":180:32)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":180:30)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":181:17)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":182:34)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":182:41)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":182:42)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":182:21)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":180:37)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":180:36)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":187:27)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":187:17)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":189:13)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":189:18)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":195:1)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":240:1)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":197:5)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":197:9)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":199:13)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":199:12)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":199:5)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":200:5)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":210:5)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":200:8)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":200:20)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":201:5)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":204:5)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":206:5)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":203:19)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":203:9)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":209:16)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":209:9)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":211:5)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":239:5)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":211:8)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":211:20)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":212:5)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":213:9)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":238:9)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":214:13)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":214:17)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":215:13)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":215:58)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":215:35)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":215:42)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":215:47)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":215:57)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":216:13)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":216:43)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":216:17)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":216:27)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":216:33)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":216:34)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":216:40)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":216:39)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":218:13)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":221:13)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":218:22)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":218:18)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":218:25)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":218:29)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":218:27)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":219:13)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":220:29)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":220:17)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":220:24)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":220:25)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":218:34)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":218:33)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":224:13)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":236:13)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":224:17)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":224:25)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":225:13)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":232:13)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":234:13)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":226:32)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":226:17)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":226:24)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":226:28)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":228:17)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":231:17)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":228:25)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":228:21)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":228:28)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":228:32)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":228:30)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":229:17)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":230:34)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":230:41)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":230:42)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":230:21)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":228:37)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":228:36)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":235:27)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":235:17)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":237:13)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":237:18)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":243:1)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":283:1)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":245:5)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":245:9)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":247:13)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":247:12)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":247:5)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":248:5)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":253:5)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":248:8)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":248:20)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":249:5)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":252:16)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":252:9)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":254:5)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":282:5)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":254:8)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":254:20)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":255:5)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":256:9)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":281:9)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":257:13)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":257:17)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":258:13)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":258:58)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":258:35)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":258:42)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":258:47)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":258:57)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":259:13)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":259:43)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":259:17)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":259:27)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":259:33)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":259:34)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":259:40)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":259:39)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":261:13)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":264:13)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":261:22)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":261:18)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":261:25)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":261:29)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":261:27)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":262:13)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":263:29)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":263:17)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":263:24)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":263:25)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":261:34)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":261:33)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":267:13)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":279:13)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":267:17)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":267:25)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":268:13)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":275:13)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":277:13)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":269:32)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":269:17)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":269:24)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":269:28)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":271:17)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":274:17)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":271:25)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":271:21)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":271:28)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":271:32)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":271:30)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":272:17)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":273:34)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":273:41)
#loc519 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":273:42)
#loc520 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":273:21)
#loc521 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":271:37)
#loc522 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":271:36)
#loc523 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":278:27)
#loc524 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":278:17)
#loc525 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":280:13)
#loc526 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c":280:18)
#loc527 = loc(fused[#loc1, #loc2])
#loc528 = loc(fused[#loc3, #loc4])
#loc529 = loc(fused[#loc5, #loc6])
#loc530 = loc(fused[#loc7, #loc8])
#loc531 = loc(fused[#loc9, #loc10])
#loc532 = loc(fused[#loc12, #loc13])
#loc533 = loc(fused[#loc14, #loc15])
#loc534 = loc(fused[#loc16, #loc17])
#loc535 = loc(fused[#loc19, #loc20])
#loc536 = loc(fused[#loc21, #loc22])
#loc537 = loc(fused[#loc23, #loc24])
#loc538 = loc(fused[#loc27, #loc25])
#loc539 = loc(fused[#loc28, #loc29])
#loc540 = loc(fused[#loc30, #loc31])
#loc541 = loc(fused[#loc32, #loc29])
#loc542 = loc(fused[#loc33, #loc34])
#loc543 = loc(fused[#loc35, #loc36])
#loc544 = loc(fused[#loc37, #loc38])
#loc545 = loc(fused[#loc42, #loc43])
#loc546 = loc(fused[#loc44, #loc45, #loc46, #loc38])
#loc547 = loc(fused[#loc49, #loc50])
#loc548 = loc(fused[#loc52, #loc53])
#loc549 = loc(fused[#loc54, #loc55])
#loc550 = loc(fused[#loc56, #loc53])
#loc551 = loc(fused[#loc57, #loc58])
#loc552 = loc(fused[#loc59, #loc60])
#loc553 = loc(fused[#loc61, #loc62])
#loc554 = loc(fused[#loc65, #loc66])
#loc555 = loc(fused[#loc64, #loc66])
#loc556 = loc(fused[#loc63, #loc62])
#loc557 = loc(fused[#loc67, #loc68])
#loc558 = loc(fused[#loc69, #loc70])
#loc559 = loc(fused[#loc71, #loc68])
#loc560 = loc(fused[#loc75, #loc76])
#loc561 = loc(fused[#loc78, #loc77])
#loc562 = loc(fused[#loc79, #loc80])
#loc563 = loc(fused[#loc82, #loc76])
#loc564 = loc(fused[#loc84, #loc83])
#loc565 = loc(fused[#loc88, #loc87])
#loc566 = loc(fused[#loc89, #loc90])
#loc567 = loc(fused[#loc91, #loc92])
#loc568 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc569 = loc(fused[#loc97, #loc96])
#loc570 = loc(fused[#loc100, #loc101])
#loc571 = loc(fused[#loc103, #loc102])
#loc572 = loc(fused[#loc104, #loc105])
#loc573 = loc(fused[#loc107, #loc101])
#loc574 = loc(fused[#loc113, #loc112])
#loc575 = loc(fused[#loc117, #loc118])
#loc576 = loc(fused[#loc119, #loc120])
#loc577 = loc(fused[#loc121, #loc122])
#loc578 = loc(fused[#loc123, #loc124])
#loc579 = loc(fused[#loc125, #loc126])
#loc580 = loc(fused[#loc127, #loc128])
#loc581 = loc(fused[#loc129, #loc130])
#loc582 = loc(fused[#loc135, #loc136])
#loc585 = loc(fused[#loc146, #loc147])
#loc586 = loc(fused[#loc150, #loc151])
#loc587 = loc(fused[#loc154, #loc153])
#loc588 = loc(fused[#loc157, #loc158])
#loc589 = loc(fused[#loc159, #loc160])
#loc590 = loc(fused[#loc163, #loc161])
#loc591 = loc(fused[#loc164, #loc165])
#loc592 = loc(fused[#loc166, #loc167])
#loc593 = loc(fused[#loc168, #loc165])
#loc594 = loc(fused[#loc169, #loc170])
#loc595 = loc(fused[#loc171, #loc172])
#loc596 = loc(fused[#loc173, #loc174])
#loc597 = loc(fused[#loc178, #loc179])
#loc598 = loc(fused[#loc180, #loc181, #loc182, #loc174])
#loc599 = loc(fused[#loc185, #loc186])
#loc600 = loc(fused[#loc189, #loc190])
#loc601 = loc(fused[#loc191, #loc192])
#loc602 = loc(fused[#loc193, #loc194, #loc195, #loc190])
#loc603 = loc(fused[#loc197, #loc198])
#loc604 = loc(fused[#loc199, #loc200])
#loc605 = loc(fused[#loc201, #loc202])
#loc606 = loc(fused[#loc205, #loc206])
#loc607 = loc(fused[#loc204, #loc206])
#loc608 = loc(fused[#loc203, #loc202])
#loc609 = loc(fused[#loc207, #loc208])
#loc610 = loc(fused[#loc209, #loc210])
#loc611 = loc(fused[#loc211, #loc208])
#loc612 = loc(fused[#loc215, #loc216])
#loc613 = loc(fused[#loc218, #loc217])
#loc614 = loc(fused[#loc219, #loc220])
#loc615 = loc(fused[#loc222, #loc216])
#loc616 = loc(fused[#loc224, #loc223])
#loc617 = loc(fused[#loc228, #loc227])
#loc618 = loc(fused[#loc229, #loc230])
#loc619 = loc(fused[#loc231, #loc232])
#loc620 = loc(fused[#loc234, #loc236])
#loc621 = loc(fused[#loc237, #loc238, #loc239, #loc230])
#loc622 = loc(fused[#loc241, #loc240])
#loc623 = loc(fused[#loc244, #loc245])
#loc624 = loc(fused[#loc247, #loc246])
#loc625 = loc(fused[#loc248, #loc249])
#loc626 = loc(fused[#loc251, #loc245])
#loc627 = loc(fused[#loc257, #loc256])
#loc628 = loc(fused[#loc261, #loc262])
#loc629 = loc(fused[#loc263, #loc264])
#loc630 = loc(fused[#loc267, #loc265])
#loc631 = loc(fused[#loc268, #loc269])
#loc632 = loc(fused[#loc270, #loc271])
#loc633 = loc(fused[#loc272, #loc269])
#loc634 = loc(fused[#loc273, #loc274])
#loc635 = loc(fused[#loc275, #loc276])
#loc636 = loc(fused[#loc277, #loc278])
#loc637 = loc(fused[#loc282, #loc283])
#loc638 = loc(fused[#loc284, #loc285, #loc286, #loc278])
#loc639 = loc(fused[#loc289, #loc290])
#loc640 = loc(fused[#loc293, #loc294])
#loc641 = loc(fused[#loc295, #loc296])
#loc642 = loc(fused[#loc297, #loc294])
#loc643 = loc(fused[#loc298, #loc299])
#loc644 = loc(fused[#loc300, #loc301])
#loc645 = loc(fused[#loc302, #loc303])
#loc646 = loc(fused[#loc306, #loc307])
#loc647 = loc(fused[#loc305, #loc307])
#loc648 = loc(fused[#loc304, #loc303])
#loc649 = loc(fused[#loc308, #loc309])
#loc650 = loc(fused[#loc310, #loc311])
#loc651 = loc(fused[#loc312, #loc309])
#loc652 = loc(fused[#loc316, #loc317])
#loc653 = loc(fused[#loc319, #loc318])
#loc654 = loc(fused[#loc320, #loc321])
#loc655 = loc(fused[#loc323, #loc317])
#loc656 = loc(fused[#loc325, #loc324])
#loc657 = loc(fused[#loc329, #loc328])
#loc658 = loc(fused[#loc330, #loc331])
#loc659 = loc(fused[#loc332, #loc333])
#loc660 = loc(fused[#loc335, #loc337])
#loc661 = loc(fused[#loc338, #loc339, #loc340, #loc331])
#loc662 = loc(fused[#loc342, #loc341])
#loc663 = loc(fused[#loc345, #loc346])
#loc664 = loc(fused[#loc348, #loc347])
#loc665 = loc(fused[#loc349, #loc350])
#loc666 = loc(fused[#loc352, #loc346])
#loc667 = loc(fused[#loc358, #loc357])
#loc668 = loc(fused[#loc363, #loc364])
#loc669 = loc(fused[#loc365, #loc366])
#loc670 = loc(fused[#loc369, #loc367])
#loc671 = loc(fused[#loc370, #loc371])
#loc672 = loc(fused[#loc372, #loc373])
#loc673 = loc(fused[#loc374, #loc375, #loc376, #loc371])
#loc674 = loc(fused[#loc380, #loc379])
#loc675 = loc(fused[#loc381, #loc382])
#loc676 = loc(fused[#loc383, #loc384])
#loc677 = loc(fused[#loc385, #loc382])
#loc678 = loc(fused[#loc386, #loc387])
#loc679 = loc(fused[#loc388, #loc389])
#loc680 = loc(fused[#loc390, #loc391])
#loc681 = loc(fused[#loc394, #loc395])
#loc682 = loc(fused[#loc393, #loc395])
#loc683 = loc(fused[#loc392, #loc391])
#loc684 = loc(fused[#loc396, #loc397])
#loc685 = loc(fused[#loc398, #loc399])
#loc686 = loc(fused[#loc400, #loc397])
#loc687 = loc(fused[#loc404, #loc405])
#loc688 = loc(fused[#loc407, #loc406])
#loc689 = loc(fused[#loc408, #loc409])
#loc690 = loc(fused[#loc411, #loc405])
#loc691 = loc(fused[#loc413, #loc412])
#loc692 = loc(fused[#loc417, #loc416])
#loc693 = loc(fused[#loc418, #loc419])
#loc694 = loc(fused[#loc420, #loc421])
#loc695 = loc(fused[#loc422, #loc423, #loc424, #loc419])
#loc696 = loc(fused[#loc426, #loc425])
#loc697 = loc(fused[#loc429, #loc430])
#loc698 = loc(fused[#loc432, #loc431])
#loc699 = loc(fused[#loc433, #loc434])
#loc700 = loc(fused[#loc436, #loc430])
#loc701 = loc(fused[#loc442, #loc441])
#loc702 = loc(fused[#loc447, #loc448])
#loc703 = loc(fused[#loc449, #loc450])
#loc704 = loc(fused[#loc453, #loc451])
#loc705 = loc(fused[#loc454, #loc455])
#loc706 = loc(fused[#loc456, #loc457])
#loc707 = loc(fused[#loc458, #loc455])
#loc708 = loc(fused[#loc460, #loc459])
#loc709 = loc(fused[#loc461, #loc462])
#loc710 = loc(fused[#loc463, #loc464])
#loc711 = loc(fused[#loc465, #loc462])
#loc712 = loc(fused[#loc466, #loc467])
#loc713 = loc(fused[#loc468, #loc469])
#loc714 = loc(fused[#loc470, #loc471])
#loc715 = loc(fused[#loc474, #loc475])
#loc716 = loc(fused[#loc473, #loc475])
#loc717 = loc(fused[#loc472, #loc471])
#loc718 = loc(fused[#loc476, #loc477])
#loc719 = loc(fused[#loc478, #loc479])
#loc720 = loc(fused[#loc480, #loc477])
#loc721 = loc(fused[#loc484, #loc485])
#loc722 = loc(fused[#loc487, #loc486])
#loc723 = loc(fused[#loc488, #loc489])
#loc724 = loc(fused[#loc491, #loc485])
#loc725 = loc(fused[#loc493, #loc492])
#loc726 = loc(fused[#loc497, #loc496])
#loc727 = loc(fused[#loc498, #loc499])
#loc728 = loc(fused[#loc500, #loc501])
#loc729 = loc(fused[#loc502, #loc503, #loc504, #loc499])
#loc730 = loc(fused[#loc506, #loc505])
#loc731 = loc(fused[#loc509, #loc510])
#loc732 = loc(fused[#loc512, #loc511])
#loc733 = loc(fused[#loc513, #loc514])
#loc734 = loc(fused[#loc516, #loc510])
#loc735 = loc(fused[#loc522, #loc521])
