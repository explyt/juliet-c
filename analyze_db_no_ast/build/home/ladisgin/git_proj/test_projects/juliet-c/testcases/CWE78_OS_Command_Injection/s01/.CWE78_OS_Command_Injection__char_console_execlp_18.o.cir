!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execlp_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc107)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc108)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc109)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc111)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc12)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc13)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execlp_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc113)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc114)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc115)
    %3 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc114)
    cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc114)
    %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc22)
    cir.store %4, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc116)
    cir.goto "source" loc(#loc117)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc26)
    %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc27)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc27)
    cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc115)
    cir.scope {
      %17 = cir.const #cir.int<100> : !s32i loc(#loc31)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc31)
      %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc32)
      %20 = cir.binop(sub, %18, %19) : !u64i loc(#loc119)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc33)
      %23 = cir.cmp(gt, %20, %22) : !u64i, !s32i loc(#loc120)
      %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc34)
      cir.if %24 {
        cir.scope {
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
          %26 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc39)
          %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !u64i), !cir.ptr<!s8i> loc(#loc40)
          %28 = cir.const #cir.int<100> : !s32i loc(#loc41)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc41)
          %30 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %31 = cir.binop(sub, %29, %30) : !u64i loc(#loc123)
          %32 = cir.cast(integral, %31 : !u64i), !s32i loc(#loc123)
          %33 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc109)
          %34 = cir.load %33 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc43)
          %35 = cir.call @fgets(%27, %32, %34) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc44)
          %36 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
          %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc45)
          %38 = cir.cmp(ne, %35, %37) : !cir.ptr<!s8i>, !s32i loc(#loc124)
          %39 = cir.cast(int_to_bool, %38 : !s32i), !cir.bool loc(#loc46)
          cir.if %39 {
            %40 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc50)
            %41 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
            %42 = cir.call @strlen(%41) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc50)
            cir.store %42, %2 : !u64i, !cir.ptr<!u64i> loc(#loc126)
            cir.scope {
              %43 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc56)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc57)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc57)
              %46 = cir.cmp(gt, %43, %45) : !u64i, !s32i loc(#loc128)
              %47 = cir.cast(int_to_bool, %46 : !s32i), !cir.bool loc(#loc58)
              %48 = cir.ternary(%47, true {
                %49 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
                %50 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc61)
                %51 = cir.const #cir.int<1> : !s32i loc(#loc62)
                %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc62)
                %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc129)
                %54 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %53 : !u64i), !cir.ptr<!s8i> loc(#loc63)
                %55 = cir.load %54 : !cir.ptr<!s8i>, !s8i loc(#loc60)
                %56 = cir.cast(integral, %55 : !s8i), !s32i loc(#loc60)
                %57 = cir.const #cir.int<10> : !s32i loc(#loc64)
                %58 = cir.cmp(eq, %56, %57) : !s32i, !s32i loc(#loc130)
                %59 = cir.cast(int_to_bool, %58 : !s32i), !cir.bool loc(#loc65)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc59)
                  cir.yield %61 : !cir.bool loc(#loc59)
                }, false {
                  %61 = cir.const #false loc(#loc59)
                  cir.yield %61 : !cir.bool loc(#loc59)
                }) : (!cir.bool) -> !cir.bool loc(#loc59)
                cir.yield %60 : !cir.bool loc(#loc59)
              }, false {
                %49 = cir.const #false loc(#loc59)
                cir.yield %49 : !cir.bool loc(#loc59)
              }) : (!cir.bool) -> !cir.bool loc(#loc59)
              cir.if %48 {
                %49 = cir.const #cir.int<0> : !s32i loc(#loc67)
                %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc67)
                %51 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
                %52 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc69)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc70)
                %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc70)
                %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc132)
                %56 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %55 : !u64i), !cir.ptr<!s8i> loc(#loc71)
                cir.store %50, %56 : !s8i, !cir.ptr<!s8i> loc(#loc133)
              } loc(#loc131)
            } loc(#loc127)
          } else {
            %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc9)
            %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc72)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc73)
            %43 = cir.cast(integral, %42 : !s32i), !s8i loc(#loc73)
            %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
            %45 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc75)
            %46 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc76)
            cir.store %43, %46 : !s8i, !cir.ptr<!s8i> loc(#loc134)
          } loc(#loc125)
        } loc(#loc122)
      } loc(#loc121)
    } loc(#loc118)
    %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc12)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc12)
    %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc77)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc77)
    %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc13)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc13)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
    %16 = cir.call @execlp(%9, %11, %13, %14, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc80)
    cir.return loc(#loc15)
  } loc(#loc112)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execlp_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc82)
  } loc(#loc135)
  cir.func private  @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc137)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc87)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc140)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc140)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc140)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc94)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    cir.goto "source" loc(#loc142)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc98)
    %4 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc99)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
    %6 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc87)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc87)
    %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc99)
    %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc101)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc101)
    %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc102)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc102)
    %13 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc103)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc103)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc105)
    %17 = cir.call @execlp(%10, %12, %14, %15, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc106)
    cir.return loc(#loc89)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execlp_18.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":71:27)
#loc10 = loc("/usr/include/unistd.h":605:1)
#loc11 = loc("/usr/include/unistd.h":606:14)
#loc12 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":80:12)
#loc13 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":80:38)
#loc14 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":45:1)
#loc15 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":81:1)
#loc16 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":47:5)
#loc17 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":47:12)
#loc18 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":48:5)
#loc19 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":48:28)
#loc20 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":54:9)
#loc21 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":54:37)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":49:12)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":49:5)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":50:5)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":50:10)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":51:1)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":54:26)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":54:33)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":56:9)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":75:9)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":56:13)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":56:17)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":56:27)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":56:25)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":57:9)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:13)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":74:13)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:23)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:28)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:27)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:43)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:47)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:57)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:17)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:67)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":59:64)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":60:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":68:13)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":70:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":63:27)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":63:34)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":63:17)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":63:38)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:17)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":67:17)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:21)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:31)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:29)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:33)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:36)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:41)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:49)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:50)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:55)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":64:52)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":65:17)
#loc67 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":66:39)
#loc68 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":66:21)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":66:26)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":66:34)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":66:35)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":71:17)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":73:33)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":73:17)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":73:22)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":73:29)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":80:25)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":80:52)
#loc79 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":80:66)
#loc80 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":80:5)
#loc81 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":103:1)
#loc82 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":106:1)
#loc83 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":105:5)
#loc84 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":105:13)
#loc85 = loc("/usr/include/string.h":149:1)
#loc86 = loc("/usr/include/string.h":150:14)
#loc87 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":96:18)
#loc88 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":88:1)
#loc89 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":101:1)
#loc90 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":90:5)
#loc91 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":90:12)
#loc92 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":91:5)
#loc93 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":91:28)
#loc94 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":92:12)
#loc95 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":92:5)
#loc96 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":93:5)
#loc97 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":93:10)
#loc98 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":94:1)
#loc99 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":96:5)
#loc100 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":96:12)
#loc101 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":100:12)
#loc102 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":100:25)
#loc103 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":100:38)
#loc104 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":100:52)
#loc105 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":100:66)
#loc106 = loc("CWE78_OS_Command_Injection__char_console_execlp_18.c":100:5)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc10, #loc11])
#loc112 = loc(fused[#loc14, #loc15])
#loc113 = loc(fused[#loc16, #loc17])
#loc114 = loc(fused[#loc18, #loc19])
#loc115 = loc(fused[#loc20, #loc21])
#loc116 = loc(fused[#loc23, #loc22])
#loc117 = loc(fused[#loc24, #loc25])
#loc118 = loc(fused[#loc29, #loc30])
#loc119 = loc(fused[#loc31, #loc32])
#loc120 = loc(fused[#loc31, #loc33])
#loc121 = loc(fused[#loc35, #loc30])
#loc122 = loc(fused[#loc36, #loc37])
#loc123 = loc(fused[#loc41, #loc42])
#loc124 = loc(fused[#loc44, #loc45])
#loc125 = loc(fused[#loc47, #loc48, #loc49, #loc37])
#loc126 = loc(fused[#loc52, #loc53])
#loc127 = loc(fused[#loc54, #loc55])
#loc128 = loc(fused[#loc56, #loc57])
#loc129 = loc(fused[#loc61, #loc62])
#loc130 = loc(fused[#loc60, #loc64])
#loc131 = loc(fused[#loc66, #loc55])
#loc132 = loc(fused[#loc69, #loc70])
#loc133 = loc(fused[#loc68, #loc67])
#loc134 = loc(fused[#loc74, #loc73])
#loc135 = loc(fused[#loc81, #loc82])
#loc136 = loc(fused[#loc83, #loc84])
#loc137 = loc(fused[#loc85, #loc86])
#loc138 = loc(fused[#loc88, #loc89])
#loc139 = loc(fused[#loc90, #loc91])
#loc140 = loc(fused[#loc92, #loc93])
#loc141 = loc(fused[#loc95, #loc94])
#loc142 = loc(fused[#loc96, #loc97])
