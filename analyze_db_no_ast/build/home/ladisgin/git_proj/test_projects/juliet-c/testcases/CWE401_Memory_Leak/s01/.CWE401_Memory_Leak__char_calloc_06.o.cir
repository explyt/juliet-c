!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc197)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc198)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc199)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc200)
  cir.func no_proto  @CWE401_Memory_Leak__char_calloc_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc205)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc22)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc23)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc207)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc208)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc211)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc32)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc36)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
          } loc(#loc212)
        } loc(#loc210)
        %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc37)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
        %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
        %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc37)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc40)
      } loc(#loc206)
    } loc(#loc204)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc43)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc44)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc214)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc45)
      cir.if %5 {
      } loc(#loc215)
    } loc(#loc213)
    cir.return loc(#loc11)
  } loc(#loc201)
  cir.func no_proto  @CWE401_Memory_Leak__char_calloc_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc48)
  } loc(#loc216)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc57)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc221)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc64)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc68)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc69)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc226)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc70)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc72)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc73)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc73)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc228)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc72)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc229)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc230)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc81)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc232)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc82)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc84)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc85)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc86)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc84)
          } loc(#loc233)
        } loc(#loc231)
        %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc87)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
        %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc89)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc89)
        %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc87)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc91)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc94)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc95)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc235)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc96)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc57)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc57)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc100)
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc101)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc102)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc101)
      } loc(#loc236)
    } loc(#loc234)
    cir.return loc(#loc61)
  } loc(#loc222)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc107)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc239)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc112)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc241)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc113)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc115)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc116)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc116)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc243)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc244)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc124)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc247)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc125)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc127)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc128)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc129)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc127)
          } loc(#loc248)
        } loc(#loc246)
        %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc130)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
        %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc132)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc132)
        %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc130)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc134)
      } loc(#loc242)
    } loc(#loc240)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc137)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc138)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc250)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc139)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc141)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc141)
      } loc(#loc251)
    } loc(#loc249)
    cir.return loc(#loc104)
  } loc(#loc237)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc147)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc254)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc151)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc152)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc256)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc153)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc157)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc157)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc158)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc159)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc159)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc159)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc159)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc159)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc159)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc159)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc258)
        %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc161)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc163)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc163)
        %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc161)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc165)
      } loc(#loc257)
    } loc(#loc255)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc168)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc169)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc260)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc170)
      cir.if %5 {
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc144)
  } loc(#loc252)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc263)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc176)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc180)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc181)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc266)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc182)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc184)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc184)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc184)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc184)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc184)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc184)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc268)
        %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc186)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc188)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc188)
        %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc186)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc190)
      } loc(#loc267)
    } loc(#loc265)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc193)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc194)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc270)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc195)
      cir.if %5 {
      } loc(#loc271)
    } loc(#loc269)
    cir.return loc(#loc173)
  } loc(#loc262)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_calloc_06.c":39:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_calloc_06.c":29:1)
#loc11 = loc("CWE401_Memory_Leak__char_calloc_06.c":47:1)
#loc12 = loc("CWE401_Memory_Leak__char_calloc_06.c":31:5)
#loc13 = loc("CWE401_Memory_Leak__char_calloc_06.c":31:12)
#loc14 = loc("CWE401_Memory_Leak__char_calloc_06.c":32:12)
#loc15 = loc("CWE401_Memory_Leak__char_calloc_06.c":32:5)
#loc16 = loc("CWE401_Memory_Leak__char_calloc_06.c":33:5)
#loc17 = loc("CWE401_Memory_Leak__char_calloc_06.c":41:5)
#loc18 = loc("CWE401_Memory_Leak__char_calloc_06.c":33:8)
#loc19 = loc("CWE401_Memory_Leak__char_calloc_06.c":33:27)
#loc20 = loc("CWE401_Memory_Leak__char_calloc_06.c":33:25)
#loc21 = loc("CWE401_Memory_Leak__char_calloc_06.c":34:5)
#loc22 = loc("CWE401_Memory_Leak__char_calloc_06.c":36:24)
#loc23 = loc("CWE401_Memory_Leak__char_calloc_06.c":36:31)
#loc24 = loc("CWE401_Memory_Leak__char_calloc_06.c":36:36)
#loc25 = loc("CWE401_Memory_Leak__char_calloc_06.c":36:47)
#loc26 = loc("CWE401_Memory_Leak__char_calloc_06.c":36:48)
#loc27 = loc("CWE401_Memory_Leak__char_calloc_06.c":36:9)
#loc28 = loc("CWE401_Memory_Leak__char_calloc_06.c":37:9)
#loc29 = loc("CWE401_Memory_Leak__char_calloc_06.c":37:37)
#loc30 = loc("CWE401_Memory_Leak__char_calloc_06.c":37:13)
#loc31 = loc("CWE401_Memory_Leak__char_calloc_06.c":37:21)
#loc32 = loc("CWE401_Memory_Leak__char_calloc_06.c":37:18)
#loc33 = loc("CWE401_Memory_Leak__char_calloc_06.c":37:27)
#loc34 = loc("CWE401_Memory_Leak__char_calloc_06.c":37:28)
#loc35 = loc("CWE401_Memory_Leak__char_calloc_06.c":37:34)
#loc36 = loc("CWE401_Memory_Leak__char_calloc_06.c":37:33)
#loc37 = loc("CWE401_Memory_Leak__char_calloc_06.c":39:9)
#loc38 = loc("CWE401_Memory_Leak__char_calloc_06.c":39:16)
#loc39 = loc("CWE401_Memory_Leak__char_calloc_06.c":40:19)
#loc40 = loc("CWE401_Memory_Leak__char_calloc_06.c":40:9)
#loc41 = loc("CWE401_Memory_Leak__char_calloc_06.c":42:5)
#loc42 = loc("CWE401_Memory_Leak__char_calloc_06.c":46:5)
#loc43 = loc("CWE401_Memory_Leak__char_calloc_06.c":42:8)
#loc44 = loc("CWE401_Memory_Leak__char_calloc_06.c":42:27)
#loc45 = loc("CWE401_Memory_Leak__char_calloc_06.c":42:25)
#loc46 = loc("CWE401_Memory_Leak__char_calloc_06.c":43:5)
#loc47 = loc("CWE401_Memory_Leak__char_calloc_06.c":145:1)
#loc48 = loc("CWE401_Memory_Leak__char_calloc_06.c":151:1)
#loc49 = loc("CWE401_Memory_Leak__char_calloc_06.c":147:5)
#loc50 = loc("CWE401_Memory_Leak__char_calloc_06.c":147:14)
#loc51 = loc("CWE401_Memory_Leak__char_calloc_06.c":148:5)
#loc52 = loc("CWE401_Memory_Leak__char_calloc_06.c":148:14)
#loc53 = loc("CWE401_Memory_Leak__char_calloc_06.c":149:5)
#loc54 = loc("CWE401_Memory_Leak__char_calloc_06.c":149:14)
#loc55 = loc("CWE401_Memory_Leak__char_calloc_06.c":150:5)
#loc56 = loc("CWE401_Memory_Leak__char_calloc_06.c":150:14)
#loc57 = loc("CWE401_Memory_Leak__char_calloc_06.c":70:19)
#loc58 = loc("/usr/include/stdlib.h":687:1)
#loc59 = loc("/usr/include/stdlib.h":687:32)
#loc60 = loc("CWE401_Memory_Leak__char_calloc_06.c":54:1)
#loc61 = loc("CWE401_Memory_Leak__char_calloc_06.c":77:1)
#loc62 = loc("CWE401_Memory_Leak__char_calloc_06.c":56:5)
#loc63 = loc("CWE401_Memory_Leak__char_calloc_06.c":56:12)
#loc64 = loc("CWE401_Memory_Leak__char_calloc_06.c":57:12)
#loc65 = loc("CWE401_Memory_Leak__char_calloc_06.c":57:5)
#loc66 = loc("CWE401_Memory_Leak__char_calloc_06.c":58:5)
#loc67 = loc("CWE401_Memory_Leak__char_calloc_06.c":66:5)
#loc68 = loc("CWE401_Memory_Leak__char_calloc_06.c":58:8)
#loc69 = loc("CWE401_Memory_Leak__char_calloc_06.c":58:27)
#loc70 = loc("CWE401_Memory_Leak__char_calloc_06.c":58:25)
#loc71 = loc("CWE401_Memory_Leak__char_calloc_06.c":59:5)
#loc72 = loc("CWE401_Memory_Leak__char_calloc_06.c":61:24)
#loc73 = loc("CWE401_Memory_Leak__char_calloc_06.c":61:31)
#loc74 = loc("CWE401_Memory_Leak__char_calloc_06.c":61:36)
#loc75 = loc("CWE401_Memory_Leak__char_calloc_06.c":61:47)
#loc76 = loc("CWE401_Memory_Leak__char_calloc_06.c":61:48)
#loc77 = loc("CWE401_Memory_Leak__char_calloc_06.c":61:9)
#loc78 = loc("CWE401_Memory_Leak__char_calloc_06.c":62:9)
#loc79 = loc("CWE401_Memory_Leak__char_calloc_06.c":62:37)
#loc80 = loc("CWE401_Memory_Leak__char_calloc_06.c":62:13)
#loc81 = loc("CWE401_Memory_Leak__char_calloc_06.c":62:21)
#loc82 = loc("CWE401_Memory_Leak__char_calloc_06.c":62:18)
#loc83 = loc("CWE401_Memory_Leak__char_calloc_06.c":62:27)
#loc84 = loc("CWE401_Memory_Leak__char_calloc_06.c":62:28)
#loc85 = loc("CWE401_Memory_Leak__char_calloc_06.c":62:34)
#loc86 = loc("CWE401_Memory_Leak__char_calloc_06.c":62:33)
#loc87 = loc("CWE401_Memory_Leak__char_calloc_06.c":64:9)
#loc88 = loc("CWE401_Memory_Leak__char_calloc_06.c":64:16)
#loc89 = loc("CWE401_Memory_Leak__char_calloc_06.c":64:22)
#loc90 = loc("CWE401_Memory_Leak__char_calloc_06.c":65:19)
#loc91 = loc("CWE401_Memory_Leak__char_calloc_06.c":65:9)
#loc92 = loc("CWE401_Memory_Leak__char_calloc_06.c":67:5)
#loc93 = loc("CWE401_Memory_Leak__char_calloc_06.c":76:5)
#loc94 = loc("CWE401_Memory_Leak__char_calloc_06.c":67:8)
#loc95 = loc("CWE401_Memory_Leak__char_calloc_06.c":67:27)
#loc96 = loc("CWE401_Memory_Leak__char_calloc_06.c":67:25)
#loc97 = loc("CWE401_Memory_Leak__char_calloc_06.c":68:5)
#loc98 = loc("CWE401_Memory_Leak__char_calloc_06.c":71:5)
#loc99 = loc("CWE401_Memory_Leak__char_calloc_06.c":73:5)
#loc100 = loc("CWE401_Memory_Leak__char_calloc_06.c":70:9)
#loc101 = loc("CWE401_Memory_Leak__char_calloc_06.c":75:9)
#loc102 = loc("CWE401_Memory_Leak__char_calloc_06.c":75:14)
#loc103 = loc("CWE401_Memory_Leak__char_calloc_06.c":80:1)
#loc104 = loc("CWE401_Memory_Leak__char_calloc_06.c":98:1)
#loc105 = loc("CWE401_Memory_Leak__char_calloc_06.c":82:5)
#loc106 = loc("CWE401_Memory_Leak__char_calloc_06.c":82:12)
#loc107 = loc("CWE401_Memory_Leak__char_calloc_06.c":83:12)
#loc108 = loc("CWE401_Memory_Leak__char_calloc_06.c":83:5)
#loc109 = loc("CWE401_Memory_Leak__char_calloc_06.c":84:5)
#loc110 = loc("CWE401_Memory_Leak__char_calloc_06.c":92:5)
#loc111 = loc("CWE401_Memory_Leak__char_calloc_06.c":84:8)
#loc112 = loc("CWE401_Memory_Leak__char_calloc_06.c":84:27)
#loc113 = loc("CWE401_Memory_Leak__char_calloc_06.c":84:25)
#loc114 = loc("CWE401_Memory_Leak__char_calloc_06.c":85:5)
#loc115 = loc("CWE401_Memory_Leak__char_calloc_06.c":87:24)
#loc116 = loc("CWE401_Memory_Leak__char_calloc_06.c":87:31)
#loc117 = loc("CWE401_Memory_Leak__char_calloc_06.c":87:36)
#loc118 = loc("CWE401_Memory_Leak__char_calloc_06.c":87:47)
#loc119 = loc("CWE401_Memory_Leak__char_calloc_06.c":87:48)
#loc120 = loc("CWE401_Memory_Leak__char_calloc_06.c":87:9)
#loc121 = loc("CWE401_Memory_Leak__char_calloc_06.c":88:9)
#loc122 = loc("CWE401_Memory_Leak__char_calloc_06.c":88:37)
#loc123 = loc("CWE401_Memory_Leak__char_calloc_06.c":88:13)
#loc124 = loc("CWE401_Memory_Leak__char_calloc_06.c":88:21)
#loc125 = loc("CWE401_Memory_Leak__char_calloc_06.c":88:18)
#loc126 = loc("CWE401_Memory_Leak__char_calloc_06.c":88:27)
#loc127 = loc("CWE401_Memory_Leak__char_calloc_06.c":88:28)
#loc128 = loc("CWE401_Memory_Leak__char_calloc_06.c":88:34)
#loc129 = loc("CWE401_Memory_Leak__char_calloc_06.c":88:33)
#loc130 = loc("CWE401_Memory_Leak__char_calloc_06.c":90:9)
#loc131 = loc("CWE401_Memory_Leak__char_calloc_06.c":90:16)
#loc132 = loc("CWE401_Memory_Leak__char_calloc_06.c":90:22)
#loc133 = loc("CWE401_Memory_Leak__char_calloc_06.c":91:19)
#loc134 = loc("CWE401_Memory_Leak__char_calloc_06.c":91:9)
#loc135 = loc("CWE401_Memory_Leak__char_calloc_06.c":93:5)
#loc136 = loc("CWE401_Memory_Leak__char_calloc_06.c":97:5)
#loc137 = loc("CWE401_Memory_Leak__char_calloc_06.c":93:8)
#loc138 = loc("CWE401_Memory_Leak__char_calloc_06.c":93:27)
#loc139 = loc("CWE401_Memory_Leak__char_calloc_06.c":93:25)
#loc140 = loc("CWE401_Memory_Leak__char_calloc_06.c":94:5)
#loc141 = loc("CWE401_Memory_Leak__char_calloc_06.c":96:9)
#loc142 = loc("CWE401_Memory_Leak__char_calloc_06.c":96:14)
#loc143 = loc("CWE401_Memory_Leak__char_calloc_06.c":101:1)
#loc144 = loc("CWE401_Memory_Leak__char_calloc_06.c":123:1)
#loc145 = loc("CWE401_Memory_Leak__char_calloc_06.c":103:5)
#loc146 = loc("CWE401_Memory_Leak__char_calloc_06.c":103:12)
#loc147 = loc("CWE401_Memory_Leak__char_calloc_06.c":104:12)
#loc148 = loc("CWE401_Memory_Leak__char_calloc_06.c":104:5)
#loc149 = loc("CWE401_Memory_Leak__char_calloc_06.c":105:5)
#loc150 = loc("CWE401_Memory_Leak__char_calloc_06.c":117:5)
#loc151 = loc("CWE401_Memory_Leak__char_calloc_06.c":105:8)
#loc152 = loc("CWE401_Memory_Leak__char_calloc_06.c":105:27)
#loc153 = loc("CWE401_Memory_Leak__char_calloc_06.c":105:25)
#loc154 = loc("CWE401_Memory_Leak__char_calloc_06.c":106:5)
#loc155 = loc("CWE401_Memory_Leak__char_calloc_06.c":109:5)
#loc156 = loc("CWE401_Memory_Leak__char_calloc_06.c":111:5)
#loc157 = loc("CWE401_Memory_Leak__char_calloc_06.c":108:19)
#loc158 = loc("CWE401_Memory_Leak__char_calloc_06.c":108:9)
#loc159 = loc("CWE401_Memory_Leak__char_calloc_06.c":113:24)
#loc160 = loc("CWE401_Memory_Leak__char_calloc_06.c":113:9)
#loc161 = loc("CWE401_Memory_Leak__char_calloc_06.c":115:9)
#loc162 = loc("CWE401_Memory_Leak__char_calloc_06.c":115:16)
#loc163 = loc("CWE401_Memory_Leak__char_calloc_06.c":115:22)
#loc164 = loc("CWE401_Memory_Leak__char_calloc_06.c":116:19)
#loc165 = loc("CWE401_Memory_Leak__char_calloc_06.c":116:9)
#loc166 = loc("CWE401_Memory_Leak__char_calloc_06.c":118:5)
#loc167 = loc("CWE401_Memory_Leak__char_calloc_06.c":122:5)
#loc168 = loc("CWE401_Memory_Leak__char_calloc_06.c":118:8)
#loc169 = loc("CWE401_Memory_Leak__char_calloc_06.c":118:27)
#loc170 = loc("CWE401_Memory_Leak__char_calloc_06.c":118:25)
#loc171 = loc("CWE401_Memory_Leak__char_calloc_06.c":119:5)
#loc172 = loc("CWE401_Memory_Leak__char_calloc_06.c":126:1)
#loc173 = loc("CWE401_Memory_Leak__char_calloc_06.c":143:1)
#loc174 = loc("CWE401_Memory_Leak__char_calloc_06.c":128:5)
#loc175 = loc("CWE401_Memory_Leak__char_calloc_06.c":128:12)
#loc176 = loc("CWE401_Memory_Leak__char_calloc_06.c":129:12)
#loc177 = loc("CWE401_Memory_Leak__char_calloc_06.c":129:5)
#loc178 = loc("CWE401_Memory_Leak__char_calloc_06.c":130:5)
#loc179 = loc("CWE401_Memory_Leak__char_calloc_06.c":137:5)
#loc180 = loc("CWE401_Memory_Leak__char_calloc_06.c":130:8)
#loc181 = loc("CWE401_Memory_Leak__char_calloc_06.c":130:27)
#loc182 = loc("CWE401_Memory_Leak__char_calloc_06.c":130:25)
#loc183 = loc("CWE401_Memory_Leak__char_calloc_06.c":131:5)
#loc184 = loc("CWE401_Memory_Leak__char_calloc_06.c":133:24)
#loc185 = loc("CWE401_Memory_Leak__char_calloc_06.c":133:9)
#loc186 = loc("CWE401_Memory_Leak__char_calloc_06.c":135:9)
#loc187 = loc("CWE401_Memory_Leak__char_calloc_06.c":135:16)
#loc188 = loc("CWE401_Memory_Leak__char_calloc_06.c":135:22)
#loc189 = loc("CWE401_Memory_Leak__char_calloc_06.c":136:19)
#loc190 = loc("CWE401_Memory_Leak__char_calloc_06.c":136:9)
#loc191 = loc("CWE401_Memory_Leak__char_calloc_06.c":138:5)
#loc192 = loc("CWE401_Memory_Leak__char_calloc_06.c":142:5)
#loc193 = loc("CWE401_Memory_Leak__char_calloc_06.c":138:8)
#loc194 = loc("CWE401_Memory_Leak__char_calloc_06.c":138:27)
#loc195 = loc("CWE401_Memory_Leak__char_calloc_06.c":138:25)
#loc196 = loc("CWE401_Memory_Leak__char_calloc_06.c":139:5)
#loc197 = loc(fused[#loc1, #loc2])
#loc198 = loc(fused[#loc3, #loc4])
#loc199 = loc(fused[#loc5, #loc6])
#loc200 = loc(fused[#loc8, #loc9])
#loc201 = loc(fused[#loc10, #loc11])
#loc202 = loc(fused[#loc12, #loc13])
#loc203 = loc(fused[#loc15, #loc14])
#loc204 = loc(fused[#loc16, #loc17])
#loc205 = loc(fused[#loc18, #loc19])
#loc206 = loc(fused[#loc21, #loc17])
#loc207 = loc(fused[#loc24, #loc25])
#loc208 = loc(fused[#loc22, #loc26])
#loc209 = loc(fused[#loc27, #loc26])
#loc210 = loc(fused[#loc28, #loc29])
#loc211 = loc(fused[#loc30, #loc31])
#loc212 = loc(fused[#loc33, #loc29])
#loc213 = loc(fused[#loc41, #loc42])
#loc214 = loc(fused[#loc43, #loc44])
#loc215 = loc(fused[#loc46, #loc42])
#loc216 = loc(fused[#loc47, #loc48])
#loc217 = loc(fused[#loc49, #loc50])
#loc218 = loc(fused[#loc51, #loc52])
#loc219 = loc(fused[#loc53, #loc54])
#loc220 = loc(fused[#loc55, #loc56])
#loc221 = loc(fused[#loc58, #loc59])
#loc222 = loc(fused[#loc60, #loc61])
#loc223 = loc(fused[#loc62, #loc63])
#loc224 = loc(fused[#loc65, #loc64])
#loc225 = loc(fused[#loc66, #loc67])
#loc226 = loc(fused[#loc68, #loc69])
#loc227 = loc(fused[#loc71, #loc67])
#loc228 = loc(fused[#loc74, #loc75])
#loc229 = loc(fused[#loc72, #loc76])
#loc230 = loc(fused[#loc77, #loc76])
#loc231 = loc(fused[#loc78, #loc79])
#loc232 = loc(fused[#loc80, #loc81])
#loc233 = loc(fused[#loc83, #loc79])
#loc234 = loc(fused[#loc92, #loc93])
#loc235 = loc(fused[#loc94, #loc95])
#loc236 = loc(fused[#loc97, #loc98, #loc99, #loc93])
#loc237 = loc(fused[#loc103, #loc104])
#loc238 = loc(fused[#loc105, #loc106])
#loc239 = loc(fused[#loc108, #loc107])
#loc240 = loc(fused[#loc109, #loc110])
#loc241 = loc(fused[#loc111, #loc112])
#loc242 = loc(fused[#loc114, #loc110])
#loc243 = loc(fused[#loc117, #loc118])
#loc244 = loc(fused[#loc115, #loc119])
#loc245 = loc(fused[#loc120, #loc119])
#loc246 = loc(fused[#loc121, #loc122])
#loc247 = loc(fused[#loc123, #loc124])
#loc248 = loc(fused[#loc126, #loc122])
#loc249 = loc(fused[#loc135, #loc136])
#loc250 = loc(fused[#loc137, #loc138])
#loc251 = loc(fused[#loc140, #loc136])
#loc252 = loc(fused[#loc143, #loc144])
#loc253 = loc(fused[#loc145, #loc146])
#loc254 = loc(fused[#loc148, #loc147])
#loc255 = loc(fused[#loc149, #loc150])
#loc256 = loc(fused[#loc151, #loc152])
#loc257 = loc(fused[#loc154, #loc155, #loc156, #loc150])
#loc258 = loc(fused[#loc160, #loc159])
#loc259 = loc(fused[#loc166, #loc167])
#loc260 = loc(fused[#loc168, #loc169])
#loc261 = loc(fused[#loc171, #loc167])
#loc262 = loc(fused[#loc172, #loc173])
#loc263 = loc(fused[#loc174, #loc175])
#loc264 = loc(fused[#loc177, #loc176])
#loc265 = loc(fused[#loc178, #loc179])
#loc266 = loc(fused[#loc180, #loc181])
#loc267 = loc(fused[#loc183, #loc179])
#loc268 = loc(fused[#loc185, #loc184])
#loc269 = loc(fused[#loc191, #loc192])
#loc270 = loc(fused[#loc193, #loc194])
#loc271 = loc(fused[#loc196, #loc192])
