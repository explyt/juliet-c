!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__addition_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc78)
  cir.func private @printIntLine(!s32i) loc(#loc79)
  cir.func no_proto @CWE398_Poor_Code_Quality__addition_11_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc82)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc82)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc9)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc9)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc85)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc86)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc87)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc15)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc85)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc16)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc86)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc17)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc87)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc19)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc21)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc20)
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc23)
        } loc(#loc84)
      } loc(#loc83)
    } loc(#loc81)
    cir.return loc(#loc6)
  } loc(#loc80)
  cir.func no_proto @CWE398_Poor_Code_Quality__addition_11_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc89)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc90)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc88)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc91)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc95)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc95)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc39)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc39)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc34)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc34)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc44)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc98)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc99)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc100)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc48)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc98)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc49)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc99)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc50)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc100)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc52)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc53)
          cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc101)
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc57)
        } loc(#loc97)
      } loc(#loc96)
    } loc(#loc94)
    cir.return loc(#loc36)
  } loc(#loc93)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc104)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc104)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc62)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc62)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc107)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc108)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc109)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc68)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc107)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc69)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc108)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc70)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc109)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc71)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc72)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc73)
          %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc73)
          cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc110)
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc76)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc77)
        } loc(#loc106)
      } loc(#loc105)
    } loc(#loc103)
    cir.return loc(#loc59)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__addition_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE398_Poor_Code_Quality__addition_11.c":20:1)
#loc6 = loc("CWE398_Poor_Code_Quality__addition_11.c":32:1)
#loc7 = loc("CWE398_Poor_Code_Quality__addition_11.c":22:5)
#loc8 = loc("CWE398_Poor_Code_Quality__addition_11.c":31:5)
#loc9 = loc("CWE398_Poor_Code_Quality__addition_11.c":22:8)
#loc10 = loc("CWE398_Poor_Code_Quality__addition_11.c":22:26)
#loc11 = loc("CWE398_Poor_Code_Quality__addition_11.c":23:5)
#loc12 = loc("CWE398_Poor_Code_Quality__addition_11.c":24:9)
#loc13 = loc("CWE398_Poor_Code_Quality__addition_11.c":30:9)
#loc14 = loc("CWE398_Poor_Code_Quality__addition_11.c":25:13)
#loc15 = loc("CWE398_Poor_Code_Quality__addition_11.c":25:26)
#loc16 = loc("CWE398_Poor_Code_Quality__addition_11.c":25:38)
#loc17 = loc("CWE398_Poor_Code_Quality__addition_11.c":25:50)
#loc18 = loc("CWE398_Poor_Code_Quality__addition_11.c":26:26)
#loc19 = loc("CWE398_Poor_Code_Quality__addition_11.c":26:13)
#loc20 = loc("CWE398_Poor_Code_Quality__addition_11.c":28:13)
#loc21 = loc("CWE398_Poor_Code_Quality__addition_11.c":28:22)
#loc22 = loc("CWE398_Poor_Code_Quality__addition_11.c":29:26)
#loc23 = loc("CWE398_Poor_Code_Quality__addition_11.c":29:13)
#loc24 = loc("CWE398_Poor_Code_Quality__addition_11.c":73:1)
#loc25 = loc("CWE398_Poor_Code_Quality__addition_11.c":77:1)
#loc26 = loc("CWE398_Poor_Code_Quality__addition_11.c":75:5)
#loc27 = loc("CWE398_Poor_Code_Quality__addition_11.c":75:11)
#loc28 = loc("CWE398_Poor_Code_Quality__addition_11.c":76:5)
#loc29 = loc("CWE398_Poor_Code_Quality__addition_11.c":76:11)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE398_Poor_Code_Quality__addition_11.c":44:19)
#loc35 = loc("CWE398_Poor_Code_Quality__addition_11.c":39:1)
#loc36 = loc("CWE398_Poor_Code_Quality__addition_11.c":56:1)
#loc37 = loc("CWE398_Poor_Code_Quality__addition_11.c":41:5)
#loc38 = loc("CWE398_Poor_Code_Quality__addition_11.c":55:5)
#loc39 = loc("CWE398_Poor_Code_Quality__addition_11.c":41:8)
#loc40 = loc("CWE398_Poor_Code_Quality__addition_11.c":41:27)
#loc41 = loc("CWE398_Poor_Code_Quality__addition_11.c":42:5)
#loc42 = loc("CWE398_Poor_Code_Quality__addition_11.c":45:5)
#loc43 = loc("CWE398_Poor_Code_Quality__addition_11.c":47:5)
#loc44 = loc("CWE398_Poor_Code_Quality__addition_11.c":44:9)
#loc45 = loc("CWE398_Poor_Code_Quality__addition_11.c":48:9)
#loc46 = loc("CWE398_Poor_Code_Quality__addition_11.c":54:9)
#loc47 = loc("CWE398_Poor_Code_Quality__addition_11.c":49:13)
#loc48 = loc("CWE398_Poor_Code_Quality__addition_11.c":49:26)
#loc49 = loc("CWE398_Poor_Code_Quality__addition_11.c":49:38)
#loc50 = loc("CWE398_Poor_Code_Quality__addition_11.c":49:50)
#loc51 = loc("CWE398_Poor_Code_Quality__addition_11.c":50:26)
#loc52 = loc("CWE398_Poor_Code_Quality__addition_11.c":50:13)
#loc53 = loc("CWE398_Poor_Code_Quality__addition_11.c":52:22)
#loc54 = loc("CWE398_Poor_Code_Quality__addition_11.c":52:31)
#loc55 = loc("CWE398_Poor_Code_Quality__addition_11.c":52:13)
#loc56 = loc("CWE398_Poor_Code_Quality__addition_11.c":53:26)
#loc57 = loc("CWE398_Poor_Code_Quality__addition_11.c":53:13)
#loc58 = loc("CWE398_Poor_Code_Quality__addition_11.c":59:1)
#loc59 = loc("CWE398_Poor_Code_Quality__addition_11.c":71:1)
#loc60 = loc("CWE398_Poor_Code_Quality__addition_11.c":61:5)
#loc61 = loc("CWE398_Poor_Code_Quality__addition_11.c":70:5)
#loc62 = loc("CWE398_Poor_Code_Quality__addition_11.c":61:8)
#loc63 = loc("CWE398_Poor_Code_Quality__addition_11.c":61:26)
#loc64 = loc("CWE398_Poor_Code_Quality__addition_11.c":62:5)
#loc65 = loc("CWE398_Poor_Code_Quality__addition_11.c":63:9)
#loc66 = loc("CWE398_Poor_Code_Quality__addition_11.c":69:9)
#loc67 = loc("CWE398_Poor_Code_Quality__addition_11.c":64:13)
#loc68 = loc("CWE398_Poor_Code_Quality__addition_11.c":64:26)
#loc69 = loc("CWE398_Poor_Code_Quality__addition_11.c":64:38)
#loc70 = loc("CWE398_Poor_Code_Quality__addition_11.c":64:50)
#loc71 = loc("CWE398_Poor_Code_Quality__addition_11.c":65:26)
#loc72 = loc("CWE398_Poor_Code_Quality__addition_11.c":65:13)
#loc73 = loc("CWE398_Poor_Code_Quality__addition_11.c":67:22)
#loc74 = loc("CWE398_Poor_Code_Quality__addition_11.c":67:31)
#loc75 = loc("CWE398_Poor_Code_Quality__addition_11.c":67:13)
#loc76 = loc("CWE398_Poor_Code_Quality__addition_11.c":68:26)
#loc77 = loc("CWE398_Poor_Code_Quality__addition_11.c":68:13)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc9, #loc10])
#loc83 = loc(fused[#loc11, #loc8])
#loc84 = loc(fused[#loc12, #loc13])
#loc85 = loc(fused[#loc14, #loc15])
#loc86 = loc(fused[#loc14, #loc16])
#loc87 = loc(fused[#loc14, #loc17])
#loc88 = loc(fused[#loc24, #loc25])
#loc89 = loc(fused[#loc26, #loc27])
#loc90 = loc(fused[#loc28, #loc29])
#loc91 = loc(fused[#loc30, #loc31])
#loc92 = loc(fused[#loc32, #loc33])
#loc93 = loc(fused[#loc35, #loc36])
#loc94 = loc(fused[#loc37, #loc38])
#loc95 = loc(fused[#loc39, #loc40])
#loc96 = loc(fused[#loc41, #loc42, #loc43, #loc38])
#loc97 = loc(fused[#loc45, #loc46])
#loc98 = loc(fused[#loc47, #loc48])
#loc99 = loc(fused[#loc47, #loc49])
#loc100 = loc(fused[#loc47, #loc50])
#loc101 = loc(fused[#loc55, #loc54])
#loc102 = loc(fused[#loc58, #loc59])
#loc103 = loc(fused[#loc60, #loc61])
#loc104 = loc(fused[#loc62, #loc63])
#loc105 = loc(fused[#loc64, #loc61])
#loc106 = loc(fused[#loc65, #loc66])
#loc107 = loc(fused[#loc67, #loc68])
#loc108 = loc(fused[#loc67, #loc69])
#loc109 = loc(fused[#loc67, #loc70])
#loc110 = loc(fused[#loc75, #loc74])
