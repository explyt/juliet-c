!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc51 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":112:10)
#loc52 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":112:14)
#loc53 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":112:20)
#loc54 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":112:32)
!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType = !cir.struct<union "CWE191_Integer_Underflow__short_rand_multiply_34_unionType" {!s16i, !s16i}>
#loc154 = loc(fused[#loc51, #loc52])
#loc155 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc133)
  cir.func private @printIntLine(!s32i) loc(#loc134)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_multiply_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc136)
    %1 = cir.alloca !ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType, !cir.ptr<!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType>, ["myUnion"] {alignment = 2 : i64} loc(#loc137)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc138)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc13)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
    %8 = cir.ternary(%7, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc13)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc13)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc13)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc13)
      cir.yield %24 : !u32i loc(#loc13)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc13)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc13)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc13)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc13)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc13)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc13)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc13)
      cir.yield %28 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc13)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc13)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc139)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc15)
    %12 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType> -> !cir.ptr<!s16i> loc(#loc16)
    cir.store %11, %12 : !s16i, !cir.ptr<!s16i> loc(#loc140)
    cir.scope {
      %13 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc142)
      %14 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType> -> !cir.ptr<!s16i> loc(#loc22)
      %15 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc21)
      cir.store %15, %13 : !s16i, !cir.ptr<!s16i> loc(#loc142)
      cir.scope {
        %16 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc25)
        %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc25)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc144)
        cir.if %19 {
          %20 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc146)
          %21 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc30)
          %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc30)
          %23 = cir.const #cir.int<2> : !s32i loc(#loc29)
          %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc30)
          %25 = cir.cast(integral, %24 : !s32i), !s16i loc(#loc30)
          cir.store %25, %20 : !s16i, !cir.ptr<!s16i> loc(#loc146)
          %26 = cir.load %20 : !cir.ptr<!s16i>, !s16i loc(#loc31)
          %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc31)
          cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc32)
        } loc(#loc145)
      } loc(#loc143)
    } loc(#loc141)
    cir.return loc(#loc6)
  } loc(#loc135)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_multiply_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc147)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc150)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc151)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE191_Integer_Underflow__short_rand_multiply_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE191_Integer_Underflow__short_rand_multiply_34_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE191_Integer_Underflow__short_rand_multiply_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call @CWE191_Integer_Underflow__short_rand_multiply_34_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.return %17 : !s32i loc(#loc158)
  } loc(#loc153)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc160)
    %1 = cir.alloca !ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType, !cir.ptr<!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType>, ["myUnion"] {alignment = 2 : i64} loc(#loc161)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc75)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc162)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc78)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc78)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc163)
    %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc80)
    %8 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType> -> !cir.ptr<!s16i> loc(#loc16)
    cir.store %7, %8 : !s16i, !cir.ptr<!s16i> loc(#loc164)
    cir.scope {
      %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc166)
      %10 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType> -> !cir.ptr<!s16i> loc(#loc22)
      %11 = cir.load %10 : !cir.ptr<!s16i>, !s16i loc(#loc85)
      cir.store %11, %9 : !s16i, !cir.ptr<!s16i> loc(#loc166)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc88)
        %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc88)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc89)
        %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc168)
        cir.if %15 {
          %16 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc170)
          %17 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc93)
          %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc93)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc92)
          %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc93)
          %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc93)
          cir.store %21, %16 : !s16i, !cir.ptr<!s16i> loc(#loc170)
          %22 = cir.load %16 : !cir.ptr<!s16i>, !s16i loc(#loc94)
          %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc94)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc95)
        } loc(#loc169)
      } loc(#loc167)
    } loc(#loc165)
    cir.return loc(#loc70)
  } loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc96)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc172)
    %1 = cir.alloca !ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType, !cir.ptr<!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType>, ["myUnion"] {alignment = 2 : i64} loc(#loc173)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc103)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc103)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc174)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc105)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc105)
    %8 = cir.ternary(%7, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc105)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc105)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc105)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc105)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc105)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc105)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc105)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc105)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc105)
      cir.yield %24 : !u32i loc(#loc105)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc105)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc105)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc105)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc105)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc105)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc105)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc105)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc105)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc105)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc105)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc105)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc105)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc105)
      cir.yield %28 : !u32i loc(#loc105)
    }) : (!cir.bool) -> !u32i loc(#loc105)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc105)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc105)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc175)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc107)
    %12 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType> -> !cir.ptr<!s16i> loc(#loc16)
    cir.store %11, %12 : !s16i, !cir.ptr<!s16i> loc(#loc176)
    cir.scope {
      %13 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc178)
      %14 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE191_Integer_Underflow__short_rand_multiply_34_unionType> -> !cir.ptr<!s16i> loc(#loc22)
      %15 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc112)
      cir.store %15, %13 : !s16i, !cir.ptr<!s16i> loc(#loc178)
      cir.scope {
        %16 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc115)
        %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc115)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc116)
        %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc180)
        cir.if %19 {
          cir.scope {
            %20 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc120)
            %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc120)
            %22 = cir.const #cir.int<32767> : !s32i loc(#loc121)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc121)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc121)
            %26 = cir.const #cir.int<2> : !s32i loc(#loc122)
            %27 = cir.binop(div, %25, %26) : !s32i loc(#loc183)
            %28 = cir.cmp(gt, %21, %27) : !s32i, !cir.bool loc(#loc184)
            cir.if %28 {
              %29 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc186)
              %30 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc129)
              %31 = cir.cast(integral, %30 : !s16i), !s32i loc(#loc129)
              %32 = cir.const #cir.int<2> : !s32i loc(#loc128)
              %33 = cir.binop(mul, %31, %32) nsw : !s32i loc(#loc129)
              %34 = cir.cast(integral, %33 : !s32i), !s16i loc(#loc129)
              cir.store %34, %29 : !s16i, !cir.ptr<!s16i> loc(#loc186)
              %35 = cir.load %29 : !cir.ptr<!s16i>, !s16i loc(#loc130)
              %36 = cir.cast(integral, %35 : !s16i), !s32i loc(#loc130)
              cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc131)
            } else {
              %29 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc96)
              %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc96)
              cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc132)
            } loc(#loc185)
          } loc(#loc182)
        } loc(#loc181)
      } loc(#loc179)
    } loc(#loc177)
    cir.return loc(#loc98)
  } loc(#loc171)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":28:1)
#loc6 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":45:1)
#loc7 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":30:5)
#loc8 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":30:11)
#loc9 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":31:5)
#loc10 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":31:64)
#loc11 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":32:12)
#loc12 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":32:5)
#loc13 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":34:19)
#loc14 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":34:5)
#loc15 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":35:26)
#loc16 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":22:11)
#loc17 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":35:5)
#loc18 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":36:5)
#loc19 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":44:5)
#loc20 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":37:9)
#loc21 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":37:30)
#loc22 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":23:11)
#loc23 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":38:9)
#loc24 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":43:9)
#loc25 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":38:12)
#loc26 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":38:19)
#loc27 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":39:9)
#loc28 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":41:13)
#loc29 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":41:35)
#loc30 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":41:28)
#loc31 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":42:26)
#loc32 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":42:13)
#loc33 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":98:1)
#loc34 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":102:1)
#loc35 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":100:5)
#loc36 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":100:13)
#loc37 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":101:5)
#loc38 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":101:13)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":117:15)
#loc46 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":119:15)
#loc47 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":122:15)
#loc48 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":124:15)
#loc49 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":112:1)
#loc50 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":127:1)
#loc55 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":113:1)
#loc56 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":115:27)
#loc57 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":115:22)
#loc58 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":115:5)
#loc59 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":117:5)
#loc60 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":118:5)
#loc61 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":118:59)
#loc62 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":119:5)
#loc63 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":122:5)
#loc64 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":123:5)
#loc65 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":123:58)
#loc66 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":124:5)
#loc67 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":126:12)
#loc68 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":126:5)
#loc69 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":52:1)
#loc70 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":69:1)
#loc71 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":54:5)
#loc72 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":54:11)
#loc73 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":55:5)
#loc74 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":55:64)
#loc75 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":56:12)
#loc76 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":56:5)
#loc77 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":58:13)
#loc78 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":58:12)
#loc79 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":58:5)
#loc80 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":59:26)
#loc81 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":59:5)
#loc82 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":60:5)
#loc83 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":68:5)
#loc84 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":61:9)
#loc85 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":61:30)
#loc86 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":62:9)
#loc87 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":67:9)
#loc88 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":62:12)
#loc89 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":62:19)
#loc90 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":63:9)
#loc91 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":65:13)
#loc92 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":65:35)
#loc93 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":65:28)
#loc94 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":66:26)
#loc95 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":66:13)
#loc96 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":92:27)
#loc97 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":72:1)
#loc98 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":96:1)
#loc99 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":74:5)
#loc100 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":74:11)
#loc101 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":75:5)
#loc102 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":75:64)
#loc103 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":76:12)
#loc104 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":76:5)
#loc105 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":78:19)
#loc106 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":78:5)
#loc107 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":79:26)
#loc108 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":79:5)
#loc109 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":80:5)
#loc110 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":95:5)
#loc111 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":81:9)
#loc112 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":81:30)
#loc113 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":82:9)
#loc114 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":94:9)
#loc115 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":82:12)
#loc116 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":82:19)
#loc117 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":83:9)
#loc118 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":85:13)
#loc119 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":93:13)
#loc120 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":85:17)
#loc121 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":85:25)
#loc122 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":85:34)
#loc123 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":85:35)
#loc124 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":86:13)
#loc125 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":89:13)
#loc126 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":91:13)
#loc127 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":87:17)
#loc128 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":87:39)
#loc129 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":87:32)
#loc130 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":88:30)
#loc131 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":88:17)
#loc132 = loc("CWE191_Integer_Underflow__short_rand_multiply_34.c":92:17)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc12, #loc11])
#loc139 = loc(fused[#loc14, #loc13])
#loc140 = loc(fused[#loc17, #loc15])
#loc141 = loc(fused[#loc18, #loc19])
#loc142 = loc(fused[#loc20, #loc21])
#loc143 = loc(fused[#loc23, #loc24])
#loc144 = loc(fused[#loc25, #loc26])
#loc145 = loc(fused[#loc27, #loc24])
#loc146 = loc(fused[#loc28, #loc29])
#loc147 = loc(fused[#loc33, #loc34])
#loc148 = loc(fused[#loc35, #loc36])
#loc149 = loc(fused[#loc37, #loc38])
#loc150 = loc(fused[#loc39, #loc40])
#loc151 = loc(fused[#loc41, #loc42])
#loc152 = loc(fused[#loc43, #loc44])
#loc153 = loc(fused[#loc49, #loc50])
#loc156 = loc(fused[#loc60, #loc61])
#loc157 = loc(fused[#loc64, #loc65])
#loc158 = loc(fused[#loc68, #loc67])
#loc159 = loc(fused[#loc69, #loc70])
#loc160 = loc(fused[#loc71, #loc72])
#loc161 = loc(fused[#loc73, #loc74])
#loc162 = loc(fused[#loc76, #loc75])
#loc163 = loc(fused[#loc79, #loc77])
#loc164 = loc(fused[#loc81, #loc80])
#loc165 = loc(fused[#loc82, #loc83])
#loc166 = loc(fused[#loc84, #loc85])
#loc167 = loc(fused[#loc86, #loc87])
#loc168 = loc(fused[#loc88, #loc89])
#loc169 = loc(fused[#loc90, #loc87])
#loc170 = loc(fused[#loc91, #loc92])
#loc171 = loc(fused[#loc97, #loc98])
#loc172 = loc(fused[#loc99, #loc100])
#loc173 = loc(fused[#loc101, #loc102])
#loc174 = loc(fused[#loc104, #loc103])
#loc175 = loc(fused[#loc106, #loc105])
#loc176 = loc(fused[#loc108, #loc107])
#loc177 = loc(fused[#loc109, #loc110])
#loc178 = loc(fused[#loc111, #loc112])
#loc179 = loc(fused[#loc113, #loc114])
#loc180 = loc(fused[#loc115, #loc116])
#loc181 = loc(fused[#loc117, #loc114])
#loc182 = loc(fused[#loc118, #loc119])
#loc183 = loc(fused[#loc121, #loc122])
#loc184 = loc(fused[#loc120, #loc123])
#loc185 = loc(fused[#loc124, #loc125, #loc126, #loc119])
#loc186 = loc(fused[#loc127, #loc128])
