!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":24:45)
#loc6 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":24:88)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":24:92)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":31:45)
!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad = !cir.record<class "CWE126_Buffer_Overread__CWE129_rand_84::CWE126_Buffer_Overread__CWE129_rand_84_bad" {!s32i} #cir.record.decl.ast>
#loc40 = loc(fused[#loc6, #loc7])
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc38)
  cir.func @_ZN38CWE126_Buffer_Overread__CWE129_rand_8442CWE126_Buffer_Overread__CWE129_rand_84_badC2Ei(%arg0: !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad> loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":24:45), %arg1: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc40)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>> loc(#loc8)
    cir.store %arg1, %1 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>>, !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad> loc(#loc5)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad> -> !cir.ptr<!s32i> loc(#loc10)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc12)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc12)
    %9 = cir.ternary(%8, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      cir.yield %23 : !u32i loc(#loc12)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc12)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc12)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc12)
      cir.yield %27 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc12)
    %11 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad> -> !cir.ptr<!s32i> loc(#loc10)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    cir.return loc(#loc4)
  } loc(#loc39)
  cir.func private @_ZN38CWE126_Buffer_Overread__CWE129_rand_8442CWE126_Buffer_Overread__CWE129_rand_84_badC1Ei(!cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>, !s32i) alias(@_ZN38CWE126_Buffer_Overread__CWE129_rand_8442CWE126_Buffer_Overread__CWE129_rand_84_badC2Ei) loc(#loc39)
  cir.func private @printIntLine(!s32i) loc(#loc43)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc18)
  cir.func @_ZN38CWE126_Buffer_Overread__CWE129_rand_8442CWE126_Buffer_Overread__CWE129_rand_84_badD2Ev(%arg0: !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad> loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":31:45)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc21)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>> loc(#loc22)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>>, !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad> loc(#loc21)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc47)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc47)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc47)
      cir.scope {
        %4 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad> -> !cir.ptr<!s32i> loc(#loc10)
        %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc29)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc30)
        %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc49)
        cir.if %7 {
          %8 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad> -> !cir.ptr<!s32i> loc(#loc10)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          %10 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc35)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc35)
          %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc35)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc36)
        } else {
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc18)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc18)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc37)
        } loc(#loc50)
      } loc(#loc48)
    } loc(#loc46)
    cir.return loc(#loc20)
  } loc(#loc45)
  cir.func private @_ZN38CWE126_Buffer_Overread__CWE129_rand_8442CWE126_Buffer_Overread__CWE129_rand_84_badD1Ev(!cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_843A3ACWE126_Buffer_Overread__CWE129_rand_84_bad>) alias(@_ZN38CWE126_Buffer_Overread__CWE129_rand_8442CWE126_Buffer_Overread__CWE129_rand_84_badD2Ev) loc(#loc45)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":24:1)
#loc4 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":29:1)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":25:1)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":26:12)
#loc10 = loc("./CWE126_Buffer_Overread__CWE129_rand_84.h":32:9)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":26:5)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":28:12)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":28:5)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":43:23)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":31:1)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":46:1)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":32:1)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":33:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":45:5)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":34:9)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":34:30)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":37:9)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":44:9)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":37:13)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":37:21)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":38:9)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":40:9)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":42:9)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":39:33)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":39:26)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":39:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_84_bad.cpp":43:13)
#loc38 = loc(fused[#loc1, #loc2])
#loc39 = loc(fused[#loc3, #loc4])
#loc41 = loc(fused[#loc11, #loc9])
#loc42 = loc(fused[#loc13, #loc12])
#loc43 = loc(fused[#loc14, #loc15])
#loc44 = loc(fused[#loc16, #loc17])
#loc45 = loc(fused[#loc19, #loc20])
#loc46 = loc(fused[#loc23, #loc24])
#loc47 = loc(fused[#loc25, #loc26])
#loc48 = loc(fused[#loc27, #loc28])
#loc49 = loc(fused[#loc29, #loc30])
#loc50 = loc(fused[#loc31, #loc32, #loc33, #loc28])
