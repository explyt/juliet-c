!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":22:21)
#loc8 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":22:27)
#loc23 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":36:19)
#loc45 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":102:10)
#loc46 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":102:14)
#loc47 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":102:20)
#loc48 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":102:32)
#loc66 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":64:25)
#loc67 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":64:31)
#loc88 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":83:19)
#loc94 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":45:25)
#loc95 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":45:31)
#loc118 = loc(fused[#loc7, #loc8])
#loc132 = loc(fused[#loc45, #loc46])
#loc133 = loc(fused[#loc47, #loc48])
#loc138 = loc(fused[#loc66, #loc67])
#loc148 = loc(fused[#loc94, #loc95])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_sub_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc115)
  cir.func private @printIntLine(!s32i) loc(#loc116)
  cir.func internal private @badSink(%arg0: !s16i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc119)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc118)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc11)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc14)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc14)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc14)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc119)
    %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc15)
    %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc15)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc16)
    cir.br ^bb2 loc(#loc13)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc117)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_sub_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc122)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc21)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc123)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc23)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc23)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc23)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc23)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc23)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc23)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc23)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc23)
    cir.br ^bb3(%18 : !u32i) loc(#loc23)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc23)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc23)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc23)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc23)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc23)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc23)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc23)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc23)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc23)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc23)
    cir.br ^bb3(%34 : !u32i) loc(#loc23)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__short_rand_sub_41.c":36:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc23)
    %37 = cir.cast(integral, %36 : !s32i), !s16i loc(#loc23)
    cir.store %37, %0 : !s16i, !cir.ptr<!s16i> loc(#loc124)
    %38 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc25)
    cir.call @badSink(%38) : (!s16i) -> () loc(#loc26)
    cir.return loc(#loc18)
  } loc(#loc121)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_sub_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc125)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc128)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc42)
  cir.func @main(%arg0: !s32i loc(fused[#loc45, #loc46]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc49)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc51)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc51)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc52)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %8 = cir.get_global @CWE191_Integer_Underflow__short_rand_sub_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call @CWE191_Integer_Underflow__short_rand_sub_41_good() : () -> () loc(#loc54)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc41)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %13 = cir.get_global @CWE191_Integer_Underflow__short_rand_sub_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call @CWE191_Integer_Underflow__short_rand_sub_41_bad() : () -> () loc(#loc58)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    cir.return %17 : !s32i loc(#loc136)
  } loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc63)
  cir.func internal private @goodB2GSink(%arg0: !s16i loc(fused[#loc66, #loc67])) extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc139)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc138)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc70)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc73)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc73)
    %4 = cir.const #cir.int<32767> : !s32i loc(#loc74)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc74)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc74)
    %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc141)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc142)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc78)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc78)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc78)
    %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc78)
    cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc139)
    %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc79)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc79)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc80)
    cir.br ^bb4 loc(#loc76)
  ^bb3:  // pred: ^bb1
    %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc63)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc65)
  } loc(#loc137)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc144)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc86)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc145)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc88)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc88)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc88)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc88)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc88)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc88)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc88)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc88)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc88)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc88)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc88)
    cir.br ^bb3(%18 : !u32i) loc(#loc88)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc88)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc88)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc88)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc88)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc88)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc88)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc88)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc88)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc88)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc88)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc88)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc88)
    cir.br ^bb3(%34 : !u32i) loc(#loc88)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__short_rand_sub_41.c":83:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc88)
    %37 = cir.cast(integral, %36 : !s32i), !s16i loc(#loc88)
    cir.store %37, %0 : !s16i, !cir.ptr<!s16i> loc(#loc146)
    %38 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc90)
    cir.call @goodB2GSink(%38) : (!s16i) -> () loc(#loc91)
    cir.return loc(#loc83)
  } loc(#loc143)
  cir.func internal private @goodG2BSink(%arg0: !s16i loc(fused[#loc94, #loc95])) extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc149)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc148)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc98)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc101)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc101)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc101)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc101)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc149)
    %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc102)
    %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc102)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc103)
    cir.br ^bb2 loc(#loc100)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc93)
  } loc(#loc147)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc152)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc108)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc153)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc110)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc111)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc111)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc154)
    %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc113)
    cir.call @goodG2BSink(%6) : (!s16i) -> () loc(#loc114)
    cir.return loc(#loc105)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_sub_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":29:1)
#loc9 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":26:9)
#loc10 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":26:31)
#loc11 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":23:1)
#loc12 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":24:5)
#loc13 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":28:5)
#loc14 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":26:24)
#loc15 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":27:22)
#loc16 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":27:9)
#loc17 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":31:1)
#loc18 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":38:1)
#loc19 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":33:5)
#loc20 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":33:11)
#loc21 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":34:12)
#loc22 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":34:5)
#loc24 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":36:5)
#loc25 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":37:13)
#loc26 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":37:5)
#loc27 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":87:1)
#loc28 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":91:1)
#loc29 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":89:5)
#loc30 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":89:13)
#loc31 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":90:5)
#loc32 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":90:13)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":107:15)
#loc40 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":109:15)
#loc41 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":112:15)
#loc42 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":114:15)
#loc43 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":102:1)
#loc44 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":117:1)
#loc49 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":103:1)
#loc50 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":105:27)
#loc51 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":105:22)
#loc52 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":105:5)
#loc53 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":107:5)
#loc54 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":108:5)
#loc55 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":108:54)
#loc56 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":109:5)
#loc57 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":112:5)
#loc58 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":113:5)
#loc59 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":113:53)
#loc60 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":114:5)
#loc61 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":116:12)
#loc62 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":116:5)
#loc63 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":74:19)
#loc64 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":64:1)
#loc65 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":76:1)
#loc68 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":69:9)
#loc69 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":69:31)
#loc70 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":65:1)
#loc71 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":67:5)
#loc72 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":75:5)
#loc73 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":67:9)
#loc74 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":67:16)
#loc75 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":68:5)
#loc76 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":71:5)
#loc77 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":73:5)
#loc78 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":69:24)
#loc79 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":70:22)
#loc80 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":70:9)
#loc81 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":74:9)
#loc82 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":78:1)
#loc83 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":85:1)
#loc84 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":80:5)
#loc85 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":80:11)
#loc86 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":81:12)
#loc87 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":81:5)
#loc89 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":83:5)
#loc90 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":84:17)
#loc91 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":84:5)
#loc92 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":45:1)
#loc93 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":52:1)
#loc96 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":49:9)
#loc97 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":49:31)
#loc98 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":46:1)
#loc99 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":47:5)
#loc100 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":51:5)
#loc101 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":49:24)
#loc102 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":50:22)
#loc103 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":50:9)
#loc104 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":54:1)
#loc105 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":61:1)
#loc106 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":56:5)
#loc107 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":56:11)
#loc108 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":57:12)
#loc109 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":57:5)
#loc110 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":59:13)
#loc111 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":59:12)
#loc112 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":59:5)
#loc113 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":60:17)
#loc114 = loc("CWE191_Integer_Underflow__short_rand_sub_41.c":60:5)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc12, #loc13])
#loc121 = loc(fused[#loc17, #loc18])
#loc122 = loc(fused[#loc19, #loc20])
#loc123 = loc(fused[#loc22, #loc21])
#loc124 = loc(fused[#loc24, #loc23])
#loc125 = loc(fused[#loc27, #loc28])
#loc126 = loc(fused[#loc29, #loc30])
#loc127 = loc(fused[#loc31, #loc32])
#loc128 = loc(fused[#loc33, #loc34])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc37, #loc38])
#loc131 = loc(fused[#loc43, #loc44])
#loc134 = loc(fused[#loc54, #loc55])
#loc135 = loc(fused[#loc58, #loc59])
#loc136 = loc(fused[#loc62, #loc61])
#loc137 = loc(fused[#loc64, #loc65])
#loc139 = loc(fused[#loc68, #loc69])
#loc140 = loc(fused[#loc71, #loc72])
#loc141 = loc(fused[#loc73, #loc74])
#loc142 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc143 = loc(fused[#loc82, #loc83])
#loc144 = loc(fused[#loc84, #loc85])
#loc145 = loc(fused[#loc87, #loc86])
#loc146 = loc(fused[#loc89, #loc88])
#loc147 = loc(fused[#loc92, #loc93])
#loc149 = loc(fused[#loc96, #loc97])
#loc150 = loc(fused[#loc99, #loc100])
#loc151 = loc(fused[#loc104, #loc105])
#loc152 = loc(fused[#loc106, #loc107])
#loc153 = loc(fused[#loc109, #loc108])
#loc154 = loc(fused[#loc112, #loc110])
