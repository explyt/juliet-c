!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":32:16)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":116:10)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":116:14)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":116:20)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":116:32)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":59:16)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:28)
#true = #cir.bool<true> : !cir.bool
#loc141 = loc(fused[#loc46, #loc47])
#loc142 = loc(fused[#loc48, #loc49])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc124)
  cir.func private @printIntLine(!s32i) loc(#loc125)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc128)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc130)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc15)
  ^bb3:  // pred: ^bb2
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc16)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc16)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc16)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc16)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc16)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc16)
    cir.br ^bb6(%20 : !u32i) loc(#loc16)
  ^bb5:  // pred: ^bb3
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc16)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc16)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc16)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc16)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc16)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc16)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc16)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc16)
    cir.br ^bb6(%36 : !u32i) loc(#loc16)
  ^bb6(%37: !u32i loc("CWE190_Integer_Overflow__int_rand_square_16.c":32:16)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // pred: ^bb6
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc16)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc14)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc132)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc132)
  ^bb11:  // pred: ^bb10
    %39 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %40 ^bb12, ^bb15 loc(#loc21)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc133)
  ^bb13:  // pred: ^bb12
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %42 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %43 = cir.binop(mul, %41, %42) nsw : !s32i loc(#loc24)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc26)
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc27)
  ^bb15:  // 2 preds: ^bb11, ^bb14
    cir.br ^bb16 loc(#loc20)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc6)
  } loc(#loc126)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc134)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc137)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc138)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc43)
  cir.func @main(%arg0: !s32i loc(fused[#loc46, #loc47]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc48, #loc49])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc50)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc51)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc52)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc52)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc53)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc40)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_rand_square_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call @CWE190_Integer_Overflow__int_rand_square_16_good() : () -> () loc(#loc55)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc41)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc42)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_rand_square_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call @CWE190_Integer_Overflow__int_rand_square_16_bad() : () -> () loc(#loc59)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc43)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.return %17 : !s32i loc(#loc145)
  } loc(#loc140)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc148)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.br ^bb1 loc(#loc150)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc150)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc76)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc76)
  ^bb3:  // pred: ^bb2
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc77)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc77)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc77)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc77)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc77)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc77)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc77)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc77)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc77)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc77)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc77)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc77)
    cir.br ^bb6(%20 : !u32i) loc(#loc77)
  ^bb5:  // pred: ^bb3
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc77)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc77)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc77)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc77)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc77)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc77)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc77)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc77)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc77)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc77)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc77)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc77)
    cir.br ^bb6(%36 : !u32i) loc(#loc77)
  ^bb6(%37: !u32i loc("CWE190_Integer_Overflow__int_rand_square_16.c":59:16)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc77)
  ^bb7:  // pred: ^bb6
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc77)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.br ^bb8 loc(#loc79)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc75)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc152)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc152)
  ^bb11:  // pred: ^bb10
    %39 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %40 ^bb12, ^bb26 loc(#loc82)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc153)
  ^bb13:  // pred: ^bb12
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %42 = cir.const #cir.int<2147483647> : !s32i loc(#loc86)
    %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc86)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc86)
    %46 = cir.cmp(gt, %41, %45) : !s32i, !cir.bool loc(#loc154)
    cir.brcond %46 ^bb14, ^bb19 loc(#loc87)
  ^bb14:  // pred: ^bb13
    %47 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %48 = cir.abs %47 poison : !s32i loc(#loc89)
    %49 = cir.cast(integral, %48 : !s32i), !s64i loc(#loc89)
    %50 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc90)
    %51 = cir.const #cir.int<2147483647> : !s32i loc(#loc91)
    %52 = cir.cast(int_to_float, %51 : !s32i), !cir.double loc(#loc91)
    %53 = cir.call @sqrt(%52) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc90)
    %54 = cir.cast(float_to_int, %53 : !cir.double), !s64i loc(#loc90)
    %55 = cir.cmp(lt, %49, %54) : !s64i, !cir.bool loc(#loc155)
    cir.brcond %55 ^bb15, ^bb16 loc(#loc87)
  ^bb15:  // pred: ^bb14
    %56 = cir.const #true loc(#loc87)
    cir.br ^bb17(%56 : !cir.bool) loc(#loc87)
  ^bb16:  // pred: ^bb14
    %57 = cir.const #false loc(#loc87)
    cir.br ^bb17(%57 : !cir.bool) loc(#loc87)
  ^bb17(%58: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:28)):  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc87)
  ^bb18:  // pred: ^bb17
    cir.br ^bb20(%58 : !cir.bool) loc(#loc87)
  ^bb19:  // pred: ^bb13
    %59 = cir.const #false loc(#loc87)
    cir.br ^bb20(%59 : !cir.bool) loc(#loc87)
  ^bb20(%60: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:28)):  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc87)
  ^bb21:  // pred: ^bb20
    cir.brcond %60 ^bb22, ^bb23 loc(#loc156)
  ^bb22:  // pred: ^bb21
    %61 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %62 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %63 = cir.binop(mul, %61, %62) nsw : !s32i loc(#loc96)
    cir.store %63, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %64 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.call @printIntLine(%64) : (!s32i) -> () loc(#loc98)
    cir.br ^bb24 loc(#loc94)
  ^bb23:  // pred: ^bb21
    %65 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc65)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%66) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb24 loc(#loc84)
  ^bb24:  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc84)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc100)
  ^bb26:  // 2 preds: ^bb11, ^bb25
    cir.br ^bb27 loc(#loc81)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc67)
  } loc(#loc146)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc159)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc107)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.br ^bb1 loc(#loc161)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc161)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc111)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2> : !s32i loc(#loc112)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.br ^bb4 loc(#loc114)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc163)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc163)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %7 ^bb8, ^bb11 loc(#loc117)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc164)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc120)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc122)
    cir.br ^bb10 loc(#loc119)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc123)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc116)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc102)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":44:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":39:13)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":39:33)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":26:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":29:11)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":32:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":33:9)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":35:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":43:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":35:11)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":37:9)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":41:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":39:26)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":40:26)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":40:13)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":42:9)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":101:1)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":105:1)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":103:5)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":103:13)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":104:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":104:13)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":121:15)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":123:15)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":126:15)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":128:15)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":116:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":131:1)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":117:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":119:27)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":119:22)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":119:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":121:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":122:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":122:54)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":123:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":126:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":127:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":127:53)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":128:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":130:12)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":130:5)
#loc64 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":72:23)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":51:1)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":76:1)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":67:13)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":67:33)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":53:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":53:9)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":55:12)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":55:5)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":56:5)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":61:5)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":56:11)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":59:9)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":60:9)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":62:5)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":75:5)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":62:11)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:9)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":73:9)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:13)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:20)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:35)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:31)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:49)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:62)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":65:69)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":66:9)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":69:9)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":71:9)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":67:26)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":68:26)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":68:13)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":72:13)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":74:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":79:1)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":99:1)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":94:13)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":94:33)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":81:5)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":81:9)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":83:12)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":83:5)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":84:5)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":89:5)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":84:11)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":87:16)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":87:9)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":88:9)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":90:5)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":98:5)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":90:11)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":92:9)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":96:9)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":94:26)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":95:26)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":95:13)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_square_16.c":97:9)
#loc124 = loc(fused[#loc1, #loc2])
#loc125 = loc(fused[#loc3, #loc4])
#loc126 = loc(fused[#loc5, #loc6])
#loc127 = loc(fused[#loc7, #loc8])
#loc128 = loc(fused[#loc9, #loc10])
#loc129 = loc(fused[#loc12, #loc11])
#loc130 = loc(fused[#loc13, #loc14])
#loc131 = loc(fused[#loc17, #loc16])
#loc132 = loc(fused[#loc19, #loc20])
#loc133 = loc(fused[#loc22, #loc23])
#loc134 = loc(fused[#loc28, #loc29])
#loc135 = loc(fused[#loc30, #loc31])
#loc136 = loc(fused[#loc32, #loc33])
#loc137 = loc(fused[#loc34, #loc35])
#loc138 = loc(fused[#loc36, #loc37])
#loc139 = loc(fused[#loc38, #loc39])
#loc140 = loc(fused[#loc44, #loc45])
#loc143 = loc(fused[#loc55, #loc56])
#loc144 = loc(fused[#loc59, #loc60])
#loc145 = loc(fused[#loc63, #loc62])
#loc146 = loc(fused[#loc66, #loc67])
#loc147 = loc(fused[#loc68, #loc69])
#loc148 = loc(fused[#loc70, #loc71])
#loc149 = loc(fused[#loc73, #loc72])
#loc150 = loc(fused[#loc74, #loc75])
#loc151 = loc(fused[#loc78, #loc77])
#loc152 = loc(fused[#loc80, #loc81])
#loc153 = loc(fused[#loc83, #loc84])
#loc154 = loc(fused[#loc85, #loc86])
#loc155 = loc(fused[#loc89, #loc92])
#loc156 = loc(fused[#loc93, #loc94, #loc95, #loc84])
#loc157 = loc(fused[#loc101, #loc102])
#loc158 = loc(fused[#loc103, #loc104])
#loc159 = loc(fused[#loc105, #loc106])
#loc160 = loc(fused[#loc108, #loc107])
#loc161 = loc(fused[#loc109, #loc110])
#loc162 = loc(fused[#loc113, #loc112])
#loc163 = loc(fused[#loc115, #loc116])
#loc164 = loc(fused[#loc118, #loc119])
