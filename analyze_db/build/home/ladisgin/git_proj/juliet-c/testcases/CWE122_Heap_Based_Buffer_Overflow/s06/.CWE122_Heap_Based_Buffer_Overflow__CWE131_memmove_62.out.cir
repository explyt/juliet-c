!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":81:10)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":81:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":81:20)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":81:32)
#loc113 = loc(fused[#loc72, #loc73])
#loc114 = loc(fused[#loc74, #loc75])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_629badSourceERPi(!cir.ptr<!cir.ptr<!s32i>>) loc(#loc88)
  cir.func private @printIntLine(!s32i) loc(#loc89)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc90)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_623badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc93)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_629badSourceERPi(%0) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc13)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc95)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc95)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc95)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc18)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc18)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc19)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc19)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc20)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc20)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc96)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc97)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc98)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc26)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc27)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc28)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc29)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc30)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc29)
    } loc(#loc94)
    cir.return loc(#loc8)
  } loc(#loc91)
  cir.func private @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_6213goodG2BSourceERPi(!cir.ptr<!cir.ptr<!s32i>>) loc(#loc99)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc37)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc102)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_6213goodG2BSourceERPi(%0) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc39)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc104)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc104)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc104)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc44)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc45)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc45)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc46)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc46)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc105)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc106)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc107)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc52)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc53)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc51)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc54)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc55)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc56)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc55)
    } loc(#loc103)
    cir.return loc(#loc34)
  } loc(#loc100)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_624goodEv() extra(#fn_attr1) {
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62L7goodG2BEv() : () -> () loc(#loc59)
    cir.return loc(#loc58)
  } loc(#loc108)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc109)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc110)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc69)
  cir.func @main(%arg0: !s32i loc(fused[#loc72, #loc73]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc74, #loc75])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc114)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc71)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc76)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc77)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc78)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc78)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc79)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc66)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_624goodEv() : () -> () loc(#loc81)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc68)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_623badEv() : () -> () loc(#loc84)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc69)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.return %15 : !s32i loc(#loc115)
  } loc(#loc112)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":25:27)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":27:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":39:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":29:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":29:11)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":30:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":30:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":32:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":38:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":33:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":33:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":35:17)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":35:23)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":35:31)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":35:34)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":35:44)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":35:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":35:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":36:22)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":36:27)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":36:28)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":36:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":37:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":37:14)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":46:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":46:31)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":48:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":60:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":50:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":50:11)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":51:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":51:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":52:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":53:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":59:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":54:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":54:28)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":56:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":56:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":56:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":56:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":56:44)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":56:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":56:45)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":57:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":57:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":57:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":57:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":58:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":58:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":62:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":65:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":64:5)
#loc60 = loc("/usr/include/stdlib.h":575:1)
#loc61 = loc("/usr/include/stdlib.h":575:41)
#loc62 = loc("/usr/include/time.h":76:1)
#loc63 = loc("/usr/include/time.h":76:38)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":86:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":88:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":91:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":93:15)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":81:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":96:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":82:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":84:27)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":84:22)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":84:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":86:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":87:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":88:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":91:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":92:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":93:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":95:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_62a.cpp":95:5)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc9, #loc10])
#loc93 = loc(fused[#loc12, #loc11])
#loc94 = loc(fused[#loc14, #loc15])
#loc95 = loc(fused[#loc16, #loc17])
#loc96 = loc(fused[#loc21, #loc22])
#loc97 = loc(fused[#loc20, #loc22])
#loc98 = loc(fused[#loc23, #loc24])
#loc99 = loc(fused[#loc31, #loc32])
#loc100 = loc(fused[#loc33, #loc34])
#loc101 = loc(fused[#loc35, #loc36])
#loc102 = loc(fused[#loc38, #loc37])
#loc103 = loc(fused[#loc40, #loc41])
#loc104 = loc(fused[#loc42, #loc43])
#loc105 = loc(fused[#loc47, #loc48])
#loc106 = loc(fused[#loc46, #loc48])
#loc107 = loc(fused[#loc49, #loc50])
#loc108 = loc(fused[#loc57, #loc58])
#loc109 = loc(fused[#loc60, #loc61])
#loc110 = loc(fused[#loc62, #loc63])
#loc111 = loc(fused[#loc64, #loc65])
#loc112 = loc(fused[#loc70, #loc71])
#loc115 = loc(fused[#loc87, #loc86])
