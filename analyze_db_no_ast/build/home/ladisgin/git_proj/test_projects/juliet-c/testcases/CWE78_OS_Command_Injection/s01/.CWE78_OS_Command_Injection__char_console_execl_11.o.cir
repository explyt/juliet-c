!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc145)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc146)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc147)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc148)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc149)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc150)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc14)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc15)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execl_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc153)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc153)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc153)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc22)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
    cir.scope {
      %13 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc156)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc156)
      %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc26)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc26)
      cir.if %16 {
        cir.scope {
          %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc159)
          %18 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc33)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
          %20 = cir.call @strlen(%19) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc33)
          cir.store %20, %17 : !u64i, !cir.ptr<!u64i> loc(#loc159)
          cir.scope {
            %21 = cir.const #cir.int<100> : !s32i loc(#loc37)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc37)
            %23 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc38)
            %24 = cir.binop(sub, %22, %23) : !u64i loc(#loc161)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc39)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc39)
            %27 = cir.cmp(gt, %24, %26) : !u64i, !s32i loc(#loc162)
            %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc40)
            cir.if %28 {
              cir.scope {
                %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
                %30 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc45)
                %31 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %30 : !u64i), !cir.ptr<!s8i> loc(#loc46)
                %32 = cir.const #cir.int<100> : !s32i loc(#loc47)
                %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc47)
                %34 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc48)
                %35 = cir.binop(sub, %33, %34) : !u64i loc(#loc165)
                %36 = cir.cast(integral, %35 : !u64i), !s32i loc(#loc165)
                %37 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc148)
                %38 = cir.load %37 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc49)
                %39 = cir.call @fgets(%31, %36, %38) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc50)
                %40 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc51)
                %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc51)
                %42 = cir.cmp(ne, %39, %41) : !cir.ptr<!s8i>, !s32i loc(#loc166)
                %43 = cir.cast(int_to_bool, %42 : !s32i), !cir.bool loc(#loc52)
                cir.if %43 {
                  %44 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc56)
                  %45 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
                  %46 = cir.call @strlen(%45) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc56)
                  cir.store %46, %17 : !u64i, !cir.ptr<!u64i> loc(#loc168)
                  cir.scope {
                    %47 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc62)
                    %48 = cir.const #cir.int<0> : !s32i loc(#loc63)
                    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc63)
                    %50 = cir.cmp(gt, %47, %49) : !u64i, !s32i loc(#loc170)
                    %51 = cir.cast(int_to_bool, %50 : !s32i), !cir.bool loc(#loc64)
                    %52 = cir.ternary(%51, true {
                      %53 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
                      %54 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc67)
                      %55 = cir.const #cir.int<1> : !s32i loc(#loc68)
                      %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc68)
                      %57 = cir.binop(sub, %54, %56) : !u64i loc(#loc171)
                      %58 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %57 : !u64i), !cir.ptr<!s8i> loc(#loc69)
                      %59 = cir.load %58 : !cir.ptr<!s8i>, !s8i loc(#loc66)
                      %60 = cir.cast(integral, %59 : !s8i), !s32i loc(#loc66)
                      %61 = cir.const #cir.int<10> : !s32i loc(#loc70)
                      %62 = cir.cmp(eq, %60, %61) : !s32i, !s32i loc(#loc172)
                      %63 = cir.cast(int_to_bool, %62 : !s32i), !cir.bool loc(#loc71)
                      %64 = cir.ternary(%63, true {
                        %65 = cir.const #true loc(#loc65)
                        cir.yield %65 : !cir.bool loc(#loc65)
                      }, false {
                        %65 = cir.const #false loc(#loc65)
                        cir.yield %65 : !cir.bool loc(#loc65)
                      }) : (!cir.bool) -> !cir.bool loc(#loc65)
                      cir.yield %64 : !cir.bool loc(#loc65)
                    }, false {
                      %53 = cir.const #false loc(#loc65)
                      cir.yield %53 : !cir.bool loc(#loc65)
                    }) : (!cir.bool) -> !cir.bool loc(#loc65)
                    cir.if %52 {
                      %53 = cir.const #cir.int<0> : !s32i loc(#loc73)
                      %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc73)
                      %55 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
                      %56 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc75)
                      %57 = cir.const #cir.int<1> : !s32i loc(#loc76)
                      %58 = cir.cast(integral, %57 : !s32i), !u64i loc(#loc76)
                      %59 = cir.binop(sub, %56, %58) : !u64i loc(#loc174)
                      %60 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %59 : !u64i), !cir.ptr<!s8i> loc(#loc77)
                      cir.store %54, %60 : !s8i, !cir.ptr<!s8i> loc(#loc175)
                    } loc(#loc173)
                  } loc(#loc169)
                } else {
                  %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc11)
                  %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc11)
                  cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc78)
                  %46 = cir.const #cir.int<0> : !s32i loc(#loc79)
                  %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc79)
                  %48 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
                  %49 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc81)
                  %50 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %49 : !u64i), !cir.ptr<!s8i> loc(#loc82)
                  cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc176)
                } loc(#loc167)
              } loc(#loc164)
            } loc(#loc163)
          } loc(#loc160)
        } loc(#loc158)
      } loc(#loc157)
    } loc(#loc155)
    %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc14)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc14)
    %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc83)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc83)
    %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc15)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc15)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc85)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc86)
    cir.return loc(#loc17)
  } loc(#loc151)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execl_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc89)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc91)
    cir.return loc(#loc88)
  } loc(#loc177)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc180)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc95)
  cir.func private  @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc181)
  cir.global "private"  constant internal dsolocal @".str4" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc183)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc184)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc184)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc184)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc105)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
    cir.scope {
      %13 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc187)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc187)
      %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc109)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc109)
      cir.if %16 {
        %17 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
        %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc114)
      } else {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc115)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
        %19 = cir.get_global @".str4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc98)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc98)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc115)
      } loc(#loc188)
    } loc(#loc186)
    %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc117)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc117)
    %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc118)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc118)
    %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc119)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc119)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc121)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc122)
    cir.return loc(#loc100)
  } loc(#loc182)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc190)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc191)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc191)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc191)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc129)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc192)
    cir.scope {
      %13 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc194)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc194)
      %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc133)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc133)
      cir.if %16 {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc136)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
        %19 = cir.get_global @".str4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc138)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc138)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc136)
      } loc(#loc195)
    } loc(#loc193)
    %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc139)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc139)
    %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc140)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc140)
    %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc141)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc141)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc144)
    cir.return loc(#loc124)
  } loc(#loc189)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/stdio.h":654:1)
#loc6 = loc("/usr/include/stdio.h":655:59)
#loc7 = loc("/usr/include/stdio.h":149:1)
#loc8 = loc("/usr/include/stdio.h":149:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":71:31)
#loc12 = loc("/usr/include/unistd.h":594:1)
#loc13 = loc("/usr/include/unistd.h":595:14)
#loc14 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":80:11)
#loc15 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":80:47)
#loc16 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":45:1)
#loc17 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":81:1)
#loc18 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":47:5)
#loc19 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":47:12)
#loc20 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":48:5)
#loc21 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":48:28)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":49:12)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":49:5)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":50:5)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":77:5)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":50:8)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":50:26)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":51:5)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":52:9)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":76:9)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":54:13)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":54:41)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":54:30)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":54:37)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":56:13)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":75:13)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":56:17)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":56:21)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":56:31)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":56:29)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":57:13)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:17)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":74:17)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:27)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:32)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:31)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:47)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:51)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:61)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:21)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:71)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":59:68)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":60:17)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":68:17)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":70:17)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":63:31)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":63:38)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":63:21)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":63:42)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:21)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":67:21)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:25)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:35)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:33)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:37)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:40)
#loc67 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:45)
#loc68 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:53)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:54)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:59)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":64:56)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":65:21)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":66:43)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":66:25)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":66:30)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":66:38)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":66:39)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":71:21)
#loc79 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":73:37)
#loc80 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":73:21)
#loc81 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":73:26)
#loc82 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":73:33)
#loc83 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":80:29)
#loc84 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":80:61)
#loc85 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":80:75)
#loc86 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":80:5)
#loc87 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":124:1)
#loc88 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":128:1)
#loc89 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":126:5)
#loc90 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":126:14)
#loc91 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":127:5)
#loc92 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":127:14)
#loc93 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc95 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":96:19)
#loc96 = loc("/usr/include/string.h":149:1)
#loc97 = loc("/usr/include/string.h":150:14)
#loc98 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":101:22)
#loc99 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":88:1)
#loc100 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":106:1)
#loc101 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":90:5)
#loc102 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":90:12)
#loc103 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":91:5)
#loc104 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":91:28)
#loc105 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":92:12)
#loc106 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":92:5)
#loc107 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":93:5)
#loc108 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":102:5)
#loc109 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":93:8)
#loc110 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":93:27)
#loc111 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":94:5)
#loc112 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":97:5)
#loc113 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":99:5)
#loc114 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":96:9)
#loc115 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":101:9)
#loc116 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":101:16)
#loc117 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":105:11)
#loc118 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":105:29)
#loc119 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":105:47)
#loc120 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":105:61)
#loc121 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":105:75)
#loc122 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":105:5)
#loc123 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":109:1)
#loc124 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":122:1)
#loc125 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":111:5)
#loc126 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":111:12)
#loc127 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":112:5)
#loc128 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":112:28)
#loc129 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":113:12)
#loc130 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":113:5)
#loc131 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":114:5)
#loc132 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":118:5)
#loc133 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":114:8)
#loc134 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":114:26)
#loc135 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":115:5)
#loc136 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":117:9)
#loc137 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":117:16)
#loc138 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":117:22)
#loc139 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":121:11)
#loc140 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":121:29)
#loc141 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":121:47)
#loc142 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":121:61)
#loc143 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":121:75)
#loc144 = loc("CWE78_OS_Command_Injection__char_console_execl_11.c":121:5)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc12, #loc13])
#loc151 = loc(fused[#loc16, #loc17])
#loc152 = loc(fused[#loc18, #loc19])
#loc153 = loc(fused[#loc20, #loc21])
#loc154 = loc(fused[#loc23, #loc22])
#loc155 = loc(fused[#loc24, #loc25])
#loc156 = loc(fused[#loc26, #loc27])
#loc157 = loc(fused[#loc28, #loc25])
#loc158 = loc(fused[#loc29, #loc30])
#loc159 = loc(fused[#loc31, #loc32])
#loc160 = loc(fused[#loc35, #loc36])
#loc161 = loc(fused[#loc37, #loc38])
#loc162 = loc(fused[#loc37, #loc39])
#loc163 = loc(fused[#loc41, #loc36])
#loc164 = loc(fused[#loc42, #loc43])
#loc165 = loc(fused[#loc47, #loc48])
#loc166 = loc(fused[#loc50, #loc51])
#loc167 = loc(fused[#loc53, #loc54, #loc55, #loc43])
#loc168 = loc(fused[#loc58, #loc59])
#loc169 = loc(fused[#loc60, #loc61])
#loc170 = loc(fused[#loc62, #loc63])
#loc171 = loc(fused[#loc67, #loc68])
#loc172 = loc(fused[#loc66, #loc70])
#loc173 = loc(fused[#loc72, #loc61])
#loc174 = loc(fused[#loc75, #loc76])
#loc175 = loc(fused[#loc74, #loc73])
#loc176 = loc(fused[#loc80, #loc79])
#loc177 = loc(fused[#loc87, #loc88])
#loc178 = loc(fused[#loc89, #loc90])
#loc179 = loc(fused[#loc91, #loc92])
#loc180 = loc(fused[#loc93, #loc94])
#loc181 = loc(fused[#loc96, #loc97])
#loc182 = loc(fused[#loc99, #loc100])
#loc183 = loc(fused[#loc101, #loc102])
#loc184 = loc(fused[#loc103, #loc104])
#loc185 = loc(fused[#loc106, #loc105])
#loc186 = loc(fused[#loc107, #loc108])
#loc187 = loc(fused[#loc109, #loc110])
#loc188 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc189 = loc(fused[#loc123, #loc124])
#loc190 = loc(fused[#loc125, #loc126])
#loc191 = loc(fused[#loc127, #loc128])
#loc192 = loc(fused[#loc130, #loc129])
#loc193 = loc(fused[#loc131, #loc132])
#loc194 = loc(fused[#loc133, #loc134])
#loc195 = loc(fused[#loc135, #loc132])
