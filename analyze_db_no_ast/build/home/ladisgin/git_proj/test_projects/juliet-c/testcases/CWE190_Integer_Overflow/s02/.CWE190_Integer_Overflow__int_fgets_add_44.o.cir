!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":24:21)
#loc6 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":24:25)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":62:25)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":62:29)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":83:25)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":83:29)
#loc137 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc62, #loc63])
#loc167 = loc(fused[#loc87, #loc88])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc135)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc137)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc139)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %4 = cir.binop(add, %2, %3) nsw : !s32i loc(#loc12)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc139)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc14)
    } loc(#loc138)
    cir.return loc(#loc4)
  } loc(#loc136)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc140)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc141)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc142)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc146)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc30)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc149)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc149)
      cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc149)
      cir.scope {
        %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
        %9 = cir.const #cir.int<3> : !s32i loc(#loc39)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc39)
        %11 = cir.const #cir.int<4> : !u64i loc(#loc39)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc39)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc39)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc39)
        %15 = cir.binop(add, %12, %14) : !u64i loc(#loc39)
        %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc39)
        %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc141)
        %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc40)
        %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc41)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
        %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc151)
        %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc43)
        cir.if %23 {
          %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc47)
          %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc48)
          cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
        } else {
          %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc23)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc23)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc51)
        } loc(#loc152)
      } loc(#loc150)
    } loc(#loc148)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc52)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc52)
    cir.return loc(#loc25)
  } loc(#loc144)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc154)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc62, #loc63])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc158)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc160)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc68)
      %4 = cir.binop(add, %2, %3) nsw : !s32i loc(#loc69)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc160)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc71)
    } loc(#loc159)
    cir.return loc(#loc61)
  } loc(#loc157)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc77)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc163)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc80)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc82)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc82)
    cir.return loc(#loc73)
  } loc(#loc161)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc84)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc87, #loc88])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
      %3 = cir.cmp(lt, %1, %2) : !s32i, !s32i loc(#loc169)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc94)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc171)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc100)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc171)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc102)
      } else {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc84)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc84)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc103)
      } loc(#loc170)
    } loc(#loc168)
    cir.return loc(#loc86)
  } loc(#loc166)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc109)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc174)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc177)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc177)
      cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc177)
      cir.scope {
        %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc118)
        %9 = cir.const #cir.int<3> : !s32i loc(#loc119)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc119)
        %11 = cir.const #cir.int<4> : !u64i loc(#loc119)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc119)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc119)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc119)
        %15 = cir.binop(add, %12, %14) : !u64i loc(#loc119)
        %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc119)
        %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc141)
        %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc120)
        %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc121)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
        %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc179)
        %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc123)
        cir.if %23 {
          %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc127)
          %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc128)
          cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
        } else {
          %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc131)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc131)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc132)
        } loc(#loc180)
      } loc(#loc178)
    } loc(#loc176)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc133)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc133)
    cir.return loc(#loc105)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":26:5)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":28:9)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":28:29)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":28:22)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":29:22)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":29:9)
#loc15 = loc("/usr/include/stdio.h":654:1)
#loc16 = loc("/usr/include/stdio.h":655:59)
#loc17 = loc("/usr/include/stdio.h":149:1)
#loc18 = loc("/usr/include/stdio.h":149:14)
#loc19 = loc("/usr/include/stdlib.h":105:1)
#loc20 = loc("/usr/include/stdlib.h":106:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":50:23)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":33:1)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":55:1)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":35:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":35:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":37:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":37:29)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":39:12)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":39:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":40:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":52:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":41:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":41:45)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":43:9)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":51:9)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":43:19)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":43:32)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":43:49)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":43:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":43:59)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":43:56)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":44:9)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":47:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":49:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":46:25)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":46:20)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":46:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":46:36)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":50:13)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":54:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":54:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":119:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":123:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":121:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":121:13)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":122:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":122:13)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":62:1)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":69:1)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":63:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":64:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":68:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":66:9)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":66:29)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":66:22)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":67:22)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":67:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":71:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":80:1)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":73:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":73:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":74:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":74:29)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":76:12)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":76:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":78:12)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":78:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":79:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":79:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":93:19)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":83:1)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":95:1)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":84:1)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":86:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":94:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":86:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":86:16)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":86:14)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":87:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":90:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":92:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":88:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":88:29)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":88:22)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":89:22)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":89:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":93:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":97:1)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":117:1)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":99:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":99:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":100:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":100:29)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":102:12)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":102:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":103:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":115:5)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":104:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":104:45)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":106:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":114:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":106:19)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":106:32)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":106:49)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":106:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":106:59)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":106:56)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":107:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":110:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":112:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":109:25)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":109:20)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":109:13)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":109:36)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":113:23)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":113:13)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":116:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_44.c":116:13)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc8, #loc9])
#loc139 = loc(fused[#loc10, #loc11])
#loc140 = loc(fused[#loc15, #loc16])
#loc141 = loc(fused[#loc17, #loc18])
#loc142 = loc(fused[#loc19, #loc20])
#loc143 = loc(fused[#loc21, #loc22])
#loc144 = loc(fused[#loc24, #loc25])
#loc145 = loc(fused[#loc26, #loc27])
#loc146 = loc(fused[#loc28, #loc29])
#loc147 = loc(fused[#loc31, #loc30])
#loc148 = loc(fused[#loc32, #loc33])
#loc149 = loc(fused[#loc34, #loc35])
#loc150 = loc(fused[#loc36, #loc37])
#loc151 = loc(fused[#loc41, #loc42])
#loc152 = loc(fused[#loc44, #loc45, #loc46, #loc37])
#loc153 = loc(fused[#loc49, #loc50])
#loc154 = loc(fused[#loc54, #loc55])
#loc155 = loc(fused[#loc56, #loc57])
#loc156 = loc(fused[#loc58, #loc59])
#loc157 = loc(fused[#loc60, #loc61])
#loc159 = loc(fused[#loc65, #loc66])
#loc160 = loc(fused[#loc67, #loc68])
#loc161 = loc(fused[#loc72, #loc73])
#loc162 = loc(fused[#loc74, #loc75])
#loc163 = loc(fused[#loc76, #loc77])
#loc164 = loc(fused[#loc79, #loc78])
#loc165 = loc(fused[#loc81, #loc80])
#loc166 = loc(fused[#loc85, #loc86])
#loc168 = loc(fused[#loc90, #loc91])
#loc169 = loc(fused[#loc92, #loc93])
#loc170 = loc(fused[#loc95, #loc96, #loc97, #loc91])
#loc171 = loc(fused[#loc98, #loc99])
#loc172 = loc(fused[#loc104, #loc105])
#loc173 = loc(fused[#loc106, #loc107])
#loc174 = loc(fused[#loc108, #loc109])
#loc175 = loc(fused[#loc111, #loc110])
#loc176 = loc(fused[#loc112, #loc113])
#loc177 = loc(fused[#loc114, #loc115])
#loc178 = loc(fused[#loc116, #loc117])
#loc179 = loc(fused[#loc121, #loc122])
#loc180 = loc(fused[#loc124, #loc125, #loc126, #loc117])
#loc181 = loc(fused[#loc129, #loc130])
