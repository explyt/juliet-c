!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":35:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":168:10)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":168:14)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":168:20)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":168:32)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":122:12)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":136:27)
#true = #cir.bool<true> : !cir.bool
!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType = !cir.struct<union "CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType" {!s32i, !s32i}>
#loc331 = loc(fused[#loc109, #loc110])
#loc332 = loc(fused[#loc111, #loc112])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc287)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc288)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc289)
  cir.func private @printIntLine(!s32i) loc(#loc290)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc291)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc292)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc294)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc295)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc296)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc297)
    %4 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc298)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc27)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc29)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %10 ^bb1, ^bb2 loc(#loc29)
  ^bb1:  // pred: ^bb0
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc29)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc29)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc29)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc29)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc29)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc29)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc29)
    cir.br ^bb3(%22 : !u32i) loc(#loc29)
  ^bb2:  // pred: ^bb0
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc29)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc29)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc29)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc29)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc29)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc29)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc29)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc29)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc29)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc29)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc29)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc29)
    cir.br ^bb3(%38 : !u32i) loc(#loc29)
  ^bb3(%39: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":35:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc29)
  ^bb4:  // pred: ^bb3
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc29)
    cir.store %40, %3 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    %41 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %42 = cir.get_member %4[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc32)
    cir.store %41, %42 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    cir.br ^bb5 loc(#loc302)
  ^bb5:  // pred: ^bb4
    %43 = cir.get_member %4[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc36)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.store %44, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.br ^bb6 loc(#loc303)
  ^bb6:  // pred: ^bb5
    %45 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc39)
    %46 = cir.const #cir.int<10> : !s32i loc(#loc40)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc40)
    %48 = cir.const #cir.int<4> : !u64i loc(#loc304)
    %49 = cir.binop(mul, %47, %48) : !u64i loc(#loc305)
    %50 = cir.call @malloc(%49) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc39)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc306)
    cir.store %51, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc296)
    cir.br ^bb7 loc(#loc307)
  ^bb7:  // pred: ^bb6
    %52 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc46)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
    %55 = cir.cmp(eq, %52, %54) : !cir.ptr<!s32i>, !cir.bool loc(#loc308)
    cir.brcond %55 ^bb8, ^bb9 loc(#loc309)
  ^bb8:  // pred: ^bb7
    %56 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc48)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc50)
    cir.call @exit(%58) : (!s32i) -> () extra(#fn_attr) loc(#loc48)
    cir.br ^bb9 loc(#loc44)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc44)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc310)
  ^bb11:  // pred: ^bb10
    %59 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %59, %1 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    cir.br ^bb12 loc(#loc310)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %60 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %61 = cir.const #cir.int<10> : !s32i loc(#loc56)
    %62 = cir.cmp(lt, %60, %61) : !s32i, !cir.bool loc(#loc312)
    cir.brcond %62 ^bb13, ^bb17 loc(#loc57)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc313)
  ^bb14:  // pred: ^bb13
    %63 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %64 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    %65 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %66 = cir.ptr_stride(%64 : !cir.ptr<!s32i>, %65 : !s32i), !cir.ptr<!s32i> loc(#loc62)
    cir.store %63, %66 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.br ^bb15 loc(#loc52)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc52)
  ^bb16:  // pred: ^bb15
    %67 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %68 = cir.unary(inc, %67) : !s32i, !s32i loc(#loc64)
    cir.store %68, %1 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    cir.br ^bb12 loc(#loc310)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc52)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc316)
  ^bb19:  // pred: ^bb18
    %69 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %70 = cir.const #cir.int<0> : !s32i loc(#loc68)
    %71 = cir.cmp(ge, %69, %70) : !s32i, !cir.bool loc(#loc317)
    cir.brcond %71 ^bb20, ^bb29 loc(#loc318)
  ^bb20:  // pred: ^bb19
    %72 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %73 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
    %74 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %75 = cir.ptr_stride(%73 : !cir.ptr<!s32i>, %74 : !s32i), !cir.ptr<!s32i> loc(#loc75)
    cir.store %72, %75 : !s32i, !cir.ptr<!s32i> loc(#loc319)
    cir.br ^bb21 loc(#loc320)
  ^bb21:  // pred: ^bb20
    %76 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %76, %1 : !s32i, !cir.ptr<!s32i> loc(#loc321)
    cir.br ^bb22 loc(#loc320)
  ^bb22:  // 2 preds: ^bb21, ^bb26
    %77 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %78 = cir.const #cir.int<10> : !s32i loc(#loc81)
    %79 = cir.cmp(lt, %77, %78) : !s32i, !cir.bool loc(#loc322)
    cir.brcond %79 ^bb23, ^bb27 loc(#loc82)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc323)
  ^bb24:  // pred: ^bb23
    %80 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
    %81 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %82 = cir.ptr_stride(%80 : !cir.ptr<!s32i>, %81 : !s32i), !cir.ptr<!s32i> loc(#loc86)
    %83 = cir.load %82 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    cir.call @printIntLine(%83) : (!s32i) -> () loc(#loc87)
    cir.br ^bb25 loc(#loc77)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc77)
  ^bb26:  // pred: ^bb25
    %84 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %85 = cir.unary(inc, %84) : !s32i, !s32i loc(#loc89)
    cir.store %85, %1 : !s32i, !cir.ptr<!s32i> loc(#loc324)
    cir.br ^bb22 loc(#loc320)
  ^bb27:  // pred: ^bb22
    cir.br ^bb28 loc(#loc77)
  ^bb28:  // pred: ^bb27
    cir.br ^bb30 loc(#loc70)
  ^bb29:  // pred: ^bb19
    %86 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
    %87 = cir.cast(array_to_ptrdecay, %86 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%87) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb30 loc(#loc66)
  ^bb30:  // 2 preds: ^bb28, ^bb29
    cir.br ^bb31 loc(#loc66)
  ^bb31:  // pred: ^bb30
    %88 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    %89 = cir.cast(bitcast, %88 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc91)
    cir.call @free(%89) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc92)
    cir.br ^bb32 loc(#loc38)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc35)
  ^bb33:  // pred: ^bb32
    cir.return loc(#loc15)
  } loc(#loc293)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc326)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc95)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc327)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc97)
    cir.return loc(#loc94)
  } loc(#loc325)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc328)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc329)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc106)
  cir.func @main(%arg0: !s32i loc(fused[#loc109, #loc110]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc111, #loc112])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc331)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc332)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc113)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc114)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc115)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc115)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc116)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc103)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc333)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_good() : () -> () loc(#loc118)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc104)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc105)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc334)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_bad() : () -> () loc(#loc122)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc106)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc335)
    cir.return %17 : !s32i loc(#loc335)
  } loc(#loc330)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc337)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc338)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc339)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc340)
    %4 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc341)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc140)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc342)
    %7 = cir.const #cir.int<7> : !s32i loc(#loc142)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc343)
    %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %9 = cir.get_member %4[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc32)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    cir.br ^bb1 loc(#loc345)
  ^bb1:  // pred: ^bb0
    %10 = cir.get_member %4[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc36)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc337)
    cir.br ^bb2 loc(#loc346)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc150)
    %13 = cir.const #cir.int<10> : !s32i loc(#loc151)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc151)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc347)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc348)
    %17 = cir.call @malloc(%16) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc150)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc349)
    cir.store %18, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc339)
    cir.br ^bb3 loc(#loc350)
  ^bb3:  // pred: ^bb2
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc157)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc157)
    %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc351)
    cir.brcond %22 ^bb4, ^bb5 loc(#loc352)
  ^bb4:  // pred: ^bb3
    %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc159)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc161)
    cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc159)
    cir.br ^bb5 loc(#loc155)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc155)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc353)
  ^bb7:  // pred: ^bb6
    %26 = cir.const #cir.int<0> : !s32i loc(#loc164)
    cir.store %26, %1 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    cir.br ^bb8 loc(#loc353)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %27 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %28 = cir.const #cir.int<10> : !s32i loc(#loc167)
    %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc355)
    cir.brcond %29 ^bb9, ^bb13 loc(#loc168)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc356)
  ^bb10:  // pred: ^bb9
    %30 = cir.const #cir.int<0> : !s32i loc(#loc170)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
    %32 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc173)
    cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    cir.br ^bb11 loc(#loc163)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc163)
  ^bb12:  // pred: ^bb11
    %34 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc174)
    %35 = cir.unary(inc, %34) : !s32i, !s32i loc(#loc175)
    cir.store %35, %1 : !s32i, !cir.ptr<!s32i> loc(#loc358)
    cir.br ^bb8 loc(#loc353)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc163)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc359)
  ^bb15:  // pred: ^bb14
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc179)
    %38 = cir.cmp(ge, %36, %37) : !s32i, !cir.bool loc(#loc360)
    cir.brcond %38 ^bb16, ^bb25 loc(#loc361)
  ^bb16:  // pred: ^bb15
    %39 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %40 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc184)
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    %42 = cir.ptr_stride(%40 : !cir.ptr<!s32i>, %41 : !s32i), !cir.ptr<!s32i> loc(#loc186)
    cir.store %39, %42 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    cir.br ^bb17 loc(#loc363)
  ^bb17:  // pred: ^bb16
    %43 = cir.const #cir.int<0> : !s32i loc(#loc189)
    cir.store %43, %1 : !s32i, !cir.ptr<!s32i> loc(#loc364)
    cir.br ^bb18 loc(#loc363)
  ^bb18:  // 2 preds: ^bb17, ^bb22
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    %45 = cir.const #cir.int<10> : !s32i loc(#loc192)
    %46 = cir.cmp(lt, %44, %45) : !s32i, !cir.bool loc(#loc365)
    cir.brcond %46 ^bb19, ^bb23 loc(#loc193)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc366)
  ^bb20:  // pred: ^bb19
    %47 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc195)
    %48 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc196)
    %49 = cir.ptr_stride(%47 : !cir.ptr<!s32i>, %48 : !s32i), !cir.ptr<!s32i> loc(#loc197)
    %50 = cir.load %49 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    cir.call @printIntLine(%50) : (!s32i) -> () loc(#loc198)
    cir.br ^bb21 loc(#loc188)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc188)
  ^bb22:  // pred: ^bb21
    %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc199)
    %52 = cir.unary(inc, %51) : !s32i, !s32i loc(#loc200)
    cir.store %52, %1 : !s32i, !cir.ptr<!s32i> loc(#loc367)
    cir.br ^bb18 loc(#loc363)
  ^bb23:  // pred: ^bb18
    cir.br ^bb24 loc(#loc188)
  ^bb24:  // pred: ^bb23
    cir.br ^bb26 loc(#loc181)
  ^bb25:  // pred: ^bb15
    %53 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc201)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc201)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc202)
    cir.br ^bb26 loc(#loc177)
  ^bb26:  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc177)
  ^bb27:  // pred: ^bb26
    %55 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc203)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc203)
    cir.call @free(%56) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc204)
    cir.br ^bb28 loc(#loc149)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc147)
  ^bb29:  // pred: ^bb28
    cir.return loc(#loc128)
  } loc(#loc336)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc205)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc369)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc370)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc371)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc372)
    %4 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc373)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc218)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc219)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc374)
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc221)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc221)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc221)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc221)
    cir.brcond %10 ^bb1, ^bb2 loc(#loc221)
  ^bb1:  // pred: ^bb0
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc221)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc221)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc221)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc221)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc221)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc221)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc221)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc221)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc221)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc221)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc221)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc221)
    cir.br ^bb3(%22 : !u32i) loc(#loc221)
  ^bb2:  // pred: ^bb0
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc221)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc221)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc221)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc221)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc221)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc221)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc221)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc221)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc221)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc221)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc221)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc221)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc221)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc221)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc221)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc221)
    cir.br ^bb3(%38 : !u32i) loc(#loc221)
  ^bb3(%39: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":122:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc221)
  ^bb4:  // pred: ^bb3
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc221)
    cir.store %40, %3 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    %41 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    %42 = cir.get_member %4[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc32)
    cir.store %41, %42 : !s32i, !cir.ptr<!s32i> loc(#loc376)
    cir.br ^bb5 loc(#loc377)
  ^bb5:  // pred: ^bb4
    %43 = cir.get_member %4[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc36)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.store %44, %0 : !s32i, !cir.ptr<!s32i> loc(#loc369)
    cir.br ^bb6 loc(#loc378)
  ^bb6:  // pred: ^bb5
    %45 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc229)
    %46 = cir.const #cir.int<10> : !s32i loc(#loc230)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc230)
    %48 = cir.const #cir.int<4> : !u64i loc(#loc379)
    %49 = cir.binop(mul, %47, %48) : !u64i loc(#loc380)
    %50 = cir.call @malloc(%49) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc229)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc381)
    cir.store %51, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc371)
    cir.br ^bb7 loc(#loc382)
  ^bb7:  // pred: ^bb6
    %52 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc235)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc236)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc236)
    %55 = cir.cmp(eq, %52, %54) : !cir.ptr<!s32i>, !cir.bool loc(#loc383)
    cir.brcond %55 ^bb8, ^bb9 loc(#loc384)
  ^bb8:  // pred: ^bb7
    %56 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc238)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc239)
    %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc240)
    cir.call @exit(%58) : (!s32i) -> () extra(#fn_attr) loc(#loc238)
    cir.br ^bb9 loc(#loc234)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc234)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc385)
  ^bb11:  // pred: ^bb10
    %59 = cir.const #cir.int<0> : !s32i loc(#loc243)
    cir.store %59, %1 : !s32i, !cir.ptr<!s32i> loc(#loc386)
    cir.br ^bb12 loc(#loc385)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %60 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc245)
    %61 = cir.const #cir.int<10> : !s32i loc(#loc246)
    %62 = cir.cmp(lt, %60, %61) : !s32i, !cir.bool loc(#loc387)
    cir.brcond %62 ^bb13, ^bb17 loc(#loc247)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc388)
  ^bb14:  // pred: ^bb13
    %63 = cir.const #cir.int<0> : !s32i loc(#loc249)
    %64 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc250)
    %65 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    %66 = cir.ptr_stride(%64 : !cir.ptr<!s32i>, %65 : !s32i), !cir.ptr<!s32i> loc(#loc252)
    cir.store %63, %66 : !s32i, !cir.ptr<!s32i> loc(#loc389)
    cir.br ^bb15 loc(#loc242)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc242)
  ^bb16:  // pred: ^bb15
    %67 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc253)
    %68 = cir.unary(inc, %67) : !s32i, !s32i loc(#loc254)
    cir.store %68, %1 : !s32i, !cir.ptr<!s32i> loc(#loc390)
    cir.br ^bb12 loc(#loc385)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc242)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc391)
  ^bb19:  // pred: ^bb18
    %69 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc257)
    %70 = cir.const #cir.int<0> : !s32i loc(#loc258)
    %71 = cir.cmp(ge, %69, %70) : !s32i, !cir.bool loc(#loc392)
    cir.brcond %71 ^bb20, ^bb25 loc(#loc259)
  ^bb20:  // pred: ^bb19
    %72 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc260)
    %73 = cir.const #cir.int<10> : !s32i loc(#loc261)
    %74 = cir.cmp(lt, %72, %73) : !s32i, !cir.bool loc(#loc393)
    cir.brcond %74 ^bb21, ^bb22 loc(#loc259)
  ^bb21:  // pred: ^bb20
    %75 = cir.const #true loc(#loc259)
    cir.br ^bb23(%75 : !cir.bool) loc(#loc259)
  ^bb22:  // pred: ^bb20
    %76 = cir.const #false loc(#loc259)
    cir.br ^bb23(%76 : !cir.bool) loc(#loc259)
  ^bb23(%77: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":136:27)):  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc259)
  ^bb24:  // pred: ^bb23
    cir.br ^bb26(%77 : !cir.bool) loc(#loc259)
  ^bb25:  // pred: ^bb19
    %78 = cir.const #false loc(#loc259)
    cir.br ^bb26(%78 : !cir.bool) loc(#loc259)
  ^bb26(%79: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":136:27)):  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc259)
  ^bb27:  // pred: ^bb26
    cir.brcond %79 ^bb28, ^bb37 loc(#loc394)
  ^bb28:  // pred: ^bb27
    %80 = cir.const #cir.int<1> : !s32i loc(#loc266)
    %81 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc267)
    %82 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc268)
    %83 = cir.ptr_stride(%81 : !cir.ptr<!s32i>, %82 : !s32i), !cir.ptr<!s32i> loc(#loc269)
    cir.store %80, %83 : !s32i, !cir.ptr<!s32i> loc(#loc395)
    cir.br ^bb29 loc(#loc396)
  ^bb29:  // pred: ^bb28
    %84 = cir.const #cir.int<0> : !s32i loc(#loc272)
    cir.store %84, %1 : !s32i, !cir.ptr<!s32i> loc(#loc397)
    cir.br ^bb30 loc(#loc396)
  ^bb30:  // 2 preds: ^bb29, ^bb34
    %85 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc274)
    %86 = cir.const #cir.int<10> : !s32i loc(#loc275)
    %87 = cir.cmp(lt, %85, %86) : !s32i, !cir.bool loc(#loc398)
    cir.brcond %87 ^bb31, ^bb35 loc(#loc276)
  ^bb31:  // pred: ^bb30
    cir.br ^bb32 loc(#loc399)
  ^bb32:  // pred: ^bb31
    %88 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc278)
    %89 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc279)
    %90 = cir.ptr_stride(%88 : !cir.ptr<!s32i>, %89 : !s32i), !cir.ptr<!s32i> loc(#loc280)
    %91 = cir.load %90 : !cir.ptr<!s32i>, !s32i loc(#loc278)
    cir.call @printIntLine(%91) : (!s32i) -> () loc(#loc281)
    cir.br ^bb33 loc(#loc271)
  ^bb33:  // pred: ^bb32
    cir.br ^bb34 loc(#loc271)
  ^bb34:  // pred: ^bb33
    %92 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc282)
    %93 = cir.unary(inc, %92) : !s32i, !s32i loc(#loc283)
    cir.store %93, %1 : !s32i, !cir.ptr<!s32i> loc(#loc400)
    cir.br ^bb30 loc(#loc396)
  ^bb35:  // pred: ^bb30
    cir.br ^bb36 loc(#loc271)
  ^bb36:  // pred: ^bb35
    cir.br ^bb38 loc(#loc264)
  ^bb37:  // pred: ^bb27
    %94 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc205)
    %95 = cir.cast(array_to_ptrdecay, %94 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc205)
    cir.call @printLine(%95) : (!cir.ptr<!s8i>) -> () loc(#loc284)
    cir.br ^bb38 loc(#loc256)
  ^bb38:  // 2 preds: ^bb36, ^bb37
    cir.br ^bb39 loc(#loc256)
  ^bb39:  // pred: ^bb38
    %96 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc285)
    %97 = cir.cast(bitcast, %96 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc285)
    cir.call @free(%97) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc286)
    cir.br ^bb40 loc(#loc228)
  ^bb40:  // pred: ^bb39
    cir.br ^bb41 loc(#loc226)
  ^bb41:  // pred: ^bb40
    cir.return loc(#loc207)
  } loc(#loc368)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":61:27)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":28:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":66:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":38:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":38:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":40:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":40:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":41:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":41:58)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":30:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":31:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":31:67)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":33:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":33:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":33:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":35:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":36:26)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":22:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":36:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":37:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":65:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":23:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":39:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":64:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":41:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":41:42)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":41:47)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":41:57)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":42:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":42:43)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":42:17)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":42:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":42:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":42:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":42:40)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":42:39)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":44:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":47:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":44:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":44:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":44:25)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":44:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":44:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":45:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":46:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":46:17)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":46:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":46:25)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":44:34)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":44:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":50:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":62:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":50:17)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":50:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":51:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":58:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":60:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":52:32)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":52:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":52:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":52:28)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":54:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":57:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":54:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":54:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":54:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":54:32)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":54:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":55:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":56:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":56:41)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":56:42)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":56:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":54:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":54:36)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":61:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":63:18)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":63:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":154:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":158:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":156:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":156:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":157:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":157:13)
#loc99 = loc("/usr/include/stdlib.h":575:1)
#loc100 = loc("/usr/include/stdlib.h":575:41)
#loc101 = loc("/usr/include/time.h":76:1)
#loc102 = loc("/usr/include/time.h":76:38)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":173:15)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":175:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":178:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":180:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":168:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":183:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":169:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":171:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":171:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":171:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":173:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":174:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":174:62)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":175:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":178:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":179:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":179:61)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":180:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":182:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":182:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":73:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":112:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":84:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":84:28)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":86:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":86:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":87:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":87:58)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":75:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":75:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":76:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":76:67)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":78:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":78:12)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":78:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":81:12)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":81:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":82:26)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":82:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":83:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":111:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":85:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":110:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":87:35)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":87:42)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":87:47)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":87:57)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":88:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":88:43)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":88:17)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":88:27)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":88:33)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":88:34)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":88:40)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":88:39)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":90:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":93:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":90:22)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":90:18)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":90:25)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":90:29)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":90:27)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":91:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":92:29)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":92:17)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":92:24)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":92:25)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":90:34)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":90:33)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":96:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":108:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":96:17)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":96:25)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":97:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":104:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":106:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":98:32)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":98:17)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":98:24)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":98:28)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":100:17)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":103:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":100:25)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":100:21)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":100:28)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":100:32)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":100:30)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":101:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":102:34)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":102:41)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":102:42)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":102:21)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":100:37)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":100:36)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":107:27)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":107:17)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":109:18)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":109:13)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":147:27)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":115:1)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":152:1)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":125:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":125:28)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":127:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":127:17)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":128:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":128:58)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":117:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":117:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":118:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":118:67)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":120:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":120:12)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":120:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":122:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":123:26)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":123:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":124:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":151:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":126:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":150:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":128:35)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":128:42)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":128:47)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":128:57)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":129:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":129:43)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":129:17)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":129:27)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":129:33)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":129:34)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":129:40)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":129:39)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":131:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":134:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":131:22)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":131:18)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":131:25)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":131:29)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":131:27)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":132:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":133:29)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":133:17)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":133:24)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":133:25)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":131:34)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":131:33)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":136:13)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":148:13)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":136:17)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":136:25)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":136:30)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":136:38)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":136:40)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":137:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":144:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":146:13)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":138:32)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":138:17)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":138:24)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":138:28)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":140:17)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":143:17)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":140:25)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":140:21)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":140:28)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":140:32)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":140:30)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":141:17)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":142:34)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":142:41)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":142:42)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":142:21)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":140:37)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":140:36)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":147:17)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":149:18)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c":149:13)
#loc287 = loc(fused[#loc1, #loc2])
#loc288 = loc(fused[#loc3, #loc4])
#loc289 = loc(fused[#loc5, #loc6])
#loc290 = loc(fused[#loc7, #loc8])
#loc291 = loc(fused[#loc9, #loc10])
#loc292 = loc(fused[#loc12, #loc13])
#loc293 = loc(fused[#loc14, #loc15])
#loc294 = loc(fused[#loc16, #loc17])
#loc295 = loc(fused[#loc18, #loc19])
#loc296 = loc(fused[#loc20, #loc21])
#loc297 = loc(fused[#loc22, #loc23])
#loc298 = loc(fused[#loc24, #loc25])
#loc299 = loc(fused[#loc28, #loc26])
#loc300 = loc(fused[#loc30, #loc29])
#loc301 = loc(fused[#loc33, #loc31])
#loc302 = loc(fused[#loc34, #loc35])
#loc303 = loc(fused[#loc37, #loc38])
#loc304 = loc(fused[#loc41, #loc42])
#loc305 = loc(fused[#loc40, #loc42])
#loc306 = loc(fused[#loc39, #loc21])
#loc307 = loc(fused[#loc43, #loc44])
#loc308 = loc(fused[#loc45, #loc46])
#loc309 = loc(fused[#loc47, #loc44])
#loc310 = loc(fused[#loc51, #loc52])
#loc311 = loc(fused[#loc54, #loc53])
#loc312 = loc(fused[#loc55, #loc56])
#loc313 = loc(fused[#loc58, #loc52])
#loc314 = loc(fused[#loc60, #loc59])
#loc315 = loc(fused[#loc64, #loc63])
#loc316 = loc(fused[#loc65, #loc66])
#loc317 = loc(fused[#loc67, #loc68])
#loc318 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc319 = loc(fused[#loc73, #loc72])
#loc320 = loc(fused[#loc76, #loc77])
#loc321 = loc(fused[#loc79, #loc78])
#loc322 = loc(fused[#loc80, #loc81])
#loc323 = loc(fused[#loc83, #loc77])
#loc324 = loc(fused[#loc89, #loc88])
#loc325 = loc(fused[#loc93, #loc94])
#loc326 = loc(fused[#loc95, #loc96])
#loc327 = loc(fused[#loc97, #loc98])
#loc328 = loc(fused[#loc99, #loc100])
#loc329 = loc(fused[#loc101, #loc102])
#loc330 = loc(fused[#loc107, #loc108])
#loc333 = loc(fused[#loc118, #loc119])
#loc334 = loc(fused[#loc122, #loc123])
#loc335 = loc(fused[#loc126, #loc125])
#loc336 = loc(fused[#loc127, #loc128])
#loc337 = loc(fused[#loc129, #loc130])
#loc338 = loc(fused[#loc131, #loc132])
#loc339 = loc(fused[#loc133, #loc134])
#loc340 = loc(fused[#loc135, #loc136])
#loc341 = loc(fused[#loc137, #loc138])
#loc342 = loc(fused[#loc141, #loc139])
#loc343 = loc(fused[#loc143, #loc142])
#loc344 = loc(fused[#loc145, #loc144])
#loc345 = loc(fused[#loc146, #loc147])
#loc346 = loc(fused[#loc148, #loc149])
#loc347 = loc(fused[#loc152, #loc153])
#loc348 = loc(fused[#loc151, #loc153])
#loc349 = loc(fused[#loc150, #loc134])
#loc350 = loc(fused[#loc154, #loc155])
#loc351 = loc(fused[#loc156, #loc157])
#loc352 = loc(fused[#loc158, #loc155])
#loc353 = loc(fused[#loc162, #loc163])
#loc354 = loc(fused[#loc165, #loc164])
#loc355 = loc(fused[#loc166, #loc167])
#loc356 = loc(fused[#loc169, #loc163])
#loc357 = loc(fused[#loc171, #loc170])
#loc358 = loc(fused[#loc175, #loc174])
#loc359 = loc(fused[#loc176, #loc177])
#loc360 = loc(fused[#loc178, #loc179])
#loc361 = loc(fused[#loc180, #loc181, #loc182, #loc177])
#loc362 = loc(fused[#loc184, #loc183])
#loc363 = loc(fused[#loc187, #loc188])
#loc364 = loc(fused[#loc190, #loc189])
#loc365 = loc(fused[#loc191, #loc192])
#loc366 = loc(fused[#loc194, #loc188])
#loc367 = loc(fused[#loc200, #loc199])
#loc368 = loc(fused[#loc206, #loc207])
#loc369 = loc(fused[#loc208, #loc209])
#loc370 = loc(fused[#loc210, #loc211])
#loc371 = loc(fused[#loc212, #loc213])
#loc372 = loc(fused[#loc214, #loc215])
#loc373 = loc(fused[#loc216, #loc217])
#loc374 = loc(fused[#loc220, #loc218])
#loc375 = loc(fused[#loc222, #loc221])
#loc376 = loc(fused[#loc224, #loc223])
#loc377 = loc(fused[#loc225, #loc226])
#loc378 = loc(fused[#loc227, #loc228])
#loc379 = loc(fused[#loc231, #loc232])
#loc380 = loc(fused[#loc230, #loc232])
#loc381 = loc(fused[#loc229, #loc213])
#loc382 = loc(fused[#loc233, #loc234])
#loc383 = loc(fused[#loc235, #loc236])
#loc384 = loc(fused[#loc237, #loc234])
#loc385 = loc(fused[#loc241, #loc242])
#loc386 = loc(fused[#loc244, #loc243])
#loc387 = loc(fused[#loc245, #loc246])
#loc388 = loc(fused[#loc248, #loc242])
#loc389 = loc(fused[#loc250, #loc249])
#loc390 = loc(fused[#loc254, #loc253])
#loc391 = loc(fused[#loc255, #loc256])
#loc392 = loc(fused[#loc257, #loc258])
#loc393 = loc(fused[#loc260, #loc262])
#loc394 = loc(fused[#loc263, #loc264, #loc265, #loc256])
#loc395 = loc(fused[#loc267, #loc266])
#loc396 = loc(fused[#loc270, #loc271])
#loc397 = loc(fused[#loc273, #loc272])
#loc398 = loc(fused[#loc274, #loc275])
#loc399 = loc(fused[#loc277, #loc271])
#loc400 = loc(fused[#loc283, #loc282])
