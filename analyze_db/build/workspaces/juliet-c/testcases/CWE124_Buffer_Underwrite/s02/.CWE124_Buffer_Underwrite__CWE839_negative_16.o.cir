!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc167)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_negative_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%4) loc(#loc15)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<5> : !s32i loc(#loc17)
          %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc18)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
          cir.break loc(#loc20)
        } loc(#loc173)
        cir.yield loc(#loc14)
      } loc(#loc172)
    } loc(#loc172)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
        cir.condition(%4) loc(#loc23)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc178)
            %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc179)
            %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc179)
            cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc179)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
              %7 = cir.const #cir.int<10> : !s32i loc(#loc34)
              %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc181)
              cir.if %8 {
                %9 = cir.const #cir.int<1> : !s32i loc(#loc38)
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
                %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc40)
                %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc40)
                cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc183)
                cir.scope {
                  %13 = cir.const #cir.int<0> : !s32i loc(#loc43)
                  cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc185)
                  cir.for : cond {
                    %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc45)
                    %15 = cir.const #cir.int<10> : !s32i loc(#loc46)
                    %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc186)
                    cir.condition(%16) loc(#loc47)
                  } body {
                    cir.scope {
                      %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc49)
                      %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc50)
                      %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc50)
                      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc50)
                      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc51)
                    } loc(#loc187)
                    cir.yield loc(#loc42)
                  } step {
                    %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                    %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc53)
                    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc188)
                    cir.yield loc(#loc184)
                  } loc(#loc184)
                } loc(#loc184)
              } else {
                %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
              } loc(#loc182)
            } loc(#loc180)
          } loc(#loc177)
          cir.break loc(#loc55)
        } loc(#loc176)
        cir.yield loc(#loc22)
      } loc(#loc175)
    } loc(#loc175)
    cir.return loc(#loc7)
  } loc(#loc169)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_negative_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc190)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc62)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc68)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc72)
        cir.condition(%4) loc(#loc72)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<5> : !s32i loc(#loc74)
          %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc75)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
          cir.break loc(#loc77)
        } loc(#loc196)
        cir.yield loc(#loc71)
      } loc(#loc195)
    } loc(#loc195)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc80)
        cir.condition(%4) loc(#loc80)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc201)
            %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc202)
            %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc202)
            cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc202)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %7 = cir.const #cir.int<0> : !s32i loc(#loc91)
              %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc204)
              %9 = cir.ternary(%8, true {
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                %11 = cir.const #cir.int<10> : !s32i loc(#loc94)
                %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc205)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc92)
                  cir.yield %14 : !cir.bool loc(#loc92)
                }, false {
                  %14 = cir.const #false loc(#loc92)
                  cir.yield %14 : !cir.bool loc(#loc92)
                }) : (!cir.bool) -> !cir.bool loc(#loc92)
                cir.yield %13 : !cir.bool loc(#loc92)
              }, false {
                %10 = cir.const #false loc(#loc92)
                cir.yield %10 : !cir.bool loc(#loc92)
              }) : (!cir.bool) -> !cir.bool loc(#loc92)
              cir.if %9 {
                %10 = cir.const #cir.int<1> : !s32i loc(#loc99)
                %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc101)
                %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc101)
                cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc207)
                cir.scope {
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc104)
                  cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc209)
                  cir.for : cond {
                    %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                    %16 = cir.const #cir.int<10> : !s32i loc(#loc107)
                    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc210)
                    cir.condition(%17) loc(#loc108)
                  } body {
                    cir.scope {
                      %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                      %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc111)
                      %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc111)
                      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                      cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc112)
                    } loc(#loc211)
                    cir.yield loc(#loc103)
                  } step {
                    %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                    %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc114)
                    cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc212)
                    cir.yield loc(#loc208)
                  } loc(#loc208)
                } loc(#loc208)
              } else {
                %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc62)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc62)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc115)
              } loc(#loc206)
            } loc(#loc203)
          } loc(#loc200)
          cir.break loc(#loc116)
        } loc(#loc199)
        cir.yield loc(#loc79)
      } loc(#loc198)
    } loc(#loc198)
    cir.return loc(#loc64)
  } loc(#loc192)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc122)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc126)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc126)
        cir.condition(%4) loc(#loc126)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<7> : !s32i loc(#loc128)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
          cir.break loc(#loc130)
        } loc(#loc217)
        cir.yield loc(#loc125)
      } loc(#loc216)
    } loc(#loc216)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc133)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc133)
        cir.condition(%4) loc(#loc133)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc222)
            %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc223)
            %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc223)
            cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc223)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %7 = cir.const #cir.int<10> : !s32i loc(#loc144)
              %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc225)
              cir.if %8 {
                %9 = cir.const #cir.int<1> : !s32i loc(#loc148)
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
                %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc150)
                %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc150)
                cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc227)
                cir.scope {
                  %13 = cir.const #cir.int<0> : !s32i loc(#loc153)
                  cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc229)
                  cir.for : cond {
                    %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc155)
                    %15 = cir.const #cir.int<10> : !s32i loc(#loc156)
                    %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc230)
                    cir.condition(%16) loc(#loc157)
                  } body {
                    cir.scope {
                      %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                      %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc160)
                      %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc160)
                      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc161)
                    } loc(#loc231)
                    cir.yield loc(#loc152)
                  } step {
                    %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc162)
                    %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc163)
                    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc232)
                    cir.yield loc(#loc228)
                  } loc(#loc228)
                } loc(#loc228)
              } else {
                %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc164)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc164)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc165)
              } loc(#loc226)
            } loc(#loc224)
          } loc(#loc221)
          cir.break loc(#loc166)
        } loc(#loc220)
        cir.yield loc(#loc132)
      } loc(#loc219)
    } loc(#loc219)
    cir.return loc(#loc118)
  } loc(#loc213)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":51:27)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":56:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":24:5)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":24:9)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":26:13)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":26:12)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":26:5)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":27:5)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":32:5)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":27:11)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":28:5)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":30:17)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":30:16)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":30:9)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":31:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":33:5)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":55:5)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":33:11)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":34:5)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":35:9)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":53:9)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":36:13)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":36:17)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":37:13)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":37:34)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":40:13)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":52:13)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":40:17)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":40:24)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":41:13)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":48:13)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":50:13)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":42:32)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":42:24)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":42:17)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:17)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":47:17)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:25)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:21)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:28)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:32)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:30)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":45:17)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":46:41)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":46:34)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":46:21)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:37)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":44:36)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":51:17)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":54:9)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":136:1)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":140:1)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":138:5)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":138:13)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":139:5)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":139:13)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":91:27)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":63:1)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":96:1)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":65:5)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":65:9)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":67:13)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":67:12)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":67:5)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":68:5)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":73:5)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":68:11)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":69:5)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":71:17)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":71:16)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":71:9)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":72:9)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":74:5)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":95:5)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":74:11)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":75:5)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":76:9)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":93:9)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":77:13)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":77:17)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":78:13)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":78:34)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:13)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":92:13)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:17)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:25)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:27)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:30)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:38)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":80:40)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":81:13)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":88:13)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":90:13)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":82:32)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":82:24)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":82:17)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:17)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":87:17)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:25)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:21)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:28)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:32)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:30)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":85:17)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":86:41)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":86:34)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":86:21)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:37)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":84:36)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":91:17)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":94:9)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":99:1)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":134:1)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":101:5)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":101:9)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":103:13)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":103:12)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":103:5)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":104:5)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":110:5)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":104:11)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":105:5)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":108:16)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":108:9)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":109:9)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":111:5)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":133:5)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":111:11)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":112:5)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":113:9)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":131:9)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":114:13)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":114:17)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":115:13)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":115:34)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":118:13)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":130:13)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":118:17)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":118:24)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":119:13)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":126:13)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":128:13)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":120:32)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":120:24)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":120:17)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:17)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":125:17)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:25)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:21)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:28)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:32)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:30)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":123:17)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":124:41)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":124:34)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":124:21)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:37)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":122:36)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":129:27)
#loc165 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":129:17)
#loc166 = loc("CWE124_Buffer_Underwrite__CWE839_negative_16.c":132:9)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc6, #loc7])
#loc170 = loc(fused[#loc8, #loc9])
#loc171 = loc(fused[#loc12, #loc10])
#loc172 = loc(fused[#loc13, #loc14])
#loc173 = loc(fused[#loc16, #loc14])
#loc174 = loc(fused[#loc19, #loc17])
#loc175 = loc(fused[#loc21, #loc22])
#loc176 = loc(fused[#loc24, #loc22])
#loc177 = loc(fused[#loc25, #loc26])
#loc178 = loc(fused[#loc27, #loc28])
#loc179 = loc(fused[#loc29, #loc30])
#loc180 = loc(fused[#loc31, #loc32])
#loc181 = loc(fused[#loc33, #loc34])
#loc182 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc183 = loc(fused[#loc40, #loc38])
#loc184 = loc(fused[#loc41, #loc42])
#loc185 = loc(fused[#loc44, #loc43])
#loc186 = loc(fused[#loc45, #loc46])
#loc187 = loc(fused[#loc48, #loc42])
#loc188 = loc(fused[#loc53, #loc52])
#loc189 = loc(fused[#loc56, #loc57])
#loc190 = loc(fused[#loc58, #loc59])
#loc191 = loc(fused[#loc60, #loc61])
#loc192 = loc(fused[#loc63, #loc64])
#loc193 = loc(fused[#loc65, #loc66])
#loc194 = loc(fused[#loc69, #loc67])
#loc195 = loc(fused[#loc70, #loc71])
#loc196 = loc(fused[#loc73, #loc71])
#loc197 = loc(fused[#loc76, #loc74])
#loc198 = loc(fused[#loc78, #loc79])
#loc199 = loc(fused[#loc81, #loc79])
#loc200 = loc(fused[#loc82, #loc83])
#loc201 = loc(fused[#loc84, #loc85])
#loc202 = loc(fused[#loc86, #loc87])
#loc203 = loc(fused[#loc88, #loc89])
#loc204 = loc(fused[#loc90, #loc91])
#loc205 = loc(fused[#loc93, #loc95])
#loc206 = loc(fused[#loc96, #loc97, #loc98, #loc89])
#loc207 = loc(fused[#loc101, #loc99])
#loc208 = loc(fused[#loc102, #loc103])
#loc209 = loc(fused[#loc105, #loc104])
#loc210 = loc(fused[#loc106, #loc107])
#loc211 = loc(fused[#loc109, #loc103])
#loc212 = loc(fused[#loc114, #loc113])
#loc213 = loc(fused[#loc117, #loc118])
#loc214 = loc(fused[#loc119, #loc120])
#loc215 = loc(fused[#loc123, #loc121])
#loc216 = loc(fused[#loc124, #loc125])
#loc217 = loc(fused[#loc127, #loc125])
#loc218 = loc(fused[#loc129, #loc128])
#loc219 = loc(fused[#loc131, #loc132])
#loc220 = loc(fused[#loc134, #loc132])
#loc221 = loc(fused[#loc135, #loc136])
#loc222 = loc(fused[#loc137, #loc138])
#loc223 = loc(fused[#loc139, #loc140])
#loc224 = loc(fused[#loc141, #loc142])
#loc225 = loc(fused[#loc143, #loc144])
#loc226 = loc(fused[#loc145, #loc146, #loc147, #loc142])
#loc227 = loc(fused[#loc150, #loc148])
#loc228 = loc(fused[#loc151, #loc152])
#loc229 = loc(fused[#loc154, #loc153])
#loc230 = loc(fused[#loc155, #loc156])
#loc231 = loc(fused[#loc158, #loc152])
#loc232 = loc(fused[#loc163, #loc162])
