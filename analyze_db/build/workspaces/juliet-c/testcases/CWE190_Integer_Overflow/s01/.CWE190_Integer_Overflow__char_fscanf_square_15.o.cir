!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc208)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private @printHexCharLine(!s8i) loc(#loc211)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc213)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc15)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc15)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc214)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc19)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc21)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc209)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc21)
          cir.break loc(#loc23)
        } loc(#loc20)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc25)
          cir.break loc(#loc26)
        } loc(#loc24)
        cir.yield loc(#loc17)
      } loc(#loc17)
    } loc(#loc215)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc29)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc218)
            %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc35)
            %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc35)
            %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc34)
            %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc34)
            %9 = cir.binop(mul, %6, %8) nsw : !s32i loc(#loc35)
            %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc35)
            cir.store %10, %4 : !s8i, !cir.ptr<!s8i> loc(#loc218)
            %11 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc36)
            cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc37)
          } loc(#loc217)
          cir.break loc(#loc38)
        } loc(#loc30)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          cir.break loc(#loc42)
        } loc(#loc39)
        cir.yield loc(#loc27)
      } loc(#loc27)
    } loc(#loc216)
    cir.return loc(#loc12)
  } loc(#loc212)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc220)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc221)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc222)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc223)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc44)
  } loc(#loc219)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc225)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc59)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc59)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc226)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc63)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc65)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc209)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc66)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc67)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc67)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc65)
          cir.break loc(#loc68)
        } loc(#loc64)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc71)
          cir.break loc(#loc72)
        } loc(#loc69)
        cir.yield loc(#loc61)
      } loc(#loc61)
    } loc(#loc227)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc75)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc77)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc77)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          cir.break loc(#loc79)
        } loc(#loc76)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc83)
            %5 = cir.cast(integral, %4 : !s8i), !s64i loc(#loc83)
            %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc83)
            %7 = cir.abs %6 poison : !s32i loc(#loc84)
            %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc84)
            %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc85)
            %10 = cir.const #cir.int<127> : !s32i loc(#loc86)
            %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc86)
            %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc85)
            %13 = cir.cast(float_to_int, %12 : !cir.double), !s64i loc(#loc85)
            %14 = cir.cmp(le, %8, %13) : !s64i, !cir.bool loc(#loc230)
            cir.if %14 {
              %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc232)
              %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc93)
              %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc93)
              %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc92)
              %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc92)
              %20 = cir.binop(mul, %17, %19) nsw : !s32i loc(#loc93)
              %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc93)
              cir.store %21, %15 : !s8i, !cir.ptr<!s8i> loc(#loc232)
              %22 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc94)
              cir.call @printHexCharLine(%22) : (!s8i) -> () loc(#loc95)
            } else {
              %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } loc(#loc231)
          } loc(#loc229)
          cir.break loc(#loc97)
        } loc(#loc80)
        cir.yield loc(#loc73)
      } loc(#loc73)
    } loc(#loc228)
    cir.return loc(#loc56)
  } loc(#loc224)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc234)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc102)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc102)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc235)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc106)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc108)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc209)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc109)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc110)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc110)
          %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc108)
          cir.break loc(#loc111)
        } loc(#loc107)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc113)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc113)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc114)
          cir.break loc(#loc115)
        } loc(#loc112)
        cir.yield loc(#loc104)
      } loc(#loc104)
    } loc(#loc236)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc118)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc122)
            %5 = cir.cast(integral, %4 : !s8i), !s64i loc(#loc122)
            %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc122)
            %7 = cir.abs %6 poison : !s32i loc(#loc123)
            %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc123)
            %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc124)
            %10 = cir.const #cir.int<127> : !s32i loc(#loc125)
            %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc125)
            %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc124)
            %13 = cir.cast(float_to_int, %12 : !cir.double), !s64i loc(#loc124)
            %14 = cir.cmp(le, %8, %13) : !s64i, !cir.bool loc(#loc239)
            cir.if %14 {
              %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc241)
              %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc132)
              %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc132)
              %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc131)
              %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc131)
              %20 = cir.binop(mul, %17, %19) nsw : !s32i loc(#loc132)
              %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc132)
              cir.store %21, %15 : !s8i, !cir.ptr<!s8i> loc(#loc241)
              %22 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc133)
              cir.call @printHexCharLine(%22) : (!s8i) -> () loc(#loc134)
            } else {
              %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc135)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc135)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc136)
            } loc(#loc240)
          } loc(#loc238)
          cir.break loc(#loc137)
        } loc(#loc119)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc139)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc139)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc140)
          cir.break loc(#loc141)
        } loc(#loc138)
        cir.yield loc(#loc116)
      } loc(#loc116)
    } loc(#loc237)
    cir.return loc(#loc99)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc243)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc146)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc146)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc244)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc150)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc152)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc152)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc153)
          cir.break loc(#loc154)
        } loc(#loc151)
        cir.case(default, []) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc156)
          %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc156)
          cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc246)
          cir.break loc(#loc158)
        } loc(#loc155)
        cir.yield loc(#loc148)
      } loc(#loc148)
    } loc(#loc245)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc161)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc249)
            %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc167)
            %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc167)
            %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc166)
            %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc166)
            %9 = cir.binop(mul, %6, %8) nsw : !s32i loc(#loc167)
            %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc167)
            cir.store %10, %4 : !s8i, !cir.ptr<!s8i> loc(#loc249)
            %11 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc168)
            cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc169)
          } loc(#loc248)
          cir.break loc(#loc170)
        } loc(#loc162)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc173)
          cir.break loc(#loc174)
        } loc(#loc171)
        cir.yield loc(#loc159)
      } loc(#loc159)
    } loc(#loc247)
    cir.return loc(#loc143)
  } loc(#loc242)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc251)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc179)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc179)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc252)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc183)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc185)
          %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc185)
          cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc254)
          cir.break loc(#loc187)
        } loc(#loc184)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc189)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc189)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc190)
          cir.break loc(#loc191)
        } loc(#loc188)
        cir.yield loc(#loc181)
      } loc(#loc181)
    } loc(#loc253)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc194)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc257)
            %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc200)
            %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc200)
            %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc199)
            %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc199)
            %9 = cir.binop(mul, %6, %8) nsw : !s32i loc(#loc200)
            %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc200)
            cir.store %10, %4 : !s8i, !cir.ptr<!s8i> loc(#loc257)
            %11 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc201)
            cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc202)
          } loc(#loc256)
          cir.break loc(#loc203)
        } loc(#loc195)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc205)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc205)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc206)
          cir.break loc(#loc207)
        } loc(#loc204)
        cir.yield loc(#loc192)
      } loc(#loc192)
    } loc(#loc255)
    cir.return loc(#loc176)
  } loc(#loc250)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":32:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":36:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":24:1)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":53:1)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":26:10)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":27:12)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":38:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":28:12)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":30:5)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":32:9)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":32:17)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":33:9)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":34:5)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":37:9)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":52:5)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":39:12)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":41:5)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":42:5)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":46:5)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":44:9)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":44:30)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":44:23)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":45:26)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":45:9)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":47:5)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":48:5)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":50:19)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":50:9)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":51:9)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":197:1)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":203:1)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":199:5)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":199:14)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":200:5)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":200:14)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":201:5)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":201:14)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":202:5)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":202:14)
#loc53 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":90:23)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":60:1)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":94:1)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":62:5)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":62:10)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":63:12)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":64:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":74:5)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":64:12)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":66:5)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":68:9)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":68:17)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":68:24)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":69:9)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":70:5)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":72:19)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":72:9)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":73:9)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":75:5)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":93:5)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":75:12)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":77:5)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":79:19)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":79:9)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":80:9)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":81:5)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":83:9)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":91:9)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":83:23)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":83:13)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":83:38)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":83:51)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":83:59)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":84:9)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":87:9)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":89:9)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":85:13)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":85:34)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":85:27)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":86:30)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":86:13)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":90:13)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":92:9)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":97:1)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":131:1)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":99:5)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":99:10)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":100:12)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":100:5)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":101:5)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":111:5)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":101:12)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":103:5)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":105:9)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":105:17)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":105:24)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":106:9)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":107:5)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":109:19)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":109:9)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":110:9)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":112:5)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":130:5)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":112:12)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":114:5)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":116:9)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":124:9)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":116:23)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":116:13)
#loc124 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":116:38)
#loc125 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":116:51)
#loc126 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":116:59)
#loc127 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":117:9)
#loc128 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":120:9)
#loc129 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":122:9)
#loc130 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":118:13)
#loc131 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":118:34)
#loc132 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":118:27)
#loc133 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":119:30)
#loc134 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":119:13)
#loc135 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":123:23)
#loc136 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":123:13)
#loc137 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":125:9)
#loc138 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":126:5)
#loc139 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":128:19)
#loc140 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":128:9)
#loc141 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":129:9)
#loc142 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":134:1)
#loc143 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":163:1)
#loc144 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":136:5)
#loc145 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":136:10)
#loc146 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":137:12)
#loc147 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":137:5)
#loc148 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":138:5)
#loc149 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":148:5)
#loc150 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":138:12)
#loc151 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":140:5)
#loc152 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":142:19)
#loc153 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":142:9)
#loc154 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":143:9)
#loc155 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":144:5)
#loc156 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":146:16)
#loc157 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":146:9)
#loc158 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":147:9)
#loc159 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":149:5)
#loc160 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":162:5)
#loc161 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":149:12)
#loc162 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":151:5)
#loc163 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":152:5)
#loc164 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":156:5)
#loc165 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":154:9)
#loc166 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":154:30)
#loc167 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":154:23)
#loc168 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":155:26)
#loc169 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":155:9)
#loc170 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":157:5)
#loc171 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":158:5)
#loc172 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":160:19)
#loc173 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":160:9)
#loc174 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":161:9)
#loc175 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":166:1)
#loc176 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":195:1)
#loc177 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":168:5)
#loc178 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":168:10)
#loc179 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":169:12)
#loc180 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":169:5)
#loc181 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":170:5)
#loc182 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":180:5)
#loc183 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":170:12)
#loc184 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":172:5)
#loc185 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":174:16)
#loc186 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":174:9)
#loc187 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":175:9)
#loc188 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":176:5)
#loc189 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":178:19)
#loc190 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":178:9)
#loc191 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":179:9)
#loc192 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":181:5)
#loc193 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":194:5)
#loc194 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":181:12)
#loc195 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":183:5)
#loc196 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":184:5)
#loc197 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":188:5)
#loc198 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":186:9)
#loc199 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":186:30)
#loc200 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":186:23)
#loc201 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":187:26)
#loc202 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":187:9)
#loc203 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":189:5)
#loc204 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":190:5)
#loc205 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":192:19)
#loc206 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":192:9)
#loc207 = loc("CWE190_Integer_Overflow__char_fscanf_square_15.c":193:9)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc3, #loc4])
#loc210 = loc(fused[#loc6, #loc7])
#loc211 = loc(fused[#loc9, #loc10])
#loc212 = loc(fused[#loc11, #loc12])
#loc213 = loc(fused[#loc13, #loc14])
#loc214 = loc(fused[#loc16, #loc15])
#loc215 = loc(fused[#loc17, #loc18])
#loc216 = loc(fused[#loc27, #loc28])
#loc217 = loc(fused[#loc31, #loc32])
#loc218 = loc(fused[#loc33, #loc34])
#loc219 = loc(fused[#loc43, #loc44])
#loc220 = loc(fused[#loc45, #loc46])
#loc221 = loc(fused[#loc47, #loc48])
#loc222 = loc(fused[#loc49, #loc50])
#loc223 = loc(fused[#loc51, #loc52])
#loc224 = loc(fused[#loc55, #loc56])
#loc225 = loc(fused[#loc57, #loc58])
#loc226 = loc(fused[#loc60, #loc59])
#loc227 = loc(fused[#loc61, #loc62])
#loc228 = loc(fused[#loc73, #loc74])
#loc229 = loc(fused[#loc81, #loc82])
#loc230 = loc(fused[#loc84, #loc87])
#loc231 = loc(fused[#loc88, #loc89, #loc90, #loc82])
#loc232 = loc(fused[#loc91, #loc92])
#loc233 = loc(fused[#loc98, #loc99])
#loc234 = loc(fused[#loc100, #loc101])
#loc235 = loc(fused[#loc103, #loc102])
#loc236 = loc(fused[#loc104, #loc105])
#loc237 = loc(fused[#loc116, #loc117])
#loc238 = loc(fused[#loc120, #loc121])
#loc239 = loc(fused[#loc123, #loc126])
#loc240 = loc(fused[#loc127, #loc128, #loc129, #loc121])
#loc241 = loc(fused[#loc130, #loc131])
#loc242 = loc(fused[#loc142, #loc143])
#loc243 = loc(fused[#loc144, #loc145])
#loc244 = loc(fused[#loc147, #loc146])
#loc245 = loc(fused[#loc148, #loc149])
#loc246 = loc(fused[#loc157, #loc156])
#loc247 = loc(fused[#loc159, #loc160])
#loc248 = loc(fused[#loc163, #loc164])
#loc249 = loc(fused[#loc165, #loc166])
#loc250 = loc(fused[#loc175, #loc176])
#loc251 = loc(fused[#loc177, #loc178])
#loc252 = loc(fused[#loc180, #loc179])
#loc253 = loc(fused[#loc181, #loc182])
#loc254 = loc(fused[#loc186, #loc185])
#loc255 = loc(fused[#loc192, #loc193])
#loc256 = loc(fused[#loc196, #loc197])
#loc257 = loc(fused[#loc198, #loc199])
