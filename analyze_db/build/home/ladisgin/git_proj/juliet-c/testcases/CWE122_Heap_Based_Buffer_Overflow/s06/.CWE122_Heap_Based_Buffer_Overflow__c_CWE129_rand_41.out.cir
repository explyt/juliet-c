!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":22:21)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":22:25)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":163:10)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":163:14)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":163:20)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":163:32)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":109:25)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":109:29)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":67:25)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":67:29)
#true = #cir.bool<true> : !cir.bool
#loc288 = loc(fused[#loc14, #loc15])
#loc324 = loc(fused[#loc106, #loc107])
#loc325 = loc(fused[#loc108, #loc109])
#loc330 = loc(fused[#loc127, #loc128])
#loc361 = loc(fused[#loc207, #loc208])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc282)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc283)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc284)
  cir.func private @printIntLine(!s32i) loc(#loc285)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc286)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc288)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc290)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc291)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc24)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc24)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc292)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc293)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc294)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc291)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc296)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc33)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc34)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
        } loc(#loc297)
      } loc(#loc295)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc37)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc299)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc40)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc300)
          cir.condition(%16) loc(#loc41)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc43)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc46)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc302)
          } loc(#loc301)
          cir.yield loc(#loc36)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc48)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc303)
          cir.yield loc(#loc298)
        } loc(#loc298)
      } loc(#loc298)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc52)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc305)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc59)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc307)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc62)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc309)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc65)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc310)
              cir.condition(%23) loc(#loc66)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc70)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc68)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc71)
              } loc(#loc311)
              cir.yield loc(#loc61)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc73)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc312)
              cir.yield loc(#loc308)
            } loc(#loc308)
          } loc(#loc308)
        } else {
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc74)
        } loc(#loc306)
      } loc(#loc304)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc75)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc76)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
    } loc(#loc289)
    cir.return loc(#loc13)
  } loc(#loc287)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc314)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc82)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc84)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc84)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc84)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc84)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc84)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc84)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc84)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc84)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc84)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc84)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc84)
      cir.yield %21 : !u32i loc(#loc84)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc84)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc84)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc84)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc84)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc84)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc84)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc84)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc84)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc84)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc84)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc84)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc84)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc84)
      cir.yield %25 : !u32i loc(#loc84)
    }) : (!cir.bool) -> !u32i loc(#loc84)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc84)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @badSink(%9) : (!s32i) -> () loc(#loc87)
    cir.return loc(#loc78)
  } loc(#loc313)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc318)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc90)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc319)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc92)
    cir.return loc(#loc89)
  } loc(#loc317)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc320)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc321)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc322)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc103)
  cir.func @main(%arg0: !s32i loc(fused[#loc106, #loc107]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc108, #loc109])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc324)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc325)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc105)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc110)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc111)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc112)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc112)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc113)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc100)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc326)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_good() : () -> () loc(#loc115)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc101)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc102)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc327)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_bad() : () -> () loc(#loc119)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc103)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc328)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc328)
    cir.return %17 : !s32i loc(#loc328)
  } loc(#loc323)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc124)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc127, #loc128])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc330)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc332)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc333)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc136)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc137)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc137)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc334)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc335)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc136)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc336)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc333)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc143)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc338)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc145)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc146)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc147)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc145)
        } loc(#loc339)
      } loc(#loc337)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc150)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc341)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc153)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc342)
          cir.condition(%16) loc(#loc154)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc156)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc158)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc159)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc344)
          } loc(#loc343)
          cir.yield loc(#loc149)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc160)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc161)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc345)
          cir.yield loc(#loc340)
        } loc(#loc340)
      } loc(#loc340)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc165)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc347)
        %16 = cir.ternary(%15, true {
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc168)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc348)
          %20 = cir.ternary(%19, true {
            %21 = cir.const #true loc(#loc166)
            cir.yield %21 : !cir.bool loc(#loc166)
          }, false {
            %21 = cir.const #false loc(#loc166)
            cir.yield %21 : !cir.bool loc(#loc166)
          }) : (!cir.bool) -> !cir.bool loc(#loc166)
          cir.yield %20 : !cir.bool loc(#loc166)
        }, false {
          %17 = cir.const #false loc(#loc166)
          cir.yield %17 : !cir.bool loc(#loc166)
        }) : (!cir.bool) -> !cir.bool loc(#loc166)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc173)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc176)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc350)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc179)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc352)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc181)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc182)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc353)
              cir.condition(%24) loc(#loc183)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc187)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc185)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc188)
              } loc(#loc354)
              cir.yield loc(#loc178)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc189)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc190)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc355)
              cir.yield loc(#loc351)
            } loc(#loc351)
          } loc(#loc351)
        } else {
          %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc124)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc124)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc191)
        } loc(#loc349)
      } loc(#loc346)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc192)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc193)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc192)
    } loc(#loc331)
    cir.return loc(#loc126)
  } loc(#loc329)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc357)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc198)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc199)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc358)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc201)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc201)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc201)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc201)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc201)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc201)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc201)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc201)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc201)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc201)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc201)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc201)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc201)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc201)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc201)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc201)
      cir.yield %21 : !u32i loc(#loc201)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc201)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc201)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc201)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc201)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc201)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc201)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc201)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc201)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc201)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc201)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc201)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc201)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc201)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc201)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc201)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc201)
      cir.yield %25 : !u32i loc(#loc201)
    }) : (!cir.bool) -> !u32i loc(#loc201)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc201)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    cir.call @goodB2GSink(%9) : (!s32i) -> () loc(#loc204)
    cir.return loc(#loc195)
  } loc(#loc356)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc207, #loc208])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc361)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc363)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc364)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc216)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc217)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc217)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc365)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc366)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc216)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc367)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc364)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc223)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc223)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc369)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc225)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc226)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc227)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc225)
        } loc(#loc370)
      } loc(#loc368)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc230)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc372)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc232)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc233)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc373)
          cir.condition(%16) loc(#loc234)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc236)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc238)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc239)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc375)
          } loc(#loc374)
          cir.yield loc(#loc229)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc240)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc241)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc376)
          cir.yield loc(#loc371)
        } loc(#loc371)
      } loc(#loc371)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc244)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc245)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc378)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc249)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc250)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc251)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc252)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc380)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc255)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc382)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc257)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc258)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc383)
              cir.condition(%23) loc(#loc259)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc261)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc263)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc261)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc264)
              } loc(#loc384)
              cir.yield loc(#loc254)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc266)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc385)
              cir.yield loc(#loc381)
            } loc(#loc381)
          } loc(#loc381)
        } else {
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc267)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc267)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc268)
        } loc(#loc379)
      } loc(#loc377)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc269)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc270)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc270)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc269)
    } loc(#loc362)
    cir.return loc(#loc206)
  } loc(#loc360)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc387)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc275)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc276)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc388)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc278)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc389)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc280)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc281)
    cir.return loc(#loc272)
  } loc(#loc386)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":46:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":22:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":50:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":23:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":24:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":49:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":25:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":25:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":26:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":26:54)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":26:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":26:38)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":26:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":26:53)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":27:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":27:39)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":27:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":27:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":27:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":27:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":27:36)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":27:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":29:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":29:18)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":29:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":29:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":29:25)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":29:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":30:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":31:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":31:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":31:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":31:21)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":29:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":29:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":35:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":47:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":35:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":35:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":36:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":43:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":45:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":37:28)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":37:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":37:20)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":37:24)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":39:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":42:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":39:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":39:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":39:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":39:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":39:26)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":40:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":41:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":41:37)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":41:38)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":41:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":39:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":39:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":46:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":48:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":48:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":52:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":60:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":54:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":54:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":56:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":56:12)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":56:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":58:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":58:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":59:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":59:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":148:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":152:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":150:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":150:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":151:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":151:13)
#loc94 = loc("/usr/include/stdlib.h":575:1)
#loc95 = loc("/usr/include/stdlib.h":575:41)
#loc96 = loc("/usr/include/time.h":76:1)
#loc97 = loc("/usr/include/time.h":76:38)
#loc98 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc99 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":168:15)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":170:15)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":173:15)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":175:15)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":163:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":178:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":164:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":166:27)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":166:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":166:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":168:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":169:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":169:62)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":170:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":173:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":174:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":174:61)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":175:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":177:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":177:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":132:23)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":109:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":136:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":110:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":111:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":135:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":112:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":112:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":113:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":113:54)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":113:31)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":113:38)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":113:43)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":113:53)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":114:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":114:39)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":114:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":114:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":114:29)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":114:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":114:36)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":114:35)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":116:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":119:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":116:18)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":116:14)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":116:21)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":116:25)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":116:23)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":117:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":118:25)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":118:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":118:20)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":118:21)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":116:30)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":116:29)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":121:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":133:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":121:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":121:21)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":121:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":121:26)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":121:34)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":121:36)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":122:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":129:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":131:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":123:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":123:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":123:20)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":123:24)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":125:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":128:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":125:21)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":125:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":125:24)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":125:28)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":125:26)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":126:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":127:30)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":127:37)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":127:38)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":127:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":125:33)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":125:32)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":132:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":134:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":134:14)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":138:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":146:1)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":140:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":140:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":142:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":142:12)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":142:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":144:12)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":144:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":145:17)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":145:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":67:1)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":95:1)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":68:1)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":69:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":94:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":70:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":70:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":71:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":71:54)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":71:31)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":71:38)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":71:43)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":71:53)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":72:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":72:39)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":72:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":72:23)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":72:29)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":72:30)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":72:36)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":72:35)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":74:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":77:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":74:18)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":74:14)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":74:21)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":74:25)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":74:23)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":75:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":76:25)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":76:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":76:20)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":76:21)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":74:30)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":74:29)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":80:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":92:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":80:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":80:21)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":81:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":88:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":90:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":82:28)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":82:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":82:20)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":82:24)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":84:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":87:13)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":84:21)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":84:17)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":84:24)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":84:28)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":84:26)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":85:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":86:30)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":86:37)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":86:38)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":86:17)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":84:33)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":84:32)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":91:23)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":91:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":93:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":93:14)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":97:1)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":106:1)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":99:5)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":99:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":101:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":101:12)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":101:5)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":104:12)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":104:5)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":105:17)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c":105:5)
#loc282 = loc(fused[#loc1, #loc2])
#loc283 = loc(fused[#loc3, #loc4])
#loc284 = loc(fused[#loc5, #loc6])
#loc285 = loc(fused[#loc7, #loc8])
#loc286 = loc(fused[#loc10, #loc11])
#loc287 = loc(fused[#loc12, #loc13])
#loc289 = loc(fused[#loc17, #loc18])
#loc290 = loc(fused[#loc19, #loc20])
#loc291 = loc(fused[#loc21, #loc22])
#loc292 = loc(fused[#loc25, #loc26])
#loc293 = loc(fused[#loc24, #loc26])
#loc294 = loc(fused[#loc23, #loc22])
#loc295 = loc(fused[#loc27, #loc28])
#loc296 = loc(fused[#loc29, #loc30])
#loc297 = loc(fused[#loc31, #loc28])
#loc298 = loc(fused[#loc35, #loc36])
#loc299 = loc(fused[#loc38, #loc37])
#loc300 = loc(fused[#loc39, #loc40])
#loc301 = loc(fused[#loc42, #loc36])
#loc302 = loc(fused[#loc44, #loc43])
#loc303 = loc(fused[#loc48, #loc47])
#loc304 = loc(fused[#loc49, #loc50])
#loc305 = loc(fused[#loc51, #loc52])
#loc306 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc307 = loc(fused[#loc57, #loc56])
#loc308 = loc(fused[#loc60, #loc61])
#loc309 = loc(fused[#loc63, #loc62])
#loc310 = loc(fused[#loc64, #loc65])
#loc311 = loc(fused[#loc67, #loc61])
#loc312 = loc(fused[#loc73, #loc72])
#loc313 = loc(fused[#loc77, #loc78])
#loc314 = loc(fused[#loc79, #loc80])
#loc315 = loc(fused[#loc83, #loc81])
#loc316 = loc(fused[#loc85, #loc84])
#loc317 = loc(fused[#loc88, #loc89])
#loc318 = loc(fused[#loc90, #loc91])
#loc319 = loc(fused[#loc92, #loc93])
#loc320 = loc(fused[#loc94, #loc95])
#loc321 = loc(fused[#loc96, #loc97])
#loc322 = loc(fused[#loc98, #loc99])
#loc323 = loc(fused[#loc104, #loc105])
#loc326 = loc(fused[#loc115, #loc116])
#loc327 = loc(fused[#loc119, #loc120])
#loc328 = loc(fused[#loc123, #loc122])
#loc329 = loc(fused[#loc125, #loc126])
#loc331 = loc(fused[#loc130, #loc131])
#loc332 = loc(fused[#loc132, #loc133])
#loc333 = loc(fused[#loc134, #loc135])
#loc334 = loc(fused[#loc138, #loc139])
#loc335 = loc(fused[#loc137, #loc139])
#loc336 = loc(fused[#loc136, #loc135])
#loc337 = loc(fused[#loc140, #loc141])
#loc338 = loc(fused[#loc142, #loc143])
#loc339 = loc(fused[#loc144, #loc141])
#loc340 = loc(fused[#loc148, #loc149])
#loc341 = loc(fused[#loc151, #loc150])
#loc342 = loc(fused[#loc152, #loc153])
#loc343 = loc(fused[#loc155, #loc149])
#loc344 = loc(fused[#loc157, #loc156])
#loc345 = loc(fused[#loc161, #loc160])
#loc346 = loc(fused[#loc162, #loc163])
#loc347 = loc(fused[#loc164, #loc165])
#loc348 = loc(fused[#loc167, #loc169])
#loc349 = loc(fused[#loc170, #loc171, #loc172, #loc163])
#loc350 = loc(fused[#loc174, #loc173])
#loc351 = loc(fused[#loc177, #loc178])
#loc352 = loc(fused[#loc180, #loc179])
#loc353 = loc(fused[#loc181, #loc182])
#loc354 = loc(fused[#loc184, #loc178])
#loc355 = loc(fused[#loc190, #loc189])
#loc356 = loc(fused[#loc194, #loc195])
#loc357 = loc(fused[#loc196, #loc197])
#loc358 = loc(fused[#loc200, #loc198])
#loc359 = loc(fused[#loc202, #loc201])
#loc360 = loc(fused[#loc205, #loc206])
#loc362 = loc(fused[#loc210, #loc211])
#loc363 = loc(fused[#loc212, #loc213])
#loc364 = loc(fused[#loc214, #loc215])
#loc365 = loc(fused[#loc218, #loc219])
#loc366 = loc(fused[#loc217, #loc219])
#loc367 = loc(fused[#loc216, #loc215])
#loc368 = loc(fused[#loc220, #loc221])
#loc369 = loc(fused[#loc222, #loc223])
#loc370 = loc(fused[#loc224, #loc221])
#loc371 = loc(fused[#loc228, #loc229])
#loc372 = loc(fused[#loc231, #loc230])
#loc373 = loc(fused[#loc232, #loc233])
#loc374 = loc(fused[#loc235, #loc229])
#loc375 = loc(fused[#loc237, #loc236])
#loc376 = loc(fused[#loc241, #loc240])
#loc377 = loc(fused[#loc242, #loc243])
#loc378 = loc(fused[#loc244, #loc245])
#loc379 = loc(fused[#loc246, #loc247, #loc248, #loc243])
#loc380 = loc(fused[#loc250, #loc249])
#loc381 = loc(fused[#loc253, #loc254])
#loc382 = loc(fused[#loc256, #loc255])
#loc383 = loc(fused[#loc257, #loc258])
#loc384 = loc(fused[#loc260, #loc254])
#loc385 = loc(fused[#loc266, #loc265])
#loc386 = loc(fused[#loc271, #loc272])
#loc387 = loc(fused[#loc273, #loc274])
#loc388 = loc(fused[#loc277, #loc275])
#loc389 = loc(fused[#loc279, #loc278])
