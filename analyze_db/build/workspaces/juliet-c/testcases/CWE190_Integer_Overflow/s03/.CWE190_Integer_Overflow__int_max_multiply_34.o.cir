!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType = !cir.record<union "CWE190_Integer_Overflow__int_max_multiply_34_unionType" {!s32i, !s32i}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc102)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_34_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc105)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc11)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType> -> !cir.ptr<!s32i> loc(#loc14)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc110)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc110)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc112)
        cir.if %11 {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc114)
          %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc27)
          %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc28)
          cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc114)
          %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc30)
        } loc(#loc113)
      } loc(#loc111)
    } loc(#loc109)
    cir.return loc(#loc4)
  } loc(#loc103)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_34_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc116)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc115)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc120)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc43)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc45)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType> -> !cir.ptr<!s32i> loc(#loc14)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc52)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc125)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc127)
        cir.if %11 {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc129)
          %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc59)
          %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc60)
          cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc129)
          %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc62)
        } loc(#loc128)
      } loc(#loc126)
    } loc(#loc124)
    cir.return loc(#loc38)
  } loc(#loc118)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc133)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc74)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType> -> !cir.ptr<!s32i> loc(#loc14)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc138)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_max_multiply_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc138)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc84)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc85)
        %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc140)
        cir.if %11 {
          cir.scope {
            %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc89)
            %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc90)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc91)
            %15 = cir.binop(div, %13, %14) : !s32i loc(#loc143)
            %16 = cir.cmp(lt, %12, %15) : !s32i, !cir.bool loc(#loc144)
            cir.if %16 {
              %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc146)
              %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %19 = cir.const #cir.int<2> : !s32i loc(#loc97)
              %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc98)
              cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc146)
              %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc100)
            } else {
              %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc65)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc65)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc101)
            } loc(#loc145)
          } loc(#loc142)
        } loc(#loc141)
      } loc(#loc139)
    } loc(#loc137)
    cir.return loc(#loc67)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_34.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":28:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":46:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":30:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":30:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":31:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":31:60)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":33:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":33:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":35:12)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":35:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":36:26)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":22:9)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":36:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":37:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":45:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":38:9)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":38:28)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":23:9)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":39:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":44:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":39:12)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":39:19)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":40:9)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":42:13)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":42:33)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":42:26)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":43:26)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":43:13)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":101:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":105:1)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":103:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":103:13)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":104:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":104:13)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":53:1)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":71:1)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":55:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":55:9)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":56:5)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":56:60)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":58:12)
#loc44 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":58:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":60:12)
#loc46 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":60:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":61:26)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":61:5)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":62:5)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":70:5)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":63:9)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":63:28)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":64:9)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":69:9)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":64:12)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":64:19)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":65:9)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":67:13)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":67:33)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":67:26)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":68:26)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":68:13)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":95:27)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":74:1)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":99:1)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":76:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":76:9)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":77:5)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":77:60)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":79:12)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":79:5)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":81:12)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":81:5)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":82:26)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":82:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":83:5)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":98:5)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":84:9)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":84:28)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":85:9)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":97:9)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":85:12)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":85:19)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":86:9)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":88:13)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":96:13)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":88:17)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":88:25)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":88:33)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":88:34)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":89:13)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":92:13)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":94:13)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":90:17)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":90:37)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":90:30)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":91:30)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":91:17)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_34.c":95:17)
#loc102 = loc(fused[#loc1, #loc2])
#loc103 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc5, #loc6])
#loc105 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc10, #loc9])
#loc107 = loc(fused[#loc12, #loc11])
#loc108 = loc(fused[#loc15, #loc13])
#loc109 = loc(fused[#loc16, #loc17])
#loc110 = loc(fused[#loc18, #loc19])
#loc111 = loc(fused[#loc21, #loc22])
#loc112 = loc(fused[#loc23, #loc24])
#loc113 = loc(fused[#loc25, #loc22])
#loc114 = loc(fused[#loc26, #loc27])
#loc115 = loc(fused[#loc31, #loc32])
#loc116 = loc(fused[#loc33, #loc34])
#loc117 = loc(fused[#loc35, #loc36])
#loc118 = loc(fused[#loc37, #loc38])
#loc119 = loc(fused[#loc39, #loc40])
#loc120 = loc(fused[#loc41, #loc42])
#loc121 = loc(fused[#loc44, #loc43])
#loc122 = loc(fused[#loc46, #loc45])
#loc123 = loc(fused[#loc48, #loc47])
#loc124 = loc(fused[#loc49, #loc50])
#loc125 = loc(fused[#loc51, #loc52])
#loc126 = loc(fused[#loc53, #loc54])
#loc127 = loc(fused[#loc55, #loc56])
#loc128 = loc(fused[#loc57, #loc54])
#loc129 = loc(fused[#loc58, #loc59])
#loc130 = loc(fused[#loc63, #loc64])
#loc131 = loc(fused[#loc66, #loc67])
#loc132 = loc(fused[#loc68, #loc69])
#loc133 = loc(fused[#loc70, #loc71])
#loc134 = loc(fused[#loc73, #loc72])
#loc135 = loc(fused[#loc75, #loc74])
#loc136 = loc(fused[#loc77, #loc76])
#loc137 = loc(fused[#loc78, #loc79])
#loc138 = loc(fused[#loc80, #loc81])
#loc139 = loc(fused[#loc82, #loc83])
#loc140 = loc(fused[#loc84, #loc85])
#loc141 = loc(fused[#loc86, #loc83])
#loc142 = loc(fused[#loc87, #loc88])
#loc143 = loc(fused[#loc90, #loc91])
#loc144 = loc(fused[#loc89, #loc92])
#loc145 = loc(fused[#loc93, #loc94, #loc95, #loc88])
#loc146 = loc(fused[#loc96, #loc97])
