!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc6 = loc("CWE617_Reachable_Assertion__fgets_67b.c":32:52)
#loc7 = loc("CWE617_Reachable_Assertion__fgets_67b.c":32:100)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_67b.c":44:56)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_67b.c":44:104)
!ty__CWE617_Reachable_Assertion__fgets_67_structType = !cir.struct<struct "_CWE617_Reachable_Assertion__fgets_67_structType" {!s32i}>
#loc22 = loc(fused[#loc6, #loc7])
#loc25 = loc(fused[#loc15, #loc16])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_67b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_67b.c\00" : !cir.array<!s8i x 40>> : !cir.array<!s8i x 40> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_67b_badSink(CWE617_Reachable_Assertion__fgets_67_structType)\00" : !cir.array<!s8i x 100>> : !cir.array<!s8i x 100> {alignment = 1 : i64} loc(#loc3)
  cir.func @CWE617_Reachable_Assertion__fgets_67b_badSink(%arg0: !ty__CWE617_Reachable_Assertion__fgets_67_structType loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE617_Reachable_Assertion__fgets_67_structType, !cir.ptr<!ty__CWE617_Reachable_Assertion__fgets_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc22)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc23)
    cir.store %arg0, %0 : !ty__CWE617_Reachable_Assertion__fgets_67_structType, !cir.ptr<!ty__CWE617_Reachable_Assertion__fgets_67_structType> loc(#loc10)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE617_Reachable_Assertion__fgets_67_structType> -> !cir.ptr<!s32i> loc(#loc11)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc23)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.br ^bb1 loc(#loc3)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc3)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc3)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc3)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc3)
    cir.brcond %7 ^bb3, ^bb4 loc(#loc3)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc3)
  ^bb4:  // pred: ^bb2
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc3)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc3)
    %12 = cir.const #cir.int<36> : !s32i loc(#loc3)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc3)
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc3)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%9, %11, %13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb5 loc(#loc3)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc3)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc3)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc5)
  } loc(#loc21)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_67b_goodG2BSink(CWE617_Reachable_Assertion__fgets_67_structType)\00" : !cir.array<!s8i x 104>> : !cir.array<!s8i x 104> {alignment = 1 : i64} loc(#loc12)
  cir.func @CWE617_Reachable_Assertion__fgets_67b_goodG2BSink(%arg0: !ty__CWE617_Reachable_Assertion__fgets_67_structType loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE617_Reachable_Assertion__fgets_67_structType, !cir.ptr<!ty__CWE617_Reachable_Assertion__fgets_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc25)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc26)
    cir.store %arg0, %0 : !ty__CWE617_Reachable_Assertion__fgets_67_structType, !cir.ptr<!ty__CWE617_Reachable_Assertion__fgets_67_structType> loc(#loc19)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE617_Reachable_Assertion__fgets_67_structType> -> !cir.ptr<!s32i> loc(#loc11)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc26)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc12)
    cir.br ^bb1 loc(#loc12)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc12)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc12)
    cir.brcond %7 ^bb3, ^bb4 loc(#loc12)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc12)
  ^bb4:  // pred: ^bb2
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc12)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc12)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc12)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc12)
    %12 = cir.const #cir.int<48> : !s32i loc(#loc12)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 104>> loc(#loc12)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 104>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @__assert_fail(%9, %11, %13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc12)
    cir.br ^bb5 loc(#loc12)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc12)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc12)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc14)
  } loc(#loc24)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_67b.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__fgets_67b.c":36:5)
#loc4 = loc("CWE617_Reachable_Assertion__fgets_67b.c":32:1)
#loc5 = loc("CWE617_Reachable_Assertion__fgets_67b.c":37:1)
#loc8 = loc("CWE617_Reachable_Assertion__fgets_67b.c":34:5)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_67b.c":34:25)
#loc10 = loc("CWE617_Reachable_Assertion__fgets_67b.c":33:1)
#loc11 = loc("CWE617_Reachable_Assertion__fgets_67b.c":27:9)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_67b.c":48:5)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_67b.c":44:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_67b.c":49:1)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_67b.c":46:5)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_67b.c":46:25)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_67b.c":45:1)
#loc20 = loc(fused[#loc1, #loc2])
#loc21 = loc(fused[#loc4, #loc5])
#loc23 = loc(fused[#loc8, #loc9])
#loc24 = loc(fused[#loc13, #loc14])
#loc26 = loc(fused[#loc17, #loc18])
