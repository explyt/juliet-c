!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc739)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc740)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc741)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc742)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc743)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc744)
  cir.func private @close(!s32i) -> !s32i loc(#loc745)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc746)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc18)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc747)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc748)
  cir.func private @printIntLine(!s32i) loc(#loc749)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc25)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc750)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc752)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc33)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc753)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc37)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc756)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc757)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc758)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc759)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc46)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc46)
            cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc758)
            cir.scope {
              cir.do {
                cir.scope {
                  %10 = cir.const #cir.int<2> : !s32i loc(#loc53)
                  %11 = cir.const #cir.int<1> : !s32i loc(#loc54)
                  %12 = cir.const #cir.int<6> : !s32i loc(#loc55)
                  %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc56)
                  cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc762)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc61)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc62)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc62)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc764)
                    cir.if %55 {
                      cir.break loc(#loc64)
                    } loc(#loc765)
                  } loc(#loc763)
                  %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc766)
                  %15 = cir.const #cir.int<0> : !s32i loc(#loc67)
                  %16 = cir.const #cir.int<16> : !u64i loc(#loc767)
                  cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc768)
                  %17 = cir.const #cir.int<2> : !s32i loc(#loc72)
                  %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc72)
                  %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                  cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc769)
                  %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc75)
                  %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc770)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc80)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc80)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc81)
                  %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc771)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                    %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc773)
                    %54 = cir.const #cir.int<16> : !u64i loc(#loc774)
                    %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc774)
                    %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc92)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc93)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc93)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc775)
                    cir.if %59 {
                      cir.break loc(#loc95)
                    } loc(#loc776)
                  } loc(#loc772)
                  %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
                  %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc97)
                  %32 = cir.const #cir.int<3> : !s32i loc(#loc98)
                  %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc98)
                  %34 = cir.const #cir.int<4> : !u64i loc(#loc98)
                  %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc98)
                  %36 = cir.const #cir.int<2> : !s32i loc(#loc98)
                  %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc98)
                  %38 = cir.binop(add, %35, %37) : !u64i loc(#loc98)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc99)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc99)
                  %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc777)
                  %42 = cir.const #cir.int<0> : !s32i loc(#loc100)
                  %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc101)
                  %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc101)
                  cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc778)
                  cir.scope {
                    %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc107)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc107)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc780)
                    %56 = cir.ternary(%55, true {
                      %57 = cir.const #true loc(#loc108)
                      cir.yield %57 : !cir.bool loc(#loc108)
                    }, false {
                      %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                      %58 = cir.const #cir.int<0> : !s32i loc(#loc110)
                      %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc781)
                      %60 = cir.ternary(%59, true {
                        %61 = cir.const #true loc(#loc108)
                        cir.yield %61 : !cir.bool loc(#loc108)
                      }, false {
                        %61 = cir.const #false loc(#loc108)
                        cir.yield %61 : !cir.bool loc(#loc108)
                      }) : (!cir.bool) -> !cir.bool loc(#loc108)
                      cir.yield %60 : !cir.bool loc(#loc108)
                    }) : (!cir.bool) -> !cir.bool loc(#loc108)
                    cir.if %56 {
                      cir.break loc(#loc112)
                    } loc(#loc782)
                  } loc(#loc779)
                  %45 = cir.const #cir.int<0> : !s32i loc(#loc113)
                  %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc113)
                  %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                  %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
                  %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc115)
                  cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc783)
                  %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
                  %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc117)
                  cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc784)
                } loc(#loc761)
                cir.yield loc(#loc50)
              } while {
                %10 = cir.const #cir.int<0> : !s32i loc(#loc120)
                %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc120)
                cir.condition(%11) loc(#loc120)
              } loc(#loc760)
            } loc(#loc760)
            cir.scope {
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc124)
              %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc124)
              %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc786)
              cir.if %13 {
                %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc127)
              } loc(#loc787)
            } loc(#loc785)
          } loc(#loc755)
          cir.break loc(#loc128)
        } loc(#loc38)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc18)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc18)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc130)
          cir.break loc(#loc131)
        } loc(#loc129)
        cir.yield loc(#loc35)
      } loc(#loc35)
    } loc(#loc754)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc134)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc790)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc791)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc142)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc143)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc143)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc792)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc793)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc142)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc794)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc791)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc149)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc149)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc796)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc151)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc152)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc153)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc151)
              } loc(#loc797)
            } loc(#loc795)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc156)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc799)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc158)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc159)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc800)
                cir.condition(%19) loc(#loc160)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc162)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc164)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc165)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc802)
                } loc(#loc801)
                cir.yield loc(#loc155)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc166)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc167)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc803)
                cir.yield loc(#loc798)
              } loc(#loc798)
            } loc(#loc798)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc171)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc805)
              cir.if %18 {
                %19 = cir.const #cir.int<1> : !s32i loc(#loc175)
                %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
                %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc178)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc807)
                cir.scope {
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc181)
                  cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc809)
                  cir.for : cond {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc183)
                    %25 = cir.const #cir.int<10> : !s32i loc(#loc184)
                    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc810)
                    cir.condition(%26) loc(#loc185)
                  } body {
                    cir.scope {
                      %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
                      %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                      %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc189)
                      %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                      cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc190)
                    } loc(#loc811)
                    cir.yield loc(#loc180)
                  } step {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc191)
                    %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc192)
                    cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc812)
                    cir.yield loc(#loc808)
                  } loc(#loc808)
                } loc(#loc808)
              } else {
                %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc25)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc25)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc193)
              } loc(#loc806)
            } loc(#loc804)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc194)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc195)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc195)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc194)
          } loc(#loc789)
          cir.break loc(#loc196)
        } loc(#loc135)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc198)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc198)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc199)
          cir.break loc(#loc200)
        } loc(#loc197)
        cir.yield loc(#loc132)
      } loc(#loc132)
    } loc(#loc788)
    cir.return loc(#loc29)
  } loc(#loc751)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc814)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc203)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc815)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc205)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc816)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc207)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc817)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc209)
    cir.return loc(#loc202)
  } loc(#loc813)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc211)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc819)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc216)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc217)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc820)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc221)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc823)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc824)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc825)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc826)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc230)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc230)
            cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc825)
            cir.scope {
              cir.do {
                cir.scope {
                  %10 = cir.const #cir.int<2> : !s32i loc(#loc237)
                  %11 = cir.const #cir.int<1> : !s32i loc(#loc238)
                  %12 = cir.const #cir.int<6> : !s32i loc(#loc239)
                  %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc240)
                  cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc829)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc246)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc246)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc831)
                    cir.if %55 {
                      cir.break loc(#loc248)
                    } loc(#loc832)
                  } loc(#loc830)
                  %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc833)
                  %15 = cir.const #cir.int<0> : !s32i loc(#loc251)
                  %16 = cir.const #cir.int<16> : !u64i loc(#loc834)
                  cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc835)
                  %17 = cir.const #cir.int<2> : !s32i loc(#loc256)
                  %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc256)
                  %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                  cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc836)
                  %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc258)
                  %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc258)
                  %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc259)
                  %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc837)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc262)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc262)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc263)
                  %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc838)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                    %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc840)
                    %54 = cir.const #cir.int<16> : !u64i loc(#loc841)
                    %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc841)
                    %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc273)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc274)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc274)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc842)
                    cir.if %59 {
                      cir.break loc(#loc276)
                    } loc(#loc843)
                  } loc(#loc839)
                  %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc277)
                  %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc278)
                  %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc278)
                  %32 = cir.const #cir.int<3> : !s32i loc(#loc279)
                  %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc279)
                  %34 = cir.const #cir.int<4> : !u64i loc(#loc279)
                  %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc279)
                  %36 = cir.const #cir.int<2> : !s32i loc(#loc279)
                  %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc279)
                  %38 = cir.binop(add, %35, %37) : !u64i loc(#loc279)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc280)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc280)
                  %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc844)
                  %42 = cir.const #cir.int<0> : !s32i loc(#loc281)
                  %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc282)
                  %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc282)
                  cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc845)
                  cir.scope {
                    %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc287)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc288)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc288)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc847)
                    %56 = cir.ternary(%55, true {
                      %57 = cir.const #true loc(#loc289)
                      cir.yield %57 : !cir.bool loc(#loc289)
                    }, false {
                      %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc290)
                      %58 = cir.const #cir.int<0> : !s32i loc(#loc291)
                      %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc848)
                      %60 = cir.ternary(%59, true {
                        %61 = cir.const #true loc(#loc289)
                        cir.yield %61 : !cir.bool loc(#loc289)
                      }, false {
                        %61 = cir.const #false loc(#loc289)
                        cir.yield %61 : !cir.bool loc(#loc289)
                      }) : (!cir.bool) -> !cir.bool loc(#loc289)
                      cir.yield %60 : !cir.bool loc(#loc289)
                    }) : (!cir.bool) -> !cir.bool loc(#loc289)
                    cir.if %56 {
                      cir.break loc(#loc293)
                    } loc(#loc849)
                  } loc(#loc846)
                  %45 = cir.const #cir.int<0> : !s32i loc(#loc294)
                  %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc294)
                  %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                  %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc296)
                  %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc296)
                  cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc850)
                  %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc297)
                  %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc298)
                  cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc851)
                } loc(#loc828)
                cir.yield loc(#loc234)
              } while {
                %10 = cir.const #cir.int<0> : !s32i loc(#loc301)
                %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc301)
                cir.condition(%11) loc(#loc301)
              } loc(#loc827)
            } loc(#loc827)
            cir.scope {
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc304)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc305)
              %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc305)
              %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc853)
              cir.if %13 {
                %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc307)
                %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc308)
              } loc(#loc854)
            } loc(#loc852)
          } loc(#loc822)
          cir.break loc(#loc309)
        } loc(#loc222)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc311)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc311)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc312)
          cir.break loc(#loc313)
        } loc(#loc310)
        cir.yield loc(#loc219)
      } loc(#loc219)
    } loc(#loc821)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc316)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc318)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc318)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc319)
          cir.break loc(#loc320)
        } loc(#loc317)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc857)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc858)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc328)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc329)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc329)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc859)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc860)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc328)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc861)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc858)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc334)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc335)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc335)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc863)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc337)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc338)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc339)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc337)
              } loc(#loc864)
            } loc(#loc862)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc342)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc866)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc344)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc345)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc867)
                cir.condition(%19) loc(#loc346)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc348)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc349)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc350)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc351)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc869)
                } loc(#loc868)
                cir.yield loc(#loc341)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc352)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc353)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc870)
                cir.yield loc(#loc865)
              } loc(#loc865)
            } loc(#loc865)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc356)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc357)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc872)
              %19 = cir.ternary(%18, true {
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc359)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc360)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc873)
                %23 = cir.ternary(%22, true {
                  %24 = cir.const #true loc(#loc358)
                  cir.yield %24 : !cir.bool loc(#loc358)
                }, false {
                  %24 = cir.const #false loc(#loc358)
                  cir.yield %24 : !cir.bool loc(#loc358)
                }) : (!cir.bool) -> !cir.bool loc(#loc358)
                cir.yield %23 : !cir.bool loc(#loc358)
              }, false {
                %20 = cir.const #false loc(#loc358)
                cir.yield %20 : !cir.bool loc(#loc358)
              }) : (!cir.bool) -> !cir.bool loc(#loc358)
              cir.if %19 {
                %20 = cir.const #cir.int<1> : !s32i loc(#loc365)
                %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc366)
                %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc367)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc368)
                cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc875)
                cir.scope {
                  %24 = cir.const #cir.int<0> : !s32i loc(#loc371)
                  cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc877)
                  cir.for : cond {
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc373)
                    %26 = cir.const #cir.int<10> : !s32i loc(#loc374)
                    %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc878)
                    cir.condition(%27) loc(#loc375)
                  } body {
                    cir.scope {
                      %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc377)
                      %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc378)
                      %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc379)
                      %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc377)
                      cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc380)
                    } loc(#loc879)
                    cir.yield loc(#loc370)
                  } step {
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc381)
                    %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc382)
                    cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc880)
                    cir.yield loc(#loc876)
                  } loc(#loc876)
                } loc(#loc876)
              } else {
                %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc211)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc211)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc383)
              } loc(#loc874)
            } loc(#loc871)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc384)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc385)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc385)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc384)
          } loc(#loc856)
          cir.break loc(#loc386)
        } loc(#loc321)
        cir.yield loc(#loc314)
      } loc(#loc314)
    } loc(#loc855)
    cir.return loc(#loc213)
  } loc(#loc818)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc882)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc391)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc392)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc883)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc396)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc886)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc887)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc888)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc889)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc405)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc405)
            cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc888)
            cir.scope {
              cir.do {
                cir.scope {
                  %10 = cir.const #cir.int<2> : !s32i loc(#loc412)
                  %11 = cir.const #cir.int<1> : !s32i loc(#loc413)
                  %12 = cir.const #cir.int<6> : !s32i loc(#loc414)
                  %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc415)
                  cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc892)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc420)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc421)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc421)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc894)
                    cir.if %55 {
                      cir.break loc(#loc423)
                    } loc(#loc895)
                  } loc(#loc893)
                  %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc896)
                  %15 = cir.const #cir.int<0> : !s32i loc(#loc426)
                  %16 = cir.const #cir.int<16> : !u64i loc(#loc897)
                  cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc898)
                  %17 = cir.const #cir.int<2> : !s32i loc(#loc431)
                  %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc431)
                  %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                  cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc899)
                  %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc433)
                  %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc433)
                  %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc434)
                  %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc900)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc437)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc437)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc438)
                  %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc901)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc443)
                    %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc903)
                    %54 = cir.const #cir.int<16> : !u64i loc(#loc904)
                    %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc904)
                    %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc448)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc449)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc449)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc905)
                    cir.if %59 {
                      cir.break loc(#loc451)
                    } loc(#loc906)
                  } loc(#loc902)
                  %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc452)
                  %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc453)
                  %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc453)
                  %32 = cir.const #cir.int<3> : !s32i loc(#loc454)
                  %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc454)
                  %34 = cir.const #cir.int<4> : !u64i loc(#loc454)
                  %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc454)
                  %36 = cir.const #cir.int<2> : !s32i loc(#loc454)
                  %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc454)
                  %38 = cir.binop(add, %35, %37) : !u64i loc(#loc454)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc455)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc455)
                  %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc907)
                  %42 = cir.const #cir.int<0> : !s32i loc(#loc456)
                  %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc457)
                  %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc457)
                  cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc908)
                  cir.scope {
                    %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc462)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc463)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc463)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc910)
                    %56 = cir.ternary(%55, true {
                      %57 = cir.const #true loc(#loc464)
                      cir.yield %57 : !cir.bool loc(#loc464)
                    }, false {
                      %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc465)
                      %58 = cir.const #cir.int<0> : !s32i loc(#loc466)
                      %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc911)
                      %60 = cir.ternary(%59, true {
                        %61 = cir.const #true loc(#loc464)
                        cir.yield %61 : !cir.bool loc(#loc464)
                      }, false {
                        %61 = cir.const #false loc(#loc464)
                        cir.yield %61 : !cir.bool loc(#loc464)
                      }) : (!cir.bool) -> !cir.bool loc(#loc464)
                      cir.yield %60 : !cir.bool loc(#loc464)
                    }) : (!cir.bool) -> !cir.bool loc(#loc464)
                    cir.if %56 {
                      cir.break loc(#loc468)
                    } loc(#loc912)
                  } loc(#loc909)
                  %45 = cir.const #cir.int<0> : !s32i loc(#loc469)
                  %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc469)
                  %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc470)
                  %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc471)
                  %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc471)
                  cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc913)
                  %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc472)
                  %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc473)
                  cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc914)
                } loc(#loc891)
                cir.yield loc(#loc409)
              } while {
                %10 = cir.const #cir.int<0> : !s32i loc(#loc476)
                %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc476)
                cir.condition(%11) loc(#loc476)
              } loc(#loc890)
            } loc(#loc890)
            cir.scope {
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc479)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc480)
              %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc480)
              %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc916)
              cir.if %13 {
                %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc482)
                %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc483)
              } loc(#loc917)
            } loc(#loc915)
          } loc(#loc885)
          cir.break loc(#loc484)
        } loc(#loc397)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc486)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc486)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc487)
          cir.break loc(#loc488)
        } loc(#loc485)
        cir.yield loc(#loc394)
      } loc(#loc394)
    } loc(#loc884)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc491)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc920)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc921)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc499)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc500)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc500)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc922)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc923)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc499)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc924)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc921)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc505)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc506)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc506)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc926)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc508)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc509)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc510)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc508)
              } loc(#loc927)
            } loc(#loc925)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc513)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc929)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc515)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc516)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc930)
                cir.condition(%19) loc(#loc517)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc519)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc520)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc521)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc522)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc932)
                } loc(#loc931)
                cir.yield loc(#loc512)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc523)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc524)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc933)
                cir.yield loc(#loc928)
              } loc(#loc928)
            } loc(#loc928)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc527)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc528)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc935)
              %19 = cir.ternary(%18, true {
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc530)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc531)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc936)
                %23 = cir.ternary(%22, true {
                  %24 = cir.const #true loc(#loc529)
                  cir.yield %24 : !cir.bool loc(#loc529)
                }, false {
                  %24 = cir.const #false loc(#loc529)
                  cir.yield %24 : !cir.bool loc(#loc529)
                }) : (!cir.bool) -> !cir.bool loc(#loc529)
                cir.yield %23 : !cir.bool loc(#loc529)
              }, false {
                %20 = cir.const #false loc(#loc529)
                cir.yield %20 : !cir.bool loc(#loc529)
              }) : (!cir.bool) -> !cir.bool loc(#loc529)
              cir.if %19 {
                %20 = cir.const #cir.int<1> : !s32i loc(#loc536)
                %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc537)
                %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc538)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc539)
                cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc938)
                cir.scope {
                  %24 = cir.const #cir.int<0> : !s32i loc(#loc542)
                  cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc940)
                  cir.for : cond {
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc544)
                    %26 = cir.const #cir.int<10> : !s32i loc(#loc545)
                    %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc941)
                    cir.condition(%27) loc(#loc546)
                  } body {
                    cir.scope {
                      %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc548)
                      %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc549)
                      %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc550)
                      %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc548)
                      cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc551)
                    } loc(#loc942)
                    cir.yield loc(#loc541)
                  } step {
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc552)
                    %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc553)
                    cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc943)
                    cir.yield loc(#loc939)
                  } loc(#loc939)
                } loc(#loc939)
              } else {
                %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc554)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc554)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc555)
              } loc(#loc937)
            } loc(#loc934)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc556)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc557)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc557)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc556)
          } loc(#loc919)
          cir.break loc(#loc558)
        } loc(#loc492)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc560)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc560)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc561)
          cir.break loc(#loc562)
        } loc(#loc559)
        cir.yield loc(#loc489)
      } loc(#loc489)
    } loc(#loc918)
    cir.return loc(#loc388)
  } loc(#loc881)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc945)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc567)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc568)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc946)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc572)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc574)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc574)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc575)
          cir.break loc(#loc576)
        } loc(#loc573)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc578)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc948)
          cir.break loc(#loc580)
        } loc(#loc577)
        cir.yield loc(#loc570)
      } loc(#loc570)
    } loc(#loc947)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc583)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc951)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc952)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc591)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc592)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc592)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc953)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc954)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc591)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc955)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc952)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc597)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc598)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc598)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc957)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc600)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc601)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc602)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc600)
              } loc(#loc958)
            } loc(#loc956)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc605)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc960)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc607)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc608)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc961)
                cir.condition(%19) loc(#loc609)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc611)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc612)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc613)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc614)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc963)
                } loc(#loc962)
                cir.yield loc(#loc604)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc615)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc616)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc964)
                cir.yield loc(#loc959)
              } loc(#loc959)
            } loc(#loc959)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc619)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc620)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc966)
              cir.if %18 {
                %19 = cir.const #cir.int<1> : !s32i loc(#loc624)
                %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc625)
                %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc626)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc627)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc968)
                cir.scope {
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc630)
                  cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc970)
                  cir.for : cond {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc632)
                    %25 = cir.const #cir.int<10> : !s32i loc(#loc633)
                    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc971)
                    cir.condition(%26) loc(#loc634)
                  } body {
                    cir.scope {
                      %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc636)
                      %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc637)
                      %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc638)
                      %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc636)
                      cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc639)
                    } loc(#loc972)
                    cir.yield loc(#loc629)
                  } step {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc640)
                    %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc641)
                    cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc973)
                    cir.yield loc(#loc969)
                  } loc(#loc969)
                } loc(#loc969)
              } else {
                %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc642)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc642)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc643)
              } loc(#loc967)
            } loc(#loc965)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc644)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc645)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc645)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc644)
          } loc(#loc950)
          cir.break loc(#loc646)
        } loc(#loc584)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc648)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc648)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc649)
          cir.break loc(#loc650)
        } loc(#loc647)
        cir.yield loc(#loc581)
      } loc(#loc581)
    } loc(#loc949)
    cir.return loc(#loc564)
  } loc(#loc944)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc975)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc655)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc656)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc976)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc660)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc662)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc978)
          cir.break loc(#loc664)
        } loc(#loc661)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc666)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc666)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc667)
          cir.break loc(#loc668)
        } loc(#loc665)
        cir.yield loc(#loc658)
      } loc(#loc658)
    } loc(#loc977)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc671)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc981)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc982)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc679)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc680)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc680)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc983)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc984)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc679)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc985)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc982)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc685)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc686)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc686)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc987)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc688)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc689)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc690)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc688)
              } loc(#loc988)
            } loc(#loc986)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc693)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc990)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc695)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc696)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc991)
                cir.condition(%19) loc(#loc697)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc699)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc700)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc701)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc702)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc993)
                } loc(#loc992)
                cir.yield loc(#loc692)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc703)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc704)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc994)
                cir.yield loc(#loc989)
              } loc(#loc989)
            } loc(#loc989)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc707)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc708)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc996)
              cir.if %18 {
                %19 = cir.const #cir.int<1> : !s32i loc(#loc712)
                %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc713)
                %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc714)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc715)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc998)
                cir.scope {
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc718)
                  cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc1000)
                  cir.for : cond {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc720)
                    %25 = cir.const #cir.int<10> : !s32i loc(#loc721)
                    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc1001)
                    cir.condition(%26) loc(#loc722)
                  } body {
                    cir.scope {
                      %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc724)
                      %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc725)
                      %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc726)
                      %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc724)
                      cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc727)
                    } loc(#loc1002)
                    cir.yield loc(#loc717)
                  } step {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc728)
                    %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc729)
                    cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc1003)
                    cir.yield loc(#loc999)
                  } loc(#loc999)
                } loc(#loc999)
              } else {
                %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc730)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc730)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc731)
              } loc(#loc997)
            } loc(#loc995)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc732)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc733)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc733)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc732)
          } loc(#loc980)
          cir.break loc(#loc734)
        } loc(#loc672)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc736)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc736)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc737)
          cir.break loc(#loc738)
        } loc(#loc735)
        cir.yield loc(#loc669)
      } loc(#loc669)
    } loc(#loc979)
    cir.return loc(#loc652)
  } loc(#loc974)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":78:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":111:19)
#loc19 = loc("/usr/include/stdlib.h":672:1)
#loc20 = loc("/usr/include/stdlib.h":672:45)
#loc21 = loc("/usr/include/stdlib.h":756:1)
#loc22 = loc("/usr/include/stdlib.h":756:70)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":139:23)
#loc26 = loc("/usr/include/stdlib.h":687:1)
#loc27 = loc("/usr/include/stdlib.h":687:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":44:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":149:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":46:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":46:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":48:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":48:12)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":48:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":49:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":113:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":49:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":51:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":52:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":107:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":57:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":57:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":58:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":58:28)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":59:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":59:32)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":60:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":60:41)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":61:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":96:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":62:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":95:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":71:36)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":71:45)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":71:58)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":71:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":71:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":71:69)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":72:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":75:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":72:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":72:34)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":73:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":74:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":76:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":76:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":76:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":76:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":76:47)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":76:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":76:48)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":77:34)
#loc73 = loc("/usr/include/netinet/in.h":249:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":77:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":78:39)
#loc76 = loc("/usr/include/netinet/in.h":251:20)
#loc77 = loc("/usr/include/netinet/in.h":33:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":78:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":78:59)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":79:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":79:32)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":79:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":79:46)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":80:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":83:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":80:25)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":80:58)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":80:59)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":80:68)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":80:82)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":80:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":80:88)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":81:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":82:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":86:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":86:46)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":86:59)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":86:77)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":86:80)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":86:26)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":86:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":86:81)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":87:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":90:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":87:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":87:31)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":87:44)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":87:47)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":87:61)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":88:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":89:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":92:39)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":92:25)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":92:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":94:25)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":94:20)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":94:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":94:36)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":96:16)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":97:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":100:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":97:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":97:30)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":98:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":99:26)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":99:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":108:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":109:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":111:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":112:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":114:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":148:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":114:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":116:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":117:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":142:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":118:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":118:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":119:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":119:54)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":119:31)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":119:38)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":119:43)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":119:53)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":120:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":120:39)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":120:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":120:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":120:29)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":120:30)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":120:36)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":120:35)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":122:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":125:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":122:18)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":122:14)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":122:21)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":122:25)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":122:23)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":123:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":124:25)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":124:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":124:20)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":124:21)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":122:30)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":122:29)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":128:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":140:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":128:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":128:21)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":129:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":136:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":138:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":130:28)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":130:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":130:20)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":130:24)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":132:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":135:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":132:21)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":132:17)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":132:24)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":132:28)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":132:26)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":133:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":134:30)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":134:37)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":134:38)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":134:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":132:33)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":132:32)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":139:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":141:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":141:14)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":143:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":144:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":146:19)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":146:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":147:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":479:1)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":485:1)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":481:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":481:14)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":482:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":482:14)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":483:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":483:14)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":484:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":484:14)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":254:23)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":156:1)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":260:1)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":158:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":158:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":160:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":160:12)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":160:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":161:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":225:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":161:12)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":163:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":164:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":219:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":169:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":169:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":170:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":170:28)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":171:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":171:32)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":172:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":172:41)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":173:9)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":208:17)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":174:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":207:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":183:36)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":183:45)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":183:58)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":183:29)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":183:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":183:69)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":184:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":187:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":184:17)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":184:34)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":185:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":186:17)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":188:20)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":188:21)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":188:30)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":188:33)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":188:47)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":188:13)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":188:48)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":189:34)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":189:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":190:49)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":190:39)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":190:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":190:59)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":191:38)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":191:32)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":191:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":191:46)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":192:13)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":195:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":192:25)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":192:58)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":192:59)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":192:68)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":192:82)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":192:17)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":192:88)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":193:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":194:17)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":198:31)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":198:46)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":198:59)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":198:77)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":198:80)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":198:26)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":198:13)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":198:81)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":199:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":202:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":199:17)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":199:31)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":199:44)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":199:47)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":199:61)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":200:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":201:17)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":204:39)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":204:25)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":204:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":206:25)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":206:20)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":206:13)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":206:36)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":208:16)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":209:9)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":212:9)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":209:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":209:30)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":210:9)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":211:26)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":211:13)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":220:5)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":221:5)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":223:19)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":223:9)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":224:9)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":226:5)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":259:5)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":226:12)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":228:5)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":230:19)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":230:9)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":231:9)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":232:5)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":233:5)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":257:5)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":234:9)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":234:13)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":235:9)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":235:54)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":235:31)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":235:38)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":235:43)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":235:53)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":236:9)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":236:39)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":236:13)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":236:23)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":236:29)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":236:30)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":236:36)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":236:35)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":238:9)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":241:9)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":238:18)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":238:14)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":238:21)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":238:25)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":238:23)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":239:9)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":240:25)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":240:13)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":240:20)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":240:21)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":238:30)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":238:29)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":243:9)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":255:9)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":243:13)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":243:21)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":243:23)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":243:26)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":243:34)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":243:36)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":244:9)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":251:9)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":253:9)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":245:28)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":245:13)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":245:20)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":245:24)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":247:13)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":250:13)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":247:21)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":247:17)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":247:24)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":247:28)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":247:26)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":248:13)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":249:30)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":249:37)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":249:38)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":249:17)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":247:33)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":247:32)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":254:13)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":256:9)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":256:14)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":258:5)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":263:1)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":367:1)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":265:5)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":265:9)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":267:13)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":267:12)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":267:5)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":268:5)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":332:5)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":268:12)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":270:5)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":271:5)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":326:5)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":276:9)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":276:13)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":277:9)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":277:28)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":278:9)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":278:32)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":279:9)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":279:41)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":280:9)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":315:17)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":281:9)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":314:9)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":290:36)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":290:45)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":290:58)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":290:29)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":290:13)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":290:69)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":291:13)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":294:13)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":291:17)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":291:34)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":292:13)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":293:17)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":295:20)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":295:21)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":295:30)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":295:33)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":295:47)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":295:13)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":295:48)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":296:34)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":296:13)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":297:49)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":297:39)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":297:13)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":297:59)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":298:38)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":298:32)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":298:13)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":298:46)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":299:13)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":302:13)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":299:25)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":299:58)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":299:59)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":299:68)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":299:82)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":299:17)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":299:88)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":300:13)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":301:17)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":305:31)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":305:46)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":305:59)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":305:77)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":305:80)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":305:26)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":305:13)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":305:81)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":306:13)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":309:13)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":306:17)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":306:31)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":306:44)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":306:47)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":306:61)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":307:13)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":308:17)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":311:39)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":311:25)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":311:13)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":313:25)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":313:20)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":313:13)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":313:36)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":315:16)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":316:9)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":319:9)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":316:13)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":316:30)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":317:9)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":318:26)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":318:13)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":327:5)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":328:5)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":330:19)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":330:9)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":331:9)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":333:5)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":366:5)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":333:12)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":335:5)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":336:5)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":360:5)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":337:9)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":337:13)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":338:9)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":338:54)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":338:31)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":338:38)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":338:43)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":338:53)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":339:9)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":339:39)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":339:13)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":339:23)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":339:29)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":339:30)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":339:36)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":339:35)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":341:9)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":344:9)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":341:18)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":341:14)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":341:21)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":341:25)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":341:23)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":342:9)
#loc519 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":343:25)
#loc520 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":343:13)
#loc521 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":343:20)
#loc522 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":343:21)
#loc523 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":341:30)
#loc524 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":341:29)
#loc525 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":346:9)
#loc526 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":358:9)
#loc527 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":346:13)
#loc528 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":346:21)
#loc529 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":346:23)
#loc530 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":346:26)
#loc531 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":346:34)
#loc532 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":346:36)
#loc533 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":347:9)
#loc534 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":354:9)
#loc535 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":356:9)
#loc536 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":348:28)
#loc537 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":348:13)
#loc538 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":348:20)
#loc539 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":348:24)
#loc540 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":350:13)
#loc541 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":353:13)
#loc542 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":350:21)
#loc543 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":350:17)
#loc544 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":350:24)
#loc545 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":350:28)
#loc546 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":350:26)
#loc547 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":351:13)
#loc548 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":352:30)
#loc549 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":352:37)
#loc550 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":352:38)
#loc551 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":352:17)
#loc552 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":350:33)
#loc553 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":350:32)
#loc554 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":357:23)
#loc555 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":357:13)
#loc556 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":359:9)
#loc557 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":359:14)
#loc558 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":361:5)
#loc559 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":362:5)
#loc560 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":364:19)
#loc561 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":364:9)
#loc562 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":365:9)
#loc563 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":370:1)
#loc564 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":422:1)
#loc565 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":372:5)
#loc566 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":372:9)
#loc567 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":374:13)
#loc568 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":374:12)
#loc569 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":374:5)
#loc570 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":375:5)
#loc571 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":386:5)
#loc572 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":375:12)
#loc573 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":377:5)
#loc574 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":379:19)
#loc575 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":379:9)
#loc576 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":380:9)
#loc577 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":381:5)
#loc578 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":384:16)
#loc579 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":384:9)
#loc580 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":385:9)
#loc581 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":387:5)
#loc582 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":421:5)
#loc583 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":387:12)
#loc584 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":389:5)
#loc585 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":390:5)
#loc586 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":415:5)
#loc587 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":391:9)
#loc588 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":391:13)
#loc589 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":392:9)
#loc590 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":392:54)
#loc591 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":392:31)
#loc592 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":392:38)
#loc593 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":392:43)
#loc594 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":392:53)
#loc595 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":393:9)
#loc596 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":393:39)
#loc597 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":393:13)
#loc598 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":393:23)
#loc599 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":393:29)
#loc600 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":393:30)
#loc601 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":393:36)
#loc602 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":393:35)
#loc603 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":395:9)
#loc604 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":398:9)
#loc605 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":395:18)
#loc606 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":395:14)
#loc607 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":395:21)
#loc608 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":395:25)
#loc609 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":395:23)
#loc610 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":396:9)
#loc611 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":397:25)
#loc612 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":397:13)
#loc613 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":397:20)
#loc614 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":397:21)
#loc615 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":395:30)
#loc616 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":395:29)
#loc617 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":401:9)
#loc618 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":413:9)
#loc619 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":401:13)
#loc620 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":401:21)
#loc621 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":402:9)
#loc622 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":409:9)
#loc623 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":411:9)
#loc624 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":403:28)
#loc625 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":403:13)
#loc626 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":403:20)
#loc627 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":403:24)
#loc628 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":405:13)
#loc629 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":408:13)
#loc630 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":405:21)
#loc631 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":405:17)
#loc632 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":405:24)
#loc633 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":405:28)
#loc634 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":405:26)
#loc635 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":406:13)
#loc636 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":407:30)
#loc637 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":407:37)
#loc638 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":407:38)
#loc639 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":407:17)
#loc640 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":405:33)
#loc641 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":405:32)
#loc642 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":412:23)
#loc643 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":412:13)
#loc644 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":414:9)
#loc645 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":414:14)
#loc646 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":416:5)
#loc647 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":417:5)
#loc648 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":419:19)
#loc649 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":419:9)
#loc650 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":420:9)
#loc651 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":425:1)
#loc652 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":477:1)
#loc653 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":427:5)
#loc654 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":427:9)
#loc655 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":429:13)
#loc656 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":429:12)
#loc657 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":429:5)
#loc658 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":430:5)
#loc659 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":441:5)
#loc660 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":430:12)
#loc661 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":432:5)
#loc662 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":435:16)
#loc663 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":435:9)
#loc664 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":436:9)
#loc665 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":437:5)
#loc666 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":439:19)
#loc667 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":439:9)
#loc668 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":440:9)
#loc669 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":442:5)
#loc670 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":476:5)
#loc671 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":442:12)
#loc672 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":444:5)
#loc673 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":445:5)
#loc674 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":470:5)
#loc675 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":446:9)
#loc676 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":446:13)
#loc677 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":447:9)
#loc678 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":447:54)
#loc679 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":447:31)
#loc680 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":447:38)
#loc681 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":447:43)
#loc682 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":447:53)
#loc683 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":448:9)
#loc684 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":448:39)
#loc685 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":448:13)
#loc686 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":448:23)
#loc687 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":448:29)
#loc688 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":448:30)
#loc689 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":448:36)
#loc690 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":448:35)
#loc691 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":450:9)
#loc692 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":453:9)
#loc693 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":450:18)
#loc694 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":450:14)
#loc695 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":450:21)
#loc696 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":450:25)
#loc697 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":450:23)
#loc698 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":451:9)
#loc699 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":452:25)
#loc700 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":452:13)
#loc701 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":452:20)
#loc702 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":452:21)
#loc703 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":450:30)
#loc704 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":450:29)
#loc705 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":456:9)
#loc706 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":468:9)
#loc707 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":456:13)
#loc708 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":456:21)
#loc709 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":457:9)
#loc710 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":464:9)
#loc711 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":466:9)
#loc712 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":458:28)
#loc713 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":458:13)
#loc714 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":458:20)
#loc715 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":458:24)
#loc716 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":460:13)
#loc717 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":463:13)
#loc718 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":460:21)
#loc719 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":460:17)
#loc720 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":460:24)
#loc721 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":460:28)
#loc722 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":460:26)
#loc723 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":461:13)
#loc724 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":462:30)
#loc725 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":462:37)
#loc726 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":462:38)
#loc727 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":462:17)
#loc728 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":460:33)
#loc729 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":460:32)
#loc730 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":467:23)
#loc731 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":467:13)
#loc732 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":469:9)
#loc733 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":469:14)
#loc734 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":471:5)
#loc735 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":472:5)
#loc736 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":474:19)
#loc737 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":474:9)
#loc738 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c":475:9)
#loc739 = loc(fused[#loc1, #loc2])
#loc740 = loc(fused[#loc3, #loc4])
#loc741 = loc(fused[#loc6, #loc7])
#loc742 = loc(fused[#loc8, #loc9])
#loc743 = loc(fused[#loc10, #loc11])
#loc744 = loc(fused[#loc12, #loc13])
#loc745 = loc(fused[#loc14, #loc15])
#loc746 = loc(fused[#loc16, #loc17])
#loc747 = loc(fused[#loc19, #loc20])
#loc748 = loc(fused[#loc21, #loc22])
#loc749 = loc(fused[#loc23, #loc24])
#loc750 = loc(fused[#loc26, #loc27])
#loc751 = loc(fused[#loc28, #loc29])
#loc752 = loc(fused[#loc30, #loc31])
#loc753 = loc(fused[#loc34, #loc32])
#loc754 = loc(fused[#loc35, #loc36])
#loc755 = loc(fused[#loc39, #loc40])
#loc756 = loc(fused[#loc41, #loc42])
#loc757 = loc(fused[#loc43, #loc44])
#loc758 = loc(fused[#loc45, #loc46])
#loc759 = loc(fused[#loc47, #loc48])
#loc760 = loc(fused[#loc49, #loc50])
#loc761 = loc(fused[#loc51, #loc52])
#loc762 = loc(fused[#loc57, #loc58])
#loc763 = loc(fused[#loc59, #loc60])
#loc764 = loc(fused[#loc61, #loc62])
#loc765 = loc(fused[#loc63, #loc60])
#loc766 = loc(fused[#loc65, #loc66])
#loc767 = loc(fused[#loc68, #loc69])
#loc768 = loc(fused[#loc70, #loc71])
#loc769 = loc(fused[#loc74, #loc72])
#loc770 = loc(fused[#loc78, #loc79])
#loc771 = loc(fused[#loc83, #loc84])
#loc772 = loc(fused[#loc85, #loc86])
#loc773 = loc(fused[#loc88, #loc89])
#loc774 = loc(fused[#loc90, #loc91])
#loc775 = loc(fused[#loc92, #loc93])
#loc776 = loc(fused[#loc94, #loc86])
#loc777 = loc(fused[#loc98, #loc99])
#loc778 = loc(fused[#loc102, #loc103])
#loc779 = loc(fused[#loc104, #loc105])
#loc780 = loc(fused[#loc106, #loc107])
#loc781 = loc(fused[#loc109, #loc110])
#loc782 = loc(fused[#loc111, #loc105])
#loc783 = loc(fused[#loc115, #loc113])
#loc784 = loc(fused[#loc118, #loc119])
#loc785 = loc(fused[#loc121, #loc122])
#loc786 = loc(fused[#loc123, #loc124])
#loc787 = loc(fused[#loc125, #loc122])
#loc788 = loc(fused[#loc132, #loc133])
#loc789 = loc(fused[#loc136, #loc137])
#loc790 = loc(fused[#loc138, #loc139])
#loc791 = loc(fused[#loc140, #loc141])
#loc792 = loc(fused[#loc144, #loc145])
#loc793 = loc(fused[#loc143, #loc145])
#loc794 = loc(fused[#loc142, #loc141])
#loc795 = loc(fused[#loc146, #loc147])
#loc796 = loc(fused[#loc148, #loc149])
#loc797 = loc(fused[#loc150, #loc147])
#loc798 = loc(fused[#loc154, #loc155])
#loc799 = loc(fused[#loc157, #loc156])
#loc800 = loc(fused[#loc158, #loc159])
#loc801 = loc(fused[#loc161, #loc155])
#loc802 = loc(fused[#loc163, #loc162])
#loc803 = loc(fused[#loc167, #loc166])
#loc804 = loc(fused[#loc168, #loc169])
#loc805 = loc(fused[#loc170, #loc171])
#loc806 = loc(fused[#loc172, #loc173, #loc174, #loc169])
#loc807 = loc(fused[#loc176, #loc175])
#loc808 = loc(fused[#loc179, #loc180])
#loc809 = loc(fused[#loc182, #loc181])
#loc810 = loc(fused[#loc183, #loc184])
#loc811 = loc(fused[#loc186, #loc180])
#loc812 = loc(fused[#loc192, #loc191])
#loc813 = loc(fused[#loc201, #loc202])
#loc814 = loc(fused[#loc203, #loc204])
#loc815 = loc(fused[#loc205, #loc206])
#loc816 = loc(fused[#loc207, #loc208])
#loc817 = loc(fused[#loc209, #loc210])
#loc818 = loc(fused[#loc212, #loc213])
#loc819 = loc(fused[#loc214, #loc215])
#loc820 = loc(fused[#loc218, #loc216])
#loc821 = loc(fused[#loc219, #loc220])
#loc822 = loc(fused[#loc223, #loc224])
#loc823 = loc(fused[#loc225, #loc226])
#loc824 = loc(fused[#loc227, #loc228])
#loc825 = loc(fused[#loc229, #loc230])
#loc826 = loc(fused[#loc231, #loc232])
#loc827 = loc(fused[#loc233, #loc234])
#loc828 = loc(fused[#loc235, #loc236])
#loc829 = loc(fused[#loc241, #loc242])
#loc830 = loc(fused[#loc243, #loc244])
#loc831 = loc(fused[#loc245, #loc246])
#loc832 = loc(fused[#loc247, #loc244])
#loc833 = loc(fused[#loc249, #loc250])
#loc834 = loc(fused[#loc252, #loc253])
#loc835 = loc(fused[#loc254, #loc255])
#loc836 = loc(fused[#loc257, #loc256])
#loc837 = loc(fused[#loc260, #loc261])
#loc838 = loc(fused[#loc264, #loc265])
#loc839 = loc(fused[#loc266, #loc267])
#loc840 = loc(fused[#loc269, #loc270])
#loc841 = loc(fused[#loc271, #loc272])
#loc842 = loc(fused[#loc273, #loc274])
#loc843 = loc(fused[#loc275, #loc267])
#loc844 = loc(fused[#loc279, #loc280])
#loc845 = loc(fused[#loc283, #loc284])
#loc846 = loc(fused[#loc285, #loc286])
#loc847 = loc(fused[#loc287, #loc288])
#loc848 = loc(fused[#loc290, #loc291])
#loc849 = loc(fused[#loc292, #loc286])
#loc850 = loc(fused[#loc296, #loc294])
#loc851 = loc(fused[#loc299, #loc300])
#loc852 = loc(fused[#loc302, #loc303])
#loc853 = loc(fused[#loc304, #loc305])
#loc854 = loc(fused[#loc306, #loc303])
#loc855 = loc(fused[#loc314, #loc315])
#loc856 = loc(fused[#loc322, #loc323])
#loc857 = loc(fused[#loc324, #loc325])
#loc858 = loc(fused[#loc326, #loc327])
#loc859 = loc(fused[#loc330, #loc331])
#loc860 = loc(fused[#loc329, #loc331])
#loc861 = loc(fused[#loc328, #loc327])
#loc862 = loc(fused[#loc332, #loc333])
#loc863 = loc(fused[#loc334, #loc335])
#loc864 = loc(fused[#loc336, #loc333])
#loc865 = loc(fused[#loc340, #loc341])
#loc866 = loc(fused[#loc343, #loc342])
#loc867 = loc(fused[#loc344, #loc345])
#loc868 = loc(fused[#loc347, #loc341])
#loc869 = loc(fused[#loc349, #loc348])
#loc870 = loc(fused[#loc353, #loc352])
#loc871 = loc(fused[#loc354, #loc355])
#loc872 = loc(fused[#loc356, #loc357])
#loc873 = loc(fused[#loc359, #loc361])
#loc874 = loc(fused[#loc362, #loc363, #loc364, #loc355])
#loc875 = loc(fused[#loc366, #loc365])
#loc876 = loc(fused[#loc369, #loc370])
#loc877 = loc(fused[#loc372, #loc371])
#loc878 = loc(fused[#loc373, #loc374])
#loc879 = loc(fused[#loc376, #loc370])
#loc880 = loc(fused[#loc382, #loc381])
#loc881 = loc(fused[#loc387, #loc388])
#loc882 = loc(fused[#loc389, #loc390])
#loc883 = loc(fused[#loc393, #loc391])
#loc884 = loc(fused[#loc394, #loc395])
#loc885 = loc(fused[#loc398, #loc399])
#loc886 = loc(fused[#loc400, #loc401])
#loc887 = loc(fused[#loc402, #loc403])
#loc888 = loc(fused[#loc404, #loc405])
#loc889 = loc(fused[#loc406, #loc407])
#loc890 = loc(fused[#loc408, #loc409])
#loc891 = loc(fused[#loc410, #loc411])
#loc892 = loc(fused[#loc416, #loc417])
#loc893 = loc(fused[#loc418, #loc419])
#loc894 = loc(fused[#loc420, #loc421])
#loc895 = loc(fused[#loc422, #loc419])
#loc896 = loc(fused[#loc424, #loc425])
#loc897 = loc(fused[#loc427, #loc428])
#loc898 = loc(fused[#loc429, #loc430])
#loc899 = loc(fused[#loc432, #loc431])
#loc900 = loc(fused[#loc435, #loc436])
#loc901 = loc(fused[#loc439, #loc440])
#loc902 = loc(fused[#loc441, #loc442])
#loc903 = loc(fused[#loc444, #loc445])
#loc904 = loc(fused[#loc446, #loc447])
#loc905 = loc(fused[#loc448, #loc449])
#loc906 = loc(fused[#loc450, #loc442])
#loc907 = loc(fused[#loc454, #loc455])
#loc908 = loc(fused[#loc458, #loc459])
#loc909 = loc(fused[#loc460, #loc461])
#loc910 = loc(fused[#loc462, #loc463])
#loc911 = loc(fused[#loc465, #loc466])
#loc912 = loc(fused[#loc467, #loc461])
#loc913 = loc(fused[#loc471, #loc469])
#loc914 = loc(fused[#loc474, #loc475])
#loc915 = loc(fused[#loc477, #loc478])
#loc916 = loc(fused[#loc479, #loc480])
#loc917 = loc(fused[#loc481, #loc478])
#loc918 = loc(fused[#loc489, #loc490])
#loc919 = loc(fused[#loc493, #loc494])
#loc920 = loc(fused[#loc495, #loc496])
#loc921 = loc(fused[#loc497, #loc498])
#loc922 = loc(fused[#loc501, #loc502])
#loc923 = loc(fused[#loc500, #loc502])
#loc924 = loc(fused[#loc499, #loc498])
#loc925 = loc(fused[#loc503, #loc504])
#loc926 = loc(fused[#loc505, #loc506])
#loc927 = loc(fused[#loc507, #loc504])
#loc928 = loc(fused[#loc511, #loc512])
#loc929 = loc(fused[#loc514, #loc513])
#loc930 = loc(fused[#loc515, #loc516])
#loc931 = loc(fused[#loc518, #loc512])
#loc932 = loc(fused[#loc520, #loc519])
#loc933 = loc(fused[#loc524, #loc523])
#loc934 = loc(fused[#loc525, #loc526])
#loc935 = loc(fused[#loc527, #loc528])
#loc936 = loc(fused[#loc530, #loc532])
#loc937 = loc(fused[#loc533, #loc534, #loc535, #loc526])
#loc938 = loc(fused[#loc537, #loc536])
#loc939 = loc(fused[#loc540, #loc541])
#loc940 = loc(fused[#loc543, #loc542])
#loc941 = loc(fused[#loc544, #loc545])
#loc942 = loc(fused[#loc547, #loc541])
#loc943 = loc(fused[#loc553, #loc552])
#loc944 = loc(fused[#loc563, #loc564])
#loc945 = loc(fused[#loc565, #loc566])
#loc946 = loc(fused[#loc569, #loc567])
#loc947 = loc(fused[#loc570, #loc571])
#loc948 = loc(fused[#loc579, #loc578])
#loc949 = loc(fused[#loc581, #loc582])
#loc950 = loc(fused[#loc585, #loc586])
#loc951 = loc(fused[#loc587, #loc588])
#loc952 = loc(fused[#loc589, #loc590])
#loc953 = loc(fused[#loc593, #loc594])
#loc954 = loc(fused[#loc592, #loc594])
#loc955 = loc(fused[#loc591, #loc590])
#loc956 = loc(fused[#loc595, #loc596])
#loc957 = loc(fused[#loc597, #loc598])
#loc958 = loc(fused[#loc599, #loc596])
#loc959 = loc(fused[#loc603, #loc604])
#loc960 = loc(fused[#loc606, #loc605])
#loc961 = loc(fused[#loc607, #loc608])
#loc962 = loc(fused[#loc610, #loc604])
#loc963 = loc(fused[#loc612, #loc611])
#loc964 = loc(fused[#loc616, #loc615])
#loc965 = loc(fused[#loc617, #loc618])
#loc966 = loc(fused[#loc619, #loc620])
#loc967 = loc(fused[#loc621, #loc622, #loc623, #loc618])
#loc968 = loc(fused[#loc625, #loc624])
#loc969 = loc(fused[#loc628, #loc629])
#loc970 = loc(fused[#loc631, #loc630])
#loc971 = loc(fused[#loc632, #loc633])
#loc972 = loc(fused[#loc635, #loc629])
#loc973 = loc(fused[#loc641, #loc640])
#loc974 = loc(fused[#loc651, #loc652])
#loc975 = loc(fused[#loc653, #loc654])
#loc976 = loc(fused[#loc657, #loc655])
#loc977 = loc(fused[#loc658, #loc659])
#loc978 = loc(fused[#loc663, #loc662])
#loc979 = loc(fused[#loc669, #loc670])
#loc980 = loc(fused[#loc673, #loc674])
#loc981 = loc(fused[#loc675, #loc676])
#loc982 = loc(fused[#loc677, #loc678])
#loc983 = loc(fused[#loc681, #loc682])
#loc984 = loc(fused[#loc680, #loc682])
#loc985 = loc(fused[#loc679, #loc678])
#loc986 = loc(fused[#loc683, #loc684])
#loc987 = loc(fused[#loc685, #loc686])
#loc988 = loc(fused[#loc687, #loc684])
#loc989 = loc(fused[#loc691, #loc692])
#loc990 = loc(fused[#loc694, #loc693])
#loc991 = loc(fused[#loc695, #loc696])
#loc992 = loc(fused[#loc698, #loc692])
#loc993 = loc(fused[#loc700, #loc699])
#loc994 = loc(fused[#loc704, #loc703])
#loc995 = loc(fused[#loc705, #loc706])
#loc996 = loc(fused[#loc707, #loc708])
#loc997 = loc(fused[#loc709, #loc710, #loc711, #loc706])
#loc998 = loc(fused[#loc713, #loc712])
#loc999 = loc(fused[#loc716, #loc717])
#loc1000 = loc(fused[#loc719, #loc718])
#loc1001 = loc(fused[#loc720, #loc721])
#loc1002 = loc(fused[#loc723, #loc717])
#loc1003 = loc(fused[#loc729, #loc728])
