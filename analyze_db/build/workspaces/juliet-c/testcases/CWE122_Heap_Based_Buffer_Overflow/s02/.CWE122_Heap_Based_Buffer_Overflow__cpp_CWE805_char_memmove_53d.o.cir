!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":28:16)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":28:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":47:20)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":47:27)
#loc73 = loc(fused[#loc5, #loc6])
#loc83 = loc(fused[#loc39, #loc40])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc71)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_539badSink_dEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc73)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc75)
      %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc12)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc12)
      %4 = cir.const #cir.int<67> : !s8i loc(#loc13)
      %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc13)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc14)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc14)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc14)
      cir.libc.memset %9 bytes from %3 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc76)
      %10 = cir.const #cir.int<0> : !s8i loc(#loc18)
      %11 = cir.const #cir.int<100> : !s32i loc(#loc19)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc19)
      %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc21)
      %15 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc21)
      cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc77)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
      %18 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc23)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc24)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc24)
      %22 = cir.const #cir.int<1> : !u64i loc(#loc78)
      %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc79)
      cir.libc.memmove %23 bytes from %19 to %17 : !cir.ptr<!void>, !u64i loc(#loc80)
      %24 = cir.const #cir.int<0> : !s8i loc(#loc29)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
      %26 = cir.const #cir.int<100> : !s32i loc(#loc31)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc32)
      %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc31)
      %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc33)
      cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc81)
      %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
      cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc35)
      %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      cir.delete.array %31 : <!s8i> loc(#loc36)
    } loc(#loc74)
    cir.return loc(#loc4)
  } loc(#loc72)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_5313goodG2BSink_dEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc39, #loc40])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc83)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc41)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc85)
      %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc46)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc46)
      %4 = cir.const #cir.int<67> : !s8i loc(#loc47)
      %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc47)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc48)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc48)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc48)
      cir.libc.memset %9 bytes from %3 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc86)
      %10 = cir.const #cir.int<0> : !s8i loc(#loc52)
      %11 = cir.const #cir.int<100> : !s32i loc(#loc53)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc54)
      %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc53)
      %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc55)
      %15 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc55)
      cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc87)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc56)
      %18 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc57)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc57)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc58)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc58)
      %22 = cir.const #cir.int<1> : !u64i loc(#loc88)
      %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc89)
      cir.libc.memmove %23 bytes from %19 to %17 : !cir.ptr<!void>, !u64i loc(#loc90)
      %24 = cir.const #cir.int<0> : !s8i loc(#loc63)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      %26 = cir.const #cir.int<100> : !s32i loc(#loc65)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc66)
      %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc65)
      %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc67)
      cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc91)
      %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
      cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
      cir.delete.array %31 : <!s8i> loc(#loc70)
    } loc(#loc84)
    cir.return loc(#loc38)
  } loc(#loc82)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":28:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":40:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":29:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":30:5)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":39:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":31:9)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":31:24)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":32:16)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":32:24)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":32:29)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":32:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":32:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":32:34)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":33:25)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":33:16)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":33:20)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":33:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":35:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":35:23)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":35:31)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":35:35)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":35:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":35:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":35:47)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":36:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":36:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":36:14)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":36:18)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":36:19)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":37:19)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":37:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":38:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":47:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":59:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":48:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":49:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":58:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":50:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":50:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":51:16)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":51:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":51:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":51:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":51:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":51:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":52:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":52:16)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":52:20)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":52:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":54:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":54:23)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":54:31)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":54:35)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":54:46)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":54:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":54:47)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":55:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":55:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":55:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":55:18)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":55:19)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":56:19)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":56:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_53d.cpp":57:19)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc3, #loc4])
#loc74 = loc(fused[#loc8, #loc9])
#loc75 = loc(fused[#loc10, #loc11])
#loc76 = loc(fused[#loc16, #loc17])
#loc77 = loc(fused[#loc21, #loc18])
#loc78 = loc(fused[#loc25, #loc26])
#loc79 = loc(fused[#loc24, #loc26])
#loc80 = loc(fused[#loc27, #loc28])
#loc81 = loc(fused[#loc30, #loc29])
#loc82 = loc(fused[#loc37, #loc38])
#loc84 = loc(fused[#loc42, #loc43])
#loc85 = loc(fused[#loc44, #loc45])
#loc86 = loc(fused[#loc50, #loc51])
#loc87 = loc(fused[#loc55, #loc52])
#loc88 = loc(fused[#loc59, #loc60])
#loc89 = loc(fused[#loc58, #loc60])
#loc90 = loc(fused[#loc61, #loc62])
#loc91 = loc(fused[#loc64, #loc63])
