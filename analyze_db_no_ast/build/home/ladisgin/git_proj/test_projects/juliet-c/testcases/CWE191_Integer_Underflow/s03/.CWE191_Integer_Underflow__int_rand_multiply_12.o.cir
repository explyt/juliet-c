!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc192)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc193)
  cir.func private  @printIntLine(!s32i) loc(#loc194)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_multiply_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc200)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc200)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc23)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc23)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
          cir.yield %23 : !u32i loc(#loc23)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc23)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc23)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc23)
          cir.yield %27 : !u32i loc(#loc23)
        }) : (!cir.bool) -> !u32i loc(#loc23)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc23)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc26)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
      } loc(#loc201)
    } loc(#loc199)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc205)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc205)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc30)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc30)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc38)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc208)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc39)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc210)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc42)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc43)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc210)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc44)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc45)
          } loc(#loc209)
        } loc(#loc207)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc49)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc212)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc50)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
              %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc55)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc55)
              %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc55)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc56)
              %16 = cir.binop(div, %14, %15) : !s32i loc(#loc215)
              %17 = cir.cmp(gt, %10, %16) : !s32i, !s32i loc(#loc216)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc58)
              cir.if %18 {
                %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc218)
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc63)
                %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc64)
                cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc218)
                %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc65)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc66)
              } else {
                %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc9)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc67)
              } loc(#loc217)
            } loc(#loc214)
          } loc(#loc213)
        } loc(#loc211)
      } loc(#loc206)
    } loc(#loc204)
    cir.return loc(#loc11)
  } loc(#loc196)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_multiply_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    cir.return loc(#loc69)
  } loc(#loc219)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc226)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc226)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc82)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc82)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc87)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc87)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc87)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc87)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc87)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc87)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc87)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc87)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc87)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc87)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc87)
          cir.yield %23 : !u32i loc(#loc87)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc87)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc87)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc87)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc87)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc87)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc87)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc87)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc87)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc87)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc87)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc87)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc87)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc87)
          cir.yield %27 : !u32i loc(#loc87)
        }) : (!cir.bool) -> !u32i loc(#loc87)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc87)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
      } else {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc89)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc89)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc89)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc89)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc89)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc89)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc89)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc89)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc89)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc89)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc89)
          cir.yield %23 : !u32i loc(#loc89)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc89)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc89)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc89)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc89)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc89)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc89)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc89)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc89)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc89)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc89)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc89)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc89)
          cir.yield %27 : !u32i loc(#loc89)
        }) : (!cir.bool) -> !u32i loc(#loc89)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc89)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc231)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc231)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc93)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc93)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc234)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc102)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
              %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc107)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc107)
              %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc107)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc108)
              %16 = cir.binop(div, %14, %15) : !s32i loc(#loc237)
              %17 = cir.cmp(gt, %10, %16) : !s32i, !s32i loc(#loc238)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc110)
              cir.if %18 {
                %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc115)
                %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc116)
                cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc240)
                %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc118)
              } else {
                %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc119)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc119)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc120)
              } loc(#loc239)
            } loc(#loc236)
          } loc(#loc235)
        } loc(#loc233)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc124)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc242)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc125)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc130)
              %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc130)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc130)
              %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc130)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc131)
              %16 = cir.binop(div, %14, %15) : !s32i loc(#loc245)
              %17 = cir.cmp(gt, %10, %16) : !s32i, !s32i loc(#loc246)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc133)
              cir.if %18 {
                %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc248)
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc138)
                %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc139)
                cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc248)
                %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc141)
              } else {
                %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc142)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc142)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc143)
              } loc(#loc247)
            } loc(#loc244)
          } loc(#loc243)
        } loc(#loc241)
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc75)
  } loc(#loc222)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc250)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc148)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc253)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc253)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc152)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc152)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc157)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc158)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc255)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc160)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc161)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
      } loc(#loc254)
    } loc(#loc252)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc258)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc258)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc165)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc165)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc173)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc261)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc174)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc263)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc177)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc178)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc263)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc179)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc180)
          } loc(#loc262)
        } loc(#loc260)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc184)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc265)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc185)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc267)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc188)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc189)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc267)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc190)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc191)
          } loc(#loc266)
        } loc(#loc264)
      } loc(#loc259)
    } loc(#loc257)
    cir.return loc(#loc145)
  } loc(#loc249)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":58:27)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":22:1)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":62:1)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":24:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":24:9)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":26:12)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":26:5)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":27:5)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":36:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":27:8)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":27:33)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":28:5)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":31:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":33:5)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":30:16)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":30:9)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":35:17)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":35:16)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":35:9)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":37:5)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":61:5)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":37:8)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":37:33)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":38:5)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":45:5)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":47:5)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":39:9)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":44:9)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":39:12)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":39:19)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":39:17)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":40:9)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":42:13)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":42:33)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":42:26)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":43:26)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":43:13)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":48:9)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":60:9)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":48:12)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":48:19)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":48:17)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":49:9)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:13)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":59:13)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:17)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:25)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:33)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:34)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:22)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":52:13)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":55:13)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":57:13)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":53:17)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":53:37)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":53:30)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":54:30)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":54:17)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":58:17)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":158:1)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":162:1)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":160:5)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":160:13)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":161:5)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":161:13)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":71:1)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":118:1)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":73:5)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":73:9)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":75:12)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":75:5)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":76:5)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":85:5)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":76:8)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":76:33)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":77:5)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":80:5)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":82:5)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":79:16)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":79:9)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":84:16)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":84:9)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":86:5)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":117:5)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":86:8)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":86:33)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":87:5)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":101:5)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":103:5)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":88:9)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":100:9)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":88:12)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":88:19)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":88:17)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":89:9)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:13)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":99:13)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:17)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:25)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:33)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:34)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:22)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":92:13)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":95:13)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":97:13)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":93:17)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":93:37)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":93:30)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":94:30)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":94:17)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":98:27)
#loc120 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":98:17)
#loc121 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":104:9)
#loc122 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":116:9)
#loc123 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":104:12)
#loc124 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":104:19)
#loc125 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":104:17)
#loc126 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":105:9)
#loc127 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:13)
#loc128 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":115:13)
#loc129 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:17)
#loc130 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:25)
#loc131 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:33)
#loc132 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:34)
#loc133 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:22)
#loc134 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":108:13)
#loc135 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":111:13)
#loc136 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":113:13)
#loc137 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":109:17)
#loc138 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":109:37)
#loc139 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":109:30)
#loc140 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":110:30)
#loc141 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":110:17)
#loc142 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":114:27)
#loc143 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":114:17)
#loc144 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":123:1)
#loc145 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":156:1)
#loc146 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":125:5)
#loc147 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":125:9)
#loc148 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":127:12)
#loc149 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":127:5)
#loc150 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":128:5)
#loc151 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":137:5)
#loc152 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":128:8)
#loc153 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":128:33)
#loc154 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":129:5)
#loc155 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":132:5)
#loc156 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":134:5)
#loc157 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":131:17)
#loc158 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":131:16)
#loc159 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":131:9)
#loc160 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":136:17)
#loc161 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":136:16)
#loc162 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":136:9)
#loc163 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":138:5)
#loc164 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":155:5)
#loc165 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":138:8)
#loc166 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":138:33)
#loc167 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":139:5)
#loc168 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":146:5)
#loc169 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":148:5)
#loc170 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":140:9)
#loc171 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":145:9)
#loc172 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":140:12)
#loc173 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":140:19)
#loc174 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":140:17)
#loc175 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":141:9)
#loc176 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":143:13)
#loc177 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":143:33)
#loc178 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":143:26)
#loc179 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":144:26)
#loc180 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":144:13)
#loc181 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":149:9)
#loc182 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":154:9)
#loc183 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":149:12)
#loc184 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":149:19)
#loc185 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":149:17)
#loc186 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":150:9)
#loc187 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":152:13)
#loc188 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":152:33)
#loc189 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":152:26)
#loc190 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":153:26)
#loc191 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":153:13)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc194 = loc(fused[#loc5, #loc6])
#loc195 = loc(fused[#loc7, #loc8])
#loc196 = loc(fused[#loc10, #loc11])
#loc197 = loc(fused[#loc12, #loc13])
#loc198 = loc(fused[#loc15, #loc14])
#loc199 = loc(fused[#loc16, #loc17])
#loc200 = loc(fused[#loc18, #loc19])
#loc201 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc202 = loc(fused[#loc24, #loc23])
#loc203 = loc(fused[#loc27, #loc25])
#loc204 = loc(fused[#loc28, #loc29])
#loc205 = loc(fused[#loc30, #loc31])
#loc206 = loc(fused[#loc32, #loc33, #loc34, #loc29])
#loc207 = loc(fused[#loc35, #loc36])
#loc208 = loc(fused[#loc37, #loc38])
#loc209 = loc(fused[#loc40, #loc36])
#loc210 = loc(fused[#loc41, #loc42])
#loc211 = loc(fused[#loc46, #loc47])
#loc212 = loc(fused[#loc48, #loc49])
#loc213 = loc(fused[#loc51, #loc47])
#loc214 = loc(fused[#loc52, #loc53])
#loc215 = loc(fused[#loc55, #loc56])
#loc216 = loc(fused[#loc54, #loc57])
#loc217 = loc(fused[#loc59, #loc60, #loc61, #loc53])
#loc218 = loc(fused[#loc62, #loc63])
#loc219 = loc(fused[#loc68, #loc69])
#loc220 = loc(fused[#loc70, #loc71])
#loc221 = loc(fused[#loc72, #loc73])
#loc222 = loc(fused[#loc74, #loc75])
#loc223 = loc(fused[#loc76, #loc77])
#loc224 = loc(fused[#loc79, #loc78])
#loc225 = loc(fused[#loc80, #loc81])
#loc226 = loc(fused[#loc82, #loc83])
#loc227 = loc(fused[#loc84, #loc85, #loc86, #loc81])
#loc228 = loc(fused[#loc88, #loc87])
#loc229 = loc(fused[#loc90, #loc89])
#loc230 = loc(fused[#loc91, #loc92])
#loc231 = loc(fused[#loc93, #loc94])
#loc232 = loc(fused[#loc95, #loc96, #loc97, #loc92])
#loc233 = loc(fused[#loc98, #loc99])
#loc234 = loc(fused[#loc100, #loc101])
#loc235 = loc(fused[#loc103, #loc99])
#loc236 = loc(fused[#loc104, #loc105])
#loc237 = loc(fused[#loc107, #loc108])
#loc238 = loc(fused[#loc106, #loc109])
#loc239 = loc(fused[#loc111, #loc112, #loc113, #loc105])
#loc240 = loc(fused[#loc114, #loc115])
#loc241 = loc(fused[#loc121, #loc122])
#loc242 = loc(fused[#loc123, #loc124])
#loc243 = loc(fused[#loc126, #loc122])
#loc244 = loc(fused[#loc127, #loc128])
#loc245 = loc(fused[#loc130, #loc131])
#loc246 = loc(fused[#loc129, #loc132])
#loc247 = loc(fused[#loc134, #loc135, #loc136, #loc128])
#loc248 = loc(fused[#loc137, #loc138])
#loc249 = loc(fused[#loc144, #loc145])
#loc250 = loc(fused[#loc146, #loc147])
#loc251 = loc(fused[#loc149, #loc148])
#loc252 = loc(fused[#loc150, #loc151])
#loc253 = loc(fused[#loc152, #loc153])
#loc254 = loc(fused[#loc154, #loc155, #loc156, #loc151])
#loc255 = loc(fused[#loc159, #loc157])
#loc256 = loc(fused[#loc162, #loc160])
#loc257 = loc(fused[#loc163, #loc164])
#loc258 = loc(fused[#loc165, #loc166])
#loc259 = loc(fused[#loc167, #loc168, #loc169, #loc164])
#loc260 = loc(fused[#loc170, #loc171])
#loc261 = loc(fused[#loc172, #loc173])
#loc262 = loc(fused[#loc175, #loc171])
#loc263 = loc(fused[#loc176, #loc177])
#loc264 = loc(fused[#loc181, #loc182])
#loc265 = loc(fused[#loc183, #loc184])
#loc266 = loc(fused[#loc186, #loc182])
#loc267 = loc(fused[#loc187, #loc188])
