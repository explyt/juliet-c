!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":27:12)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":87:10)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":87:14)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":87:20)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":87:32)
#loc174 = loc(fused[#loc76, #loc77])
#loc175 = loc(fused[#loc78, #loc79])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc143)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc145)
  cir.func private @printIntLine(!s32i) loc(#loc146)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc147)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc150)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc20)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc22)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc22)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc22)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc22)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc22)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc22)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc22)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc22)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc22)
    cir.br ^bb3(%20 : !u32i) loc(#loc22)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc22)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc22)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc22)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc22)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc22)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc22)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc22)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc22)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc22)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc22)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc22)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc22)
    cir.br ^bb3(%36 : !u32i) loc(#loc22)
  ^bb3(%37: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":27:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc22)
    cir.store %38, %2 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.br ^bb5 loc(#loc154)
  ^bb5:  // pred: ^bb4
    %39 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc26)
    %40 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc27)
    %42 = cir.const #cir.int<4> : !u64i loc(#loc155)
    %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc156)
    %44 = cir.call @malloc(%43) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc26)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc157)
    cir.store %45, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
    cir.br ^bb6 loc(#loc159)
  ^bb6:  // pred: ^bb5
    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
    %47 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    %48 = cir.cast(bitcast, %47 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
    %49 = cir.cmp(eq, %46, %48) : !cir.ptr<!s32i>, !cir.bool loc(#loc160)
    cir.brcond %49 ^bb7, ^bb8 loc(#loc161)
  ^bb7:  // pred: ^bb6
    %50 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc39)
    cir.call @exit(%52) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
    cir.br ^bb8 loc(#loc33)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc33)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc162)
  ^bb10:  // pred: ^bb9
    %53 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc42)
    cir.store %54, %0 : !u64i, !cir.ptr<!u64i> loc(#loc163)
    cir.br ^bb11 loc(#loc162)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %55 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc44)
    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc45)
    %58 = cir.cmp(lt, %55, %57) : !u64i, !cir.bool loc(#loc164)
    cir.brcond %58 ^bb12, ^bb16 loc(#loc46)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc165)
  ^bb13:  // pred: ^bb12
    %59 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %60 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %61 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc50)
    %62 = cir.ptr_stride(%60 : !cir.ptr<!s32i>, %61 : !u64i), !cir.ptr<!s32i> loc(#loc51)
    cir.store %59, %62 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.br ^bb14 loc(#loc41)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc41)
  ^bb15:  // pred: ^bb14
    %63 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc52)
    %64 = cir.unary(inc, %63) : !u64i, !u64i loc(#loc53)
    cir.store %64, %0 : !u64i, !cir.ptr<!u64i> loc(#loc167)
    cir.br ^bb11 loc(#loc162)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc41)
  ^bb17:  // pred: ^bb16
    %65 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    %66 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %67 = cir.ptr_stride(%65 : !cir.ptr<!s32i>, %66 : !s32i), !cir.ptr<!s32i> loc(#loc56)
    %68 = cir.load %67 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.call @printIntLine(%68) : (!s32i) -> () loc(#loc57)
    %69 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
    %70 = cir.cast(bitcast, %69 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc58)
    cir.call @free(%70) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc59)
    cir.br ^bb18 loc(#loc25)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc12)
  } loc(#loc148)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc61)
  } loc(#loc168)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc170)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc73)
  cir.func @main(%arg0: !s32i loc(fused[#loc76, #loc77]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc78, #loc79])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc175)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc75)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc80)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc81)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc82)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc82)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc83)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc70)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %8 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01_good() : () -> () loc(#loc85)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc71)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc72)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %13 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01_bad() : () -> () loc(#loc89)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc73)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    cir.return %17 : !s32i loc(#loc178)
  } loc(#loc173)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc103)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %5 = cir.const #cir.int<20> : !s32i loc(#loc105)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.br ^bb1 loc(#loc185)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc109)
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc110)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc186)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc187)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc188)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
    cir.br ^bb2 loc(#loc190)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc118)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc118)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc191)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc192)
  ^bb3:  // pred: ^bb2
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc120)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc122)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc120)
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc116)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc193)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc125)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc125)
    cir.store %21, %0 : !u64i, !cir.ptr<!u64i> loc(#loc194)
    cir.br ^bb7 loc(#loc193)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %22 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc127)
    %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc128)
    %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc195)
    cir.brcond %25 ^bb8, ^bb12 loc(#loc129)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc196)
  ^bb9:  // pred: ^bb8
    %26 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
    %28 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc133)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc134)
    cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb10 loc(#loc124)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc124)
  ^bb11:  // pred: ^bb10
    %30 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc135)
    %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc136)
    cir.store %31, %0 : !u64i, !cir.ptr<!u64i> loc(#loc198)
    cir.br ^bb7 loc(#loc193)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc124)
  ^bb13:  // pred: ^bb12
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc138)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc139)
    %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc140)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc141)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc141)
    cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc142)
    cir.br ^bb14 loc(#loc108)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc95)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":21:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":42:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":29:9)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":29:16)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":30:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":30:14)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":23:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":23:9)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":25:13)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":25:12)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":25:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":27:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":28:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":41:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":33:28)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":33:35)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":33:42)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":33:52)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":33:53)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":33:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":34:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":34:43)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":34:13)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":34:27)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":34:33)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":34:34)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":34:40)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":34:39)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":35:9)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":38:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":35:18)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":35:14)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":35:21)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":35:33)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":35:23)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":36:9)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":37:29)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":37:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":37:24)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":37:25)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":35:40)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":35:39)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":39:22)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":39:33)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":39:34)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":39:9)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":40:14)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":40:9)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":72:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":75:1)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":74:5)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":74:13)
#loc64 = loc("/usr/include/stdlib.h":575:1)
#loc65 = loc("/usr/include/stdlib.h":575:41)
#loc66 = loc("/usr/include/time.h":76:1)
#loc67 = loc("/usr/include/time.h":76:38)
#loc68 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc69 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":92:15)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":94:15)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":97:15)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":99:15)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":87:1)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":102:1)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":88:1)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":90:27)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":90:22)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":90:5)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":92:5)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":93:5)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":93:69)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":94:5)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":97:5)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":98:5)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":98:68)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":99:5)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":101:12)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":101:5)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":49:1)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":70:1)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":57:9)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":57:16)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":58:9)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":58:14)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":51:5)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":51:9)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":53:13)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":53:12)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":53:5)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":55:12)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":55:5)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":56:5)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":69:5)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":61:28)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":61:35)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":61:42)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":61:52)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":61:53)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":61:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":62:9)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":62:43)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":62:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":62:27)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":62:33)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":62:34)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":62:40)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":62:39)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":63:9)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":66:9)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":63:18)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":63:14)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":63:21)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":63:33)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":63:23)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":64:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":65:29)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":65:13)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":65:24)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":65:25)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":63:40)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":63:39)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":67:22)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":67:33)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":67:34)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":67:9)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":68:14)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_01.c":68:9)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc7, #loc8])
#loc147 = loc(fused[#loc9, #loc10])
#loc148 = loc(fused[#loc11, #loc12])
#loc149 = loc(fused[#loc13, #loc14])
#loc150 = loc(fused[#loc15, #loc16])
#loc151 = loc(fused[#loc17, #loc18])
#loc152 = loc(fused[#loc21, #loc19])
#loc153 = loc(fused[#loc23, #loc22])
#loc154 = loc(fused[#loc24, #loc25])
#loc155 = loc(fused[#loc28, #loc29])
#loc156 = loc(fused[#loc27, #loc29])
#loc157 = loc(fused[#loc26, #loc30])
#loc158 = loc(fused[#loc31, #loc30])
#loc159 = loc(fused[#loc32, #loc33])
#loc160 = loc(fused[#loc34, #loc35])
#loc161 = loc(fused[#loc36, #loc33])
#loc162 = loc(fused[#loc40, #loc41])
#loc163 = loc(fused[#loc43, #loc42])
#loc164 = loc(fused[#loc44, #loc45])
#loc165 = loc(fused[#loc47, #loc41])
#loc166 = loc(fused[#loc49, #loc48])
#loc167 = loc(fused[#loc53, #loc52])
#loc168 = loc(fused[#loc60, #loc61])
#loc169 = loc(fused[#loc62, #loc63])
#loc170 = loc(fused[#loc64, #loc65])
#loc171 = loc(fused[#loc66, #loc67])
#loc172 = loc(fused[#loc68, #loc69])
#loc173 = loc(fused[#loc74, #loc75])
#loc176 = loc(fused[#loc85, #loc86])
#loc177 = loc(fused[#loc89, #loc90])
#loc178 = loc(fused[#loc93, #loc92])
#loc179 = loc(fused[#loc94, #loc95])
#loc180 = loc(fused[#loc96, #loc97])
#loc181 = loc(fused[#loc98, #loc99])
#loc182 = loc(fused[#loc100, #loc101])
#loc183 = loc(fused[#loc104, #loc102])
#loc184 = loc(fused[#loc106, #loc105])
#loc185 = loc(fused[#loc107, #loc108])
#loc186 = loc(fused[#loc111, #loc112])
#loc187 = loc(fused[#loc110, #loc112])
#loc188 = loc(fused[#loc109, #loc113])
#loc189 = loc(fused[#loc114, #loc113])
#loc190 = loc(fused[#loc115, #loc116])
#loc191 = loc(fused[#loc117, #loc118])
#loc192 = loc(fused[#loc119, #loc116])
#loc193 = loc(fused[#loc123, #loc124])
#loc194 = loc(fused[#loc126, #loc125])
#loc195 = loc(fused[#loc127, #loc128])
#loc196 = loc(fused[#loc130, #loc124])
#loc197 = loc(fused[#loc132, #loc131])
#loc198 = loc(fused[#loc136, #loc135])
