!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc93)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc95)
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %2 ^bb2, ^bb5 loc(#loc97)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc98)
  ^bb3:  // pred: ^bb2
    %3 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc14)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc16)
    %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc16)
    %7 = cir.call @sqrt(%6) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc14)
    cir.store %7, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc99)
    %8 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc19)
    cir.call @printDoubleLine(%8) : (!cir.double) -> () loc(#loc20)
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc9)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc9)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc5)
  } loc(#loc94)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc100)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc29)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc32)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc105)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc107)
    cir.br ^bb1 loc(#loc108)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc41)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc29)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    cir.br ^bb10 loc(#loc43)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc110)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %6 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc49)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc50)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc52)
    %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc52)
    %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc50)
    cir.store %11, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc112)
    cir.br ^bb5 loc(#loc113)
  ^bb5:  // pred: ^bb4
    %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc57)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %14 = cir.const #cir.int<33> : !s32i loc(#loc58)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc114)
    cir.brcond %15 ^bb6, ^bb7 loc(#loc115)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc32)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc61)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc62)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc61)
    cir.br ^bb7 loc(#loc56)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc63)
    cir.call @printDoubleLine(%20) : (!cir.double) -> () loc(#loc64)
    cir.br ^bb9 loc(#loc47)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc40)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc40)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc36)
  } loc(#loc106)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc117)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc71)
    cir.brcond %2 ^bb2, ^bb9 loc(#loc119)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc120)
  ^bb3:  // pred: ^bb2
    %3 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc76)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc77)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc79)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc79)
    %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc77)
    cir.store %9, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc122)
    cir.br ^bb4 loc(#loc123)
  ^bb4:  // pred: ^bb3
    %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc84)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %12 = cir.const #cir.int<33> : !s32i loc(#loc85)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc124)
    cir.brcond %13 ^bb5, ^bb6 loc(#loc125)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc87)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc89)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc90)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
    cir.br ^bb6 loc(#loc83)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc83)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc91)
    cir.call @printDoubleLine(%18) : (!cir.double) -> () loc(#loc92)
    cir.br ^bb8 loc(#loc74)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc70)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc70)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc66)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_02.c":0:0)
#loc1 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":24:1)
#loc5 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":35:1)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":29:13)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":29:20)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":26:5)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":34:5)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":26:8)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":27:5)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":28:9)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":33:9)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":30:36)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":30:50)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":30:49)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":30:13)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":30:51)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":32:29)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":32:13)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":86:1)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":90:1)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":88:5)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":88:11)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":89:5)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":89:11)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":47:19)
#loc30 = loc("/usr/include/errno.h":37:1)
#loc31 = loc("/usr/include/errno.h":37:45)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":58:27)
#loc33 = loc("/usr/include/stdlib.h":756:1)
#loc34 = loc("/usr/include/stdlib.h":756:70)
#loc35 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":42:1)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":64:1)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":52:13)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":52:20)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":44:5)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":63:5)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":44:8)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":45:5)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":48:5)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":50:5)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":47:9)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":51:9)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":62:9)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":53:21)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":53:13)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":54:36)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":54:50)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":54:49)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":54:13)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":54:51)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":56:13)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":60:13)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":56:17)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":56:26)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":57:13)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":58:17)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":59:17)
#loc62 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":59:22)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":61:29)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":61:13)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":67:1)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":84:1)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":72:13)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":72:20)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":69:5)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":83:5)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":69:8)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":70:5)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":71:9)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":82:9)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":73:21)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":73:13)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":74:36)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":74:50)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":74:49)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":74:13)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":74:51)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":76:13)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":80:13)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":76:17)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":76:26)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":77:13)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":78:27)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":78:17)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":79:17)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":79:22)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":81:29)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_02.c":81:13)
#loc93 = loc(fused[#loc2, #loc3])
#loc94 = loc(fused[#loc4, #loc5])
#loc95 = loc(fused[#loc6, #loc7])
#loc96 = loc(fused[#loc8, #loc9])
#loc97 = loc(fused[#loc11, #loc9])
#loc98 = loc(fused[#loc12, #loc13])
#loc99 = loc(fused[#loc17, #loc18])
#loc100 = loc(fused[#loc21, #loc22])
#loc101 = loc(fused[#loc23, #loc24])
#loc102 = loc(fused[#loc25, #loc26])
#loc103 = loc(fused[#loc27, #loc28])
#loc104 = loc(fused[#loc30, #loc31])
#loc105 = loc(fused[#loc33, #loc34])
#loc106 = loc(fused[#loc35, #loc36])
#loc107 = loc(fused[#loc37, #loc38])
#loc108 = loc(fused[#loc39, #loc40])
#loc109 = loc(fused[#loc42, #loc43, #loc44, #loc40])
#loc110 = loc(fused[#loc46, #loc47])
#loc111 = loc(fused[#loc49, #loc48])
#loc112 = loc(fused[#loc53, #loc54])
#loc113 = loc(fused[#loc55, #loc56])
#loc114 = loc(fused[#loc57, #loc58])
#loc115 = loc(fused[#loc59, #loc56])
#loc116 = loc(fused[#loc65, #loc66])
#loc117 = loc(fused[#loc67, #loc68])
#loc118 = loc(fused[#loc69, #loc70])
#loc119 = loc(fused[#loc72, #loc70])
#loc120 = loc(fused[#loc73, #loc74])
#loc121 = loc(fused[#loc76, #loc75])
#loc122 = loc(fused[#loc80, #loc81])
#loc123 = loc(fused[#loc82, #loc83])
#loc124 = loc(fused[#loc84, #loc85])
#loc125 = loc(fused[#loc86, #loc83])
