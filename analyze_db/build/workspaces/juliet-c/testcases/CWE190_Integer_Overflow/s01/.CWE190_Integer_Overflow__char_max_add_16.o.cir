!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc93)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_add_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc95)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc7)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc96)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%4) loc(#loc11)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<127> : !s32i loc(#loc13)
          %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc13)
          cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc99)
          cir.break loc(#loc15)
        } loc(#loc98)
        cir.yield loc(#loc10)
      } loc(#loc97)
    } loc(#loc97)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
        cir.condition(%4) loc(#loc18)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc103)
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc24)
            %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc24)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc23)
            %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc24)
            %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc24)
            cir.store %8, %3 : !s8i, !cir.ptr<!s8i> loc(#loc103)
            %9 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc25)
            cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc26)
          } loc(#loc102)
          cir.break loc(#loc27)
        } loc(#loc101)
        cir.yield loc(#loc17)
      } loc(#loc100)
    } loc(#loc100)
    cir.return loc(#loc4)
  } loc(#loc94)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_add_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc109)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc41)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc41)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc110)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
        cir.condition(%4) loc(#loc45)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<127> : !s32i loc(#loc47)
          %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc47)
          cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc113)
          cir.break loc(#loc49)
        } loc(#loc112)
        cir.yield loc(#loc44)
      } loc(#loc111)
    } loc(#loc111)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
        cir.condition(%4) loc(#loc52)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc56)
            %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc56)
            %5 = cir.const #cir.int<127> : !s32i loc(#loc57)
            %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc117)
            cir.if %6 {
              %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc119)
              %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc63)
              %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc63)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc62)
              %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc63)
              %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc63)
              cir.store %12, %7 : !s8i, !cir.ptr<!s8i> loc(#loc119)
              %13 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc64)
              cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc65)
            } else {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc66)
            } loc(#loc118)
          } loc(#loc116)
          cir.break loc(#loc67)
        } loc(#loc115)
        cir.yield loc(#loc51)
      } loc(#loc114)
    } loc(#loc114)
    cir.return loc(#loc38)
  } loc(#loc108)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc121)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc72)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc72)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc122)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc76)
        cir.condition(%4) loc(#loc76)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc78)
          %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc78)
          cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc125)
          cir.break loc(#loc80)
        } loc(#loc124)
        cir.yield loc(#loc75)
      } loc(#loc123)
    } loc(#loc123)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc83)
        cir.condition(%4) loc(#loc83)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc129)
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc89)
            %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc89)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc89)
            %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc89)
            cir.store %8, %3 : !s8i, !cir.ptr<!s8i> loc(#loc129)
            %9 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc90)
            cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc91)
          } loc(#loc128)
          cir.break loc(#loc92)
        } loc(#loc127)
        cir.yield loc(#loc82)
      } loc(#loc126)
    } loc(#loc126)
    cir.return loc(#loc69)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_max_add_16.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_add_16.c":41:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_add_16.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__char_max_add_16.c":24:10)
#loc7 = loc("CWE190_Integer_Overflow__char_max_add_16.c":25:12)
#loc8 = loc("CWE190_Integer_Overflow__char_max_add_16.c":25:5)
#loc9 = loc("CWE190_Integer_Overflow__char_max_add_16.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__char_max_add_16.c":31:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_add_16.c":26:11)
#loc12 = loc("CWE190_Integer_Overflow__char_max_add_16.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_add_16.c":29:16)
#loc14 = loc("CWE190_Integer_Overflow__char_max_add_16.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__char_max_add_16.c":30:9)
#loc16 = loc("CWE190_Integer_Overflow__char_max_add_16.c":32:5)
#loc17 = loc("CWE190_Integer_Overflow__char_max_add_16.c":40:5)
#loc18 = loc("CWE190_Integer_Overflow__char_max_add_16.c":32:11)
#loc19 = loc("CWE190_Integer_Overflow__char_max_add_16.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__char_max_add_16.c":34:9)
#loc21 = loc("CWE190_Integer_Overflow__char_max_add_16.c":38:9)
#loc22 = loc("CWE190_Integer_Overflow__char_max_add_16.c":36:13)
#loc23 = loc("CWE190_Integer_Overflow__char_max_add_16.c":36:34)
#loc24 = loc("CWE190_Integer_Overflow__char_max_add_16.c":36:27)
#loc25 = loc("CWE190_Integer_Overflow__char_max_add_16.c":37:30)
#loc26 = loc("CWE190_Integer_Overflow__char_max_add_16.c":37:13)
#loc27 = loc("CWE190_Integer_Overflow__char_max_add_16.c":39:9)
#loc28 = loc("CWE190_Integer_Overflow__char_max_add_16.c":96:1)
#loc29 = loc("CWE190_Integer_Overflow__char_max_add_16.c":100:1)
#loc30 = loc("CWE190_Integer_Overflow__char_max_add_16.c":98:5)
#loc31 = loc("CWE190_Integer_Overflow__char_max_add_16.c":98:13)
#loc32 = loc("CWE190_Integer_Overflow__char_max_add_16.c":99:5)
#loc33 = loc("CWE190_Integer_Overflow__char_max_add_16.c":99:13)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__char_max_add_16.c":68:23)
#loc37 = loc("CWE190_Integer_Overflow__char_max_add_16.c":48:1)
#loc38 = loc("CWE190_Integer_Overflow__char_max_add_16.c":72:1)
#loc39 = loc("CWE190_Integer_Overflow__char_max_add_16.c":50:5)
#loc40 = loc("CWE190_Integer_Overflow__char_max_add_16.c":50:10)
#loc41 = loc("CWE190_Integer_Overflow__char_max_add_16.c":51:12)
#loc42 = loc("CWE190_Integer_Overflow__char_max_add_16.c":51:5)
#loc43 = loc("CWE190_Integer_Overflow__char_max_add_16.c":52:5)
#loc44 = loc("CWE190_Integer_Overflow__char_max_add_16.c":57:5)
#loc45 = loc("CWE190_Integer_Overflow__char_max_add_16.c":52:11)
#loc46 = loc("CWE190_Integer_Overflow__char_max_add_16.c":53:5)
#loc47 = loc("CWE190_Integer_Overflow__char_max_add_16.c":55:16)
#loc48 = loc("CWE190_Integer_Overflow__char_max_add_16.c":55:9)
#loc49 = loc("CWE190_Integer_Overflow__char_max_add_16.c":56:9)
#loc50 = loc("CWE190_Integer_Overflow__char_max_add_16.c":58:5)
#loc51 = loc("CWE190_Integer_Overflow__char_max_add_16.c":71:5)
#loc52 = loc("CWE190_Integer_Overflow__char_max_add_16.c":58:11)
#loc53 = loc("CWE190_Integer_Overflow__char_max_add_16.c":59:5)
#loc54 = loc("CWE190_Integer_Overflow__char_max_add_16.c":61:9)
#loc55 = loc("CWE190_Integer_Overflow__char_max_add_16.c":69:9)
#loc56 = loc("CWE190_Integer_Overflow__char_max_add_16.c":61:13)
#loc57 = loc("CWE190_Integer_Overflow__char_max_add_16.c":61:20)
#loc58 = loc("CWE190_Integer_Overflow__char_max_add_16.c":62:9)
#loc59 = loc("CWE190_Integer_Overflow__char_max_add_16.c":65:9)
#loc60 = loc("CWE190_Integer_Overflow__char_max_add_16.c":67:9)
#loc61 = loc("CWE190_Integer_Overflow__char_max_add_16.c":63:13)
#loc62 = loc("CWE190_Integer_Overflow__char_max_add_16.c":63:34)
#loc63 = loc("CWE190_Integer_Overflow__char_max_add_16.c":63:27)
#loc64 = loc("CWE190_Integer_Overflow__char_max_add_16.c":64:30)
#loc65 = loc("CWE190_Integer_Overflow__char_max_add_16.c":64:13)
#loc66 = loc("CWE190_Integer_Overflow__char_max_add_16.c":68:13)
#loc67 = loc("CWE190_Integer_Overflow__char_max_add_16.c":70:9)
#loc68 = loc("CWE190_Integer_Overflow__char_max_add_16.c":75:1)
#loc69 = loc("CWE190_Integer_Overflow__char_max_add_16.c":94:1)
#loc70 = loc("CWE190_Integer_Overflow__char_max_add_16.c":77:5)
#loc71 = loc("CWE190_Integer_Overflow__char_max_add_16.c":77:10)
#loc72 = loc("CWE190_Integer_Overflow__char_max_add_16.c":78:12)
#loc73 = loc("CWE190_Integer_Overflow__char_max_add_16.c":78:5)
#loc74 = loc("CWE190_Integer_Overflow__char_max_add_16.c":79:5)
#loc75 = loc("CWE190_Integer_Overflow__char_max_add_16.c":84:5)
#loc76 = loc("CWE190_Integer_Overflow__char_max_add_16.c":79:11)
#loc77 = loc("CWE190_Integer_Overflow__char_max_add_16.c":80:5)
#loc78 = loc("CWE190_Integer_Overflow__char_max_add_16.c":82:16)
#loc79 = loc("CWE190_Integer_Overflow__char_max_add_16.c":82:9)
#loc80 = loc("CWE190_Integer_Overflow__char_max_add_16.c":83:9)
#loc81 = loc("CWE190_Integer_Overflow__char_max_add_16.c":85:5)
#loc82 = loc("CWE190_Integer_Overflow__char_max_add_16.c":93:5)
#loc83 = loc("CWE190_Integer_Overflow__char_max_add_16.c":85:11)
#loc84 = loc("CWE190_Integer_Overflow__char_max_add_16.c":86:5)
#loc85 = loc("CWE190_Integer_Overflow__char_max_add_16.c":87:9)
#loc86 = loc("CWE190_Integer_Overflow__char_max_add_16.c":91:9)
#loc87 = loc("CWE190_Integer_Overflow__char_max_add_16.c":89:13)
#loc88 = loc("CWE190_Integer_Overflow__char_max_add_16.c":89:34)
#loc89 = loc("CWE190_Integer_Overflow__char_max_add_16.c":89:27)
#loc90 = loc("CWE190_Integer_Overflow__char_max_add_16.c":90:30)
#loc91 = loc("CWE190_Integer_Overflow__char_max_add_16.c":90:13)
#loc92 = loc("CWE190_Integer_Overflow__char_max_add_16.c":92:9)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc8, #loc7])
#loc97 = loc(fused[#loc9, #loc10])
#loc98 = loc(fused[#loc12, #loc10])
#loc99 = loc(fused[#loc14, #loc13])
#loc100 = loc(fused[#loc16, #loc17])
#loc101 = loc(fused[#loc19, #loc17])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc22, #loc23])
#loc104 = loc(fused[#loc28, #loc29])
#loc105 = loc(fused[#loc30, #loc31])
#loc106 = loc(fused[#loc32, #loc33])
#loc107 = loc(fused[#loc34, #loc35])
#loc108 = loc(fused[#loc37, #loc38])
#loc109 = loc(fused[#loc39, #loc40])
#loc110 = loc(fused[#loc42, #loc41])
#loc111 = loc(fused[#loc43, #loc44])
#loc112 = loc(fused[#loc46, #loc44])
#loc113 = loc(fused[#loc48, #loc47])
#loc114 = loc(fused[#loc50, #loc51])
#loc115 = loc(fused[#loc53, #loc51])
#loc116 = loc(fused[#loc54, #loc55])
#loc117 = loc(fused[#loc56, #loc57])
#loc118 = loc(fused[#loc58, #loc59, #loc60, #loc55])
#loc119 = loc(fused[#loc61, #loc62])
#loc120 = loc(fused[#loc68, #loc69])
#loc121 = loc(fused[#loc70, #loc71])
#loc122 = loc(fused[#loc73, #loc72])
#loc123 = loc(fused[#loc74, #loc75])
#loc124 = loc(fused[#loc77, #loc75])
#loc125 = loc(fused[#loc79, #loc78])
#loc126 = loc(fused[#loc81, #loc82])
#loc127 = loc(fused[#loc84, #loc82])
#loc128 = loc(fused[#loc85, #loc86])
#loc129 = loc(fused[#loc87, #loc88])
