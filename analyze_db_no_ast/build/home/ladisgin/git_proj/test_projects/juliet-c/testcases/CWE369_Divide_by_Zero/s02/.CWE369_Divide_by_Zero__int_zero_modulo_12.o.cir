!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc136)
  cir.func private  @printIntLine(!s32i) loc(#loc137)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc138)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc143)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc143)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        %7 = cir.const #cir.int<0> : !s32i loc(#loc22)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc24)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
      } loc(#loc144)
    } loc(#loc142)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc148)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc148)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc28)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc28)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc33)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc150)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc35)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc39)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc152)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc40)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc44)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc154)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc46)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc7)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc47)
          } loc(#loc153)
        } loc(#loc151)
      } loc(#loc149)
    } loc(#loc147)
    cir.return loc(#loc9)
  } loc(#loc139)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc49)
  } loc(#loc155)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc59)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc162)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc162)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc63)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc63)
      cir.if %6 {
        %7 = cir.const #cir.int<0> : !s32i loc(#loc68)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
      } else {
        %7 = cir.const #cir.int<0> : !s32i loc(#loc70)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
      } loc(#loc163)
    } loc(#loc161)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc167)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc167)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc74)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc74)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc82)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc170)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc83)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc87)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc172)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc89)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc90)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc90)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
          } loc(#loc171)
        } loc(#loc169)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc174)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc96)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc100)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc176)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc102)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc103)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc103)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc104)
          } loc(#loc175)
        } loc(#loc173)
      } loc(#loc168)
    } loc(#loc166)
    cir.return loc(#loc55)
  } loc(#loc158)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc110)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc181)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc181)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc114)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc114)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc119)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc121)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      } loc(#loc182)
    } loc(#loc180)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc186)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc186)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc125)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc125)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc130)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc188)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc132)
      } else {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc133)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc189)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc135)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc106)
  } loc(#loc177)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":51:23)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":54:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":24:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":24:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":26:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":26:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":27:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":36:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":27:8)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":27:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":28:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":31:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":33:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":30:16)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":30:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":35:16)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":35:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":37:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":53:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":37:8)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":37:33)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":38:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":41:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":43:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":40:22)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":40:28)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":40:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":45:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":52:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":45:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":45:21)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":45:18)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":46:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":48:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":50:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":47:26)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":47:32)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":47:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":51:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":134:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":138:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":136:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":136:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":137:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":137:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":63:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":102:1)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":65:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":65:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":67:13)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":67:12)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":67:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":68:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":77:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":68:8)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":68:33)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":69:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":72:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":74:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":71:16)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":71:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":76:16)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":76:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":78:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":101:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":78:8)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":78:33)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":79:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":89:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":91:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":81:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":88:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":81:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":81:21)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":81:18)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":82:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":84:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":86:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":83:26)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":83:32)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":83:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":87:23)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":87:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":93:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":100:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":93:13)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":93:21)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":93:18)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":94:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":96:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":98:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":95:26)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":95:32)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":95:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":99:23)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":99:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":107:1)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":132:1)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":109:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":109:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":111:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":111:12)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":111:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":112:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":121:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":112:8)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":112:33)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":113:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":116:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":118:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":115:16)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":115:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":120:16)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":120:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":122:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":131:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":122:8)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":122:33)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":123:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":126:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":128:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":125:22)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":125:28)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":125:9)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":130:22)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":130:28)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":130:9)
#loc136 = loc(fused[#loc1, #loc2])
#loc137 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc5, #loc6])
#loc139 = loc(fused[#loc8, #loc9])
#loc140 = loc(fused[#loc10, #loc11])
#loc141 = loc(fused[#loc14, #loc12])
#loc142 = loc(fused[#loc15, #loc16])
#loc143 = loc(fused[#loc17, #loc18])
#loc144 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc145 = loc(fused[#loc23, #loc22])
#loc146 = loc(fused[#loc25, #loc24])
#loc147 = loc(fused[#loc26, #loc27])
#loc148 = loc(fused[#loc28, #loc29])
#loc149 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc150 = loc(fused[#loc33, #loc34])
#loc151 = loc(fused[#loc36, #loc37])
#loc152 = loc(fused[#loc38, #loc39])
#loc153 = loc(fused[#loc41, #loc42, #loc43, #loc37])
#loc154 = loc(fused[#loc44, #loc45])
#loc155 = loc(fused[#loc48, #loc49])
#loc156 = loc(fused[#loc50, #loc51])
#loc157 = loc(fused[#loc52, #loc53])
#loc158 = loc(fused[#loc54, #loc55])
#loc159 = loc(fused[#loc56, #loc57])
#loc160 = loc(fused[#loc60, #loc58])
#loc161 = loc(fused[#loc61, #loc62])
#loc162 = loc(fused[#loc63, #loc64])
#loc163 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc164 = loc(fused[#loc69, #loc68])
#loc165 = loc(fused[#loc71, #loc70])
#loc166 = loc(fused[#loc72, #loc73])
#loc167 = loc(fused[#loc74, #loc75])
#loc168 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc169 = loc(fused[#loc79, #loc80])
#loc170 = loc(fused[#loc81, #loc82])
#loc171 = loc(fused[#loc84, #loc85, #loc86, #loc80])
#loc172 = loc(fused[#loc87, #loc88])
#loc173 = loc(fused[#loc92, #loc93])
#loc174 = loc(fused[#loc94, #loc95])
#loc175 = loc(fused[#loc97, #loc98, #loc99, #loc93])
#loc176 = loc(fused[#loc100, #loc101])
#loc177 = loc(fused[#loc105, #loc106])
#loc178 = loc(fused[#loc107, #loc108])
#loc179 = loc(fused[#loc111, #loc109])
#loc180 = loc(fused[#loc112, #loc113])
#loc181 = loc(fused[#loc114, #loc115])
#loc182 = loc(fused[#loc116, #loc117, #loc118, #loc113])
#loc183 = loc(fused[#loc120, #loc119])
#loc184 = loc(fused[#loc122, #loc121])
#loc185 = loc(fused[#loc123, #loc124])
#loc186 = loc(fused[#loc125, #loc126])
#loc187 = loc(fused[#loc127, #loc128, #loc129, #loc124])
#loc188 = loc(fused[#loc130, #loc131])
#loc189 = loc(fused[#loc133, #loc134])
