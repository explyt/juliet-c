!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc149 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:8)
#loc150 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:14)
#loc283 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":240:10)
#loc284 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":240:14)
#loc285 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":240:20)
#loc286 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":240:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc358 = loc(fused[#loc149, #loc150])
#loc407 = loc(fused[#loc283, #loc284])
#loc408 = loc(fused[#loc285, #loc286])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc299)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc300)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc301)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc302)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc303)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc304)
  cir.func private @close(!s32i) -> !s32i loc(#loc305)
  cir.func private @printIntLine(!s32i) loc(#loc306)
  cir.func @_ZN46CWE369_Divide_by_Zero__float_connect_socket_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc308)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc309)
    cir.store %0, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc23)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc24)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc310)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc312)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc313)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc314)
      %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc315)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc33)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc314)
      cir.scope {
        cir.do {
          %9 = cir.const #cir.int<2> : !s32i loc(#loc38)
          %10 = cir.const #cir.int<1> : !u32i loc(#loc39)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc39)
          %12 = cir.const #cir.int<6> : !u32i loc(#loc40)
          %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc40)
          %14 = cir.call @socket(%9, %11, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc41)
          cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc317)
          cir.scope {
            %47 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc46)
            %48 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %49 = cir.unary(minus, %48) : !s32i, !s32i loc(#loc47)
            %50 = cir.cmp(eq, %47, %49) : !s32i, !cir.bool loc(#loc319)
            cir.if %50 {
              cir.break loc(#loc49)
            } loc(#loc320)
          } loc(#loc318)
          %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc321)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc52)
          %17 = cir.const #cir.int<16> : !u64i loc(#loc322)
          cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc323)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc57)
          %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc57)
          %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
          cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc324)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc60)
          %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc61)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc62)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc325)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc65)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc65)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc66)
          %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc326)
          cir.scope {
            %47 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            %48 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc328)
            %49 = cir.const #cir.int<16> : !u64i loc(#loc329)
            %50 = cir.cast(integral, %49 : !u64i), !u32i loc(#loc329)
            %51 = cir.call @connect(%47, %48, %50) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc77)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc78)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc78)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc330)
            cir.if %54 {
              cir.break loc(#loc80)
            } loc(#loc331)
          } loc(#loc327)
          %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc81)
          %31 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc82)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc82)
          %33 = cir.const #cir.int<20> : !s32i loc(#loc83)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc84)
          %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc83)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc83)
          %37 = cir.const #cir.int<0> : !s32i loc(#loc85)
          %38 = cir.call @recv(%30, %32, %36, %37) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc86)
          %39 = cir.cast(integral, %38 : !s64i), !s32i loc(#loc86)
          cir.store %39, %3 : !s32i, !cir.ptr<!s32i> loc(#loc332)
          cir.scope {
            %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %48 = cir.const #cir.int<1> : !s32i loc(#loc92)
            %49 = cir.unary(minus, %48) : !s32i, !s32i loc(#loc92)
            %50 = cir.cmp(eq, %47, %49) : !s32i, !cir.bool loc(#loc334)
            %51 = cir.ternary(%50, true {
              %52 = cir.const #true loc(#loc93)
              cir.yield %52 : !cir.bool loc(#loc93)
            }, false {
              %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc95)
              %54 = cir.cmp(eq, %52, %53) : !s32i, !cir.bool loc(#loc335)
              %55 = cir.ternary(%54, true {
                %56 = cir.const #true loc(#loc93)
                cir.yield %56 : !cir.bool loc(#loc93)
              }, false {
                %56 = cir.const #false loc(#loc93)
                cir.yield %56 : !cir.bool loc(#loc93)
              }) : (!cir.bool) -> !cir.bool loc(#loc93)
              cir.yield %55 : !cir.bool loc(#loc93)
            }) : (!cir.bool) -> !cir.bool loc(#loc93)
            cir.if %51 {
              cir.break loc(#loc97)
            } loc(#loc336)
          } loc(#loc333)
          %40 = cir.const #cir.int<0> : !s8i loc(#loc98)
          %41 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
          %42 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc100)
          %43 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %41 : !s32i), !cir.ptr<!s8i> loc(#loc100)
          cir.store %40, %43 : !s8i, !cir.ptr<!s8i> loc(#loc337)
          %44 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc101)
          %45 = cir.call @atof(%44) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc102)
          %46 = cir.cast(floating, %45 : !cir.double), !cir.float loc(#loc102)
          cir.store %46, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc338)
          cir.yield loc(#loc37)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc105)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc105)
          cir.condition(%10) loc(#loc105)
        } loc(#loc316)
      } loc(#loc316)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc108)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc109)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc340)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc111)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc112)
        } loc(#loc341)
      } loc(#loc339)
    } loc(#loc311)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc343)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc116)
      %5 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc116)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc343)
      cir.scope {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc345)
        %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc121)
        %8 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc122)
        %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc122)
        %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc346)
        %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc346)
        cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc345)
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc124)
      } loc(#loc344)
    } loc(#loc342)
    cir.return loc(#loc19)
  } loc(#loc307)
  cir.func internal private @_ZN46CWE369_Divide_by_Zero__float_connect_socket_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc349)
    cir.store %0, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc130)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc131)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc350)
    %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc133)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc351)
    cir.scope {
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc353)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc138)
      %6 = cir.load %5 : !cir.ptr<!cir.float>, !cir.float loc(#loc138)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc353)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc355)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc143)
        %9 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc144)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc144)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc356)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc356)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc355)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc146)
      } loc(#loc354)
    } loc(#loc352)
    cir.return loc(#loc126)
  } loc(#loc347)
  cir.func linkonce_odr @_ZSt4fabsf(%arg0: !cir.float loc(fused[#loc149, #loc150])) -> !cir.float extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__x", init] {alignment = 4 : i64} loc(#loc358)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc148)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc151)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc152)
    %3 = cir.fabs %2 : !cir.float loc(#loc152)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc359)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc359)
    cir.return %4 : !cir.float loc(#loc359)
  } loc(#loc357)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc155)
  cir.func internal private @_ZN46CWE369_Divide_by_Zero__float_connect_socket_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc361)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc362)
    cir.store %0, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc161)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc162)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc363)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc365)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc366)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc367)
      %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc368)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc171)
      %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc171)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc367)
      cir.scope {
        cir.do {
          %9 = cir.const #cir.int<2> : !s32i loc(#loc176)
          %10 = cir.const #cir.int<1> : !u32i loc(#loc177)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc177)
          %12 = cir.const #cir.int<6> : !u32i loc(#loc178)
          %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc178)
          %14 = cir.call @socket(%9, %11, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc179)
          cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc370)
          cir.scope {
            %47 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %48 = cir.const #cir.int<1> : !s32i loc(#loc185)
            %49 = cir.unary(minus, %48) : !s32i, !s32i loc(#loc185)
            %50 = cir.cmp(eq, %47, %49) : !s32i, !cir.bool loc(#loc372)
            cir.if %50 {
              cir.break loc(#loc187)
            } loc(#loc373)
          } loc(#loc371)
          %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc374)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc190)
          %17 = cir.const #cir.int<16> : !u64i loc(#loc375)
          cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc376)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc195)
          %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc195)
          %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
          cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc377)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc197)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc197)
          %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc198)
          %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc61)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc62)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc378)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc201)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc201)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc202)
          %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc379)
          cir.scope {
            %47 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc207)
            %48 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc381)
            %49 = cir.const #cir.int<16> : !u64i loc(#loc382)
            %50 = cir.cast(integral, %49 : !u64i), !u32i loc(#loc382)
            %51 = cir.call @connect(%47, %48, %50) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc212)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc213)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc213)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc383)
            cir.if %54 {
              cir.break loc(#loc215)
            } loc(#loc384)
          } loc(#loc380)
          %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc216)
          %31 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc217)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc217)
          %33 = cir.const #cir.int<20> : !s32i loc(#loc218)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc219)
          %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc218)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc218)
          %37 = cir.const #cir.int<0> : !s32i loc(#loc220)
          %38 = cir.call @recv(%30, %32, %36, %37) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc221)
          %39 = cir.cast(integral, %38 : !s64i), !s32i loc(#loc221)
          cir.store %39, %3 : !s32i, !cir.ptr<!s32i> loc(#loc385)
          cir.scope {
            %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc226)
            %48 = cir.const #cir.int<1> : !s32i loc(#loc227)
            %49 = cir.unary(minus, %48) : !s32i, !s32i loc(#loc227)
            %50 = cir.cmp(eq, %47, %49) : !s32i, !cir.bool loc(#loc387)
            %51 = cir.ternary(%50, true {
              %52 = cir.const #true loc(#loc228)
              cir.yield %52 : !cir.bool loc(#loc228)
            }, false {
              %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc229)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc230)
              %54 = cir.cmp(eq, %52, %53) : !s32i, !cir.bool loc(#loc388)
              %55 = cir.ternary(%54, true {
                %56 = cir.const #true loc(#loc228)
                cir.yield %56 : !cir.bool loc(#loc228)
              }, false {
                %56 = cir.const #false loc(#loc228)
                cir.yield %56 : !cir.bool loc(#loc228)
              }) : (!cir.bool) -> !cir.bool loc(#loc228)
              cir.yield %55 : !cir.bool loc(#loc228)
            }) : (!cir.bool) -> !cir.bool loc(#loc228)
            cir.if %51 {
              cir.break loc(#loc232)
            } loc(#loc389)
          } loc(#loc386)
          %40 = cir.const #cir.int<0> : !s8i loc(#loc233)
          %41 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc234)
          %42 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc235)
          %43 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %41 : !s32i), !cir.ptr<!s8i> loc(#loc235)
          cir.store %40, %43 : !s8i, !cir.ptr<!s8i> loc(#loc390)
          %44 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc236)
          %45 = cir.call @atof(%44) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc237)
          %46 = cir.cast(floating, %45 : !cir.double), !cir.float loc(#loc237)
          cir.store %46, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc391)
          cir.yield loc(#loc175)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc240)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc240)
          cir.condition(%10) loc(#loc240)
        } loc(#loc369)
      } loc(#loc369)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc243)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc244)
        %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc244)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc393)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc246)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc247)
        } loc(#loc394)
      } loc(#loc392)
    } loc(#loc364)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc396)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc251)
      %5 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc251)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc396)
      cir.scope {
        %6 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc254)
        %7 = cir.call @_ZSt4fabsf(%6) : (!cir.float) -> !cir.float loc(#loc255)
        %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc255)
        %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc256)
        %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc398)
        cir.if %10 {
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc400)
          %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc262)
          %13 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc263)
          %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc263)
          %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc401)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc401)
          cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc400)
          %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc264)
          cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc265)
        } else {
          %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc155)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc155)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc266)
        } loc(#loc399)
      } loc(#loc397)
    } loc(#loc395)
    cir.return loc(#loc157)
  } loc(#loc360)
  cir.func @_ZN46CWE369_Divide_by_Zero__float_connect_socket_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN46CWE369_Divide_by_Zero__float_connect_socket_33L7goodG2BEv() : () -> () loc(#loc269)
    cir.call @_ZN46CWE369_Divide_by_Zero__float_connect_socket_33L7goodB2GEv() : () -> () loc(#loc270)
    cir.return loc(#loc268)
  } loc(#loc402)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc403)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc404)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc405)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc277)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc278)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc279)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc280)
  cir.func @main(%arg0: !s32i loc(fused[#loc283, #loc284]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc285, #loc286])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc407)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc408)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc282)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc287)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc288)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc289)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc289)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc290)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc277)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc277)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc291)
    cir.call @_ZN46CWE369_Divide_by_Zero__float_connect_socket_334goodEv() : () -> () loc(#loc292)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc278)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc278)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc293)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc279)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc279)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc294)
    cir.call @_ZN46CWE369_Divide_by_Zero__float_connect_socket_333badEv() : () -> () loc(#loc295)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc280)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc280)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc296)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc297)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc409)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc409)
    cir.return %15 : !s32i loc(#loc409)
  } loc(#loc406)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_33.cpp":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":80:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":102:1)
#loc13 = loc("/usr/include/stdlib.h":103:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":49:1)
#loc19 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":119:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":51:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":51:11)
#loc22 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":52:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":52:22)
#loc24 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":54:12)
#loc25 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":54:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":55:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":110:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":60:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":60:13)
#loc30 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":61:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":61:28)
#loc32 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":62:9)
#loc33 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":62:32)
#loc34 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":63:9)
#loc35 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":63:41)
#loc36 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":64:9)
#loc37 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":99:17)
#loc38 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":73:36)
#loc39 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":73:45)
#loc40 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":73:58)
#loc41 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":73:29)
#loc42 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":73:13)
#loc43 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":73:69)
#loc44 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":74:13)
#loc45 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":77:13)
#loc46 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":74:17)
#loc47 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":74:34)
#loc48 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":75:13)
#loc49 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":76:17)
#loc50 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":78:20)
#loc51 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":78:21)
#loc52 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":78:30)
#loc53 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":78:33)
#loc54 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":78:47)
#loc55 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":78:13)
#loc56 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":78:48)
#loc57 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":79:34)
#loc58 = loc("/usr/include/netinet/in.h":249:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":79:13)
#loc60 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":80:39)
#loc61 = loc("/usr/include/netinet/in.h":251:20)
#loc62 = loc("/usr/include/netinet/in.h":33:15)
#loc63 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":80:13)
#loc64 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":80:59)
#loc65 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":81:38)
#loc66 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":81:32)
#loc67 = loc("/usr/include/netinet/in.h":250:15)
#loc68 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":81:13)
#loc69 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":81:46)
#loc70 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":82:13)
#loc71 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":85:13)
#loc72 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":82:25)
#loc73 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":82:58)
#loc74 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":82:59)
#loc75 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":82:68)
#loc76 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":82:82)
#loc77 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":82:17)
#loc78 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":82:88)
#loc79 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":83:13)
#loc80 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":84:17)
#loc81 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":89:31)
#loc82 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":89:46)
#loc83 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":89:59)
#loc84 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":89:77)
#loc85 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":89:80)
#loc86 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":89:26)
#loc87 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":89:13)
#loc88 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":89:81)
#loc89 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":90:13)
#loc90 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":93:13)
#loc91 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":90:17)
#loc92 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":90:31)
#loc93 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":90:44)
#loc94 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":90:47)
#loc95 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":90:61)
#loc96 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":91:13)
#loc97 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":92:17)
#loc98 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":95:39)
#loc99 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":95:25)
#loc100 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":95:13)
#loc101 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":97:32)
#loc102 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":97:27)
#loc103 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":97:13)
#loc104 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":97:43)
#loc105 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":99:16)
#loc106 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":100:9)
#loc107 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":103:9)
#loc108 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":100:13)
#loc109 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":100:30)
#loc110 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":101:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":102:26)
#loc112 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":102:13)
#loc113 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":111:5)
#loc114 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":118:5)
#loc115 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":112:9)
#loc116 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":112:22)
#loc117 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":113:9)
#loc118 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":117:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":115:13)
#loc120 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":115:44)
#loc121 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":115:32)
#loc122 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":115:40)
#loc123 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":116:26)
#loc124 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":116:13)
#loc125 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":126:1)
#loc126 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":142:1)
#loc127 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":128:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":128:11)
#loc129 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":129:5)
#loc130 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":129:22)
#loc131 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":131:12)
#loc132 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":131:5)
#loc133 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":133:12)
#loc134 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":133:5)
#loc135 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":134:5)
#loc136 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":141:5)
#loc137 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":135:9)
#loc138 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":135:22)
#loc139 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":136:9)
#loc140 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":140:9)
#loc141 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":138:13)
#loc142 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":138:44)
#loc143 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":138:32)
#loc144 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":138:40)
#loc145 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":139:26)
#loc146 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":139:13)
#loc147 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":237:3)
#loc148 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:34)
#loc151 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:3)
#loc152 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:28)
#loc153 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:5)
#loc154 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:31)
#loc155 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":217:23)
#loc156 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":145:1)
#loc157 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":220:1)
#loc158 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":147:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":147:11)
#loc160 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":148:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":148:22)
#loc162 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":150:12)
#loc163 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":150:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":151:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":206:5)
#loc166 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":156:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":156:13)
#loc168 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":157:9)
#loc169 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":157:28)
#loc170 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":158:9)
#loc171 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":158:32)
#loc172 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":159:9)
#loc173 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":159:41)
#loc174 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":160:9)
#loc175 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":195:17)
#loc176 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":169:36)
#loc177 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":169:45)
#loc178 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":169:58)
#loc179 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":169:29)
#loc180 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":169:13)
#loc181 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":169:69)
#loc182 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":170:13)
#loc183 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":173:13)
#loc184 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":170:17)
#loc185 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":170:34)
#loc186 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":171:13)
#loc187 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":172:17)
#loc188 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":174:20)
#loc189 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":174:21)
#loc190 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":174:30)
#loc191 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":174:33)
#loc192 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":174:47)
#loc193 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":174:13)
#loc194 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":174:48)
#loc195 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":175:34)
#loc196 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":175:13)
#loc197 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":176:49)
#loc198 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":176:39)
#loc199 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":176:13)
#loc200 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":176:59)
#loc201 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":177:38)
#loc202 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":177:32)
#loc203 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":177:13)
#loc204 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":177:46)
#loc205 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":178:13)
#loc206 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":181:13)
#loc207 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":178:25)
#loc208 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":178:58)
#loc209 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":178:59)
#loc210 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":178:68)
#loc211 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":178:82)
#loc212 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":178:17)
#loc213 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":178:88)
#loc214 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":179:13)
#loc215 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":180:17)
#loc216 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":185:31)
#loc217 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":185:46)
#loc218 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":185:59)
#loc219 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":185:77)
#loc220 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":185:80)
#loc221 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":185:26)
#loc222 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":185:13)
#loc223 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":185:81)
#loc224 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":186:13)
#loc225 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":189:13)
#loc226 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":186:17)
#loc227 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":186:31)
#loc228 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":186:44)
#loc229 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":186:47)
#loc230 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":186:61)
#loc231 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":187:13)
#loc232 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":188:17)
#loc233 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":191:39)
#loc234 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":191:25)
#loc235 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":191:13)
#loc236 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":193:32)
#loc237 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":193:27)
#loc238 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":193:13)
#loc239 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":193:43)
#loc240 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":195:16)
#loc241 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":196:9)
#loc242 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":199:9)
#loc243 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":196:13)
#loc244 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":196:30)
#loc245 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":197:9)
#loc246 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":198:26)
#loc247 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":198:13)
#loc248 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":207:5)
#loc249 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":219:5)
#loc250 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":208:9)
#loc251 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":208:22)
#loc252 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":210:9)
#loc253 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":218:9)
#loc254 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":210:17)
#loc255 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":210:12)
#loc256 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":210:25)
#loc257 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":211:9)
#loc258 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":214:9)
#loc259 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":216:9)
#loc260 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":212:13)
#loc261 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":212:44)
#loc262 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":212:32)
#loc263 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":212:40)
#loc264 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":213:26)
#loc265 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":213:13)
#loc266 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":217:13)
#loc267 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":222:1)
#loc268 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":226:1)
#loc269 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":224:5)
#loc270 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":225:5)
#loc271 = loc("/usr/include/stdlib.h":575:1)
#loc272 = loc("/usr/include/stdlib.h":575:41)
#loc273 = loc("/usr/include/time.h":76:1)
#loc274 = loc("/usr/include/time.h":76:38)
#loc275 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc276 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc277 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":245:15)
#loc278 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":247:15)
#loc279 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":250:15)
#loc280 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":252:15)
#loc281 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":240:1)
#loc282 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":255:1)
#loc287 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":241:1)
#loc288 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":243:27)
#loc289 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":243:22)
#loc290 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":243:5)
#loc291 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":245:5)
#loc292 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":246:5)
#loc293 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":247:5)
#loc294 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":250:5)
#loc295 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":251:5)
#loc296 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":252:5)
#loc297 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":254:12)
#loc298 = loc("CWE369_Divide_by_Zero__float_connect_socket_33.cpp":254:5)
#loc299 = loc(fused[#loc1, #loc2])
#loc300 = loc(fused[#loc3, #loc4])
#loc301 = loc(fused[#loc6, #loc7])
#loc302 = loc(fused[#loc8, #loc9])
#loc303 = loc(fused[#loc10, #loc11])
#loc304 = loc(fused[#loc12, #loc13])
#loc305 = loc(fused[#loc14, #loc15])
#loc306 = loc(fused[#loc16, #loc17])
#loc307 = loc(fused[#loc18, #loc19])
#loc308 = loc(fused[#loc20, #loc21])
#loc309 = loc(fused[#loc22, #loc23])
#loc310 = loc(fused[#loc25, #loc24])
#loc311 = loc(fused[#loc26, #loc27])
#loc312 = loc(fused[#loc28, #loc29])
#loc313 = loc(fused[#loc30, #loc31])
#loc314 = loc(fused[#loc32, #loc33])
#loc315 = loc(fused[#loc34, #loc35])
#loc316 = loc(fused[#loc36, #loc37])
#loc317 = loc(fused[#loc42, #loc43])
#loc318 = loc(fused[#loc44, #loc45])
#loc319 = loc(fused[#loc46, #loc47])
#loc320 = loc(fused[#loc48, #loc45])
#loc321 = loc(fused[#loc50, #loc51])
#loc322 = loc(fused[#loc53, #loc54])
#loc323 = loc(fused[#loc55, #loc56])
#loc324 = loc(fused[#loc59, #loc57])
#loc325 = loc(fused[#loc63, #loc64])
#loc326 = loc(fused[#loc68, #loc69])
#loc327 = loc(fused[#loc70, #loc71])
#loc328 = loc(fused[#loc73, #loc74])
#loc329 = loc(fused[#loc75, #loc76])
#loc330 = loc(fused[#loc77, #loc78])
#loc331 = loc(fused[#loc79, #loc71])
#loc332 = loc(fused[#loc87, #loc88])
#loc333 = loc(fused[#loc89, #loc90])
#loc334 = loc(fused[#loc91, #loc92])
#loc335 = loc(fused[#loc94, #loc95])
#loc336 = loc(fused[#loc96, #loc90])
#loc337 = loc(fused[#loc100, #loc98])
#loc338 = loc(fused[#loc103, #loc104])
#loc339 = loc(fused[#loc106, #loc107])
#loc340 = loc(fused[#loc108, #loc109])
#loc341 = loc(fused[#loc110, #loc107])
#loc342 = loc(fused[#loc113, #loc114])
#loc343 = loc(fused[#loc115, #loc116])
#loc344 = loc(fused[#loc117, #loc118])
#loc345 = loc(fused[#loc119, #loc120])
#loc346 = loc(fused[#loc121, #loc122])
#loc347 = loc(fused[#loc125, #loc126])
#loc348 = loc(fused[#loc127, #loc128])
#loc349 = loc(fused[#loc129, #loc130])
#loc350 = loc(fused[#loc132, #loc131])
#loc351 = loc(fused[#loc134, #loc133])
#loc352 = loc(fused[#loc135, #loc136])
#loc353 = loc(fused[#loc137, #loc138])
#loc354 = loc(fused[#loc139, #loc140])
#loc355 = loc(fused[#loc141, #loc142])
#loc356 = loc(fused[#loc143, #loc144])
#loc357 = loc(fused[#loc147, #loc148])
#loc359 = loc(fused[#loc153, #loc154])
#loc360 = loc(fused[#loc156, #loc157])
#loc361 = loc(fused[#loc158, #loc159])
#loc362 = loc(fused[#loc160, #loc161])
#loc363 = loc(fused[#loc163, #loc162])
#loc364 = loc(fused[#loc164, #loc165])
#loc365 = loc(fused[#loc166, #loc167])
#loc366 = loc(fused[#loc168, #loc169])
#loc367 = loc(fused[#loc170, #loc171])
#loc368 = loc(fused[#loc172, #loc173])
#loc369 = loc(fused[#loc174, #loc175])
#loc370 = loc(fused[#loc180, #loc181])
#loc371 = loc(fused[#loc182, #loc183])
#loc372 = loc(fused[#loc184, #loc185])
#loc373 = loc(fused[#loc186, #loc183])
#loc374 = loc(fused[#loc188, #loc189])
#loc375 = loc(fused[#loc191, #loc192])
#loc376 = loc(fused[#loc193, #loc194])
#loc377 = loc(fused[#loc196, #loc195])
#loc378 = loc(fused[#loc199, #loc200])
#loc379 = loc(fused[#loc203, #loc204])
#loc380 = loc(fused[#loc205, #loc206])
#loc381 = loc(fused[#loc208, #loc209])
#loc382 = loc(fused[#loc210, #loc211])
#loc383 = loc(fused[#loc212, #loc213])
#loc384 = loc(fused[#loc214, #loc206])
#loc385 = loc(fused[#loc222, #loc223])
#loc386 = loc(fused[#loc224, #loc225])
#loc387 = loc(fused[#loc226, #loc227])
#loc388 = loc(fused[#loc229, #loc230])
#loc389 = loc(fused[#loc231, #loc225])
#loc390 = loc(fused[#loc235, #loc233])
#loc391 = loc(fused[#loc238, #loc239])
#loc392 = loc(fused[#loc241, #loc242])
#loc393 = loc(fused[#loc243, #loc244])
#loc394 = loc(fused[#loc245, #loc242])
#loc395 = loc(fused[#loc248, #loc249])
#loc396 = loc(fused[#loc250, #loc251])
#loc397 = loc(fused[#loc252, #loc253])
#loc398 = loc(fused[#loc255, #loc256])
#loc399 = loc(fused[#loc257, #loc258, #loc259, #loc253])
#loc400 = loc(fused[#loc260, #loc261])
#loc401 = loc(fused[#loc262, #loc263])
#loc402 = loc(fused[#loc267, #loc268])
#loc403 = loc(fused[#loc271, #loc272])
#loc404 = loc(fused[#loc273, #loc274])
#loc405 = loc(fused[#loc275, #loc276])
#loc406 = loc(fused[#loc281, #loc282])
#loc409 = loc(fused[#loc298, #loc297])
