!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc144)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc145)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_badSink(!cir.ptr<!cir.ptr<!void>>) loc(#loc146)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_66_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %2 = cir.alloca !cir.array<!cir.ptr<!void> x 5>, !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc150)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc17)
    cir.store %3, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc151)
    cir.br ^bb1 loc(#loc152)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc22)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc22)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc153)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc154)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc155)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc148)
    cir.br ^bb2 loc(#loc156)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc157)
    cir.brcond %14 ^bb3, ^bb4 loc(#loc158)
  ^bb3:  // pred: ^bb2
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc32)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc26)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc34)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc35)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc35)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc35)
    %24 = cir.call @wmemset(%18, %19, %23) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc40)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc40)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc42)
    cir.store %25, %30 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
    cir.store %32, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc160)
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
    %34 = cir.const #cir.int<2> : !s32i loc(#loc46)
    %35 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc47)
    %36 = cir.ptr_stride(%35 : !cir.ptr<!cir.ptr<!void>>, %34 : !s32i), !cir.ptr<!cir.ptr<!void>> loc(#loc47)
    cir.store %33, %36 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc161)
    %37 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc48)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_badSink(%37) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc49)
    cir.return loc(#loc10)
  } loc(#loc147)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_66_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc162)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodG2BSink(!cir.ptr<!cir.ptr<!void>>) loc(#loc165)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.alloca !cir.array<!cir.ptr<!void> x 5>, !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc169)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc66)
    cir.store %3, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc70)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc71)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc71)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc172)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc173)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc70)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc174)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    cir.br ^bb2 loc(#loc175)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc77)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc176)
    cir.brcond %14 ^bb3, ^bb4 loc(#loc177)
  ^bb3:  // pred: ^bb2
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc79)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc81)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc79)
    cir.br ^bb4 loc(#loc75)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc82)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc83)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc84)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc84)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc84)
    cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc178)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc88)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc90)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc90)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc92)
    cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc179)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc93)
    cir.store %33, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc180)
    cir.br ^bb6 loc(#loc69)
  ^bb6:  // pred: ^bb5
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc95)
    %35 = cir.const #cir.int<2> : !s32i loc(#loc96)
    %36 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc97)
    %37 = cir.ptr_stride(%36 : !cir.ptr<!cir.ptr<!void>>, %35 : !s32i), !cir.ptr<!cir.ptr<!void>> loc(#loc97)
    cir.store %34, %37 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc181)
    %38 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc98)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodG2BSink(%38) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc99)
    cir.return loc(#loc59)
  } loc(#loc166)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(!cir.ptr<!cir.ptr<!void>>) loc(#loc182)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc184)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.alloca !cir.array<!cir.ptr<!void> x 5>, !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc186)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc110)
    cir.store %3, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc187)
    cir.br ^bb1 loc(#loc188)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc114)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc115)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc115)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc189)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc190)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc114)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc191)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
    cir.br ^bb2 loc(#loc192)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc121)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc121)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc193)
    cir.brcond %14 ^bb3, ^bb4 loc(#loc194)
  ^bb3:  // pred: ^bb2
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc123)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc125)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc123)
    cir.br ^bb4 loc(#loc119)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc119)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc127)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc128)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc128)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc128)
    %24 = cir.call @wmemset(%18, %19, %23) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc130)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc133)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc133)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc135)
    cir.store %25, %30 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc136)
    cir.store %32, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc196)
    cir.br ^bb6 loc(#loc113)
  ^bb6:  // pred: ^bb5
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc138)
    %34 = cir.const #cir.int<2> : !s32i loc(#loc139)
    %35 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc140)
    %36 = cir.ptr_stride(%35 : !cir.ptr<!cir.ptr<!void>>, %34 : !s32i), !cir.ptr<!cir.ptr<!void>> loc(#loc140)
    cir.store %33, %36 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc197)
    %37 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc141)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(%37) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc142)
    cir.return loc(#loc103)
  } loc(#loc183)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":25:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":25:78)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":43:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:71)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":29:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":29:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":30:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":30:23)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":31:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":31:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":32:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":39:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:46)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:53)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:56)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:70)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:36)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:42)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:38)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:41)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:26)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":38:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":38:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":41:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":41:15)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":41:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":42:59)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":42:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":89:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":93:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":91:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":91:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":92:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":92:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":50:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":50:82)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":52:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":67:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:63)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":54:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":54:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":55:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":55:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":56:12)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":56:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":57:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":64:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:41)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:48)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:51)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:62)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:47)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:31)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:37)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:38)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:44)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:43)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:16)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:40)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:41)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:32)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:24)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:28)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":63:24)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":63:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":65:20)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":65:15)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":65:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":66:63)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":66:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":70:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":70:82)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":72:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":87:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:71)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":74:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":74:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":75:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":75:23)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":76:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":76:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":77:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":84:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:46)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:53)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:56)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:70)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:46)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:30)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:36)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:37)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:43)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:42)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:17)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:32)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:38)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:41)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:31)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:26)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:27)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":83:24)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":83:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":85:20)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":85:15)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":85:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":86:63)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":86:5)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc7, #loc8])
#loc147 = loc(fused[#loc9, #loc10])
#loc148 = loc(fused[#loc11, #loc12])
#loc149 = loc(fused[#loc13, #loc14])
#loc150 = loc(fused[#loc15, #loc16])
#loc151 = loc(fused[#loc18, #loc17])
#loc152 = loc(fused[#loc19, #loc20])
#loc153 = loc(fused[#loc23, #loc24])
#loc154 = loc(fused[#loc22, #loc24])
#loc155 = loc(fused[#loc21, #loc12])
#loc156 = loc(fused[#loc25, #loc26])
#loc157 = loc(fused[#loc27, #loc28])
#loc158 = loc(fused[#loc29, #loc26])
#loc159 = loc(fused[#loc39, #loc38])
#loc160 = loc(fused[#loc44, #loc43])
#loc161 = loc(fused[#loc47, #loc45])
#loc162 = loc(fused[#loc50, #loc51])
#loc163 = loc(fused[#loc52, #loc53])
#loc164 = loc(fused[#loc54, #loc55])
#loc165 = loc(fused[#loc56, #loc57])
#loc166 = loc(fused[#loc58, #loc59])
#loc167 = loc(fused[#loc60, #loc61])
#loc168 = loc(fused[#loc62, #loc63])
#loc169 = loc(fused[#loc64, #loc65])
#loc170 = loc(fused[#loc67, #loc66])
#loc171 = loc(fused[#loc68, #loc69])
#loc172 = loc(fused[#loc72, #loc73])
#loc173 = loc(fused[#loc71, #loc73])
#loc174 = loc(fused[#loc70, #loc61])
#loc175 = loc(fused[#loc74, #loc75])
#loc176 = loc(fused[#loc76, #loc77])
#loc177 = loc(fused[#loc78, #loc75])
#loc178 = loc(fused[#loc86, #loc87])
#loc179 = loc(fused[#loc89, #loc88])
#loc180 = loc(fused[#loc94, #loc93])
#loc181 = loc(fused[#loc97, #loc95])
#loc182 = loc(fused[#loc100, #loc101])
#loc183 = loc(fused[#loc102, #loc103])
#loc184 = loc(fused[#loc104, #loc105])
#loc185 = loc(fused[#loc106, #loc107])
#loc186 = loc(fused[#loc108, #loc109])
#loc187 = loc(fused[#loc111, #loc110])
#loc188 = loc(fused[#loc112, #loc113])
#loc189 = loc(fused[#loc116, #loc117])
#loc190 = loc(fused[#loc115, #loc117])
#loc191 = loc(fused[#loc114, #loc105])
#loc192 = loc(fused[#loc118, #loc119])
#loc193 = loc(fused[#loc120, #loc121])
#loc194 = loc(fused[#loc122, #loc119])
#loc195 = loc(fused[#loc132, #loc131])
#loc196 = loc(fused[#loc137, #loc136])
#loc197 = loc(fused[#loc140, #loc138])
