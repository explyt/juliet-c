!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc36 = loc("CWE617_Reachable_Assertion__fixed_04.c":101:10)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_04.c":101:14)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_04.c":101:20)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_04.c":101:32)
#loc102 = loc(fused[#loc36, #loc37])
#loc103 = loc(fused[#loc38, #loc39])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_04.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_04_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.scope {
      %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc15)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc15)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
      } loc(#loc93)
    } loc(#loc92)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc3)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc3)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc3)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc3)
          %11 = cir.const #cir.int<43> : !s32i loc(#loc3)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc3)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
        } loc(#loc3)
      } loc(#loc3)
    } loc(#loc3)
    cir.return loc(#loc5)
  } loc(#loc89)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc95)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc98)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc99)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc33)
  cir.func @main(%arg0: !s32i loc(fused[#loc36, #loc37]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc38, #loc39])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc103)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc35)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc40)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc40)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc41)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc42)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc42)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc43)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc30)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %8 = cir.get_global @CWE617_Reachable_Assertion__fixed_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call @CWE617_Reachable_Assertion__fixed_04_good() : () -> () loc(#loc45)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc32)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %13 = cir.get_global @CWE617_Reachable_Assertion__fixed_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call @CWE617_Reachable_Assertion__fixed_04_bad() : () -> () loc(#loc49)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc33)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc52)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    cir.return %17 : !s32i loc(#loc106)
  } loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc61)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc65)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc65)
      cir.if %5 {
        %6 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc70)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc70)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
      } loc(#loc111)
    } loc(#loc110)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc55)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc55)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc55)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc55)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc55)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc55)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc55)
          %11 = cir.const #cir.int<67> : !s32i loc(#loc55)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc55)
          %13 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc55)
        } loc(#loc55)
      } loc(#loc55)
    } loc(#loc55)
    cir.return loc(#loc57)
  } loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc79)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.scope {
      %4 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc83)
      cir.if %5 {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc85)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc85)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
      } loc(#loc117)
    } loc(#loc116)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc73)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc73)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc73)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc73)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc73)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc73)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc73)
          %11 = cir.const #cir.int<82> : !s32i loc(#loc73)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc73)
          %13 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc73)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc73)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc73)
        } loc(#loc73)
      } loc(#loc73)
    } loc(#loc73)
    cir.return loc(#loc75)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_04.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_04.c":43:5)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_04.c":32:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_04.c":44:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_04.c":34:5)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_04.c":34:9)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_04.c":36:13)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_04.c":36:12)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_04.c":36:5)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_04.c":37:5)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_04.c":41:5)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_04.c":37:8)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_04.c":38:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_04.c":40:16)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_04.c":40:29)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_04.c":40:9)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_04.c":85:1)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_04.c":89:1)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_04.c":87:5)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_04.c":87:14)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_04.c":88:5)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_04.c":88:14)
#loc24 = loc("/usr/include/stdlib.h":575:1)
#loc25 = loc("/usr/include/stdlib.h":575:41)
#loc26 = loc("/usr/include/time.h":76:1)
#loc27 = loc("/usr/include/time.h":76:38)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_04.c":106:15)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_04.c":108:15)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_04.c":111:15)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_04.c":113:15)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_04.c":101:1)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_04.c":116:1)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_04.c":102:1)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_04.c":104:27)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_04.c":104:22)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_04.c":104:5)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_04.c":106:5)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_04.c":107:5)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_04.c":107:47)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_04.c":108:5)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_04.c":111:5)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_04.c":112:5)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_04.c":112:46)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_04.c":113:5)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_04.c":115:12)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_04.c":115:5)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_04.c":59:19)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_04.c":67:5)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_04.c":51:1)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_04.c":68:1)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_04.c":53:5)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_04.c":53:9)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_04.c":55:13)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_04.c":55:12)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_04.c":55:5)
#loc63 = loc("CWE617_Reachable_Assertion__fixed_04.c":56:5)
#loc64 = loc("CWE617_Reachable_Assertion__fixed_04.c":65:5)
#loc65 = loc("CWE617_Reachable_Assertion__fixed_04.c":56:8)
#loc66 = loc("CWE617_Reachable_Assertion__fixed_04.c":57:5)
#loc67 = loc("CWE617_Reachable_Assertion__fixed_04.c":60:5)
#loc68 = loc("CWE617_Reachable_Assertion__fixed_04.c":62:5)
#loc69 = loc("CWE617_Reachable_Assertion__fixed_04.c":59:9)
#loc70 = loc("CWE617_Reachable_Assertion__fixed_04.c":64:16)
#loc71 = loc("CWE617_Reachable_Assertion__fixed_04.c":64:29)
#loc72 = loc("CWE617_Reachable_Assertion__fixed_04.c":64:9)
#loc73 = loc("CWE617_Reachable_Assertion__fixed_04.c":82:5)
#loc74 = loc("CWE617_Reachable_Assertion__fixed_04.c":71:1)
#loc75 = loc("CWE617_Reachable_Assertion__fixed_04.c":83:1)
#loc76 = loc("CWE617_Reachable_Assertion__fixed_04.c":73:5)
#loc77 = loc("CWE617_Reachable_Assertion__fixed_04.c":73:9)
#loc78 = loc("CWE617_Reachable_Assertion__fixed_04.c":75:13)
#loc79 = loc("CWE617_Reachable_Assertion__fixed_04.c":75:12)
#loc80 = loc("CWE617_Reachable_Assertion__fixed_04.c":75:5)
#loc81 = loc("CWE617_Reachable_Assertion__fixed_04.c":76:5)
#loc82 = loc("CWE617_Reachable_Assertion__fixed_04.c":80:5)
#loc83 = loc("CWE617_Reachable_Assertion__fixed_04.c":76:8)
#loc84 = loc("CWE617_Reachable_Assertion__fixed_04.c":77:5)
#loc85 = loc("CWE617_Reachable_Assertion__fixed_04.c":79:16)
#loc86 = loc("CWE617_Reachable_Assertion__fixed_04.c":79:29)
#loc87 = loc("CWE617_Reachable_Assertion__fixed_04.c":79:9)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc4, #loc5])
#loc90 = loc(fused[#loc6, #loc7])
#loc91 = loc(fused[#loc10, #loc8])
#loc92 = loc(fused[#loc11, #loc12])
#loc93 = loc(fused[#loc14, #loc12])
#loc94 = loc(fused[#loc17, #loc16])
#loc95 = loc(fused[#loc18, #loc19])
#loc96 = loc(fused[#loc20, #loc21])
#loc97 = loc(fused[#loc22, #loc23])
#loc98 = loc(fused[#loc24, #loc25])
#loc99 = loc(fused[#loc26, #loc27])
#loc100 = loc(fused[#loc28, #loc29])
#loc101 = loc(fused[#loc34, #loc35])
#loc104 = loc(fused[#loc45, #loc46])
#loc105 = loc(fused[#loc49, #loc50])
#loc106 = loc(fused[#loc53, #loc52])
#loc107 = loc(fused[#loc56, #loc57])
#loc108 = loc(fused[#loc58, #loc59])
#loc109 = loc(fused[#loc62, #loc60])
#loc110 = loc(fused[#loc63, #loc64])
#loc111 = loc(fused[#loc66, #loc67, #loc68, #loc64])
#loc112 = loc(fused[#loc72, #loc71])
#loc113 = loc(fused[#loc74, #loc75])
#loc114 = loc(fused[#loc76, #loc77])
#loc115 = loc(fused[#loc80, #loc78])
#loc116 = loc(fused[#loc81, #loc82])
#loc117 = loc(fused[#loc84, #loc82])
#loc118 = loc(fused[#loc87, #loc86])
