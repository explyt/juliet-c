!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":24:16)
#loc6 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":24:21)
#loc12 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":35:20)
#loc13 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":35:25)
#loc20 = loc(fused[#loc5, #loc6])
#loc23 = loc(fused[#loc12, #loc13])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE195_Signed_to_Unsigned_Conversion_Error/s02/CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc18)
  cir.func @_ZN59CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_629badSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc20)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    %5 = cir.ternary(%4, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc8)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc8)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc8)
      cir.yield %19 : !u32i loc(#loc8)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc8)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc8)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc8)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc8)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc8)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc8)
      cir.yield %23 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc8)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc9)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc21)
    cir.return loc(#loc4)
  } loc(#loc19)
  cir.func @_ZN59CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_6213goodG2BSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc23)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc14)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc15)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %3 = cir.binop(sub, %1, %2) nsw : !s32i loc(#loc15)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc24)
    cir.return loc(#loc11)
  } loc(#loc22)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE195_Signed_to_Unsigned_Conversion_Error/s02/CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":24:1)
#loc4 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":28:1)
#loc7 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":25:1)
#loc8 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":27:12)
#loc9 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":27:5)
#loc10 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":35:1)
#loc11 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":39:1)
#loc14 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":36:1)
#loc15 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":38:12)
#loc16 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":38:16)
#loc17 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_62b.cpp":38:5)
#loc18 = loc(fused[#loc1, #loc2])
#loc19 = loc(fused[#loc3, #loc4])
#loc21 = loc(fused[#loc9, #loc8])
#loc22 = loc(fused[#loc10, #loc11])
#loc24 = loc(fused[#loc17, #loc16])
