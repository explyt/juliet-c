!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc225)
  cir.func private  @printIntLine(!s32i) loc(#loc226)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc227)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_rand_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc232)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc19)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc21)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc21)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc21)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc21)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc21)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc21)
          cir.yield %24 : !u32i loc(#loc21)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc21)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc21)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc21)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc21)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc21)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc21)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc21)
          cir.yield %28 : !u32i loc(#loc21)
        }) : (!cir.bool) -> !u32i loc(#loc21)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc21)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc25)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc26)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc236)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc27)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc239)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc239)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc239)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc36)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc241)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc37)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc42)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc42)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc42)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc43)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc242)
          } loc(#loc240)
        } loc(#loc238)
      } loc(#loc237)
    } loc(#loc235)
    cir.return loc(#loc9)
  } loc(#loc228)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_rand_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc247)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc46)
  } loc(#loc243)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc55)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc62)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc66)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc67)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc252)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc68)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc70)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc70)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc70)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc70)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc70)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc70)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc70)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc70)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc70)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc70)
          cir.yield %24 : !u32i loc(#loc70)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc70)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc70)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc70)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc70)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc70)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc70)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc70)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc70)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc70)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc70)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc70)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc70)
          cir.yield %28 : !u32i loc(#loc70)
        }) : (!cir.bool) -> !u32i loc(#loc70)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc70)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
      } loc(#loc253)
    } loc(#loc251)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc74)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc75)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc256)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc76)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc55)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc55)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc259)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc259)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc259)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc88)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc261)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc89)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc92)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc262)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc94)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc90)
                cir.yield %19 : !cir.bool loc(#loc90)
              }, false {
                %19 = cir.const #false loc(#loc90)
                cir.yield %19 : !cir.bool loc(#loc90)
              }) : (!cir.bool) -> !cir.bool loc(#loc90)
              cir.yield %18 : !cir.bool loc(#loc90)
            }, false {
              %14 = cir.const #false loc(#loc90)
              cir.yield %14 : !cir.bool loc(#loc90)
            }) : (!cir.bool) -> !cir.bool loc(#loc90)
            cir.if %13 {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc99)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc99)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc100)
            } else {
              %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc56)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc56)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc101)
            } loc(#loc263)
          } loc(#loc260)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc255)
    cir.return loc(#loc58)
  } loc(#loc248)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc265)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc107)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc112)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc268)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc113)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc115)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc115)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc115)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc115)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc115)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc115)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc115)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc115)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc115)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc115)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc115)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc115)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc115)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc115)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc115)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc115)
          cir.yield %24 : !u32i loc(#loc115)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc115)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc115)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc115)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc115)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc115)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc115)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc115)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc115)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc115)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc115)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc115)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc115)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc115)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc115)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc115)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc115)
          cir.yield %28 : !u32i loc(#loc115)
        }) : (!cir.bool) -> !u32i loc(#loc115)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc115)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
      } loc(#loc269)
    } loc(#loc267)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc119)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc120)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc272)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc121)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc275)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc275)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc275)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc130)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc277)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc131)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc134)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc278)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc136)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc132)
                cir.yield %19 : !cir.bool loc(#loc132)
              }, false {
                %19 = cir.const #false loc(#loc132)
                cir.yield %19 : !cir.bool loc(#loc132)
              }) : (!cir.bool) -> !cir.bool loc(#loc132)
              cir.yield %18 : !cir.bool loc(#loc132)
            }, false {
              %14 = cir.const #false loc(#loc132)
              cir.yield %14 : !cir.bool loc(#loc132)
            }) : (!cir.bool) -> !cir.bool loc(#loc132)
            cir.if %13 {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc141)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc141)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc142)
            } else {
              %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc143)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc143)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc144)
            } loc(#loc279)
          } loc(#loc276)
        } loc(#loc274)
      } loc(#loc273)
    } loc(#loc271)
    cir.return loc(#loc103)
  } loc(#loc264)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc150)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc154)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc155)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc284)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc156)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc161)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc162)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc286)
      } loc(#loc285)
    } loc(#loc283)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc166)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc167)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc288)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc168)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc291)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc291)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc291)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc177)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc293)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc178)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc183)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc183)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc183)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc184)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc185)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc185)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc186)
            } loc(#loc294)
          } loc(#loc292)
        } loc(#loc290)
      } loc(#loc289)
    } loc(#loc287)
    cir.return loc(#loc146)
  } loc(#loc280)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc296)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc191)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc192)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc196)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc197)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc299)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc198)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc200)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
      } loc(#loc300)
    } loc(#loc298)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc204)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc205)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc303)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc206)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc306)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc306)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc306)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc214)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc215)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc308)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc216)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc220)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc221)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc221)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc221)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc222)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc223)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc223)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc224)
            } loc(#loc309)
          } loc(#loc307)
        } loc(#loc305)
      } loc(#loc304)
    } loc(#loc302)
    cir.return loc(#loc188)
  } loc(#loc295)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_03.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":44:27)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":22:1)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":48:1)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":24:5)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":24:9)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":26:13)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":26:12)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":26:5)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":27:5)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":31:5)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":27:8)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":27:11)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":27:9)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":28:5)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":30:16)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":30:9)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":32:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":47:5)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":32:8)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":32:11)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":32:9)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":33:5)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":34:9)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":46:9)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":35:13)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":35:34)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":38:13)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":45:13)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":38:17)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":38:25)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":38:22)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":39:13)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":41:13)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":43:13)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":40:37)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":40:30)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":40:17)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":44:17)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":180:1)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":186:1)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":182:5)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":182:14)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":183:5)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":183:14)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":184:5)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":184:14)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":185:5)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":185:14)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":68:19)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":81:27)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":55:1)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":85:1)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":57:5)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":57:9)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":59:13)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":59:12)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":59:5)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":60:5)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":64:5)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":60:8)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":60:11)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":60:9)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":61:5)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":63:16)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":63:9)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":65:5)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":84:5)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":65:8)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":65:11)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":65:9)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":66:5)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":69:5)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":71:5)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":68:9)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":72:9)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":83:9)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":73:13)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":73:34)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":75:13)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":82:13)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":75:17)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":75:25)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":75:22)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":75:27)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":75:30)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":75:38)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":75:40)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":75:35)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":76:13)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":78:13)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":80:13)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":77:37)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":77:30)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":77:17)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":81:17)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":88:1)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":113:1)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":90:5)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":90:9)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":92:13)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":92:12)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":92:5)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":93:5)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":97:5)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":93:8)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":93:11)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":93:9)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":94:5)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":96:16)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":96:9)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":98:5)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":112:5)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":98:8)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":98:11)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":98:9)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":99:5)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":100:9)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":111:9)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":101:13)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":101:34)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":103:13)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":110:13)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":103:17)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":103:25)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":103:22)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":103:27)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":103:30)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":103:38)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":103:40)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":103:35)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":104:13)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":106:13)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":108:13)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":105:37)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":105:30)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":105:17)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":109:27)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":109:17)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":116:1)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":148:1)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":118:5)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":118:9)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":120:13)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":120:12)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":120:5)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":121:5)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":131:5)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":121:8)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":121:11)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":121:9)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":122:5)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":125:5)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":127:5)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":124:19)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":124:9)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":130:16)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":130:9)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":132:5)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":147:5)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":132:8)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":132:11)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":132:9)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":133:5)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":134:9)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":146:9)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":135:13)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":135:34)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":138:13)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":145:13)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":138:17)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":138:25)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":138:22)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":139:13)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":141:13)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":143:13)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":140:37)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":140:30)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":140:17)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":144:27)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":144:17)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":151:1)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":178:1)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":153:5)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":153:9)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":155:13)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":155:12)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":155:5)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":156:5)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":161:5)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":156:8)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":156:11)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":156:9)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":157:5)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":160:16)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":160:9)
#loc202 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":162:5)
#loc203 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":177:5)
#loc204 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":162:8)
#loc205 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":162:11)
#loc206 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":162:9)
#loc207 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":163:5)
#loc208 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":164:9)
#loc209 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":176:9)
#loc210 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":165:13)
#loc211 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":165:34)
#loc212 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":168:13)
#loc213 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":175:13)
#loc214 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":168:17)
#loc215 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":168:25)
#loc216 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":168:22)
#loc217 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":169:13)
#loc218 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":171:13)
#loc219 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":173:13)
#loc220 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":170:37)
#loc221 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":170:30)
#loc222 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":170:17)
#loc223 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":174:27)
#loc224 = loc("CWE126_Buffer_Overread__CWE129_rand_03.c":174:17)
#loc225 = loc(fused[#loc1, #loc2])
#loc226 = loc(fused[#loc3, #loc4])
#loc227 = loc(fused[#loc5, #loc6])
#loc228 = loc(fused[#loc8, #loc9])
#loc229 = loc(fused[#loc10, #loc11])
#loc230 = loc(fused[#loc14, #loc12])
#loc231 = loc(fused[#loc15, #loc16])
#loc232 = loc(fused[#loc17, #loc18])
#loc233 = loc(fused[#loc20, #loc16])
#loc234 = loc(fused[#loc22, #loc21])
#loc235 = loc(fused[#loc23, #loc24])
#loc236 = loc(fused[#loc25, #loc26])
#loc237 = loc(fused[#loc28, #loc24])
#loc238 = loc(fused[#loc29, #loc30])
#loc239 = loc(fused[#loc31, #loc32])
#loc240 = loc(fused[#loc33, #loc34])
#loc241 = loc(fused[#loc35, #loc36])
#loc242 = loc(fused[#loc38, #loc39, #loc40, #loc34])
#loc243 = loc(fused[#loc45, #loc46])
#loc244 = loc(fused[#loc47, #loc48])
#loc245 = loc(fused[#loc49, #loc50])
#loc246 = loc(fused[#loc51, #loc52])
#loc247 = loc(fused[#loc53, #loc54])
#loc248 = loc(fused[#loc57, #loc58])
#loc249 = loc(fused[#loc59, #loc60])
#loc250 = loc(fused[#loc63, #loc61])
#loc251 = loc(fused[#loc64, #loc65])
#loc252 = loc(fused[#loc66, #loc67])
#loc253 = loc(fused[#loc69, #loc65])
#loc254 = loc(fused[#loc71, #loc70])
#loc255 = loc(fused[#loc72, #loc73])
#loc256 = loc(fused[#loc74, #loc75])
#loc257 = loc(fused[#loc77, #loc78, #loc79, #loc73])
#loc258 = loc(fused[#loc81, #loc82])
#loc259 = loc(fused[#loc83, #loc84])
#loc260 = loc(fused[#loc85, #loc86])
#loc261 = loc(fused[#loc87, #loc88])
#loc262 = loc(fused[#loc91, #loc93])
#loc263 = loc(fused[#loc95, #loc96, #loc97, #loc86])
#loc264 = loc(fused[#loc102, #loc103])
#loc265 = loc(fused[#loc104, #loc105])
#loc266 = loc(fused[#loc108, #loc106])
#loc267 = loc(fused[#loc109, #loc110])
#loc268 = loc(fused[#loc111, #loc112])
#loc269 = loc(fused[#loc114, #loc110])
#loc270 = loc(fused[#loc116, #loc115])
#loc271 = loc(fused[#loc117, #loc118])
#loc272 = loc(fused[#loc119, #loc120])
#loc273 = loc(fused[#loc122, #loc118])
#loc274 = loc(fused[#loc123, #loc124])
#loc275 = loc(fused[#loc125, #loc126])
#loc276 = loc(fused[#loc127, #loc128])
#loc277 = loc(fused[#loc129, #loc130])
#loc278 = loc(fused[#loc133, #loc135])
#loc279 = loc(fused[#loc137, #loc138, #loc139, #loc128])
#loc280 = loc(fused[#loc145, #loc146])
#loc281 = loc(fused[#loc147, #loc148])
#loc282 = loc(fused[#loc151, #loc149])
#loc283 = loc(fused[#loc152, #loc153])
#loc284 = loc(fused[#loc154, #loc155])
#loc285 = loc(fused[#loc157, #loc158, #loc159, #loc153])
#loc286 = loc(fused[#loc163, #loc162])
#loc287 = loc(fused[#loc164, #loc165])
#loc288 = loc(fused[#loc166, #loc167])
#loc289 = loc(fused[#loc169, #loc165])
#loc290 = loc(fused[#loc170, #loc171])
#loc291 = loc(fused[#loc172, #loc173])
#loc292 = loc(fused[#loc174, #loc175])
#loc293 = loc(fused[#loc176, #loc177])
#loc294 = loc(fused[#loc179, #loc180, #loc181, #loc175])
#loc295 = loc(fused[#loc187, #loc188])
#loc296 = loc(fused[#loc189, #loc190])
#loc297 = loc(fused[#loc193, #loc191])
#loc298 = loc(fused[#loc194, #loc195])
#loc299 = loc(fused[#loc196, #loc197])
#loc300 = loc(fused[#loc199, #loc195])
#loc301 = loc(fused[#loc201, #loc200])
#loc302 = loc(fused[#loc202, #loc203])
#loc303 = loc(fused[#loc204, #loc205])
#loc304 = loc(fused[#loc207, #loc203])
#loc305 = loc(fused[#loc208, #loc209])
#loc306 = loc(fused[#loc210, #loc211])
#loc307 = loc(fused[#loc212, #loc213])
#loc308 = loc(fused[#loc214, #loc215])
#loc309 = loc(fused[#loc217, #loc218, #loc219, #loc213])
