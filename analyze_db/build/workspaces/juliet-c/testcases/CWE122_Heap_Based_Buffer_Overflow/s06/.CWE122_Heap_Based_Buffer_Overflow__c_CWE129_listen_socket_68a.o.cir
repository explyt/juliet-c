!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc300)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc301)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc302)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc303)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc304)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc305)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc306)
  cir.func private @close(!s32i) -> !s32i loc(#loc307)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc308)
  cir.func no_proto private @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_badSink(...) loc(#loc309)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc311)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc312)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc314)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc315)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc316)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc317)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc318)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc35)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc316)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc37)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc317)
      cir.scope {
        cir.do {
          cir.scope {
            %16 = cir.const #cir.int<2> : !s32i loc(#loc44)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc45)
            %18 = cir.const #cir.int<6> : !s32i loc(#loc46)
            %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
            cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc321)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc52)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc53)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc53)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc323)
              cir.if %64 {
                cir.break loc(#loc55)
              } loc(#loc324)
            } loc(#loc322)
            %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc325)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc58)
            %22 = cir.const #cir.int<16> : !u64i loc(#loc326)
            cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc327)
            %23 = cir.const #cir.int<2> : !s32i loc(#loc63)
            %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc63)
            %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
            cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc328)
            %26 = cir.const #cir.int<0> : !s32i loc(#loc66)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc66)
            %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
            %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
            cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc329)
            %30 = cir.const #cir.int<27015> : !s32i loc(#loc70)
            %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc70)
            %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc71)
            %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
            cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc330)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc332)
              %63 = cir.const #cir.int<16> : !u64i loc(#loc333)
              %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc333)
              %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc82)
              %66 = cir.const #cir.int<1> : !s32i loc(#loc83)
              %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc83)
              %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc334)
              cir.if %68 {
                cir.break loc(#loc85)
              } loc(#loc335)
            } loc(#loc331)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %62 = cir.const #cir.int<5> : !s32i loc(#loc89)
              %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc90)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc91)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc91)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc337)
              cir.if %66 {
                cir.break loc(#loc93)
              } loc(#loc338)
            } loc(#loc336)
            %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc95)
            %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc96)
            %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc97)
            cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc339)
            cir.scope {
              %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc103)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc103)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc341)
              cir.if %64 {
                cir.break loc(#loc105)
              } loc(#loc342)
            } loc(#loc340)
            %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
            %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc107)
            %41 = cir.const #cir.int<3> : !s32i loc(#loc108)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc108)
            %43 = cir.const #cir.int<4> : !u64i loc(#loc108)
            %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc108)
            %45 = cir.const #cir.int<2> : !s32i loc(#loc108)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc108)
            %47 = cir.binop(add, %44, %46) : !u64i loc(#loc108)
            %48 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc109)
            %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc343)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc111)
            %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc111)
            cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc344)
            cir.scope {
              %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc117)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc117)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc346)
              %65 = cir.ternary(%64, true {
                %66 = cir.const #true loc(#loc118)
                cir.yield %66 : !cir.bool loc(#loc118)
              }, false {
                %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                %67 = cir.const #cir.int<0> : !s32i loc(#loc120)
                %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc347)
                %69 = cir.ternary(%68, true {
                  %70 = cir.const #true loc(#loc118)
                  cir.yield %70 : !cir.bool loc(#loc118)
                }, false {
                  %70 = cir.const #false loc(#loc118)
                  cir.yield %70 : !cir.bool loc(#loc118)
                }) : (!cir.bool) -> !cir.bool loc(#loc118)
                cir.yield %69 : !cir.bool loc(#loc118)
              }) : (!cir.bool) -> !cir.bool loc(#loc118)
              cir.if %65 {
                cir.break loc(#loc122)
              } loc(#loc348)
            } loc(#loc345)
            %54 = cir.const #cir.int<0> : !s32i loc(#loc123)
            %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc123)
            %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
            %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc125)
            cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc349)
            %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
            %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc127)
            cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc350)
          } loc(#loc320)
          cir.yield loc(#loc41)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc130)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc130)
          cir.condition(%17) loc(#loc130)
        } loc(#loc319)
      } loc(#loc319)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc134)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc134)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc352)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc136)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc137)
        } loc(#loc353)
      } loc(#loc351)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc141)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc355)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc144)
        } loc(#loc356)
      } loc(#loc354)
    } loc(#loc313)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_badData : !cir.ptr<!s32i> loc(#loc308)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    %5 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_badSink : !cir.ptr<!cir.func<(...)>> loc(#loc358)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc358)
    cir.call %6() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc147)
    cir.return loc(#loc22)
  } loc(#loc310)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc360)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc151)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc361)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc153)
    cir.return loc(#loc150)
  } loc(#loc359)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc362)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc363)
  cir.func no_proto private @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodG2BSink(...) loc(#loc364)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc366)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc166)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc367)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc168)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc368)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    %5 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodG2BData : !cir.ptr<!s32i> loc(#loc362)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc369)
    %6 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodG2BSink : !cir.ptr<!cir.func<(...)>> loc(#loc370)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc370)
    cir.call %7() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc172)
    cir.return loc(#loc162)
  } loc(#loc365)
  cir.func no_proto private @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodB2GSink(...) loc(#loc371)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc373)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc181)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc374)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc376)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc377)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc378)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc379)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc380)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc190)
      %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc190)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc378)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc192)
      %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc192)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc379)
      cir.scope {
        cir.do {
          cir.scope {
            %16 = cir.const #cir.int<2> : !s32i loc(#loc199)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc200)
            %18 = cir.const #cir.int<6> : !s32i loc(#loc201)
            %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc202)
            cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc383)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc207)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc208)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc208)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc385)
              cir.if %64 {
                cir.break loc(#loc210)
              } loc(#loc386)
            } loc(#loc384)
            %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc387)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc213)
            %22 = cir.const #cir.int<16> : !u64i loc(#loc388)
            cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc389)
            %23 = cir.const #cir.int<2> : !s32i loc(#loc218)
            %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc218)
            %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
            cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc390)
            %26 = cir.const #cir.int<0> : !s32i loc(#loc220)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc220)
            %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
            %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
            cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc391)
            %30 = cir.const #cir.int<27015> : !s32i loc(#loc222)
            %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc222)
            %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc223)
            %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
            cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc392)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc228)
              %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc394)
              %63 = cir.const #cir.int<16> : !u64i loc(#loc395)
              %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc395)
              %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc233)
              %66 = cir.const #cir.int<1> : !s32i loc(#loc234)
              %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc234)
              %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc396)
              cir.if %68 {
                cir.break loc(#loc236)
              } loc(#loc397)
            } loc(#loc393)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc239)
              %62 = cir.const #cir.int<5> : !s32i loc(#loc240)
              %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc241)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc242)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc242)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc399)
              cir.if %66 {
                cir.break loc(#loc244)
              } loc(#loc400)
            } loc(#loc398)
            %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc245)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc246)
            %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc247)
            %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc248)
            cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc401)
            cir.scope {
              %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc253)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc254)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc254)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc403)
              cir.if %64 {
                cir.break loc(#loc256)
              } loc(#loc404)
            } loc(#loc402)
            %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc257)
            %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc258)
            %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc258)
            %41 = cir.const #cir.int<3> : !s32i loc(#loc259)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc259)
            %43 = cir.const #cir.int<4> : !u64i loc(#loc259)
            %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc259)
            %45 = cir.const #cir.int<2> : !s32i loc(#loc259)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc259)
            %47 = cir.binop(add, %44, %46) : !u64i loc(#loc259)
            %48 = cir.const #cir.int<1> : !s32i loc(#loc260)
            %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc260)
            %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc405)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc261)
            %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc262)
            %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc262)
            cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc406)
            cir.scope {
              %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc267)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc268)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc268)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc408)
              %65 = cir.ternary(%64, true {
                %66 = cir.const #true loc(#loc269)
                cir.yield %66 : !cir.bool loc(#loc269)
              }, false {
                %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc270)
                %67 = cir.const #cir.int<0> : !s32i loc(#loc271)
                %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc409)
                %69 = cir.ternary(%68, true {
                  %70 = cir.const #true loc(#loc269)
                  cir.yield %70 : !cir.bool loc(#loc269)
                }, false {
                  %70 = cir.const #false loc(#loc269)
                  cir.yield %70 : !cir.bool loc(#loc269)
                }) : (!cir.bool) -> !cir.bool loc(#loc269)
                cir.yield %69 : !cir.bool loc(#loc269)
              }) : (!cir.bool) -> !cir.bool loc(#loc269)
              cir.if %65 {
                cir.break loc(#loc273)
              } loc(#loc410)
            } loc(#loc407)
            %54 = cir.const #cir.int<0> : !s32i loc(#loc274)
            %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc274)
            %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc275)
            %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc276)
            %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc276)
            cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc411)
            %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc277)
            %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc278)
            cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc412)
          } loc(#loc382)
          cir.yield loc(#loc196)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc281)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc281)
          cir.condition(%17) loc(#loc281)
        } loc(#loc381)
      } loc(#loc381)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc284)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc285)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc285)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc414)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc287)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc288)
        } loc(#loc415)
      } loc(#loc413)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc291)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc292)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc292)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc417)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc294)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc295)
        } loc(#loc418)
      } loc(#loc416)
    } loc(#loc375)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc296)
    %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodB2GData : !cir.ptr<!s32i> loc(#loc363)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc419)
    %5 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodB2GSink : !cir.ptr<!cir.func<(...)>> loc(#loc420)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc420)
    cir.call %6() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc298)
    cir.return loc(#loc177)
  } loc(#loc372)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":42:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":42:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":49:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":49:76)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":51:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":127:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":53:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":53:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":55:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":55:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":55:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":56:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":124:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":61:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":61:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":62:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":62:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":63:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":63:31)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":64:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":64:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":65:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":65:41)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":66:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":109:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":67:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":108:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":76:35)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":76:44)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":76:57)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":76:28)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":76:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":76:68)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":77:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":80:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":77:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":77:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":78:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":79:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":81:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":81:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":81:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":81:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":81:47)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":81:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":81:48)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":82:34)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":82:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":83:39)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":83:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":84:38)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":84:32)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":84:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":84:46)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":85:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":88:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":85:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":85:54)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":85:55)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":85:64)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":85:78)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":85:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":85:84)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":86:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":87:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":89:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":92:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":89:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":89:38)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":89:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":89:57)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":90:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":91:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":93:35)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":93:49)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":93:55)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":93:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":93:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":93:59)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":94:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":97:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":94:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":94:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":95:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":96:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":99:31)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":99:45)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":99:58)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":99:76)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":99:79)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":99:26)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":99:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":99:80)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":100:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":103:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":100:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":100:31)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":100:44)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":100:47)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":100:61)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":101:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":102:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":105:39)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":105:25)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":105:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":107:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":107:20)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":107:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":107:36)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":109:16)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":110:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":113:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":110:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":110:29)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":111:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":112:26)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":112:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":114:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":117:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":114:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":114:29)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":115:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":116:26)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":116:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":125:76)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":125:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":126:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":126:75)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":229:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":233:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":231:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":231:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":232:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":232:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":43:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":43:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":44:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":44:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":134:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":134:80)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":138:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":148:1)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":140:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":140:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":142:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":142:12)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":142:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":145:12)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":145:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":146:80)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":146:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":147:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":147:79)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":135:1)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":135:80)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":151:1)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":227:1)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":153:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":153:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":155:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":155:12)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":155:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":156:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":224:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":161:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":161:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":162:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":162:28)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":163:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":163:31)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":164:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":164:31)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":165:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":165:41)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":166:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":209:17)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":167:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":208:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":176:35)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":176:44)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":176:57)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":176:28)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":176:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":176:68)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":177:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":180:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":177:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":177:33)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":178:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":179:17)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":181:20)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":181:21)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":181:30)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":181:33)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":181:47)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":181:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":181:48)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":182:34)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":182:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":183:39)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":183:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":184:38)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":184:32)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":184:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":184:46)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":185:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":188:13)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":185:22)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":185:54)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":185:55)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":185:64)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":185:78)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":185:17)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":185:84)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":186:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":187:17)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":189:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":192:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":189:24)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":189:38)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":189:17)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":189:57)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":190:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":191:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":193:35)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":193:49)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":193:55)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":193:28)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":193:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":193:59)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":194:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":197:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":194:17)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":194:33)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":195:13)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":196:17)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":199:31)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":199:45)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":199:58)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":199:76)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":199:79)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":199:26)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":199:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":199:80)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":200:13)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":203:13)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":200:17)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":200:31)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":200:44)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":200:47)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":200:61)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":201:13)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":202:17)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":205:39)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":205:25)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":205:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":207:25)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":207:20)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":207:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":207:36)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":209:16)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":210:9)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":213:9)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":210:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":210:29)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":211:9)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":212:26)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":212:13)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":214:9)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":217:9)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":214:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":214:29)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":215:9)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":216:26)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":216:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":225:80)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":225:5)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":226:5)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c":226:79)
#loc300 = loc(fused[#loc1, #loc2])
#loc301 = loc(fused[#loc3, #loc4])
#loc302 = loc(fused[#loc5, #loc6])
#loc303 = loc(fused[#loc7, #loc8])
#loc304 = loc(fused[#loc9, #loc10])
#loc305 = loc(fused[#loc11, #loc12])
#loc306 = loc(fused[#loc13, #loc14])
#loc307 = loc(fused[#loc15, #loc16])
#loc308 = loc(fused[#loc17, #loc18])
#loc309 = loc(fused[#loc19, #loc20])
#loc310 = loc(fused[#loc21, #loc22])
#loc311 = loc(fused[#loc23, #loc24])
#loc312 = loc(fused[#loc27, #loc25])
#loc313 = loc(fused[#loc28, #loc29])
#loc314 = loc(fused[#loc30, #loc31])
#loc315 = loc(fused[#loc32, #loc33])
#loc316 = loc(fused[#loc34, #loc35])
#loc317 = loc(fused[#loc36, #loc37])
#loc318 = loc(fused[#loc38, #loc39])
#loc319 = loc(fused[#loc40, #loc41])
#loc320 = loc(fused[#loc42, #loc43])
#loc321 = loc(fused[#loc48, #loc49])
#loc322 = loc(fused[#loc50, #loc51])
#loc323 = loc(fused[#loc52, #loc53])
#loc324 = loc(fused[#loc54, #loc51])
#loc325 = loc(fused[#loc56, #loc57])
#loc326 = loc(fused[#loc59, #loc60])
#loc327 = loc(fused[#loc61, #loc62])
#loc328 = loc(fused[#loc65, #loc63])
#loc329 = loc(fused[#loc69, #loc66])
#loc330 = loc(fused[#loc73, #loc74])
#loc331 = loc(fused[#loc75, #loc76])
#loc332 = loc(fused[#loc78, #loc79])
#loc333 = loc(fused[#loc80, #loc81])
#loc334 = loc(fused[#loc82, #loc83])
#loc335 = loc(fused[#loc84, #loc76])
#loc336 = loc(fused[#loc86, #loc87])
#loc337 = loc(fused[#loc90, #loc91])
#loc338 = loc(fused[#loc92, #loc87])
#loc339 = loc(fused[#loc98, #loc99])
#loc340 = loc(fused[#loc100, #loc101])
#loc341 = loc(fused[#loc102, #loc103])
#loc342 = loc(fused[#loc104, #loc101])
#loc343 = loc(fused[#loc108, #loc109])
#loc344 = loc(fused[#loc112, #loc113])
#loc345 = loc(fused[#loc114, #loc115])
#loc346 = loc(fused[#loc116, #loc117])
#loc347 = loc(fused[#loc119, #loc120])
#loc348 = loc(fused[#loc121, #loc115])
#loc349 = loc(fused[#loc125, #loc123])
#loc350 = loc(fused[#loc128, #loc129])
#loc351 = loc(fused[#loc131, #loc132])
#loc352 = loc(fused[#loc133, #loc134])
#loc353 = loc(fused[#loc135, #loc132])
#loc354 = loc(fused[#loc138, #loc139])
#loc355 = loc(fused[#loc140, #loc141])
#loc356 = loc(fused[#loc142, #loc139])
#loc357 = loc(fused[#loc146, #loc145])
#loc358 = loc(fused[#loc147, #loc148])
#loc359 = loc(fused[#loc149, #loc150])
#loc360 = loc(fused[#loc151, #loc152])
#loc361 = loc(fused[#loc153, #loc154])
#loc362 = loc(fused[#loc155, #loc156])
#loc363 = loc(fused[#loc157, #loc158])
#loc364 = loc(fused[#loc159, #loc160])
#loc365 = loc(fused[#loc161, #loc162])
#loc366 = loc(fused[#loc163, #loc164])
#loc367 = loc(fused[#loc167, #loc165])
#loc368 = loc(fused[#loc169, #loc168])
#loc369 = loc(fused[#loc171, #loc170])
#loc370 = loc(fused[#loc172, #loc173])
#loc371 = loc(fused[#loc174, #loc175])
#loc372 = loc(fused[#loc176, #loc177])
#loc373 = loc(fused[#loc178, #loc179])
#loc374 = loc(fused[#loc182, #loc180])
#loc375 = loc(fused[#loc183, #loc184])
#loc376 = loc(fused[#loc185, #loc186])
#loc377 = loc(fused[#loc187, #loc188])
#loc378 = loc(fused[#loc189, #loc190])
#loc379 = loc(fused[#loc191, #loc192])
#loc380 = loc(fused[#loc193, #loc194])
#loc381 = loc(fused[#loc195, #loc196])
#loc382 = loc(fused[#loc197, #loc198])
#loc383 = loc(fused[#loc203, #loc204])
#loc384 = loc(fused[#loc205, #loc206])
#loc385 = loc(fused[#loc207, #loc208])
#loc386 = loc(fused[#loc209, #loc206])
#loc387 = loc(fused[#loc211, #loc212])
#loc388 = loc(fused[#loc214, #loc215])
#loc389 = loc(fused[#loc216, #loc217])
#loc390 = loc(fused[#loc219, #loc218])
#loc391 = loc(fused[#loc221, #loc220])
#loc392 = loc(fused[#loc224, #loc225])
#loc393 = loc(fused[#loc226, #loc227])
#loc394 = loc(fused[#loc229, #loc230])
#loc395 = loc(fused[#loc231, #loc232])
#loc396 = loc(fused[#loc233, #loc234])
#loc397 = loc(fused[#loc235, #loc227])
#loc398 = loc(fused[#loc237, #loc238])
#loc399 = loc(fused[#loc241, #loc242])
#loc400 = loc(fused[#loc243, #loc238])
#loc401 = loc(fused[#loc249, #loc250])
#loc402 = loc(fused[#loc251, #loc252])
#loc403 = loc(fused[#loc253, #loc254])
#loc404 = loc(fused[#loc255, #loc252])
#loc405 = loc(fused[#loc259, #loc260])
#loc406 = loc(fused[#loc263, #loc264])
#loc407 = loc(fused[#loc265, #loc266])
#loc408 = loc(fused[#loc267, #loc268])
#loc409 = loc(fused[#loc270, #loc271])
#loc410 = loc(fused[#loc272, #loc266])
#loc411 = loc(fused[#loc276, #loc274])
#loc412 = loc(fused[#loc279, #loc280])
#loc413 = loc(fused[#loc282, #loc283])
#loc414 = loc(fused[#loc284, #loc285])
#loc415 = loc(fused[#loc286, #loc283])
#loc416 = loc(fused[#loc289, #loc290])
#loc417 = loc(fused[#loc291, #loc292])
#loc418 = loc(fused[#loc293, #loc290])
#loc419 = loc(fused[#loc297, #loc296])
#loc420 = loc(fused[#loc298, #loc299])
