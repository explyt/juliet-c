!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc145 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":246:10)
#loc146 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":246:14)
#loc147 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":246:20)
#loc148 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":246:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc355 = loc(fused[#loc145, #loc146])
#loc356 = loc(fused[#loc147, #loc148])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc301)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc302)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc303)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc304)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc305)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc306)
  cir.func private @close(!s32i) -> !s32i loc(#loc307)
  cir.func private @printIntLine(!s32i) loc(#loc308)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc310)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc22)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc311)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc26)
        cir.condition(%3) loc(#loc26)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc314)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc315)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc316)
          %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc317)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc34)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc316)
          cir.scope {
            cir.do {
              %8 = cir.const #cir.int<2> : !s32i loc(#loc39)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc40)
              %10 = cir.const #cir.int<6> : !s32i loc(#loc41)
              %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc42)
              cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc319)
              cir.scope {
                %45 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc47)
                %46 = cir.const #cir.int<1> : !s32i loc(#loc48)
                %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc48)
                %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc321)
                cir.if %48 {
                  cir.break loc(#loc50)
                } loc(#loc322)
              } loc(#loc320)
              %12 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc323)
              %13 = cir.const #cir.int<0> : !s32i loc(#loc53)
              %14 = cir.const #cir.int<16> : !u64i loc(#loc324)
              cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc325)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc58)
              %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc58)
              %17 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
              cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc326)
              %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
              %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc61)
              %21 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
              %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
              cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc327)
              %23 = cir.const #cir.int<27015> : !s32i loc(#loc66)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc66)
              %25 = cir.call @htons(%24) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc67)
              %26 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
              cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc328)
              cir.scope {
                %45 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc73)
                %46 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc330)
                %47 = cir.const #cir.int<16> : !u64i loc(#loc331)
                %48 = cir.cast(integral, %47 : !u64i), !u32i loc(#loc331)
                %49 = cir.call @connect(%45, %46, %48) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc78)
                %50 = cir.const #cir.int<1> : !s32i loc(#loc79)
                %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc79)
                %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc332)
                cir.if %52 {
                  cir.break loc(#loc81)
                } loc(#loc333)
              } loc(#loc329)
              %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %28 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc83)
              %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
              %30 = cir.const #cir.int<20> : !s32i loc(#loc84)
              %31 = cir.const #cir.int<1> : !s32i loc(#loc85)
              %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc84)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc84)
              %34 = cir.const #cir.int<0> : !s32i loc(#loc86)
              %35 = cir.call @recv(%27, %29, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc87)
              %36 = cir.cast(integral, %35 : !s64i), !s32i loc(#loc87)
              cir.store %36, %2 : !s32i, !cir.ptr<!s32i> loc(#loc334)
              cir.scope {
                %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                %46 = cir.const #cir.int<1> : !s32i loc(#loc93)
                %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc93)
                %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc336)
                %49 = cir.ternary(%48, true {
                  %50 = cir.const #true loc(#loc94)
                  cir.yield %50 : !cir.bool loc(#loc94)
                }, false {
                  %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %51 = cir.const #cir.int<0> : !s32i loc(#loc96)
                  %52 = cir.cmp(eq, %50, %51) : !s32i, !cir.bool loc(#loc337)
                  %53 = cir.ternary(%52, true {
                    %54 = cir.const #true loc(#loc94)
                    cir.yield %54 : !cir.bool loc(#loc94)
                  }, false {
                    %54 = cir.const #false loc(#loc94)
                    cir.yield %54 : !cir.bool loc(#loc94)
                  }) : (!cir.bool) -> !cir.bool loc(#loc94)
                  cir.yield %53 : !cir.bool loc(#loc94)
                }) : (!cir.bool) -> !cir.bool loc(#loc94)
                cir.if %49 {
                  cir.break loc(#loc98)
                } loc(#loc338)
              } loc(#loc335)
              %37 = cir.const #cir.int<0> : !s32i loc(#loc99)
              %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc99)
              %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %40 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc101)
              %41 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %39 : !s32i), !cir.ptr<!s8i> loc(#loc101)
              cir.store %38, %41 : !s8i, !cir.ptr<!s8i> loc(#loc339)
              %42 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc102)
              %43 = cir.call @atof(%42) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc103)
              %44 = cir.cast(floating, %43 : !cir.double), !cir.float loc(#loc103)
              cir.store %44, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc340)
              cir.yield loc(#loc38)
            } while {
              %8 = cir.const #cir.int<0> : !s32i loc(#loc106)
              %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc106)
              cir.condition(%9) loc(#loc106)
            } loc(#loc318)
          } loc(#loc318)
          cir.scope {
            %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc110)
            %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc342)
            cir.if %11 {
              %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc113)
            } loc(#loc343)
          } loc(#loc341)
        } loc(#loc313)
        cir.break loc(#loc114)
      } loc(#loc312)
    } loc(#loc312)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc117)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc117)
        cir.condition(%3) loc(#loc117)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc346)
          %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc122)
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc123)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc123)
          %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc347)
          %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc347)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc346)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc125)
        } loc(#loc345)
        cir.break loc(#loc126)
      } loc(#loc344)
    } loc(#loc344)
    cir.return loc(#loc19)
  } loc(#loc309)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc349)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc129)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc350)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc131)
    cir.return loc(#loc128)
  } loc(#loc348)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc351)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc352)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc353)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc142)
  cir.func @main(%arg0: !s32i loc(fused[#loc145, #loc146]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc147, #loc148])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc355)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc356)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc144)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc149)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc150)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc151)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc151)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc152)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc139)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc139)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_connect_socket_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc357)
    cir.call @CWE369_Divide_by_Zero__float_connect_socket_16_good() : () -> () loc(#loc154)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc140)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc141)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc141)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc157)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_connect_socket_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc358)
    cir.call @CWE369_Divide_by_Zero__float_connect_socket_16_bad() : () -> () loc(#loc158)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc142)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc142)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc160)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc161)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc359)
    cir.return %17 : !s32i loc(#loc359)
  } loc(#loc354)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc163)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc361)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc168)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc362)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc172)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc172)
        cir.condition(%3) loc(#loc172)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc365)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc366)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc367)
          %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc368)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc180)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc180)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc367)
          cir.scope {
            cir.do {
              %8 = cir.const #cir.int<2> : !s32i loc(#loc185)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc186)
              %10 = cir.const #cir.int<6> : !s32i loc(#loc187)
              %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc188)
              cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc370)
              cir.scope {
                %45 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc193)
                %46 = cir.const #cir.int<1> : !s32i loc(#loc194)
                %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc194)
                %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc372)
                cir.if %48 {
                  cir.break loc(#loc196)
                } loc(#loc373)
              } loc(#loc371)
              %12 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc374)
              %13 = cir.const #cir.int<0> : !s32i loc(#loc199)
              %14 = cir.const #cir.int<16> : !u64i loc(#loc375)
              cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc376)
              %15 = cir.const #cir.int<2> : !s32i loc(#loc204)
              %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc204)
              %17 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
              cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc377)
              %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc206)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc206)
              %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc207)
              %21 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
              %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
              cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc378)
              %23 = cir.const #cir.int<27015> : !s32i loc(#loc210)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc210)
              %25 = cir.call @htons(%24) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc211)
              %26 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
              cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc379)
              cir.scope {
                %45 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc216)
                %46 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc381)
                %47 = cir.const #cir.int<16> : !u64i loc(#loc382)
                %48 = cir.cast(integral, %47 : !u64i), !u32i loc(#loc382)
                %49 = cir.call @connect(%45, %46, %48) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc221)
                %50 = cir.const #cir.int<1> : !s32i loc(#loc222)
                %51 = cir.unary(minus, %50) : !s32i, !s32i loc(#loc222)
                %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc383)
                cir.if %52 {
                  cir.break loc(#loc224)
                } loc(#loc384)
              } loc(#loc380)
              %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc225)
              %28 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc226)
              %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc226)
              %30 = cir.const #cir.int<20> : !s32i loc(#loc227)
              %31 = cir.const #cir.int<1> : !s32i loc(#loc228)
              %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc227)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc227)
              %34 = cir.const #cir.int<0> : !s32i loc(#loc229)
              %35 = cir.call @recv(%27, %29, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc230)
              %36 = cir.cast(integral, %35 : !s64i), !s32i loc(#loc230)
              cir.store %36, %2 : !s32i, !cir.ptr<!s32i> loc(#loc385)
              cir.scope {
                %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc235)
                %46 = cir.const #cir.int<1> : !s32i loc(#loc236)
                %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc236)
                %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc387)
                %49 = cir.ternary(%48, true {
                  %50 = cir.const #true loc(#loc237)
                  cir.yield %50 : !cir.bool loc(#loc237)
                }, false {
                  %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                  %51 = cir.const #cir.int<0> : !s32i loc(#loc239)
                  %52 = cir.cmp(eq, %50, %51) : !s32i, !cir.bool loc(#loc388)
                  %53 = cir.ternary(%52, true {
                    %54 = cir.const #true loc(#loc237)
                    cir.yield %54 : !cir.bool loc(#loc237)
                  }, false {
                    %54 = cir.const #false loc(#loc237)
                    cir.yield %54 : !cir.bool loc(#loc237)
                  }) : (!cir.bool) -> !cir.bool loc(#loc237)
                  cir.yield %53 : !cir.bool loc(#loc237)
                }) : (!cir.bool) -> !cir.bool loc(#loc237)
                cir.if %49 {
                  cir.break loc(#loc241)
                } loc(#loc389)
              } loc(#loc386)
              %37 = cir.const #cir.int<0> : !s32i loc(#loc242)
              %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc242)
              %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc243)
              %40 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc244)
              %41 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %39 : !s32i), !cir.ptr<!s8i> loc(#loc244)
              cir.store %38, %41 : !s8i, !cir.ptr<!s8i> loc(#loc390)
              %42 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc245)
              %43 = cir.call @atof(%42) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc246)
              %44 = cir.cast(floating, %43 : !cir.double), !cir.float loc(#loc246)
              cir.store %44, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc391)
              cir.yield loc(#loc184)
            } while {
              %8 = cir.const #cir.int<0> : !s32i loc(#loc249)
              %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc249)
              cir.condition(%9) loc(#loc249)
            } loc(#loc369)
          } loc(#loc369)
          cir.scope {
            %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc252)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc253)
            %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc253)
            %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc393)
            cir.if %11 {
              %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc255)
              %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc256)
            } loc(#loc394)
          } loc(#loc392)
        } loc(#loc364)
        cir.break loc(#loc257)
      } loc(#loc363)
    } loc(#loc363)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc260)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc260)
        cir.condition(%3) loc(#loc260)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc263)
          %3 = cir.cast(floating, %2 : !cir.float), !cir.double loc(#loc263)
          %4 = cir.fabs %3 : !cir.double loc(#loc263)
          %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc264)
          %6 = cir.cmp(gt, %4, %5) : !cir.double, !cir.bool loc(#loc397)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc399)
            %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc271)
            %9 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc272)
            %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc272)
            %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc400)
            %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc400)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc399)
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc273)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc274)
          } else {
            %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc163)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc163)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc275)
          } loc(#loc398)
        } loc(#loc396)
        cir.break loc(#loc276)
      } loc(#loc395)
    } loc(#loc395)
    cir.return loc(#loc165)
  } loc(#loc360)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc402)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc281)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc403)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc285)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc285)
        cir.condition(%3) loc(#loc285)
      } do {
        %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc286)
        cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc405)
        cir.break loc(#loc288)
      } loc(#loc404)
    } loc(#loc404)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc291)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc291)
        cir.condition(%3) loc(#loc291)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc408)
          %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc296)
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc297)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc297)
          %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc409)
          %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc409)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc408)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc298)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc299)
        } loc(#loc407)
        cir.break loc(#loc300)
      } loc(#loc406)
    } loc(#loc406)
    cir.return loc(#loc278)
  } loc(#loc401)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_16.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":78:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":102:1)
#loc13 = loc("/usr/include/stdlib.h":103:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":46:1)
#loc19 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":120:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":48:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":48:11)
#loc22 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":50:12)
#loc23 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":50:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":51:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":110:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":51:11)
#loc27 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":53:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":108:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":58:13)
#loc30 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":58:17)
#loc31 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":59:13)
#loc32 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":59:32)
#loc33 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":60:13)
#loc34 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":60:36)
#loc35 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":61:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":61:45)
#loc37 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":62:13)
#loc38 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":97:21)
#loc39 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":71:40)
#loc40 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":71:49)
#loc41 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":71:62)
#loc42 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":71:33)
#loc43 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":71:17)
#loc44 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":71:73)
#loc45 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":72:17)
#loc46 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":75:17)
#loc47 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":72:21)
#loc48 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":72:38)
#loc49 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":73:17)
#loc50 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":74:21)
#loc51 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":76:24)
#loc52 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":76:25)
#loc53 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":76:34)
#loc54 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":76:37)
#loc55 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":76:51)
#loc56 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":76:17)
#loc57 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":76:52)
#loc58 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":77:38)
#loc59 = loc("/usr/include/netinet/in.h":249:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":77:17)
#loc61 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":78:43)
#loc62 = loc("/usr/include/netinet/in.h":251:20)
#loc63 = loc("/usr/include/netinet/in.h":33:15)
#loc64 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":78:17)
#loc65 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":78:63)
#loc66 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":79:42)
#loc67 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":79:36)
#loc68 = loc("/usr/include/netinet/in.h":250:15)
#loc69 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":79:17)
#loc70 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":79:50)
#loc71 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":80:17)
#loc72 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":83:17)
#loc73 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":80:29)
#loc74 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":80:62)
#loc75 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":80:63)
#loc76 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":80:72)
#loc77 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":80:86)
#loc78 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":80:21)
#loc79 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":80:92)
#loc80 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":81:17)
#loc81 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":82:21)
#loc82 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":87:35)
#loc83 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":87:50)
#loc84 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":87:63)
#loc85 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":87:81)
#loc86 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":87:84)
#loc87 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":87:30)
#loc88 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":87:17)
#loc89 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":87:85)
#loc90 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":88:17)
#loc91 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":91:17)
#loc92 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":88:21)
#loc93 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":88:35)
#loc94 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":88:48)
#loc95 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":88:51)
#loc96 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":88:65)
#loc97 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":89:17)
#loc98 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":90:21)
#loc99 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":93:43)
#loc100 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":93:29)
#loc101 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":93:17)
#loc102 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":95:36)
#loc103 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":95:31)
#loc104 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":95:17)
#loc105 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":95:47)
#loc106 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":97:20)
#loc107 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":98:13)
#loc108 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":101:13)
#loc109 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":98:17)
#loc110 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":98:34)
#loc111 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":99:13)
#loc112 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":100:30)
#loc113 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":100:17)
#loc114 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":109:9)
#loc115 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":111:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":119:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":111:11)
#loc118 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":113:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":117:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":115:13)
#loc121 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":115:44)
#loc122 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":115:32)
#loc123 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":115:40)
#loc124 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":116:26)
#loc125 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":116:13)
#loc126 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":118:9)
#loc127 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":231:1)
#loc128 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":235:1)
#loc129 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":233:5)
#loc130 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":233:13)
#loc131 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":234:5)
#loc132 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":234:13)
#loc133 = loc("/usr/include/stdlib.h":575:1)
#loc134 = loc("/usr/include/stdlib.h":575:41)
#loc135 = loc("/usr/include/time.h":76:1)
#loc136 = loc("/usr/include/time.h":76:38)
#loc137 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc138 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc139 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":251:15)
#loc140 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":253:15)
#loc141 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":256:15)
#loc142 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":258:15)
#loc143 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":246:1)
#loc144 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":261:1)
#loc149 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":247:1)
#loc150 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":249:27)
#loc151 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":249:22)
#loc152 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":249:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":251:5)
#loc154 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":252:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":252:57)
#loc156 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":253:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":256:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":257:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":257:56)
#loc160 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":258:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":260:12)
#loc162 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":260:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":202:23)
#loc164 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":127:1)
#loc165 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":206:1)
#loc166 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":129:5)
#loc167 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":129:11)
#loc168 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":131:12)
#loc169 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":131:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":132:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":191:5)
#loc172 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":132:11)
#loc173 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":134:9)
#loc174 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":189:9)
#loc175 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":139:13)
#loc176 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":139:17)
#loc177 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":140:13)
#loc178 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":140:32)
#loc179 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":141:13)
#loc180 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":141:36)
#loc181 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":142:13)
#loc182 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":142:45)
#loc183 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":143:13)
#loc184 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":178:21)
#loc185 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":152:40)
#loc186 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":152:49)
#loc187 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":152:62)
#loc188 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":152:33)
#loc189 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":152:17)
#loc190 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":152:73)
#loc191 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":153:17)
#loc192 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":156:17)
#loc193 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":153:21)
#loc194 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":153:38)
#loc195 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":154:17)
#loc196 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":155:21)
#loc197 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":157:24)
#loc198 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":157:25)
#loc199 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":157:34)
#loc200 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":157:37)
#loc201 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":157:51)
#loc202 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":157:17)
#loc203 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":157:52)
#loc204 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":158:38)
#loc205 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":158:17)
#loc206 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":159:53)
#loc207 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":159:43)
#loc208 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":159:17)
#loc209 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":159:63)
#loc210 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":160:42)
#loc211 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":160:36)
#loc212 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":160:17)
#loc213 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":160:50)
#loc214 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":161:17)
#loc215 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":164:17)
#loc216 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":161:29)
#loc217 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":161:62)
#loc218 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":161:63)
#loc219 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":161:72)
#loc220 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":161:86)
#loc221 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":161:21)
#loc222 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":161:92)
#loc223 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":162:17)
#loc224 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":163:21)
#loc225 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":168:35)
#loc226 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":168:50)
#loc227 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":168:63)
#loc228 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":168:81)
#loc229 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":168:84)
#loc230 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":168:30)
#loc231 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":168:17)
#loc232 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":168:85)
#loc233 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":169:17)
#loc234 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":172:17)
#loc235 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":169:21)
#loc236 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":169:35)
#loc237 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":169:48)
#loc238 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":169:51)
#loc239 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":169:65)
#loc240 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":170:17)
#loc241 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":171:21)
#loc242 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":174:43)
#loc243 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":174:29)
#loc244 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":174:17)
#loc245 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":176:36)
#loc246 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":176:31)
#loc247 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":176:17)
#loc248 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":176:47)
#loc249 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":178:20)
#loc250 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":179:13)
#loc251 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":182:13)
#loc252 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":179:17)
#loc253 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":179:34)
#loc254 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":180:13)
#loc255 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":181:30)
#loc256 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":181:17)
#loc257 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":190:9)
#loc258 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":192:5)
#loc259 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":205:5)
#loc260 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":192:11)
#loc261 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":195:9)
#loc262 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":203:9)
#loc263 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":195:17)
#loc264 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":195:25)
#loc265 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":195:12)
#loc266 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":196:9)
#loc267 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":199:9)
#loc268 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":201:9)
#loc269 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":197:13)
#loc270 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":197:44)
#loc271 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":197:32)
#loc272 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":197:40)
#loc273 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":198:26)
#loc274 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":198:13)
#loc275 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":202:13)
#loc276 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":204:9)
#loc277 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":209:1)
#loc278 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":229:1)
#loc279 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":211:5)
#loc280 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":211:11)
#loc281 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":213:12)
#loc282 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":213:5)
#loc283 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":214:5)
#loc284 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":219:5)
#loc285 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":214:11)
#loc286 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":217:16)
#loc287 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":217:9)
#loc288 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":218:9)
#loc289 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":220:5)
#loc290 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":228:5)
#loc291 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":220:11)
#loc292 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":222:9)
#loc293 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":226:9)
#loc294 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":224:13)
#loc295 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":224:44)
#loc296 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":224:32)
#loc297 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":224:40)
#loc298 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":225:26)
#loc299 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":225:13)
#loc300 = loc("CWE369_Divide_by_Zero__float_connect_socket_16.c":227:9)
#loc301 = loc(fused[#loc1, #loc2])
#loc302 = loc(fused[#loc3, #loc4])
#loc303 = loc(fused[#loc6, #loc7])
#loc304 = loc(fused[#loc8, #loc9])
#loc305 = loc(fused[#loc10, #loc11])
#loc306 = loc(fused[#loc12, #loc13])
#loc307 = loc(fused[#loc14, #loc15])
#loc308 = loc(fused[#loc16, #loc17])
#loc309 = loc(fused[#loc18, #loc19])
#loc310 = loc(fused[#loc20, #loc21])
#loc311 = loc(fused[#loc23, #loc22])
#loc312 = loc(fused[#loc24, #loc25])
#loc313 = loc(fused[#loc27, #loc28])
#loc314 = loc(fused[#loc29, #loc30])
#loc315 = loc(fused[#loc31, #loc32])
#loc316 = loc(fused[#loc33, #loc34])
#loc317 = loc(fused[#loc35, #loc36])
#loc318 = loc(fused[#loc37, #loc38])
#loc319 = loc(fused[#loc43, #loc44])
#loc320 = loc(fused[#loc45, #loc46])
#loc321 = loc(fused[#loc47, #loc48])
#loc322 = loc(fused[#loc49, #loc46])
#loc323 = loc(fused[#loc51, #loc52])
#loc324 = loc(fused[#loc54, #loc55])
#loc325 = loc(fused[#loc56, #loc57])
#loc326 = loc(fused[#loc60, #loc58])
#loc327 = loc(fused[#loc64, #loc65])
#loc328 = loc(fused[#loc69, #loc70])
#loc329 = loc(fused[#loc71, #loc72])
#loc330 = loc(fused[#loc74, #loc75])
#loc331 = loc(fused[#loc76, #loc77])
#loc332 = loc(fused[#loc78, #loc79])
#loc333 = loc(fused[#loc80, #loc72])
#loc334 = loc(fused[#loc88, #loc89])
#loc335 = loc(fused[#loc90, #loc91])
#loc336 = loc(fused[#loc92, #loc93])
#loc337 = loc(fused[#loc95, #loc96])
#loc338 = loc(fused[#loc97, #loc91])
#loc339 = loc(fused[#loc101, #loc99])
#loc340 = loc(fused[#loc104, #loc105])
#loc341 = loc(fused[#loc107, #loc108])
#loc342 = loc(fused[#loc109, #loc110])
#loc343 = loc(fused[#loc111, #loc108])
#loc344 = loc(fused[#loc115, #loc116])
#loc345 = loc(fused[#loc118, #loc119])
#loc346 = loc(fused[#loc120, #loc121])
#loc347 = loc(fused[#loc122, #loc123])
#loc348 = loc(fused[#loc127, #loc128])
#loc349 = loc(fused[#loc129, #loc130])
#loc350 = loc(fused[#loc131, #loc132])
#loc351 = loc(fused[#loc133, #loc134])
#loc352 = loc(fused[#loc135, #loc136])
#loc353 = loc(fused[#loc137, #loc138])
#loc354 = loc(fused[#loc143, #loc144])
#loc357 = loc(fused[#loc154, #loc155])
#loc358 = loc(fused[#loc158, #loc159])
#loc359 = loc(fused[#loc162, #loc161])
#loc360 = loc(fused[#loc164, #loc165])
#loc361 = loc(fused[#loc166, #loc167])
#loc362 = loc(fused[#loc169, #loc168])
#loc363 = loc(fused[#loc170, #loc171])
#loc364 = loc(fused[#loc173, #loc174])
#loc365 = loc(fused[#loc175, #loc176])
#loc366 = loc(fused[#loc177, #loc178])
#loc367 = loc(fused[#loc179, #loc180])
#loc368 = loc(fused[#loc181, #loc182])
#loc369 = loc(fused[#loc183, #loc184])
#loc370 = loc(fused[#loc189, #loc190])
#loc371 = loc(fused[#loc191, #loc192])
#loc372 = loc(fused[#loc193, #loc194])
#loc373 = loc(fused[#loc195, #loc192])
#loc374 = loc(fused[#loc197, #loc198])
#loc375 = loc(fused[#loc200, #loc201])
#loc376 = loc(fused[#loc202, #loc203])
#loc377 = loc(fused[#loc205, #loc204])
#loc378 = loc(fused[#loc208, #loc209])
#loc379 = loc(fused[#loc212, #loc213])
#loc380 = loc(fused[#loc214, #loc215])
#loc381 = loc(fused[#loc217, #loc218])
#loc382 = loc(fused[#loc219, #loc220])
#loc383 = loc(fused[#loc221, #loc222])
#loc384 = loc(fused[#loc223, #loc215])
#loc385 = loc(fused[#loc231, #loc232])
#loc386 = loc(fused[#loc233, #loc234])
#loc387 = loc(fused[#loc235, #loc236])
#loc388 = loc(fused[#loc238, #loc239])
#loc389 = loc(fused[#loc240, #loc234])
#loc390 = loc(fused[#loc244, #loc242])
#loc391 = loc(fused[#loc247, #loc248])
#loc392 = loc(fused[#loc250, #loc251])
#loc393 = loc(fused[#loc252, #loc253])
#loc394 = loc(fused[#loc254, #loc251])
#loc395 = loc(fused[#loc258, #loc259])
#loc396 = loc(fused[#loc261, #loc262])
#loc397 = loc(fused[#loc265, #loc264])
#loc398 = loc(fused[#loc266, #loc267, #loc268, #loc262])
#loc399 = loc(fused[#loc269, #loc270])
#loc400 = loc(fused[#loc271, #loc272])
#loc401 = loc(fused[#loc277, #loc278])
#loc402 = loc(fused[#loc279, #loc280])
#loc403 = loc(fused[#loc282, #loc281])
#loc404 = loc(fused[#loc283, #loc284])
#loc405 = loc(fused[#loc287, #loc286])
#loc406 = loc(fused[#loc289, #loc290])
#loc407 = loc(fused[#loc292, #loc293])
#loc408 = loc(fused[#loc294, #loc295])
#loc409 = loc(fused[#loc296, #loc297])
