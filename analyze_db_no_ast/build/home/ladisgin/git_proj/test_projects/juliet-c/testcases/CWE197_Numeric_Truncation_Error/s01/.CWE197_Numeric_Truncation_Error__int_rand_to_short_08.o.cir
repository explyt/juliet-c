!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc87)
  cir.func private  @printShortLine(!s16i) loc(#loc88)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_short_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc93)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc14)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc14)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
          cir.yield %23 : !u32i loc(#loc17)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc17)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc17)
          cir.yield %27 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc17)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
      } loc(#loc94)
    } loc(#loc92)
    cir.scope {
      %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["shortData", init] {alignment = 2 : i64} loc(#loc97)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc22)
      cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc97)
      %6 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc23)
      cir.call @printShortLine(%6) : (!s16i) -> () loc(#loc24)
    } loc(#loc96)
    cir.return loc(#loc6)
  } loc(#loc89)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_short_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc98)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc32)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc33)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    cir.return %2 : !s32i loc(#loc102)
  } loc(#loc101)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc43)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc108)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc47)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc47)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
      } else {
        %6 = cir.const #cir.int<127> : !s32i loc(#loc53)
        %7 = cir.const #cir.int<5> : !s32i loc(#loc54)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc53)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
      } loc(#loc109)
    } loc(#loc107)
    cir.scope {
      %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["shortData", init] {alignment = 2 : i64} loc(#loc112)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc59)
      cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc112)
      %6 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc60)
      cir.call @printShortLine(%6) : (!s16i) -> () loc(#loc61)
    } loc(#loc111)
    cir.return loc(#loc39)
  } loc(#loc104)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    cir.return %2 : !s32i loc(#loc114)
  } loc(#loc113)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc71)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc119)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc75)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc75)
      cir.if %5 {
        %6 = cir.const #cir.int<127> : !s32i loc(#loc78)
        %7 = cir.const #cir.int<5> : !s32i loc(#loc79)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc78)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
      } loc(#loc120)
    } loc(#loc118)
    cir.scope {
      %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["shortData", init] {alignment = 2 : i64} loc(#loc123)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
      %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc84)
      cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc123)
      %6 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc85)
      cir.call @printShortLine(%6) : (!s16i) -> () loc(#loc86)
    } loc(#loc122)
    cir.return loc(#loc67)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":20:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":20:39)
#loc5 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":35:1)
#loc6 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":50:1)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":37:5)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":37:9)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":39:13)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":39:12)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":39:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":40:5)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":44:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":40:8)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":40:26)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":41:5)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":43:16)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":43:9)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":45:5)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":49:5)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":47:9)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":47:34)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":48:24)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":48:9)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":97:1)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":101:1)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":99:5)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":99:14)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":100:5)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":100:14)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":23:1)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":26:1)
#loc33 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":25:12)
#loc34 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":25:5)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":65:19)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":57:1)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":77:1)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":59:5)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":59:9)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":61:13)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":61:12)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":61:5)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":62:5)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":71:5)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":62:8)
#loc48 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":62:27)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":63:5)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":66:5)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":68:5)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":65:9)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":70:16)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":70:25)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":70:9)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":72:5)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":76:5)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":74:9)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":74:34)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":75:24)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":75:9)
#loc62 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":28:1)
#loc63 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":31:1)
#loc64 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":30:12)
#loc65 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":30:5)
#loc66 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":80:1)
#loc67 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":95:1)
#loc68 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":82:5)
#loc69 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":82:9)
#loc70 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":84:13)
#loc71 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":84:12)
#loc72 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":84:5)
#loc73 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":85:5)
#loc74 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":89:5)
#loc75 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":85:8)
#loc76 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":85:26)
#loc77 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":86:5)
#loc78 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":88:16)
#loc79 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":88:25)
#loc80 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":88:9)
#loc81 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":90:5)
#loc82 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":94:5)
#loc83 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":92:9)
#loc84 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":92:34)
#loc85 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":93:24)
#loc86 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_08.c":93:9)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc11, #loc9])
#loc92 = loc(fused[#loc12, #loc13])
#loc93 = loc(fused[#loc14, #loc15])
#loc94 = loc(fused[#loc16, #loc13])
#loc95 = loc(fused[#loc18, #loc17])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc21, #loc22])
#loc98 = loc(fused[#loc25, #loc26])
#loc99 = loc(fused[#loc27, #loc28])
#loc100 = loc(fused[#loc29, #loc30])
#loc101 = loc(fused[#loc31, #loc32])
#loc102 = loc(fused[#loc34, #loc33])
#loc103 = loc(fused[#loc35, #loc36])
#loc104 = loc(fused[#loc38, #loc39])
#loc105 = loc(fused[#loc40, #loc41])
#loc106 = loc(fused[#loc44, #loc42])
#loc107 = loc(fused[#loc45, #loc46])
#loc108 = loc(fused[#loc47, #loc48])
#loc109 = loc(fused[#loc49, #loc50, #loc51, #loc46])
#loc110 = loc(fused[#loc55, #loc54])
#loc111 = loc(fused[#loc56, #loc57])
#loc112 = loc(fused[#loc58, #loc59])
#loc113 = loc(fused[#loc62, #loc63])
#loc114 = loc(fused[#loc65, #loc64])
#loc115 = loc(fused[#loc66, #loc67])
#loc116 = loc(fused[#loc68, #loc69])
#loc117 = loc(fused[#loc72, #loc70])
#loc118 = loc(fused[#loc73, #loc74])
#loc119 = loc(fused[#loc75, #loc76])
#loc120 = loc(fused[#loc77, #loc74])
#loc121 = loc(fused[#loc80, #loc79])
#loc122 = loc(fused[#loc81, #loc82])
#loc123 = loc(fused[#loc83, #loc84])
