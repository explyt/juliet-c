!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc53)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc55)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc56)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc9)
    %4 = cir.alloca !u8i, !cir.ptr<!u8i>, %3 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc9)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc9)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc9)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc57)
    cir.scope {
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc59)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc59)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc59)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc15)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc15)
      %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc16)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc16)
      %13 = cir.const #cir.int<10> : !s32i loc(#loc17)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc17)
      %15 = cir.const #cir.int<4> : !u64i loc(#loc60)
      %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc61)
      cir.libc.memcpy %16 bytes from %12 to %10 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc62)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc23)
      %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc24)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc25)
    } loc(#loc58)
    cir.return loc(#loc4)
  } loc(#loc54)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc64)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc27)
  } loc(#loc63)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc66)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc34)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc67)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc36)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc36)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc36)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc36)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc36)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc36)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc68)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc70)
      %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc70)
      cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc70)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc42)
      %13 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc43)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
      %15 = cir.const #cir.int<10> : !s32i loc(#loc44)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc44)
      %17 = cir.const #cir.int<4> : !u64i loc(#loc71)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc72)
      cir.libc.memcpy %18 bytes from %14 to %12 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc73)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc51)
      %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc52)
    } loc(#loc69)
    cir.return loc(#loc31)
  } loc(#loc65)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":33:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":24:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":24:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:19)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":32:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":28:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":28:28)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":30:16)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":30:22)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":30:30)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":30:33)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":30:43)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":30:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":30:44)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:22)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:27)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:28)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":54:1)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":57:1)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":56:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":56:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":40:1)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":42:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":42:11)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":43:12)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":43:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":45:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":45:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":46:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":51:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:28)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":49:16)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":49:22)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":49:30)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":49:33)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":49:43)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":49:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":49:44)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":50:22)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":50:27)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":50:28)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c":50:9)
#loc53 = loc(fused[#loc1, #loc2])
#loc54 = loc(fused[#loc3, #loc4])
#loc55 = loc(fused[#loc5, #loc6])
#loc56 = loc(fused[#loc8, #loc7])
#loc57 = loc(fused[#loc10, #loc9])
#loc58 = loc(fused[#loc11, #loc12])
#loc59 = loc(fused[#loc13, #loc14])
#loc60 = loc(fused[#loc18, #loc19])
#loc61 = loc(fused[#loc17, #loc19])
#loc62 = loc(fused[#loc20, #loc21])
#loc63 = loc(fused[#loc26, #loc27])
#loc64 = loc(fused[#loc28, #loc29])
#loc65 = loc(fused[#loc30, #loc31])
#loc66 = loc(fused[#loc32, #loc33])
#loc67 = loc(fused[#loc35, #loc34])
#loc68 = loc(fused[#loc37, #loc36])
#loc69 = loc(fused[#loc38, #loc39])
#loc70 = loc(fused[#loc40, #loc41])
#loc71 = loc(fused[#loc45, #loc46])
#loc72 = loc(fused[#loc44, #loc46])
#loc73 = loc(fused[#loc47, #loc48])
