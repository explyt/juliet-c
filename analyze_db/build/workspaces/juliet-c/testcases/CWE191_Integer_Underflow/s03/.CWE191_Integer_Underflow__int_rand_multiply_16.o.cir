!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc109)
  cir.func private @printIntLine(!s32i) loc(#loc110)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%3) loc(#loc13)
      } do {
        cir.scope {
          %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %4 = cir.binop(and, %2, %3) : !s32i loc(#loc15)
          %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
          %6 = cir.ternary(%5, true {
            %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc15)
            %10 = cir.const #cir.int<30> : !s32i loc(#loc15)
            %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc15)
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
            %14 = cir.const #cir.int<15> : !s32i loc(#loc15)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
            %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc15)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc15)
            %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc15)
            cir.yield %19 : !u32i loc(#loc15)
          }, false {
            %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc15)
            %10 = cir.const #cir.int<30> : !s32i loc(#loc15)
            %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc15)
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
            %14 = cir.const #cir.int<15> : !s32i loc(#loc15)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
            %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc15)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc15)
            %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc15)
            %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc15)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc15)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc15)
            %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc15)
            cir.yield %23 : !u32i loc(#loc15)
          }) : (!cir.bool) -> !u32i loc(#loc15)
          %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc15)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
          cir.break loc(#loc17)
        } loc(#loc115)
        cir.yield loc(#loc12)
      } loc(#loc114)
    } loc(#loc114)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%3) loc(#loc20)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc25)
            %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc120)
            cir.if %4 {
              %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc122)
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
              %7 = cir.const #cir.int<2> : !s32i loc(#loc28)
              %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc29)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc122)
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc30)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc31)
            } loc(#loc121)
          } loc(#loc119)
          cir.break loc(#loc32)
        } loc(#loc118)
        cir.yield loc(#loc19)
      } loc(#loc117)
    } loc(#loc117)
    cir.return loc(#loc6)
  } loc(#loc111)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc123)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc46)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc50)
        cir.condition(%3) loc(#loc50)
      } do {
        cir.scope {
          %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %3 = cir.const #cir.int<1> : !s32i loc(#loc52)
          %4 = cir.binop(and, %2, %3) : !s32i loc(#loc52)
          %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc52)
          %6 = cir.ternary(%5, true {
            %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
            %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc52)
            %10 = cir.const #cir.int<30> : !s32i loc(#loc52)
            %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc52)
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc52)
            %14 = cir.const #cir.int<15> : !s32i loc(#loc52)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc52)
            %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc52)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc52)
            %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc52)
            cir.yield %19 : !u32i loc(#loc52)
          }, false {
            %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
            %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc52)
            %10 = cir.const #cir.int<30> : !s32i loc(#loc52)
            %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc52)
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc52)
            %14 = cir.const #cir.int<15> : !s32i loc(#loc52)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc52)
            %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc52)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc52)
            %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc52)
            %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc52)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc52)
            %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc52)
            cir.yield %23 : !u32i loc(#loc52)
          }) : (!cir.bool) -> !u32i loc(#loc52)
          %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc52)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
          cir.break loc(#loc54)
        } loc(#loc131)
        cir.yield loc(#loc49)
      } loc(#loc130)
    } loc(#loc130)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc57)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc57)
        cir.condition(%3) loc(#loc57)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc62)
            %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc136)
            cir.if %4 {
              cir.scope {
                %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
                %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
                %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc67)
                %8 = cir.const #cir.int<1> : !s32i loc(#loc67)
                %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc67)
                %10 = cir.const #cir.int<2> : !s32i loc(#loc68)
                %11 = cir.binop(div, %9, %10) : !s32i loc(#loc139)
                %12 = cir.cmp(gt, %5, %11) : !s32i, !cir.bool loc(#loc140)
                cir.if %12 {
                  %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc142)
                  %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                  %15 = cir.const #cir.int<2> : !s32i loc(#loc74)
                  %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc75)
                  cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc142)
                  %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                  cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc77)
                } else {
                  %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc41)
                  %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc41)
                  cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc78)
                } loc(#loc141)
              } loc(#loc138)
            } loc(#loc137)
          } loc(#loc135)
          cir.break loc(#loc79)
        } loc(#loc134)
        cir.yield loc(#loc56)
      } loc(#loc133)
    } loc(#loc133)
    cir.return loc(#loc43)
  } loc(#loc127)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc88)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc88)
        cir.condition(%3) loc(#loc88)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<2> : !s32i loc(#loc90)
          %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc91)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
          cir.break loc(#loc93)
        } loc(#loc147)
        cir.yield loc(#loc87)
      } loc(#loc146)
    } loc(#loc146)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc96)
        cir.condition(%3) loc(#loc96)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc101)
            %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc152)
            cir.if %4 {
              %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc154)
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
              %7 = cir.const #cir.int<2> : !s32i loc(#loc104)
              %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc105)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc154)
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc107)
            } loc(#loc153)
          } loc(#loc151)
          cir.break loc(#loc108)
        } loc(#loc150)
        cir.yield loc(#loc95)
      } loc(#loc149)
    } loc(#loc149)
    cir.return loc(#loc81)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":43:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":26:12)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":26:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":27:5)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":32:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":27:11)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":28:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":30:16)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":30:9)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":31:9)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":33:5)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":42:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":33:11)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":34:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":35:9)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":40:9)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":35:12)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":35:19)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":36:9)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":38:13)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":38:33)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":38:26)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":39:26)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":39:13)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":41:9)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":104:1)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":108:1)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":106:5)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":106:13)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":107:5)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":107:13)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":73:27)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":50:1)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":78:1)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":52:5)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":52:9)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":54:12)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":54:5)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":55:5)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":60:5)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":55:11)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":56:5)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":58:16)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":58:9)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":59:9)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":61:5)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":77:5)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":61:11)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":62:5)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":63:9)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":75:9)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":63:12)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":63:19)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":64:9)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:13)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":74:13)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:17)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:25)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:33)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:34)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":67:13)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":70:13)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":72:13)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":68:17)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":68:37)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":68:30)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":69:30)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":69:17)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":73:17)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":76:9)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":81:1)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":102:1)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":83:5)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":83:9)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":85:12)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":85:5)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":86:5)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":91:5)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":86:11)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":87:5)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":89:17)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":89:16)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":89:9)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":90:9)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":92:5)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":101:5)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":92:11)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":93:5)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":94:9)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":99:9)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":94:12)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":94:19)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":95:9)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":97:13)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":97:33)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":97:26)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":98:26)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":98:13)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":100:9)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc10, #loc9])
#loc114 = loc(fused[#loc11, #loc12])
#loc115 = loc(fused[#loc14, #loc12])
#loc116 = loc(fused[#loc16, #loc15])
#loc117 = loc(fused[#loc18, #loc19])
#loc118 = loc(fused[#loc21, #loc19])
#loc119 = loc(fused[#loc22, #loc23])
#loc120 = loc(fused[#loc24, #loc25])
#loc121 = loc(fused[#loc26, #loc23])
#loc122 = loc(fused[#loc27, #loc28])
#loc123 = loc(fused[#loc33, #loc34])
#loc124 = loc(fused[#loc35, #loc36])
#loc125 = loc(fused[#loc37, #loc38])
#loc126 = loc(fused[#loc39, #loc40])
#loc127 = loc(fused[#loc42, #loc43])
#loc128 = loc(fused[#loc44, #loc45])
#loc129 = loc(fused[#loc47, #loc46])
#loc130 = loc(fused[#loc48, #loc49])
#loc131 = loc(fused[#loc51, #loc49])
#loc132 = loc(fused[#loc53, #loc52])
#loc133 = loc(fused[#loc55, #loc56])
#loc134 = loc(fused[#loc58, #loc56])
#loc135 = loc(fused[#loc59, #loc60])
#loc136 = loc(fused[#loc61, #loc62])
#loc137 = loc(fused[#loc63, #loc60])
#loc138 = loc(fused[#loc64, #loc65])
#loc139 = loc(fused[#loc67, #loc68])
#loc140 = loc(fused[#loc66, #loc69])
#loc141 = loc(fused[#loc70, #loc71, #loc72, #loc65])
#loc142 = loc(fused[#loc73, #loc74])
#loc143 = loc(fused[#loc80, #loc81])
#loc144 = loc(fused[#loc82, #loc83])
#loc145 = loc(fused[#loc85, #loc84])
#loc146 = loc(fused[#loc86, #loc87])
#loc147 = loc(fused[#loc89, #loc87])
#loc148 = loc(fused[#loc92, #loc90])
#loc149 = loc(fused[#loc94, #loc95])
#loc150 = loc(fused[#loc97, #loc95])
#loc151 = loc(fused[#loc98, #loc99])
#loc152 = loc(fused[#loc100, #loc101])
#loc153 = loc(fused[#loc102, #loc99])
#loc154 = loc(fused[#loc103, #loc104])
