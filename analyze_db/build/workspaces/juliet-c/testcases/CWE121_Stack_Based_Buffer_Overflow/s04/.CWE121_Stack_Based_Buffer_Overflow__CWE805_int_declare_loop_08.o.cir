!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc152)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc155)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc156)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc158)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 50>>), !cir.ptr<!s32i> loc(#loc16)
        cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
      } loc(#loc159)
    } loc(#loc157)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc162)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc162)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc162)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc164)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc28)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc166)
          cir.for : cond {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc31)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc31)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc167)
            cir.condition(%15) loc(#loc32)
          } body {
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc34)
              %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc35)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc35)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc35)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc37)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc38)
              cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc169)
            } loc(#loc168)
            cir.yield loc(#loc27)
          } step {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc41)
            cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc170)
            cir.yield loc(#loc165)
          } loc(#loc165)
        } loc(#loc165)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc44)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc42)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc45)
      } loc(#loc163)
    } loc(#loc161)
    cir.return loc(#loc4)
  } loc(#loc153)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc171)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc54)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
    cir.return %2 : !s32i loc(#loc175)
  } loc(#loc174)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc179)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc180)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc182)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc69)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc69)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc58)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } else {
        %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc75)
        cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
      } loc(#loc183)
    } loc(#loc181)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc186)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc186)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc186)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc188)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc87)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc87)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc190)
          cir.for : cond {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc89)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc90)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc90)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc191)
            cir.condition(%15) loc(#loc91)
          } body {
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc93)
              %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc94)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc94)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc96)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc97)
              cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc193)
            } loc(#loc192)
            cir.yield loc(#loc86)
          } step {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc99)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc100)
            cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc194)
            cir.yield loc(#loc189)
          } loc(#loc189)
        } loc(#loc189)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc102)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc103)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc104)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc60)
  } loc(#loc177)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc107)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
    cir.return %2 : !s32i loc(#loc196)
  } loc(#loc195)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc199)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc200)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc202)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc119)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc119)
      cir.if %5 {
        %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc122)
        cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc204)
      } loc(#loc203)
    } loc(#loc201)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc206)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc206)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc206)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc208)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc134)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc134)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc210)
          cir.for : cond {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc136)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc137)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc137)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc211)
            cir.condition(%15) loc(#loc138)
          } body {
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc140)
              %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc141)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc141)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc143)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc144)
              cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc213)
            } loc(#loc212)
            cir.yield loc(#loc133)
          } step {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc146)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc147)
            cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc214)
            cir.yield loc(#loc209)
          } loc(#loc209)
        } loc(#loc209)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc149)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc150)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc151)
      } loc(#loc207)
    } loc(#loc205)
    cir.return loc(#loc110)
  } loc(#loc197)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":35:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":58:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":37:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":37:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":38:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":38:25)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":39:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":39:27)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":40:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":45:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":40:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":40:26)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":41:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":44:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":44:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":46:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":57:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":47:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":47:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":48:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":56:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":49:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":49:20)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":51:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":54:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":51:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":51:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":51:25)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":51:29)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":51:27)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":52:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":53:34)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":53:27)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":53:17)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":53:22)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":53:23)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":53:35)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":51:35)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":51:34)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":55:26)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":55:31)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":55:32)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":55:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":119:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":123:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":121:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":121:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":122:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":122:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":23:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":26:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":25:12)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":25:5)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":73:19)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":65:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":92:1)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":67:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":67:11)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":68:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":68:25)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":69:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":69:27)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":70:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":79:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":70:8)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":70:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":71:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":74:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":76:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":73:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":78:16)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":78:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":80:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":91:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":81:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":81:29)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":82:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":90:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":83:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":83:20)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":85:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":88:13)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":85:22)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":85:18)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":85:25)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":85:29)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":85:27)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":86:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":87:34)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":87:27)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":87:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":87:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":87:23)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":87:35)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":85:35)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":85:34)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":89:26)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":89:31)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":89:32)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":89:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":28:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":31:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":30:12)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":30:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":95:1)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":117:1)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":97:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":97:11)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":98:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":98:25)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":99:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":99:27)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":100:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":104:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":100:8)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":100:26)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":101:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":103:16)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":103:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":105:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":116:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":106:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":106:29)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":107:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":115:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":108:13)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":108:20)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":110:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":113:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":110:22)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":110:18)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":110:25)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":110:29)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":110:27)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":111:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":112:34)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":112:27)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":112:17)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":112:22)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":112:23)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":112:35)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":110:35)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":110:34)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":114:26)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":114:31)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":114:32)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c":114:13)
#loc152 = loc(fused[#loc1, #loc2])
#loc153 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc5, #loc6])
#loc155 = loc(fused[#loc7, #loc8])
#loc156 = loc(fused[#loc9, #loc10])
#loc157 = loc(fused[#loc11, #loc12])
#loc158 = loc(fused[#loc13, #loc14])
#loc159 = loc(fused[#loc15, #loc12])
#loc160 = loc(fused[#loc17, #loc16])
#loc161 = loc(fused[#loc18, #loc19])
#loc162 = loc(fused[#loc20, #loc21])
#loc163 = loc(fused[#loc22, #loc23])
#loc164 = loc(fused[#loc24, #loc25])
#loc165 = loc(fused[#loc26, #loc27])
#loc166 = loc(fused[#loc29, #loc28])
#loc167 = loc(fused[#loc30, #loc31])
#loc168 = loc(fused[#loc33, #loc27])
#loc169 = loc(fused[#loc36, #loc39])
#loc170 = loc(fused[#loc41, #loc40])
#loc171 = loc(fused[#loc46, #loc47])
#loc172 = loc(fused[#loc48, #loc49])
#loc173 = loc(fused[#loc50, #loc51])
#loc174 = loc(fused[#loc52, #loc53])
#loc175 = loc(fused[#loc55, #loc54])
#loc176 = loc(fused[#loc56, #loc57])
#loc177 = loc(fused[#loc59, #loc60])
#loc178 = loc(fused[#loc61, #loc62])
#loc179 = loc(fused[#loc63, #loc64])
#loc180 = loc(fused[#loc65, #loc66])
#loc181 = loc(fused[#loc67, #loc68])
#loc182 = loc(fused[#loc69, #loc70])
#loc183 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc184 = loc(fused[#loc76, #loc75])
#loc185 = loc(fused[#loc77, #loc78])
#loc186 = loc(fused[#loc79, #loc80])
#loc187 = loc(fused[#loc81, #loc82])
#loc188 = loc(fused[#loc83, #loc84])
#loc189 = loc(fused[#loc85, #loc86])
#loc190 = loc(fused[#loc88, #loc87])
#loc191 = loc(fused[#loc89, #loc90])
#loc192 = loc(fused[#loc92, #loc86])
#loc193 = loc(fused[#loc95, #loc98])
#loc194 = loc(fused[#loc100, #loc99])
#loc195 = loc(fused[#loc105, #loc106])
#loc196 = loc(fused[#loc108, #loc107])
#loc197 = loc(fused[#loc109, #loc110])
#loc198 = loc(fused[#loc111, #loc112])
#loc199 = loc(fused[#loc113, #loc114])
#loc200 = loc(fused[#loc115, #loc116])
#loc201 = loc(fused[#loc117, #loc118])
#loc202 = loc(fused[#loc119, #loc120])
#loc203 = loc(fused[#loc121, #loc118])
#loc204 = loc(fused[#loc123, #loc122])
#loc205 = loc(fused[#loc124, #loc125])
#loc206 = loc(fused[#loc126, #loc127])
#loc207 = loc(fused[#loc128, #loc129])
#loc208 = loc(fused[#loc130, #loc131])
#loc209 = loc(fused[#loc132, #loc133])
#loc210 = loc(fused[#loc135, #loc134])
#loc211 = loc(fused[#loc136, #loc137])
#loc212 = loc(fused[#loc139, #loc133])
#loc213 = loc(fused[#loc142, #loc145])
#loc214 = loc(fused[#loc147, #loc146])
