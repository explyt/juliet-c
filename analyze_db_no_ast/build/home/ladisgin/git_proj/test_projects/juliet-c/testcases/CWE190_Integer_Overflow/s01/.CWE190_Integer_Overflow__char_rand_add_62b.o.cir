!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":25:16)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":25:22)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":36:20)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":36:26)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":43:20)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":43:26)
#loc26 = loc(fused[#loc5, #loc6])
#loc29 = loc(fused[#loc12, #loc13])
#loc32 = loc(fused[#loc19, #loc20])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc24)
  cir.func  @_ZN41CWE190_Integer_Overflow__char_rand_add_629badSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc26)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    %5 = cir.ternary(%4, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc8)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc8)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc8)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc8)
      cir.yield %20 : !u32i loc(#loc8)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc8)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc8)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc8)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc8)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc8)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc8)
      cir.yield %24 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc8)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc9)
    cir.store %7, %8 : !s8i, !cir.ptr<!s8i> loc(#loc27)
    cir.return loc(#loc4)
  } loc(#loc25)
  cir.func  @_ZN41CWE190_Integer_Overflow__char_rand_add_6213goodG2BSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc29)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc15)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc15)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    cir.store %2, %3 : !s8i, !cir.ptr<!s8i> loc(#loc30)
    cir.return loc(#loc11)
  } loc(#loc28)
  cir.func  @_ZN41CWE190_Integer_Overflow__char_rand_add_6213goodB2GSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc19, #loc20])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc32)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc21)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc22)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
    %5 = cir.ternary(%4, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc22)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc22)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc22)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc22)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc22)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc22)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc22)
      cir.yield %20 : !u32i loc(#loc22)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc22)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc22)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc22)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc22)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc22)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc22)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc22)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc22)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc22)
      cir.yield %24 : !u32i loc(#loc22)
    }) : (!cir.bool) -> !u32i loc(#loc22)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc22)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    cir.store %7, %8 : !s8i, !cir.ptr<!s8i> loc(#loc33)
    cir.return loc(#loc18)
  } loc(#loc31)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_62b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":25:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":29:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":26:1)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":28:18)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":28:5)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":36:1)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":40:1)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":37:1)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":39:12)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":39:5)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":43:1)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":47:1)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":44:1)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":46:18)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_add_62b.cpp":46:5)
#loc24 = loc(fused[#loc1, #loc2])
#loc25 = loc(fused[#loc3, #loc4])
#loc27 = loc(fused[#loc9, #loc8])
#loc28 = loc(fused[#loc10, #loc11])
#loc30 = loc(fused[#loc16, #loc15])
#loc31 = loc(fused[#loc17, #loc18])
#loc33 = loc(fused[#loc23, #loc22])
