!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":116:10)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":116:14)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":116:20)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":116:32)
#loc153 = loc(fused[#loc52, #loc53])
#loc154 = loc(fused[#loc54, #loc55])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc134)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc136)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_multiply_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc138)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc12)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc139)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
        cir.condition(%4) loc(#loc16)
      } do {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc17)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc135)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc18)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc17)
        cir.break loc(#loc19)
      } loc(#loc140)
    } loc(#loc140)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
        cir.condition(%4) loc(#loc22)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc25)
          %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc25)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc143)
          cir.if %6 {
            %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc145)
            %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc30)
            %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc30)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc29)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc30)
            %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc30)
            cir.store %12, %7 : !s8i, !cir.ptr<!s8i> loc(#loc145)
            %13 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc31)
            cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc32)
          } loc(#loc144)
        } loc(#loc142)
        cir.break loc(#loc33)
      } loc(#loc141)
    } loc(#loc141)
    cir.return loc(#loc9)
  } loc(#loc137)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_multiply_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc146)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc149)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc150)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc59)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_multiply_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call @CWE190_Integer_Overflow__char_fscanf_multiply_16_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_multiply_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE190_Integer_Overflow__char_fscanf_multiply_16_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.return %17 : !s32i loc(#loc157)
  } loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc159)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc75)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc75)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc160)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc79)
        cir.condition(%4) loc(#loc79)
      } do {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc80)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc135)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc81)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc82)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc82)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc80)
        cir.break loc(#loc83)
      } loc(#loc161)
    } loc(#loc161)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc86)
        cir.condition(%4) loc(#loc86)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc89)
          %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc89)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc90)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc164)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc94)
              %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc94)
              %9 = cir.const #cir.int<127> : !s32i loc(#loc95)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc96)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc167)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc168)
              cir.if %12 {
                %13 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc170)
                %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc103)
                %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc103)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc102)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc103)
                %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc103)
                cir.store %18, %13 : !s8i, !cir.ptr<!s8i> loc(#loc170)
                %19 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc104)
                cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc105)
              } else {
                %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc70)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc70)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc106)
              } loc(#loc169)
            } loc(#loc166)
          } loc(#loc165)
        } loc(#loc163)
        cir.break loc(#loc107)
      } loc(#loc162)
    } loc(#loc162)
    cir.return loc(#loc72)
  } loc(#loc158)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc172)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc112)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc112)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc173)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc116)
        cir.condition(%4) loc(#loc116)
      } do {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc117)
        %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc117)
        cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc175)
        cir.break loc(#loc119)
      } loc(#loc174)
    } loc(#loc174)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc122)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc122)
        cir.condition(%4) loc(#loc122)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc125)
          %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc125)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc126)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc178)
          cir.if %6 {
            %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc180)
            %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc130)
            %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc130)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc129)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc130)
            %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc130)
            cir.store %12, %7 : !s8i, !cir.ptr<!s8i> loc(#loc180)
            %13 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc131)
            cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc132)
          } loc(#loc179)
        } loc(#loc177)
        cir.break loc(#loc133)
      } loc(#loc176)
    } loc(#loc176)
    cir.return loc(#loc109)
  } loc(#loc171)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":29:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":42:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":24:10)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":26:11)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":29:9)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":29:17)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":32:5)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":41:5)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":32:11)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":34:9)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":39:9)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":34:12)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":34:19)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":35:9)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":37:13)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":37:34)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":37:27)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":38:30)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":38:13)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":40:9)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":101:1)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":105:1)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":103:5)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":103:13)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":104:5)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":104:13)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":121:15)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":123:15)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":126:15)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":128:15)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":116:1)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":131:1)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":117:1)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":119:27)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":119:22)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":119:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":121:5)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":122:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":122:59)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":123:5)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":126:5)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":127:5)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":127:58)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":128:5)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":130:12)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":130:5)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":71:27)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":49:1)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":76:1)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":51:5)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":51:10)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":52:12)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":52:5)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":53:5)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":58:5)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":53:11)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":56:9)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":56:17)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":56:24)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":57:9)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":59:5)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":75:5)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":59:11)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":61:9)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":73:9)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":61:12)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":61:19)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":62:9)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":64:13)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":72:13)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":64:17)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":64:25)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":64:34)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":64:35)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":65:13)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":68:13)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":70:13)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":66:17)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":66:38)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":66:31)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":67:34)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":67:17)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":71:17)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":74:9)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":79:1)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":99:1)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":81:5)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":81:10)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":82:12)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":82:5)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":83:5)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":88:5)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":83:11)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":86:16)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":86:9)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":87:9)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":89:5)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":98:5)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":89:11)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":91:9)
#loc124 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":96:9)
#loc125 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":91:12)
#loc126 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":91:19)
#loc127 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":92:9)
#loc128 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":94:13)
#loc129 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":94:34)
#loc130 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":94:27)
#loc131 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":95:30)
#loc132 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":95:13)
#loc133 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_16.c":97:9)
#loc134 = loc(fused[#loc1, #loc2])
#loc135 = loc(fused[#loc3, #loc4])
#loc136 = loc(fused[#loc6, #loc7])
#loc137 = loc(fused[#loc8, #loc9])
#loc138 = loc(fused[#loc10, #loc11])
#loc139 = loc(fused[#loc13, #loc12])
#loc140 = loc(fused[#loc14, #loc15])
#loc141 = loc(fused[#loc20, #loc21])
#loc142 = loc(fused[#loc23, #loc24])
#loc143 = loc(fused[#loc25, #loc26])
#loc144 = loc(fused[#loc27, #loc24])
#loc145 = loc(fused[#loc28, #loc29])
#loc146 = loc(fused[#loc34, #loc35])
#loc147 = loc(fused[#loc36, #loc37])
#loc148 = loc(fused[#loc38, #loc39])
#loc149 = loc(fused[#loc40, #loc41])
#loc150 = loc(fused[#loc42, #loc43])
#loc151 = loc(fused[#loc44, #loc45])
#loc152 = loc(fused[#loc50, #loc51])
#loc155 = loc(fused[#loc61, #loc62])
#loc156 = loc(fused[#loc65, #loc66])
#loc157 = loc(fused[#loc69, #loc68])
#loc158 = loc(fused[#loc71, #loc72])
#loc159 = loc(fused[#loc73, #loc74])
#loc160 = loc(fused[#loc76, #loc75])
#loc161 = loc(fused[#loc77, #loc78])
#loc162 = loc(fused[#loc84, #loc85])
#loc163 = loc(fused[#loc87, #loc88])
#loc164 = loc(fused[#loc89, #loc90])
#loc165 = loc(fused[#loc91, #loc88])
#loc166 = loc(fused[#loc92, #loc93])
#loc167 = loc(fused[#loc95, #loc96])
#loc168 = loc(fused[#loc94, #loc97])
#loc169 = loc(fused[#loc98, #loc99, #loc100, #loc93])
#loc170 = loc(fused[#loc101, #loc102])
#loc171 = loc(fused[#loc108, #loc109])
#loc172 = loc(fused[#loc110, #loc111])
#loc173 = loc(fused[#loc113, #loc112])
#loc174 = loc(fused[#loc114, #loc115])
#loc175 = loc(fused[#loc118, #loc117])
#loc176 = loc(fused[#loc120, #loc121])
#loc177 = loc(fused[#loc123, #loc124])
#loc178 = loc(fused[#loc125, #loc126])
#loc179 = loc(fused[#loc127, #loc124])
#loc180 = loc(fused[#loc128, #loc129])
