!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc94)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_multiply_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc96)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc7)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc97)
    cir.goto "source" loc(#loc98)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc11)
    %3 = cir.const #cir.int<32767> : !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc12)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc99)
    cir.goto "sink" loc(#loc100)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc16)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc19)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc19)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc20)
      %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc102)
      cir.if %8 {
        %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc104)
        %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
        %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc24)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc23)
        %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc24)
        %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc24)
        cir.store %14, %9 : !s16i, !cir.ptr<!s16i> loc(#loc104)
        %15 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc25)
        %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc25)
        cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc26)
      } loc(#loc103)
    } loc(#loc101)
    cir.return loc(#loc4)
  } loc(#loc95)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_multiply_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc107)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc110)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc40)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc111)
    cir.goto "source" loc(#loc112)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc44)
    %3 = cir.const #cir.int<32767> : !s32i loc(#loc45)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc45)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc113)
    cir.goto "sink" loc(#loc114)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc49)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc52)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc52)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc53)
      %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc116)
      cir.if %8 {
        cir.scope {
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc57)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc57)
          %11 = cir.const #cir.int<32767> : !s32i loc(#loc58)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc59)
          %13 = cir.binop(div, %11, %12) : !s32i loc(#loc119)
          %14 = cir.cmp(lt, %10, %13) : !s32i, !cir.bool loc(#loc120)
          cir.if %14 {
            %15 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc122)
            %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc66)
            %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc66)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc65)
            %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc66)
            %20 = cir.cast(integral, %19 : !s32i), !s16i loc(#loc66)
            cir.store %20, %15 : !s16i, !cir.ptr<!s16i> loc(#loc122)
            %21 = cir.load %15 : !cir.ptr<!s16i>, !s16i loc(#loc67)
            %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc67)
            cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc68)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc35)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc35)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc69)
          } loc(#loc121)
        } loc(#loc118)
      } loc(#loc117)
    } loc(#loc115)
    cir.return loc(#loc37)
  } loc(#loc109)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc124)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc74)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc125)
    cir.goto "source" loc(#loc126)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc78)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc79)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc79)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc127)
    cir.goto "sink" loc(#loc128)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc83)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc86)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc86)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc87)
      %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc130)
      cir.if %8 {
        %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc132)
        %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc91)
        %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc91)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc90)
        %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc91)
        %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc91)
        cir.store %14, %9 : !s16i, !cir.ptr<!s16i> loc(#loc132)
        %15 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc92)
        %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc92)
        cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc93)
      } loc(#loc131)
    } loc(#loc129)
    cir.return loc(#loc71)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_multiply_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":38:1)
#loc5 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":24:11)
#loc7 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":25:12)
#loc8 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":25:5)
#loc9 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":26:10)
#loc11 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":27:1)
#loc12 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":29:12)
#loc13 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":30:10)
#loc16 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":31:1)
#loc17 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":37:5)
#loc19 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":32:8)
#loc20 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":32:15)
#loc21 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":33:5)
#loc22 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":35:9)
#loc23 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":35:31)
#loc24 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":35:24)
#loc25 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":36:22)
#loc26 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":36:9)
#loc27 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":89:1)
#loc28 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":93:1)
#loc29 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":91:5)
#loc30 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":91:13)
#loc31 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":92:5)
#loc32 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":92:13)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":65:23)
#loc36 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":45:1)
#loc37 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":68:1)
#loc38 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":47:5)
#loc39 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":47:11)
#loc40 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":48:12)
#loc41 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":48:5)
#loc42 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":49:5)
#loc43 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":49:10)
#loc44 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":50:1)
#loc45 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":52:12)
#loc46 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":52:5)
#loc47 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":53:5)
#loc48 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":53:10)
#loc49 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":54:1)
#loc50 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":55:5)
#loc51 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":67:5)
#loc52 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":55:8)
#loc53 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":55:15)
#loc54 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":56:5)
#loc55 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":58:9)
#loc56 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":66:9)
#loc57 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":58:13)
#loc58 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":58:21)
#loc59 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":58:30)
#loc60 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":58:31)
#loc61 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":59:9)
#loc62 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":62:9)
#loc63 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":64:9)
#loc64 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":60:13)
#loc65 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":60:35)
#loc66 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":60:28)
#loc67 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":61:26)
#loc68 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":61:13)
#loc69 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":65:13)
#loc70 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":71:1)
#loc71 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":87:1)
#loc72 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":73:5)
#loc73 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":73:11)
#loc74 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":74:12)
#loc75 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":74:5)
#loc76 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":75:5)
#loc77 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":75:10)
#loc78 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":76:1)
#loc79 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":78:12)
#loc80 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":78:5)
#loc81 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":79:5)
#loc82 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":79:10)
#loc83 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":80:1)
#loc84 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":81:5)
#loc85 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":86:5)
#loc86 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":81:8)
#loc87 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":81:15)
#loc88 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":82:5)
#loc89 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":84:9)
#loc90 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":84:31)
#loc91 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":84:24)
#loc92 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":85:22)
#loc93 = loc("CWE190_Integer_Overflow__short_max_multiply_18.c":85:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc8, #loc7])
#loc98 = loc(fused[#loc9, #loc10])
#loc99 = loc(fused[#loc13, #loc12])
#loc100 = loc(fused[#loc14, #loc15])
#loc101 = loc(fused[#loc17, #loc18])
#loc102 = loc(fused[#loc19, #loc20])
#loc103 = loc(fused[#loc21, #loc18])
#loc104 = loc(fused[#loc22, #loc23])
#loc105 = loc(fused[#loc27, #loc28])
#loc106 = loc(fused[#loc29, #loc30])
#loc107 = loc(fused[#loc31, #loc32])
#loc108 = loc(fused[#loc33, #loc34])
#loc109 = loc(fused[#loc36, #loc37])
#loc110 = loc(fused[#loc38, #loc39])
#loc111 = loc(fused[#loc41, #loc40])
#loc112 = loc(fused[#loc42, #loc43])
#loc113 = loc(fused[#loc46, #loc45])
#loc114 = loc(fused[#loc47, #loc48])
#loc115 = loc(fused[#loc50, #loc51])
#loc116 = loc(fused[#loc52, #loc53])
#loc117 = loc(fused[#loc54, #loc51])
#loc118 = loc(fused[#loc55, #loc56])
#loc119 = loc(fused[#loc58, #loc59])
#loc120 = loc(fused[#loc57, #loc60])
#loc121 = loc(fused[#loc61, #loc62, #loc63, #loc56])
#loc122 = loc(fused[#loc64, #loc65])
#loc123 = loc(fused[#loc70, #loc71])
#loc124 = loc(fused[#loc72, #loc73])
#loc125 = loc(fused[#loc75, #loc74])
#loc126 = loc(fused[#loc76, #loc77])
#loc127 = loc(fused[#loc80, #loc79])
#loc128 = loc(fused[#loc81, #loc82])
#loc129 = loc(fused[#loc84, #loc85])
#loc130 = loc(fused[#loc86, #loc87])
#loc131 = loc(fused[#loc88, #loc85])
#loc132 = loc(fused[#loc89, #loc90])
