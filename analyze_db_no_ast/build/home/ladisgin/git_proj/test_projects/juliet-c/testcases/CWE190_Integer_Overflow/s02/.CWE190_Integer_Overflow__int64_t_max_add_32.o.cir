!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc115)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_add_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc119)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc118)
    cir.store %0, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc119)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc122)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc16)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc17)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc122)
      %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc18)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc123)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc20)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc21)
      cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc124)
    } loc(#loc121)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc126)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc26)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc27)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc126)
      cir.scope {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc128)
        %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc32)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc31)
        %11 = cir.binop(add, %8, %10) nsw : !s64i loc(#loc32)
        cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc128)
        %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc33)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc34)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc4)
  } loc(#loc116)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_add_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc129)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc134)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc135)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc134)
    cir.store %0, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc135)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc49)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc136)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc138)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc54)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc55)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc138)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc56)
      %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc56)
      cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc139)
      %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc58)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc59)
      cir.store %9, %10 : !s64i, !cir.ptr<!s64i> loc(#loc140)
    } loc(#loc137)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc142)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc64)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc65)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc142)
      cir.scope {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc144)
        %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc70)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc69)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc69)
        %11 = cir.binop(add, %8, %10) nsw : !s64i loc(#loc70)
        cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc144)
        %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc71)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc72)
      } loc(#loc143)
    } loc(#loc141)
    cir.return loc(#loc42)
  } loc(#loc132)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc149)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc148)
    cir.store %0, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc149)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc84)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc150)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc152)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc89)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc90)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc152)
      %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc91)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc153)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc93)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc94)
      cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc154)
    } loc(#loc151)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc156)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc99)
      %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc100)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc156)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc103)
        %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc104)
        %9 = cir.cmp(lt, %7, %8) : !s64i, !s32i loc(#loc158)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc105)
        cir.if %10 {
          %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc160)
          %12 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc111)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc110)
          %15 = cir.binop(add, %12, %14) nsw : !s64i loc(#loc111)
          cir.store %15, %11 : !s64i, !cir.ptr<!s64i> loc(#loc160)
          %16 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc112)
          cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc113)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc75)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc75)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc114)
        } loc(#loc159)
      } loc(#loc157)
    } loc(#loc155)
    cir.return loc(#loc77)
  } loc(#loc146)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":42:1)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":24:13)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":25:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":25:26)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":26:26)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":27:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":29:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":29:25)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":29:24)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":31:16)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":32:21)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":32:10)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":32:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":34:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":41:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":35:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":35:25)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":35:24)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":36:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":40:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":38:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":38:37)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":38:30)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":39:31)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":39:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":99:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":103:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":101:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":101:13)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":102:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":102:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":49:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":69:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":51:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":51:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":52:26)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":53:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":53:26)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":54:12)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":54:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":55:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":60:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":56:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":56:25)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":56:24)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":58:16)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":58:9)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":59:21)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":59:10)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":59:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":61:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":68:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":62:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":62:25)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":62:24)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":63:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":67:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":65:13)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":65:37)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":65:30)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":66:31)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":66:13)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":94:23)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":72:1)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":97:1)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":74:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":74:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":75:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":75:26)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":76:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":76:26)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":77:12)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":77:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":78:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":83:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":79:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":79:25)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":79:24)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":81:16)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":81:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":82:21)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":82:10)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":82:9)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":84:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":96:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":85:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":85:25)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":85:24)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":87:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":95:9)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":87:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":87:20)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":87:18)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":88:9)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":91:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":93:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":89:13)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":89:37)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":89:30)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":90:31)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":90:13)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_add_32.c":94:13)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc12, #loc11])
#loc121 = loc(fused[#loc13, #loc14])
#loc122 = loc(fused[#loc15, #loc16])
#loc123 = loc(fused[#loc19, #loc18])
#loc124 = loc(fused[#loc22, #loc20])
#loc125 = loc(fused[#loc23, #loc24])
#loc126 = loc(fused[#loc25, #loc26])
#loc127 = loc(fused[#loc28, #loc29])
#loc128 = loc(fused[#loc30, #loc31])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc37, #loc38])
#loc131 = loc(fused[#loc39, #loc40])
#loc132 = loc(fused[#loc41, #loc42])
#loc133 = loc(fused[#loc43, #loc44])
#loc134 = loc(fused[#loc45, #loc46])
#loc135 = loc(fused[#loc47, #loc48])
#loc136 = loc(fused[#loc50, #loc49])
#loc137 = loc(fused[#loc51, #loc52])
#loc138 = loc(fused[#loc53, #loc54])
#loc139 = loc(fused[#loc57, #loc56])
#loc140 = loc(fused[#loc60, #loc58])
#loc141 = loc(fused[#loc61, #loc62])
#loc142 = loc(fused[#loc63, #loc64])
#loc143 = loc(fused[#loc66, #loc67])
#loc144 = loc(fused[#loc68, #loc69])
#loc145 = loc(fused[#loc73, #loc74])
#loc146 = loc(fused[#loc76, #loc77])
#loc147 = loc(fused[#loc78, #loc79])
#loc148 = loc(fused[#loc80, #loc81])
#loc149 = loc(fused[#loc82, #loc83])
#loc150 = loc(fused[#loc85, #loc84])
#loc151 = loc(fused[#loc86, #loc87])
#loc152 = loc(fused[#loc88, #loc89])
#loc153 = loc(fused[#loc92, #loc91])
#loc154 = loc(fused[#loc95, #loc93])
#loc155 = loc(fused[#loc96, #loc97])
#loc156 = loc(fused[#loc98, #loc99])
#loc157 = loc(fused[#loc101, #loc102])
#loc158 = loc(fused[#loc103, #loc104])
#loc159 = loc(fused[#loc106, #loc107, #loc108, #loc102])
#loc160 = loc(fused[#loc109, #loc110])
