!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc252)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc253)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc254)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc255)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc256)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc258)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc259)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc261)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc261)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc23)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc263)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc264)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc265)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc266)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc268)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc32)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc36)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
          } loc(#loc269)
        } loc(#loc267)
      } loc(#loc262)
    } loc(#loc260)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc271)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc273)
        cir.scope {
          %4 = cir.const #cir.int<0> : !s32i loc(#loc47)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc47)
          cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc275)
          cir.for : cond {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc49)
            %7 = cir.const #cir.int<100> : !s32i loc(#loc50)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc50)
            %9 = cir.cmp(lt, %6, %8) : !u64i, !s32i loc(#loc276)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc51)
            cir.condition(%10) loc(#loc51)
          } body {
            cir.scope {
              %6 = cir.const #cir.int<0> : !s32i loc(#loc53)
              %7 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc54)
              %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              %9 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %7 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc56)
              cir.store %6, %10 : !s32i, !cir.ptr<!s32i> loc(#loc278)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc57)
              %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc58)
              %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
              %15 = cir.get_member %14[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc60)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc279)
            } loc(#loc277)
            cir.yield loc(#loc46)
          } step {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %7 = cir.unary(inc, %6) : !u64i, !u64i loc(#loc62)
            cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc280)
            cir.yield loc(#loc274)
          } loc(#loc274)
        } loc(#loc274)
      } loc(#loc272)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc282)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc69)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc69)
          cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc284)
          cir.for : cond {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc72)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc72)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc285)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc73)
            cir.condition(%16) loc(#loc73)
          } body {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc75)
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc76)
              %14 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc77)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc78)
              %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
              cir.copy %17 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc77)
            } loc(#loc286)
            cir.yield loc(#loc68)
          } step {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc80)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc81)
            cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc287)
            cir.yield loc(#loc283)
          } loc(#loc283)
        } loc(#loc283)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc82)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc83)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!ty__twoIntsStruct>, %5 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc84)
        cir.call @printStructLine(%6) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc85)
        %7 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc86)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc87)
        cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc86)
      } loc(#loc281)
    } loc(#loc270)
    cir.return loc(#loc12)
  } loc(#loc257)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc289)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc90)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc290)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc92)
    cir.return loc(#loc89)
  } loc(#loc288)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc291)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc292)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc294)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc103)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc295)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc297)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc297)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc107)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc107)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc98)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc98)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc112)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc113)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc114)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc114)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc299)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc300)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc113)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc301)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc302)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc121)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc304)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc123)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc125)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc126)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc127)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc125)
          } loc(#loc305)
        } loc(#loc303)
      } loc(#loc298)
    } loc(#loc296)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc307)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc309)
        cir.scope {
          %4 = cir.const #cir.int<0> : !s32i loc(#loc138)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc138)
          cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc311)
          cir.for : cond {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc140)
            %7 = cir.const #cir.int<100> : !s32i loc(#loc141)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc141)
            %9 = cir.cmp(lt, %6, %8) : !u64i, !s32i loc(#loc312)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc142)
            cir.condition(%10) loc(#loc142)
          } body {
            cir.scope {
              %6 = cir.const #cir.int<0> : !s32i loc(#loc144)
              %7 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc145)
              %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc146)
              %9 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %7 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc146)
              %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc56)
              cir.store %6, %10 : !s32i, !cir.ptr<!s32i> loc(#loc314)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc147)
              %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc148)
              %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc149)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc149)
              %15 = cir.get_member %14[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc60)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc315)
            } loc(#loc313)
            cir.yield loc(#loc137)
          } step {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc150)
            %7 = cir.unary(inc, %6) : !u64i, !u64i loc(#loc151)
            cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc316)
            cir.yield loc(#loc310)
          } loc(#loc310)
        } loc(#loc310)
      } loc(#loc308)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc318)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc158)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc158)
          cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc320)
          cir.for : cond {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc160)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc161)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc161)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc321)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc162)
            cir.condition(%16) loc(#loc162)
          } body {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc165)
              %14 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc167)
              %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc168)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc168)
              cir.copy %17 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
            } loc(#loc322)
            cir.yield loc(#loc157)
          } step {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc169)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc170)
            cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc323)
            cir.yield loc(#loc319)
          } loc(#loc319)
        } loc(#loc319)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc171)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc172)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!ty__twoIntsStruct>, %5 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc173)
        cir.call @printStructLine(%6) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc174)
        %7 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc175)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc176)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc176)
        cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc175)
      } loc(#loc317)
    } loc(#loc306)
    cir.return loc(#loc100)
  } loc(#loc293)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc325)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc181)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc326)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc328)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc328)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc185)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc185)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc188)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc189)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc189)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc330)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc331)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc188)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc332)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc333)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc196)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc197)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc197)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc335)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc198)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc200)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc201)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc202)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc200)
          } loc(#loc336)
        } loc(#loc334)
      } loc(#loc329)
    } loc(#loc327)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc338)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc340)
        cir.scope {
          %4 = cir.const #cir.int<0> : !s32i loc(#loc213)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc213)
          cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc342)
          cir.for : cond {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc215)
            %7 = cir.const #cir.int<100> : !s32i loc(#loc216)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc216)
            %9 = cir.cmp(lt, %6, %8) : !u64i, !s32i loc(#loc343)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc217)
            cir.condition(%10) loc(#loc217)
          } body {
            cir.scope {
              %6 = cir.const #cir.int<0> : !s32i loc(#loc219)
              %7 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc220)
              %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc221)
              %9 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %7 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc221)
              %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc56)
              cir.store %6, %10 : !s32i, !cir.ptr<!s32i> loc(#loc345)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc222)
              %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc223)
              %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc224)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc224)
              %15 = cir.get_member %14[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc60)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc346)
            } loc(#loc344)
            cir.yield loc(#loc212)
          } step {
            %6 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc225)
            %7 = cir.unary(inc, %6) : !u64i, !u64i loc(#loc226)
            cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc347)
            cir.yield loc(#loc341)
          } loc(#loc341)
        } loc(#loc341)
      } loc(#loc339)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc349)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc233)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc233)
          cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc351)
          cir.for : cond {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc235)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc236)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc236)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc352)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc237)
            cir.condition(%16) loc(#loc237)
          } body {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc239)
              %13 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc240)
              %14 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc241)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc242)
              %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc243)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc243)
              cir.copy %17 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc241)
            } loc(#loc353)
            cir.yield loc(#loc232)
          } step {
            %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc244)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc245)
            cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc354)
            cir.yield loc(#loc350)
          } loc(#loc350)
        } loc(#loc350)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc246)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc247)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!ty__twoIntsStruct>, %5 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc248)
        cir.call @printStructLine(%6) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc249)
        %7 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc250)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc251)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc251)
        cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc250)
      } loc(#loc348)
    } loc(#loc337)
    cir.return loc(#loc178)
  } loc(#loc324)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":53:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":23:21)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":25:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":25:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":28:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":28:40)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":28:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":28:63)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":28:64)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":28:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":29:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":29:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":29:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":29:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":29:18)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":29:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":29:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":29:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":29:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":31:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":52:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":32:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":32:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":33:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":41:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":34:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":34:20)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":36:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":40:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":36:22)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":36:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":36:25)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":36:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":36:27)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":37:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":38:36)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":38:24)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":38:17)
#loc56 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":39:36)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":39:24)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":39:17)
#loc60 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":36:35)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":36:34)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":42:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":51:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":43:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":43:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":45:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":48:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":45:22)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":45:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":45:25)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":45:29)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":45:27)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":46:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":47:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":47:22)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":47:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":47:34)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":47:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":45:35)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":45:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":49:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":49:35)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":49:36)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":49:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":50:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":50:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":134:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":138:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":136:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":136:14)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":137:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":137:14)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc95 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc96 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc97 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":67:19)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":60:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":97:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":62:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":62:21)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":63:12)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":63:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":64:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":74:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":64:8)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":64:27)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":65:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":68:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":70:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":67:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":72:33)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":72:40)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":72:44)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":72:64)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":72:65)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":72:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":73:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":73:37)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":73:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":73:21)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":73:18)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":73:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":73:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":73:34)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":73:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":75:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":96:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":76:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":76:33)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":77:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":85:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":78:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":78:20)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":80:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":84:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":80:22)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":80:18)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":80:25)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":80:29)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":80:27)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":81:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":82:36)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":82:24)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":82:17)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":83:36)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":83:24)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":83:17)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":80:35)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":80:34)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":86:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":95:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":87:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":87:20)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":89:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":92:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":89:22)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":89:18)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":89:25)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":89:29)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":89:27)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":90:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":91:17)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":91:22)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":91:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":91:34)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":91:27)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":89:35)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":89:34)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":93:30)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":93:35)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":93:36)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":93:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":94:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":94:18)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":100:1)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":132:1)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":102:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":102:21)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":103:12)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":103:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":104:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":109:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":104:8)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":104:26)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":105:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":107:33)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":107:40)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":107:44)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":107:64)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":107:65)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":107:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":108:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":108:37)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":108:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":108:21)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":108:18)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":108:27)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":108:28)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":108:34)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":108:33)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":110:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":131:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":111:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":111:33)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":112:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":120:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":113:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":113:20)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":115:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":119:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":115:22)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":115:18)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":115:25)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":115:29)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":115:27)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":116:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":117:36)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":117:24)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":117:17)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":118:36)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":118:24)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":118:17)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":115:35)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":115:34)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":121:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":130:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":122:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":122:20)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":124:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":127:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":124:22)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":124:18)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":124:25)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":124:29)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":124:27)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":125:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":126:17)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":126:22)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":126:23)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":126:34)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":126:27)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":124:35)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":124:34)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":128:30)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":128:35)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":128:36)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":128:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":129:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c":129:18)
#loc252 = loc(fused[#loc1, #loc2])
#loc253 = loc(fused[#loc3, #loc4])
#loc254 = loc(fused[#loc5, #loc6])
#loc255 = loc(fused[#loc7, #loc8])
#loc256 = loc(fused[#loc9, #loc10])
#loc257 = loc(fused[#loc11, #loc12])
#loc258 = loc(fused[#loc13, #loc14])
#loc259 = loc(fused[#loc16, #loc15])
#loc260 = loc(fused[#loc17, #loc18])
#loc261 = loc(fused[#loc19, #loc20])
#loc262 = loc(fused[#loc21, #loc18])
#loc263 = loc(fused[#loc24, #loc25])
#loc264 = loc(fused[#loc23, #loc25])
#loc265 = loc(fused[#loc22, #loc26])
#loc266 = loc(fused[#loc27, #loc26])
#loc267 = loc(fused[#loc28, #loc29])
#loc268 = loc(fused[#loc30, #loc31])
#loc269 = loc(fused[#loc33, #loc29])
#loc270 = loc(fused[#loc37, #loc38])
#loc271 = loc(fused[#loc39, #loc40])
#loc272 = loc(fused[#loc41, #loc42])
#loc273 = loc(fused[#loc43, #loc44])
#loc274 = loc(fused[#loc45, #loc46])
#loc275 = loc(fused[#loc48, #loc47])
#loc276 = loc(fused[#loc49, #loc50])
#loc277 = loc(fused[#loc52, #loc46])
#loc278 = loc(fused[#loc55, #loc53])
#loc279 = loc(fused[#loc59, #loc57])
#loc280 = loc(fused[#loc62, #loc61])
#loc281 = loc(fused[#loc63, #loc64])
#loc282 = loc(fused[#loc65, #loc66])
#loc283 = loc(fused[#loc67, #loc68])
#loc284 = loc(fused[#loc70, #loc69])
#loc285 = loc(fused[#loc71, #loc72])
#loc286 = loc(fused[#loc74, #loc68])
#loc287 = loc(fused[#loc81, #loc80])
#loc288 = loc(fused[#loc88, #loc89])
#loc289 = loc(fused[#loc90, #loc91])
#loc290 = loc(fused[#loc92, #loc93])
#loc291 = loc(fused[#loc94, #loc95])
#loc292 = loc(fused[#loc96, #loc97])
#loc293 = loc(fused[#loc99, #loc100])
#loc294 = loc(fused[#loc101, #loc102])
#loc295 = loc(fused[#loc104, #loc103])
#loc296 = loc(fused[#loc105, #loc106])
#loc297 = loc(fused[#loc107, #loc108])
#loc298 = loc(fused[#loc109, #loc110, #loc111, #loc106])
#loc299 = loc(fused[#loc115, #loc116])
#loc300 = loc(fused[#loc114, #loc116])
#loc301 = loc(fused[#loc113, #loc117])
#loc302 = loc(fused[#loc118, #loc117])
#loc303 = loc(fused[#loc119, #loc120])
#loc304 = loc(fused[#loc121, #loc122])
#loc305 = loc(fused[#loc124, #loc120])
#loc306 = loc(fused[#loc128, #loc129])
#loc307 = loc(fused[#loc130, #loc131])
#loc308 = loc(fused[#loc132, #loc133])
#loc309 = loc(fused[#loc134, #loc135])
#loc310 = loc(fused[#loc136, #loc137])
#loc311 = loc(fused[#loc139, #loc138])
#loc312 = loc(fused[#loc140, #loc141])
#loc313 = loc(fused[#loc143, #loc137])
#loc314 = loc(fused[#loc146, #loc144])
#loc315 = loc(fused[#loc149, #loc147])
#loc316 = loc(fused[#loc151, #loc150])
#loc317 = loc(fused[#loc152, #loc153])
#loc318 = loc(fused[#loc154, #loc155])
#loc319 = loc(fused[#loc156, #loc157])
#loc320 = loc(fused[#loc159, #loc158])
#loc321 = loc(fused[#loc160, #loc161])
#loc322 = loc(fused[#loc163, #loc157])
#loc323 = loc(fused[#loc170, #loc169])
#loc324 = loc(fused[#loc177, #loc178])
#loc325 = loc(fused[#loc179, #loc180])
#loc326 = loc(fused[#loc182, #loc181])
#loc327 = loc(fused[#loc183, #loc184])
#loc328 = loc(fused[#loc185, #loc186])
#loc329 = loc(fused[#loc187, #loc184])
#loc330 = loc(fused[#loc190, #loc191])
#loc331 = loc(fused[#loc189, #loc191])
#loc332 = loc(fused[#loc188, #loc192])
#loc333 = loc(fused[#loc193, #loc192])
#loc334 = loc(fused[#loc194, #loc195])
#loc335 = loc(fused[#loc196, #loc197])
#loc336 = loc(fused[#loc199, #loc195])
#loc337 = loc(fused[#loc203, #loc204])
#loc338 = loc(fused[#loc205, #loc206])
#loc339 = loc(fused[#loc207, #loc208])
#loc340 = loc(fused[#loc209, #loc210])
#loc341 = loc(fused[#loc211, #loc212])
#loc342 = loc(fused[#loc214, #loc213])
#loc343 = loc(fused[#loc215, #loc216])
#loc344 = loc(fused[#loc218, #loc212])
#loc345 = loc(fused[#loc221, #loc219])
#loc346 = loc(fused[#loc224, #loc222])
#loc347 = loc(fused[#loc226, #loc225])
#loc348 = loc(fused[#loc227, #loc228])
#loc349 = loc(fused[#loc229, #loc230])
#loc350 = loc(fused[#loc231, #loc232])
#loc351 = loc(fused[#loc234, #loc233])
#loc352 = loc(fused[#loc235, #loc236])
#loc353 = loc(fused[#loc238, #loc232])
#loc354 = loc(fused[#loc245, #loc244])
