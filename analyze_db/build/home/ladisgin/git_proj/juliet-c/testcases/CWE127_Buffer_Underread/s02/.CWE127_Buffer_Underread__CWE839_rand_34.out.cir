!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":129:10)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":129:14)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":129:20)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":129:32)
#true = #cir.bool<true> : !cir.bool
!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType = !cir.struct<union "CWE127_Buffer_Underread__CWE839_rand_34_unionType" {!s32i, !s32i}>
#loc168 = loc(fused[#loc58, #loc59])
#loc169 = loc(fused[#loc60, #loc61])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc146)
  cir.func private @printIntLine(!s32i) loc(#loc147)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType, !cir.ptr<!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc151)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc15)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc17)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
      cir.yield %23 : !u32i loc(#loc17)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc17)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc17)
      cir.yield %27 : !u32i loc(#loc17)
    }) : (!cir.bool) -> !u32i loc(#loc17)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc17)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc156)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc26)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc156)
      cir.scope {
        %15 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc158)
        %16 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc158)
        cir.store %16, %15 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc158)
        cir.scope {
          %17 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc33)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc34)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc160)
          cir.if %19 {
            %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc38)
            %21 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
            %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc39)
            %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc39)
            cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc40)
          } else {
            %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          } loc(#loc161)
        } loc(#loc159)
      } loc(#loc157)
    } loc(#loc155)
    cir.return loc(#loc9)
  } loc(#loc149)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc162)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc165)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_34_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_34_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    cir.return %17 : !s32i loc(#loc172)
  } loc(#loc167)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.alloca !ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType, !cir.ptr<!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc175)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc83)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc85)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %6 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc180)
      %8 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc26)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      cir.scope {
        %10 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc182)
        %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc182)
        cir.store %11, %10 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc182)
        cir.scope {
          %12 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc99)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc100)
          %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc184)
          cir.if %14 {
            %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %16 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc105)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc105)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc106)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc107)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc107)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          } loc(#loc185)
        } loc(#loc183)
      } loc(#loc181)
    } loc(#loc179)
    cir.return loc(#loc77)
  } loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc109)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType, !cir.ptr<!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc188)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc117)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc119)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc119)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc119)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc119)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc119)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc119)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc119)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc119)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc119)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc119)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc119)
      cir.yield %23 : !u32i loc(#loc119)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc119)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc119)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc119)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc119)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc119)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc119)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc119)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc119)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc119)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc119)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc119)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc119)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc119)
      cir.yield %27 : !u32i loc(#loc119)
    }) : (!cir.bool) -> !u32i loc(#loc119)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc119)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc193)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE127_Buffer_Underread__CWE839_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc26)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc126)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc193)
      cir.scope {
        %15 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc195)
        %16 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc195)
        cir.store %16, %15 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc195)
        cir.scope {
          %17 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc133)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc134)
          %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc197)
          %20 = cir.ternary(%19, true {
            %21 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc137)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc198)
            %24 = cir.ternary(%23, true {
              %25 = cir.const #true loc(#loc135)
              cir.yield %25 : !cir.bool loc(#loc135)
            }, false {
              %25 = cir.const #false loc(#loc135)
              cir.yield %25 : !cir.bool loc(#loc135)
            }) : (!cir.bool) -> !cir.bool loc(#loc135)
            cir.yield %24 : !cir.bool loc(#loc135)
          }, false {
            %21 = cir.const #false loc(#loc135)
            cir.yield %21 : !cir.bool loc(#loc135)
          }) : (!cir.bool) -> !cir.bool loc(#loc135)
          cir.if %20 {
            %21 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc142)
            %22 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc143)
            %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc143)
            %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc144)
          } else {
            %21 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc109)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc109)
            cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc145)
          } loc(#loc199)
        } loc(#loc196)
      } loc(#loc194)
    } loc(#loc192)
    cir.return loc(#loc111)
  } loc(#loc186)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":49:27)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":28:1)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":53:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":30:5)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":30:9)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":31:5)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":31:55)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":33:13)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":33:12)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":33:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":35:12)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":35:5)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":36:26)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":22:9)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":36:5)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":37:5)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":52:5)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":38:9)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":38:28)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":23:9)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":39:9)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":51:9)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":40:13)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":40:34)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":43:13)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":50:13)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":43:17)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":43:24)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":44:13)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":46:13)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":48:13)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":45:37)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":45:30)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":45:17)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":49:17)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":115:1)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":119:1)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":117:5)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":117:13)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":118:5)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":118:13)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":134:15)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":136:15)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":139:15)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":141:15)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":129:1)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":144:1)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":130:1)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":132:27)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":132:22)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":132:5)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":134:5)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":135:5)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":135:50)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":136:5)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":139:5)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":140:5)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":140:49)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":141:5)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":143:12)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":143:5)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":60:1)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":86:1)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":62:5)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":62:9)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":63:5)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":63:55)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":65:13)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":65:12)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":65:5)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":68:12)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":68:5)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":69:26)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":69:5)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":70:5)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":85:5)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":71:9)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":71:28)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":72:9)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":84:9)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":73:13)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":73:34)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":76:13)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":83:13)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":76:17)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":76:24)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":77:13)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":79:13)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":81:13)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":78:37)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":78:30)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":78:17)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":82:27)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":82:17)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":109:27)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":89:1)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":113:1)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":91:5)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":91:9)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":92:5)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":92:55)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":94:13)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":94:12)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":94:5)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":96:12)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":96:5)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":97:26)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":97:5)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":98:5)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":112:5)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":99:9)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":99:28)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":100:9)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":111:9)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":101:13)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":101:34)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":103:13)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":110:13)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":103:17)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":103:25)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":103:27)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":103:30)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":103:38)
#loc138 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":103:40)
#loc139 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":104:13)
#loc140 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":106:13)
#loc141 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":108:13)
#loc142 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":105:37)
#loc143 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":105:30)
#loc144 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":105:17)
#loc145 = loc("CWE127_Buffer_Underread__CWE839_rand_34.c":109:17)
#loc146 = loc(fused[#loc1, #loc2])
#loc147 = loc(fused[#loc3, #loc4])
#loc148 = loc(fused[#loc5, #loc6])
#loc149 = loc(fused[#loc8, #loc9])
#loc150 = loc(fused[#loc10, #loc11])
#loc151 = loc(fused[#loc12, #loc13])
#loc152 = loc(fused[#loc16, #loc14])
#loc153 = loc(fused[#loc18, #loc17])
#loc154 = loc(fused[#loc21, #loc19])
#loc155 = loc(fused[#loc22, #loc23])
#loc156 = loc(fused[#loc24, #loc25])
#loc157 = loc(fused[#loc27, #loc28])
#loc158 = loc(fused[#loc29, #loc30])
#loc159 = loc(fused[#loc31, #loc32])
#loc160 = loc(fused[#loc33, #loc34])
#loc161 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc162 = loc(fused[#loc42, #loc43])
#loc163 = loc(fused[#loc44, #loc45])
#loc164 = loc(fused[#loc46, #loc47])
#loc165 = loc(fused[#loc48, #loc49])
#loc166 = loc(fused[#loc50, #loc51])
#loc167 = loc(fused[#loc56, #loc57])
#loc170 = loc(fused[#loc67, #loc68])
#loc171 = loc(fused[#loc71, #loc72])
#loc172 = loc(fused[#loc75, #loc74])
#loc173 = loc(fused[#loc76, #loc77])
#loc174 = loc(fused[#loc78, #loc79])
#loc175 = loc(fused[#loc80, #loc81])
#loc176 = loc(fused[#loc84, #loc82])
#loc177 = loc(fused[#loc86, #loc85])
#loc178 = loc(fused[#loc88, #loc87])
#loc179 = loc(fused[#loc89, #loc90])
#loc180 = loc(fused[#loc91, #loc92])
#loc181 = loc(fused[#loc93, #loc94])
#loc182 = loc(fused[#loc95, #loc96])
#loc183 = loc(fused[#loc97, #loc98])
#loc184 = loc(fused[#loc99, #loc100])
#loc185 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc186 = loc(fused[#loc110, #loc111])
#loc187 = loc(fused[#loc112, #loc113])
#loc188 = loc(fused[#loc114, #loc115])
#loc189 = loc(fused[#loc118, #loc116])
#loc190 = loc(fused[#loc120, #loc119])
#loc191 = loc(fused[#loc122, #loc121])
#loc192 = loc(fused[#loc123, #loc124])
#loc193 = loc(fused[#loc125, #loc126])
#loc194 = loc(fused[#loc127, #loc128])
#loc195 = loc(fused[#loc129, #loc130])
#loc196 = loc(fused[#loc131, #loc132])
#loc197 = loc(fused[#loc133, #loc134])
#loc198 = loc(fused[#loc136, #loc138])
#loc199 = loc(fused[#loc139, #loc140, #loc141, #loc132])
