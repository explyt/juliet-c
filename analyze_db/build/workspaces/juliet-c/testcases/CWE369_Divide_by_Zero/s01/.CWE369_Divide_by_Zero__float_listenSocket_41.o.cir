!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc21 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":46:21)
#loc22 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":46:27)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":157:25)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":157:31)
#loc309 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":137:25)
#loc310 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":137:31)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc340 = loc(fused[#loc21, #loc22])
#loc395 = loc(fused[#loc168, #loc169])
#loc448 = loc(fused[#loc309, #loc310])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc330)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc331)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc332)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc333)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc334)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc335)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc336)
  cir.func private @close(!s32i) -> !s32i loc(#loc337)
  cir.func private @printIntLine(!s32i) loc(#loc338)
  cir.func internal private @badSink(%arg0: !cir.float loc(fused[#loc21, #loc22])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc340)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc23)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc342)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc28)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc29)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc29)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc343)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc343)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc342)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc31)
    } loc(#loc341)
    cir.return loc(#loc20)
  } loc(#loc339)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc345)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc36)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc346)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc348)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc349)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc350)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc351)
      %7 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc352)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc45)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc350)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc47)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc351)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc54)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc55)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc56)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
            cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc355)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc62)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc63)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc63)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc357)
              cir.if %55 {
                cir.break loc(#loc65)
              } loc(#loc358)
            } loc(#loc356)
            %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc359)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc68)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc360)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc361)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc73)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc73)
            %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc362)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc76)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc76)
            %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
            %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
            cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc363)
            %26 = cir.const #cir.int<27015> : !s32i loc(#loc80)
            %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc80)
            %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc81)
            %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
            cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc364)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %53 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc366)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc367)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc367)
              %56 = cir.call @bind(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc92)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc93)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc93)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc368)
              cir.if %59 {
                cir.break loc(#loc95)
              } loc(#loc369)
            } loc(#loc365)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %53 = cir.const #cir.int<5> : !s32i loc(#loc99)
              %54 = cir.call @listen(%52, %53) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc100)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc101)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc101)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc371)
              cir.if %57 {
                cir.break loc(#loc103)
              } loc(#loc372)
            } loc(#loc370)
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc105)
            %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc106)
            %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc107)
            cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc373)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc113)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc113)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc375)
              cir.if %55 {
                cir.break loc(#loc115)
              } loc(#loc376)
            } loc(#loc374)
            %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc117)
            %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
            %37 = cir.const #cir.int<20> : !s32i loc(#loc118)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc119)
            %39 = cir.binop(sub, %37, %38) nsw : !s32i loc(#loc118)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc118)
            %41 = cir.const #cir.int<0> : !s32i loc(#loc120)
            %42 = cir.call @recv(%34, %36, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc121)
            %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc121)
            cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc377)
            cir.scope {
              %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc127)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc127)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc379)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc128)
                cir.yield %57 : !cir.bool loc(#loc128)
              }, false {
                %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc130)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc380)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc128)
                  cir.yield %61 : !cir.bool loc(#loc128)
                }, false {
                  %61 = cir.const #false loc(#loc128)
                  cir.yield %61 : !cir.bool loc(#loc128)
                }) : (!cir.bool) -> !cir.bool loc(#loc128)
                cir.yield %60 : !cir.bool loc(#loc128)
              }) : (!cir.bool) -> !cir.bool loc(#loc128)
              cir.if %56 {
                cir.break loc(#loc132)
              } loc(#loc381)
            } loc(#loc378)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc133)
            %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc133)
            %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc134)
            %47 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc135)
            %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc135)
            cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc382)
            %49 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc136)
            %50 = cir.call @atof(%49) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc137)
            %51 = cir.cast(floating, %50 : !cir.double), !cir.float loc(#loc137)
            cir.store %51, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc383)
          } loc(#loc354)
          cir.yield loc(#loc51)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc140)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc140)
          cir.condition(%13) loc(#loc140)
        } loc(#loc353)
      } loc(#loc353)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc143)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc144)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc144)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc385)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc147)
        } loc(#loc386)
      } loc(#loc384)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc150)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc151)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc151)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc388)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc154)
        } loc(#loc389)
      } loc(#loc387)
    } loc(#loc347)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc155)
    cir.call @badSink(%2) : (!cir.float) -> () loc(#loc156)
    cir.return loc(#loc33)
  } loc(#loc344)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc391)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc159)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc392)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc161)
    cir.return loc(#loc158)
  } loc(#loc390)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc393)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc165)
  cir.func internal private @goodB2GSink(%arg0: !cir.float loc(fused[#loc168, #loc169])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc395)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc170)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc173)
      %2 = cir.cast(floating, %1 : !cir.float), !cir.double loc(#loc173)
      %3 = cir.fabs %2 : !cir.double loc(#loc173)
      %4 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc174)
      %5 = cir.cmp(gt, %3, %4) : !cir.double, !cir.bool loc(#loc397)
      cir.if %5 {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc399)
        %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc181)
        %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc182)
        %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc182)
        %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc400)
        %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc400)
        cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc399)
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc183)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc184)
      } else {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc165)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc165)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc185)
      } loc(#loc398)
    } loc(#loc396)
    cir.return loc(#loc167)
  } loc(#loc394)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc402)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc190)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc403)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc405)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc406)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc407)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc408)
      %7 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc409)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc199)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc199)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc407)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc201)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc201)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc408)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc208)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc209)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc210)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc211)
            cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc412)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc216)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc217)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc217)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc414)
              cir.if %55 {
                cir.break loc(#loc219)
              } loc(#loc415)
            } loc(#loc413)
            %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc416)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc222)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc417)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc418)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc227)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc227)
            %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc419)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc229)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc229)
            %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
            %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
            cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc420)
            %26 = cir.const #cir.int<27015> : !s32i loc(#loc231)
            %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc231)
            %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc232)
            %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
            cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc421)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc237)
              %53 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc423)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc424)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc424)
              %56 = cir.call @bind(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc242)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc243)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc243)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc425)
              cir.if %59 {
                cir.break loc(#loc245)
              } loc(#loc426)
            } loc(#loc422)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc248)
              %53 = cir.const #cir.int<5> : !s32i loc(#loc249)
              %54 = cir.call @listen(%52, %53) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc250)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc251)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc251)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc428)
              cir.if %57 {
                cir.break loc(#loc253)
              } loc(#loc429)
            } loc(#loc427)
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc254)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc255)
            %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc256)
            %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc257)
            cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc430)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc262)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc263)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc263)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc432)
              cir.if %55 {
                cir.break loc(#loc265)
              } loc(#loc433)
            } loc(#loc431)
            %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc266)
            %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc267)
            %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc267)
            %37 = cir.const #cir.int<20> : !s32i loc(#loc268)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc269)
            %39 = cir.binop(sub, %37, %38) nsw : !s32i loc(#loc268)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc268)
            %41 = cir.const #cir.int<0> : !s32i loc(#loc270)
            %42 = cir.call @recv(%34, %36, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc271)
            %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc271)
            cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc434)
            cir.scope {
              %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc276)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc277)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc277)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc436)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc278)
                cir.yield %57 : !cir.bool loc(#loc278)
              }, false {
                %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc279)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc280)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc437)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc278)
                  cir.yield %61 : !cir.bool loc(#loc278)
                }, false {
                  %61 = cir.const #false loc(#loc278)
                  cir.yield %61 : !cir.bool loc(#loc278)
                }) : (!cir.bool) -> !cir.bool loc(#loc278)
                cir.yield %60 : !cir.bool loc(#loc278)
              }) : (!cir.bool) -> !cir.bool loc(#loc278)
              cir.if %56 {
                cir.break loc(#loc282)
              } loc(#loc438)
            } loc(#loc435)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc283)
            %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc283)
            %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc284)
            %47 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc285)
            %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc285)
            cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc439)
            %49 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc286)
            %50 = cir.call @atof(%49) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc287)
            %51 = cir.cast(floating, %50 : !cir.double), !cir.float loc(#loc287)
            cir.store %51, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc440)
          } loc(#loc411)
          cir.yield loc(#loc205)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc290)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc290)
          cir.condition(%13) loc(#loc290)
        } loc(#loc410)
      } loc(#loc410)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc293)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc294)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc294)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc442)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc296)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc297)
        } loc(#loc443)
      } loc(#loc441)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc300)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc301)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc301)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc445)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc303)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc304)
        } loc(#loc446)
      } loc(#loc444)
    } loc(#loc404)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc305)
    cir.call @goodB2GSink(%2) : (!cir.float) -> () loc(#loc306)
    cir.return loc(#loc187)
  } loc(#loc401)
  cir.func internal private @goodG2BSink(%arg0: !cir.float loc(fused[#loc309, #loc310])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc448)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc311)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc450)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc316)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc317)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc317)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc451)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc451)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc450)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc318)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc319)
    } loc(#loc449)
    cir.return loc(#loc308)
  } loc(#loc447)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc453)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc324)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc454)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc326)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc455)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc328)
    cir.call @goodG2BSink(%3) : (!cir.float) -> () loc(#loc329)
    cir.return loc(#loc321)
  } loc(#loc452)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_41.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":102:1)
#loc14 = loc("/usr/include/stdlib.h":103:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":46:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":53:1)
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":47:1)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":48:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":52:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":50:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":50:40)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":50:28)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":50:36)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":51:22)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":51:9)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":55:1)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":130:1)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":57:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":57:11)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":59:12)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":59:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":60:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":128:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":65:9)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":65:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":66:9)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":66:28)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":67:9)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":67:31)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":68:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":68:31)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":69:9)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":69:41)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":70:9)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":113:17)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":71:9)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":112:9)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":79:35)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":79:44)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":79:57)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":79:28)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":79:13)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":79:68)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":80:13)
#loc61 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":83:13)
#loc62 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":80:17)
#loc63 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":80:33)
#loc64 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":81:13)
#loc65 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":82:17)
#loc66 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":84:20)
#loc67 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":84:21)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":84:30)
#loc69 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":84:33)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":84:47)
#loc71 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":84:13)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":84:48)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":85:34)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":85:13)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":86:39)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":86:13)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":87:38)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":87:32)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":87:13)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":87:46)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":88:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":91:13)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":88:22)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":88:54)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":88:55)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":88:64)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":88:78)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":88:17)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":88:84)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":89:13)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":90:17)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":92:13)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":95:13)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":92:24)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":92:38)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":92:17)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":92:57)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":93:13)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":94:17)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":96:35)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":96:49)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":96:55)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":96:28)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":96:13)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":96:59)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":97:13)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":100:13)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":97:17)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":97:33)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":98:13)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":99:17)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":103:31)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":103:45)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":103:58)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":103:76)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":103:79)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":103:26)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":103:13)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":103:80)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":104:13)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":107:13)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":104:17)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":104:31)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":104:44)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":104:47)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":104:61)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":105:13)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":106:17)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":109:39)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":109:25)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":109:13)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":111:32)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":111:27)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":111:13)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":111:43)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":113:16)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":114:9)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":117:9)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":114:13)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":114:29)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":115:9)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":116:26)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":116:13)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":118:9)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":121:9)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":118:13)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":118:29)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":119:9)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":120:26)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":120:13)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":129:13)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":129:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":248:1)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":252:1)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":250:5)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":250:13)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":251:5)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":251:13)
#loc163 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc164 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":167:19)
#loc166 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":157:1)
#loc167 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":169:1)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":158:1)
#loc171 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":160:5)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":168:5)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":160:13)
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":160:21)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":160:8)
#loc176 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":161:5)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":164:5)
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":166:5)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":162:9)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":162:40)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":162:28)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":162:36)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":163:22)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":163:9)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":167:9)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":171:1)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":246:1)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":173:5)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":173:11)
#loc190 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":175:12)
#loc191 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":175:5)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":176:5)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":244:5)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":181:9)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":181:13)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":182:9)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":182:28)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":183:9)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":183:31)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":184:9)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":184:31)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":185:9)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":185:41)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":186:9)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":229:17)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":187:9)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":228:9)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":195:35)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":195:44)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":195:57)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":195:28)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":195:13)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":195:68)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":196:13)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":199:13)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":196:17)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":196:33)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":197:13)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":198:17)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":200:20)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":200:21)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":200:30)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":200:33)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":200:47)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":200:13)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":200:48)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":201:34)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":201:13)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":202:39)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":202:13)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":203:38)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":203:32)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":203:13)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":203:46)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":204:13)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":207:13)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":204:22)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":204:54)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":204:55)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":204:64)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":204:78)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":204:17)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":204:84)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":205:13)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":206:17)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":208:13)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":211:13)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":208:24)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":208:38)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":208:17)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":208:57)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":209:13)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":210:17)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":212:35)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":212:49)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":212:55)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":212:28)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":212:13)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":212:59)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":213:13)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":216:13)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":213:17)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":213:33)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":214:13)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":215:17)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":219:31)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":219:45)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":219:58)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":219:76)
#loc270 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":219:79)
#loc271 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":219:26)
#loc272 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":219:13)
#loc273 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":219:80)
#loc274 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":220:13)
#loc275 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":223:13)
#loc276 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":220:17)
#loc277 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":220:31)
#loc278 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":220:44)
#loc279 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":220:47)
#loc280 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":220:61)
#loc281 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":221:13)
#loc282 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":222:17)
#loc283 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":225:39)
#loc284 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":225:25)
#loc285 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":225:13)
#loc286 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":227:32)
#loc287 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":227:27)
#loc288 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":227:13)
#loc289 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":227:43)
#loc290 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":229:16)
#loc291 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":230:9)
#loc292 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":233:9)
#loc293 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":230:13)
#loc294 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":230:29)
#loc295 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":231:9)
#loc296 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":232:26)
#loc297 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":232:13)
#loc298 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":234:9)
#loc299 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":237:9)
#loc300 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":234:13)
#loc301 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":234:29)
#loc302 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":235:9)
#loc303 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":236:26)
#loc304 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":236:13)
#loc305 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":245:17)
#loc306 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":245:5)
#loc307 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":137:1)
#loc308 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":144:1)
#loc311 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":138:1)
#loc312 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":139:5)
#loc313 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":143:5)
#loc314 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":141:9)
#loc315 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":141:40)
#loc316 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":141:28)
#loc317 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":141:36)
#loc318 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":142:22)
#loc319 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":142:9)
#loc320 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":146:1)
#loc321 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":154:1)
#loc322 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":148:5)
#loc323 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":148:11)
#loc324 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":150:12)
#loc325 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":150:5)
#loc326 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":152:12)
#loc327 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":152:5)
#loc328 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":153:17)
#loc329 = loc("CWE369_Divide_by_Zero__float_listenSocket_41.c":153:5)
#loc330 = loc(fused[#loc1, #loc2])
#loc331 = loc(fused[#loc3, #loc4])
#loc332 = loc(fused[#loc5, #loc6])
#loc333 = loc(fused[#loc7, #loc8])
#loc334 = loc(fused[#loc9, #loc10])
#loc335 = loc(fused[#loc11, #loc12])
#loc336 = loc(fused[#loc13, #loc14])
#loc337 = loc(fused[#loc15, #loc16])
#loc338 = loc(fused[#loc17, #loc18])
#loc339 = loc(fused[#loc19, #loc20])
#loc341 = loc(fused[#loc24, #loc25])
#loc342 = loc(fused[#loc26, #loc27])
#loc343 = loc(fused[#loc28, #loc29])
#loc344 = loc(fused[#loc32, #loc33])
#loc345 = loc(fused[#loc34, #loc35])
#loc346 = loc(fused[#loc37, #loc36])
#loc347 = loc(fused[#loc38, #loc39])
#loc348 = loc(fused[#loc40, #loc41])
#loc349 = loc(fused[#loc42, #loc43])
#loc350 = loc(fused[#loc44, #loc45])
#loc351 = loc(fused[#loc46, #loc47])
#loc352 = loc(fused[#loc48, #loc49])
#loc353 = loc(fused[#loc50, #loc51])
#loc354 = loc(fused[#loc52, #loc53])
#loc355 = loc(fused[#loc58, #loc59])
#loc356 = loc(fused[#loc60, #loc61])
#loc357 = loc(fused[#loc62, #loc63])
#loc358 = loc(fused[#loc64, #loc61])
#loc359 = loc(fused[#loc66, #loc67])
#loc360 = loc(fused[#loc69, #loc70])
#loc361 = loc(fused[#loc71, #loc72])
#loc362 = loc(fused[#loc75, #loc73])
#loc363 = loc(fused[#loc79, #loc76])
#loc364 = loc(fused[#loc83, #loc84])
#loc365 = loc(fused[#loc85, #loc86])
#loc366 = loc(fused[#loc88, #loc89])
#loc367 = loc(fused[#loc90, #loc91])
#loc368 = loc(fused[#loc92, #loc93])
#loc369 = loc(fused[#loc94, #loc86])
#loc370 = loc(fused[#loc96, #loc97])
#loc371 = loc(fused[#loc100, #loc101])
#loc372 = loc(fused[#loc102, #loc97])
#loc373 = loc(fused[#loc108, #loc109])
#loc374 = loc(fused[#loc110, #loc111])
#loc375 = loc(fused[#loc112, #loc113])
#loc376 = loc(fused[#loc114, #loc111])
#loc377 = loc(fused[#loc122, #loc123])
#loc378 = loc(fused[#loc124, #loc125])
#loc379 = loc(fused[#loc126, #loc127])
#loc380 = loc(fused[#loc129, #loc130])
#loc381 = loc(fused[#loc131, #loc125])
#loc382 = loc(fused[#loc135, #loc133])
#loc383 = loc(fused[#loc138, #loc139])
#loc384 = loc(fused[#loc141, #loc142])
#loc385 = loc(fused[#loc143, #loc144])
#loc386 = loc(fused[#loc145, #loc142])
#loc387 = loc(fused[#loc148, #loc149])
#loc388 = loc(fused[#loc150, #loc151])
#loc389 = loc(fused[#loc152, #loc149])
#loc390 = loc(fused[#loc157, #loc158])
#loc391 = loc(fused[#loc159, #loc160])
#loc392 = loc(fused[#loc161, #loc162])
#loc393 = loc(fused[#loc163, #loc164])
#loc394 = loc(fused[#loc166, #loc167])
#loc396 = loc(fused[#loc171, #loc172])
#loc397 = loc(fused[#loc175, #loc174])
#loc398 = loc(fused[#loc176, #loc177, #loc178, #loc172])
#loc399 = loc(fused[#loc179, #loc180])
#loc400 = loc(fused[#loc181, #loc182])
#loc401 = loc(fused[#loc186, #loc187])
#loc402 = loc(fused[#loc188, #loc189])
#loc403 = loc(fused[#loc191, #loc190])
#loc404 = loc(fused[#loc192, #loc193])
#loc405 = loc(fused[#loc194, #loc195])
#loc406 = loc(fused[#loc196, #loc197])
#loc407 = loc(fused[#loc198, #loc199])
#loc408 = loc(fused[#loc200, #loc201])
#loc409 = loc(fused[#loc202, #loc203])
#loc410 = loc(fused[#loc204, #loc205])
#loc411 = loc(fused[#loc206, #loc207])
#loc412 = loc(fused[#loc212, #loc213])
#loc413 = loc(fused[#loc214, #loc215])
#loc414 = loc(fused[#loc216, #loc217])
#loc415 = loc(fused[#loc218, #loc215])
#loc416 = loc(fused[#loc220, #loc221])
#loc417 = loc(fused[#loc223, #loc224])
#loc418 = loc(fused[#loc225, #loc226])
#loc419 = loc(fused[#loc228, #loc227])
#loc420 = loc(fused[#loc230, #loc229])
#loc421 = loc(fused[#loc233, #loc234])
#loc422 = loc(fused[#loc235, #loc236])
#loc423 = loc(fused[#loc238, #loc239])
#loc424 = loc(fused[#loc240, #loc241])
#loc425 = loc(fused[#loc242, #loc243])
#loc426 = loc(fused[#loc244, #loc236])
#loc427 = loc(fused[#loc246, #loc247])
#loc428 = loc(fused[#loc250, #loc251])
#loc429 = loc(fused[#loc252, #loc247])
#loc430 = loc(fused[#loc258, #loc259])
#loc431 = loc(fused[#loc260, #loc261])
#loc432 = loc(fused[#loc262, #loc263])
#loc433 = loc(fused[#loc264, #loc261])
#loc434 = loc(fused[#loc272, #loc273])
#loc435 = loc(fused[#loc274, #loc275])
#loc436 = loc(fused[#loc276, #loc277])
#loc437 = loc(fused[#loc279, #loc280])
#loc438 = loc(fused[#loc281, #loc275])
#loc439 = loc(fused[#loc285, #loc283])
#loc440 = loc(fused[#loc288, #loc289])
#loc441 = loc(fused[#loc291, #loc292])
#loc442 = loc(fused[#loc293, #loc294])
#loc443 = loc(fused[#loc295, #loc292])
#loc444 = loc(fused[#loc298, #loc299])
#loc445 = loc(fused[#loc300, #loc301])
#loc446 = loc(fused[#loc302, #loc299])
#loc447 = loc(fused[#loc307, #loc308])
#loc449 = loc(fused[#loc312, #loc313])
#loc450 = loc(fused[#loc314, #loc315])
#loc451 = loc(fused[#loc316, #loc317])
#loc452 = loc(fused[#loc320, #loc321])
#loc453 = loc(fused[#loc322, #loc323])
#loc454 = loc(fused[#loc325, #loc324])
#loc455 = loc(fused[#loc327, #loc326])
