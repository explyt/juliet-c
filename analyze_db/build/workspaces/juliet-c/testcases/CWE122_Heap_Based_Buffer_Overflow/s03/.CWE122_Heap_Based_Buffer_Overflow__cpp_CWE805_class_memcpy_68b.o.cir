!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68_badData : !cir.ptr<!ty_TwoIntsClass> {alignment = 8 : i64} loc(#loc89)
  cir.func private @printIntLine(!s32i) loc(#loc90)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_687badSinkEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68_badData : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc89)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc8)
    cir.store %2, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc92)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc94)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc96)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc19)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc19)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc98)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc21)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc22)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc22)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc99)
            cir.condition(%24) loc(#loc99)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc25)
              %23 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc26)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty_TwoIntsClass>, %22 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc26)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc27)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc101)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc28)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc29)
              %28 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc30)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty_TwoIntsClass>, %27 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc30)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc31)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc102)
            } loc(#loc100)
            cir.yield loc(#loc18)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc33)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc103)
            cir.yield loc(#loc97)
          } loc(#loc97)
        } loc(#loc97)
      } loc(#loc95)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc34)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc34)
      %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc35)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc35)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc36)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc36)
      %10 = cir.const #cir.int<8> : !u64i loc(#loc104)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc105)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc106)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc41)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!ty_TwoIntsClass>, %13 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc43)
      %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc27)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc45)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc46)
      cir.delete.array %17 : <!ty_TwoIntsClass> loc(#loc46)
    } loc(#loc93)
    cir.return loc(#loc6)
  } loc(#loc91)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68_goodG2BData : !cir.ptr<!ty_TwoIntsClass> {alignment = 8 : i64} loc(#loc107)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_6811goodG2BSinkEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc109)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68_goodG2BData : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc107)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc52)
    cir.store %2, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc109)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc111)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc113)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc63)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc63)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc115)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc66)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc66)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc116)
            cir.condition(%24) loc(#loc116)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc68)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc69)
              %23 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc70)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty_TwoIntsClass>, %22 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc70)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc27)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc118)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc71)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc72)
              %28 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc73)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty_TwoIntsClass>, %27 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc73)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc31)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc119)
            } loc(#loc117)
            cir.yield loc(#loc62)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc74)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc75)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc120)
            cir.yield loc(#loc114)
          } loc(#loc114)
        } loc(#loc114)
      } loc(#loc112)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc76)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc76)
      %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc77)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc77)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc78)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc78)
      %10 = cir.const #cir.int<8> : !u64i loc(#loc121)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc122)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc123)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc84)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!ty_TwoIntsClass>, %13 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc85)
      %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc27)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc87)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc88)
      cir.delete.array %17 : <!ty_TwoIntsClass> loc(#loc88)
    } loc(#loc110)
    cir.return loc(#loc50)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":19:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":19:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":29:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":48:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":31:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":31:27)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":32:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":47:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":33:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":33:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":34:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":42:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":35:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":35:20)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":37:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":41:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":37:22)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":37:18)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":37:25)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":37:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":38:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":39:36)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":39:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":39:17)
#loc27 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":40:36)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":40:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":40:17)
#loc31 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":37:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":37:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":44:16)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":44:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":44:30)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":44:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":44:53)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":44:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":44:54)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":45:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":45:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":45:28)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":45:30)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":45:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":46:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":20:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":20:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":55:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":74:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":57:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":57:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":58:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":73:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":59:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":59:32)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":60:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":68:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":61:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":61:20)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":63:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":67:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":63:22)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":63:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":63:25)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":63:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":64:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":65:36)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":65:24)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":65:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":66:36)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":66:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":66:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":63:35)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":63:34)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":70:16)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":70:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":70:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":70:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":70:53)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":70:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":70:54)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":71:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":71:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":71:28)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":71:30)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":71:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_68b.cpp":72:19)
#loc89 = loc(fused[#loc1, #loc2])
#loc90 = loc(fused[#loc3, #loc4])
#loc91 = loc(fused[#loc5, #loc6])
#loc92 = loc(fused[#loc7, #loc8])
#loc93 = loc(fused[#loc9, #loc10])
#loc94 = loc(fused[#loc11, #loc12])
#loc95 = loc(fused[#loc13, #loc14])
#loc96 = loc(fused[#loc15, #loc16])
#loc97 = loc(fused[#loc17, #loc18])
#loc98 = loc(fused[#loc20, #loc19])
#loc99 = loc(fused[#loc21, #loc22])
#loc100 = loc(fused[#loc23, #loc18])
#loc101 = loc(fused[#loc26, #loc24])
#loc102 = loc(fused[#loc30, #loc28])
#loc103 = loc(fused[#loc33, #loc32])
#loc104 = loc(fused[#loc37, #loc38])
#loc105 = loc(fused[#loc36, #loc38])
#loc106 = loc(fused[#loc39, #loc40])
#loc107 = loc(fused[#loc47, #loc48])
#loc108 = loc(fused[#loc49, #loc50])
#loc109 = loc(fused[#loc51, #loc52])
#loc110 = loc(fused[#loc53, #loc54])
#loc111 = loc(fused[#loc55, #loc56])
#loc112 = loc(fused[#loc57, #loc58])
#loc113 = loc(fused[#loc59, #loc60])
#loc114 = loc(fused[#loc61, #loc62])
#loc115 = loc(fused[#loc64, #loc63])
#loc116 = loc(fused[#loc65, #loc66])
#loc117 = loc(fused[#loc67, #loc62])
#loc118 = loc(fused[#loc70, #loc68])
#loc119 = loc(fused[#loc73, #loc71])
#loc120 = loc(fused[#loc75, #loc74])
#loc121 = loc(fused[#loc79, #loc80])
#loc122 = loc(fused[#loc78, #loc80])
#loc123 = loc(fused[#loc81, #loc82])
