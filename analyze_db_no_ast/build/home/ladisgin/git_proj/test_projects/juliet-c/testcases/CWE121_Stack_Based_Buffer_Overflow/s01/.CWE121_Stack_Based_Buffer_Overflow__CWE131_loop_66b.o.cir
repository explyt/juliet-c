!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":21:66)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":21:82)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":42:70)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":42:86)
#loc75 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc40, #loc41])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc73)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b_badSink(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc75)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc76)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc9)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc10)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s32i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s32i>> loc(#loc8)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc10)
    cir.store %5, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc76)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc78)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc79)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc78)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc78)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc20)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc20)
        cir.store %14, %7 : !u64i, !cir.ptr<!u64i> loc(#loc81)
        cir.for : cond {
          %15 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc22)
          %16 = cir.const #cir.int<10> : !s32i loc(#loc23)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc23)
          %18 = cir.cmp(lt, %15, %17) : !u64i, !s32i loc(#loc82)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc24)
          cir.condition(%19) loc(#loc24)
        } body {
          cir.scope {
            %15 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc26)
            %16 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc27)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc27)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc27)
            %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
            %20 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc29)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !u64i), !cir.ptr<!s32i> loc(#loc30)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc84)
          } loc(#loc83)
          cir.yield loc(#loc19)
        } step {
          %15 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc32)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc33)
          cir.store %16, %7 : !u64i, !cir.ptr<!u64i> loc(#loc85)
          cir.yield loc(#loc80)
        } loc(#loc80)
      } loc(#loc80)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc35)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc36)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc37)
    } loc(#loc77)
    cir.return loc(#loc4)
  } loc(#loc74)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc40, #loc41])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc87)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc88)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc44)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc45)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc46)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s32i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s32i>> loc(#loc43)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    cir.store %5, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc88)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc90)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc91)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc90)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc90)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc55)
        cir.store %14, %7 : !u64i, !cir.ptr<!u64i> loc(#loc93)
        cir.for : cond {
          %15 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc57)
          %16 = cir.const #cir.int<10> : !s32i loc(#loc58)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc58)
          %18 = cir.cmp(lt, %15, %17) : !u64i, !s32i loc(#loc94)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc59)
          cir.condition(%19) loc(#loc59)
        } body {
          cir.scope {
            %15 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %16 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc62)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc62)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
            %20 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !u64i), !cir.ptr<!s32i> loc(#loc65)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc96)
          } loc(#loc95)
          cir.yield loc(#loc54)
        } step {
          %15 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc67)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc68)
          cir.store %16, %7 : !u64i, !cir.ptr<!u64i> loc(#loc97)
          cir.yield loc(#loc92)
        } loc(#loc92)
      } loc(#loc92)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc71)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc72)
    } loc(#loc89)
    cir.return loc(#loc39)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":35:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":24:29)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":22:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":24:18)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":24:28)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":25:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":34:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":26:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":26:28)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":27:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":27:16)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":29:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":32:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":29:18)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":29:14)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":29:21)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":29:25)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":29:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":30:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":31:30)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":31:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":31:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":31:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":31:19)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":31:31)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":29:30)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":29:29)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":33:22)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":33:27)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":33:28)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":33:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":42:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":55:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":44:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":44:29)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":43:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":44:18)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":44:28)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":45:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":54:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":46:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":46:28)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":47:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":47:16)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":49:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":52:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":49:18)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":49:14)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":49:21)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":49:25)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":49:23)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":50:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":51:30)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":51:23)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":51:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":51:18)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":51:19)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":51:31)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":49:30)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":49:29)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":53:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":53:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":53:28)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c":53:9)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc76 = loc(fused[#loc7, #loc8])
#loc77 = loc(fused[#loc12, #loc13])
#loc78 = loc(fused[#loc14, #loc15])
#loc79 = loc(fused[#loc16, #loc17])
#loc80 = loc(fused[#loc18, #loc19])
#loc81 = loc(fused[#loc21, #loc20])
#loc82 = loc(fused[#loc22, #loc23])
#loc83 = loc(fused[#loc25, #loc19])
#loc84 = loc(fused[#loc28, #loc31])
#loc85 = loc(fused[#loc33, #loc32])
#loc86 = loc(fused[#loc38, #loc39])
#loc88 = loc(fused[#loc42, #loc43])
#loc89 = loc(fused[#loc47, #loc48])
#loc90 = loc(fused[#loc49, #loc50])
#loc91 = loc(fused[#loc51, #loc52])
#loc92 = loc(fused[#loc53, #loc54])
#loc93 = loc(fused[#loc56, #loc55])
#loc94 = loc(fused[#loc57, #loc58])
#loc95 = loc(fused[#loc60, #loc54])
#loc96 = loc(fused[#loc63, #loc66])
#loc97 = loc(fused[#loc68, #loc67])
