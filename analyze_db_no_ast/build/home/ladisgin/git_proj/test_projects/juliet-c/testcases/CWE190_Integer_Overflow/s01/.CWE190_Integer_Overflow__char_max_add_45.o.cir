!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @CWE190_Integer_Overflow__char_max_add_45_badData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc94)
  cir.func no_proto  @CWE190_Integer_Overflow__char_max_add_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc96)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc7)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc97)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc9)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc9)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc98)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc11)
    %6 = cir.get_global @CWE190_Integer_Overflow__char_max_add_45_badData : !cir.ptr<!s8i> loc(#loc94)
    cir.store %5, %6 : !s8i, !cir.ptr<!s8i> loc(#loc99)
    %7 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc13)
    cir.return loc(#loc4)
  } loc(#loc95)
  cir.func no_proto  @CWE190_Integer_Overflow__char_max_add_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc17)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    cir.return loc(#loc16)
  } loc(#loc101)
  cir.func private  @printHexCharLine(!s8i) loc(#loc104)
  cir.func no_proto internal private  @badSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc106)
    %1 = cir.get_global @CWE190_Integer_Overflow__char_max_add_45_badData : !cir.ptr<!s8i> loc(#loc94)
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc26)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc106)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc108)
      %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc31)
      %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc31)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc30)
      %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc31)
      %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc31)
      cir.store %8, %3 : !s8i, !cir.ptr<!s8i> loc(#loc108)
      %9 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc32)
      cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc33)
    } loc(#loc107)
    cir.return loc(#loc24)
  } loc(#loc105)
  cir.global "private"  internal dsolocal @CWE190_Integer_Overflow__char_max_add_45_goodG2BData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc109)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc111)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc40)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc40)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc112)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc42)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc42)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc113)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc44)
    %6 = cir.get_global @CWE190_Integer_Overflow__char_max_add_45_goodG2BData : !cir.ptr<!s8i> loc(#loc109)
    cir.store %5, %6 : !s8i, !cir.ptr<!s8i> loc(#loc114)
    %7 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc37)
  } loc(#loc110)
  cir.func no_proto internal private  @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc117)
    %1 = cir.get_global @CWE190_Integer_Overflow__char_max_add_45_goodG2BData : !cir.ptr<!s8i> loc(#loc109)
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc51)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc117)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc119)
      %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc56)
      %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc56)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc55)
      %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc56)
      %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc56)
      cir.store %8, %3 : !s8i, !cir.ptr<!s8i> loc(#loc119)
      %9 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc57)
      cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc58)
    } loc(#loc118)
    cir.return loc(#loc49)
  } loc(#loc116)
  cir.global "private"  internal dsolocal @CWE190_Integer_Overflow__char_max_add_45_goodB2GData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc120)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc122)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc65)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc65)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc123)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc67)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc67)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc69)
    %6 = cir.get_global @CWE190_Integer_Overflow__char_max_add_45_goodB2GData : !cir.ptr<!s8i> loc(#loc120)
    cir.store %5, %6 : !s8i, !cir.ptr<!s8i> loc(#loc125)
    %7 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc62)
  } loc(#loc121)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private  @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc129)
    %1 = cir.get_global @CWE190_Integer_Overflow__char_max_add_45_goodB2GData : !cir.ptr<!s8i> loc(#loc120)
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc79)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc129)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc82)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc82)
      %5 = cir.const #cir.int<127> : !s32i loc(#loc83)
      %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc131)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc84)
      cir.if %7 {
        %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc133)
        %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc90)
        %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc90)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc90)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc90)
        cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc133)
        %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc91)
        cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc92)
      } else {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc75)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc93)
      } loc(#loc132)
    } loc(#loc130)
    cir.return loc(#loc77)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_45.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_add_45.c":20:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_add_45.c":20:13)
#loc3 = loc("CWE190_Integer_Overflow__char_max_add_45.c":36:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_add_45.c":44:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_add_45.c":38:5)
#loc6 = loc("CWE190_Integer_Overflow__char_max_add_45.c":38:10)
#loc7 = loc("CWE190_Integer_Overflow__char_max_add_45.c":39:12)
#loc8 = loc("CWE190_Integer_Overflow__char_max_add_45.c":39:5)
#loc9 = loc("CWE190_Integer_Overflow__char_max_add_45.c":41:12)
#loc10 = loc("CWE190_Integer_Overflow__char_max_add_45.c":41:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_add_45.c":42:56)
#loc12 = loc("CWE190_Integer_Overflow__char_max_add_45.c":42:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_add_45.c":43:5)
#loc14 = loc("CWE190_Integer_Overflow__char_max_add_45.c":43:13)
#loc15 = loc("CWE190_Integer_Overflow__char_max_add_45.c":97:1)
#loc16 = loc("CWE190_Integer_Overflow__char_max_add_45.c":101:1)
#loc17 = loc("CWE190_Integer_Overflow__char_max_add_45.c":99:5)
#loc18 = loc("CWE190_Integer_Overflow__char_max_add_45.c":99:13)
#loc19 = loc("CWE190_Integer_Overflow__char_max_add_45.c":100:5)
#loc20 = loc("CWE190_Integer_Overflow__char_max_add_45.c":100:13)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc23 = loc("CWE190_Integer_Overflow__char_max_add_45.c":26:1)
#loc24 = loc("CWE190_Integer_Overflow__char_max_add_45.c":34:1)
#loc25 = loc("CWE190_Integer_Overflow__char_max_add_45.c":28:5)
#loc26 = loc("CWE190_Integer_Overflow__char_max_add_45.c":28:17)
#loc27 = loc("CWE190_Integer_Overflow__char_max_add_45.c":29:5)
#loc28 = loc("CWE190_Integer_Overflow__char_max_add_45.c":33:5)
#loc29 = loc("CWE190_Integer_Overflow__char_max_add_45.c":31:9)
#loc30 = loc("CWE190_Integer_Overflow__char_max_add_45.c":31:30)
#loc31 = loc("CWE190_Integer_Overflow__char_max_add_45.c":31:23)
#loc32 = loc("CWE190_Integer_Overflow__char_max_add_45.c":32:26)
#loc33 = loc("CWE190_Integer_Overflow__char_max_add_45.c":32:9)
#loc34 = loc("CWE190_Integer_Overflow__char_max_add_45.c":21:1)
#loc35 = loc("CWE190_Integer_Overflow__char_max_add_45.c":21:13)
#loc36 = loc("CWE190_Integer_Overflow__char_max_add_45.c":61:1)
#loc37 = loc("CWE190_Integer_Overflow__char_max_add_45.c":69:1)
#loc38 = loc("CWE190_Integer_Overflow__char_max_add_45.c":63:5)
#loc39 = loc("CWE190_Integer_Overflow__char_max_add_45.c":63:10)
#loc40 = loc("CWE190_Integer_Overflow__char_max_add_45.c":64:12)
#loc41 = loc("CWE190_Integer_Overflow__char_max_add_45.c":64:5)
#loc42 = loc("CWE190_Integer_Overflow__char_max_add_45.c":66:12)
#loc43 = loc("CWE190_Integer_Overflow__char_max_add_45.c":66:5)
#loc44 = loc("CWE190_Integer_Overflow__char_max_add_45.c":67:60)
#loc45 = loc("CWE190_Integer_Overflow__char_max_add_45.c":67:5)
#loc46 = loc("CWE190_Integer_Overflow__char_max_add_45.c":68:5)
#loc47 = loc("CWE190_Integer_Overflow__char_max_add_45.c":68:17)
#loc48 = loc("CWE190_Integer_Overflow__char_max_add_45.c":51:1)
#loc49 = loc("CWE190_Integer_Overflow__char_max_add_45.c":59:1)
#loc50 = loc("CWE190_Integer_Overflow__char_max_add_45.c":53:5)
#loc51 = loc("CWE190_Integer_Overflow__char_max_add_45.c":53:17)
#loc52 = loc("CWE190_Integer_Overflow__char_max_add_45.c":54:5)
#loc53 = loc("CWE190_Integer_Overflow__char_max_add_45.c":58:5)
#loc54 = loc("CWE190_Integer_Overflow__char_max_add_45.c":56:9)
#loc55 = loc("CWE190_Integer_Overflow__char_max_add_45.c":56:30)
#loc56 = loc("CWE190_Integer_Overflow__char_max_add_45.c":56:23)
#loc57 = loc("CWE190_Integer_Overflow__char_max_add_45.c":57:26)
#loc58 = loc("CWE190_Integer_Overflow__char_max_add_45.c":57:9)
#loc59 = loc("CWE190_Integer_Overflow__char_max_add_45.c":22:1)
#loc60 = loc("CWE190_Integer_Overflow__char_max_add_45.c":22:13)
#loc61 = loc("CWE190_Integer_Overflow__char_max_add_45.c":87:1)
#loc62 = loc("CWE190_Integer_Overflow__char_max_add_45.c":95:1)
#loc63 = loc("CWE190_Integer_Overflow__char_max_add_45.c":89:5)
#loc64 = loc("CWE190_Integer_Overflow__char_max_add_45.c":89:10)
#loc65 = loc("CWE190_Integer_Overflow__char_max_add_45.c":90:12)
#loc66 = loc("CWE190_Integer_Overflow__char_max_add_45.c":90:5)
#loc67 = loc("CWE190_Integer_Overflow__char_max_add_45.c":92:12)
#loc68 = loc("CWE190_Integer_Overflow__char_max_add_45.c":92:5)
#loc69 = loc("CWE190_Integer_Overflow__char_max_add_45.c":93:60)
#loc70 = loc("CWE190_Integer_Overflow__char_max_add_45.c":93:5)
#loc71 = loc("CWE190_Integer_Overflow__char_max_add_45.c":94:5)
#loc72 = loc("CWE190_Integer_Overflow__char_max_add_45.c":94:17)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc75 = loc("CWE190_Integer_Overflow__char_max_add_45.c":83:19)
#loc76 = loc("CWE190_Integer_Overflow__char_max_add_45.c":72:1)
#loc77 = loc("CWE190_Integer_Overflow__char_max_add_45.c":85:1)
#loc78 = loc("CWE190_Integer_Overflow__char_max_add_45.c":74:5)
#loc79 = loc("CWE190_Integer_Overflow__char_max_add_45.c":74:17)
#loc80 = loc("CWE190_Integer_Overflow__char_max_add_45.c":76:5)
#loc81 = loc("CWE190_Integer_Overflow__char_max_add_45.c":84:5)
#loc82 = loc("CWE190_Integer_Overflow__char_max_add_45.c":76:9)
#loc83 = loc("CWE190_Integer_Overflow__char_max_add_45.c":76:16)
#loc84 = loc("CWE190_Integer_Overflow__char_max_add_45.c":76:14)
#loc85 = loc("CWE190_Integer_Overflow__char_max_add_45.c":77:5)
#loc86 = loc("CWE190_Integer_Overflow__char_max_add_45.c":80:5)
#loc87 = loc("CWE190_Integer_Overflow__char_max_add_45.c":82:5)
#loc88 = loc("CWE190_Integer_Overflow__char_max_add_45.c":78:9)
#loc89 = loc("CWE190_Integer_Overflow__char_max_add_45.c":78:30)
#loc90 = loc("CWE190_Integer_Overflow__char_max_add_45.c":78:23)
#loc91 = loc("CWE190_Integer_Overflow__char_max_add_45.c":79:26)
#loc92 = loc("CWE190_Integer_Overflow__char_max_add_45.c":79:9)
#loc93 = loc("CWE190_Integer_Overflow__char_max_add_45.c":83:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc8, #loc7])
#loc98 = loc(fused[#loc10, #loc9])
#loc99 = loc(fused[#loc12, #loc11])
#loc100 = loc(fused[#loc13, #loc14])
#loc101 = loc(fused[#loc15, #loc16])
#loc102 = loc(fused[#loc17, #loc18])
#loc103 = loc(fused[#loc19, #loc20])
#loc104 = loc(fused[#loc21, #loc22])
#loc105 = loc(fused[#loc23, #loc24])
#loc106 = loc(fused[#loc25, #loc26])
#loc107 = loc(fused[#loc27, #loc28])
#loc108 = loc(fused[#loc29, #loc30])
#loc109 = loc(fused[#loc34, #loc35])
#loc110 = loc(fused[#loc36, #loc37])
#loc111 = loc(fused[#loc38, #loc39])
#loc112 = loc(fused[#loc41, #loc40])
#loc113 = loc(fused[#loc43, #loc42])
#loc114 = loc(fused[#loc45, #loc44])
#loc115 = loc(fused[#loc46, #loc47])
#loc116 = loc(fused[#loc48, #loc49])
#loc117 = loc(fused[#loc50, #loc51])
#loc118 = loc(fused[#loc52, #loc53])
#loc119 = loc(fused[#loc54, #loc55])
#loc120 = loc(fused[#loc59, #loc60])
#loc121 = loc(fused[#loc61, #loc62])
#loc122 = loc(fused[#loc63, #loc64])
#loc123 = loc(fused[#loc66, #loc65])
#loc124 = loc(fused[#loc68, #loc67])
#loc125 = loc(fused[#loc70, #loc69])
#loc126 = loc(fused[#loc71, #loc72])
#loc127 = loc(fused[#loc73, #loc74])
#loc128 = loc(fused[#loc76, #loc77])
#loc129 = loc(fused[#loc78, #loc79])
#loc130 = loc(fused[#loc80, #loc81])
#loc131 = loc(fused[#loc82, #loc83])
#loc132 = loc(fused[#loc85, #loc86, #loc87, #loc81])
#loc133 = loc(fused[#loc88, #loc89])
