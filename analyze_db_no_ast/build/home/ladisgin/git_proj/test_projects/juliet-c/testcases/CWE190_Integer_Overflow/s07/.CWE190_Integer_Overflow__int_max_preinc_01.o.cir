!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_max_preinc_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc67)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_preinc_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc69)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc73)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc15)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc73)
      %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc18)
    } loc(#loc72)
    cir.return loc(#loc4)
  } loc(#loc68)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_preinc_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc77)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc75)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc29)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc83)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc37)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
      cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc83)
      %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc40)
    } loc(#loc82)
    cir.return loc(#loc26)
  } loc(#loc78)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc48)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc50)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
      %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc91)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc56)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc93)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc62)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc93)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc64)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc65)
      } else {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc43)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } loc(#loc92)
    } loc(#loc90)
    cir.return loc(#loc45)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_max_preinc_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":35:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":24:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":26:12)
#loc8 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":26:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":34:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":32:9)
#loc14 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":32:22)
#loc15 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":31:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":31:11)
#loc17 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":33:22)
#loc18 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":33:9)
#loc19 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":78:1)
#loc20 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":82:1)
#loc21 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":80:5)
#loc22 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":80:13)
#loc23 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":81:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":81:13)
#loc25 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":42:1)
#loc26 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":55:1)
#loc27 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":44:5)
#loc28 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":44:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":46:12)
#loc30 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":46:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":48:12)
#loc32 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":48:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":49:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":54:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":52:9)
#loc36 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":52:22)
#loc37 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":51:9)
#loc38 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":51:11)
#loc39 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":53:22)
#loc40 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":53:9)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":74:19)
#loc44 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":58:1)
#loc45 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":76:1)
#loc46 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":60:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":60:9)
#loc48 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":62:12)
#loc49 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":62:5)
#loc50 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":64:12)
#loc51 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":64:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":66:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":75:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":66:9)
#loc55 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":66:16)
#loc56 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":66:14)
#loc57 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":67:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":71:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":73:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":69:9)
#loc61 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":69:22)
#loc62 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":68:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":68:11)
#loc64 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":70:22)
#loc65 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":70:9)
#loc66 = loc("CWE190_Integer_Overflow__int_max_preinc_01.c":74:9)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc5, #loc6])
#loc70 = loc(fused[#loc8, #loc7])
#loc71 = loc(fused[#loc10, #loc9])
#loc72 = loc(fused[#loc11, #loc12])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc15, #loc16])
#loc75 = loc(fused[#loc19, #loc20])
#loc76 = loc(fused[#loc21, #loc22])
#loc77 = loc(fused[#loc23, #loc24])
#loc78 = loc(fused[#loc25, #loc26])
#loc79 = loc(fused[#loc27, #loc28])
#loc80 = loc(fused[#loc30, #loc29])
#loc81 = loc(fused[#loc32, #loc31])
#loc82 = loc(fused[#loc33, #loc34])
#loc83 = loc(fused[#loc35, #loc36])
#loc84 = loc(fused[#loc37, #loc38])
#loc85 = loc(fused[#loc41, #loc42])
#loc86 = loc(fused[#loc44, #loc45])
#loc87 = loc(fused[#loc46, #loc47])
#loc88 = loc(fused[#loc49, #loc48])
#loc89 = loc(fused[#loc51, #loc50])
#loc90 = loc(fused[#loc52, #loc53])
#loc91 = loc(fused[#loc54, #loc55])
#loc92 = loc(fused[#loc57, #loc58, #loc59, #loc53])
#loc93 = loc(fused[#loc60, #loc61])
#loc94 = loc(fused[#loc62, #loc63])
