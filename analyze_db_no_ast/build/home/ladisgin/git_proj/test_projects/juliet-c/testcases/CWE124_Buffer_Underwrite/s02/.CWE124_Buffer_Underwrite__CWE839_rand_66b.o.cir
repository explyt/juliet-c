!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":22:56)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":22:70)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":52:60)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":52:74)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":77:60)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":77:74)
#true = #cir.bool<true> : !cir.bool
#loc136 = loc(fused[#loc8, #loc9])
#loc151 = loc(fused[#loc48, #loc49])
#loc166 = loc(fused[#loc90, #loc91])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc133)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc134)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func  @CWE124_Buffer_Underwrite__CWE839_rand_66b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc136)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc137)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc12)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc13)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc14)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc11)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc139)
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc140)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc140)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc140)
      cir.scope {
        %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc24)
        %11 = cir.cmp(lt, %9, %10) : !s32i, !s32i loc(#loc142)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc25)
        cir.if %12 {
          %13 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc31)
          cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc144)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc34)
            cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc146)
            cir.for : cond {
              %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc37)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc147)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc38)
              cir.condition(%21) loc(#loc38)
            } body {
              cir.scope {
                %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc40)
                %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc41)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc41)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc41)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc42)
              } loc(#loc148)
              cir.yield loc(#loc33)
            } step {
              %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc43)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc44)
              cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc149)
              cir.yield loc(#loc145)
            } loc(#loc145)
          } loc(#loc145)
        } else {
          %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc45)
        } loc(#loc143)
      } loc(#loc141)
    } loc(#loc138)
    cir.return loc(#loc7)
  } loc(#loc135)
  cir.func  @CWE124_Buffer_Underwrite__CWE839_rand_66b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc48, #loc49])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc152)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc52)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc54)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc51)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc154)
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc155)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc155)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc155)
      cir.scope {
        %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc64)
        %11 = cir.cmp(lt, %9, %10) : !s32i, !s32i loc(#loc157)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc65)
        cir.if %12 {
          %13 = cir.const #cir.int<1> : !s32i loc(#loc69)
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc71)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc71)
          cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc159)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc74)
            cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc161)
            cir.for : cond {
              %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc76)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc77)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc162)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc78)
              cir.condition(%21) loc(#loc78)
            } body {
              cir.scope {
                %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc81)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc81)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc82)
              } loc(#loc163)
              cir.yield loc(#loc73)
            } step {
              %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc84)
              cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc164)
              cir.yield loc(#loc160)
            } loc(#loc160)
          } loc(#loc160)
        } else {
          %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc85)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc85)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc86)
        } loc(#loc158)
      } loc(#loc156)
    } loc(#loc153)
    cir.return loc(#loc47)
  } loc(#loc150)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc87)
  cir.func  @CWE124_Buffer_Underwrite__CWE839_rand_66b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc90, #loc91])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc166)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc94)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc96)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc93)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc169)
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc170)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc170)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc170)
      cir.scope {
        %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc105)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc106)
        %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc172)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc107)
        %13 = cir.ternary(%12, true {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc110)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc173)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc112)
          %18 = cir.ternary(%17, true {
            %19 = cir.const #true loc(#loc108)
            cir.yield %19 : !cir.bool loc(#loc108)
          }, false {
            %19 = cir.const #false loc(#loc108)
            cir.yield %19 : !cir.bool loc(#loc108)
          }) : (!cir.bool) -> !cir.bool loc(#loc108)
          cir.yield %18 : !cir.bool loc(#loc108)
        }, false {
          %14 = cir.const #false loc(#loc108)
          cir.yield %14 : !cir.bool loc(#loc108)
        }) : (!cir.bool) -> !cir.bool loc(#loc108)
        cir.if %13 {
          %14 = cir.const #cir.int<1> : !s32i loc(#loc116)
          %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          %16 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc118)
          %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc118)
          cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc175)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc121)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc177)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc124)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc178)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc125)
              cir.condition(%22) loc(#loc125)
            } body {
              cir.scope {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc128)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc128)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc128)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc129)
              } loc(#loc179)
              cir.yield loc(#loc120)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc131)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc180)
              cir.yield loc(#loc176)
            } loc(#loc176)
          } loc(#loc176)
        } else {
          %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc87)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc87)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc132)
        } loc(#loc174)
      } loc(#loc171)
    } loc(#loc168)
    cir.return loc(#loc89)
  } loc(#loc165)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":42:23)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":45:1)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":25:5)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":25:27)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":23:1)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":25:16)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":25:26)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":26:5)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":44:5)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":27:9)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":27:13)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":28:9)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":28:30)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":31:9)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":43:9)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":31:13)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":31:20)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":31:18)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":32:9)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":39:9)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":41:9)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":33:28)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":33:20)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":33:13)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":35:13)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":38:13)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":35:21)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":35:17)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":35:24)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":35:28)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":35:26)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":36:13)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":37:37)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":37:30)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":37:17)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":35:33)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":35:32)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":42:13)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":52:1)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":74:1)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":54:5)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":54:27)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":53:1)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":54:16)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":54:26)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":55:5)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":73:5)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":56:9)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":56:13)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":57:9)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":57:30)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":60:9)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":72:9)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":60:13)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":60:20)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":60:18)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":61:9)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":68:9)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":70:9)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":62:28)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":62:20)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":62:13)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":64:13)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":67:13)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":64:21)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":64:17)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":64:24)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":64:28)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":64:26)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":65:13)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":66:37)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":66:30)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":66:17)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":64:33)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":64:32)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":71:23)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":71:13)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":95:23)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":77:1)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":98:1)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":79:5)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":79:27)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":78:1)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":79:16)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":79:26)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":80:5)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":97:5)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":81:9)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":81:13)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":82:9)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":82:30)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":84:9)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":96:9)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":84:13)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":84:21)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":84:18)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":84:23)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":84:26)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":84:34)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":84:36)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":84:31)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":85:9)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":92:9)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":94:9)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":86:28)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":86:20)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":86:13)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":88:13)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":91:13)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":88:21)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":88:17)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":88:24)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":88:28)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":88:26)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":89:13)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":90:37)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":90:30)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":90:17)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":88:33)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":88:32)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_rand_66b.c":95:13)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc6, #loc7])
#loc137 = loc(fused[#loc10, #loc11])
#loc138 = loc(fused[#loc15, #loc16])
#loc139 = loc(fused[#loc17, #loc18])
#loc140 = loc(fused[#loc19, #loc20])
#loc141 = loc(fused[#loc21, #loc22])
#loc142 = loc(fused[#loc23, #loc24])
#loc143 = loc(fused[#loc26, #loc27, #loc28, #loc22])
#loc144 = loc(fused[#loc31, #loc29])
#loc145 = loc(fused[#loc32, #loc33])
#loc146 = loc(fused[#loc35, #loc34])
#loc147 = loc(fused[#loc36, #loc37])
#loc148 = loc(fused[#loc39, #loc33])
#loc149 = loc(fused[#loc44, #loc43])
#loc150 = loc(fused[#loc46, #loc47])
#loc152 = loc(fused[#loc50, #loc51])
#loc153 = loc(fused[#loc55, #loc56])
#loc154 = loc(fused[#loc57, #loc58])
#loc155 = loc(fused[#loc59, #loc60])
#loc156 = loc(fused[#loc61, #loc62])
#loc157 = loc(fused[#loc63, #loc64])
#loc158 = loc(fused[#loc66, #loc67, #loc68, #loc62])
#loc159 = loc(fused[#loc71, #loc69])
#loc160 = loc(fused[#loc72, #loc73])
#loc161 = loc(fused[#loc75, #loc74])
#loc162 = loc(fused[#loc76, #loc77])
#loc163 = loc(fused[#loc79, #loc73])
#loc164 = loc(fused[#loc84, #loc83])
#loc165 = loc(fused[#loc88, #loc89])
#loc167 = loc(fused[#loc92, #loc93])
#loc168 = loc(fused[#loc97, #loc98])
#loc169 = loc(fused[#loc99, #loc100])
#loc170 = loc(fused[#loc101, #loc102])
#loc171 = loc(fused[#loc103, #loc104])
#loc172 = loc(fused[#loc105, #loc106])
#loc173 = loc(fused[#loc109, #loc111])
#loc174 = loc(fused[#loc113, #loc114, #loc115, #loc104])
#loc175 = loc(fused[#loc118, #loc116])
#loc176 = loc(fused[#loc119, #loc120])
#loc177 = loc(fused[#loc122, #loc121])
#loc178 = loc(fused[#loc123, #loc124])
#loc179 = loc(fused[#loc126, #loc120])
#loc180 = loc(fused[#loc131, #loc130])
