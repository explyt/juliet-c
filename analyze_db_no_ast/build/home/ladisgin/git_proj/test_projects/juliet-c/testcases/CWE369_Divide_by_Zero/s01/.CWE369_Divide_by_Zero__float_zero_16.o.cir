!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc92)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc7)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc95)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%3) loc(#loc11)
      } do {
        %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc12)
        cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc97)
        cir.break loc(#loc14)
      } loc(#loc96)
    } loc(#loc96)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%3) loc(#loc17)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc100)
          %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc22)
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc23)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc23)
          %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc101)
          %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc101)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc100)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc25)
        } loc(#loc99)
        cir.break loc(#loc26)
      } loc(#loc98)
    } loc(#loc98)
    cir.return loc(#loc4)
  } loc(#loc93)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc102)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc40)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc108)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%3) loc(#loc44)
      } do {
        %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc45)
        cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc110)
        cir.break loc(#loc47)
      } loc(#loc109)
    } loc(#loc109)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc50)
        cir.condition(%3) loc(#loc50)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc53)
          %3 = cir.cast(floating, %2 : !cir.float), !cir.double loc(#loc53)
          %4 = cir.fabs %3 : !cir.double loc(#loc53)
          %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc54)
          %6 = cir.cmp(gt, %4, %5) : !cir.double, !s32i loc(#loc113)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc56)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc115)
            %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc62)
            %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc63)
            %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc63)
            %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc116)
            %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc116)
            cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc115)
            %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc64)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc65)
          } else {
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc35)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc35)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc66)
          } loc(#loc114)
        } loc(#loc112)
        cir.break loc(#loc67)
      } loc(#loc111)
    } loc(#loc111)
    cir.return loc(#loc37)
  } loc(#loc106)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc72)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc119)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc76)
        cir.condition(%3) loc(#loc76)
      } do {
        %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc77)
        cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc121)
        cir.break loc(#loc79)
      } loc(#loc120)
    } loc(#loc120)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc82)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc82)
        cir.condition(%3) loc(#loc82)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc124)
          %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc87)
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc88)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc88)
          %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc125)
          %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc125)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc124)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc90)
        } loc(#loc123)
        cir.break loc(#loc91)
      } loc(#loc122)
    } loc(#loc122)
    cir.return loc(#loc69)
  } loc(#loc117)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_16.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_16.c":44:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_16.c":26:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_16.c":26:11)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_16.c":28:12)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_16.c":28:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_16.c":29:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_16.c":34:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_16.c":29:11)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_16.c":32:16)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_16.c":32:9)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_16.c":33:9)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_16.c":35:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_16.c":43:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_16.c":35:11)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_16.c":37:9)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_16.c":41:9)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_16.c":39:13)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_16.c":39:44)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_16.c":39:32)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_16.c":39:40)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_16.c":40:26)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_16.c":40:13)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_16.c":42:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_16.c":101:1)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_16.c":105:1)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_16.c":103:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_16.c":103:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_16.c":104:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_16.c":104:13)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_16.c":72:23)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_16.c":51:1)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_16.c":76:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_16.c":53:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_16.c":53:11)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_16.c":55:12)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_16.c":55:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_16.c":56:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_16.c":61:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_16.c":56:11)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_16.c":59:16)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_16.c":59:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_16.c":60:9)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_16.c":62:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_16.c":75:5)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_16.c":62:11)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_16.c":65:9)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_16.c":73:9)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_16.c":65:17)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_16.c":65:25)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_16.c":65:12)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_16.c":65:23)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_16.c":66:9)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_16.c":69:9)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_16.c":71:9)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_16.c":67:13)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_16.c":67:44)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_16.c":67:32)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_16.c":67:40)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_16.c":68:26)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_16.c":68:13)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_16.c":72:13)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_16.c":74:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_16.c":79:1)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_16.c":99:1)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_16.c":81:5)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_16.c":81:11)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_16.c":83:12)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_16.c":83:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_16.c":84:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_16.c":89:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_16.c":84:11)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_16.c":87:16)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_16.c":87:9)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_16.c":88:9)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_16.c":90:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_16.c":98:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_16.c":90:11)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_16.c":92:9)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_16.c":96:9)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_16.c":94:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_16.c":94:44)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_16.c":94:32)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_16.c":94:40)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_16.c":95:26)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_16.c":95:13)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_16.c":97:9)
#loc92 = loc(fused[#loc1, #loc2])
#loc93 = loc(fused[#loc3, #loc4])
#loc94 = loc(fused[#loc5, #loc6])
#loc95 = loc(fused[#loc8, #loc7])
#loc96 = loc(fused[#loc9, #loc10])
#loc97 = loc(fused[#loc13, #loc12])
#loc98 = loc(fused[#loc15, #loc16])
#loc99 = loc(fused[#loc18, #loc19])
#loc100 = loc(fused[#loc20, #loc21])
#loc101 = loc(fused[#loc22, #loc23])
#loc102 = loc(fused[#loc27, #loc28])
#loc103 = loc(fused[#loc29, #loc30])
#loc104 = loc(fused[#loc31, #loc32])
#loc105 = loc(fused[#loc33, #loc34])
#loc106 = loc(fused[#loc36, #loc37])
#loc107 = loc(fused[#loc38, #loc39])
#loc108 = loc(fused[#loc41, #loc40])
#loc109 = loc(fused[#loc42, #loc43])
#loc110 = loc(fused[#loc46, #loc45])
#loc111 = loc(fused[#loc48, #loc49])
#loc112 = loc(fused[#loc51, #loc52])
#loc113 = loc(fused[#loc55, #loc54])
#loc114 = loc(fused[#loc57, #loc58, #loc59, #loc52])
#loc115 = loc(fused[#loc60, #loc61])
#loc116 = loc(fused[#loc62, #loc63])
#loc117 = loc(fused[#loc68, #loc69])
#loc118 = loc(fused[#loc70, #loc71])
#loc119 = loc(fused[#loc73, #loc72])
#loc120 = loc(fused[#loc74, #loc75])
#loc121 = loc(fused[#loc78, #loc77])
#loc122 = loc(fused[#loc80, #loc81])
#loc123 = loc(fused[#loc83, #loc84])
#loc124 = loc(fused[#loc85, #loc86])
#loc125 = loc(fused[#loc87, #loc88])
