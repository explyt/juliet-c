!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":100:10)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":100:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":100:20)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":100:32)
#loc191 = loc(fused[#loc83, #loc84])
#loc192 = loc(fused[#loc85, #loc86])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc157)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc158)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc160)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc161)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc163)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc158)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc166)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc22)
    cir.store %4, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    cir.br ^bb1 loc(#loc169)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc169)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %6 ^bb3, ^bb8 loc(#loc26)
  ^bb3:  // pred: ^bb2
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc27)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc28)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc28)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc170)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc171)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc27)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc172)
    cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
    cir.br ^bb4 loc(#loc174)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc175)
    cir.brcond %17 ^bb5, ^bb6 loc(#loc176)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc38)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc40)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
    cir.br ^bb6 loc(#loc34)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc34)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc41)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc25)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc177)
  ^bb10:  // pred: ^bb9
    %21 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc158)
    cir.copy %21 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc158)
    %22 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc44)
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc45)
    %24 = cir.call @strlen(%23) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc44)
    cir.store %24, %2 : !u64i, !cir.ptr<!u64i> loc(#loc178)
    cir.br ^bb11 loc(#loc179)
  ^bb11:  // pred: ^bb10
    %25 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc50)
    cir.store %26, %1 : !u64i, !cir.ptr<!u64i> loc(#loc180)
    cir.br ^bb12 loc(#loc179)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc52)
    %28 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc53)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc54)
    %31 = cir.binop(add, %28, %30) : !u64i loc(#loc181)
    %32 = cir.cmp(lt, %27, %31) : !u64i, !cir.bool loc(#loc182)
    cir.brcond %32 ^bb13, ^bb17 loc(#loc55)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc183)
  ^bb14:  // pred: ^bb13
    %33 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc57)
    %34 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc58)
    %35 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc58)
    %36 = cir.load %35 : !cir.ptr<!s8i>, !s8i loc(#loc58)
    %37 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    %38 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc60)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc61)
    cir.store %36, %39 : !s8i, !cir.ptr<!s8i> loc(#loc184)
    cir.br ^bb15 loc(#loc49)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc49)
  ^bb16:  // pred: ^bb15
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc63)
    %41 = cir.unary(inc, %40) : !u64i, !u64i loc(#loc64)
    cir.store %41, %1 : !u64i, !cir.ptr<!u64i> loc(#loc185)
    cir.br ^bb12 loc(#loc179)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc49)
  ^bb18:  // pred: ^bb17
    %42 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %43 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
    cir.call @free(%44) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc68)
    cir.br ^bb19 loc(#loc43)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc16)
  } loc(#loc164)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc70)
  } loc(#loc186)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc188)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc80)
  cir.func @main(%arg0: !s32i loc(fused[#loc83, #loc84]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc85, #loc86])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc192)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc82)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc87)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc88)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc89)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc89)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc90)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc77)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_good() : () -> () loc(#loc92)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc78)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc79)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad() : () -> () loc(#loc96)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc80)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc99)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    cir.return %17 : !s32i loc(#loc195)
  } loc(#loc190)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc157)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc198)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc108)
    cir.store %4, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %6 ^bb3, ^bb8 loc(#loc112)
  ^bb3:  // pred: ^bb2
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc113)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc114)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc114)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc114)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc202)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc203)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc113)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc204)
    cir.store %15, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
    cir.br ^bb4 loc(#loc206)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc124)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc207)
    cir.brcond %19 ^bb5, ^bb6 loc(#loc208)
  ^bb5:  // pred: ^bb4
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc126)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc128)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc126)
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc122)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc129)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc111)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc209)
  ^bb10:  // pred: ^bb9
    %23 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc157)
    cir.copy %23 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc157)
    %24 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc132)
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc133)
    %26 = cir.call @strlen(%25) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc132)
    cir.store %26, %2 : !u64i, !cir.ptr<!u64i> loc(#loc210)
    cir.br ^bb11 loc(#loc211)
  ^bb11:  // pred: ^bb10
    %27 = cir.const #cir.int<0> : !s32i loc(#loc138)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc138)
    cir.store %28, %1 : !u64i, !cir.ptr<!u64i> loc(#loc212)
    cir.br ^bb12 loc(#loc211)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %29 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc140)
    %30 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc141)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc142)
    %33 = cir.binop(add, %30, %32) : !u64i loc(#loc213)
    %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc214)
    cir.brcond %34 ^bb13, ^bb17 loc(#loc143)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc215)
  ^bb14:  // pred: ^bb13
    %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc145)
    %36 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc146)
    %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc146)
    %38 = cir.load %37 : !cir.ptr<!s8i>, !s8i loc(#loc146)
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc148)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %40 : !u64i), !cir.ptr<!s8i> loc(#loc149)
    cir.store %38, %41 : !s8i, !cir.ptr<!s8i> loc(#loc216)
    cir.br ^bb15 loc(#loc137)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc137)
  ^bb16:  // pred: ^bb15
    %42 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc151)
    %43 = cir.unary(inc, %42) : !u64i, !u64i loc(#loc152)
    cir.store %43, %1 : !u64i, !cir.ptr<!u64i> loc(#loc217)
    cir.br ^bb12 loc(#loc211)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc137)
  ^bb18:  // pred: ^bb17
    %44 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    %45 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc155)
    cir.call @free(%46) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc156)
    cir.br ^bb19 loc(#loc131)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc102)
  } loc(#loc196)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":71:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":71:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":40:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":40:29)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":28:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":52:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":41:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":41:16)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":41:19)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":30:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":30:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":31:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":31:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":32:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":38:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":32:11)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":35:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":35:31)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":35:34)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":35:45)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":35:46)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":35:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":36:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":36:37)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":36:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":36:21)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":36:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":36:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":36:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":36:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":37:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":39:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":51:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":42:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":42:28)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":42:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":42:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":45:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":48:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":45:18)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":45:14)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":45:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":45:25)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":45:37)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":45:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":46:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":47:30)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":47:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":47:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":47:18)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":47:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":47:31)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":45:41)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":45:40)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":49:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":49:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":50:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":50:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":85:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":88:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":87:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":87:13)
#loc73 = loc("/usr/include/stdlib.h":575:1)
#loc74 = loc("/usr/include/stdlib.h":575:41)
#loc75 = loc("/usr/include/time.h":76:1)
#loc76 = loc("/usr/include/time.h":76:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":105:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":107:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":110:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":112:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":100:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":115:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":101:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":103:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":103:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":103:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":105:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":106:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":106:67)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":107:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":110:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":111:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":111:66)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":112:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":114:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":114:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":59:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":83:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":72:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":72:16)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":72:19)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":61:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":61:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":62:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":62:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":63:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":69:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":63:11)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":66:24)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":66:32)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":66:35)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":66:38)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":66:49)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":66:31)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":66:50)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":66:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":67:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":67:37)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":67:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":67:21)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":67:27)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":67:28)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":67:34)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":67:33)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":68:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":70:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":82:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":73:21)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":73:28)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":73:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":73:34)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":76:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":79:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":76:18)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":76:14)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":76:21)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":76:25)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":76:37)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":76:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":77:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":78:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":78:23)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":78:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":78:18)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":78:19)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":78:31)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":76:41)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":76:40)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":80:19)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":80:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":81:14)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c":81:9)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc7, #loc8])
#loc161 = loc(fused[#loc9, #loc10])
#loc162 = loc(fused[#loc11, #loc12])
#loc163 = loc(fused[#loc13, #loc14])
#loc164 = loc(fused[#loc15, #loc16])
#loc165 = loc(fused[#loc17, #loc18])
#loc166 = loc(fused[#loc17, #loc19])
#loc167 = loc(fused[#loc20, #loc21])
#loc168 = loc(fused[#loc23, #loc22])
#loc169 = loc(fused[#loc24, #loc25])
#loc170 = loc(fused[#loc29, #loc30])
#loc171 = loc(fused[#loc28, #loc30])
#loc172 = loc(fused[#loc27, #loc31])
#loc173 = loc(fused[#loc32, #loc31])
#loc174 = loc(fused[#loc33, #loc34])
#loc175 = loc(fused[#loc35, #loc36])
#loc176 = loc(fused[#loc37, #loc34])
#loc177 = loc(fused[#loc42, #loc43])
#loc178 = loc(fused[#loc46, #loc47])
#loc179 = loc(fused[#loc48, #loc49])
#loc180 = loc(fused[#loc51, #loc50])
#loc181 = loc(fused[#loc53, #loc54])
#loc182 = loc(fused[#loc52, #loc54])
#loc183 = loc(fused[#loc56, #loc49])
#loc184 = loc(fused[#loc59, #loc62])
#loc185 = loc(fused[#loc64, #loc63])
#loc186 = loc(fused[#loc69, #loc70])
#loc187 = loc(fused[#loc71, #loc72])
#loc188 = loc(fused[#loc73, #loc74])
#loc189 = loc(fused[#loc75, #loc76])
#loc190 = loc(fused[#loc81, #loc82])
#loc193 = loc(fused[#loc92, #loc93])
#loc194 = loc(fused[#loc96, #loc97])
#loc195 = loc(fused[#loc100, #loc99])
#loc196 = loc(fused[#loc101, #loc102])
#loc197 = loc(fused[#loc103, #loc104])
#loc198 = loc(fused[#loc103, #loc105])
#loc199 = loc(fused[#loc106, #loc107])
#loc200 = loc(fused[#loc109, #loc108])
#loc201 = loc(fused[#loc110, #loc111])
#loc202 = loc(fused[#loc116, #loc117])
#loc203 = loc(fused[#loc118, #loc117])
#loc204 = loc(fused[#loc113, #loc119])
#loc205 = loc(fused[#loc120, #loc119])
#loc206 = loc(fused[#loc121, #loc122])
#loc207 = loc(fused[#loc123, #loc124])
#loc208 = loc(fused[#loc125, #loc122])
#loc209 = loc(fused[#loc130, #loc131])
#loc210 = loc(fused[#loc134, #loc135])
#loc211 = loc(fused[#loc136, #loc137])
#loc212 = loc(fused[#loc139, #loc138])
#loc213 = loc(fused[#loc141, #loc142])
#loc214 = loc(fused[#loc140, #loc142])
#loc215 = loc(fused[#loc144, #loc137])
#loc216 = loc(fused[#loc147, #loc150])
#loc217 = loc(fused[#loc152, #loc151])
