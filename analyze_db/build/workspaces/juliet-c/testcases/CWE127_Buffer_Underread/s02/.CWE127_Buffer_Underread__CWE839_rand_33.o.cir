!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":32:12)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":91:12)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":97:27)
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc108)
  cir.func private @printIntLine(!s32i) loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func @_ZN39CWE127_Buffer_Underread__CWE839_rand_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc113)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc115)
    cir.store %2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc17)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc19)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc21)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc21)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc21)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc21)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc21)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc21)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc21)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc21)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc21)
    cir.br ^bb3(%21 : !u32i) loc(#loc21)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc21)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc21)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc21)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc21)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc21)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc21)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc21)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc21)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc21)
    cir.br ^bb3(%37 : !u32i) loc(#loc21)
  ^bb3(%38: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":32:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc21)
    cir.store %39, %2 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.br ^bb5 loc(#loc118)
  ^bb5:  // pred: ^bb4
    %40 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc11)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    cir.store %41, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb6 loc(#loc119)
  ^bb6:  // pred: ^bb5
    %42 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc113)
    cir.store %42, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc113)
    cir.br ^bb7 loc(#loc120)
  ^bb7:  // pred: ^bb6
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %44 = cir.const #cir.int<10> : !s32i loc(#loc30)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc121)
    cir.brcond %45 ^bb8, ^bb9 loc(#loc122)
  ^bb8:  // pred: ^bb7
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %47 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc35)
    %48 = cir.ptr_stride(%47 : !cir.ptr<!s32i>, %46 : !s32i), !cir.ptr<!s32i> loc(#loc35)
    %49 = cir.load %48 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.call @printIntLine(%49) : (!s32i) -> () loc(#loc36)
    cir.br ^bb10 loc(#loc32)
  ^bb9:  // pred: ^bb7
    %50 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb10 loc(#loc28)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc28)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc24)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc9)
  } loc(#loc111)
  cir.func internal private @_ZN39CWE127_Buffer_Underread__CWE839_rand_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc125)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc126)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc127)
    cir.store %2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc47)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc49)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %6 = cir.const #cir.int<7> : !s32i loc(#loc51)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.br ^bb2 loc(#loc131)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc125)
    cir.store %9, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc125)
    cir.br ^bb3 loc(#loc132)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc60)
    %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc133)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc134)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc65)
    %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc65)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc66)
    cir.br ^bb6 loc(#loc62)
  ^bb5:  // pred: ^bb3
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc67)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb6 loc(#loc58)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc58)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc54)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc39)
  } loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc69)
  cir.func internal private @_ZN39CWE127_Buffer_Underread__CWE839_rand_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc137)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc138)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc139)
    cir.store %2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc79)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc81)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc83)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc83)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc83)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc83)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc83)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc83)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc83)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc83)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc83)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc83)
    cir.br ^bb3(%21 : !u32i) loc(#loc83)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc83)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc83)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc83)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc83)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc83)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc83)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc83)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc83)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc83)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc83)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc83)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc83)
    cir.br ^bb3(%37 : !u32i) loc(#loc83)
  ^bb3(%38: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":91:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc83)
    cir.store %39, %2 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // pred: ^bb4
    %40 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.store %41, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    cir.br ^bb6 loc(#loc143)
  ^bb6:  // pred: ^bb5
    %42 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc137)
    cir.store %42, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc137)
    cir.br ^bb7 loc(#loc144)
  ^bb7:  // pred: ^bb6
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %45 = cir.cmp(ge, %43, %44) : !s32i, !cir.bool loc(#loc145)
    cir.brcond %45 ^bb8, ^bb13 loc(#loc93)
  ^bb8:  // pred: ^bb7
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %47 = cir.const #cir.int<10> : !s32i loc(#loc95)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc146)
    cir.brcond %48 ^bb9, ^bb10 loc(#loc93)
  ^bb9:  // pred: ^bb8
    %49 = cir.const #true loc(#loc93)
    cir.br ^bb11(%49 : !cir.bool) loc(#loc93)
  ^bb10:  // pred: ^bb8
    %50 = cir.const #false loc(#loc93)
    cir.br ^bb11(%50 : !cir.bool) loc(#loc93)
  ^bb11(%51: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":97:27)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc93)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14(%51 : !cir.bool) loc(#loc93)
  ^bb13:  // pred: ^bb7
    %52 = cir.const #false loc(#loc93)
    cir.br ^bb14(%52 : !cir.bool) loc(#loc93)
  ^bb14(%53: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":97:27)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc93)
  ^bb15:  // pred: ^bb14
    cir.brcond %53 ^bb16, ^bb17 loc(#loc147)
  ^bb16:  // pred: ^bb15
    %54 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %55 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc101)
    %56 = cir.ptr_stride(%55 : !cir.ptr<!s32i>, %54 : !s32i), !cir.ptr<!s32i> loc(#loc101)
    %57 = cir.load %56 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.call @printIntLine(%57) : (!s32i) -> () loc(#loc102)
    cir.br ^bb18 loc(#loc98)
  ^bb17:  // pred: ^bb15
    %58 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc69)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    cir.br ^bb18 loc(#loc90)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc90)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc88)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc86)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc71)
  } loc(#loc135)
  cir.func @_ZN39CWE127_Buffer_Underread__CWE839_rand_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN39CWE127_Buffer_Underread__CWE839_rand_33L7goodG2BEv() : () -> () loc(#loc106)
    cir.call @_ZN39CWE127_Buffer_Underread__CWE839_rand_33L7goodB2GEv() : () -> () loc(#loc107)
    cir.return loc(#loc105)
  } loc(#loc148)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":45:27)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":25:1)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":49:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":34:9)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":34:20)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":36:13)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":36:34)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":27:5)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":27:9)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":28:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":28:20)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":30:13)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":30:12)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":30:5)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":32:5)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":33:5)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":48:5)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":35:9)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":47:9)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":39:13)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":46:13)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":39:17)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":39:24)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":40:13)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":42:13)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":44:13)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":41:37)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":41:30)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":41:17)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":45:17)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":56:1)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":81:1)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":66:9)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":66:20)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":68:13)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":68:34)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":58:5)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":58:9)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":59:5)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":59:20)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":61:13)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":61:12)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":61:5)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":64:12)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":64:5)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":65:5)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":80:5)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":67:9)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":79:9)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":71:13)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":78:13)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":71:17)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":71:24)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":72:13)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":74:13)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":76:13)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":73:37)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":73:30)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":73:17)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":77:27)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":77:17)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":103:27)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":84:1)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":107:1)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":93:9)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":93:20)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":95:13)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":95:34)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":86:5)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":86:9)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":87:5)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":87:20)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":89:13)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":89:12)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":89:5)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":91:5)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":92:5)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":106:5)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":94:9)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":105:9)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":97:13)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":104:13)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":97:17)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":97:25)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":97:30)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":97:38)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":97:40)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":98:13)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":100:13)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":102:13)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":99:37)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":99:30)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":99:17)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":103:17)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":109:1)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":113:1)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":111:5)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_33.cpp":112:5)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc8, #loc9])
#loc112 = loc(fused[#loc10, #loc11])
#loc113 = loc(fused[#loc12, #loc13])
#loc114 = loc(fused[#loc14, #loc15])
#loc115 = loc(fused[#loc16, #loc17])
#loc116 = loc(fused[#loc20, #loc18])
#loc117 = loc(fused[#loc22, #loc21])
#loc118 = loc(fused[#loc23, #loc24])
#loc119 = loc(fused[#loc25, #loc26])
#loc120 = loc(fused[#loc27, #loc28])
#loc121 = loc(fused[#loc29, #loc30])
#loc122 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc123 = loc(fused[#loc38, #loc39])
#loc124 = loc(fused[#loc40, #loc41])
#loc125 = loc(fused[#loc42, #loc43])
#loc126 = loc(fused[#loc44, #loc45])
#loc127 = loc(fused[#loc46, #loc47])
#loc128 = loc(fused[#loc50, #loc48])
#loc129 = loc(fused[#loc52, #loc51])
#loc130 = loc(fused[#loc53, #loc54])
#loc131 = loc(fused[#loc55, #loc56])
#loc132 = loc(fused[#loc57, #loc58])
#loc133 = loc(fused[#loc59, #loc60])
#loc134 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc135 = loc(fused[#loc70, #loc71])
#loc136 = loc(fused[#loc72, #loc73])
#loc137 = loc(fused[#loc74, #loc75])
#loc138 = loc(fused[#loc76, #loc77])
#loc139 = loc(fused[#loc78, #loc79])
#loc140 = loc(fused[#loc82, #loc80])
#loc141 = loc(fused[#loc84, #loc83])
#loc142 = loc(fused[#loc85, #loc86])
#loc143 = loc(fused[#loc87, #loc88])
#loc144 = loc(fused[#loc89, #loc90])
#loc145 = loc(fused[#loc91, #loc92])
#loc146 = loc(fused[#loc94, #loc96])
#loc147 = loc(fused[#loc97, #loc98, #loc99, #loc90])
#loc148 = loc(fused[#loc104, #loc105])
