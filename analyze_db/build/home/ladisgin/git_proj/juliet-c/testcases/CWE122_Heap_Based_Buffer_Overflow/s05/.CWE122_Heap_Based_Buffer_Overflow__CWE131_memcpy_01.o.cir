!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc86)
  cir.func private @printIntLine(!s32i) loc(#loc87)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc88)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc90)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc91)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc92)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc93)
    cir.store %7, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc94)
    cir.br ^bb1 loc(#loc95)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc24)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s32i>, !cir.bool loc(#loc96)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc97)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc28)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
    cir.br ^bb3 loc(#loc22)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc98)
  ^bb5:  // pred: ^bb4
    %15 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc90)
    cir.store %15, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc90)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc31)
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc32)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc32)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc33)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc33)
    %22 = cir.const #cir.int<4> : !u64i loc(#loc99)
    %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc100)
    cir.libc.memcpy %23 bytes from %19 to %17 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc101)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc40)
    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc41)
    %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc42)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc42)
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc10)
  } loc(#loc89)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc45)
  } loc(#loc102)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc105)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc106)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc54)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc107)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc56)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc57)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc57)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc108)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc109)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc56)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc110)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc65)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc113)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc114)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc67)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc69)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc67)
    cir.br ^bb3 loc(#loc63)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc115)
  ^bb5:  // pred: ^bb4
    %17 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc105)
    cir.store %17, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc105)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc72)
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc73)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc73)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc74)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc74)
    %24 = cir.const #cir.int<4> : !u64i loc(#loc116)
    %25 = cir.binop(mul, %23, %24) : !u64i loc(#loc117)
    cir.libc.memcpy %25 bytes from %21 to %19 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc118)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc81)
    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc82)
    %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc83)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc84)
    cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc83)
    cir.br ^bb6 loc(#loc71)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc49)
  } loc(#loc104)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":29:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":29:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":23:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:19)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:26)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:28)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":27:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":34:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:16)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:22)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:43)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":31:44)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":32:22)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":32:27)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":32:28)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":32:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":33:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":33:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":58:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":61:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":60:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":60:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":42:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":56:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":50:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":50:28)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":44:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":44:11)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":45:12)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":45:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:19)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:26)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:29)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:39)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:40)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":47:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:23)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":48:29)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":49:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":55:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:16)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:33)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:43)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":52:44)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":53:22)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":53:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":53:28)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":53:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":54:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c":54:14)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc5, #loc6])
#loc88 = loc(fused[#loc7, #loc8])
#loc89 = loc(fused[#loc9, #loc10])
#loc90 = loc(fused[#loc11, #loc12])
#loc91 = loc(fused[#loc13, #loc14])
#loc92 = loc(fused[#loc16, #loc15])
#loc93 = loc(fused[#loc17, #loc19])
#loc94 = loc(fused[#loc20, #loc19])
#loc95 = loc(fused[#loc21, #loc22])
#loc96 = loc(fused[#loc23, #loc24])
#loc97 = loc(fused[#loc25, #loc22])
#loc98 = loc(fused[#loc29, #loc30])
#loc99 = loc(fused[#loc34, #loc35])
#loc100 = loc(fused[#loc33, #loc35])
#loc101 = loc(fused[#loc36, #loc37])
#loc102 = loc(fused[#loc44, #loc45])
#loc103 = loc(fused[#loc46, #loc47])
#loc104 = loc(fused[#loc48, #loc49])
#loc105 = loc(fused[#loc50, #loc51])
#loc106 = loc(fused[#loc52, #loc53])
#loc107 = loc(fused[#loc55, #loc54])
#loc108 = loc(fused[#loc58, #loc59])
#loc109 = loc(fused[#loc57, #loc59])
#loc110 = loc(fused[#loc56, #loc60])
#loc111 = loc(fused[#loc61, #loc60])
#loc112 = loc(fused[#loc62, #loc63])
#loc113 = loc(fused[#loc64, #loc65])
#loc114 = loc(fused[#loc66, #loc63])
#loc115 = loc(fused[#loc70, #loc71])
#loc116 = loc(fused[#loc75, #loc76])
#loc117 = loc(fused[#loc74, #loc76])
#loc118 = loc(fused[#loc77, #loc78])
