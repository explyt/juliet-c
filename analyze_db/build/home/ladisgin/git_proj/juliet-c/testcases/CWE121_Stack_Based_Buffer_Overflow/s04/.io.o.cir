!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc6 = loc("../../../testcasesupport/io.c":11:17)
#loc7 = loc("../../../testcasesupport/io.c":11:30)
#loc21 = loc("../../../testcasesupport/io.c":19:18)
#loc22 = loc("../../../testcasesupport/io.c":19:34)
#loc34 = loc("../../../testcasesupport/io.c":27:20)
#loc35 = loc("../../../testcasesupport/io.c":27:24)
#loc42 = loc("../../../testcasesupport/io.c":32:22)
#loc43 = loc("../../../testcasesupport/io.c":32:28)
#loc50 = loc("../../../testcasesupport/io.c":37:22)
#loc51 = loc("../../../testcasesupport/io.c":37:28)
#loc58 = loc("../../../testcasesupport/io.c":42:21)
#loc59 = loc("../../../testcasesupport/io.c":42:26)
#loc65 = loc("../../../testcasesupport/io.c":47:25)
#loc66 = loc("../../../testcasesupport/io.c":47:33)
#loc75 = loc("../../../testcasesupport/io.c":52:22)
#loc76 = loc("../../../testcasesupport/io.c":52:29)
#loc83 = loc("../../../testcasesupport/io.c":57:24)
#loc84 = loc("../../../testcasesupport/io.c":57:29)
#loc91 = loc("../../../testcasesupport/io.c":62:21)
#loc92 = loc("../../../testcasesupport/io.c":62:29)
#loc107 = loc("../../../testcasesupport/io.c":72:24)
#loc108 = loc("../../../testcasesupport/io.c":72:33)
#loc114 = loc("../../../testcasesupport/io.c":77:31)
#loc115 = loc("../../../testcasesupport/io.c":77:45)
#loc123 = loc("../../../testcasesupport/io.c":82:22)
#loc124 = loc("../../../testcasesupport/io.c":82:29)
#loc131 = loc("../../../testcasesupport/io.c":87:23)
#loc132 = loc("../../../testcasesupport/io.c":87:45)
#loc147 = loc("../../../testcasesupport/io.c":92:21)
#loc148 = loc("../../../testcasesupport/io.c":92:43)
#loc149 = loc("../../../testcasesupport/io.c":92:50)
#loc150 = loc("../../../testcasesupport/io.c":92:57)
#loc175 = loc("../../../testcasesupport/io.c":105:23)
#loc176 = loc("../../../testcasesupport/io.c":105:39)
#loc177 = loc("../../../testcasesupport/io.c":105:46)
#loc178 = loc("../../../testcasesupport/io.c":105:53)
#loc179 = loc("../../../testcasesupport/io.c":105:63)
#loc180 = loc("../../../testcasesupport/io.c":105:76)
#loc190 = loc("../../../testcasesupport/io.c":113:34)
#loc192 = loc("../../../testcasesupport/io.c":113:67)
#loc215 = loc("../../../testcasesupport/io.c":127:25)
#loc216 = loc("../../../testcasesupport/io.c":127:41)
#loc217 = loc("../../../testcasesupport/io.c":127:48)
#loc218 = loc("../../../testcasesupport/io.c":127:55)
#loc219 = loc("../../../testcasesupport/io.c":127:65)
#loc220 = loc("../../../testcasesupport/io.c":127:81)
#loc230 = loc("../../../testcasesupport/io.c":135:34)
#loc236 = loc("../../../testcasesupport/io.c":135:68)
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc326 = loc(fused[#loc6, #loc7])
#loc332 = loc(fused[#loc21, #loc22])
#loc337 = loc(fused[#loc34, #loc35])
#loc339 = loc(fused[#loc42, #loc43])
#loc341 = loc(fused[#loc50, #loc51])
#loc343 = loc(fused[#loc58, #loc59])
#loc345 = loc(fused[#loc65, #loc66])
#loc348 = loc(fused[#loc75, #loc76])
#loc350 = loc(fused[#loc83, #loc84])
#loc352 = loc(fused[#loc91, #loc92])
#loc357 = loc(fused[#loc107, #loc108])
#loc359 = loc(fused[#loc114, #loc115])
#loc361 = loc(fused[#loc123, #loc124])
#loc363 = loc(fused[#loc131, #loc132])
#loc366 = loc(fused[#loc147, #loc148])
#loc367 = loc(fused[#loc149, #loc150])
#loc377 = loc(fused[#loc175, #loc176])
#loc378 = loc(fused[#loc177, #loc178])
#loc379 = loc(fused[#loc179, #loc180])
#loc391 = loc(fused[#loc215, #loc216])
#loc392 = loc(fused[#loc217, #loc218])
#loc393 = loc(fused[#loc219, #loc220])
module @"/home/ladisgin/git_proj/juliet-c/testcasesupport/io.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc324)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.func @printLine(%arg0: !cir.ptr<!s8i> loc(fused[#loc6, #loc7])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["line", init] {alignment = 8 : i64} loc(#loc326)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc8)
    cir.br ^bb1 loc(#loc327)
  ^bb1:  // pred: ^bb0
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc11)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc12)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    %4 = cir.cmp(ne, %1, %3) : !cir.ptr<!s8i>, !cir.bool loc(#loc328)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc329)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc14)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
    %9 = cir.call @printf(%7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc14)
    cir.br ^bb3 loc(#loc10)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc10)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc5)
  } loc(#loc325)
  cir.func private @wprintf(!cir.ptr<!s32i>, ...) -> !s32i loc(#loc330)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<[#cir.int<37> : !s32i, #cir.int<108> : !s32i, #cir.int<115> : !s32i, #cir.int<10> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 5> {alignment = 4 : i64} loc(#loc18)
  cir.func @printWLine(%arg0: !cir.ptr<!s32i> loc(fused[#loc21, #loc22])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["line", init] {alignment = 8 : i64} loc(#loc332)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc23)
    cir.br ^bb1 loc(#loc333)
  ^bb1:  // pred: ^bb0
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc27)
    %4 = cir.cmp(ne, %1, %3) : !cir.ptr<!s32i>, !cir.bool loc(#loc334)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc335)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s32i x 5>> loc(#loc18)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc18)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
    %8 = cir.call @wprintf(%6, %7) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !s32i loc(#loc30)
    cir.br ^bb3 loc(#loc25)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc25)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc20)
  } loc(#loc331)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"%d\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc31)
  cir.func @printIntLine(%arg0: !s32i loc(fused[#loc34, #loc35])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intNumber", init] {alignment = 4 : i64} loc(#loc337)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc36)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc37)
    %2 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc31)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc31)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %5 = cir.call @printf(%3, %4) : (!cir.ptr<!s8i>, !s32i) -> !s32i loc(#loc37)
    cir.return loc(#loc33)
  } loc(#loc336)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"%hd\0A\00" : !cir.array<!s8i x 5>> : !cir.array<!s8i x 5> {alignment = 1 : i64} loc(#loc39)
  cir.func @printShortLine(%arg0: !s16i loc(fused[#loc42, #loc43])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["shortNumber", init] {alignment = 2 : i64} loc(#loc339)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc44)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc45)
    %2 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc39)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc39)
    %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc46)
    %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc46)
    %6 = cir.call @printf(%3, %5) : (!cir.ptr<!s8i>, !s32i) -> !s32i loc(#loc45)
    cir.return loc(#loc41)
  } loc(#loc338)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"%f\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc47)
  cir.func @printFloatLine(%arg0: !cir.float loc(fused[#loc50, #loc51])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["floatNumber", init] {alignment = 4 : i64} loc(#loc341)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc52)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc53)
    %2 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc47)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc47)
    %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc54)
    %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc54)
    %6 = cir.call @printf(%3, %5) : (!cir.ptr<!s8i>, !cir.double) -> !s32i loc(#loc53)
    cir.return loc(#loc49)
  } loc(#loc340)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"%ld\0A\00" : !cir.array<!s8i x 5>> : !cir.array<!s8i x 5> {alignment = 1 : i64} loc(#loc55)
  cir.func @printLongLine(%arg0: !s64i loc(fused[#loc58, #loc59])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["longNumber", init] {alignment = 8 : i64} loc(#loc343)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc60)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc61)
    %2 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc55)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc55)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc62)
    %5 = cir.call @printf(%3, %4) : (!cir.ptr<!s8i>, !s64i) -> !s32i loc(#loc61)
    cir.return loc(#loc57)
  } loc(#loc342)
  cir.func @printLongLongLine(%arg0: !s64i loc(fused[#loc65, #loc66])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["longLongIntNumber", init] {alignment = 8 : i64} loc(#loc345)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc67)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc68)
    %2 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc346)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc346)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc71)
    %5 = cir.call @printf(%3, %4) : (!cir.ptr<!s8i>, !s64i) -> !s32i loc(#loc68)
    cir.return loc(#loc64)
  } loc(#loc344)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"%zu\0A\00" : !cir.array<!s8i x 5>> : !cir.array<!s8i x 5> {alignment = 1 : i64} loc(#loc72)
  cir.func @printSizeTLine(%arg0: !u64i loc(fused[#loc75, #loc76])) extra(#fn_attr) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sizeTNumber", init] {alignment = 8 : i64} loc(#loc348)
    cir.store %arg0, %0 : !u64i, !cir.ptr<!u64i> loc(#loc77)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc78)
    %2 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc72)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc72)
    %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc79)
    %5 = cir.call @printf(%3, %4) : (!cir.ptr<!s8i>, !u64i) -> !s32i loc(#loc78)
    cir.return loc(#loc74)
  } loc(#loc347)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"%02x\0A\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc80)
  cir.func @printHexCharLine(%arg0: !s8i loc(fused[#loc83, #loc84])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charHex", init] {alignment = 1 : i64} loc(#loc350)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc85)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc86)
    %2 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc80)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc80)
    %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc87)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc87)
    %6 = cir.call @printf(%3, %5) : (!cir.ptr<!s8i>, !s32i) -> !s32i loc(#loc86)
    cir.return loc(#loc82)
  } loc(#loc349)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"%ls\0A\00" : !cir.array<!s8i x 5>> : !cir.array<!s8i x 5> {alignment = 1 : i64} loc(#loc88)
  cir.func @printWcharLine(%arg0: !s32i loc(fused[#loc91, #loc92])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["wideChar", init] {alignment = 4 : i64} loc(#loc352)
    %1 = cir.alloca !cir.array<!s32i x 2>, !cir.ptr<!cir.array<!s32i x 2>>, ["s"] {alignment = 4 : i64} loc(#loc353)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 2>>), !cir.ptr<!s32i> loc(#loc98)
    %5 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc98)
    cir.store %2, %5 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 2>>), !cir.ptr<!s32i> loc(#loc101)
    %9 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc101)
    cir.store %6, %9 : !s32i, !cir.ptr<!s32i> loc(#loc355)
    %10 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc102)
    %11 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc88)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc88)
    %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 2>>), !cir.ptr<!s32i> loc(#loc103)
    %14 = cir.call @printf(%12, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc102)
    cir.return loc(#loc90)
  } loc(#loc351)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"%u\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc104)
  cir.func @printUnsignedLine(%arg0: !u32i loc(fused[#loc107, #loc108])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["unsignedNumber", init] {alignment = 4 : i64} loc(#loc357)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc109)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc110)
    %2 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc104)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc104)
    %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc111)
    %5 = cir.call @printf(%3, %4) : (!cir.ptr<!s8i>, !u32i) -> !s32i loc(#loc110)
    cir.return loc(#loc106)
  } loc(#loc356)
  cir.func @printHexUnsignedCharLine(%arg0: !u8i loc(fused[#loc114, #loc115])) extra(#fn_attr) {
    %0 = cir.alloca !u8i, !cir.ptr<!u8i>, ["unsignedCharacter", init] {alignment = 1 : i64} loc(#loc359)
    cir.store %arg0, %0 : !u8i, !cir.ptr<!u8i> loc(#loc116)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc117)
    %2 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc118)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc118)
    %4 = cir.load %0 : !cir.ptr<!u8i>, !u8i loc(#loc119)
    %5 = cir.cast(integral, %4 : !u8i), !s32i loc(#loc119)
    %6 = cir.call @printf(%3, %5) : (!cir.ptr<!s8i>, !s32i) -> !s32i loc(#loc117)
    cir.return loc(#loc113)
  } loc(#loc358)
  cir.global "private" constant cir_private dsolocal @".str.10" = #cir.const_array<"%g\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc120)
  cir.func @printDoubleLine(%arg0: !cir.double loc(fused[#loc123, #loc124])) extra(#fn_attr) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc361)
    cir.store %arg0, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc125)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc126)
    %2 = cir.get_global @".str.10" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc120)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc120)
    %4 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc127)
    %5 = cir.call @printf(%3, %4) : (!cir.ptr<!s8i>, !cir.double) -> !s32i loc(#loc126)
    cir.return loc(#loc122)
  } loc(#loc360)
  cir.global "private" constant cir_private dsolocal @".str.11" = #cir.const_array<"%d -- %d\0A\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc128)
  cir.func @printStructLine(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc131, #loc132])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["structTwoIntsStruct", init] {alignment = 8 : i64} loc(#loc363)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc133)
    %1 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc134)
    %2 = cir.get_global @".str.11" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc128)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc128)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc135)
    %5 = cir.get_member %4[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc136)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc138)
    %8 = cir.get_member %7[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc139)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %10 = cir.call @printf(%3, %6, %9) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc134)
    cir.return loc(#loc130)
  } loc(#loc362)
  cir.global "private" constant cir_private dsolocal @".str.12" = #cir.const_array<"%02x\00" : !cir.array<!s8i x 5>> : !cir.array<!s8i x 5> {alignment = 1 : i64} loc(#loc141)
  cir.func private @puts(!cir.ptr<!s8i>) -> !s32i loc(#loc364)
  cir.global "private" constant cir_private dsolocal @".str.13" = #cir.zero : !cir.array<!s8i x 1> {alignment = 1 : i64} loc(#loc144)
  cir.func @printBytesLine(%arg0: !cir.ptr<!u8i> loc(fused[#loc147, #loc148]), %arg1: !u64i loc(fused[#loc149, #loc150])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!u8i>, !cir.ptr<!cir.ptr<!u8i>>, ["bytes", init] {alignment = 8 : i64} loc(#loc366)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["numBytes", init] {alignment = 8 : i64} loc(#loc367)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc368)
    cir.store %arg0, %0 : !cir.ptr<!u8i>, !cir.ptr<!cir.ptr<!u8i>> loc(#loc153)
    cir.store %arg1, %1 : !u64i, !cir.ptr<!u64i> loc(#loc153)
    cir.br ^bb1 loc(#loc369)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc156)
    cir.store %4, %2 : !u64i, !cir.ptr<!u64i> loc(#loc370)
    cir.br ^bb2 loc(#loc369)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc158)
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc159)
    %7 = cir.cmp(lt, %5, %6) : !u64i, !cir.bool loc(#loc371)
    cir.brcond %7 ^bb3, ^bb7 loc(#loc160)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc372)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @printf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, ...)>> loc(#loc162)
    %9 = cir.get_global @".str.12" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc141)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc141)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!u8i>>, !cir.ptr<!u8i> loc(#loc163)
    %12 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc164)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!u8i>, %12 : !u64i), !cir.ptr<!u8i> loc(#loc165)
    %14 = cir.load %13 : !cir.ptr<!u8i>, !u8i loc(#loc163)
    %15 = cir.cast(integral, %14 : !u8i), !s32i loc(#loc163)
    %16 = cir.call @printf(%10, %15) : (!cir.ptr<!s8i>, !s32i) -> !s32i loc(#loc162)
    cir.br ^bb5 loc(#loc155)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc155)
  ^bb6:  // pred: ^bb5
    %17 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc166)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc166)
    cir.store %18, %2 : !u64i, !cir.ptr<!u64i> loc(#loc373)
    cir.br ^bb2 loc(#loc369)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc155)
  ^bb8:  // pred: ^bb7
    %19 = cir.get_global @".str.13" : !cir.ptr<!cir.array<!s8i x 1>> loc(#loc144)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 1>>), !cir.ptr<!s8i> loc(#loc144)
    %21 = cir.call @puts(%20) : (!cir.ptr<!s8i>) -> !s32i loc(#loc168)
    cir.return loc(#loc146)
  } loc(#loc365)
  cir.func private @__ctype_b_loc() -> !cir.ptr<!cir.ptr<!u16i>> extra(#fn_attr1) loc(#loc374)
  cir.func private @__isoc99_sscanf(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr1) loc(#loc375)
  cir.func @decodeHexChars(%arg0: !cir.ptr<!u8i> loc(fused[#loc175, #loc176]), %arg1: !u64i loc(fused[#loc177, #loc178]), %arg2: !cir.ptr<!s8i> loc(fused[#loc179, #loc180])) -> !u64i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["byte"] {alignment = 4 : i64} loc(#loc380)
    %1 = cir.alloca !cir.ptr<!u8i>, !cir.ptr<!cir.ptr<!u8i>>, ["bytes", init] {alignment = 8 : i64} loc(#loc377)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["numBytes", init] {alignment = 8 : i64} loc(#loc378)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["hex", init] {alignment = 8 : i64} loc(#loc379)
    %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__retval"] {alignment = 8 : i64} loc(#loc174)
    %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["numWritten", init] {alignment = 8 : i64} loc(#loc381)
    cir.store %arg0, %1 : !cir.ptr<!u8i>, !cir.ptr<!cir.ptr<!u8i>> loc(#loc185)
    cir.store %arg1, %2 : !u64i, !cir.ptr<!u64i> loc(#loc185)
    cir.store %arg2, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc184)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc184)
    cir.store %7, %5 : !u64i, !cir.ptr<!u64i> loc(#loc381)
    cir.br ^bb1 loc(#loc382)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc382)
  ^bb2:  // 2 preds: ^bb1, ^bb19
    %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc188)
    %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc189)
    %10 = cir.cmp(lt, %8, %9) : !u64i, !cir.bool loc(#loc383)
    cir.brcond %10 ^bb3, ^bb8 loc(#loc190)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @__ctype_b_loc() : () -> !cir.ptr<!cir.ptr<!u16i>> extra(#fn_attr1) loc(#loc191)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!u16i>>, !cir.ptr<!u16i> loc(#loc191)
    %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc191)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc191)
    %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc191)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc191)
    %18 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %17 : !u64i), !cir.ptr<!s8i> loc(#loc191)
    %19 = cir.load %18 : !cir.ptr<!s8i>, !s8i loc(#loc191)
    %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc191)
    %21 = cir.ptr_stride(%12 : !cir.ptr<!u16i>, %20 : !s32i), !cir.ptr<!u16i> loc(#loc191)
    %22 = cir.load %21 : !cir.ptr<!u16i>, !u16i loc(#loc191)
    %23 = cir.cast(integral, %22 : !u16i), !s32i loc(#loc191)
    %24 = cir.const #cir.int<4096> : !s32i loc(#loc191)
    %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc191)
    %26 = cir.cast(integral, %25 : !u16i), !s32i loc(#loc191)
    %27 = cir.binop(and, %23, %26) : !s32i loc(#loc191)
    %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc191)
    cir.brcond %28 ^bb4, ^bb5 loc(#loc190)
  ^bb4:  // pred: ^bb3
    %29 = cir.const #true loc(#loc190)
    cir.br ^bb6(%29 : !cir.bool) loc(#loc190)
  ^bb5:  // pred: ^bb3
    %30 = cir.const #false loc(#loc190)
    cir.br ^bb6(%30 : !cir.bool) loc(#loc190)
  ^bb6(%31: !cir.bool loc("../../../testcasesupport/io.c":113:34)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc190)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9(%31 : !cir.bool) loc(#loc190)
  ^bb8:  // pred: ^bb2
    %32 = cir.const #false loc(#loc190)
    cir.br ^bb9(%32 : !cir.bool) loc(#loc190)
  ^bb9(%33: !cir.bool loc("../../../testcasesupport/io.c":113:34)):  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc190)
  ^bb10:  // pred: ^bb9
    cir.brcond %33 ^bb11, ^bb16 loc(#loc192)
  ^bb11:  // pred: ^bb10
    %34 = cir.call @__ctype_b_loc() : () -> !cir.ptr<!cir.ptr<!u16i>> extra(#fn_attr1) loc(#loc193)
    %35 = cir.load %34 : !cir.ptr<!cir.ptr<!u16i>>, !cir.ptr<!u16i> loc(#loc193)
    %36 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
    %37 = cir.const #cir.int<2> : !s32i loc(#loc193)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc193)
    %39 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc193)
    %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc193)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc193)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc193)
    %43 = cir.binop(add, %40, %42) : !u64i loc(#loc193)
    %44 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc193)
    %45 = cir.load %44 : !cir.ptr<!s8i>, !s8i loc(#loc193)
    %46 = cir.cast(integral, %45 : !s8i), !s32i loc(#loc193)
    %47 = cir.ptr_stride(%35 : !cir.ptr<!u16i>, %46 : !s32i), !cir.ptr<!u16i> loc(#loc193)
    %48 = cir.load %47 : !cir.ptr<!u16i>, !u16i loc(#loc193)
    %49 = cir.cast(integral, %48 : !u16i), !s32i loc(#loc193)
    %50 = cir.const #cir.int<4096> : !s32i loc(#loc193)
    %51 = cir.cast(integral, %50 : !s32i), !u16i loc(#loc193)
    %52 = cir.cast(integral, %51 : !u16i), !s32i loc(#loc193)
    %53 = cir.binop(and, %49, %52) : !s32i loc(#loc193)
    %54 = cir.cast(int_to_bool, %53 : !s32i), !cir.bool loc(#loc193)
    cir.brcond %54 ^bb12, ^bb13 loc(#loc192)
  ^bb12:  // pred: ^bb11
    %55 = cir.const #true loc(#loc192)
    cir.br ^bb14(%55 : !cir.bool) loc(#loc192)
  ^bb13:  // pred: ^bb11
    %56 = cir.const #false loc(#loc192)
    cir.br ^bb14(%56 : !cir.bool) loc(#loc192)
  ^bb14(%57: !cir.bool loc("../../../testcasesupport/io.c":113:67)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc192)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17(%57 : !cir.bool) loc(#loc192)
  ^bb16:  // pred: ^bb10
    %58 = cir.const #false loc(#loc192)
    cir.br ^bb17(%58 : !cir.bool) loc(#loc192)
  ^bb17(%59: !cir.bool loc("../../../testcasesupport/io.c":113:67)):  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc192)
  ^bb18:  // pred: ^bb17
    cir.brcond %59 ^bb19, ^bb20 loc(#loc192)
  ^bb19:  // pred: ^bb18
    %60 = cir.get_global @__isoc99_sscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...)>> loc(#loc194)
    %61 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc195)
    %62 = cir.const #cir.int<2> : !s32i loc(#loc196)
    %63 = cir.cast(integral, %62 : !s32i), !u64i loc(#loc196)
    %64 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc197)
    %65 = cir.binop(mul, %63, %64) : !u64i loc(#loc384)
    %66 = cir.ptr_stride(%61 : !cir.ptr<!s8i>, %65 : !u64i), !cir.ptr<!s8i> loc(#loc198)
    %67 = cir.get_global @".str.12" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc199)
    %68 = cir.cast(array_to_ptrdecay, %67 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc199)
    %69 = cir.call @__isoc99_sscanf(%66, %68, %0) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i extra(#fn_attr1) loc(#loc194)
    %70 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    %71 = cir.cast(integral, %70 : !s32i), !u8i loc(#loc200)
    %72 = cir.load %1 : !cir.ptr<!cir.ptr<!u8i>>, !cir.ptr<!u8i> loc(#loc201)
    %73 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc202)
    %74 = cir.ptr_stride(%72 : !cir.ptr<!u8i>, %73 : !u64i), !cir.ptr<!u8i> loc(#loc203)
    cir.store %71, %74 : !u8i, !cir.ptr<!u8i> loc(#loc385)
    %75 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc204)
    %76 = cir.unary(inc, %75) : !u64i, !u64i loc(#loc204)
    cir.store %76, %5 : !u64i, !cir.ptr<!u64i> loc(#loc386)
    cir.br ^bb2 loc(#loc187)
  ^bb20:  // pred: ^bb18
    cir.br ^bb21 loc(#loc187)
  ^bb21:  // pred: ^bb20
    %77 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc206)
    cir.store %77, %4 : !u64i, !cir.ptr<!u64i> loc(#loc387)
    %78 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc387)
    cir.return %78 : !u64i loc(#loc387)
  } loc(#loc376)
  cir.func private @iswxdigit(!u32i) -> !s32i extra(#fn_attr1) loc(#loc388)
  cir.func private @__isoc99_swscanf(!cir.ptr<!s32i>, !cir.ptr<!s32i>, ...) -> !s32i extra(#fn_attr1) loc(#loc389)
  cir.global "private" constant cir_private dsolocal @".str.14" = #cir.const_array<[#cir.int<37> : !s32i, #cir.int<48> : !s32i, #cir.int<50> : !s32i, #cir.int<120> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 5> {alignment = 4 : i64} loc(#loc212)
  cir.func @decodeHexWChars(%arg0: !cir.ptr<!u8i> loc(fused[#loc215, #loc216]), %arg1: !u64i loc(fused[#loc217, #loc218]), %arg2: !cir.ptr<!s32i> loc(fused[#loc219, #loc220])) -> !u64i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["byte"] {alignment = 4 : i64} loc(#loc394)
    %1 = cir.alloca !cir.ptr<!u8i>, !cir.ptr<!cir.ptr<!u8i>>, ["bytes", init] {alignment = 8 : i64} loc(#loc391)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["numBytes", init] {alignment = 8 : i64} loc(#loc392)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["hex", init] {alignment = 8 : i64} loc(#loc393)
    %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__retval"] {alignment = 8 : i64} loc(#loc214)
    %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["numWritten", init] {alignment = 8 : i64} loc(#loc395)
    cir.store %arg0, %1 : !cir.ptr<!u8i>, !cir.ptr<!cir.ptr<!u8i>> loc(#loc225)
    cir.store %arg1, %2 : !u64i, !cir.ptr<!u64i> loc(#loc225)
    cir.store %arg2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc225)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc224)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc224)
    cir.store %7, %5 : !u64i, !cir.ptr<!u64i> loc(#loc395)
    cir.br ^bb1 loc(#loc396)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc396)
  ^bb2:  // 2 preds: ^bb1, ^bb19
    %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc228)
    %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc229)
    %10 = cir.cmp(lt, %8, %9) : !u64i, !cir.bool loc(#loc397)
    cir.brcond %10 ^bb3, ^bb8 loc(#loc230)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc231)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc232)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc232)
    %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc233)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc398)
    %16 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc234)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc231)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc231)
    %19 = cir.call @iswxdigit(%18) : (!u32i) -> !s32i extra(#fn_attr1) loc(#loc235)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc235)
    cir.brcond %20 ^bb4, ^bb5 loc(#loc230)
  ^bb4:  // pred: ^bb3
    %21 = cir.const #true loc(#loc230)
    cir.br ^bb6(%21 : !cir.bool) loc(#loc230)
  ^bb5:  // pred: ^bb3
    %22 = cir.const #false loc(#loc230)
    cir.br ^bb6(%22 : !cir.bool) loc(#loc230)
  ^bb6(%23: !cir.bool loc("../../../testcasesupport/io.c":135:34)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc230)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9(%23 : !cir.bool) loc(#loc230)
  ^bb8:  // pred: ^bb2
    %24 = cir.const #false loc(#loc230)
    cir.br ^bb9(%24 : !cir.bool) loc(#loc230)
  ^bb9(%25: !cir.bool loc("../../../testcasesupport/io.c":135:34)):  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc230)
  ^bb10:  // pred: ^bb9
    cir.brcond %25 ^bb11, ^bb16 loc(#loc236)
  ^bb11:  // pred: ^bb10
    %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
    %27 = cir.const #cir.int<2> : !s32i loc(#loc238)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc238)
    %29 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc239)
    %30 = cir.binop(mul, %28, %29) : !u64i loc(#loc399)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc240)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc240)
    %33 = cir.binop(add, %30, %32) : !u64i loc(#loc400)
    %34 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %33 : !u64i), !cir.ptr<!s32i> loc(#loc241)
    %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc237)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc237)
    %37 = cir.call @iswxdigit(%36) : (!u32i) -> !s32i extra(#fn_attr1) loc(#loc242)
    %38 = cir.cast(int_to_bool, %37 : !s32i), !cir.bool loc(#loc242)
    cir.brcond %38 ^bb12, ^bb13 loc(#loc236)
  ^bb12:  // pred: ^bb11
    %39 = cir.const #true loc(#loc236)
    cir.br ^bb14(%39 : !cir.bool) loc(#loc236)
  ^bb13:  // pred: ^bb11
    %40 = cir.const #false loc(#loc236)
    cir.br ^bb14(%40 : !cir.bool) loc(#loc236)
  ^bb14(%41: !cir.bool loc("../../../testcasesupport/io.c":135:68)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc236)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17(%41 : !cir.bool) loc(#loc236)
  ^bb16:  // pred: ^bb10
    %42 = cir.const #false loc(#loc236)
    cir.br ^bb17(%42 : !cir.bool) loc(#loc236)
  ^bb17(%43: !cir.bool loc("../../../testcasesupport/io.c":135:68)):  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc236)
  ^bb18:  // pred: ^bb17
    cir.brcond %43 ^bb19, ^bb20 loc(#loc236)
  ^bb19:  // pred: ^bb18
    %44 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc243)
    %45 = cir.const #cir.int<2> : !s32i loc(#loc244)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc244)
    %47 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc245)
    %48 = cir.binop(mul, %46, %47) : !u64i loc(#loc401)
    %49 = cir.ptr_stride(%44 : !cir.ptr<!s32i>, %48 : !u64i), !cir.ptr<!s32i> loc(#loc246)
    %50 = cir.get_global @".str.14" : !cir.ptr<!cir.array<!s32i x 5>> loc(#loc212)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc212)
    %52 = cir.call @__isoc99_swscanf(%49, %51, %0) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !s32i extra(#fn_attr1) loc(#loc247)
    %53 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc248)
    %54 = cir.cast(integral, %53 : !s32i), !u8i loc(#loc248)
    %55 = cir.load %1 : !cir.ptr<!cir.ptr<!u8i>>, !cir.ptr<!u8i> loc(#loc249)
    %56 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc250)
    %57 = cir.ptr_stride(%55 : !cir.ptr<!u8i>, %56 : !u64i), !cir.ptr<!u8i> loc(#loc251)
    cir.store %54, %57 : !u8i, !cir.ptr<!u8i> loc(#loc402)
    %58 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc252)
    %59 = cir.unary(inc, %58) : !u64i, !u64i loc(#loc252)
    cir.store %59, %5 : !u64i, !cir.ptr<!u64i> loc(#loc403)
    cir.br ^bb2 loc(#loc227)
  ^bb20:  // pred: ^bb18
    cir.br ^bb21 loc(#loc227)
  ^bb21:  // pred: ^bb20
    %60 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc254)
    cir.store %60, %4 : !u64i, !cir.ptr<!u64i> loc(#loc404)
    %61 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc404)
    cir.return %61 : !u64i loc(#loc404)
  } loc(#loc390)
  cir.func no_proto @globalReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc258)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc406)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc406)
    cir.return %2 : !s32i loc(#loc406)
  } loc(#loc405)
  cir.func no_proto @globalReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc261)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc262)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc408)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc408)
    cir.return %2 : !s32i loc(#loc408)
  } loc(#loc407)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc409)
  cir.func no_proto @globalReturnsTrueOrFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc267)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc268)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc269)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc411)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc412)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc412)
    cir.return %4 : !s32i loc(#loc412)
  } loc(#loc410)
  cir.global constant external dsolocal @GLOBAL_CONST_TRUE = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc413)
  cir.global constant external dsolocal @GLOBAL_CONST_FALSE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc414)
  cir.global constant external dsolocal @GLOBAL_CONST_FIVE = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc415)
  cir.global external dsolocal @globalTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc416)
  cir.global external dsolocal @globalFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc417)
  cir.global external dsolocal @globalFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc418)
  cir.func no_proto @good1() extra(#fn_attr) {
    cir.return loc(#loc285)
  } loc(#loc419)
  cir.func no_proto @good2() extra(#fn_attr) {
    cir.return loc(#loc287)
  } loc(#loc420)
  cir.func no_proto @good3() extra(#fn_attr) {
    cir.return loc(#loc289)
  } loc(#loc421)
  cir.func no_proto @good4() extra(#fn_attr) {
    cir.return loc(#loc291)
  } loc(#loc422)
  cir.func no_proto @good5() extra(#fn_attr) {
    cir.return loc(#loc293)
  } loc(#loc423)
  cir.func no_proto @good6() extra(#fn_attr) {
    cir.return loc(#loc295)
  } loc(#loc424)
  cir.func no_proto @good7() extra(#fn_attr) {
    cir.return loc(#loc297)
  } loc(#loc425)
  cir.func no_proto @good8() extra(#fn_attr) {
    cir.return loc(#loc299)
  } loc(#loc426)
  cir.func no_proto @good9() extra(#fn_attr) {
    cir.return loc(#loc301)
  } loc(#loc427)
  cir.func no_proto @bad1() extra(#fn_attr) {
    cir.return loc(#loc303)
  } loc(#loc428)
  cir.func no_proto @bad2() extra(#fn_attr) {
    cir.return loc(#loc305)
  } loc(#loc429)
  cir.func no_proto @bad3() extra(#fn_attr) {
    cir.return loc(#loc307)
  } loc(#loc430)
  cir.func no_proto @bad4() extra(#fn_attr) {
    cir.return loc(#loc309)
  } loc(#loc431)
  cir.func no_proto @bad5() extra(#fn_attr) {
    cir.return loc(#loc311)
  } loc(#loc432)
  cir.func no_proto @bad6() extra(#fn_attr) {
    cir.return loc(#loc313)
  } loc(#loc433)
  cir.func no_proto @bad7() extra(#fn_attr) {
    cir.return loc(#loc315)
  } loc(#loc434)
  cir.func no_proto @bad8() extra(#fn_attr) {
    cir.return loc(#loc317)
  } loc(#loc435)
  cir.func no_proto @bad9() extra(#fn_attr) {
    cir.return loc(#loc319)
  } loc(#loc436)
  cir.global external dsolocal @globalArgc = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc437)
  cir.global external dsolocal @globalArgv = #cir.ptr<null> : !cir.ptr<!cir.ptr<!s8i>> {alignment = 8 : i64} loc(#loc438)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcasesupport/io.c":0:0)
#loc1 = loc("/usr/include/stdio.h":363:1)
#loc2 = loc("/usr/include/stdio.h":363:56)
#loc3 = loc("../../../testcasesupport/io.c":15:16)
#loc4 = loc("../../../testcasesupport/io.c":11:1)
#loc5 = loc("../../../testcasesupport/io.c":17:1)
#loc8 = loc("../../../testcasesupport/io.c":12:1)
#loc9 = loc("../../../testcasesupport/io.c":13:5)
#loc10 = loc("../../../testcasesupport/io.c":16:5)
#loc11 = loc("../../../testcasesupport/io.c":13:8)
#loc12 = loc("../../../testcasesupport/io.c":13:16)
#loc13 = loc("../../../testcasesupport/io.c":14:5)
#loc14 = loc("../../../testcasesupport/io.c":15:9)
#loc15 = loc("../../../testcasesupport/io.c":15:24)
#loc16 = loc("/usr/include/wchar.h":739:1)
#loc17 = loc("/usr/include/wchar.h":739:60)
#loc18 = loc("../../../testcasesupport/io.c":23:17)
#loc19 = loc("../../../testcasesupport/io.c":19:1)
#loc20 = loc("../../../testcasesupport/io.c":25:1)
#loc23 = loc("../../../testcasesupport/io.c":20:1)
#loc24 = loc("../../../testcasesupport/io.c":21:5)
#loc25 = loc("../../../testcasesupport/io.c":24:5)
#loc26 = loc("../../../testcasesupport/io.c":21:8)
#loc27 = loc("../../../testcasesupport/io.c":21:16)
#loc28 = loc("../../../testcasesupport/io.c":22:5)
#loc29 = loc("../../../testcasesupport/io.c":23:27)
#loc30 = loc("../../../testcasesupport/io.c":23:9)
#loc31 = loc("../../../testcasesupport/io.c":29:12)
#loc32 = loc("../../../testcasesupport/io.c":27:1)
#loc33 = loc("../../../testcasesupport/io.c":30:1)
#loc36 = loc("../../../testcasesupport/io.c":28:1)
#loc37 = loc("../../../testcasesupport/io.c":29:5)
#loc38 = loc("../../../testcasesupport/io.c":29:20)
#loc39 = loc("../../../testcasesupport/io.c":34:12)
#loc40 = loc("../../../testcasesupport/io.c":32:1)
#loc41 = loc("../../../testcasesupport/io.c":35:1)
#loc44 = loc("../../../testcasesupport/io.c":33:1)
#loc45 = loc("../../../testcasesupport/io.c":34:5)
#loc46 = loc("../../../testcasesupport/io.c":34:21)
#loc47 = loc("../../../testcasesupport/io.c":39:12)
#loc48 = loc("../../../testcasesupport/io.c":37:1)
#loc49 = loc("../../../testcasesupport/io.c":40:1)
#loc52 = loc("../../../testcasesupport/io.c":38:1)
#loc53 = loc("../../../testcasesupport/io.c":39:5)
#loc54 = loc("../../../testcasesupport/io.c":39:20)
#loc55 = loc("../../../testcasesupport/io.c":44:12)
#loc56 = loc("../../../testcasesupport/io.c":42:1)
#loc57 = loc("../../../testcasesupport/io.c":45:1)
#loc60 = loc("../../../testcasesupport/io.c":43:1)
#loc61 = loc("../../../testcasesupport/io.c":44:5)
#loc62 = loc("../../../testcasesupport/io.c":44:21)
#loc63 = loc("../../../testcasesupport/io.c":47:1)
#loc64 = loc("../../../testcasesupport/io.c":50:1)
#loc67 = loc("../../../testcasesupport/io.c":48:1)
#loc68 = loc("../../../testcasesupport/io.c":49:5)
#loc69 = loc("../../../testcasesupport/io.c":49:12)
#loc70 = loc("../../../testcasesupport/io.c":49:23)
#loc71 = loc("../../../testcasesupport/io.c":49:29)
#loc72 = loc("../../../testcasesupport/io.c":54:12)
#loc73 = loc("../../../testcasesupport/io.c":52:1)
#loc74 = loc("../../../testcasesupport/io.c":55:1)
#loc77 = loc("../../../testcasesupport/io.c":53:1)
#loc78 = loc("../../../testcasesupport/io.c":54:5)
#loc79 = loc("../../../testcasesupport/io.c":54:21)
#loc80 = loc("../../../testcasesupport/io.c":59:12)
#loc81 = loc("../../../testcasesupport/io.c":57:1)
#loc82 = loc("../../../testcasesupport/io.c":60:1)
#loc85 = loc("../../../testcasesupport/io.c":58:1)
#loc86 = loc("../../../testcasesupport/io.c":59:5)
#loc87 = loc("../../../testcasesupport/io.c":59:22)
#loc88 = loc("../../../testcasesupport/io.c":69:12)
#loc89 = loc("../../../testcasesupport/io.c":62:1)
#loc90 = loc("../../../testcasesupport/io.c":70:1)
#loc93 = loc("../../../testcasesupport/io.c":66:5)
#loc94 = loc("../../../testcasesupport/io.c":66:16)
#loc95 = loc("../../../testcasesupport/io.c":63:1)
#loc96 = loc("../../../testcasesupport/io.c":67:16)
#loc97 = loc("../../../testcasesupport/io.c":67:11)
#loc98 = loc("../../../testcasesupport/io.c":67:9)
#loc99 = loc("../../../testcasesupport/io.c":68:16)
#loc100 = loc("../../../testcasesupport/io.c":68:11)
#loc101 = loc("../../../testcasesupport/io.c":68:9)
#loc102 = loc("../../../testcasesupport/io.c":69:5)
#loc103 = loc("../../../testcasesupport/io.c":69:21)
#loc104 = loc("../../../testcasesupport/io.c":74:12)
#loc105 = loc("../../../testcasesupport/io.c":72:1)
#loc106 = loc("../../../testcasesupport/io.c":75:1)
#loc109 = loc("../../../testcasesupport/io.c":73:1)
#loc110 = loc("../../../testcasesupport/io.c":74:5)
#loc111 = loc("../../../testcasesupport/io.c":74:20)
#loc112 = loc("../../../testcasesupport/io.c":77:1)
#loc113 = loc("../../../testcasesupport/io.c":80:1)
#loc116 = loc("../../../testcasesupport/io.c":78:1)
#loc117 = loc("../../../testcasesupport/io.c":79:5)
#loc118 = loc("../../../testcasesupport/io.c":79:12)
#loc119 = loc("../../../testcasesupport/io.c":79:22)
#loc120 = loc("../../../testcasesupport/io.c":84:12)
#loc121 = loc("../../../testcasesupport/io.c":82:1)
#loc122 = loc("../../../testcasesupport/io.c":85:1)
#loc125 = loc("../../../testcasesupport/io.c":83:1)
#loc126 = loc("../../../testcasesupport/io.c":84:5)
#loc127 = loc("../../../testcasesupport/io.c":84:20)
#loc128 = loc("../../../testcasesupport/io.c":89:12)
#loc129 = loc("../../../testcasesupport/io.c":87:1)
#loc130 = loc("../../../testcasesupport/io.c":90:1)
#loc133 = loc("../../../testcasesupport/io.c":88:1)
#loc134 = loc("../../../testcasesupport/io.c":89:5)
#loc135 = loc("../../../testcasesupport/io.c":89:26)
#loc136 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc137 = loc("../../../testcasesupport/io.c":89:47)
#loc138 = loc("../../../testcasesupport/io.c":89:55)
#loc139 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc140 = loc("../../../testcasesupport/io.c":89:76)
#loc141 = loc("../../../testcasesupport/io.c":97:16)
#loc142 = loc("/usr/include/stdio.h":714:1)
#loc143 = loc("/usr/include/stdio.h":714:33)
#loc144 = loc("../../../testcasesupport/io.c":99:10)
#loc145 = loc("../../../testcasesupport/io.c":92:1)
#loc146 = loc("../../../testcasesupport/io.c":100:1)
#loc151 = loc("../../../testcasesupport/io.c":94:5)
#loc152 = loc("../../../testcasesupport/io.c":94:12)
#loc153 = loc("../../../testcasesupport/io.c":93:1)
#loc154 = loc("../../../testcasesupport/io.c":95:5)
#loc155 = loc("../../../testcasesupport/io.c":98:5)
#loc156 = loc("../../../testcasesupport/io.c":95:14)
#loc157 = loc("../../../testcasesupport/io.c":95:10)
#loc158 = loc("../../../testcasesupport/io.c":95:17)
#loc159 = loc("../../../testcasesupport/io.c":95:21)
#loc160 = loc("../../../testcasesupport/io.c":95:19)
#loc161 = loc("../../../testcasesupport/io.c":96:5)
#loc162 = loc("../../../testcasesupport/io.c":97:9)
#loc163 = loc("../../../testcasesupport/io.c":97:24)
#loc164 = loc("../../../testcasesupport/io.c":97:30)
#loc165 = loc("../../../testcasesupport/io.c":97:31)
#loc166 = loc("../../../testcasesupport/io.c":95:31)
#loc167 = loc("../../../testcasesupport/io.c":95:33)
#loc168 = loc("../../../testcasesupport/io.c":99:5)
#loc169 = loc("/usr/include/ctype.h":79:1)
#loc170 = loc("/usr/include/ctype.h":80:40)
#loc171 = loc("/usr/include/stdio.h":468:1)
#loc172 = loc("/usr/include/stdio.h":468:12)
#loc173 = loc("../../../testcasesupport/io.c":105:1)
#loc174 = loc("../../../testcasesupport/io.c":122:1)
#loc181 = loc("../../../testcasesupport/io.c":115:9)
#loc182 = loc("../../../testcasesupport/io.c":115:13)
#loc183 = loc("../../../testcasesupport/io.c":107:5)
#loc184 = loc("../../../testcasesupport/io.c":107:25)
#loc185 = loc("../../../testcasesupport/io.c":106:1)
#loc186 = loc("../../../testcasesupport/io.c":113:5)
#loc187 = loc("../../../testcasesupport/io.c":119:5)
#loc188 = loc("../../../testcasesupport/io.c":113:12)
#loc189 = loc("../../../testcasesupport/io.c":113:25)
#loc191 = loc("../../../testcasesupport/io.c":113:37)
#loc193 = loc("../../../testcasesupport/io.c":113:70)
#loc194 = loc("../../../testcasesupport/io.c":116:9)
#loc195 = loc("../../../testcasesupport/io.c":116:17)
#loc196 = loc("../../../testcasesupport/io.c":116:21)
#loc197 = loc("../../../testcasesupport/io.c":116:25)
#loc198 = loc("../../../testcasesupport/io.c":116:35)
#loc199 = loc("../../../testcasesupport/io.c":116:38)
#loc200 = loc("../../../testcasesupport/io.c":117:45)
#loc201 = loc("../../../testcasesupport/io.c":117:9)
#loc202 = loc("../../../testcasesupport/io.c":117:15)
#loc203 = loc("../../../testcasesupport/io.c":117:25)
#loc204 = loc("../../../testcasesupport/io.c":118:9)
#loc205 = loc("../../../testcasesupport/io.c":118:11)
#loc206 = loc("../../../testcasesupport/io.c":121:12)
#loc207 = loc("../../../testcasesupport/io.c":121:5)
#loc208 = loc("/usr/include/bits/wctype-wchar.h":140:1)
#loc209 = loc("/usr/include/bits/wctype-wchar.h":140:36)
#loc210 = loc("/usr/include/wchar.h":826:1)
#loc211 = loc("/usr/include/wchar.h":826:12)
#loc212 = loc("../../../testcasesupport/io.c":138:39)
#loc213 = loc("../../../testcasesupport/io.c":127:2)
#loc214 = loc("../../../testcasesupport/io.c":144:1)
#loc221 = loc("../../../testcasesupport/io.c":137:9)
#loc222 = loc("../../../testcasesupport/io.c":137:13)
#loc223 = loc("../../../testcasesupport/io.c":129:5)
#loc224 = loc("../../../testcasesupport/io.c":129:25)
#loc225 = loc("../../../testcasesupport/io.c":128:2)
#loc226 = loc("../../../testcasesupport/io.c":135:5)
#loc227 = loc("../../../testcasesupport/io.c":141:5)
#loc228 = loc("../../../testcasesupport/io.c":135:12)
#loc229 = loc("../../../testcasesupport/io.c":135:25)
#loc231 = loc("../../../testcasesupport/io.c":135:47)
#loc232 = loc("../../../testcasesupport/io.c":135:51)
#loc233 = loc("../../../testcasesupport/io.c":135:55)
#loc234 = loc("../../../testcasesupport/io.c":135:65)
#loc235 = loc("../../../testcasesupport/io.c":135:37)
#loc237 = loc("../../../testcasesupport/io.c":135:81)
#loc238 = loc("../../../testcasesupport/io.c":135:85)
#loc239 = loc("../../../testcasesupport/io.c":135:89)
#loc240 = loc("../../../testcasesupport/io.c":135:102)
#loc241 = loc("../../../testcasesupport/io.c":135:103)
#loc242 = loc("../../../testcasesupport/io.c":135:71)
#loc243 = loc("../../../testcasesupport/io.c":138:18)
#loc244 = loc("../../../testcasesupport/io.c":138:22)
#loc245 = loc("../../../testcasesupport/io.c":138:26)
#loc246 = loc("../../../testcasesupport/io.c":138:36)
#loc247 = loc("../../../testcasesupport/io.c":138:9)
#loc248 = loc("../../../testcasesupport/io.c":139:45)
#loc249 = loc("../../../testcasesupport/io.c":139:9)
#loc250 = loc("../../../testcasesupport/io.c":139:15)
#loc251 = loc("../../../testcasesupport/io.c":139:25)
#loc252 = loc("../../../testcasesupport/io.c":140:9)
#loc253 = loc("../../../testcasesupport/io.c":140:11)
#loc254 = loc("../../../testcasesupport/io.c":143:12)
#loc255 = loc("../../../testcasesupport/io.c":143:5)
#loc256 = loc("../../../testcasesupport/io.c":148:1)
#loc257 = loc("../../../testcasesupport/io.c":151:1)
#loc258 = loc("../../../testcasesupport/io.c":150:12)
#loc259 = loc("../../../testcasesupport/io.c":150:5)
#loc260 = loc("../../../testcasesupport/io.c":153:1)
#loc261 = loc("../../../testcasesupport/io.c":156:1)
#loc262 = loc("../../../testcasesupport/io.c":155:12)
#loc263 = loc("../../../testcasesupport/io.c":155:5)
#loc264 = loc("/usr/include/stdlib.h":573:1)
#loc265 = loc("/usr/include/stdlib.h":573:24)
#loc266 = loc("../../../testcasesupport/io.c":158:1)
#loc267 = loc("../../../testcasesupport/io.c":161:1)
#loc268 = loc("../../../testcasesupport/io.c":160:13)
#loc269 = loc("../../../testcasesupport/io.c":160:22)
#loc270 = loc("../../../testcasesupport/io.c":160:5)
#loc271 = loc("../../../testcasesupport/io.c":160:23)
#loc272 = loc("../../../testcasesupport/io.c":166:1)
#loc273 = loc("../../../testcasesupport/io.c":166:31)
#loc274 = loc("../../../testcasesupport/io.c":167:1)
#loc275 = loc("../../../testcasesupport/io.c":167:32)
#loc276 = loc("../../../testcasesupport/io.c":168:1)
#loc277 = loc("../../../testcasesupport/io.c":168:31)
#loc278 = loc("../../../testcasesupport/io.c":173:1)
#loc279 = loc("../../../testcasesupport/io.c":173:18)
#loc280 = loc("../../../testcasesupport/io.c":174:1)
#loc281 = loc("../../../testcasesupport/io.c":174:19)
#loc282 = loc("../../../testcasesupport/io.c":175:1)
#loc283 = loc("../../../testcasesupport/io.c":175:18)
#loc284 = loc("../../../testcasesupport/io.c":179:1)
#loc285 = loc("../../../testcasesupport/io.c":179:16)
#loc286 = loc("../../../testcasesupport/io.c":180:1)
#loc287 = loc("../../../testcasesupport/io.c":180:16)
#loc288 = loc("../../../testcasesupport/io.c":181:1)
#loc289 = loc("../../../testcasesupport/io.c":181:16)
#loc290 = loc("../../../testcasesupport/io.c":182:1)
#loc291 = loc("../../../testcasesupport/io.c":182:16)
#loc292 = loc("../../../testcasesupport/io.c":183:1)
#loc293 = loc("../../../testcasesupport/io.c":183:16)
#loc294 = loc("../../../testcasesupport/io.c":184:1)
#loc295 = loc("../../../testcasesupport/io.c":184:16)
#loc296 = loc("../../../testcasesupport/io.c":185:1)
#loc297 = loc("../../../testcasesupport/io.c":185:16)
#loc298 = loc("../../../testcasesupport/io.c":186:1)
#loc299 = loc("../../../testcasesupport/io.c":186:16)
#loc300 = loc("../../../testcasesupport/io.c":187:1)
#loc301 = loc("../../../testcasesupport/io.c":187:16)
#loc302 = loc("../../../testcasesupport/io.c":190:1)
#loc303 = loc("../../../testcasesupport/io.c":190:15)
#loc304 = loc("../../../testcasesupport/io.c":191:1)
#loc305 = loc("../../../testcasesupport/io.c":191:15)
#loc306 = loc("../../../testcasesupport/io.c":192:1)
#loc307 = loc("../../../testcasesupport/io.c":192:15)
#loc308 = loc("../../../testcasesupport/io.c":193:1)
#loc309 = loc("../../../testcasesupport/io.c":193:15)
#loc310 = loc("../../../testcasesupport/io.c":194:1)
#loc311 = loc("../../../testcasesupport/io.c":194:15)
#loc312 = loc("../../../testcasesupport/io.c":195:1)
#loc313 = loc("../../../testcasesupport/io.c":195:15)
#loc314 = loc("../../../testcasesupport/io.c":196:1)
#loc315 = loc("../../../testcasesupport/io.c":196:15)
#loc316 = loc("../../../testcasesupport/io.c":197:1)
#loc317 = loc("../../../testcasesupport/io.c":197:15)
#loc318 = loc("../../../testcasesupport/io.c":198:1)
#loc319 = loc("../../../testcasesupport/io.c":198:15)
#loc320 = loc("../../../testcasesupport/io.c":206:1)
#loc321 = loc("../../../testcasesupport/io.c":206:18)
#loc322 = loc("../../../testcasesupport/io.c":207:1)
#loc323 = loc("../../../testcasesupport/io.c":207:21)
#loc324 = loc(fused[#loc1, #loc2])
#loc325 = loc(fused[#loc4, #loc5])
#loc327 = loc(fused[#loc9, #loc10])
#loc328 = loc(fused[#loc11, #loc12])
#loc329 = loc(fused[#loc13, #loc10])
#loc330 = loc(fused[#loc16, #loc17])
#loc331 = loc(fused[#loc19, #loc20])
#loc333 = loc(fused[#loc24, #loc25])
#loc334 = loc(fused[#loc26, #loc27])
#loc335 = loc(fused[#loc28, #loc25])
#loc336 = loc(fused[#loc32, #loc33])
#loc338 = loc(fused[#loc40, #loc41])
#loc340 = loc(fused[#loc48, #loc49])
#loc342 = loc(fused[#loc56, #loc57])
#loc344 = loc(fused[#loc63, #loc64])
#loc346 = loc(fused[#loc69, #loc70])
#loc347 = loc(fused[#loc73, #loc74])
#loc349 = loc(fused[#loc81, #loc82])
#loc351 = loc(fused[#loc89, #loc90])
#loc353 = loc(fused[#loc93, #loc94])
#loc354 = loc(fused[#loc98, #loc96])
#loc355 = loc(fused[#loc101, #loc99])
#loc356 = loc(fused[#loc105, #loc106])
#loc358 = loc(fused[#loc112, #loc113])
#loc360 = loc(fused[#loc121, #loc122])
#loc362 = loc(fused[#loc129, #loc130])
#loc364 = loc(fused[#loc142, #loc143])
#loc365 = loc(fused[#loc145, #loc146])
#loc368 = loc(fused[#loc151, #loc152])
#loc369 = loc(fused[#loc154, #loc155])
#loc370 = loc(fused[#loc157, #loc156])
#loc371 = loc(fused[#loc158, #loc159])
#loc372 = loc(fused[#loc161, #loc155])
#loc373 = loc(fused[#loc166, #loc167])
#loc374 = loc(fused[#loc169, #loc170])
#loc375 = loc(fused[#loc171, #loc172])
#loc376 = loc(fused[#loc173, #loc174])
#loc380 = loc(fused[#loc181, #loc182])
#loc381 = loc(fused[#loc183, #loc184])
#loc382 = loc(fused[#loc186, #loc187])
#loc383 = loc(fused[#loc188, #loc189])
#loc384 = loc(fused[#loc196, #loc197])
#loc385 = loc(fused[#loc201, #loc200])
#loc386 = loc(fused[#loc204, #loc205])
#loc387 = loc(fused[#loc207, #loc206])
#loc388 = loc(fused[#loc208, #loc209])
#loc389 = loc(fused[#loc210, #loc211])
#loc390 = loc(fused[#loc213, #loc214])
#loc394 = loc(fused[#loc221, #loc222])
#loc395 = loc(fused[#loc223, #loc224])
#loc396 = loc(fused[#loc226, #loc227])
#loc397 = loc(fused[#loc228, #loc229])
#loc398 = loc(fused[#loc232, #loc233])
#loc399 = loc(fused[#loc238, #loc239])
#loc400 = loc(fused[#loc238, #loc240])
#loc401 = loc(fused[#loc244, #loc245])
#loc402 = loc(fused[#loc249, #loc248])
#loc403 = loc(fused[#loc252, #loc253])
#loc404 = loc(fused[#loc255, #loc254])
#loc405 = loc(fused[#loc256, #loc257])
#loc406 = loc(fused[#loc259, #loc258])
#loc407 = loc(fused[#loc260, #loc261])
#loc408 = loc(fused[#loc263, #loc262])
#loc409 = loc(fused[#loc264, #loc265])
#loc410 = loc(fused[#loc266, #loc267])
#loc411 = loc(fused[#loc268, #loc269])
#loc412 = loc(fused[#loc270, #loc271])
#loc413 = loc(fused[#loc272, #loc273])
#loc414 = loc(fused[#loc274, #loc275])
#loc415 = loc(fused[#loc276, #loc277])
#loc416 = loc(fused[#loc278, #loc279])
#loc417 = loc(fused[#loc280, #loc281])
#loc418 = loc(fused[#loc282, #loc283])
#loc419 = loc(fused[#loc284, #loc285])
#loc420 = loc(fused[#loc286, #loc287])
#loc421 = loc(fused[#loc288, #loc289])
#loc422 = loc(fused[#loc290, #loc291])
#loc423 = loc(fused[#loc292, #loc293])
#loc424 = loc(fused[#loc294, #loc295])
#loc425 = loc(fused[#loc296, #loc297])
#loc426 = loc(fused[#loc298, #loc299])
#loc427 = loc(fused[#loc300, #loc301])
#loc428 = loc(fused[#loc302, #loc303])
#loc429 = loc(fused[#loc304, #loc305])
#loc430 = loc(fused[#loc306, #loc307])
#loc431 = loc(fused[#loc308, #loc309])
#loc432 = loc(fused[#loc310, #loc311])
#loc433 = loc(fused[#loc312, #loc313])
#loc434 = loc(fused[#loc314, #loc315])
#loc435 = loc(fused[#loc316, #loc317])
#loc436 = loc(fused[#loc318, #loc319])
#loc437 = loc(fused[#loc320, #loc321])
#loc438 = loc(fused[#loc322, #loc323])
