!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc98)
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc100)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc102)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc103)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc16)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc104)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc105)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
      %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc107)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc24)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc26)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc24)
      } loc(#loc108)
    } loc(#loc106)
    cir.scope {
      %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc110)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc111)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
      cir.store %9, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc110)
      %10 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      cir.store %10, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
      cir.scope {
        %11 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc113)
        %12 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc113)
        cir.store %12, %11 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc113)
        %13 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
        %15 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
        %17 = cir.const #cir.int<10> : !s32i loc(#loc39)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc39)
        %19 = cir.const #cir.int<4> : !u64i loc(#loc114)
        %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc115)
        cir.libc.memmove %20 bytes from %16 to %14 : !cir.ptr<!void>, !u64i loc(#loc116)
        %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc45)
        %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc46)
        %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc47)
        %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc48)
        %26 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc49)
        cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc48)
      } loc(#loc112)
    } loc(#loc109)
    cir.return loc(#loc10)
  } loc(#loc101)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    cir.return loc(#loc51)
  } loc(#loc117)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc58)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc60)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc61)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc61)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc122)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc123)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc60)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc124)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc127)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc71)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc73)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc71)
      } loc(#loc128)
    } loc(#loc126)
    cir.scope {
      %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc130)
      %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc131)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      cir.store %11, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
      %12 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
      cir.store %12, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc131)
      cir.scope {
        %13 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc133)
        %14 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc133)
        cir.store %14, %13 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc133)
        %15 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc84)
        %17 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc85)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc85)
        %19 = cir.const #cir.int<10> : !s32i loc(#loc86)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc86)
        %21 = cir.const #cir.int<4> : !u64i loc(#loc134)
        %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc135)
        cir.libc.memmove %22 bytes from %18 to %16 : !cir.ptr<!void>, !u64i loc(#loc136)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc92)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc93)
        %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc91)
        cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc94)
        %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc95)
        %28 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc95)
      } loc(#loc132)
    } loc(#loc129)
    cir.return loc(#loc55)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":26:19)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":26:26)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":26:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:23)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:29)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":28:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":38:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":29:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":29:26)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":30:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":30:22)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":31:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":37:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":32:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":32:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:38)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:48)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:49)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":35:26)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":35:31)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":35:32)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":35:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":36:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":36:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":66:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":69:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":68:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":68:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":46:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":64:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":48:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":48:11)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":49:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":49:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:19)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:26)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:29)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:39)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:40)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:24)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:30)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:29)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":53:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":63:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":54:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":54:26)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":55:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":55:22)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":56:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":62:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":57:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":57:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:21)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:27)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:35)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:38)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:48)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:49)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":60:26)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":60:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":60:32)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":60:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":61:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":61:18)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc7, #loc8])
#loc101 = loc(fused[#loc9, #loc10])
#loc102 = loc(fused[#loc11, #loc12])
#loc103 = loc(fused[#loc14, #loc13])
#loc104 = loc(fused[#loc15, #loc17])
#loc105 = loc(fused[#loc18, #loc17])
#loc106 = loc(fused[#loc19, #loc20])
#loc107 = loc(fused[#loc21, #loc22])
#loc108 = loc(fused[#loc23, #loc20])
#loc109 = loc(fused[#loc27, #loc28])
#loc110 = loc(fused[#loc29, #loc30])
#loc111 = loc(fused[#loc31, #loc32])
#loc112 = loc(fused[#loc33, #loc34])
#loc113 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc40, #loc41])
#loc115 = loc(fused[#loc39, #loc41])
#loc116 = loc(fused[#loc42, #loc43])
#loc117 = loc(fused[#loc50, #loc51])
#loc118 = loc(fused[#loc52, #loc53])
#loc119 = loc(fused[#loc54, #loc55])
#loc120 = loc(fused[#loc56, #loc57])
#loc121 = loc(fused[#loc59, #loc58])
#loc122 = loc(fused[#loc62, #loc63])
#loc123 = loc(fused[#loc61, #loc63])
#loc124 = loc(fused[#loc60, #loc64])
#loc125 = loc(fused[#loc65, #loc64])
#loc126 = loc(fused[#loc66, #loc67])
#loc127 = loc(fused[#loc68, #loc69])
#loc128 = loc(fused[#loc70, #loc67])
#loc129 = loc(fused[#loc74, #loc75])
#loc130 = loc(fused[#loc76, #loc77])
#loc131 = loc(fused[#loc78, #loc79])
#loc132 = loc(fused[#loc80, #loc81])
#loc133 = loc(fused[#loc82, #loc83])
#loc134 = loc(fused[#loc87, #loc88])
#loc135 = loc(fused[#loc86, #loc88])
#loc136 = loc(fused[#loc89, #loc90])
