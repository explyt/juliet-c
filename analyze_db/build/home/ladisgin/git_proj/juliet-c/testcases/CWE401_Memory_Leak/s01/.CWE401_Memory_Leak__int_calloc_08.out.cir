!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc67 = loc("CWE401_Memory_Leak__int_calloc_08.c":170:10)
#loc68 = loc("CWE401_Memory_Leak__int_calloc_08.c":170:14)
#loc69 = loc("CWE401_Memory_Leak__int_calloc_08.c":170:20)
#loc70 = loc("CWE401_Memory_Leak__int_calloc_08.c":170:32)
#loc263 = loc(fused[#loc67, #loc68])
#loc264 = loc(fused[#loc69, #loc70])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc235)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc236)
  cir.func private @printIntLine(!s32i) loc(#loc237)
  cir.func no_proto @CWE401_Memory_Leak__int_calloc_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
    cir.br ^bb1 loc(#loc241)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc243)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc18)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc19)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc19)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc244)
    %9 = cir.call @calloc(%7, %8) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc245)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc246)
    cir.br ^bb3 loc(#loc247)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc27)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc248)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc249)
  ^bb4:  // pred: ^bb3
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc31)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
    cir.br ^bb5 loc(#loc25)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc25)
  ^bb6:  // pred: ^bb5
    %18 = cir.const #cir.int<5> : !s32i loc(#loc32)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc35)
    cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc38)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc39)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc251)
  ^bb9:  // pred: ^bb8
    %26 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
    %27 = cir.call %26() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc42)
    %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc42)
    cir.brcond %28 ^bb10, ^bb11 loc(#loc253)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc41)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc41)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc8)
  } loc(#loc238)
  cir.func no_proto @CWE401_Memory_Leak__int_calloc_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc255)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc256)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc257)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc46)
  } loc(#loc254)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc259)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc260)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc261)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc64)
  cir.func @main(%arg0: !s32i loc(fused[#loc67, #loc68]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc264)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc71)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc72)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc73)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc73)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc74)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc61)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %8 = cir.get_global @CWE401_Memory_Leak__int_calloc_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call @CWE401_Memory_Leak__int_calloc_08_good() : () -> () loc(#loc76)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %13 = cir.get_global @CWE401_Memory_Leak__int_calloc_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc266)
    cir.call @CWE401_Memory_Leak__int_calloc_08_bad() : () -> () loc(#loc80)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc64)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc267)
    cir.return %17 : !s32i loc(#loc267)
  } loc(#loc262)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc87)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    cir.return %2 : !s32i loc(#loc269)
  } loc(#loc268)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc89)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc270)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc272)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc96)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc273)
    cir.br ^bb1 loc(#loc274)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc275)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc100)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc100)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc276)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc103)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc104)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc104)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc277)
    %9 = cir.call @calloc(%7, %8) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc278)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc279)
    cir.br ^bb3 loc(#loc280)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc112)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc281)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc282)
  ^bb4:  // pred: ^bb3
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc114)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc116)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc114)
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc110)
  ^bb6:  // pred: ^bb5
    %18 = cir.const #cir.int<5> : !s32i loc(#loc117)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc120)
    cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc123)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc124)
    cir.br ^bb7 loc(#loc99)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc99)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc284)
  ^bb9:  // pred: ^bb8
    %26 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc285)
    %27 = cir.call %26() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc127)
    %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %28 ^bb10, ^bb11 loc(#loc286)
  ^bb10:  // pred: ^bb9
    %29 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc89)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    cir.br ^bb12 loc(#loc130)
  ^bb11:  // pred: ^bb9
    %31 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc133)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc134)
    cir.call @free(%33) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
    cir.br ^bb12 loc(#loc126)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc126)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc93)
  } loc(#loc271)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc288)
    cir.return %2 : !s32i loc(#loc288)
  } loc(#loc287)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc290)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc143)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc291)
    cir.br ^bb1 loc(#loc292)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc293)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc147)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc147)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc294)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc150)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc151)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc151)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc295)
    %9 = cir.call @calloc(%7, %8) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc150)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc296)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc297)
    cir.br ^bb3 loc(#loc298)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc159)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc159)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc299)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc300)
  ^bb4:  // pred: ^bb3
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc161)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc163)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc161)
    cir.br ^bb5 loc(#loc157)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc157)
  ^bb6:  // pred: ^bb5
    %18 = cir.const #cir.int<5> : !s32i loc(#loc164)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc166)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc167)
    cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc169)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc170)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc171)
    cir.br ^bb7 loc(#loc146)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc146)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc302)
  ^bb9:  // pred: ^bb8
    %26 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc303)
    %27 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc174)
    %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc174)
    cir.brcond %28 ^bb10, ^bb11 loc(#loc304)
  ^bb10:  // pred: ^bb9
    %29 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc177)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc178)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc178)
    cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc177)
    cir.br ^bb11 loc(#loc173)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc173)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc140)
  } loc(#loc289)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc306)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc183)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc307)
    cir.br ^bb1 loc(#loc308)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc309)
    %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc187)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc187)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc310)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc192)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc192)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    cir.br ^bb4 loc(#loc190)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<100> : !s32i loc(#loc194)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc194)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc194)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc194)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc194)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc194)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc194)
    cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc311)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc196)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc197)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc198)
    %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc199)
    cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc312)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc200)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc201)
    %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc202)
    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc203)
    cir.br ^bb4 loc(#loc186)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc186)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc313)
  ^bb6:  // pred: ^bb5
    %22 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc314)
    %23 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc206)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc206)
    cir.brcond %24 ^bb7, ^bb8 loc(#loc315)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc205)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc205)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc180)
  } loc(#loc305)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc317)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc213)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc318)
    cir.br ^bb1 loc(#loc319)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc320)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc217)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc217)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc321)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<100> : !s32i loc(#loc220)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc220)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc220)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc220)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc220)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc220)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc220)
    cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc322)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc222)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc223)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc224)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc225)
    cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc323)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc227)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc228)
    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc229)
    cir.br ^bb3 loc(#loc216)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc216)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc324)
  ^bb5:  // pred: ^bb4
    %20 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc325)
    %21 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc232)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc232)
    cir.brcond %22 ^bb6, ^bb7 loc(#loc326)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc231)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc231)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc210)
  } loc(#loc316)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE401_Memory_Leak__int_calloc_08.c":37:1)
#loc8 = loc("CWE401_Memory_Leak__int_calloc_08.c":55:1)
#loc9 = loc("CWE401_Memory_Leak__int_calloc_08.c":39:5)
#loc10 = loc("CWE401_Memory_Leak__int_calloc_08.c":39:11)
#loc11 = loc("CWE401_Memory_Leak__int_calloc_08.c":40:12)
#loc12 = loc("CWE401_Memory_Leak__int_calloc_08.c":40:5)
#loc13 = loc("CWE401_Memory_Leak__int_calloc_08.c":41:5)
#loc14 = loc("CWE401_Memory_Leak__int_calloc_08.c":49:5)
#loc15 = loc("CWE401_Memory_Leak__int_calloc_08.c":41:8)
#loc16 = loc("CWE401_Memory_Leak__int_calloc_08.c":41:26)
#loc17 = loc("CWE401_Memory_Leak__int_calloc_08.c":42:5)
#loc18 = loc("CWE401_Memory_Leak__int_calloc_08.c":44:23)
#loc19 = loc("CWE401_Memory_Leak__int_calloc_08.c":44:30)
#loc20 = loc("CWE401_Memory_Leak__int_calloc_08.c":44:35)
#loc21 = loc("CWE401_Memory_Leak__int_calloc_08.c":44:45)
#loc22 = loc("CWE401_Memory_Leak__int_calloc_08.c":44:46)
#loc23 = loc("CWE401_Memory_Leak__int_calloc_08.c":44:9)
#loc24 = loc("CWE401_Memory_Leak__int_calloc_08.c":45:9)
#loc25 = loc("CWE401_Memory_Leak__int_calloc_08.c":45:37)
#loc26 = loc("CWE401_Memory_Leak__int_calloc_08.c":45:13)
#loc27 = loc("CWE401_Memory_Leak__int_calloc_08.c":45:21)
#loc28 = loc("CWE401_Memory_Leak__int_calloc_08.c":45:27)
#loc29 = loc("CWE401_Memory_Leak__int_calloc_08.c":45:28)
#loc30 = loc("CWE401_Memory_Leak__int_calloc_08.c":45:34)
#loc31 = loc("CWE401_Memory_Leak__int_calloc_08.c":45:33)
#loc32 = loc("CWE401_Memory_Leak__int_calloc_08.c":47:19)
#loc33 = loc("CWE401_Memory_Leak__int_calloc_08.c":47:9)
#loc34 = loc("CWE401_Memory_Leak__int_calloc_08.c":47:14)
#loc35 = loc("CWE401_Memory_Leak__int_calloc_08.c":47:15)
#loc36 = loc("CWE401_Memory_Leak__int_calloc_08.c":48:22)
#loc37 = loc("CWE401_Memory_Leak__int_calloc_08.c":48:27)
#loc38 = loc("CWE401_Memory_Leak__int_calloc_08.c":48:28)
#loc39 = loc("CWE401_Memory_Leak__int_calloc_08.c":48:9)
#loc40 = loc("CWE401_Memory_Leak__int_calloc_08.c":50:5)
#loc41 = loc("CWE401_Memory_Leak__int_calloc_08.c":54:5)
#loc42 = loc("CWE401_Memory_Leak__int_calloc_08.c":50:8)
#loc43 = loc("CWE401_Memory_Leak__int_calloc_08.c":50:26)
#loc44 = loc("CWE401_Memory_Leak__int_calloc_08.c":51:5)
#loc45 = loc("CWE401_Memory_Leak__int_calloc_08.c":153:1)
#loc46 = loc("CWE401_Memory_Leak__int_calloc_08.c":159:1)
#loc47 = loc("CWE401_Memory_Leak__int_calloc_08.c":155:5)
#loc48 = loc("CWE401_Memory_Leak__int_calloc_08.c":155:14)
#loc49 = loc("CWE401_Memory_Leak__int_calloc_08.c":156:5)
#loc50 = loc("CWE401_Memory_Leak__int_calloc_08.c":156:14)
#loc51 = loc("CWE401_Memory_Leak__int_calloc_08.c":157:5)
#loc52 = loc("CWE401_Memory_Leak__int_calloc_08.c":157:14)
#loc53 = loc("CWE401_Memory_Leak__int_calloc_08.c":158:5)
#loc54 = loc("CWE401_Memory_Leak__int_calloc_08.c":158:14)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE401_Memory_Leak__int_calloc_08.c":175:15)
#loc62 = loc("CWE401_Memory_Leak__int_calloc_08.c":177:15)
#loc63 = loc("CWE401_Memory_Leak__int_calloc_08.c":180:15)
#loc64 = loc("CWE401_Memory_Leak__int_calloc_08.c":182:15)
#loc65 = loc("CWE401_Memory_Leak__int_calloc_08.c":170:1)
#loc66 = loc("CWE401_Memory_Leak__int_calloc_08.c":185:1)
#loc71 = loc("CWE401_Memory_Leak__int_calloc_08.c":171:1)
#loc72 = loc("CWE401_Memory_Leak__int_calloc_08.c":173:27)
#loc73 = loc("CWE401_Memory_Leak__int_calloc_08.c":173:22)
#loc74 = loc("CWE401_Memory_Leak__int_calloc_08.c":173:5)
#loc75 = loc("CWE401_Memory_Leak__int_calloc_08.c":175:5)
#loc76 = loc("CWE401_Memory_Leak__int_calloc_08.c":176:5)
#loc77 = loc("CWE401_Memory_Leak__int_calloc_08.c":176:44)
#loc78 = loc("CWE401_Memory_Leak__int_calloc_08.c":177:5)
#loc79 = loc("CWE401_Memory_Leak__int_calloc_08.c":180:5)
#loc80 = loc("CWE401_Memory_Leak__int_calloc_08.c":181:5)
#loc81 = loc("CWE401_Memory_Leak__int_calloc_08.c":181:43)
#loc82 = loc("CWE401_Memory_Leak__int_calloc_08.c":182:5)
#loc83 = loc("CWE401_Memory_Leak__int_calloc_08.c":184:12)
#loc84 = loc("CWE401_Memory_Leak__int_calloc_08.c":184:5)
#loc85 = loc("CWE401_Memory_Leak__int_calloc_08.c":25:1)
#loc86 = loc("CWE401_Memory_Leak__int_calloc_08.c":28:1)
#loc87 = loc("CWE401_Memory_Leak__int_calloc_08.c":27:12)
#loc88 = loc("CWE401_Memory_Leak__int_calloc_08.c":27:5)
#loc89 = loc("CWE401_Memory_Leak__int_calloc_08.c":78:19)
#loc90 = loc("/usr/include/stdlib.h":687:1)
#loc91 = loc("/usr/include/stdlib.h":687:32)
#loc92 = loc("CWE401_Memory_Leak__int_calloc_08.c":62:1)
#loc93 = loc("CWE401_Memory_Leak__int_calloc_08.c":85:1)
#loc94 = loc("CWE401_Memory_Leak__int_calloc_08.c":64:5)
#loc95 = loc("CWE401_Memory_Leak__int_calloc_08.c":64:11)
#loc96 = loc("CWE401_Memory_Leak__int_calloc_08.c":65:12)
#loc97 = loc("CWE401_Memory_Leak__int_calloc_08.c":65:5)
#loc98 = loc("CWE401_Memory_Leak__int_calloc_08.c":66:5)
#loc99 = loc("CWE401_Memory_Leak__int_calloc_08.c":74:5)
#loc100 = loc("CWE401_Memory_Leak__int_calloc_08.c":66:8)
#loc101 = loc("CWE401_Memory_Leak__int_calloc_08.c":66:26)
#loc102 = loc("CWE401_Memory_Leak__int_calloc_08.c":67:5)
#loc103 = loc("CWE401_Memory_Leak__int_calloc_08.c":69:23)
#loc104 = loc("CWE401_Memory_Leak__int_calloc_08.c":69:30)
#loc105 = loc("CWE401_Memory_Leak__int_calloc_08.c":69:35)
#loc106 = loc("CWE401_Memory_Leak__int_calloc_08.c":69:45)
#loc107 = loc("CWE401_Memory_Leak__int_calloc_08.c":69:46)
#loc108 = loc("CWE401_Memory_Leak__int_calloc_08.c":69:9)
#loc109 = loc("CWE401_Memory_Leak__int_calloc_08.c":70:9)
#loc110 = loc("CWE401_Memory_Leak__int_calloc_08.c":70:37)
#loc111 = loc("CWE401_Memory_Leak__int_calloc_08.c":70:13)
#loc112 = loc("CWE401_Memory_Leak__int_calloc_08.c":70:21)
#loc113 = loc("CWE401_Memory_Leak__int_calloc_08.c":70:27)
#loc114 = loc("CWE401_Memory_Leak__int_calloc_08.c":70:28)
#loc115 = loc("CWE401_Memory_Leak__int_calloc_08.c":70:34)
#loc116 = loc("CWE401_Memory_Leak__int_calloc_08.c":70:33)
#loc117 = loc("CWE401_Memory_Leak__int_calloc_08.c":72:19)
#loc118 = loc("CWE401_Memory_Leak__int_calloc_08.c":72:9)
#loc119 = loc("CWE401_Memory_Leak__int_calloc_08.c":72:14)
#loc120 = loc("CWE401_Memory_Leak__int_calloc_08.c":72:15)
#loc121 = loc("CWE401_Memory_Leak__int_calloc_08.c":73:22)
#loc122 = loc("CWE401_Memory_Leak__int_calloc_08.c":73:27)
#loc123 = loc("CWE401_Memory_Leak__int_calloc_08.c":73:28)
#loc124 = loc("CWE401_Memory_Leak__int_calloc_08.c":73:9)
#loc125 = loc("CWE401_Memory_Leak__int_calloc_08.c":75:5)
#loc126 = loc("CWE401_Memory_Leak__int_calloc_08.c":84:5)
#loc127 = loc("CWE401_Memory_Leak__int_calloc_08.c":75:8)
#loc128 = loc("CWE401_Memory_Leak__int_calloc_08.c":75:27)
#loc129 = loc("CWE401_Memory_Leak__int_calloc_08.c":76:5)
#loc130 = loc("CWE401_Memory_Leak__int_calloc_08.c":79:5)
#loc131 = loc("CWE401_Memory_Leak__int_calloc_08.c":81:5)
#loc132 = loc("CWE401_Memory_Leak__int_calloc_08.c":78:9)
#loc133 = loc("CWE401_Memory_Leak__int_calloc_08.c":83:9)
#loc134 = loc("CWE401_Memory_Leak__int_calloc_08.c":83:14)
#loc135 = loc("CWE401_Memory_Leak__int_calloc_08.c":30:1)
#loc136 = loc("CWE401_Memory_Leak__int_calloc_08.c":33:1)
#loc137 = loc("CWE401_Memory_Leak__int_calloc_08.c":32:12)
#loc138 = loc("CWE401_Memory_Leak__int_calloc_08.c":32:5)
#loc139 = loc("CWE401_Memory_Leak__int_calloc_08.c":88:1)
#loc140 = loc("CWE401_Memory_Leak__int_calloc_08.c":106:1)
#loc141 = loc("CWE401_Memory_Leak__int_calloc_08.c":90:5)
#loc142 = loc("CWE401_Memory_Leak__int_calloc_08.c":90:11)
#loc143 = loc("CWE401_Memory_Leak__int_calloc_08.c":91:12)
#loc144 = loc("CWE401_Memory_Leak__int_calloc_08.c":91:5)
#loc145 = loc("CWE401_Memory_Leak__int_calloc_08.c":92:5)
#loc146 = loc("CWE401_Memory_Leak__int_calloc_08.c":100:5)
#loc147 = loc("CWE401_Memory_Leak__int_calloc_08.c":92:8)
#loc148 = loc("CWE401_Memory_Leak__int_calloc_08.c":92:26)
#loc149 = loc("CWE401_Memory_Leak__int_calloc_08.c":93:5)
#loc150 = loc("CWE401_Memory_Leak__int_calloc_08.c":95:23)
#loc151 = loc("CWE401_Memory_Leak__int_calloc_08.c":95:30)
#loc152 = loc("CWE401_Memory_Leak__int_calloc_08.c":95:35)
#loc153 = loc("CWE401_Memory_Leak__int_calloc_08.c":95:45)
#loc154 = loc("CWE401_Memory_Leak__int_calloc_08.c":95:46)
#loc155 = loc("CWE401_Memory_Leak__int_calloc_08.c":95:9)
#loc156 = loc("CWE401_Memory_Leak__int_calloc_08.c":96:9)
#loc157 = loc("CWE401_Memory_Leak__int_calloc_08.c":96:37)
#loc158 = loc("CWE401_Memory_Leak__int_calloc_08.c":96:13)
#loc159 = loc("CWE401_Memory_Leak__int_calloc_08.c":96:21)
#loc160 = loc("CWE401_Memory_Leak__int_calloc_08.c":96:27)
#loc161 = loc("CWE401_Memory_Leak__int_calloc_08.c":96:28)
#loc162 = loc("CWE401_Memory_Leak__int_calloc_08.c":96:34)
#loc163 = loc("CWE401_Memory_Leak__int_calloc_08.c":96:33)
#loc164 = loc("CWE401_Memory_Leak__int_calloc_08.c":98:19)
#loc165 = loc("CWE401_Memory_Leak__int_calloc_08.c":98:9)
#loc166 = loc("CWE401_Memory_Leak__int_calloc_08.c":98:14)
#loc167 = loc("CWE401_Memory_Leak__int_calloc_08.c":98:15)
#loc168 = loc("CWE401_Memory_Leak__int_calloc_08.c":99:22)
#loc169 = loc("CWE401_Memory_Leak__int_calloc_08.c":99:27)
#loc170 = loc("CWE401_Memory_Leak__int_calloc_08.c":99:28)
#loc171 = loc("CWE401_Memory_Leak__int_calloc_08.c":99:9)
#loc172 = loc("CWE401_Memory_Leak__int_calloc_08.c":101:5)
#loc173 = loc("CWE401_Memory_Leak__int_calloc_08.c":105:5)
#loc174 = loc("CWE401_Memory_Leak__int_calloc_08.c":101:8)
#loc175 = loc("CWE401_Memory_Leak__int_calloc_08.c":101:26)
#loc176 = loc("CWE401_Memory_Leak__int_calloc_08.c":102:5)
#loc177 = loc("CWE401_Memory_Leak__int_calloc_08.c":104:9)
#loc178 = loc("CWE401_Memory_Leak__int_calloc_08.c":104:14)
#loc179 = loc("CWE401_Memory_Leak__int_calloc_08.c":109:1)
#loc180 = loc("CWE401_Memory_Leak__int_calloc_08.c":131:1)
#loc181 = loc("CWE401_Memory_Leak__int_calloc_08.c":111:5)
#loc182 = loc("CWE401_Memory_Leak__int_calloc_08.c":111:11)
#loc183 = loc("CWE401_Memory_Leak__int_calloc_08.c":112:12)
#loc184 = loc("CWE401_Memory_Leak__int_calloc_08.c":112:5)
#loc185 = loc("CWE401_Memory_Leak__int_calloc_08.c":113:5)
#loc186 = loc("CWE401_Memory_Leak__int_calloc_08.c":125:5)
#loc187 = loc("CWE401_Memory_Leak__int_calloc_08.c":113:8)
#loc188 = loc("CWE401_Memory_Leak__int_calloc_08.c":113:27)
#loc189 = loc("CWE401_Memory_Leak__int_calloc_08.c":114:5)
#loc190 = loc("CWE401_Memory_Leak__int_calloc_08.c":117:5)
#loc191 = loc("CWE401_Memory_Leak__int_calloc_08.c":119:5)
#loc192 = loc("CWE401_Memory_Leak__int_calloc_08.c":116:19)
#loc193 = loc("CWE401_Memory_Leak__int_calloc_08.c":116:9)
#loc194 = loc("CWE401_Memory_Leak__int_calloc_08.c":121:23)
#loc195 = loc("CWE401_Memory_Leak__int_calloc_08.c":121:9)
#loc196 = loc("CWE401_Memory_Leak__int_calloc_08.c":123:19)
#loc197 = loc("CWE401_Memory_Leak__int_calloc_08.c":123:9)
#loc198 = loc("CWE401_Memory_Leak__int_calloc_08.c":123:14)
#loc199 = loc("CWE401_Memory_Leak__int_calloc_08.c":123:15)
#loc200 = loc("CWE401_Memory_Leak__int_calloc_08.c":124:22)
#loc201 = loc("CWE401_Memory_Leak__int_calloc_08.c":124:27)
#loc202 = loc("CWE401_Memory_Leak__int_calloc_08.c":124:28)
#loc203 = loc("CWE401_Memory_Leak__int_calloc_08.c":124:9)
#loc204 = loc("CWE401_Memory_Leak__int_calloc_08.c":126:5)
#loc205 = loc("CWE401_Memory_Leak__int_calloc_08.c":130:5)
#loc206 = loc("CWE401_Memory_Leak__int_calloc_08.c":126:8)
#loc207 = loc("CWE401_Memory_Leak__int_calloc_08.c":126:26)
#loc208 = loc("CWE401_Memory_Leak__int_calloc_08.c":127:5)
#loc209 = loc("CWE401_Memory_Leak__int_calloc_08.c":134:1)
#loc210 = loc("CWE401_Memory_Leak__int_calloc_08.c":151:1)
#loc211 = loc("CWE401_Memory_Leak__int_calloc_08.c":136:5)
#loc212 = loc("CWE401_Memory_Leak__int_calloc_08.c":136:11)
#loc213 = loc("CWE401_Memory_Leak__int_calloc_08.c":137:12)
#loc214 = loc("CWE401_Memory_Leak__int_calloc_08.c":137:5)
#loc215 = loc("CWE401_Memory_Leak__int_calloc_08.c":138:5)
#loc216 = loc("CWE401_Memory_Leak__int_calloc_08.c":145:5)
#loc217 = loc("CWE401_Memory_Leak__int_calloc_08.c":138:8)
#loc218 = loc("CWE401_Memory_Leak__int_calloc_08.c":138:26)
#loc219 = loc("CWE401_Memory_Leak__int_calloc_08.c":139:5)
#loc220 = loc("CWE401_Memory_Leak__int_calloc_08.c":141:23)
#loc221 = loc("CWE401_Memory_Leak__int_calloc_08.c":141:9)
#loc222 = loc("CWE401_Memory_Leak__int_calloc_08.c":143:19)
#loc223 = loc("CWE401_Memory_Leak__int_calloc_08.c":143:9)
#loc224 = loc("CWE401_Memory_Leak__int_calloc_08.c":143:14)
#loc225 = loc("CWE401_Memory_Leak__int_calloc_08.c":143:15)
#loc226 = loc("CWE401_Memory_Leak__int_calloc_08.c":144:22)
#loc227 = loc("CWE401_Memory_Leak__int_calloc_08.c":144:27)
#loc228 = loc("CWE401_Memory_Leak__int_calloc_08.c":144:28)
#loc229 = loc("CWE401_Memory_Leak__int_calloc_08.c":144:9)
#loc230 = loc("CWE401_Memory_Leak__int_calloc_08.c":146:5)
#loc231 = loc("CWE401_Memory_Leak__int_calloc_08.c":150:5)
#loc232 = loc("CWE401_Memory_Leak__int_calloc_08.c":146:8)
#loc233 = loc("CWE401_Memory_Leak__int_calloc_08.c":146:26)
#loc234 = loc("CWE401_Memory_Leak__int_calloc_08.c":147:5)
#loc235 = loc(fused[#loc1, #loc2])
#loc236 = loc(fused[#loc3, #loc4])
#loc237 = loc(fused[#loc5, #loc6])
#loc238 = loc(fused[#loc7, #loc8])
#loc239 = loc(fused[#loc9, #loc10])
#loc240 = loc(fused[#loc12, #loc11])
#loc241 = loc(fused[#loc13, #loc14])
#loc242 = loc(fused[#loc15, #loc16])
#loc243 = loc(fused[#loc17, #loc14])
#loc244 = loc(fused[#loc20, #loc21])
#loc245 = loc(fused[#loc18, #loc22])
#loc246 = loc(fused[#loc23, #loc22])
#loc247 = loc(fused[#loc24, #loc25])
#loc248 = loc(fused[#loc26, #loc27])
#loc249 = loc(fused[#loc28, #loc25])
#loc250 = loc(fused[#loc33, #loc32])
#loc251 = loc(fused[#loc40, #loc41])
#loc252 = loc(fused[#loc42, #loc43])
#loc253 = loc(fused[#loc44, #loc41])
#loc254 = loc(fused[#loc45, #loc46])
#loc255 = loc(fused[#loc47, #loc48])
#loc256 = loc(fused[#loc49, #loc50])
#loc257 = loc(fused[#loc51, #loc52])
#loc258 = loc(fused[#loc53, #loc54])
#loc259 = loc(fused[#loc55, #loc56])
#loc260 = loc(fused[#loc57, #loc58])
#loc261 = loc(fused[#loc59, #loc60])
#loc262 = loc(fused[#loc65, #loc66])
#loc265 = loc(fused[#loc76, #loc77])
#loc266 = loc(fused[#loc80, #loc81])
#loc267 = loc(fused[#loc84, #loc83])
#loc268 = loc(fused[#loc85, #loc86])
#loc269 = loc(fused[#loc88, #loc87])
#loc270 = loc(fused[#loc90, #loc91])
#loc271 = loc(fused[#loc92, #loc93])
#loc272 = loc(fused[#loc94, #loc95])
#loc273 = loc(fused[#loc97, #loc96])
#loc274 = loc(fused[#loc98, #loc99])
#loc275 = loc(fused[#loc100, #loc101])
#loc276 = loc(fused[#loc102, #loc99])
#loc277 = loc(fused[#loc105, #loc106])
#loc278 = loc(fused[#loc103, #loc107])
#loc279 = loc(fused[#loc108, #loc107])
#loc280 = loc(fused[#loc109, #loc110])
#loc281 = loc(fused[#loc111, #loc112])
#loc282 = loc(fused[#loc113, #loc110])
#loc283 = loc(fused[#loc118, #loc117])
#loc284 = loc(fused[#loc125, #loc126])
#loc285 = loc(fused[#loc127, #loc128])
#loc286 = loc(fused[#loc129, #loc130, #loc131, #loc126])
#loc287 = loc(fused[#loc135, #loc136])
#loc288 = loc(fused[#loc138, #loc137])
#loc289 = loc(fused[#loc139, #loc140])
#loc290 = loc(fused[#loc141, #loc142])
#loc291 = loc(fused[#loc144, #loc143])
#loc292 = loc(fused[#loc145, #loc146])
#loc293 = loc(fused[#loc147, #loc148])
#loc294 = loc(fused[#loc149, #loc146])
#loc295 = loc(fused[#loc152, #loc153])
#loc296 = loc(fused[#loc150, #loc154])
#loc297 = loc(fused[#loc155, #loc154])
#loc298 = loc(fused[#loc156, #loc157])
#loc299 = loc(fused[#loc158, #loc159])
#loc300 = loc(fused[#loc160, #loc157])
#loc301 = loc(fused[#loc165, #loc164])
#loc302 = loc(fused[#loc172, #loc173])
#loc303 = loc(fused[#loc174, #loc175])
#loc304 = loc(fused[#loc176, #loc173])
#loc305 = loc(fused[#loc179, #loc180])
#loc306 = loc(fused[#loc181, #loc182])
#loc307 = loc(fused[#loc184, #loc183])
#loc308 = loc(fused[#loc185, #loc186])
#loc309 = loc(fused[#loc187, #loc188])
#loc310 = loc(fused[#loc189, #loc190, #loc191, #loc186])
#loc311 = loc(fused[#loc195, #loc194])
#loc312 = loc(fused[#loc197, #loc196])
#loc313 = loc(fused[#loc204, #loc205])
#loc314 = loc(fused[#loc206, #loc207])
#loc315 = loc(fused[#loc208, #loc205])
#loc316 = loc(fused[#loc209, #loc210])
#loc317 = loc(fused[#loc211, #loc212])
#loc318 = loc(fused[#loc214, #loc213])
#loc319 = loc(fused[#loc215, #loc216])
#loc320 = loc(fused[#loc217, #loc218])
#loc321 = loc(fused[#loc219, #loc216])
#loc322 = loc(fused[#loc221, #loc220])
#loc323 = loc(fused[#loc223, #loc222])
#loc324 = loc(fused[#loc230, #loc231])
#loc325 = loc(fused[#loc232, #loc233])
#loc326 = loc(fused[#loc234, #loc231])
