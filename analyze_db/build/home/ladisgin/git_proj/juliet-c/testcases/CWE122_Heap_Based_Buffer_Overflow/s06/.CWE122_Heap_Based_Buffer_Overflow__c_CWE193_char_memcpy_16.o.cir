!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc101)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc102)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc104)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc107)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc102)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc19)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc23)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc25)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc25)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc112)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc113)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc114)
    cir.store %11, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc117)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc118)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc37)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
    cir.br ^bb6 loc(#loc31)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc31)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc38)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc119)
  ^bb10:  // pred: ^bb9
    %19 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc102)
    cir.copy %19 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc102)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc41)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc42)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
    %24 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc43)
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc44)
    %26 = cir.call @strlen(%25) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc43)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc45)
    %29 = cir.binop(add, %26, %28) : !u64i loc(#loc120)
    %30 = cir.const #cir.int<1> : !u64i loc(#loc121)
    %31 = cir.binop(mul, %29, %30) : !u64i loc(#loc122)
    cir.libc.memcpy %31 bytes from %23 to %21 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc123)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc53)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    cir.br ^bb11 loc(#loc40)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc16)
  } loc(#loc108)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc56)
  } loc(#loc124)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc63)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc129)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc67)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc67)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc68)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc69)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc69)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc69)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc130)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc131)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
    cir.store %13, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
    cir.br ^bb4 loc(#loc134)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc79)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc135)
    cir.brcond %17 ^bb5, ^bb6 loc(#loc136)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc81)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc83)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc81)
    cir.br ^bb6 loc(#loc77)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc77)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc66)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc137)
  ^bb10:  // pred: ^bb9
    %21 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc101)
    cir.copy %21 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc101)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc88)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
    %26 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc89)
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc90)
    %28 = cir.call @strlen(%27) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc89)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc91)
    %31 = cir.binop(add, %28, %30) : !u64i loc(#loc138)
    %32 = cir.const #cir.int<1> : !u64i loc(#loc139)
    %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc140)
    cir.libc.memcpy %33 bytes from %25 to %23 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc141)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %35 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc99)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
    cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
    cir.br ^bb11 loc(#loc86)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc60)
  } loc(#loc126)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":66:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":66:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":40:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":40:29)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":28:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":47:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":30:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":30:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":31:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":31:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":32:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":38:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":32:11)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":35:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":35:31)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":35:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":35:45)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":35:46)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":35:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":36:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":36:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":36:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":36:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":36:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":36:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":36:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":36:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":37:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":39:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":46:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:16)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:31)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:38)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:48)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:53)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:64)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:30)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":43:65)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":44:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":44:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":45:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":45:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":75:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":78:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":77:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":77:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":54:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":73:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":56:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":56:12)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":57:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":57:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":58:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":64:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":58:11)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":61:24)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":61:32)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":61:35)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":61:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":61:49)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":61:31)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":61:50)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":61:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":62:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":62:37)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":62:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":62:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":62:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":62:28)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":62:34)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":62:33)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":63:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":65:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":72:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:16)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:22)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:38)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:48)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:53)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:64)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:30)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":69:65)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":70:19)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":70:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":71:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c":71:14)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc103 = loc(fused[#loc5, #loc6])
#loc104 = loc(fused[#loc7, #loc8])
#loc105 = loc(fused[#loc9, #loc10])
#loc106 = loc(fused[#loc11, #loc12])
#loc107 = loc(fused[#loc13, #loc14])
#loc108 = loc(fused[#loc15, #loc16])
#loc109 = loc(fused[#loc17, #loc18])
#loc110 = loc(fused[#loc20, #loc19])
#loc111 = loc(fused[#loc21, #loc22])
#loc112 = loc(fused[#loc26, #loc27])
#loc113 = loc(fused[#loc25, #loc27])
#loc114 = loc(fused[#loc24, #loc28])
#loc115 = loc(fused[#loc29, #loc28])
#loc116 = loc(fused[#loc30, #loc31])
#loc117 = loc(fused[#loc32, #loc33])
#loc118 = loc(fused[#loc34, #loc31])
#loc119 = loc(fused[#loc39, #loc40])
#loc120 = loc(fused[#loc43, #loc45])
#loc121 = loc(fused[#loc46, #loc47])
#loc122 = loc(fused[#loc48, #loc47])
#loc123 = loc(fused[#loc49, #loc50])
#loc124 = loc(fused[#loc55, #loc56])
#loc125 = loc(fused[#loc57, #loc58])
#loc126 = loc(fused[#loc59, #loc60])
#loc127 = loc(fused[#loc61, #loc62])
#loc128 = loc(fused[#loc64, #loc63])
#loc129 = loc(fused[#loc65, #loc66])
#loc130 = loc(fused[#loc71, #loc72])
#loc131 = loc(fused[#loc73, #loc72])
#loc132 = loc(fused[#loc68, #loc74])
#loc133 = loc(fused[#loc75, #loc74])
#loc134 = loc(fused[#loc76, #loc77])
#loc135 = loc(fused[#loc78, #loc79])
#loc136 = loc(fused[#loc80, #loc77])
#loc137 = loc(fused[#loc85, #loc86])
#loc138 = loc(fused[#loc89, #loc91])
#loc139 = loc(fused[#loc92, #loc93])
#loc140 = loc(fused[#loc94, #loc93])
#loc141 = loc(fused[#loc95, #loc96])
