!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":22:69)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":22:76)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":41:73)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":41:80)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":56:73)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":56:80)
#loc85 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc27, #loc28])
#loc104 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printUnsignedLine(!u32i) loc(#loc83)
  cir.func  @CWE190_Integer_Overflow__unsigned_int_max_multiply_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc85)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc86)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc87)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!u32i> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc86)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc13)
    cir.store %6, %2 : !u32i, !cir.ptr<!u32i> loc(#loc87)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc16)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc17)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc17)
      %10 = cir.cmp(gt, %7, %9) : !u32i, !s32i loc(#loc89)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc18)
      cir.if %11 {
        %12 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc91)
        %13 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc22)
        %14 = cir.const #cir.int<2> : !s32i loc(#loc21)
        %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc21)
        %16 = cir.binop(mul, %13, %15) : !u32i loc(#loc92)
        cir.store %16, %12 : !u32i, !cir.ptr<!u32i> loc(#loc91)
        %17 = cir.load %12 : !cir.ptr<!u32i>, !u32i loc(#loc23)
        cir.call @printUnsignedLine(%17) : (!u32i) -> () loc(#loc24)
      } loc(#loc90)
    } loc(#loc88)
    cir.return loc(#loc4)
  } loc(#loc84)
  cir.func  @CWE190_Integer_Overflow__unsigned_int_max_multiply_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc27, #loc28])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc94)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc95)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc96)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc33)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!u32i> loc(#loc30)
    cir.store %4, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc95)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc34)
    %6 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc35)
    cir.store %6, %2 : !u32i, !cir.ptr<!u32i> loc(#loc96)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc38)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc39)
      %10 = cir.cmp(gt, %7, %9) : !u32i, !s32i loc(#loc98)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc40)
      cir.if %11 {
        %12 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc100)
        %13 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc44)
        %14 = cir.const #cir.int<2> : !s32i loc(#loc43)
        %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc43)
        %16 = cir.binop(mul, %13, %15) : !u32i loc(#loc101)
        cir.store %16, %12 : !u32i, !cir.ptr<!u32i> loc(#loc100)
        %17 = cir.load %12 : !cir.ptr<!u32i>, !u32i loc(#loc45)
        cir.call @printUnsignedLine(%17) : (!u32i) -> () loc(#loc46)
      } loc(#loc99)
    } loc(#loc97)
    cir.return loc(#loc26)
  } loc(#loc93)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func  @CWE190_Integer_Overflow__unsigned_int_max_multiply_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc52, #loc53])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc106)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc58)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc55)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!u32i> loc(#loc55)
    cir.store %4, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc105)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc59)
    %6 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc60)
    cir.store %6, %2 : !u32i, !cir.ptr<!u32i> loc(#loc106)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc63)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc64)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc64)
      %10 = cir.cmp(gt, %7, %9) : !u32i, !s32i loc(#loc108)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc65)
      cir.if %11 {
        cir.scope {
          %12 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc69)
          %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
          %15 = cir.const #cir.int<2> : !u32i loc(#loc70)
          %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc70)
          %17 = cir.const #cir.int<1> : !u32i loc(#loc70)
          %18 = cir.binop(add, %16, %17) : !u32i loc(#loc70)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc71)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc71)
          %21 = cir.binop(div, %18, %20) : !u32i loc(#loc111)
          %22 = cir.cmp(lt, %12, %21) : !u32i, !s32i loc(#loc112)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc73)
          cir.if %23 {
            %24 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc114)
            %25 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc79)
            %26 = cir.const #cir.int<2> : !s32i loc(#loc78)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc78)
            %28 = cir.binop(mul, %25, %27) : !u32i loc(#loc115)
            cir.store %28, %24 : !u32i, !cir.ptr<!u32i> loc(#loc114)
            %29 = cir.load %24 : !cir.ptr<!u32i>, !u32i loc(#loc80)
            cir.call @printUnsignedLine(%29) : (!u32i) -> () loc(#loc81)
          } else {
            %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc113)
        } loc(#loc110)
      } loc(#loc109)
    } loc(#loc107)
    cir.return loc(#loc51)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":34:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":25:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":25:46)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":27:34)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":23:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":27:27)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":27:26)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":33:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":28:8)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":28:15)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":28:13)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":31:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":31:38)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":31:31)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":32:27)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":32:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":41:1)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":53:1)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":44:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":44:46)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":46:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":46:34)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":42:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":46:27)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":46:26)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":47:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":52:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":47:8)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":47:15)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":47:13)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":48:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":50:9)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":50:38)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":50:31)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":51:27)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":51:9)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":72:23)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":56:1)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":75:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":59:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":59:46)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":61:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":61:34)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":57:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":61:27)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":61:26)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":62:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":74:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":62:8)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":62:15)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":62:13)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":63:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":65:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":73:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":65:13)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":65:21)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":65:30)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":65:31)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":65:18)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":66:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":69:9)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":71:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":67:13)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":67:42)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":67:35)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":68:31)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":68:13)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_64b.c":72:13)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc14, #loc15])
#loc89 = loc(fused[#loc16, #loc17])
#loc90 = loc(fused[#loc19, #loc15])
#loc91 = loc(fused[#loc20, #loc21])
#loc92 = loc(fused[#loc22, #loc21])
#loc93 = loc(fused[#loc25, #loc26])
#loc95 = loc(fused[#loc29, #loc30])
#loc96 = loc(fused[#loc31, #loc32])
#loc97 = loc(fused[#loc36, #loc37])
#loc98 = loc(fused[#loc38, #loc39])
#loc99 = loc(fused[#loc41, #loc37])
#loc100 = loc(fused[#loc42, #loc43])
#loc101 = loc(fused[#loc44, #loc43])
#loc102 = loc(fused[#loc47, #loc48])
#loc103 = loc(fused[#loc50, #loc51])
#loc105 = loc(fused[#loc54, #loc55])
#loc106 = loc(fused[#loc56, #loc57])
#loc107 = loc(fused[#loc61, #loc62])
#loc108 = loc(fused[#loc63, #loc64])
#loc109 = loc(fused[#loc66, #loc62])
#loc110 = loc(fused[#loc67, #loc68])
#loc111 = loc(fused[#loc70, #loc71])
#loc112 = loc(fused[#loc69, #loc72])
#loc113 = loc(fused[#loc74, #loc75, #loc76, #loc68])
#loc114 = loc(fused[#loc77, #loc78])
#loc115 = loc(fused[#loc79, #loc78])
