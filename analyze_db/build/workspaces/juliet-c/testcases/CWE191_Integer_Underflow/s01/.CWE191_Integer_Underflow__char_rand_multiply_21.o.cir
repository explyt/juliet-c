!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":25:21)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":25:26)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":43:18)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":58:26)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":58:31)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":88:18)
#loc100 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":94:26)
#loc101 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":94:31)
#loc134 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":119:18)
#loc144 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":125:25)
#loc145 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":125:30)
#loc178 = loc(fused[#loc9, #loc10])
#loc197 = loc(fused[#loc54, #loc55])
#loc215 = loc(fused[#loc100, #loc101])
#loc233 = loc(fused[#loc144, #loc145])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc174)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc175)
  cir.func private @printHexCharLine(!s8i) loc(#loc176)
  cir.func internal private @badSink(%arg0: !s8i loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc179)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc178)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc13)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc175)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc181)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc182)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc20)
    %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc20)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc183)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc184)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc23)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc23)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc12)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc23)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc23)
    cir.store %13, %0 : !s8i, !cir.ptr<!s8i> loc(#loc179)
    %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc24)
    cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc25)
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc8)
  } loc(#loc177)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_multiply_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc186)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc30)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc30)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc187)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc32)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc32)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc32)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc32)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc32)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc32)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc32)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc32)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc32)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc32)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc32)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc32)
    cir.br ^bb3(%18 : !u32i) loc(#loc32)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc32)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc32)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc32)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc32)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc32)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc32)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc32)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc32)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc32)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc32)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc32)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc32)
    cir.br ^bb3(%34 : !u32i) loc(#loc32)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":43:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc32)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc32)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc32)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc188)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %39 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc175)
    cir.store %38, %39 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    %40 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc36)
    cir.call @badSink(%40) : (!s8i) -> () loc(#loc37)
    cir.return loc(#loc27)
  } loc(#loc185)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_multiply_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc39)
  } loc(#loc190)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc51)
  cir.func internal private @goodB2G1Sink(%arg0: !s8i loc(fused[#loc54, #loc55])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc198)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc197)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc58)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc194)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc200)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb13 loc(#loc63)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc201)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc68)
    %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc68)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc202)
    cir.brcond %10 ^bb5, ^bb11 loc(#loc203)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc204)
  ^bb6:  // pred: ^bb5
    %11 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc73)
    %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc73)
    %13 = cir.const #cir.int<127> : !s32i loc(#loc74)
    %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc74)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc74)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc75)
    %18 = cir.binop(div, %16, %17) : !s32i loc(#loc205)
    %19 = cir.cmp(gt, %12, %18) : !s32i, !cir.bool loc(#loc206)
    cir.brcond %19 ^bb7, ^bb8 loc(#loc207)
  ^bb7:  // pred: ^bb6
    %20 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc80)
    %21 = cir.cast(integral, %20 : !s8i), !s32i loc(#loc80)
    %22 = cir.const #cir.int<2> : !s32i loc(#loc57)
    %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc80)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc80)
    cir.store %24, %0 : !s8i, !cir.ptr<!s8i> loc(#loc198)
    %25 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc81)
    cir.call @printHexCharLine(%25) : (!s8i) -> () loc(#loc82)
    cir.br ^bb9 loc(#loc78)
  ^bb8:  // pred: ^bb6
    %26 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc51)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb9 loc(#loc72)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc72)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc67)
  ^bb11:  // 2 preds: ^bb4, ^bb10
    cir.br ^bb12 loc(#loc67)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc60)
  ^bb13:  // 2 preds: ^bb2, ^bb12
    cir.br ^bb14 loc(#loc60)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc53)
  } loc(#loc196)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc209)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc88)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc88)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc210)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc90)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc90)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc90)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc90)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc90)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc90)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc90)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc90)
    cir.br ^bb3(%18 : !u32i) loc(#loc90)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc90)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc90)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc90)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc90)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc90)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc90)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc90)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc90)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc90)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc90)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc90)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc90)
    cir.br ^bb3(%34 : !u32i) loc(#loc90)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":88:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc90)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc90)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc211)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %39 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc194)
    cir.store %38, %39 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %40 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc94)
    cir.call @goodB2G1Sink(%40) : (!s8i) -> () loc(#loc95)
    cir.return loc(#loc85)
  } loc(#loc208)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc213)
  cir.func internal private @goodB2G2Sink(%arg0: !s8i loc(fused[#loc100, #loc101])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc216)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc215)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc104)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc213)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc107)
    cir.brcond %4 ^bb2, ^bb12 loc(#loc218)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc219)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc111)
    %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc111)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc220)
    cir.brcond %8 ^bb4, ^bb10 loc(#loc221)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc222)
  ^bb5:  // pred: ^bb4
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc116)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc116)
    %11 = cir.const #cir.int<127> : !s32i loc(#loc117)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc117)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc117)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc118)
    %16 = cir.binop(div, %14, %15) : !s32i loc(#loc223)
    %17 = cir.cmp(gt, %10, %16) : !s32i, !cir.bool loc(#loc224)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc225)
  ^bb6:  // pred: ^bb5
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc123)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc123)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc103)
    %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc123)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc123)
    cir.store %22, %0 : !s8i, !cir.ptr<!s8i> loc(#loc216)
    %23 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc124)
    cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc125)
    cir.br ^bb8 loc(#loc121)
  ^bb7:  // pred: ^bb5
    %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc126)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb8 loc(#loc115)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc115)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc110)
  ^bb10:  // 2 preds: ^bb3, ^bb9
    cir.br ^bb11 loc(#loc110)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc106)
  ^bb12:  // 2 preds: ^bb1, ^bb11
    cir.br ^bb13 loc(#loc106)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc99)
  } loc(#loc214)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc227)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc132)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc132)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc228)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc134)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc134)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc134)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc134)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc134)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc134)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc134)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc134)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc134)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc134)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc134)
    cir.br ^bb3(%18 : !u32i) loc(#loc134)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc134)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc134)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc134)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc134)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc134)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc134)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc134)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc134)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc134)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc134)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc134)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc134)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc134)
    cir.br ^bb3(%34 : !u32i) loc(#loc134)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":119:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc134)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc134)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc134)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc229)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %39 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc213)
    cir.store %38, %39 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %40 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc138)
    cir.call @goodB2G2Sink(%40) : (!s8i) -> () loc(#loc139)
    cir.return loc(#loc129)
  } loc(#loc226)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc231)
  cir.func internal private @goodG2BSink(%arg0: !s8i loc(fused[#loc144, #loc145])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc234)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc233)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc148)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc231)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc236)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc237)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc155)
    %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc155)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc238)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc239)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc158)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc158)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc147)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc158)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc158)
    cir.store %13, %0 : !s8i, !cir.ptr<!s8i> loc(#loc234)
    %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc159)
    cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc160)
    cir.br ^bb5 loc(#loc154)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc154)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc150)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc150)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc143)
  } loc(#loc232)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc241)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc165)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc165)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc242)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc167)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc168)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc168)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc243)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %7 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc231)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc172)
    cir.call @goodG2BSink(%8) : (!s8i) -> () loc(#loc173)
    cir.return loc(#loc162)
  } loc(#loc240)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":23:1)
#loc4 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":25:1)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":36:1)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":32:13)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":32:34)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":26:1)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":35:5)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":27:8)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":28:5)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":29:9)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":34:9)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":29:12)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":29:19)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":30:9)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":32:27)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":33:30)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":33:13)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":38:1)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":46:1)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":40:5)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":40:10)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":41:12)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":41:5)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":43:5)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":44:17)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":44:5)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":45:13)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":45:5)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":148:1)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":153:1)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":150:5)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":150:14)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":151:5)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":151:14)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":152:5)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":152:13)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":53:1)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":53:29)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":63:19)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":77:27)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":58:1)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":81:1)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":72:17)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":72:38)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":59:1)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":60:5)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":80:5)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":60:8)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":61:5)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":64:5)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":66:5)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":63:9)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":67:9)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":79:9)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":67:12)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":67:19)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":68:9)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":70:13)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":78:13)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":70:17)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":70:25)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":70:34)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":70:35)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":71:13)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":74:13)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":76:13)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":72:31)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":73:34)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":73:17)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":77:17)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":83:1)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":91:1)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":85:5)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":85:10)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":86:12)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":86:5)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":88:5)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":89:22)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":89:5)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":90:18)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":90:5)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":54:1)
#loc97 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":54:29)
#loc98 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":94:1)
#loc99 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":112:1)
#loc102 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":103:17)
#loc103 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":103:38)
#loc104 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":95:1)
#loc105 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":96:5)
#loc106 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":111:5)
#loc107 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":96:8)
#loc108 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":97:5)
#loc109 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":98:9)
#loc110 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":110:9)
#loc111 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":98:12)
#loc112 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":98:19)
#loc113 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":99:9)
#loc114 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":101:13)
#loc115 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":109:13)
#loc116 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":101:17)
#loc117 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":101:25)
#loc118 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":101:34)
#loc119 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":101:35)
#loc120 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":102:13)
#loc121 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":105:13)
#loc122 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":107:13)
#loc123 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":103:31)
#loc124 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":104:34)
#loc125 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":104:17)
#loc126 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":108:27)
#loc127 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":108:17)
#loc128 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":114:1)
#loc129 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":122:1)
#loc130 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":116:5)
#loc131 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":116:10)
#loc132 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":117:12)
#loc133 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":117:5)
#loc135 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":119:5)
#loc136 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":120:22)
#loc137 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":120:5)
#loc138 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":121:18)
#loc139 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":121:5)
#loc140 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":55:1)
#loc141 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":55:28)
#loc142 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":125:1)
#loc143 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":136:1)
#loc146 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":132:13)
#loc147 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":132:34)
#loc148 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":126:1)
#loc149 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":127:5)
#loc150 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":135:5)
#loc151 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":127:8)
#loc152 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":128:5)
#loc153 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":129:9)
#loc154 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":134:9)
#loc155 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":129:12)
#loc156 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":129:19)
#loc157 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":130:9)
#loc158 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":132:27)
#loc159 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":133:30)
#loc160 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":133:13)
#loc161 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":138:1)
#loc162 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":146:1)
#loc163 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":140:5)
#loc164 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":140:10)
#loc165 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":141:12)
#loc166 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":141:5)
#loc167 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":143:13)
#loc168 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":143:12)
#loc169 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":143:5)
#loc170 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":144:21)
#loc171 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":144:5)
#loc172 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":145:17)
#loc173 = loc("CWE191_Integer_Underflow__char_rand_multiply_21.c":145:5)
#loc174 = loc(fused[#loc1, #loc2])
#loc175 = loc(fused[#loc3, #loc4])
#loc176 = loc(fused[#loc5, #loc6])
#loc177 = loc(fused[#loc7, #loc8])
#loc179 = loc(fused[#loc11, #loc12])
#loc180 = loc(fused[#loc14, #loc15])
#loc181 = loc(fused[#loc17, #loc15])
#loc182 = loc(fused[#loc18, #loc19])
#loc183 = loc(fused[#loc20, #loc21])
#loc184 = loc(fused[#loc22, #loc19])
#loc185 = loc(fused[#loc26, #loc27])
#loc186 = loc(fused[#loc28, #loc29])
#loc187 = loc(fused[#loc31, #loc30])
#loc188 = loc(fused[#loc33, #loc32])
#loc189 = loc(fused[#loc35, #loc34])
#loc190 = loc(fused[#loc38, #loc39])
#loc191 = loc(fused[#loc40, #loc41])
#loc192 = loc(fused[#loc42, #loc43])
#loc193 = loc(fused[#loc44, #loc45])
#loc194 = loc(fused[#loc46, #loc47])
#loc195 = loc(fused[#loc48, #loc49])
#loc196 = loc(fused[#loc52, #loc53])
#loc198 = loc(fused[#loc56, #loc57])
#loc199 = loc(fused[#loc59, #loc60])
#loc200 = loc(fused[#loc62, #loc63, #loc64, #loc60])
#loc201 = loc(fused[#loc66, #loc67])
#loc202 = loc(fused[#loc68, #loc69])
#loc203 = loc(fused[#loc70, #loc67])
#loc204 = loc(fused[#loc71, #loc72])
#loc205 = loc(fused[#loc74, #loc75])
#loc206 = loc(fused[#loc73, #loc76])
#loc207 = loc(fused[#loc77, #loc78, #loc79, #loc72])
#loc208 = loc(fused[#loc84, #loc85])
#loc209 = loc(fused[#loc86, #loc87])
#loc210 = loc(fused[#loc89, #loc88])
#loc211 = loc(fused[#loc91, #loc90])
#loc212 = loc(fused[#loc93, #loc92])
#loc213 = loc(fused[#loc96, #loc97])
#loc214 = loc(fused[#loc98, #loc99])
#loc216 = loc(fused[#loc102, #loc103])
#loc217 = loc(fused[#loc105, #loc106])
#loc218 = loc(fused[#loc108, #loc106])
#loc219 = loc(fused[#loc109, #loc110])
#loc220 = loc(fused[#loc111, #loc112])
#loc221 = loc(fused[#loc113, #loc110])
#loc222 = loc(fused[#loc114, #loc115])
#loc223 = loc(fused[#loc117, #loc118])
#loc224 = loc(fused[#loc116, #loc119])
#loc225 = loc(fused[#loc120, #loc121, #loc122, #loc115])
#loc226 = loc(fused[#loc128, #loc129])
#loc227 = loc(fused[#loc130, #loc131])
#loc228 = loc(fused[#loc133, #loc132])
#loc229 = loc(fused[#loc135, #loc134])
#loc230 = loc(fused[#loc137, #loc136])
#loc231 = loc(fused[#loc140, #loc141])
#loc232 = loc(fused[#loc142, #loc143])
#loc234 = loc(fused[#loc146, #loc147])
#loc235 = loc(fused[#loc149, #loc150])
#loc236 = loc(fused[#loc152, #loc150])
#loc237 = loc(fused[#loc153, #loc154])
#loc238 = loc(fused[#loc155, #loc156])
#loc239 = loc(fused[#loc157, #loc154])
#loc240 = loc(fused[#loc161, #loc162])
#loc241 = loc(fused[#loc163, #loc164])
#loc242 = loc(fused[#loc166, #loc165])
#loc243 = loc(fused[#loc169, #loc167])
#loc244 = loc(fused[#loc171, #loc170])
