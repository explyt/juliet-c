!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_popen_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodG2B.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc243)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_listen_socket_popen_16_bad.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc244)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc245)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc246)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc247)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc248)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc249)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc250)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc251)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc252)
  cir.func private @close(!s32i) -> !s32i loc(#loc253)
  cir.func private @popen(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc254)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"w\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc25)
  cir.func private @pclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc255)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_popen_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc244)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_listen_socket_popen_16_bad.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc244)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc244)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc32)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc258)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc36)
        cir.condition(%5) loc(#loc36)
      } do {
        cir.scope {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc262)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc263)
            %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc264)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc265)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc266)
            %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc267)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc47)
            cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc265)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc49)
            cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc266)
            %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc52)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
            %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc52)
            cir.store %16, %9 : !u64i, !cir.ptr<!u64i> loc(#loc267)
            cir.scope {
              cir.do {
                cir.scope {
                  %17 = cir.const #cir.int<2> : !s32i loc(#loc58)
                  %18 = cir.const #cir.int<1> : !s32i loc(#loc59)
                  %19 = cir.const #cir.int<6> : !s32i loc(#loc60)
                  %20 = cir.call @socket(%17, %18, %19) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc61)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc270)
                  cir.scope {
                    %74 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc66)
                    %75 = cir.const #cir.int<1> : !s32i loc(#loc67)
                    %76 = cir.unary(minus, %75) nsw : !s32i, !s32i loc(#loc67)
                    %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc272)
                    cir.if %77 {
                      cir.break loc(#loc69)
                    } loc(#loc273)
                  } loc(#loc271)
                  %21 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc274)
                  %22 = cir.const #cir.int<0> : !s32i loc(#loc72)
                  %23 = cir.const #cir.int<16> : !u64i loc(#loc275)
                  cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc276)
                  %24 = cir.const #cir.int<2> : !s32i loc(#loc77)
                  %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc77)
                  %26 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
                  cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc277)
                  %27 = cir.const #cir.int<0> : !s32i loc(#loc80)
                  %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc80)
                  %29 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc81)
                  %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc82)
                  cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc278)
                  %31 = cir.const #cir.int<27015> : !s32i loc(#loc84)
                  %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc84)
                  %33 = cir.call @htons(%32) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc85)
                  %34 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc86)
                  cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc279)
                  cir.scope {
                    %74 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                    %75 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc281)
                    %76 = cir.const #cir.int<16> : !u64i loc(#loc282)
                    %77 = cir.cast(integral, %76 : !u64i), !u32i loc(#loc282)
                    %78 = cir.call @bind(%74, %75, %77) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc96)
                    %79 = cir.const #cir.int<1> : !s32i loc(#loc97)
                    %80 = cir.unary(minus, %79) nsw : !s32i, !s32i loc(#loc97)
                    %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc283)
                    cir.if %81 {
                      cir.break loc(#loc99)
                    } loc(#loc284)
                  } loc(#loc280)
                  cir.scope {
                    %74 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                    %75 = cir.const #cir.int<5> : !s32i loc(#loc103)
                    %76 = cir.call @listen(%74, %75) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc104)
                    %77 = cir.const #cir.int<1> : !s32i loc(#loc105)
                    %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc105)
                    %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc286)
                    cir.if %79 {
                      cir.break loc(#loc107)
                    } loc(#loc287)
                  } loc(#loc285)
                  %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                  %36 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc109)
                  %37 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc110)
                  %38 = cir.call @accept(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc111)
                  cir.store %38, %8 : !s32i, !cir.ptr<!s32i> loc(#loc288)
                  cir.scope {
                    %74 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                    %75 = cir.const #cir.int<1> : !s32i loc(#loc117)
                    %76 = cir.unary(minus, %75) nsw : !s32i, !s32i loc(#loc117)
                    %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc290)
                    cir.if %77 {
                      cir.break loc(#loc119)
                    } loc(#loc291)
                  } loc(#loc289)
                  %39 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                  %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
                  %41 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc122)
                  %42 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %41 : !u64i), !cir.ptr<!s8i> loc(#loc123)
                  %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc292)
                  %44 = cir.const #cir.int<1> : !u64i loc(#loc293)
                  %45 = cir.const #cir.int<100> : !s32i loc(#loc128)
                  %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc128)
                  %47 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc129)
                  %48 = cir.binop(sub, %46, %47) : !u64i loc(#loc294)
                  %49 = cir.const #cir.int<1> : !s32i loc(#loc130)
                  %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc130)
                  %51 = cir.binop(sub, %48, %50) : !u64i loc(#loc295)
                  %52 = cir.binop(mul, %44, %51) : !u64i loc(#loc296)
                  %53 = cir.const #cir.int<0> : !s32i loc(#loc132)
                  %54 = cir.call @recv(%39, %43, %52, %53) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc133)
                  %55 = cir.cast(integral, %54 : !s64i), !s32i loc(#loc133)
                  cir.store %55, %4 : !s32i, !cir.ptr<!s32i> loc(#loc297)
                  cir.scope {
                    %74 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc138)
                    %75 = cir.const #cir.int<1> : !s32i loc(#loc139)
                    %76 = cir.unary(minus, %75) nsw : !s32i, !s32i loc(#loc139)
                    %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc299)
                    %78 = cir.ternary(%77, true {
                      %79 = cir.const #true loc(#loc140)
                      cir.yield %79 : !cir.bool loc(#loc140)
                    }, false {
                      %79 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                      %80 = cir.const #cir.int<0> : !s32i loc(#loc142)
                      %81 = cir.cmp(eq, %79, %80) : !s32i, !cir.bool loc(#loc300)
                      %82 = cir.ternary(%81, true {
                        %83 = cir.const #true loc(#loc140)
                        cir.yield %83 : !cir.bool loc(#loc140)
                      }, false {
                        %83 = cir.const #false loc(#loc140)
                        cir.yield %83 : !cir.bool loc(#loc140)
                      }) : (!cir.bool) -> !cir.bool loc(#loc140)
                      cir.yield %82 : !cir.bool loc(#loc140)
                    }) : (!cir.bool) -> !cir.bool loc(#loc140)
                    cir.if %78 {
                      cir.break loc(#loc144)
                    } loc(#loc301)
                  } loc(#loc298)
                  %56 = cir.const #cir.int<0> : !s32i loc(#loc145)
                  %57 = cir.cast(integral, %56 : !s32i), !s8i loc(#loc145)
                  %58 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
                  %59 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc147)
                  %60 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc148)
                  %61 = cir.cast(integral, %60 : !s32i), !u64i loc(#loc148)
                  %62 = cir.const #cir.int<1> : !u64i loc(#loc302)
                  %63 = cir.binop(div, %61, %62) : !u64i loc(#loc303)
                  %64 = cir.binop(add, %59, %63) : !u64i loc(#loc304)
                  %65 = cir.ptr_stride(%58 : !cir.ptr<!s8i>, %64 : !u64i), !cir.ptr<!s8i> loc(#loc151)
                  cir.store %57, %65 : !s8i, !cir.ptr<!s8i> loc(#loc305)
                  %66 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc152)
                  %67 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
                  %68 = cir.const #cir.int<13> : !s32i loc(#loc154)
                  %69 = cir.call @strchr(%67, %68) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc152)
                  cir.store %69, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc306)
                  cir.scope {
                    %74 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
                    %75 = cir.cast(ptr_to_bool, %74 : !cir.ptr<!s8i>), !cir.bool loc(#loc159)
                    cir.if %75 {
                      %76 = cir.const #cir.int<0> : !s32i loc(#loc161)
                      %77 = cir.cast(integral, %76 : !s32i), !s8i loc(#loc161)
                      %78 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
                      cir.store %77, %78 : !s8i, !cir.ptr<!s8i> loc(#loc309)
                    } loc(#loc308)
                  } loc(#loc307)
                  %70 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc164)
                  %71 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
                  %72 = cir.const #cir.int<10> : !s32i loc(#loc166)
                  %73 = cir.call @strchr(%71, %72) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc164)
                  cir.store %73, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc310)
                  cir.scope {
                    %74 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
                    %75 = cir.cast(ptr_to_bool, %74 : !cir.ptr<!s8i>), !cir.bool loc(#loc171)
                    cir.if %75 {
                      %76 = cir.const #cir.int<0> : !s32i loc(#loc173)
                      %77 = cir.cast(integral, %76 : !s32i), !s8i loc(#loc173)
                      %78 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
                      cir.store %77, %78 : !s8i, !cir.ptr<!s8i> loc(#loc313)
                    } loc(#loc312)
                  } loc(#loc311)
                } loc(#loc269)
                cir.yield loc(#loc55)
              } while {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc176)
                %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc176)
                cir.condition(%18) loc(#loc176)
              } loc(#loc268)
            } loc(#loc268)
            cir.scope {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc179)
              %18 = cir.const #cir.int<1> : !s32i loc(#loc180)
              %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc180)
              %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc315)
              cir.if %20 {
                %21 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc183)
              } loc(#loc316)
            } loc(#loc314)
            cir.scope {
              %17 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc186)
              %18 = cir.const #cir.int<1> : !s32i loc(#loc187)
              %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc187)
              %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc318)
              cir.if %20 {
                %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc190)
              } loc(#loc319)
            } loc(#loc317)
          } loc(#loc261)
          cir.break loc(#loc191)
        } loc(#loc260)
        cir.yield loc(#loc35)
      } loc(#loc259)
    } loc(#loc259)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc321)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
      %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc25)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc25)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc197)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc322)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc202)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc203)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc203)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc324)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc205)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc206)
        } loc(#loc325)
      } loc(#loc323)
    } loc(#loc320)
    cir.return loc(#loc29)
  } loc(#loc256)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_popen_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc327)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc209)
    cir.return loc(#loc208)
  } loc(#loc326)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc328)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc213)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc330)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc243)
    %2 = cir.get_global @__const.goodG2B.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc243)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc243)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc218)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc331)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc222)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc222)
        cir.condition(%5) loc(#loc222)
      } do {
        cir.scope {
          %4 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc224)
          %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc225)
          %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc213)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc213)
          %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc224)
          cir.break loc(#loc226)
        } loc(#loc333)
        cir.yield loc(#loc221)
      } loc(#loc332)
    } loc(#loc332)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc335)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc231)
      %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc232)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc232)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc233)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc336)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc238)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc239)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc239)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc338)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc241)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc242)
        } loc(#loc339)
      } loc(#loc337)
    } loc(#loc334)
    cir.return loc(#loc215)
  } loc(#loc329)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":166:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":166:26)
#loc3 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":62:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":62:26)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc9 = loc("/usr/include/netinet/in.h":402:1)
#loc10 = loc("/usr/include/netinet/in.h":403:40)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc19 = loc("/usr/include/string.h":246:1)
#loc20 = loc("/usr/include/string.h":247:33)
#loc21 = loc("/usr/include/unistd.h":358:1)
#loc22 = loc("/usr/include/unistd.h":358:27)
#loc23 = loc("/usr/include/stdio.h":903:1)
#loc24 = loc("/usr/include/stdio.h":904:3)
#loc25 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":150:28)
#loc26 = loc("/usr/include/stdio.h":897:1)
#loc27 = loc("/usr/include/stdio.h":897:36)
#loc28 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":59:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":156:1)
#loc30 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":61:5)
#loc31 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":61:12)
#loc32 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":63:12)
#loc33 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":63:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":64:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":146:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":64:11)
#loc37 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":65:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":66:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":144:9)
#loc40 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":71:13)
#loc41 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":71:17)
#loc42 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":72:13)
#loc43 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":72:32)
#loc44 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":73:13)
#loc45 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":73:19)
#loc46 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":74:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":74:35)
#loc48 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":75:13)
#loc49 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":75:35)
#loc50 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":76:13)
#loc51 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":76:41)
#loc52 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":76:30)
#loc53 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":76:37)
#loc54 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":77:13)
#loc55 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":129:21)
#loc56 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":78:13)
#loc57 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":128:13)
#loc58 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":87:39)
#loc59 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":87:48)
#loc60 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":87:61)
#loc61 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":87:32)
#loc62 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":87:17)
#loc63 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":87:72)
#loc64 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":88:17)
#loc65 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":91:17)
#loc66 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":88:21)
#loc67 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":88:37)
#loc68 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":89:17)
#loc69 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":90:21)
#loc70 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":92:24)
#loc71 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":92:25)
#loc72 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":92:34)
#loc73 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":92:37)
#loc74 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":92:51)
#loc75 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":92:17)
#loc76 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":92:52)
#loc77 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":93:38)
#loc78 = loc("/usr/include/netinet/in.h":249:5)
#loc79 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":93:17)
#loc80 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":94:43)
#loc81 = loc("/usr/include/netinet/in.h":251:20)
#loc82 = loc("/usr/include/netinet/in.h":33:15)
#loc83 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":94:17)
#loc84 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":95:42)
#loc85 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":95:36)
#loc86 = loc("/usr/include/netinet/in.h":250:15)
#loc87 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":95:17)
#loc88 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":95:50)
#loc89 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":96:17)
#loc90 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":99:17)
#loc91 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":96:26)
#loc92 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":96:58)
#loc93 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":96:59)
#loc94 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":96:68)
#loc95 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":96:82)
#loc96 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":96:21)
#loc97 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":96:88)
#loc98 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":97:17)
#loc99 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":98:21)
#loc100 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":100:17)
#loc101 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":103:17)
#loc102 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":100:28)
#loc103 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":100:42)
#loc104 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":100:21)
#loc105 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":100:61)
#loc106 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":101:17)
#loc107 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":102:21)
#loc108 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":104:39)
#loc109 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":104:53)
#loc110 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":104:59)
#loc111 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":104:32)
#loc112 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":104:17)
#loc113 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":104:63)
#loc114 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":105:17)
#loc115 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":108:17)
#loc116 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":105:21)
#loc117 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":105:37)
#loc118 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":106:17)
#loc119 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":107:21)
#loc120 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:35)
#loc121 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:58)
#loc122 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:65)
#loc123 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:63)
#loc124 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:49)
#loc125 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:72)
#loc126 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:75)
#loc127 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:86)
#loc128 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:91)
#loc129 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:97)
#loc130 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:107)
#loc131 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:108)
#loc132 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:111)
#loc133 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:30)
#loc134 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:17)
#loc135 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":110:112)
#loc136 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":111:17)
#loc137 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":114:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":111:21)
#loc139 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":111:35)
#loc140 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":111:48)
#loc141 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":111:51)
#loc142 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":111:65)
#loc143 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":112:17)
#loc144 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":113:21)
#loc145 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":116:61)
#loc146 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":116:17)
#loc147 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":116:22)
#loc148 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":116:32)
#loc149 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":116:45)
#loc150 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":116:56)
#loc151 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":116:57)
#loc152 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":118:27)
#loc153 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":118:34)
#loc154 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":118:40)
#loc155 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":118:17)
#loc156 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":118:44)
#loc157 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":119:17)
#loc158 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":122:17)
#loc159 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":119:21)
#loc160 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":120:17)
#loc161 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":121:32)
#loc162 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":121:22)
#loc163 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":121:21)
#loc164 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":123:27)
#loc165 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":123:34)
#loc166 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":123:40)
#loc167 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":123:17)
#loc168 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":123:44)
#loc169 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":124:17)
#loc170 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":127:17)
#loc171 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":124:21)
#loc172 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":125:17)
#loc173 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":126:32)
#loc174 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":126:22)
#loc175 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":126:21)
#loc176 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":129:20)
#loc177 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":130:13)
#loc178 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":133:13)
#loc179 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":130:17)
#loc180 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":130:33)
#loc181 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":131:13)
#loc182 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":132:30)
#loc183 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":132:17)
#loc184 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":134:13)
#loc185 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":137:13)
#loc186 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":134:17)
#loc187 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":134:33)
#loc188 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":135:13)
#loc189 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":136:30)
#loc190 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":136:17)
#loc191 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":145:9)
#loc192 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":147:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":155:5)
#loc194 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":148:9)
#loc195 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":148:15)
#loc196 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":150:22)
#loc197 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":150:16)
#loc198 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":150:9)
#loc199 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":150:31)
#loc200 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":151:9)
#loc201 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":154:9)
#loc202 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":151:13)
#loc203 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":151:21)
#loc204 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":152:9)
#loc205 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":153:20)
#loc206 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":153:13)
#loc207 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":185:1)
#loc208 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":188:1)
#loc209 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":187:5)
#loc210 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":187:13)
#loc211 = loc("/usr/include/string.h":149:1)
#loc212 = loc("/usr/include/string.h":150:14)
#loc213 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":171:22)
#loc214 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":163:1)
#loc215 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":183:1)
#loc216 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":165:5)
#loc217 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":165:12)
#loc218 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":167:12)
#loc219 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":167:5)
#loc220 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":168:5)
#loc221 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":173:5)
#loc222 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":168:11)
#loc223 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":169:5)
#loc224 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":171:9)
#loc225 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":171:16)
#loc226 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":172:9)
#loc227 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":174:5)
#loc228 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":182:5)
#loc229 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":175:9)
#loc230 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":175:15)
#loc231 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":177:22)
#loc232 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":177:28)
#loc233 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":177:16)
#loc234 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":177:9)
#loc235 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":177:31)
#loc236 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":178:9)
#loc237 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":181:9)
#loc238 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":178:13)
#loc239 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":178:21)
#loc240 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":179:9)
#loc241 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":180:20)
#loc242 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_16.c":180:13)
#loc243 = loc(fused[#loc1, #loc2])
#loc244 = loc(fused[#loc3, #loc4])
#loc245 = loc(fused[#loc5, #loc6])
#loc246 = loc(fused[#loc7, #loc8])
#loc247 = loc(fused[#loc9, #loc10])
#loc248 = loc(fused[#loc11, #loc12])
#loc249 = loc(fused[#loc13, #loc14])
#loc250 = loc(fused[#loc15, #loc16])
#loc251 = loc(fused[#loc17, #loc18])
#loc252 = loc(fused[#loc19, #loc20])
#loc253 = loc(fused[#loc21, #loc22])
#loc254 = loc(fused[#loc23, #loc24])
#loc255 = loc(fused[#loc26, #loc27])
#loc256 = loc(fused[#loc28, #loc29])
#loc257 = loc(fused[#loc30, #loc31])
#loc258 = loc(fused[#loc33, #loc32])
#loc259 = loc(fused[#loc34, #loc35])
#loc260 = loc(fused[#loc37, #loc35])
#loc261 = loc(fused[#loc38, #loc39])
#loc262 = loc(fused[#loc40, #loc41])
#loc263 = loc(fused[#loc42, #loc43])
#loc264 = loc(fused[#loc44, #loc45])
#loc265 = loc(fused[#loc46, #loc47])
#loc266 = loc(fused[#loc48, #loc49])
#loc267 = loc(fused[#loc50, #loc51])
#loc268 = loc(fused[#loc54, #loc55])
#loc269 = loc(fused[#loc56, #loc57])
#loc270 = loc(fused[#loc62, #loc63])
#loc271 = loc(fused[#loc64, #loc65])
#loc272 = loc(fused[#loc66, #loc67])
#loc273 = loc(fused[#loc68, #loc65])
#loc274 = loc(fused[#loc70, #loc71])
#loc275 = loc(fused[#loc73, #loc74])
#loc276 = loc(fused[#loc75, #loc76])
#loc277 = loc(fused[#loc79, #loc77])
#loc278 = loc(fused[#loc83, #loc80])
#loc279 = loc(fused[#loc87, #loc88])
#loc280 = loc(fused[#loc89, #loc90])
#loc281 = loc(fused[#loc92, #loc93])
#loc282 = loc(fused[#loc94, #loc95])
#loc283 = loc(fused[#loc96, #loc97])
#loc284 = loc(fused[#loc98, #loc90])
#loc285 = loc(fused[#loc100, #loc101])
#loc286 = loc(fused[#loc104, #loc105])
#loc287 = loc(fused[#loc106, #loc101])
#loc288 = loc(fused[#loc112, #loc113])
#loc289 = loc(fused[#loc114, #loc115])
#loc290 = loc(fused[#loc116, #loc117])
#loc291 = loc(fused[#loc118, #loc115])
#loc292 = loc(fused[#loc124, #loc125])
#loc293 = loc(fused[#loc126, #loc127])
#loc294 = loc(fused[#loc128, #loc129])
#loc295 = loc(fused[#loc128, #loc130])
#loc296 = loc(fused[#loc126, #loc131])
#loc297 = loc(fused[#loc134, #loc135])
#loc298 = loc(fused[#loc136, #loc137])
#loc299 = loc(fused[#loc138, #loc139])
#loc300 = loc(fused[#loc141, #loc142])
#loc301 = loc(fused[#loc143, #loc137])
#loc302 = loc(fused[#loc149, #loc150])
#loc303 = loc(fused[#loc148, #loc150])
#loc304 = loc(fused[#loc147, #loc150])
#loc305 = loc(fused[#loc146, #loc145])
#loc306 = loc(fused[#loc155, #loc156])
#loc307 = loc(fused[#loc157, #loc158])
#loc308 = loc(fused[#loc160, #loc158])
#loc309 = loc(fused[#loc163, #loc161])
#loc310 = loc(fused[#loc167, #loc168])
#loc311 = loc(fused[#loc169, #loc170])
#loc312 = loc(fused[#loc172, #loc170])
#loc313 = loc(fused[#loc175, #loc173])
#loc314 = loc(fused[#loc177, #loc178])
#loc315 = loc(fused[#loc179, #loc180])
#loc316 = loc(fused[#loc181, #loc178])
#loc317 = loc(fused[#loc184, #loc185])
#loc318 = loc(fused[#loc186, #loc187])
#loc319 = loc(fused[#loc188, #loc185])
#loc320 = loc(fused[#loc192, #loc193])
#loc321 = loc(fused[#loc194, #loc195])
#loc322 = loc(fused[#loc198, #loc199])
#loc323 = loc(fused[#loc200, #loc201])
#loc324 = loc(fused[#loc202, #loc203])
#loc325 = loc(fused[#loc204, #loc201])
#loc326 = loc(fused[#loc207, #loc208])
#loc327 = loc(fused[#loc209, #loc210])
#loc328 = loc(fused[#loc211, #loc212])
#loc329 = loc(fused[#loc214, #loc215])
#loc330 = loc(fused[#loc216, #loc217])
#loc331 = loc(fused[#loc219, #loc218])
#loc332 = loc(fused[#loc220, #loc221])
#loc333 = loc(fused[#loc223, #loc221])
#loc334 = loc(fused[#loc227, #loc228])
#loc335 = loc(fused[#loc229, #loc230])
#loc336 = loc(fused[#loc234, #loc235])
#loc337 = loc(fused[#loc236, #loc237])
#loc338 = loc(fused[#loc238, #loc239])
#loc339 = loc(fused[#loc240, #loc237])
