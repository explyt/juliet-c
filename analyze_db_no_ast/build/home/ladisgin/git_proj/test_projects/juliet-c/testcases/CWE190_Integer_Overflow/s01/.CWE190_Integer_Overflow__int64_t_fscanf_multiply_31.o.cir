!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc106)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc107)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc108)
  cir.func private  @printLongLongLine(!s64i) loc(#loc109)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc13)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc15)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc16)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc108)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc108)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc15)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc114)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc115)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc20)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc114)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc22)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc115)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc25)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc26)
        %15 = cir.cmp(gt, %12, %14) : !s64i, !s32i loc(#loc117)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc27)
        cir.if %16 {
          %17 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc119)
          %18 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc31)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc30)
          %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc30)
          %21 = cir.binop(mul, %18, %20) nsw : !s64i loc(#loc31)
          cir.store %21, %17 : !s64i, !cir.ptr<!s64i> loc(#loc119)
          %22 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc32)
          cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc33)
        } loc(#loc118)
      } loc(#loc116)
    } loc(#loc113)
    cir.return loc(#loc10)
  } loc(#loc110)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc120)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc44)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc125)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc46)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc46)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc126)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc128)
      %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc129)
      %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc51)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc128)
      %7 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc53)
      cir.store %7, %5 : !s64i, !cir.ptr<!s64i> loc(#loc129)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc56)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc57)
        %11 = cir.cmp(gt, %8, %10) : !s64i, !s32i loc(#loc131)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc58)
        cir.if %12 {
          %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc133)
          %14 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc62)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc61)
          %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc61)
          %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc62)
          cir.store %17, %13 : !s64i, !cir.ptr<!s64i> loc(#loc133)
          %18 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc63)
          cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc64)
        } loc(#loc132)
      } loc(#loc130)
    } loc(#loc127)
    cir.return loc(#loc41)
  } loc(#loc123)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc134)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc67)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc72)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc137)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc74)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc75)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc138)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc138)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc74)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc140)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc141)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc81)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc140)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc83)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc141)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc86)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc87)
        %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc87)
        %15 = cir.cmp(gt, %12, %14) : !s64i, !s32i loc(#loc143)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc88)
        cir.if %16 {
          cir.scope {
            %17 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc92)
            %18 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc93)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc94)
            %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc94)
            %21 = cir.binop(div, %18, %20) : !s64i loc(#loc146)
            %22 = cir.cmp(lt, %17, %21) : !s64i, !s32i loc(#loc147)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc96)
            cir.if %23 {
              %24 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc149)
              %25 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc102)
              %26 = cir.const #cir.int<2> : !s32i loc(#loc101)
              %27 = cir.cast(integral, %26 : !s32i), !s64i loc(#loc101)
              %28 = cir.binop(mul, %25, %27) nsw : !s64i loc(#loc102)
              cir.store %28, %24 : !s64i, !cir.ptr<!s64i> loc(#loc149)
              %29 = cir.load %24 : !cir.ptr<!s64i>, !s64i loc(#loc103)
              cir.call @printLongLongLine(%29) : (!s64i) -> () loc(#loc104)
            } else {
              %24 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc67)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc67)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc105)
            } loc(#loc148)
          } loc(#loc145)
        } loc(#loc144)
      } loc(#loc142)
    } loc(#loc139)
    cir.return loc(#loc69)
  } loc(#loc135)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":28:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":28:24)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":39:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":25:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":25:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":26:12)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":28:13)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":38:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":30:28)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":31:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":31:24)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":32:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":37:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":32:12)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":32:19)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":32:17)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":33:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":35:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":35:37)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":35:30)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":36:31)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":36:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":90:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":94:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":92:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":92:13)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":93:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":93:13)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":46:1)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":62:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":48:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":48:13)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":49:12)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":49:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":51:12)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":51:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":52:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":61:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":53:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":53:28)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":54:9)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":54:24)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":55:9)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":60:9)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":55:12)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":55:19)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":55:17)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":56:9)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":58:13)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":58:37)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":58:30)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":59:31)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":59:13)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":84:27)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":65:1)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":88:1)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":67:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":67:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":68:12)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":68:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":70:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":70:13)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":70:20)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":70:24)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":71:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":87:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":72:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":72:28)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":73:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":73:24)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":74:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":86:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":74:12)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":74:19)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":74:17)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":75:9)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":77:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":85:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":77:17)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":77:25)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":77:35)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":77:36)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":77:22)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":78:13)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":81:13)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":83:13)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":79:17)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":79:41)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":79:34)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":80:35)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":80:17)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_31.c":84:17)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc7, #loc8])
#loc110 = loc(fused[#loc9, #loc10])
#loc111 = loc(fused[#loc11, #loc12])
#loc112 = loc(fused[#loc14, #loc13])
#loc113 = loc(fused[#loc17, #loc18])
#loc114 = loc(fused[#loc19, #loc20])
#loc115 = loc(fused[#loc21, #loc22])
#loc116 = loc(fused[#loc23, #loc24])
#loc117 = loc(fused[#loc25, #loc26])
#loc118 = loc(fused[#loc28, #loc24])
#loc119 = loc(fused[#loc29, #loc30])
#loc120 = loc(fused[#loc34, #loc35])
#loc121 = loc(fused[#loc36, #loc37])
#loc122 = loc(fused[#loc38, #loc39])
#loc123 = loc(fused[#loc40, #loc41])
#loc124 = loc(fused[#loc42, #loc43])
#loc125 = loc(fused[#loc45, #loc44])
#loc126 = loc(fused[#loc47, #loc46])
#loc127 = loc(fused[#loc48, #loc49])
#loc128 = loc(fused[#loc50, #loc51])
#loc129 = loc(fused[#loc52, #loc53])
#loc130 = loc(fused[#loc54, #loc55])
#loc131 = loc(fused[#loc56, #loc57])
#loc132 = loc(fused[#loc59, #loc55])
#loc133 = loc(fused[#loc60, #loc61])
#loc134 = loc(fused[#loc65, #loc66])
#loc135 = loc(fused[#loc68, #loc69])
#loc136 = loc(fused[#loc70, #loc71])
#loc137 = loc(fused[#loc73, #loc72])
#loc138 = loc(fused[#loc76, #loc77])
#loc139 = loc(fused[#loc78, #loc79])
#loc140 = loc(fused[#loc80, #loc81])
#loc141 = loc(fused[#loc82, #loc83])
#loc142 = loc(fused[#loc84, #loc85])
#loc143 = loc(fused[#loc86, #loc87])
#loc144 = loc(fused[#loc89, #loc85])
#loc145 = loc(fused[#loc90, #loc91])
#loc146 = loc(fused[#loc93, #loc94])
#loc147 = loc(fused[#loc92, #loc95])
#loc148 = loc(fused[#loc97, #loc98, #loc99, #loc91])
#loc149 = loc(fused[#loc100, #loc101])
