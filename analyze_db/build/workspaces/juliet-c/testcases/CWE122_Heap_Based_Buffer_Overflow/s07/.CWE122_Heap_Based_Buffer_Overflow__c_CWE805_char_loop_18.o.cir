!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc149)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc150)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc152)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    cir.goto "source" loc(#loc156)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc18)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc19)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc157)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc158)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc159)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc27)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc162)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc29)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc31)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc163)
    } loc(#loc161)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc32)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc35)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc164)
    cir.scope {
      %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc166)
      %15 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc167)
      %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
      %18 = cir.const #cir.int<67> : !s32i loc(#loc43)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc44)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc44)
      cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc168)
      %23 = cir.const #cir.int<0> : !s32i loc(#loc48)
      %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc48)
      %25 = cir.const #cir.int<100> : !s32i loc(#loc49)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc49)
      %28 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
      %29 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc51)
      cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc169)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc54)
        cir.store %42, %14 : !u64i, !cir.ptr<!u64i> loc(#loc171)
        cir.for : cond {
          %43 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc56)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc57)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc57)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc172)
          cir.condition(%46) loc(#loc58)
        } body {
          cir.scope {
            %43 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc60)
            %44 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc61)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc61)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc61)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
            %48 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc63)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc64)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc174)
          } loc(#loc173)
          cir.yield loc(#loc53)
        } step {
          %43 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc66)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc67)
          cir.store %44, %14 : !u64i, !cir.ptr<!u64i> loc(#loc175)
          cir.yield loc(#loc170)
        } loc(#loc170)
      } loc(#loc170)
      %30 = cir.const #cir.int<0> : !s32i loc(#loc68)
      %31 = cir.cast(integral, %30 : !s32i), !s8i loc(#loc68)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      %33 = cir.const #cir.int<100> : !s32i loc(#loc70)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc71)
      %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc70)
      %36 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc72)
      cir.store %31, %36 : !s8i, !cir.ptr<!s8i> loc(#loc176)
      %37 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
      cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      %38 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc75)
      %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
      %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc76)
      cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
    } loc(#loc165)
    cir.return loc(#loc10)
  } loc(#loc153)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc79)
    cir.return loc(#loc78)
  } loc(#loc177)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc85)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
    cir.goto "source" loc(#loc182)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc89)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc90)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc91)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc91)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc183)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc184)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc188)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc101)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc103)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc101)
      } loc(#loc189)
    } loc(#loc187)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc104)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc104)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc107)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    cir.scope {
      %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc192)
      %15 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc193)
      %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc114)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
      %18 = cir.const #cir.int<67> : !s32i loc(#loc115)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc116)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc116)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc116)
      cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc194)
      %23 = cir.const #cir.int<0> : !s32i loc(#loc120)
      %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc120)
      %25 = cir.const #cir.int<100> : !s32i loc(#loc121)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc122)
      %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc121)
      %28 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc123)
      %29 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc123)
      cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc195)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc126)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc126)
        cir.store %42, %14 : !u64i, !cir.ptr<!u64i> loc(#loc197)
        cir.for : cond {
          %43 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc128)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc129)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc129)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc198)
          cir.condition(%46) loc(#loc130)
        } body {
          cir.scope {
            %43 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc132)
            %44 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc133)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc133)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc133)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
            %48 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc135)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc136)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc200)
          } loc(#loc199)
          cir.yield loc(#loc125)
        } step {
          %43 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc138)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc139)
          cir.store %44, %14 : !u64i, !cir.ptr<!u64i> loc(#loc201)
          cir.yield loc(#loc196)
        } loc(#loc196)
      } loc(#loc196)
      %30 = cir.const #cir.int<0> : !s32i loc(#loc140)
      %31 = cir.cast(integral, %30 : !s32i), !s8i loc(#loc140)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
      %33 = cir.const #cir.int<100> : !s32i loc(#loc142)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc143)
      %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc142)
      %36 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc144)
      cir.store %31, %36 : !s8i, !cir.ptr<!s8i> loc(#loc202)
      %37 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc146)
      %38 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc147)
      %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
      %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc148)
      cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc147)
    } loc(#loc191)
    cir.return loc(#loc82)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":23:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":47:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":25:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":25:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":26:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":26:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":27:10)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":28:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":30:20)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":30:27)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":30:30)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":30:41)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":30:42)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":30:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":31:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":31:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":31:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":31:17)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":31:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":31:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":31:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":31:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":32:15)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":32:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":32:10)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":32:11)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":33:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":46:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":34:16)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":35:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":35:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":36:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":36:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":36:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":36:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":36:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":37:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":37:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":37:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":37:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":39:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":42:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":39:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":39:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":39:21)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":39:25)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":39:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":40:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":41:30)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":41:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":41:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":41:18)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":41:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":41:31)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":39:31)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":39:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":43:23)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":43:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":43:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":43:18)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":43:19)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":44:19)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":44:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":45:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":45:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":80:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":83:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":82:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":82:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":54:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":78:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":56:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":56:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":57:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":57:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":58:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":58:10)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":59:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":61:20)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":61:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":61:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":61:42)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":61:43)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":61:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":62:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":62:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":62:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":62:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":62:23)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":62:24)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":62:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":62:29)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":63:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":63:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":63:10)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":63:11)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":64:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":77:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":65:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":65:16)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":66:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":66:24)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":67:16)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":67:24)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":67:29)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":67:33)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":67:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":67:34)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":68:25)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":68:16)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":68:20)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":68:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":70:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":73:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":70:18)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":70:14)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":70:21)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":70:25)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":70:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":71:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":72:30)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":72:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":72:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":72:18)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":72:19)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":72:31)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":70:31)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":70:30)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":74:23)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":74:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":74:14)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":74:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":74:19)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":75:19)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":75:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":76:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c":76:14)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc152 = loc(fused[#loc7, #loc8])
#loc153 = loc(fused[#loc9, #loc10])
#loc154 = loc(fused[#loc11, #loc12])
#loc155 = loc(fused[#loc14, #loc13])
#loc156 = loc(fused[#loc15, #loc16])
#loc157 = loc(fused[#loc20, #loc21])
#loc158 = loc(fused[#loc19, #loc21])
#loc159 = loc(fused[#loc18, #loc22])
#loc160 = loc(fused[#loc23, #loc22])
#loc161 = loc(fused[#loc24, #loc25])
#loc162 = loc(fused[#loc26, #loc27])
#loc163 = loc(fused[#loc28, #loc25])
#loc164 = loc(fused[#loc33, #loc32])
#loc165 = loc(fused[#loc36, #loc37])
#loc166 = loc(fused[#loc38, #loc39])
#loc167 = loc(fused[#loc40, #loc41])
#loc168 = loc(fused[#loc46, #loc47])
#loc169 = loc(fused[#loc51, #loc48])
#loc170 = loc(fused[#loc52, #loc53])
#loc171 = loc(fused[#loc55, #loc54])
#loc172 = loc(fused[#loc56, #loc57])
#loc173 = loc(fused[#loc59, #loc53])
#loc174 = loc(fused[#loc62, #loc65])
#loc175 = loc(fused[#loc67, #loc66])
#loc176 = loc(fused[#loc69, #loc68])
#loc177 = loc(fused[#loc77, #loc78])
#loc178 = loc(fused[#loc79, #loc80])
#loc179 = loc(fused[#loc81, #loc82])
#loc180 = loc(fused[#loc83, #loc84])
#loc181 = loc(fused[#loc86, #loc85])
#loc182 = loc(fused[#loc87, #loc88])
#loc183 = loc(fused[#loc92, #loc93])
#loc184 = loc(fused[#loc91, #loc93])
#loc185 = loc(fused[#loc90, #loc94])
#loc186 = loc(fused[#loc95, #loc94])
#loc187 = loc(fused[#loc96, #loc97])
#loc188 = loc(fused[#loc98, #loc99])
#loc189 = loc(fused[#loc100, #loc97])
#loc190 = loc(fused[#loc105, #loc104])
#loc191 = loc(fused[#loc108, #loc109])
#loc192 = loc(fused[#loc110, #loc111])
#loc193 = loc(fused[#loc112, #loc113])
#loc194 = loc(fused[#loc118, #loc119])
#loc195 = loc(fused[#loc123, #loc120])
#loc196 = loc(fused[#loc124, #loc125])
#loc197 = loc(fused[#loc127, #loc126])
#loc198 = loc(fused[#loc128, #loc129])
#loc199 = loc(fused[#loc131, #loc125])
#loc200 = loc(fused[#loc134, #loc137])
#loc201 = loc(fused[#loc139, #loc138])
#loc202 = loc(fused[#loc141, #loc140])
