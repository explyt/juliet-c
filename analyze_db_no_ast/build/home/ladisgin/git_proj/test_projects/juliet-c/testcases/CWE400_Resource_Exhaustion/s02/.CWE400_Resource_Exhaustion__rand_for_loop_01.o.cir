!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc96)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc97)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc13)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc13)
      cir.yield %20 : !u32i loc(#loc13)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc13)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc13)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc13)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc13)
      cir.yield %24 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc13)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.scope {
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc103)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc18)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc18)
      cir.store %11, %9 : !u64i, !cir.ptr<!u64i> loc(#loc103)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc21)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc21)
        cir.store %13, %9 : !u64i, !cir.ptr<!u64i> loc(#loc105)
        cir.for : cond {
          %14 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc23)
          %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc24)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc106)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc25)
          cir.condition(%18) loc(#loc25)
        } body {
          cir.scope {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc27)
          } loc(#loc107)
          cir.yield loc(#loc20)
        } step {
          %14 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc28)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc29)
          cir.store %15, %9 : !u64i, !cir.ptr<!u64i> loc(#loc108)
          cir.yield loc(#loc104)
        } loc(#loc104)
      } loc(#loc104)
    } loc(#loc102)
    cir.return loc(#loc7)
  } loc(#loc98)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc109)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc43)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc117)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc48)
      %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc48)
      cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc117)
      cir.scope {
        %7 = cir.const #cir.int<0> : !s32i loc(#loc51)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc51)
        cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc119)
        cir.for : cond {
          %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc53)
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc54)
          %12 = cir.cmp(lt, %9, %11) : !u64i, !s32i loc(#loc120)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc55)
          cir.condition(%13) loc(#loc55)
        } body {
          cir.scope {
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc57)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc57)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
          } loc(#loc121)
          cir.yield loc(#loc50)
        } step {
          %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc60)
          cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc122)
          cir.yield loc(#loc118)
        } loc(#loc118)
      } loc(#loc118)
    } loc(#loc116)
    cir.return loc(#loc37)
  } loc(#loc112)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc66)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc68)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc68)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc68)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc68)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc68)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc68)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc68)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc68)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc68)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc68)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc68)
      cir.yield %20 : !u32i loc(#loc68)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc68)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc68)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc68)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc68)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc68)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc68)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc68)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc68)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc68)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc68)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc68)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc68)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc68)
      cir.yield %24 : !u32i loc(#loc68)
    }) : (!cir.bool) -> !u32i loc(#loc68)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc68)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.scope {
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc128)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc73)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc73)
      cir.store %11, %9 : !u64i, !cir.ptr<!u64i> loc(#loc128)
      cir.scope {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc77)
        %14 = cir.cmp(gt, %12, %13) : !s32i, !s32i loc(#loc130)
        %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc78)
        %16 = cir.ternary(%15, true {
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
          %18 = cir.const #cir.int<20> : !s32i loc(#loc81)
          %19 = cir.cmp(le, %17, %18) : !s32i, !s32i loc(#loc131)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc82)
          %21 = cir.ternary(%20, true {
            %22 = cir.const #true loc(#loc79)
            cir.yield %22 : !cir.bool loc(#loc79)
          }, false {
            %22 = cir.const #false loc(#loc79)
            cir.yield %22 : !cir.bool loc(#loc79)
          }) : (!cir.bool) -> !cir.bool loc(#loc79)
          cir.yield %21 : !cir.bool loc(#loc79)
        }, false {
          %17 = cir.const #false loc(#loc79)
          cir.yield %17 : !cir.bool loc(#loc79)
        }) : (!cir.bool) -> !cir.bool loc(#loc79)
        cir.if %16 {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc86)
            %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc86)
            cir.store %18, %9 : !u64i, !cir.ptr<!u64i> loc(#loc134)
            cir.for : cond {
              %19 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc88)
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc89)
              %22 = cir.cmp(lt, %19, %21) : !u64i, !s32i loc(#loc135)
              %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc90)
              cir.condition(%23) loc(#loc90)
            } body {
              cir.scope {
                %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc92)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc92)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc93)
              } loc(#loc136)
              cir.yield loc(#loc85)
            } step {
              %19 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc94)
              %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc95)
              cir.store %20, %9 : !u64i, !cir.ptr<!u64i> loc(#loc137)
              cir.yield loc(#loc133)
            } loc(#loc133)
          } loc(#loc133)
        } loc(#loc132)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc62)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":34:23)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":22:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":37:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":24:5)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":24:9)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":26:14)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":26:13)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":26:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":28:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":28:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":29:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":36:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":30:9)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":30:20)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":32:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":35:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":32:18)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":32:14)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":32:21)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":32:33)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":32:23)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":33:9)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":34:13)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":32:41)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":32:40)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":82:1)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":86:1)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":84:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":84:13)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":85:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":85:13)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":44:1)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":59:1)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":46:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":46:9)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":48:14)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":48:13)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":48:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":50:13)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":50:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":51:5)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":58:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":52:9)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":52:20)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":54:9)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":57:9)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":54:18)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":54:14)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":54:21)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":54:33)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":54:23)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":55:9)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":56:23)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":56:13)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":54:41)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":54:40)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":62:1)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":80:1)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":64:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":64:9)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":66:14)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":66:13)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":66:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":68:13)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":68:5)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":69:5)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":79:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":70:9)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":70:20)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":72:9)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":78:9)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":72:13)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":72:21)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":72:19)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":72:23)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":72:26)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":72:35)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":72:32)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":73:9)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":74:13)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":77:13)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":74:22)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":74:18)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":74:25)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":74:37)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":74:27)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":75:13)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":76:27)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":76:17)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":74:45)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_01.c":74:44)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc6, #loc7])
#loc99 = loc(fused[#loc8, #loc9])
#loc100 = loc(fused[#loc12, #loc10])
#loc101 = loc(fused[#loc14, #loc13])
#loc102 = loc(fused[#loc15, #loc16])
#loc103 = loc(fused[#loc17, #loc18])
#loc104 = loc(fused[#loc19, #loc20])
#loc105 = loc(fused[#loc22, #loc21])
#loc106 = loc(fused[#loc23, #loc24])
#loc107 = loc(fused[#loc26, #loc20])
#loc108 = loc(fused[#loc29, #loc28])
#loc109 = loc(fused[#loc30, #loc31])
#loc110 = loc(fused[#loc32, #loc33])
#loc111 = loc(fused[#loc34, #loc35])
#loc112 = loc(fused[#loc36, #loc37])
#loc113 = loc(fused[#loc38, #loc39])
#loc114 = loc(fused[#loc42, #loc40])
#loc115 = loc(fused[#loc44, #loc43])
#loc116 = loc(fused[#loc45, #loc46])
#loc117 = loc(fused[#loc47, #loc48])
#loc118 = loc(fused[#loc49, #loc50])
#loc119 = loc(fused[#loc52, #loc51])
#loc120 = loc(fused[#loc53, #loc54])
#loc121 = loc(fused[#loc56, #loc50])
#loc122 = loc(fused[#loc60, #loc59])
#loc123 = loc(fused[#loc61, #loc62])
#loc124 = loc(fused[#loc63, #loc64])
#loc125 = loc(fused[#loc67, #loc65])
#loc126 = loc(fused[#loc69, #loc68])
#loc127 = loc(fused[#loc70, #loc71])
#loc128 = loc(fused[#loc72, #loc73])
#loc129 = loc(fused[#loc74, #loc75])
#loc130 = loc(fused[#loc76, #loc77])
#loc131 = loc(fused[#loc80, #loc81])
#loc132 = loc(fused[#loc83, #loc75])
#loc133 = loc(fused[#loc84, #loc85])
#loc134 = loc(fused[#loc87, #loc86])
#loc135 = loc(fused[#loc88, #loc89])
#loc136 = loc(fused[#loc91, #loc85])
#loc137 = loc(fused[#loc95, #loc94])
