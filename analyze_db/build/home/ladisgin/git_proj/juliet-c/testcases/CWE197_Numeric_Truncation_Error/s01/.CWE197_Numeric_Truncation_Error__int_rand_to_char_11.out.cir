!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":29:16)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":99:10)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":99:14)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":99:20)
#loc48 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":99:32)
#loc130 = loc(fused[#loc45, #loc46])
#loc131 = loc(fused[#loc47, #loc48])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc111)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc112)
  cir.func private @printHexCharLine(!s8i) loc(#loc113)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc115)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc14)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc119)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc119)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc120)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc21)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc21)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc21)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc21)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc21)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc21)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc21)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc21)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc21)
    cir.br ^bb5(%23 : !u32i) loc(#loc21)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc21)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc21)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc21)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc21)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc21)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc21)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc21)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc21)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc21)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc21)
    cir.br ^bb5(%39 : !u32i) loc(#loc21)
  ^bb5(%40: !u32i loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":29:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc21)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc21)
    cir.store %41, %1 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc17)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc122)
  ^bb9:  // pred: ^bb8
    %42 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %43 = cir.cast(integral, %42 : !s32i), !s8i loc(#loc10)
    cir.store %43, %0 : !s8i, !cir.ptr<!s8i> loc(#loc115)
    %44 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc25)
    cir.call @printHexCharLine(%44) : (!s8i) -> () loc(#loc26)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc8)
  } loc(#loc114)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc123)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc126)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc127)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc128)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc42)
  cir.func @main(%arg0: !s32i loc(fused[#loc45, #loc46]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc131)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc49)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc51)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc51)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc52)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %8 = cir.get_global @CWE197_Numeric_Truncation_Error__int_rand_to_char_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc132)
    cir.call @CWE197_Numeric_Truncation_Error__int_rand_to_char_11_good() : () -> () loc(#loc54)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc41)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %13 = cir.get_global @CWE197_Numeric_Truncation_Error__int_rand_to_char_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call @CWE197_Numeric_Truncation_Error__int_rand_to_char_11_bad() : () -> () loc(#loc58)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    cir.return %17 : !s32i loc(#loc134)
  } loc(#loc129)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc137)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc138)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc73)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc141)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc141)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc77)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc77)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc142)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    cir.br ^bb4 loc(#loc80)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<127> : !s32i loc(#loc83)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc84)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc83)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    cir.br ^bb4 loc(#loc76)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc76)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc144)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc69)
    cir.store %14, %0 : !s8i, !cir.ptr<!s8i> loc(#loc137)
    %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc88)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc89)
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc67)
  } loc(#loc136)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc146)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc147)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc97)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    cir.br ^bb1 loc(#loc149)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc150)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc150)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc151)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<127> : !s32i loc(#loc104)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc105)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc104)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.br ^bb3 loc(#loc100)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc100)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc153)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc93)
    cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc146)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc109)
    cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc110)
    cir.br ^bb6 loc(#loc108)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc91)
  } loc(#loc145)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":21:1)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":36:1)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":33:9)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":33:31)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":23:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":23:9)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":25:13)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":25:12)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":25:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":26:5)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":30:5)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":26:8)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":26:26)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":27:5)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":29:9)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":31:5)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":35:5)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":34:26)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":34:9)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":83:1)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":87:1)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":85:5)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":85:14)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":86:5)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":86:14)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":104:15)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":106:15)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":109:15)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":111:15)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":99:1)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":114:1)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":100:1)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":102:27)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":102:22)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":102:5)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":104:5)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":105:5)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":105:63)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":106:5)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":109:5)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":110:5)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":110:62)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":111:5)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":113:12)
#loc62 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":113:5)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc65 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":51:19)
#loc66 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":43:1)
#loc67 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":63:1)
#loc68 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":60:9)
#loc69 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":60:31)
#loc70 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":45:5)
#loc71 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":45:9)
#loc72 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":47:13)
#loc73 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":47:12)
#loc74 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":47:5)
#loc75 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":48:5)
#loc76 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":57:5)
#loc77 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":48:8)
#loc78 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":48:27)
#loc79 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":49:5)
#loc80 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":52:5)
#loc81 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":54:5)
#loc82 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":51:9)
#loc83 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":56:16)
#loc84 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":56:25)
#loc85 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":56:9)
#loc86 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":58:5)
#loc87 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":62:5)
#loc88 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":61:26)
#loc89 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":61:9)
#loc90 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":66:1)
#loc91 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":81:1)
#loc92 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":78:9)
#loc93 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":78:31)
#loc94 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":68:5)
#loc95 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":68:9)
#loc96 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":70:13)
#loc97 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":70:12)
#loc98 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":70:5)
#loc99 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":71:5)
#loc100 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":75:5)
#loc101 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":71:8)
#loc102 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":71:26)
#loc103 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":72:5)
#loc104 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":74:16)
#loc105 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":74:25)
#loc106 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":74:9)
#loc107 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":76:5)
#loc108 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":80:5)
#loc109 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":79:26)
#loc110 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":79:9)
#loc111 = loc(fused[#loc1, #loc2])
#loc112 = loc(fused[#loc3, #loc4])
#loc113 = loc(fused[#loc5, #loc6])
#loc114 = loc(fused[#loc7, #loc8])
#loc115 = loc(fused[#loc9, #loc10])
#loc116 = loc(fused[#loc11, #loc12])
#loc117 = loc(fused[#loc15, #loc13])
#loc118 = loc(fused[#loc16, #loc17])
#loc119 = loc(fused[#loc18, #loc19])
#loc120 = loc(fused[#loc20, #loc17])
#loc121 = loc(fused[#loc22, #loc21])
#loc122 = loc(fused[#loc23, #loc24])
#loc123 = loc(fused[#loc27, #loc28])
#loc124 = loc(fused[#loc29, #loc30])
#loc125 = loc(fused[#loc31, #loc32])
#loc126 = loc(fused[#loc33, #loc34])
#loc127 = loc(fused[#loc35, #loc36])
#loc128 = loc(fused[#loc37, #loc38])
#loc129 = loc(fused[#loc43, #loc44])
#loc132 = loc(fused[#loc54, #loc55])
#loc133 = loc(fused[#loc58, #loc59])
#loc134 = loc(fused[#loc62, #loc61])
#loc135 = loc(fused[#loc63, #loc64])
#loc136 = loc(fused[#loc66, #loc67])
#loc137 = loc(fused[#loc68, #loc69])
#loc138 = loc(fused[#loc70, #loc71])
#loc139 = loc(fused[#loc74, #loc72])
#loc140 = loc(fused[#loc75, #loc76])
#loc141 = loc(fused[#loc77, #loc78])
#loc142 = loc(fused[#loc79, #loc80, #loc81, #loc76])
#loc143 = loc(fused[#loc85, #loc84])
#loc144 = loc(fused[#loc86, #loc87])
#loc145 = loc(fused[#loc90, #loc91])
#loc146 = loc(fused[#loc92, #loc93])
#loc147 = loc(fused[#loc94, #loc95])
#loc148 = loc(fused[#loc98, #loc96])
#loc149 = loc(fused[#loc99, #loc100])
#loc150 = loc(fused[#loc101, #loc102])
#loc151 = loc(fused[#loc103, #loc100])
#loc152 = loc(fused[#loc106, #loc105])
#loc153 = loc(fused[#loc107, #loc108])
