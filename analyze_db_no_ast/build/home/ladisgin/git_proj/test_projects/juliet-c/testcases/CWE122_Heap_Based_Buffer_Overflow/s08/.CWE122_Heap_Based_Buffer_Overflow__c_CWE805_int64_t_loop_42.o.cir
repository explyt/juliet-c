!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":21:28)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":21:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":53:32)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":53:42)
#loc140 = loc(fused[#loc7, #loc8])
#loc168 = loc(fused[#loc77, #loc78])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc138)
  cir.func internal private  @badSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc141)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc142)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc143)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc144)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc18)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc19)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s64i>, !s32i loc(#loc146)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc20)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc22)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc24)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc22)
      } loc(#loc147)
    } loc(#loc145)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc25)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc148)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc148)
    cir.return %10 : !cir.ptr<!s64i> loc(#loc148)
  } loc(#loc139)
  cir.func private  @printLongLongLine(!s64i) loc(#loc149)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc150)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc35)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc153)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc37)
    %3 = cir.call @badSource(%2) : (!cir.ptr<!s64i>) -> !cir.ptr<!s64i> loc(#loc38)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc154)
    cir.scope {
      %4 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc156)
      %5 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc156)
      cir.store %5, %4 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc156)
      cir.scope {
        %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc158)
        cir.scope {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc51)
          cir.store %15, %6 : !u64i, !cir.ptr<!u64i> loc(#loc160)
          cir.for : cond {
            %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %17 = cir.const #cir.int<100> : !s32i loc(#loc54)
            %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc54)
            %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc161)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc55)
            cir.condition(%20) loc(#loc55)
          } body {
            cir.scope {
              %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc57)
              %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc58)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %16 : !u64i), !cir.ptr<!s64i> loc(#loc58)
              %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc58)
              %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc59)
              %21 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc60)
              %22 = cir.ptr_stride(%20 : !cir.ptr<!s64i>, %21 : !u64i), !cir.ptr<!s64i> loc(#loc61)
              cir.store %19, %22 : !s64i, !cir.ptr<!s64i> loc(#loc163)
            } loc(#loc162)
            cir.yield loc(#loc50)
          } step {
            %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc63)
            %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc64)
            cir.store %17, %6 : !u64i, !cir.ptr<!u64i> loc(#loc164)
            cir.yield loc(#loc159)
          } loc(#loc159)
        } loc(#loc159)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc65)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc66)
        %9 = cir.ptr_stride(%7 : !cir.ptr<!s64i>, %8 : !s32i), !cir.ptr<!s64i> loc(#loc67)
        %10 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc65)
        cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc68)
        %11 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc69)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc70)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc70)
        cir.call @free(%13) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
      } loc(#loc157)
    } loc(#loc155)
    cir.return loc(#loc32)
  } loc(#loc151)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc72)
  } loc(#loc165)
  cir.func internal private  @goodG2BSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc77, #loc78])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc76)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc79)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc80)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc81)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc81)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc169)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc170)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc171)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc172)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc88)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc89)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s64i>, !s32i loc(#loc174)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc90)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc92)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc94)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc92)
      } loc(#loc175)
    } loc(#loc173)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc95)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc176)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc176)
    cir.return %10 : !cir.ptr<!s64i> loc(#loc176)
  } loc(#loc167)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc101)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc179)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc103)
    %3 = cir.call @goodG2BSource(%2) : (!cir.ptr<!s64i>) -> !cir.ptr<!s64i> loc(#loc104)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc180)
    cir.scope {
      %4 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc182)
      %5 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc182)
      cir.store %5, %4 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc182)
      cir.scope {
        %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc184)
        cir.scope {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc117)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc117)
          cir.store %15, %6 : !u64i, !cir.ptr<!u64i> loc(#loc186)
          cir.for : cond {
            %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc119)
            %17 = cir.const #cir.int<100> : !s32i loc(#loc120)
            %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc120)
            %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc187)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc121)
            cir.condition(%20) loc(#loc121)
          } body {
            cir.scope {
              %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc123)
              %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc124)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %16 : !u64i), !cir.ptr<!s64i> loc(#loc124)
              %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc124)
              %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc125)
              %21 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc126)
              %22 = cir.ptr_stride(%20 : !cir.ptr<!s64i>, %21 : !u64i), !cir.ptr<!s64i> loc(#loc127)
              cir.store %19, %22 : !s64i, !cir.ptr<!s64i> loc(#loc189)
            } loc(#loc188)
            cir.yield loc(#loc116)
          } step {
            %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc129)
            %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc130)
            cir.store %17, %6 : !u64i, !cir.ptr<!u64i> loc(#loc190)
            cir.yield loc(#loc185)
          } loc(#loc185)
        } loc(#loc185)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc131)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc132)
        %9 = cir.ptr_stride(%7 : !cir.ptr<!s64i>, %8 : !s32i), !cir.ptr<!s64i> loc(#loc133)
        %10 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc131)
        cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc134)
        %11 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc135)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc136)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc136)
        cir.call @free(%13) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc135)
      } loc(#loc183)
    } loc(#loc181)
    cir.return loc(#loc98)
  } loc(#loc177)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":27:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":24:23)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":24:30)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":24:33)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":24:47)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":24:48)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":24:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":25:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":25:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":25:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":25:14)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":25:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":25:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":25:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":25:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":26:12)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":26:5)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc29 = loc("/usr/include/stdlib.h":687:1)
#loc30 = loc("/usr/include/stdlib.h":687:32)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":29:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":47:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":31:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":31:15)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":32:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":32:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":33:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":33:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":33:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":33:26)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":34:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":46:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":35:33)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":36:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":45:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":37:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":37:20)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":39:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":42:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":39:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":39:18)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":39:25)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":39:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":39:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":40:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":41:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":41:27)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":41:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":41:22)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":41:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":41:35)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":39:35)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":39:34)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":43:31)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":43:36)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":43:37)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":43:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":44:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":44:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":82:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":85:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":84:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":84:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":53:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":59:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":54:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":56:23)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":56:30)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":56:34)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":56:48)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":56:49)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":56:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":57:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":57:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":57:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":57:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":57:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":57:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":57:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":57:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":57:29)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":58:12)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":58:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":62:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":80:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":64:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":64:15)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":65:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":65:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":66:26)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":66:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":66:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":66:30)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":67:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":79:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":68:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":68:33)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":69:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":78:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":70:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":70:20)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":72:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":75:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":72:22)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":72:18)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":72:25)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":72:29)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":72:27)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":73:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":74:34)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":74:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":74:17)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":74:22)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":74:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":74:35)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":72:35)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":72:34)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":76:31)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":76:36)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":76:37)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":76:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":77:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c":77:18)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc12, #loc13])
#loc142 = loc(fused[#loc11, #loc13])
#loc143 = loc(fused[#loc10, #loc14])
#loc144 = loc(fused[#loc15, #loc14])
#loc145 = loc(fused[#loc16, #loc17])
#loc146 = loc(fused[#loc18, #loc19])
#loc147 = loc(fused[#loc21, #loc17])
#loc148 = loc(fused[#loc26, #loc25])
#loc149 = loc(fused[#loc27, #loc28])
#loc150 = loc(fused[#loc29, #loc30])
#loc151 = loc(fused[#loc31, #loc32])
#loc152 = loc(fused[#loc33, #loc34])
#loc153 = loc(fused[#loc36, #loc35])
#loc154 = loc(fused[#loc39, #loc40])
#loc155 = loc(fused[#loc41, #loc42])
#loc156 = loc(fused[#loc43, #loc44])
#loc157 = loc(fused[#loc45, #loc46])
#loc158 = loc(fused[#loc47, #loc48])
#loc159 = loc(fused[#loc49, #loc50])
#loc160 = loc(fused[#loc52, #loc51])
#loc161 = loc(fused[#loc53, #loc54])
#loc162 = loc(fused[#loc56, #loc50])
#loc163 = loc(fused[#loc59, #loc62])
#loc164 = loc(fused[#loc64, #loc63])
#loc165 = loc(fused[#loc71, #loc72])
#loc166 = loc(fused[#loc73, #loc74])
#loc167 = loc(fused[#loc75, #loc76])
#loc169 = loc(fused[#loc82, #loc83])
#loc170 = loc(fused[#loc81, #loc83])
#loc171 = loc(fused[#loc80, #loc84])
#loc172 = loc(fused[#loc85, #loc84])
#loc173 = loc(fused[#loc86, #loc87])
#loc174 = loc(fused[#loc88, #loc89])
#loc175 = loc(fused[#loc91, #loc87])
#loc176 = loc(fused[#loc96, #loc95])
#loc177 = loc(fused[#loc97, #loc98])
#loc178 = loc(fused[#loc99, #loc100])
#loc179 = loc(fused[#loc102, #loc101])
#loc180 = loc(fused[#loc105, #loc106])
#loc181 = loc(fused[#loc107, #loc108])
#loc182 = loc(fused[#loc109, #loc110])
#loc183 = loc(fused[#loc111, #loc112])
#loc184 = loc(fused[#loc113, #loc114])
#loc185 = loc(fused[#loc115, #loc116])
#loc186 = loc(fused[#loc118, #loc117])
#loc187 = loc(fused[#loc119, #loc120])
#loc188 = loc(fused[#loc122, #loc116])
#loc189 = loc(fused[#loc125, #loc128])
#loc190 = loc(fused[#loc130, #loc129])
